// The Module object: Our interface to the outside world. We import
// and export values on it, and do the work to get that through
// closure compiler if necessary. There are various ways Module can be used:
// 1. Not defined. We create it here
// 2. A function parameter, function(Module) { ..generated code.. }
// 3. pre-run appended it, var Module = {}; ..generated code..
// 4. External script tag defines var Module.
// We need to do an eval in order to handle the closure compiler
// case, where this code here is minified but Module was defined
// elsewhere (e.g. case 4 above). We also need to check if Module
// already exists (e.g. case 3 above).
// Note that if you want to run closure, and also to use Module
// after the generated code, you will need to define   var Module = {};
// before the code. Then that object will be used in the code, and you
// can continue to use Module afterwards as well.
var Module;
if (!Module) Module = (typeof Module !== 'undefined' ? Module : null) || {};

// Sometimes an existing Module object exists with properties
// meant to overwrite the default module functionality. Here
// we collect those properties and reapply _after_ we configure
// the current environment's defaults to avoid having to be so
// defensive during initialization.
var moduleOverrides = {};
for (var key in Module) {
  if (Module.hasOwnProperty(key)) {
    moduleOverrides[key] = Module[key];
  }
}

// The environment setup code below is customized to use Module.
// *** Environment setup code ***
var ENVIRONMENT_IS_WEB = false;
var ENVIRONMENT_IS_WORKER = false;
var ENVIRONMENT_IS_NODE = false;
var ENVIRONMENT_IS_SHELL = false;

// Three configurations we can be running in:
// 1) We could be the application main() thread running in the main JS UI thread. (ENVIRONMENT_IS_WORKER == false and ENVIRONMENT_IS_PTHREAD == false)
// 2) We could be the application main() thread proxied to worker. (with Emscripten -s PROXY_TO_WORKER=1) (ENVIRONMENT_IS_WORKER == true, ENVIRONMENT_IS_PTHREAD == false)
// 3) We could be an application pthread running in a worker. (ENVIRONMENT_IS_WORKER == true and ENVIRONMENT_IS_PTHREAD == true)

if (Module['ENVIRONMENT']) {
  if (Module['ENVIRONMENT'] === 'WEB') {
    ENVIRONMENT_IS_WEB = true;
  } else if (Module['ENVIRONMENT'] === 'WORKER') {
    ENVIRONMENT_IS_WORKER = true;
  } else if (Module['ENVIRONMENT'] === 'NODE') {
    ENVIRONMENT_IS_NODE = true;
  } else if (Module['ENVIRONMENT'] === 'SHELL') {
    ENVIRONMENT_IS_SHELL = true;
  } else {
    throw new Error('The provided Module[\'ENVIRONMENT\'] value is not valid. It must be one of: WEB|WORKER|NODE|SHELL.');
  }
} else {
  ENVIRONMENT_IS_WEB = typeof window === 'object';
  ENVIRONMENT_IS_WORKER = typeof importScripts === 'function';
  ENVIRONMENT_IS_NODE = typeof process === 'object' && typeof require === 'function' && !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_WORKER;
  ENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;
}


if (ENVIRONMENT_IS_NODE) {
  // Expose functionality in the same simple way that the shells work
  // Note that we pollute the global namespace here, otherwise we break in node
  if (!Module['print']) Module['print'] = console.log;
  if (!Module['printErr']) Module['printErr'] = console.warn;

  var nodeFS;
  var nodePath;

  Module['read'] = function shell_read(filename, binary) {
    if (!nodeFS) nodeFS = require('fs');
    if (!nodePath) nodePath = require('path');
    filename = nodePath['normalize'](filename);
    var ret = nodeFS['readFileSync'](filename);
    return binary ? ret : ret.toString();
  };

  Module['readBinary'] = function readBinary(filename) {
    var ret = Module['read'](filename, true);
    if (!ret.buffer) {
      ret = new Uint8Array(ret);
    }
    assert(ret.buffer);
    return ret;
  };

  Module['load'] = function load(f) {
    globalEval(read(f));
  };

  if (!Module['thisProgram']) {
    if (process['argv'].length > 1) {
      Module['thisProgram'] = process['argv'][1].replace(/\\/g, '/');
    } else {
      Module['thisProgram'] = 'unknown-program';
    }
  }

  Module['arguments'] = process['argv'].slice(2);

  if (typeof module !== 'undefined') {
    module['exports'] = Module;
  }

  process['on']('uncaughtException', function(ex) {
    // suppress ExitStatus exceptions from showing an error
    if (!(ex instanceof ExitStatus)) {
      throw ex;
    }
  });

  Module['inspect'] = function () { return '[Emscripten Module object]'; };
}
else if (ENVIRONMENT_IS_SHELL) {
  if (!Module['print']) Module['print'] = print;
  if (typeof printErr != 'undefined') Module['printErr'] = printErr; // not present in v8 or older sm

  if (typeof read != 'undefined') {
    Module['read'] = read;
  } else {
    Module['read'] = function shell_read() { throw 'no read() available' };
  }

  Module['readBinary'] = function readBinary(f) {
    if (typeof readbuffer === 'function') {
      return new Uint8Array(readbuffer(f));
    }
    var data = read(f, 'binary');
    assert(typeof data === 'object');
    return data;
  };

  if (typeof scriptArgs != 'undefined') {
    Module['arguments'] = scriptArgs;
  } else if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

  if (typeof quit === 'function') {
    Module['quit'] = function(status, toThrow) {
      quit(status);
    }
  }

}
else if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
  Module['read'] = function shell_read(url) {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, false);
    xhr.send(null);
    return xhr.responseText;
  };

  if (ENVIRONMENT_IS_WORKER) {
    Module['readBinary'] = function readBinary(url) {
      var xhr = new XMLHttpRequest();
      xhr.open('GET', url, false);
      xhr.responseType = 'arraybuffer';
      xhr.send(null);
      return new Uint8Array(xhr.response);
    };
  }

  Module['readAsync'] = function readAsync(url, onload, onerror) {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, true);
    xhr.responseType = 'arraybuffer';
    xhr.onload = function xhr_onload() {
      if (xhr.status == 200 || (xhr.status == 0 && xhr.response)) { // file URLs can return 0
        onload(xhr.response);
      } else {
        onerror();
      }
    };
    xhr.onerror = onerror;
    xhr.send(null);
  };

  if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

  if (typeof console !== 'undefined') {
    if (!Module['print']) Module['print'] = function shell_print(x) {
      console.log(x);
    };
    if (!Module['printErr']) Module['printErr'] = function shell_printErr(x) {
      console.warn(x);
    };
  } else {
    // Probably a worker, and without console.log. We can do very little here...
    var TRY_USE_DUMP = false;
    if (!Module['print']) Module['print'] = (TRY_USE_DUMP && (typeof(dump) !== "undefined") ? (function(x) {
      dump(x);
    }) : (function(x) {
      // self.postMessage(x); // enable this if you want stdout to be sent as messages
    }));
  }

  if (ENVIRONMENT_IS_WORKER) {
    Module['load'] = importScripts;
  }

  if (typeof Module['setWindowTitle'] === 'undefined') {
    Module['setWindowTitle'] = function(title) { document.title = title };
  }
}
else {
  // Unreachable because SHELL is dependant on the others
  throw 'Unknown runtime environment. Where are we?';
}

function globalEval(x) {
  eval.call(null, x);
}
if (!Module['load'] && Module['read']) {
  Module['load'] = function load(f) {
    globalEval(Module['read'](f));
  };
}
if (!Module['print']) {
  Module['print'] = function(){};
}
if (!Module['printErr']) {
  Module['printErr'] = Module['print'];
}
if (!Module['arguments']) {
  Module['arguments'] = [];
}
if (!Module['thisProgram']) {
  Module['thisProgram'] = './this.program';
}
if (!Module['quit']) {
  Module['quit'] = function(status, toThrow) {
    throw toThrow;
  }
}

// *** Environment setup code ***

// Closure helpers
Module.print = Module['print'];
Module.printErr = Module['printErr'];

// Callbacks
Module['preRun'] = [];
Module['postRun'] = [];

// Merge back in the overrides
for (var key in moduleOverrides) {
  if (moduleOverrides.hasOwnProperty(key)) {
    Module[key] = moduleOverrides[key];
  }
}
// Free the object hierarchy contained in the overrides, this lets the GC
// reclaim data used e.g. in memoryInitializerRequest, which is a large typed array.
moduleOverrides = undefined;



// {{PREAMBLE_ADDITIONS}}

// === Preamble library stuff ===

// Documentation for the public APIs defined in this file must be updated in:
//    site/source/docs/api_reference/preamble.js.rst
// A prebuilt local version of the documentation is available at:
//    site/build/text/docs/api_reference/preamble.js.txt
// You can also build docs locally as HTML or other formats in site/
// An online HTML version (which may be of a different version of Emscripten)
//    is up at http://kripken.github.io/emscripten-site/docs/api_reference/preamble.js.html

//========================================
// Runtime code shared with compiler
//========================================

var Runtime = {
  setTempRet0: function (value) {
    tempRet0 = value;
    return value;
  },
  getTempRet0: function () {
    return tempRet0;
  },
  stackSave: function () {
    return STACKTOP;
  },
  stackRestore: function (stackTop) {
    STACKTOP = stackTop;
  },
  getNativeTypeSize: function (type) {
    switch (type) {
      case 'i1': case 'i8': return 1;
      case 'i16': return 2;
      case 'i32': return 4;
      case 'i64': return 8;
      case 'float': return 4;
      case 'double': return 8;
      default: {
        if (type[type.length-1] === '*') {
          return Runtime.QUANTUM_SIZE; // A pointer
        } else if (type[0] === 'i') {
          var bits = parseInt(type.substr(1));
          assert(bits % 8 === 0);
          return bits/8;
        } else {
          return 0;
        }
      }
    }
  },
  getNativeFieldSize: function (type) {
    return Math.max(Runtime.getNativeTypeSize(type), Runtime.QUANTUM_SIZE);
  },
  STACK_ALIGN: 16,
  prepVararg: function (ptr, type) {
    if (type === 'double' || type === 'i64') {
      // move so the load is aligned
      if (ptr & 7) {
        assert((ptr & 7) === 4);
        ptr += 4;
      }
    } else {
      assert((ptr & 3) === 0);
    }
    return ptr;
  },
  getAlignSize: function (type, size, vararg) {
    // we align i64s and doubles on 64-bit boundaries, unlike x86
    if (!vararg && (type == 'i64' || type == 'double')) return 8;
    if (!type) return Math.min(size, 8); // align structures internally to 64 bits
    return Math.min(size || (type ? Runtime.getNativeFieldSize(type) : 0), Runtime.QUANTUM_SIZE);
  },
  dynCall: function (sig, ptr, args) {
    if (args && args.length) {
      assert(args.length == sig.length-1);
      assert(('dynCall_' + sig) in Module, 'bad function pointer type - no table for sig \'' + sig + '\'');
      return Module['dynCall_' + sig].apply(null, [ptr].concat(args));
    } else {
      assert(sig.length == 1);
      assert(('dynCall_' + sig) in Module, 'bad function pointer type - no table for sig \'' + sig + '\'');
      return Module['dynCall_' + sig].call(null, ptr);
    }
  },
  functionPointers: [],
  addFunction: function (func) {
    for (var i = 0; i < Runtime.functionPointers.length; i++) {
      if (!Runtime.functionPointers[i]) {
        Runtime.functionPointers[i] = func;
        return 2*(1 + i);
      }
    }
    throw 'Finished up all reserved function pointers. Use a higher value for RESERVED_FUNCTION_POINTERS.';
  },
  removeFunction: function (index) {
    Runtime.functionPointers[(index-2)/2] = null;
  },
  warnOnce: function (text) {
    if (!Runtime.warnOnce.shown) Runtime.warnOnce.shown = {};
    if (!Runtime.warnOnce.shown[text]) {
      Runtime.warnOnce.shown[text] = 1;
      Module.printErr(text);
    }
  },
  funcWrappers: {},
  getFuncWrapper: function (func, sig) {
    assert(sig);
    if (!Runtime.funcWrappers[sig]) {
      Runtime.funcWrappers[sig] = {};
    }
    var sigCache = Runtime.funcWrappers[sig];
    if (!sigCache[func]) {
      // optimize away arguments usage in common cases
      if (sig.length === 1) {
        sigCache[func] = function dynCall_wrapper() {
          return Runtime.dynCall(sig, func);
        };
      } else if (sig.length === 2) {
        sigCache[func] = function dynCall_wrapper(arg) {
          return Runtime.dynCall(sig, func, [arg]);
        };
      } else {
        // general case
        sigCache[func] = function dynCall_wrapper() {
          return Runtime.dynCall(sig, func, Array.prototype.slice.call(arguments));
        };
      }
    }
    return sigCache[func];
  },
  getCompilerSetting: function (name) {
    throw 'You must build with -s RETAIN_COMPILER_SETTINGS=1 for Runtime.getCompilerSetting or emscripten_get_compiler_setting to work';
  },
  stackAlloc: function (size) { var ret = STACKTOP;STACKTOP = (STACKTOP + size)|0;STACKTOP = (((STACKTOP)+15)&-16);(assert((((STACKTOP|0) < (STACK_MAX|0))|0))|0); return ret; },
  staticAlloc: function (size) { var ret = STATICTOP;STATICTOP = (STATICTOP + (assert(!staticSealed),size))|0;STATICTOP = (((STATICTOP)+15)&-16); return ret; },
  dynamicAlloc: function (size) { assert(DYNAMICTOP_PTR);var ret = HEAP32[DYNAMICTOP_PTR>>2];var end = (((ret + size + 15)|0) & -16);HEAP32[DYNAMICTOP_PTR>>2] = end;if (end >= TOTAL_MEMORY) {var success = enlargeMemory();if (!success) {HEAP32[DYNAMICTOP_PTR>>2] = ret;return 0;}}return ret;},
  alignMemory: function (size,quantum) { var ret = size = Math.ceil((size)/(quantum ? quantum : 16))*(quantum ? quantum : 16); return ret; },
  makeBigInt: function (low,high,unsigned) { var ret = (unsigned ? ((+((low>>>0)))+((+((high>>>0)))*(+4294967296))) : ((+((low>>>0)))+((+((high|0)))*(+4294967296)))); return ret; },
  GLOBAL_BASE: 8,
  QUANTUM_SIZE: 4,
  __dummy__: 0
}



Module["Runtime"] = Runtime;



//========================================
// Runtime essentials
//========================================

var ABORT = 0; // whether we are quitting the application. no code should run after this. set in exit() and abort()
var EXITSTATUS = 0;

/** @type {function(*, string=)} */
function assert(condition, text) {
  if (!condition) {
    abort('Assertion failed: ' + text);
  }
}

var globalScope = this;

// Returns the C function with a specified identifier (for C++, you need to do manual name mangling)
function getCFunc(ident) {
  var func = Module['_' + ident]; // closure exported function
  if (!func) {
    try { func = eval('_' + ident); } catch(e) {}
  }
  assert(func, 'Cannot call unknown function ' + ident + ' (perhaps LLVM optimizations or closure removed it?)');
  return func;
}

var cwrap, ccall;
(function(){
  var JSfuncs = {
    // Helpers for cwrap -- it can't refer to Runtime directly because it might
    // be renamed by closure, instead it calls JSfuncs['stackSave'].body to find
    // out what the minified function name is.
    'stackSave': function() {
      Runtime.stackSave()
    },
    'stackRestore': function() {
      Runtime.stackRestore()
    },
    // type conversion from js to c
    'arrayToC' : function(arr) {
      var ret = Runtime.stackAlloc(arr.length);
      writeArrayToMemory(arr, ret);
      return ret;
    },
    'stringToC' : function(str) {
      var ret = 0;
      if (str !== null && str !== undefined && str !== 0) { // null string
        // at most 4 bytes per UTF-8 code point, +1 for the trailing '\0'
        var len = (str.length << 2) + 1;
        ret = Runtime.stackAlloc(len);
        stringToUTF8(str, ret, len);
      }
      return ret;
    }
  };
  // For fast lookup of conversion functions
  var toC = {'string' : JSfuncs['stringToC'], 'array' : JSfuncs['arrayToC']};

  // C calling interface.
  ccall = function ccallFunc(ident, returnType, argTypes, args, opts) {
    var func = getCFunc(ident);
    var cArgs = [];
    var stack = 0;
    assert(returnType !== 'array', 'Return type should not be "array".');
    if (args) {
      for (var i = 0; i < args.length; i++) {
        var converter = toC[argTypes[i]];
        if (converter) {
          if (stack === 0) stack = Runtime.stackSave();
          cArgs[i] = converter(args[i]);
        } else {
          cArgs[i] = args[i];
        }
      }
    }
    var ret = func.apply(null, cArgs);
    if ((!opts || !opts.async) && typeof EmterpreterAsync === 'object') {
      assert(!EmterpreterAsync.state, 'cannot start async op with normal JS calling ccall');
    }
    if (opts && opts.async) assert(!returnType, 'async ccalls cannot return values');
    if (returnType === 'string') ret = Pointer_stringify(ret);
    if (stack !== 0) {
      if (opts && opts.async) {
        EmterpreterAsync.asyncFinalizers.push(function() {
          Runtime.stackRestore(stack);
        });
        return;
      }
      Runtime.stackRestore(stack);
    }
    return ret;
  }

  var sourceRegex = /^function\s*[a-zA-Z$_0-9]*\s*\(([^)]*)\)\s*{\s*([^*]*?)[\s;]*(?:return\s*(.*?)[;\s]*)?}$/;
  function parseJSFunc(jsfunc) {
    // Match the body and the return value of a javascript function source
    var parsed = jsfunc.toString().match(sourceRegex).slice(1);
    return {arguments : parsed[0], body : parsed[1], returnValue: parsed[2]}
  }

  // sources of useful functions. we create this lazily as it can trigger a source decompression on this entire file
  var JSsource = null;
  function ensureJSsource() {
    if (!JSsource) {
      JSsource = {};
      for (var fun in JSfuncs) {
        if (JSfuncs.hasOwnProperty(fun)) {
          // Elements of toCsource are arrays of three items:
          // the code, and the return value
          JSsource[fun] = parseJSFunc(JSfuncs[fun]);
        }
      }
    }
  }

  cwrap = function cwrap(ident, returnType, argTypes) {
    argTypes = argTypes || [];
    var cfunc = getCFunc(ident);
    // When the function takes numbers and returns a number, we can just return
    // the original function
    var numericArgs = argTypes.every(function(type){ return type === 'number'});
    var numericRet = (returnType !== 'string');
    if ( numericRet && numericArgs) {
      return cfunc;
    }
    // Creation of the arguments list (["$1","$2",...,"$nargs"])
    var argNames = argTypes.map(function(x,i){return '$'+i});
    var funcstr = "(function(" + argNames.join(',') + ") {";
    var nargs = argTypes.length;
    if (!numericArgs) {
      // Generate the code needed to convert the arguments from javascript
      // values to pointers
      ensureJSsource();
      funcstr += 'var stack = ' + JSsource['stackSave'].body + ';';
      for (var i = 0; i < nargs; i++) {
        var arg = argNames[i], type = argTypes[i];
        if (type === 'number') continue;
        var convertCode = JSsource[type + 'ToC']; // [code, return]
        funcstr += 'var ' + convertCode.arguments + ' = ' + arg + ';';
        funcstr += convertCode.body + ';';
        funcstr += arg + '=(' + convertCode.returnValue + ');';
      }
    }

    // When the code is compressed, the name of cfunc is not literally 'cfunc' anymore
    var cfuncname = parseJSFunc(function(){return cfunc}).returnValue;
    // Call the function
    funcstr += 'var ret = ' + cfuncname + '(' + argNames.join(',') + ');';
    if (!numericRet) { // Return type can only by 'string' or 'number'
      // Convert the result to a string
      var strgfy = parseJSFunc(function(){return Pointer_stringify}).returnValue;
      funcstr += 'ret = ' + strgfy + '(ret);';
    }
    funcstr += "if (typeof EmterpreterAsync === 'object') { assert(!EmterpreterAsync.state, 'cannot start async op with normal JS calling cwrap') }";
    if (!numericArgs) {
      // If we had a stack, restore it
      ensureJSsource();
      funcstr += JSsource['stackRestore'].body.replace('()', '(stack)') + ';';
    }
    funcstr += 'return ret})';
    return eval(funcstr);
  };
})();
Module["ccall"] = ccall;
Module["cwrap"] = cwrap;

/** @type {function(number, number, string, boolean=)} */
function setValue(ptr, value, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': HEAP8[((ptr)>>0)]=value; break;
      case 'i8': HEAP8[((ptr)>>0)]=value; break;
      case 'i16': HEAP16[((ptr)>>1)]=value; break;
      case 'i32': HEAP32[((ptr)>>2)]=value; break;
      case 'i64': (tempI64 = [value>>>0,(tempDouble=value,(+(Math_abs(tempDouble))) >= (+1) ? (tempDouble > (+0) ? ((Math_min((+(Math_floor((tempDouble)/(+4294967296)))), (+4294967295)))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/(+4294967296))))))>>>0) : 0)],HEAP32[((ptr)>>2)]=tempI64[0],HEAP32[(((ptr)+(4))>>2)]=tempI64[1]); break;
      case 'float': HEAPF32[((ptr)>>2)]=value; break;
      case 'double': HEAPF64[((ptr)>>3)]=value; break;
      default: abort('invalid type for setValue: ' + type);
    }
}
Module["setValue"] = setValue;

/** @type {function(number, string, boolean=)} */
function getValue(ptr, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': return HEAP8[((ptr)>>0)];
      case 'i8': return HEAP8[((ptr)>>0)];
      case 'i16': return HEAP16[((ptr)>>1)];
      case 'i32': return HEAP32[((ptr)>>2)];
      case 'i64': return HEAP32[((ptr)>>2)];
      case 'float': return HEAPF32[((ptr)>>2)];
      case 'double': return HEAPF64[((ptr)>>3)];
      default: abort('invalid type for setValue: ' + type);
    }
  return null;
}
Module["getValue"] = getValue;

var ALLOC_NORMAL = 0; // Tries to use _malloc()
var ALLOC_STACK = 1; // Lives for the duration of the current function call
var ALLOC_STATIC = 2; // Cannot be freed
var ALLOC_DYNAMIC = 3; // Cannot be freed except through sbrk
var ALLOC_NONE = 4; // Do not allocate
Module["ALLOC_NORMAL"] = ALLOC_NORMAL;
Module["ALLOC_STACK"] = ALLOC_STACK;
Module["ALLOC_STATIC"] = ALLOC_STATIC;
Module["ALLOC_DYNAMIC"] = ALLOC_DYNAMIC;
Module["ALLOC_NONE"] = ALLOC_NONE;

// allocate(): This is for internal use. You can use it yourself as well, but the interface
//             is a little tricky (see docs right below). The reason is that it is optimized
//             for multiple syntaxes to save space in generated code. So you should
//             normally not use allocate(), and instead allocate memory using _malloc(),
//             initialize it with setValue(), and so forth.
// @slab: An array of data, or a number. If a number, then the size of the block to allocate,
//        in *bytes* (note that this is sometimes confusing: the next parameter does not
//        affect this!)
// @types: Either an array of types, one for each byte (or 0 if no type at that position),
//         or a single type which is used for the entire block. This only matters if there
//         is initial data - if @slab is a number, then this does not matter at all and is
//         ignored.
// @allocator: How to allocate memory, see ALLOC_*
/** @type {function((TypedArray|Array<number>|number), string, number, number=)} */
function allocate(slab, types, allocator, ptr) {
  var zeroinit, size;
  if (typeof slab === 'number') {
    zeroinit = true;
    size = slab;
  } else {
    zeroinit = false;
    size = slab.length;
  }

  var singleType = typeof types === 'string' ? types : null;

  var ret;
  if (allocator == ALLOC_NONE) {
    ret = ptr;
  } else {
    ret = [typeof _malloc === 'function' ? _malloc : Runtime.staticAlloc, Runtime.stackAlloc, Runtime.staticAlloc, Runtime.dynamicAlloc][allocator === undefined ? ALLOC_STATIC : allocator](Math.max(size, singleType ? 1 : types.length));
  }

  if (zeroinit) {
    var ptr = ret, stop;
    assert((ret & 3) == 0);
    stop = ret + (size & ~3);
    for (; ptr < stop; ptr += 4) {
      HEAP32[((ptr)>>2)]=0;
    }
    stop = ret + size;
    while (ptr < stop) {
      HEAP8[((ptr++)>>0)]=0;
    }
    return ret;
  }

  if (singleType === 'i8') {
    if (slab.subarray || slab.slice) {
      HEAPU8.set(/** @type {!Uint8Array} */ (slab), ret);
    } else {
      HEAPU8.set(new Uint8Array(slab), ret);
    }
    return ret;
  }

  var i = 0, type, typeSize, previousType;
  while (i < size) {
    var curr = slab[i];

    if (typeof curr === 'function') {
      curr = Runtime.getFunctionIndex(curr);
    }

    type = singleType || types[i];
    if (type === 0) {
      i++;
      continue;
    }
    assert(type, 'Must know what type to store in allocate!');

    if (type == 'i64') type = 'i32'; // special case: we have one i32 here, and one i32 later

    setValue(ret+i, curr, type);

    // no need to look up size unless type changes, so cache it
    if (previousType !== type) {
      typeSize = Runtime.getNativeTypeSize(type);
      previousType = type;
    }
    i += typeSize;
  }

  return ret;
}
Module["allocate"] = allocate;

// Allocate memory during any stage of startup - static memory early on, dynamic memory later, malloc when ready
function getMemory(size) {
  if (!staticSealed) return Runtime.staticAlloc(size);
  if (!runtimeInitialized) return Runtime.dynamicAlloc(size);
  return _malloc(size);
}
Module["getMemory"] = getMemory;

/** @type {function(number, number=)} */
function Pointer_stringify(ptr, length) {
  if (length === 0 || !ptr) return '';
  // TODO: use TextDecoder
  // Find the length, and check for UTF while doing so
  var hasUtf = 0;
  var t;
  var i = 0;
  while (1) {
    assert(ptr + i < TOTAL_MEMORY);
    t = HEAPU8[(((ptr)+(i))>>0)];
    hasUtf |= t;
    if (t == 0 && !length) break;
    i++;
    if (length && i == length) break;
  }
  if (!length) length = i;

  var ret = '';

  if (hasUtf < 128) {
    var MAX_CHUNK = 1024; // split up into chunks, because .apply on a huge string can overflow the stack
    var curr;
    while (length > 0) {
      curr = String.fromCharCode.apply(String, HEAPU8.subarray(ptr, ptr + Math.min(length, MAX_CHUNK)));
      ret = ret ? ret + curr : curr;
      ptr += MAX_CHUNK;
      length -= MAX_CHUNK;
    }
    return ret;
  }
  return Module['UTF8ToString'](ptr);
}
Module["Pointer_stringify"] = Pointer_stringify;

// Given a pointer 'ptr' to a null-terminated ASCII-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function AsciiToString(ptr) {
  var str = '';
  while (1) {
    var ch = HEAP8[((ptr++)>>0)];
    if (!ch) return str;
    str += String.fromCharCode(ch);
  }
}
Module["AsciiToString"] = AsciiToString;

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in ASCII form. The copy will require at most str.length+1 bytes of space in the HEAP.

function stringToAscii(str, outPtr) {
  return writeAsciiToMemory(str, outPtr, false);
}
Module["stringToAscii"] = stringToAscii;

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the given array that contains uint8 values, returns
// a copy of that string as a Javascript String object.

var UTF8Decoder = typeof TextDecoder !== 'undefined' ? new TextDecoder('utf8') : undefined;
function UTF8ArrayToString(u8Array, idx) {
  var endPtr = idx;
  // TextDecoder needs to know the byte length in advance, it doesn't stop on null terminator by itself.
  // Also, use the length info to avoid running tiny strings through TextDecoder, since .subarray() allocates garbage.
  while (u8Array[endPtr]) ++endPtr;

  if (endPtr - idx > 16 && u8Array.subarray && UTF8Decoder) {
    return UTF8Decoder.decode(u8Array.subarray(idx, endPtr));
  } else {
    var u0, u1, u2, u3, u4, u5;

    var str = '';
    while (1) {
      // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629
      u0 = u8Array[idx++];
      if (!u0) return str;
      if (!(u0 & 0x80)) { str += String.fromCharCode(u0); continue; }
      u1 = u8Array[idx++] & 63;
      if ((u0 & 0xE0) == 0xC0) { str += String.fromCharCode(((u0 & 31) << 6) | u1); continue; }
      u2 = u8Array[idx++] & 63;
      if ((u0 & 0xF0) == 0xE0) {
        u0 = ((u0 & 15) << 12) | (u1 << 6) | u2;
      } else {
        u3 = u8Array[idx++] & 63;
        if ((u0 & 0xF8) == 0xF0) {
          u0 = ((u0 & 7) << 18) | (u1 << 12) | (u2 << 6) | u3;
        } else {
          u4 = u8Array[idx++] & 63;
          if ((u0 & 0xFC) == 0xF8) {
            u0 = ((u0 & 3) << 24) | (u1 << 18) | (u2 << 12) | (u3 << 6) | u4;
          } else {
            u5 = u8Array[idx++] & 63;
            u0 = ((u0 & 1) << 30) | (u1 << 24) | (u2 << 18) | (u3 << 12) | (u4 << 6) | u5;
          }
        }
      }
      if (u0 < 0x10000) {
        str += String.fromCharCode(u0);
      } else {
        var ch = u0 - 0x10000;
        str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
      }
    }
  }
}
Module["UTF8ArrayToString"] = UTF8ArrayToString;

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function UTF8ToString(ptr) {
  return UTF8ArrayToString(HEAPU8,ptr);
}
Module["UTF8ToString"] = UTF8ToString;

// Copies the given Javascript String object 'str' to the given byte array at address 'outIdx',
// encoded in UTF8 form and null-terminated. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8 to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outU8Array: the array to copy to. Each index in this array is assumed to be one 8-byte element.
//   outIdx: The starting offset in the array to begin the copying.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=1, only the null terminator will be written and nothing else.
//                    maxBytesToWrite=0 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8Array(str, outU8Array, outIdx, maxBytesToWrite) {
  if (!(maxBytesToWrite > 0)) // Parameter maxBytesToWrite is not optional. Negative values, 0, null, undefined and false each don't write out any bytes.
    return 0;

  var startIdx = outIdx;
  var endIdx = outIdx + maxBytesToWrite - 1; // -1 for string null terminator.
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);
    if (u <= 0x7F) {
      if (outIdx >= endIdx) break;
      outU8Array[outIdx++] = u;
    } else if (u <= 0x7FF) {
      if (outIdx + 1 >= endIdx) break;
      outU8Array[outIdx++] = 0xC0 | (u >> 6);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0xFFFF) {
      if (outIdx + 2 >= endIdx) break;
      outU8Array[outIdx++] = 0xE0 | (u >> 12);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0x1FFFFF) {
      if (outIdx + 3 >= endIdx) break;
      outU8Array[outIdx++] = 0xF0 | (u >> 18);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0x3FFFFFF) {
      if (outIdx + 4 >= endIdx) break;
      outU8Array[outIdx++] = 0xF8 | (u >> 24);
      outU8Array[outIdx++] = 0x80 | ((u >> 18) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else {
      if (outIdx + 5 >= endIdx) break;
      outU8Array[outIdx++] = 0xFC | (u >> 30);
      outU8Array[outIdx++] = 0x80 | ((u >> 24) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 18) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    }
  }
  // Null-terminate the pointer to the buffer.
  outU8Array[outIdx] = 0;
  return outIdx - startIdx;
}
Module["stringToUTF8Array"] = stringToUTF8Array;

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF8 form. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8 to compute the exact number of bytes (excluding null terminator) that this function will write.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8(str, outPtr, maxBytesToWrite) {
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF8(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  return stringToUTF8Array(str, HEAPU8,outPtr, maxBytesToWrite);
}
Module["stringToUTF8"] = stringToUTF8;

// Returns the number of bytes the given Javascript string takes if encoded as a UTF8 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF8(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);
    if (u <= 0x7F) {
      ++len;
    } else if (u <= 0x7FF) {
      len += 2;
    } else if (u <= 0xFFFF) {
      len += 3;
    } else if (u <= 0x1FFFFF) {
      len += 4;
    } else if (u <= 0x3FFFFFF) {
      len += 5;
    } else {
      len += 6;
    }
  }
  return len;
}
Module["lengthBytesUTF8"] = lengthBytesUTF8;

// Given a pointer 'ptr' to a null-terminated UTF16LE-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

var UTF16Decoder = typeof TextDecoder !== 'undefined' ? new TextDecoder('utf-16le') : undefined;
function UTF16ToString(ptr) {
  assert(ptr % 2 == 0, 'Pointer passed to UTF16ToString must be aligned to two bytes!');
  var endPtr = ptr;
  // TextDecoder needs to know the byte length in advance, it doesn't stop on null terminator by itself.
  // Also, use the length info to avoid running tiny strings through TextDecoder, since .subarray() allocates garbage.
  var idx = endPtr >> 1;
  while (HEAP16[idx]) ++idx;
  endPtr = idx << 1;

  if (endPtr - ptr > 32 && UTF16Decoder) {
    return UTF16Decoder.decode(HEAPU8.subarray(ptr, endPtr));
  } else {
    var i = 0;

    var str = '';
    while (1) {
      var codeUnit = HEAP16[(((ptr)+(i*2))>>1)];
      if (codeUnit == 0) return str;
      ++i;
      // fromCharCode constructs a character from a UTF-16 code unit, so we can pass the UTF16 string right through.
      str += String.fromCharCode(codeUnit);
    }
  }
}


// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF16 form. The copy will require at most str.length*4+2 bytes of space in the HEAP.
// Use the function lengthBytesUTF16() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=2, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<2 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF16(str, outPtr, maxBytesToWrite) {
  assert(outPtr % 2 == 0, 'Pointer passed to stringToUTF16 must be aligned to two bytes!');
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF16(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 2) return 0;
  maxBytesToWrite -= 2; // Null terminator.
  var startPtr = outPtr;
  var numCharsToWrite = (maxBytesToWrite < str.length*2) ? (maxBytesToWrite / 2) : str.length;
  for (var i = 0; i < numCharsToWrite; ++i) {
    // charCodeAt returns a UTF-16 encoded code unit, so it can be directly written to the HEAP.
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    HEAP16[((outPtr)>>1)]=codeUnit;
    outPtr += 2;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP16[((outPtr)>>1)]=0;
  return outPtr - startPtr;
}


// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF16(str) {
  return str.length*2;
}


function UTF32ToString(ptr) {
  assert(ptr % 4 == 0, 'Pointer passed to UTF32ToString must be aligned to four bytes!');
  var i = 0;

  var str = '';
  while (1) {
    var utf32 = HEAP32[(((ptr)+(i*4))>>2)];
    if (utf32 == 0)
      return str;
    ++i;
    // Gotcha: fromCharCode constructs a character from a UTF-16 encoded code (pair), not from a Unicode code point! So encode the code point to UTF-16 for constructing.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    if (utf32 >= 0x10000) {
      var ch = utf32 - 0x10000;
      str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
    } else {
      str += String.fromCharCode(utf32);
    }
  }
}


// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF32 form. The copy will require at most str.length*4+4 bytes of space in the HEAP.
// Use the function lengthBytesUTF32() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=4, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<4 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF32(str, outPtr, maxBytesToWrite) {
  assert(outPtr % 4 == 0, 'Pointer passed to stringToUTF32 must be aligned to four bytes!');
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF32(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 4) return 0;
  var startPtr = outPtr;
  var endPtr = startPtr + maxBytesToWrite - 4;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) {
      var trailSurrogate = str.charCodeAt(++i);
      codeUnit = 0x10000 + ((codeUnit & 0x3FF) << 10) | (trailSurrogate & 0x3FF);
    }
    HEAP32[((outPtr)>>2)]=codeUnit;
    outPtr += 4;
    if (outPtr + 4 > endPtr) break;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP32[((outPtr)>>2)]=0;
  return outPtr - startPtr;
}


// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF32(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i);
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) ++i; // possibly a lead surrogate, so skip over the tail surrogate.
    len += 4;
  }

  return len;
}


function demangle(func) {
  var __cxa_demangle_func = Module['___cxa_demangle'] || Module['__cxa_demangle'];
  if (__cxa_demangle_func) {
    try {
      var s =
        func.substr(1);
      var len = lengthBytesUTF8(s)+1;
      var buf = _malloc(len);
      stringToUTF8(s, buf, len);
      var status = _malloc(4);
      var ret = __cxa_demangle_func(buf, 0, 0, status);
      if (getValue(status, 'i32') === 0 && ret) {
        return Pointer_stringify(ret);
      }
      // otherwise, libcxxabi failed
    } catch(e) {
      // ignore problems here
    } finally {
      if (buf) _free(buf);
      if (status) _free(status);
      if (ret) _free(ret);
    }
    // failure when using libcxxabi, don't demangle
    return func;
  }
  Runtime.warnOnce('warning: build with  -s DEMANGLE_SUPPORT=1  to link in libcxxabi demangling');
  return func;
}

function demangleAll(text) {
  var regex =
    /__Z[\w\d_]+/g;
  return text.replace(regex,
    function(x) {
      var y = demangle(x);
      return x === y ? x : (x + ' [' + y + ']');
    });
}

function jsStackTrace() {
  var err = new Error();
  if (!err.stack) {
    // IE10+ special cases: It does have callstack info, but it is only populated if an Error object is thrown,
    // so try that as a special-case.
    try {
      throw new Error(0);
    } catch(e) {
      err = e;
    }
    if (!err.stack) {
      return '(no stack trace available)';
    }
  }
  return err.stack.toString();
}

function stackTrace() {
  var js = jsStackTrace();
  if (Module['extraStackTrace']) js += '\n' + Module['extraStackTrace']();
  return demangleAll(js);
}
Module["stackTrace"] = stackTrace;

// Memory management

var PAGE_SIZE = 16384;
var WASM_PAGE_SIZE = 65536;
var ASMJS_PAGE_SIZE = 16777216;
var MIN_TOTAL_MEMORY = 16777216;

function alignUp(x, multiple) {
  if (x % multiple > 0) {
    x += multiple - (x % multiple);
  }
  return x;
}

var HEAP,
/** @type {ArrayBuffer} */
  buffer,
/** @type {Int8Array} */
  HEAP8,
/** @type {Uint8Array} */
  HEAPU8,
/** @type {Int16Array} */
  HEAP16,
/** @type {Uint16Array} */
  HEAPU16,
/** @type {Int32Array} */
  HEAP32,
/** @type {Uint32Array} */
  HEAPU32,
/** @type {Float32Array} */
  HEAPF32,
/** @type {Float64Array} */
  HEAPF64;

function updateGlobalBuffer(buf) {
  Module['buffer'] = buffer = buf;
}

function updateGlobalBufferViews() {
  Module['HEAP8'] = HEAP8 = new Int8Array(buffer);
  Module['HEAP16'] = HEAP16 = new Int16Array(buffer);
  Module['HEAP32'] = HEAP32 = new Int32Array(buffer);
  Module['HEAPU8'] = HEAPU8 = new Uint8Array(buffer);
  Module['HEAPU16'] = HEAPU16 = new Uint16Array(buffer);
  Module['HEAPU32'] = HEAPU32 = new Uint32Array(buffer);
  Module['HEAPF32'] = HEAPF32 = new Float32Array(buffer);
  Module['HEAPF64'] = HEAPF64 = new Float64Array(buffer);
}

var STATIC_BASE, STATICTOP, staticSealed; // static area
var STACK_BASE, STACKTOP, STACK_MAX; // stack area
var DYNAMIC_BASE, DYNAMICTOP_PTR; // dynamic area handled by sbrk

  STATIC_BASE = STATICTOP = STACK_BASE = STACKTOP = STACK_MAX = DYNAMIC_BASE = DYNAMICTOP_PTR = 0;
  staticSealed = false;


// Initializes the stack cookie. Called at the startup of main and at the startup of each thread in pthreads mode.
function writeStackCookie() {
  assert((STACK_MAX & 3) == 0);
  HEAPU32[(STACK_MAX >> 2)-1] = 0x02135467;
  HEAPU32[(STACK_MAX >> 2)-2] = 0x89BACDFE;
}

function checkStackCookie() {
  if (HEAPU32[(STACK_MAX >> 2)-1] != 0x02135467 || HEAPU32[(STACK_MAX >> 2)-2] != 0x89BACDFE) {
    abort('Stack overflow! Stack cookie has been overwritten, expected hex dwords 0x89BACDFE and 0x02135467, but received 0x' + HEAPU32[(STACK_MAX >> 2)-2].toString(16) + ' ' + HEAPU32[(STACK_MAX >> 2)-1].toString(16));
  }
  // Also test the global address 0 for integrity. This check is not compatible with SAFE_SPLIT_MEMORY though, since that mode already tests all address 0 accesses on its own.
  if (HEAP32[0] !== 0x63736d65 /* 'emsc' */) throw 'Runtime error: The application has corrupted its heap memory area (address zero)!';
}

function abortStackOverflow(allocSize) {
  abort('Stack overflow! Attempted to allocate ' + allocSize + ' bytes on the stack, but stack has only ' + (STACK_MAX - Module['asm'].stackSave() + allocSize) + ' bytes available!');
}

function abortOnCannotGrowMemory() {
  abort('Cannot enlarge memory arrays. Either (1) compile with  -s TOTAL_MEMORY=X  with X higher than the current value ' + TOTAL_MEMORY + ', (2) compile with  -s ALLOW_MEMORY_GROWTH=1  which allows increasing the size at runtime but prevents some optimizations, (3) set Module.TOTAL_MEMORY to a higher value before the program runs, or (4) if you want malloc to return NULL (0) instead of this abort, compile with  -s ABORTING_MALLOC=0 ');
}

if (!Module['reallocBuffer']) Module['reallocBuffer'] = function(size) {
  var ret;
  try {
    if (ArrayBuffer.transfer) {
      ret = ArrayBuffer.transfer(buffer, size);
    } else {
      var oldHEAP8 = HEAP8;
      ret = new ArrayBuffer(size);
      var temp = new Int8Array(ret);
      temp.set(oldHEAP8);
    }
  } catch(e) {
    return false;
  }
  var success = _emscripten_replace_memory(ret);
  if (!success) return false;
  return ret;
};

function enlargeMemory() {
  // TOTAL_MEMORY is the current size of the actual array, and DYNAMICTOP is the new top.
  assert(HEAP32[DYNAMICTOP_PTR>>2] > TOTAL_MEMORY); // This function should only ever be called after the ceiling of the dynamic heap has already been bumped to exceed the current total size of the asm.js heap.


  var PAGE_MULTIPLE = Module["usingWasm"] ? WASM_PAGE_SIZE : ASMJS_PAGE_SIZE; // In wasm, heap size must be a multiple of 64KB. In asm.js, they need to be multiples of 16MB.
  var LIMIT = 2147483648 - PAGE_MULTIPLE; // We can do one page short of 2GB as theoretical maximum.

  if (HEAP32[DYNAMICTOP_PTR>>2] > LIMIT) {
    Module.printErr('Cannot enlarge memory, asked to go up to ' + HEAP32[DYNAMICTOP_PTR>>2] + ' bytes, but the limit is ' + LIMIT + ' bytes!');
    return false;
  }

  var OLD_TOTAL_MEMORY = TOTAL_MEMORY;
  TOTAL_MEMORY = Math.max(TOTAL_MEMORY, MIN_TOTAL_MEMORY); // So the loop below will not be infinite, and minimum asm.js memory size is 16MB.

  while (TOTAL_MEMORY < HEAP32[DYNAMICTOP_PTR>>2]) { // Keep incrementing the heap size as long as it's less than what is requested.
    if (TOTAL_MEMORY <= 536870912) {
      TOTAL_MEMORY = alignUp(2 * TOTAL_MEMORY, PAGE_MULTIPLE); // Simple heuristic: double until 1GB...
    } else {
      TOTAL_MEMORY = Math.min(alignUp((3 * TOTAL_MEMORY + 2147483648) / 4, PAGE_MULTIPLE), LIMIT); // ..., but after that, add smaller increments towards 2GB, which we cannot reach
    }
  }

  var start = Date.now();

  var replacement = Module['reallocBuffer'](TOTAL_MEMORY);
  if (!replacement || replacement.byteLength != TOTAL_MEMORY) {
    Module.printErr('Failed to grow the heap from ' + OLD_TOTAL_MEMORY + ' bytes to ' + TOTAL_MEMORY + ' bytes, not enough memory!');
    if (replacement) {
      Module.printErr('Expected to get back a buffer of size ' + TOTAL_MEMORY + ' bytes, but instead got back a buffer of size ' + replacement.byteLength);
    }
    // restore the state to before this call, we failed
    TOTAL_MEMORY = OLD_TOTAL_MEMORY;
    return false;
  }

  // everything worked

  updateGlobalBuffer(replacement);
  updateGlobalBufferViews();

  Module.printErr('enlarged memory arrays from ' + OLD_TOTAL_MEMORY + ' to ' + TOTAL_MEMORY + ', took ' + (Date.now() - start) + ' ms (has ArrayBuffer.transfer? ' + (!!ArrayBuffer.transfer) + ')');

  if (!Module["usingWasm"]) {
    Module.printErr('Warning: Enlarging memory arrays, this is not fast! ' + [OLD_TOTAL_MEMORY, TOTAL_MEMORY]);
  }


  return true;
}

var byteLength;
try {
  byteLength = Function.prototype.call.bind(Object.getOwnPropertyDescriptor(ArrayBuffer.prototype, 'byteLength').get);
  byteLength(new ArrayBuffer(4)); // can fail on older ie
} catch(e) { // can fail on older node/v8
  byteLength = function(buffer) { return buffer.byteLength; };
}

var TOTAL_STACK = Module['TOTAL_STACK'] || 5242880;
var TOTAL_MEMORY = Module['TOTAL_MEMORY'] || 134217728;
if (TOTAL_MEMORY < TOTAL_STACK) Module.printErr('TOTAL_MEMORY should be larger than TOTAL_STACK, was ' + TOTAL_MEMORY + '! (TOTAL_STACK=' + TOTAL_STACK + ')');

// Initialize the runtime's memory
// check for full engine support (use string 'subarray' to avoid closure compiler confusion)
assert(typeof Int32Array !== 'undefined' && typeof Float64Array !== 'undefined' && Int32Array.prototype.subarray !== undefined && Int32Array.prototype.set !== undefined,
       'JS engine does not provide full typed array support');



// Use a provided buffer, if there is one, or else allocate a new one
if (Module['buffer']) {
  buffer = Module['buffer'];
  assert(buffer.byteLength === TOTAL_MEMORY, 'provided buffer should be ' + TOTAL_MEMORY + ' bytes, but it is ' + buffer.byteLength);
} else {
  // Use a WebAssembly memory where available
  {
    buffer = new ArrayBuffer(TOTAL_MEMORY);
  }
  assert(buffer.byteLength === TOTAL_MEMORY);
}
updateGlobalBufferViews();


function getTotalMemory() {
  return TOTAL_MEMORY;
}

// Endianness check (note: assumes compiler arch was little-endian)
  HEAP32[0] = 0x63736d65; /* 'emsc' */
HEAP16[1] = 0x6373;
if (HEAPU8[2] !== 0x73 || HEAPU8[3] !== 0x63) throw 'Runtime error: expected the system to be little-endian!';

Module['HEAP'] = HEAP;
Module['buffer'] = buffer;
Module['HEAP8'] = HEAP8;
Module['HEAP16'] = HEAP16;
Module['HEAP32'] = HEAP32;
Module['HEAPU8'] = HEAPU8;
Module['HEAPU16'] = HEAPU16;
Module['HEAPU32'] = HEAPU32;
Module['HEAPF32'] = HEAPF32;
Module['HEAPF64'] = HEAPF64;

function callRuntimeCallbacks(callbacks) {
  while(callbacks.length > 0) {
    var callback = callbacks.shift();
    if (typeof callback == 'function') {
      callback();
      continue;
    }
    var func = callback.func;
    if (typeof func === 'number') {
      if (callback.arg === undefined) {
        Module['dynCall_v'](func);
      } else {
        Module['dynCall_vi'](func, callback.arg);
      }
    } else {
      func(callback.arg === undefined ? null : callback.arg);
    }
  }
}

var __ATPRERUN__  = []; // functions called before the runtime is initialized
var __ATINIT__    = []; // functions called during startup
var __ATMAIN__    = []; // functions called when main() is to be run
var __ATEXIT__    = []; // functions called during shutdown
var __ATPOSTRUN__ = []; // functions called after the runtime has exited

var runtimeInitialized = false;
var runtimeExited = false;


function preRun() {
  // compatibility - merge in anything from Module['preRun'] at this time
  if (Module['preRun']) {
    if (typeof Module['preRun'] == 'function') Module['preRun'] = [Module['preRun']];
    while (Module['preRun'].length) {
      addOnPreRun(Module['preRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPRERUN__);
}

function ensureInitRuntime() {
  checkStackCookie();
  if (runtimeInitialized) return;
  runtimeInitialized = true;
  callRuntimeCallbacks(__ATINIT__);
}

function preMain() {
  checkStackCookie();
  callRuntimeCallbacks(__ATMAIN__);
}

function exitRuntime() {
  checkStackCookie();
  callRuntimeCallbacks(__ATEXIT__);
  runtimeExited = true;
}

function postRun() {
  checkStackCookie();
  // compatibility - merge in anything from Module['postRun'] at this time
  if (Module['postRun']) {
    if (typeof Module['postRun'] == 'function') Module['postRun'] = [Module['postRun']];
    while (Module['postRun'].length) {
      addOnPostRun(Module['postRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPOSTRUN__);
}

function addOnPreRun(cb) {
  __ATPRERUN__.unshift(cb);
}
Module["addOnPreRun"] = addOnPreRun;

function addOnInit(cb) {
  __ATINIT__.unshift(cb);
}
Module["addOnInit"] = addOnInit;

function addOnPreMain(cb) {
  __ATMAIN__.unshift(cb);
}
Module["addOnPreMain"] = addOnPreMain;

function addOnExit(cb) {
  __ATEXIT__.unshift(cb);
}
Module["addOnExit"] = addOnExit;

function addOnPostRun(cb) {
  __ATPOSTRUN__.unshift(cb);
}
Module["addOnPostRun"] = addOnPostRun;

// Tools

/** @type {function(string, boolean=, number=)} */
function intArrayFromString(stringy, dontAddNull, length) {
  var len = length > 0 ? length : lengthBytesUTF8(stringy)+1;
  var u8array = new Array(len);
  var numBytesWritten = stringToUTF8Array(stringy, u8array, 0, u8array.length);
  if (dontAddNull) u8array.length = numBytesWritten;
  return u8array;
}
Module["intArrayFromString"] = intArrayFromString;

function intArrayToString(array) {
  var ret = [];
  for (var i = 0; i < array.length; i++) {
    var chr = array[i];
    if (chr > 0xFF) {
      assert(false, 'Character code ' + chr + ' (' + String.fromCharCode(chr) + ')  at offset ' + i + ' not in 0x00-0xFF.');
      chr &= 0xFF;
    }
    ret.push(String.fromCharCode(chr));
  }
  return ret.join('');
}
Module["intArrayToString"] = intArrayToString;

// Deprecated: This function should not be called because it is unsafe and does not provide
// a maximum length limit of how many bytes it is allowed to write. Prefer calling the
// function stringToUTF8Array() instead, which takes in a maximum length that can be used
// to be secure from out of bounds writes.
/** @deprecated */
function writeStringToMemory(string, buffer, dontAddNull) {
  Runtime.warnOnce('writeStringToMemory is deprecated and should not be called! Use stringToUTF8() instead!');

  var /** @type {number} */ lastChar, /** @type {number} */ end;
  if (dontAddNull) {
    // stringToUTF8Array always appends null. If we don't want to do that, remember the
    // character that existed at the location where the null will be placed, and restore
    // that after the write (below).
    end = buffer + lengthBytesUTF8(string);
    lastChar = HEAP8[end];
  }
  stringToUTF8(string, buffer, Infinity);
  if (dontAddNull) HEAP8[end] = lastChar; // Restore the value under the null character.
}
Module["writeStringToMemory"] = writeStringToMemory;

function writeArrayToMemory(array, buffer) {
  assert(array.length >= 0, 'writeArrayToMemory array must have a length (should be an array or typed array)')
  HEAP8.set(array, buffer);
}
Module["writeArrayToMemory"] = writeArrayToMemory;

function writeAsciiToMemory(str, buffer, dontAddNull) {
  for (var i = 0; i < str.length; ++i) {
    assert(str.charCodeAt(i) === str.charCodeAt(i)&0xff);
    HEAP8[((buffer++)>>0)]=str.charCodeAt(i);
  }
  // Null-terminate the pointer to the HEAP.
  if (!dontAddNull) HEAP8[((buffer)>>0)]=0;
}
Module["writeAsciiToMemory"] = writeAsciiToMemory;

function unSign(value, bits, ignore) {
  if (value >= 0) {
    return value;
  }
  return bits <= 32 ? 2*Math.abs(1 << (bits-1)) + value // Need some trickery, since if bits == 32, we are right at the limit of the bits JS uses in bitshifts
                    : Math.pow(2, bits)         + value;
}
function reSign(value, bits, ignore) {
  if (value <= 0) {
    return value;
  }
  var half = bits <= 32 ? Math.abs(1 << (bits-1)) // abs is needed if bits == 32
                        : Math.pow(2, bits-1);
  if (value >= half && (bits <= 32 || value > half)) { // for huge values, we can hit the precision limit and always get true here. so don't do that
                                                       // but, in general there is no perfect solution here. With 64-bit ints, we get rounding and errors
                                                       // TODO: In i64 mode 1, resign the two parts separately and safely
    value = -2*half + value; // Cannot bitshift half, as it may be at the limit of the bits JS uses in bitshifts
  }
  return value;
}

// check for imul support, and also for correctness ( https://bugs.webkit.org/show_bug.cgi?id=126345 )
if (!Math['imul'] || Math['imul'](0xffffffff, 5) !== -5) Math['imul'] = function imul(a, b) {
  var ah  = a >>> 16;
  var al = a & 0xffff;
  var bh  = b >>> 16;
  var bl = b & 0xffff;
  return (al*bl + ((ah*bl + al*bh) << 16))|0;
};
Math.imul = Math['imul'];


if (!Math['clz32']) Math['clz32'] = function(x) {
  x = x >>> 0;
  for (var i = 0; i < 32; i++) {
    if (x & (1 << (31 - i))) return i;
  }
  return 32;
};
Math.clz32 = Math['clz32']

if (!Math['trunc']) Math['trunc'] = function(x) {
  return x < 0 ? Math.ceil(x) : Math.floor(x);
};
Math.trunc = Math['trunc'];

var Math_abs = Math.abs;
var Math_cos = Math.cos;
var Math_sin = Math.sin;
var Math_tan = Math.tan;
var Math_acos = Math.acos;
var Math_asin = Math.asin;
var Math_atan = Math.atan;
var Math_atan2 = Math.atan2;
var Math_exp = Math.exp;
var Math_log = Math.log;
var Math_sqrt = Math.sqrt;
var Math_ceil = Math.ceil;
var Math_floor = Math.floor;
var Math_pow = Math.pow;
var Math_imul = Math.imul;
var Math_fround = Math.fround;
var Math_round = Math.round;
var Math_min = Math.min;
var Math_clz32 = Math.clz32;
var Math_trunc = Math.trunc;

// A counter of dependencies for calling run(). If we need to
// do asynchronous work before running, increment this and
// decrement it. Incrementing must happen in a place like
// PRE_RUN_ADDITIONS (used by emcc to add file preloading).
// Note that you can add dependencies in preRun, even though
// it happens right before run - run will be postponed until
// the dependencies are met.
var runDependencies = 0;
var runDependencyWatcher = null;
var dependenciesFulfilled = null; // overridden to take different actions when all run dependencies are fulfilled
var runDependencyTracking = {};

function getUniqueRunDependency(id) {
  var orig = id;
  while (1) {
    if (!runDependencyTracking[id]) return id;
    id = orig + Math.random();
  }
  return id;
}

function addRunDependency(id) {
  runDependencies++;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(!runDependencyTracking[id]);
    runDependencyTracking[id] = 1;
    if (runDependencyWatcher === null && typeof setInterval !== 'undefined') {
      // Check for missing dependencies every few seconds
      runDependencyWatcher = setInterval(function() {
        if (ABORT) {
          clearInterval(runDependencyWatcher);
          runDependencyWatcher = null;
          return;
        }
        var shown = false;
        for (var dep in runDependencyTracking) {
          if (!shown) {
            shown = true;
            Module.printErr('still waiting on run dependencies:');
          }
          Module.printErr('dependency: ' + dep);
        }
        if (shown) {
          Module.printErr('(end of list)');
        }
      }, 10000);
    }
  } else {
    Module.printErr('warning: run dependency added without ID');
  }
}
Module["addRunDependency"] = addRunDependency;

function removeRunDependency(id) {
  runDependencies--;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(runDependencyTracking[id]);
    delete runDependencyTracking[id];
  } else {
    Module.printErr('warning: run dependency removed without ID');
  }
  if (runDependencies == 0) {
    if (runDependencyWatcher !== null) {
      clearInterval(runDependencyWatcher);
      runDependencyWatcher = null;
    }
    if (dependenciesFulfilled) {
      var callback = dependenciesFulfilled;
      dependenciesFulfilled = null;
      callback(); // can add another dependenciesFulfilled
    }
  }
}
Module["removeRunDependency"] = removeRunDependency;

Module["preloadedImages"] = {}; // maps url to image data
Module["preloadedAudios"] = {}; // maps url to audio data



var memoryInitializer = null;






// === Body ===

var ASM_CONSTS = [function($0, $1, $2, $3, $4) { if (!artoolkit["frameMalloc"]) { artoolkit["frameMalloc"] = ({}); } var frameMalloc = artoolkit["frameMalloc"]; frameMalloc["framepointer"] = $1; frameMalloc["framesize"] = $2; frameMalloc["camera"] = $3; frameMalloc["transform"] = $4; },
 function($0, $1, $2, $3) { if (!artoolkit["multiEachMarkerInfo"]) { artoolkit["multiEachMarkerInfo"] = ({}); } var multiEachMarker = artoolkit["multiEachMarkerInfo"]; multiEachMarker['visible'] = $0; multiEachMarker['pattId'] = $1; multiEachMarker['pattType'] = $2; multiEachMarker['width'] = $3; },
 function($0, $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21, $22, $23, $24, $25, $26, $27, $28, $29, $30, $31, $32) { var $a = arguments; var i = 12; if (!artoolkit["markerInfo"]) { artoolkit["markerInfo"] = ({ pos: [0,0], line: [[0,0,0], [0,0,0], [0,0,0], [0,0,0]], vertex: [[0,0], [0,0], [0,0], [0,0]] }); } var markerInfo = artoolkit["markerInfo"]; markerInfo["area"] = $0; markerInfo["id"] = $1; markerInfo["idPatt"] = $2; markerInfo["idMatrix"] = $3; markerInfo["dir"] = $4; markerInfo["dirPatt"] = $5; markerInfo["dirMatrix"] = $6; markerInfo["cf"] = $7; markerInfo["cfPatt"] = $8; markerInfo["cfMatrix"] = $9; markerInfo["pos"][0] = $10; markerInfo["pos"][1] = $11; markerInfo["line"][0][0] = $a[i++]; markerInfo["line"][0][1] = $a[i++]; markerInfo["line"][0][2] = $a[i++]; markerInfo["line"][1][0] = $a[i++]; markerInfo["line"][1][1] = $a[i++]; markerInfo["line"][1][2] = $a[i++]; markerInfo["line"][2][0] = $a[i++]; markerInfo["line"][2][1] = $a[i++]; markerInfo["line"][2][2] = $a[i++]; markerInfo["line"][3][0] = $a[i++]; markerInfo["line"][3][1] = $a[i++]; markerInfo["line"][3][2] = $a[i++]; markerInfo["vertex"][0][0] = $a[i++]; markerInfo["vertex"][0][1] = $a[i++]; markerInfo["vertex"][1][0] = $a[i++]; markerInfo["vertex"][1][1] = $a[i++]; markerInfo["vertex"][2][0] = $a[i++]; markerInfo["vertex"][2][1] = $a[i++]; markerInfo["vertex"][3][0] = $a[i++]; markerInfo["vertex"][3][1] = $a[i++]; markerInfo["errorCorrected"] = $a[i++]; }];

function _emscripten_asm_const_iiiiii(code, a0, a1, a2, a3, a4) {
  return ASM_CONSTS[code](a0, a1, a2, a3, a4);
}

function _emscripten_asm_const_iiiid(code, a0, a1, a2, a3) {
  return ASM_CONSTS[code](a0, a1, a2, a3);
}

function _emscripten_asm_const_iiiiiiiidddddddddddddddddddddddddi(code, a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28, a29, a30, a31, a32) {
  return ASM_CONSTS[code](a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28, a29, a30, a31, a32);
}



STATIC_BASE = Runtime.GLOBAL_BASE;

STATICTOP = STATIC_BASE + 18832;
/* global initializers */  __ATINIT__.push({ func: function() { __GLOBAL__sub_I_ARToolKitJS_cpp() } }, { func: function() { __GLOBAL__sub_I_bind_cpp() } });


/* memory initializer */ allocate([152,12,0,0,61,37,0,0,0,0,0,0,1,0,0,0,32,0,0,0,0,0,0,0,4,12,0,0,124,37,0,0,4,12,0,0,96,42,0,0,4,12,0,0,159,42,0,0,4,12,0,0,221,42,0,0,4,12,0,0,35,43,0,0,4,12,0,0,96,43,0,0,4,12,0,0,127,43,0,0,4,12,0,0,158,43,0,0,4,12,0,0,189,43,0,0,4,12,0,0,220,43,0,0,4,12,0,0,251,43,0,0,4,12,0,0,26,44,0,0,4,12,0,0,87,44,0,0,4,12,0,0,118,44,0,0,152,12,0,0,137,44,0,0,0,0,0,0,1,0,0,0,32,0,0,0,0,0,0,0,152,12,0,0,200,44,0,0,0,0,0,0,1,0,0,0,32,0,0,0,0,0,0,0,4,12,0,0,39,56,0,0,44,12,0,0,135,56,0,0,216,0,0,0,0,0,0,0,44,12,0,0,52,56,0,0,232,0,0,0,0,0,0,0,4,12,0,0,85,56,0,0,44,12,0,0,98,56,0,0,200,0,0,0,0,0,0,0,44,12,0,0,105,57,0,0,192,0,0,0,0,0,0,0,44,12,0,0,121,57,0,0,0,1,0,0,0,0,0,0,44,12,0,0,138,57,0,0,216,0,0,0,0,0,0,0,124,12,0,0,178,57,0,0,124,12,0,0,180,57,0,0,124,12,0,0,182,57,0,0,124,12,0,0,184,57,0,0,124,12,0,0,186,57,0,0,124,12,0,0,188,57,0,0,124,12,0,0,190,57,0,0,124,12,0,0,192,57,0,0,124,12,0,0,194,57,0,0,124,12,0,0,24,63,0,0,124,12,0,0,196,57,0,0,124,12,0,0,198,57,0,0,124,12,0,0,200,57,0,0,44,12,0,0,202,57,0,0,200,0,0,0,0,0,0,0,70,13,0,0,77,13,0,0,89,13,0,0,99,13,0,0,0,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,0,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,255,255,255,255,1,0,0,0,2,0,0,0,4,0,0,0,8,0,0,0,16,0,0,0,32,0,0,0,64,0,0,0,3,0,0,0,6,0,0,0,12,0,0,0,24,0,0,0,48,0,0,0,96,0,0,0,67,0,0,0,5,0,0,0,10,0,0,0,20,0,0,0,40,0,0,0,80,0,0,0,35,0,0,0,70,0,0,0,15,0,0,0,30,0,0,0,60,0,0,0,120,0,0,0,115,0,0,0,101,0,0,0,73,0,0,0,17,0,0,0,34,0,0,0,68,0,0,0,11,0,0,0,22,0,0,0,44,0,0,0,88,0,0,0,51,0,0,0,102,0,0,0,79,0,0,0,29,0,0,0,58,0,0,0,116,0,0,0,107,0,0,0,85,0,0,0,41,0,0,0,82,0,0,0,39,0,0,0,78,0,0,0,31,0,0,0,62,0,0,0,124,0,0,0,123,0,0,0,117,0,0,0,105,0,0,0,81,0,0,0,33,0,0,0,66,0,0,0,7,0,0,0,14,0,0,0,28,0,0,0,56,0,0,0,112,0,0,0,99,0,0,0,69,0,0,0,9,0,0,0,18,0,0,0,36,0,0,0,72,0,0,0,19,0,0,0,38,0,0,0,76,0,0,0,27,0,0,0,54,0,0,0,108,0,0,0,91,0,0,0,53,0,0,0,106,0,0,0,87,0,0,0,45,0,0,0,90,0,0,0,55,0,0,0,110,0,0,0,95,0,0,0,61,0,0,0,122,0,0,0,119,0,0,0,109,0,0,0,89,0,0,0,49,0,0,0,98,0,0,0,71,0,0,0,13,0,0,0,26,0,0,0,52,0,0,0,104,0,0,0,83,0,0,0,37,0,0,0,74,0,0,0,23,0,0,0,46,0,0,0,92,0,0,0,59,0,0,0,118,0,0,0,111,0,0,0,93,0,0,0,57,0,0,0,114,0,0,0,103,0,0,0,77,0,0,0,25,0,0,0,50,0,0,0,100,0,0,0,75,0,0,0,21,0,0,0,42,0,0,0,84,0,0,0,43,0,0,0,86,0,0,0,47,0,0,0,94,0,0,0,63,0,0,0,126,0,0,0,127,0,0,0,125,0,0,0,121,0,0,0,113,0,0,0,97,0,0,0,65,0,0,0,1,0,0,0,2,0,0,0,4,0,0,0,8,0,0,0,3,0,0,0,6,0,0,0,12,0,0,0,11,0,0,0,5,0,0,0,10,0,0,0,7,0,0,0,14,0,0,0,15,0,0,0,13,0,0,0,9,0,0,0,255,255,255,255,0,0,0,0,1,0,0,0,7,0,0,0,2,0,0,0,14,0,0,0,8,0,0,0,56,0,0,0,3,0,0,0,63,0,0,0,15,0,0,0,31,0,0,0,9,0,0,0,90,0,0,0,57,0,0,0,21,0,0,0,4,0,0,0,28,0,0,0,64,0,0,0,67,0,0,0,16,0,0,0,112,0,0,0,32,0,0,0,97,0,0,0,10,0,0,0,108,0,0,0,91,0,0,0,70,0,0,0,58,0,0,0,38,0,0,0,22,0,0,0,47,0,0,0,5,0,0,0,54,0,0,0,29,0,0,0,19,0,0,0,65,0,0,0,95,0,0,0,68,0,0,0,45,0,0,0,17,0,0,0,43,0,0,0,113,0,0,0,115,0,0,0,33,0,0,0,77,0,0,0,98,0,0,0,117,0,0,0,11,0,0,0,87,0,0,0,109,0,0,0,35,0,0,0,92,0,0,0,74,0,0,0,71,0,0,0,79,0,0,0,59,0,0,0,104,0,0,0,39,0,0,0,100,0,0,0,23,0,0,0,82,0,0,0,48,0,0,0,119,0,0,0,6,0,0,0,126,0,0,0,55,0,0,0,13,0,0,0,30,0,0,0,62,0,0,0,20,0,0,0,89,0,0,0,66,0,0,0,27,0,0,0,96,0,0,0,111,0,0,0,69,0,0,0,107,0,0,0,46,0,0,0,37,0,0,0,18,0,0,0,53,0,0,0,44,0,0,0,94,0,0,0,114,0,0,0,42,0,0,0,116,0,0,0,76,0,0,0,34,0,0,0,86,0,0,0,78,0,0,0,73,0,0,0,99,0,0,0,103,0,0,0,118,0,0,0,81,0,0,0,12,0,0,0,125,0,0,0,88,0,0,0,61,0,0,0,110,0,0,0,26,0,0,0,36,0,0,0,106,0,0,0,93,0,0,0,52,0,0,0,75,0,0,0,41,0,0,0,72,0,0,0,85,0,0,0,80,0,0,0,102,0,0,0,60,0,0,0,124,0,0,0,105,0,0,0,25,0,0,0,40,0,0,0,51,0,0,0,101,0,0,0,84,0,0,0,24,0,0,0,123,0,0,0,83,0,0,0,50,0,0,0,49,0,0,0,122,0,0,0,120,0,0,0,121,0,0,0,255,255,255,255,0,0,0,0,1,0,0,0,4,0,0,0,2,0,0,0,8,0,0,0,5,0,0,0,10,0,0,0,3,0,0,0,14,0,0,0,9,0,0,0,7,0,0,0,6,0,0,0,13,0,0,0,11,0,0,0,12,0,0,0,1,0,0,0,4,0,0,0,136,0,0,0,5,0,0,0,144,0,0,0,6,0,0,0,152,0,0,0,9,0,0,0,176,0,0,0,255,255,255,255,254,255,255,255,253,255,255,255,48,1,0,0,104,1,0,0,136,1,0,0,48,1,0,0,104,1,0,0,104,1,0,0,144,1,0,0,104,1,0,0,48,1,0,0,104,1,0,0,144,1,0,0,104,1,0,0,48,1,0,0,104,1,0,0,104,1,0,0,8,0,0,0,104,1,0,0,104,1,0,0,104,1,0,0,104,1,0,0,104,1,0,0,8,0,0,0,104,1,0,0,104,1,0,0,104,1,0,0,104,1,0,0,104,1,0,0,104,1,0,0,2,0,0,192,3,0,0,192,4,0,0,192,5,0,0,192,6,0,0,192,7,0,0,192,8,0,0,192,9,0,0,192,10,0,0,192,11,0,0,192,12,0,0,192,13,0,0,192,14,0,0,192,15,0,0,192,16,0,0,192,17,0,0,192,18,0,0,192,19,0,0,192,20,0,0,192,21,0,0,192,22,0,0,192,23,0,0,192,24,0,0,192,25,0,0,192,26,0,0,192,27,0,0,192,28,0,0,192,29,0,0,192,30,0,0,192,31,0,0,192,0,0,0,179,1,0,0,195,2,0,0,195,3,0,0,195,4,0,0,195,5,0,0,195,6,0,0,195,7,0,0,195,8,0,0,195,9,0,0,195,10,0,0,195,11,0,0,195,12,0,0,195,13,0,0,211,14,0,0,195,15,0,0,195,0,0,12,187,1,0,12,195,2,0,12,195,3,0,12,195,4,0,12,211,224,7,0,0,5,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,2,0,0,0,129,69,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,64,69,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,2,0,0,0,137,69,0,0,0,4,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,80,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10,0,0,0,100,0,0,0,232,3,0,0,16,39,0,0,160,134,1,0,64,66,15,0,128,150,152,0,0,225,245,5,95,112,137,0,255,9,47,15,0,0,0,0,2,0,0,0,3,0,0,0,5,0,0,0,7,0,0,0,11,0,0,0,13,0,0,0,17,0,0,0,19,0,0,0,23,0,0,0,29,0,0,0,31,0,0,0,37,0,0,0,41,0,0,0,43,0,0,0,47,0,0,0,53,0,0,0,59,0,0,0,61,0,0,0,67,0,0,0,71,0,0,0,73,0,0,0,79,0,0,0,83,0,0,0,89,0,0,0,97,0,0,0,101,0,0,0,103,0,0,0,107,0,0,0,109,0,0,0,113,0,0,0,127,0,0,0,131,0,0,0,137,0,0,0,139,0,0,0,149,0,0,0,151,0,0,0,157,0,0,0,163,0,0,0,167,0,0,0,173,0,0,0,179,0,0,0,181,0,0,0,191,0,0,0,193,0,0,0,197,0,0,0,199,0,0,0,211,0,0,0,1,0,0,0,11,0,0,0,13,0,0,0,17,0,0,0,19,0,0,0,23,0,0,0,29,0,0,0,31,0,0,0,37,0,0,0,41,0,0,0,43,0,0,0,47,0,0,0,53,0,0,0,59,0,0,0,61,0,0,0,67,0,0,0,71,0,0,0,73,0,0,0,79,0,0,0,83,0,0,0,89,0,0,0,97,0,0,0,101,0,0,0,103,0,0,0,107,0,0,0,109,0,0,0,113,0,0,0,121,0,0,0,127,0,0,0,131,0,0,0,137,0,0,0,139,0,0,0,143,0,0,0,149,0,0,0,151,0,0,0,157,0,0,0,163,0,0,0,167,0,0,0,169,0,0,0,173,0,0,0,179,0,0,0,181,0,0,0,187,0,0,0,191,0,0,0,193,0,0,0,197,0,0,0,199,0,0,0,209,0,0,0,1,0,0,0,30,56,0,0,0,0,0,0,200,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0,5,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,240,0,0,0,1,0,0,0,5,0,0,0,3,0,0,0,4,0,0,0,5,0,0,0,2,0,0,0,2,0,0,0,2,0,0,0,0,0,0,0,0,1,0,0,6,0,0,0,7,0,0,0,2,0,0,0,0,0,0,0,16,1,0,0,6,0,0,0,8,0,0,0,2,0,0,0,0,0,0,0,32,1,0,0,1,0,0,0,9,0,0,0,3,0,0,0,4,0,0,0,6,0,0,0,0,0,0,0,152,1,0,0,1,0,0,0,10,0,0,0,3,0,0,0,4,0,0,0,5,0,0,0,3,0,0,0,3,0,0,0,3,0,0,0,69,114,114,111,114,58,32,108,97,98,101,108,105,110,103,32,119,111,114,107,32,111,118,101,114,102,108,111,119,46,10,0,85,110,107,110,111,119,110,32,111,114,32,117,110,115,117,112,112,111,114,116,101,100,32,108,97,98,101,108,105,110,103,32,116,104,114,101,115,104,111,108,100,32,109,111,100,101,32,114,101,113,117,101,115,116,101,100,46,32,83,101,116,32,116,111,32,109,97,110,117,97,108,46,10,0,76,97,98,101,108,105,110,103,32,116,104,114,101,115,104,111,108,100,32,109,111,100,101,32,115,101,116,32,116,111,32,37,115,46,10,0,77,65,78,85,65,76,0,65,85,84,79,95,77,69,68,73,65,78,0,65,85,84,79,95,79,84,83,85,0,65,85,84,79,95,65,68,65,80,84,73,86,69,65,85,84,79,95,66,82,65,67,75,69,84,73,78,71,0,69,114,114,111,114,58,32,85,110,115,117,112,112,111,114,116,101,100,32,112,105,120,101,108,32,102,111,114,109,97,116,32,40,37,100,41,32,114,101,113,117,101,115,116,101,100,46,10,0,65,117,116,111,32,116,104,114,101,115,104,111,108,100,32,40,98,114,97,99,107,101,116,41,32,109,97,114,107,101,114,32,99,111,117,110,116,115,32,45,91,37,51,100,58,32,37,51,100,93,32,91,37,51,100,58,32,37,51,100,93,32,91,37,51,100,58,32,37,51,100,93,43,46,10,0,65,117,116,111,32,116,104,114,101,115,104,111,108,100,32,40,98,114,97,99,107,101,116,41,32,97,100,106,117,115,116,101,100,32,116,104,114,101,115,104,111,108,100,32,116,111,32,37,100,46,10,0,109,101,100,105,97,110,0,79,116,115,117,0,65,117,116,111,32,116,104,114,101,115,104,111,108,100,32,40,37,115,41,32,97,100,106,117,115,116,101,100,32,116,104,114,101,115,104,111,108,100,32,116,111,32,37,100,46,10,0,63,63,63,32,49,10,0,63,63,63,32,50,10,0,63,63,63,32,51,10,0,69,114,114,111,114,58,32,85,110,115,117,112,112,111,114,116,101,100,32,112,105,120,101,108,32,102,111,114,109,97,116,32,112,97,115,115,101,100,32,116,111,32,97,114,73,109,97,103,101,80,114,111,99,72,105,115,116,40,41,46,10,0,0,0,0,1,0,1,1,1,0,2,4,255,255,5,3,1,0,2,255,6,7,255,3,1,2,2,3,2,3,2,3,3,0,255,4,6,7,5,255,1,4,5,4,4,5,5,4,5,7,6,6,6,7,7,7,6,255,2,4,6,7,5,3,255,0,1,1,1,1,1,1,0,1,1,1,0,0,1,1,1,1,1,0,1,1,0,1,1,1,0,1,1,1,1,0,1,1,0,1,1,1,1,0,1,1,1,0,1,1,0,1,1,1,1,1,0,0,1,1,1,0,1,1,1,1,1,1,0,0,255,255,3,255,5,6,255,255,9,10,255,12,255,255,15,255,17,18,255,20,255,255,23,24,255,255,27,255,29,30,255,255,1,2,255,4,255,255,7,8,255,255,11,255,13,14,255,16,255,255,19,255,21,22,255,255,25,26,255,28,255,255,31,69,114,114,111,114,58,32,117,110,115,117,112,112,111,114,116,101,100,32,112,105,120,101,108,32,102,111,114,109,97,116,46,10,0,69,114,114,111,114,58,32,78,85,76,76,32,112,97,116,116,72,97,110,100,108,101,46,10,0,69,114,114,111,114,58,32,99,97,110,39,116,32,108,111,97,100,32,112,97,116,116,101,114,110,32,102,114,111,109,32,78,85,76,76,32,98,117,102,102,101,114,46,10,0,69,114,114,111,114,58,32,111,117,116,32,111,102,32,109,101,109,111,114,121,46,10,0,32,9,10,13,0,80,97,116,116,101,114,110,32,68,97,116,97,32,114,101,97,100,32,101,114,114,111,114,33,33,10,0,69,114,114,111,114,32,111,112,101,110,105,110,103,32,112,97,116,116,101,114,110,32,102,105,108,101,32,39,37,115,39,32,102,111,114,32,114,101,97,100,105,110,103,46,10,0,69,114,114,111,114,32,114,101,97,100,105,110,103,32,112,97,116,116,101,114,110,32,102,105,108,101,32,39,37,115,39,46,10,0,114,98,0,69,114,114,111,114,32,40,37,100,41,58,32,117,110,97,98,108,101,32,116,111,32,111,112,101,110,32,99,97,109,101,114,97,32,112,97,114,97,109,101,116,101,114,115,32,102,105,108,101,32,34,37,115,34,32,102,111,114,32,114,101,97,100,105,110,103,46,10,0,69,114,114,111,114,32,40,37,100,41,58,32,117,110,97,98,108,101,32,116,111,32,100,101,116,101,114,109,105,110,101,32,102,105,108,101,32,108,101,110,103,116,104,46,0,69,114,114,111,114,58,32,115,117,112,112,108,105,101,100,32,102,105,108,101,32,100,111,101,115,32,110,111,116,32,97,112,112,101,97,114,32,116,111,32,98,101,32,97,110,32,65,82,84,111,111,108,75,105,116,32,99,97,109,101,114,97,32,112,97,114,97,109,101,116,101,114,32,102,105,108,101,46,10,0,69,114,114,111,114,32,40,37,100,41,58,32,117,110,97,98,108,101,32,116,111,32,114,101,97,100,32,102,114,111,109,32,102,105,108,101,46,0,69,114,114,111,114,58,32,105,99,112,71,101,116,74,95,85,95,88,99,0,69,114,114,111,114,58,32,109,97,108,108,111,99,10,0,69,114,114,111,114,32,49,58,32,105,99,112,71,101,116,73,110,105,116,88,119,50,88,99,10,0,69,114,114,111,114,32,50,58,32,105,99,112,71,101,116,73,110,105,116,88,119,50,88,99,10,0,69,114,114,111,114,32,51,58,32,105,99,112,71,101,116,73,110,105,116,88,119,50,88,99,10,0,69,114,114,111,114,32,52,58,32,105,99,112,71,101,116,73,110,105,116,88,119,50,88,99,10,0,69,114,114,111,114,32,53,58,32,105,99,112,71,101,116,73,110,105,116,88,119,50,88,99,10,0,69,114,114,111,114,32,54,58,32,105,99,112,71,101,116,73,110,105,116,88,119,50,88,99,10,0,69,114,114,111,114,32,55,58,32,105,99,112,71,101,116,73,110,105,116,88,119,50,88,99,10,0,114,0,69,114,114,111,114,58,32,117,110,97,98,108,101,32,116,111,32,111,112,101,110,32,109,117,108,116,105,109,97,114,107,101,114,32,99,111,110,102,105,103,32,102,105,108,101,32,39,37,115,39,46,10,0,37,115,37,115,10,0,37,100,0,69,114,114,111,114,32,112,114,111,99,101,115,115,105,110,103,32,109,117,108,116,105,109,97,114,107,101,114,32,99,111,110,102,105,103,32,102,105,108,101,32,39,37,115,39,58,32,70,105,114,115,116,32,108,105,110,101,32,109,117,115,116,32,98,101,32,110,117,109,98,101,114,32,111,102,32,109,97,114,107,101,114,32,99,111,110,102,105,103,115,32,116,111,32,114,101,97,100,46,10,0,79,117,116,32,111,102,32,109,101,109,111,114,121,33,33,10,0,37,108,108,117,37,99,0,69,114,114,111,114,32,112,114,111,99,101,115,115,105,110,103,32,109,117,108,116,105,109,97,114,107,101,114,32,99,111,110,102,105,103,32,102,105,108,101,32,39,37,115,39,58,32,112,97,116,116,101,114,110,32,39,37,115,39,32,115,112,101,99,105,102,105,101,100,32,105,110,32,109,117,108,116,105,109,97,114,107,101,114,32,99,111,110,102,105,103,117,114,97,116,105,111,110,32,119,104,105,108,101,32,105,110,32,98,97,114,99,111,100,101,45,111,110,108,121,32,109,111,100,101,46,10,0,69,114,114,111,114,32,112,114,111,99,101,115,115,105,110,103,32,109,117,108,116,105,109,97,114,107,101,114,32,99,111,110,102,105,103,32,102,105,108,101,32,39,37,115,39,58,32,85,110,97,98,108,101,32,116,111,32,100,101,116,101,114,109,105,110,101,32,100,105,114,101,99,116,111,114,121,32,110,97,109,101,46,10,0,69,114,114,111,114,32,112,114,111,99,101,115,115,105,110,103,32,109,117,108,116,105,109,97,114,107,101,114,32,99,111,110,102,105,103,32,102,105,108,101,32,39,37,115,39,58,32,85,110,97,98,108,101,32,116,111,32,108,111,97,100,32,112,97,116,116,101,114,110,32,39,37,115,39,46,10,0,37,108,102,0,69,114,114,111,114,32,112,114,111,99,101,115,115,105,110,103,32,109,117,108,116,105,109,97,114,107,101,114,32,99,111,110,102,105,103,32,102,105,108,101,32,39,37,115,39,44,32,109,97,114,107,101,114,32,100,101,102,105,110,105,116,105,111,110,32,37,51,100,58,32,70,105,114,115,116,32,108,105,110,101,32,109,117,115,116,32,98,101,32,112,97,116,116,101,114,110,32,119,105,100,116,104,46,10,0,37,108,102,32,37,108,102,32,37,108,102,32,37,108,102,0,37,102,32,37,102,0,69,114,114,111,114,32,112,114,111,99,101,115,115,105,110,103,32,109,117,108,116,105,109,97,114,107,101,114,32,99,111,110,102,105,103,32,102,105,108,101,32,39,37,115,39,44,32,109,97,114,107,101,114,32,100,101,102,105,110,105,116,105,111,110,32,37,51,100,58,32,76,105,110,101,115,32,50,32,45,32,52,32,109,117,115,116,32,98,101,32,109,97,114,107,101,114,32,116,114,97,110,115,102,111,114,109,46,10,0,97,114,103,108,67,97,109,101,114,97,70,114,117,115,116,117,109,40,41,58,32,97,114,80,97,114,97,109,68,101,99,111,109,112,77,97,116,40,41,32,105,110,100,105,99,97,116,101,100,32,112,97,114,97,109,101,116,101,114,32,101,114,114,111,114,46,10,0,115,101,116,117,112,0,116,101,97,114,100,111,119,110,0,95,97,100,100,77,97,114,107,101,114,0,95,97,100,100,77,117,108,116,105,77,97,114,107,101,114,0,103,101,116,77,117,108,116,105,77,97,114,107,101,114,78,117,109,0,103,101,116,77,117,108,116,105,77,97,114,107,101,114,67,111,117,110,116,0,95,108,111,97,100,67,97,109,101,114,97,0,115,101,116,77,97,114,107,101,114,73,110,102,111,68,105,114,0,115,101,116,77,97,114,107,101,114,73,110,102,111,86,101,114,116,101,120,0,103,101,116,84,114,97,110,115,77,97,116,83,113,117,97,114,101,0,103,101,116,84,114,97,110,115,77,97,116,83,113,117,97,114,101,67,111,110,116,0,103,101,116,84,114,97,110,115,77,97,116,77,117,108,116,105,83,113,117,97,114,101,0,103,101,116,84,114,97,110,115,77,97,116,77,117,108,116,105,83,113,117,97,114,101,82,111,98,117,115,116,0,100,101,116,101,99,116,77,97,114,107,101,114,0,103,101,116,77,97,114,107,101,114,78,117,109,0,103,101,116,77,117,108,116,105,69,97,99,104,77,97,114,107,101,114,0,103,101,116,77,97,114,107,101,114,0,115,101,116,68,101,98,117,103,77,111,100,101,0,103,101,116,68,101,98,117,103,77,111,100,101,0,103,101,116,80,114,111,99,101,115,115,105,110,103,73,109,97,103,101,0,115,101,116,76,111,103,76,101,118,101,108,0,103,101,116,76,111,103,76,101,118,101,108,0,115,101,116,80,114,111,106,101,99,116,105,111,110,78,101,97,114,80,108,97,110,101,0,103,101,116,80,114,111,106,101,99,116,105,111,110,78,101,97,114,80,108,97,110,101,0,115,101,116,80,114,111,106,101,99,116,105,111,110,70,97,114,80,108,97,110,101,0,103,101,116,80,114,111,106,101,99,116,105,111,110,70,97,114,80,108,97,110,101,0,115,101,116,84,104,114,101,115,104,111,108,100,77,111,100,101,0,103,101,116,84,104,114,101,115,104,111,108,100,77,111,100,101,0,115,101,116,84,104,114,101,115,104,111,108,100,0,103,101,116,84,104,114,101,115,104,111,108,100,0,115,101,116,80,97,116,116,101,114,110,68,101,116,101,99,116,105,111,110,77,111,100,101,0,103,101,116,80,97,116,116,101,114,110,68,101,116,101,99,116,105,111,110,77,111,100,101,0,115,101,116,80,97,116,116,82,97,116,105,111,0,103,101,116,80,97,116,116,82,97,116,105,111,0,115,101,116,77,97,116,114,105,120,67,111,100,101,84,121,112,101,0,103,101,116,77,97,116,114,105,120,67,111,100,101,84,121,112,101,0,115,101,116,76,97,98,101,108,105,110,103,77,111,100,101,0,103,101,116,76,97,98,101,108,105,110,103,77,111,100,101,0,115,101,116,73,109,97,103,101,80,114,111,99,77,111,100,101,0,103,101,116,73,109,97,103,101,80,114,111,99,77,111,100,101,0,69,82,82,79,82,95,65,82,67,79,78,84,82,79,76,76,69,82,95,78,79,84,95,70,79,85,78,68,0,69,82,82,79,82,95,77,85,76,84,73,77,65,82,75,69,82,95,78,79,84,95,70,79,85,78,68,0,69,82,82,79,82,95,77,65,82,75,69,82,95,73,78,68,69,88,95,79,85,84,95,79,70,95,66,79,85,78,68,83,0,65,82,95,68,69,66,85,71,95,68,73,83,65,66,76,69,0,65,82,95,68,69,66,85,71,95,69,78,65,66,76,69,0,65,82,95,68,69,70,65,85,76,84,95,68,69,66,85,71,95,77,79,68,69,0,65,82,95,76,65,66,69,76,73,78,71,95,87,72,73,84,69,95,82,69,71,73,79,78,0,65,82,95,76,65,66,69,76,73,78,71,95,66,76,65,67,75,95,82,69,71,73,79,78,0,65,82,95,68,69,70,65,85,76,84,95,76,65,66,69,76,73,78,71,95,77,79,68,69,0,65,82,95,68,69,70,65,85,76,84,95,76,65,66,69,76,73,78,71,95,84,72,82,69,83,72,0,65,82,95,73,77,65,71,69,95,80,82,79,67,95,70,82,65,77,69,95,73,77,65,71,69,0,65,82,95,73,77,65,71,69,95,80,82,79,67,95,70,73,69,76,68,95,73,77,65,71,69,0,65,82,95,68,69,70,65,85,76,84,95,73,77,65,71,69,95,80,82,79,67,95,77,79,68,69,0,65,82,95,84,69,77,80,76,65,84,69,95,77,65,84,67,72,73,78,71,95,67,79,76,79,82,0,65,82,95,84,69,77,80,76,65,84,69,95,77,65,84,67,72,73,78,71,95,77,79,78,79,0,65,82,95,77,65,84,82,73,88,95,67,79,68,69,95,68,69,84,69,67,84,73,79,78,0,65,82,95,84,69,77,80,76,65,84,69,95,77,65,84,67,72,73,78,71,95,67,79,76,79,82,95,65,78,68,95,77,65,84,82,73,88,0,65,82,95,84,69,77,80,76,65,84,69,95,77,65,84,67,72,73,78,71,95,77,79,78,79,95,65,78,68,95,77,65,84,82,73,88,0,65,82,95,68,69,70,65,85,76,84,95,80,65,84,84,69,82,78,95,68,69,84,69,67,84,73,79,78,95,77,79,68,69,0,65,82,95,85,83,69,95,84,82,65,67,75,73,78,71,95,72,73,83,84,79,82,89,0,65,82,95,78,79,85,83,69,95,84,82,65,67,75,73,78,71,95,72,73,83,84,79,82,89,0,65,82,95,85,83,69,95,84,82,65,67,75,73,78,71,95,72,73,83,84,79,82,89,95,86,50,0,65,82,95,68,69,70,65,85,76,84,95,77,65,82,75,69,82,95,69,88,84,82,65,67,84,73,79,78,95,77,79,68,69,0,65,82,95,77,65,88,95,76,79,79,80,95,67,79,85,78,84,0,65,82,95,76,79,79,80,95,66,82,69,65,75,95,84,72,82,69,83,72,0,65,82,95,76,79,71,95,76,69,86,69,76,95,68,69,66,85,71,0,65,82,95,76,79,71,95,76,69,86,69,76,95,73,78,70,79,0,65,82,95,76,79,71,95,76,69,86,69,76,95,87,65,82,78,0,65,82,95,76,79,71,95,76,69,86,69,76,95,69,82,82,79,82,0,65,82,95,76,79,71,95,76,69,86,69,76,95,82,69,76,95,73,78,70,79,0,65,82,95,77,65,84,82,73,88,95,67,79,68,69,95,51,120,51,0,65,82,95,77,65,84,82,73,88,95,67,79,68,69,95,51,120,51,95,72,65,77,77,73,78,71,54,51,0,65,82,95,77,65,84,82,73,88,95,67,79,68,69,95,51,120,51,95,80,65,82,73,84,89,54,53,0,65,82,95,77,65,84,82,73,88,95,67,79,68,69,95,52,120,52,0,65,82,95,77,65,84,82,73,88,95,67,79,68,69,95,52,120,52,95,66,67,72,95,49,51,95,57,95,51,0,65,82,95,77,65,84,82,73,88,95,67,79,68,69,95,52,120,52,95,66,67,72,95,49,51,95,53,95,53,0,65,82,95,76,65,66,69,76,73,78,71,95,84,72,82,69,83,72,95,77,79,68,69,95,77,65,78,85,65,76,0,65,82,95,76,65,66,69,76,73,78,71,95,84,72,82,69,83,72,95,77,79,68,69,95,65,85,84,79,95,77,69,68,73,65,78,0,65,82,95,76,65,66,69,76,73,78,71,95,84,72,82,69,83,72,95,77,79,68,69,95,65,85,84,79,95,79,84,83,85,0,65,82,95,76,65,66,69,76,73,78,71,95,84,72,82,69,83,72,95,77,79,68,69,95,65,85,84,79,95,65,68,65,80,84,73,86,69,0,65,82,95,77,65,82,75,69,82,95,73,78,70,79,95,67,85,84,79,70,70,95,80,72,65,83,69,95,78,79,78,69,0,65,82,95,77,65,82,75,69,82,95,73,78,70,79,95,67,85,84,79,70,70,95,80,72,65,83,69,95,80,65,84,84,69,82,78,95,69,88,84,82,65,67,84,73,79,78,0,65,82,95,77,65,82,75,69,82,95,73,78,70,79,95,67,85,84,79,70,70,95,80,72,65,83,69,95,77,65,84,67,72,95,71,69,78,69,82,73,67,0,65,82,95,77,65,82,75,69,82,95,73,78,70,79,95,67,85,84,79,70,70,95,80,72,65,83,69,95,77,65,84,67,72,95,67,79,78,84,82,65,83,84,0,65,82,95,77,65,82,75,69,82,95,73,78,70,79,95,67,85,84,79,70,70,95,80,72,65,83,69,95,77,65,84,67,72,95,66,65,82,67,79,68,69,95,78,79,84,95,70,79,85,78,68,0,65,82,95,77,65,82,75,69,82,95,73,78,70,79,95,67,85,84,79,70,70,95,80,72,65,83,69,95,77,65,84,67,72,95,66,65,82,67,79,68,69,95,69,68,67,95,70,65,73,76,0,65,82,95,77,65,82,75,69,82,95,73,78,70,79,95,67,85,84,79,70,70,95,80,72,65,83,69,95,77,65,84,67,72,95,67,79,78,70,73,68,69,78,67,69,0,65,82,95,77,65,82,75,69,82,95,73,78,70,79,95,67,85,84,79,70,70,95,80,72,65,83,69,95,80,79,83,69,95,69,82,82,79,82,0,65,82,95,77,65,82,75,69,82,95,73,78,70,79,95,67,85,84,79,70,70,95,80,72,65,83,69,95,80,79,83,69,95,69,82,82,79,82,95,77,85,76,84,73,0,65,82,95,77,65,82,75,69,82,95,73,78,70,79,95,67,85,84,79,70,70,95,80,72,65,83,69,95,72,69,85,82,73,83,84,73,67,95,84,82,79,85,66,76,69,83,79,77,69,95,77,65,84,82,73,88,95,67,79,68,69,83,0,97,108,108,111,99,97,116,111,114,60,84,62,58,58,97,108,108,111,99,97,116,101,40,115,105,122,101,95,116,32,110,41,32,39,110,39,32,101,120,99,101,101,100,115,32,109,97,120,105,109,117,109,32,115,117,112,112,111,114,116,101,100,32,115,105,122,101,0,73,109,97,103,101,32,112,114,111,99,46,32,109,111,100,101,32,115,101,116,32,116,111,32,37,100,46,10,0,76,97,98,101,108,105,110,103,32,109,111,100,101,32,115,101,116,32,116,111,32,37,100,10,0,118,105,105,102,0,80,97,116,116,101,114,110,32,114,97,116,105,111,32,115,105,122,101,32,115,101,116,32,116,111,32,37,102,46,10,0,80,97,116,116,101,114,110,32,100,101,116,101,99,116,105,111,110,32,109,111,100,101,32,115,101,116,32,116,111,32,37,100,46,10,0,84,104,114,101,115,104,111,108,100,32,115,101,116,32,116,111,32,37,100,10,0,118,105,105,105,0,84,104,114,101,115,104,111,108,100,32,109,111,100,101,32,115,101,116,32,116,111,32,37,100,10,0,100,105,105,0,118,105,105,100,0,105,105,0,118,105,105,0,111,110,46,0,111,102,102,46,0,68,101,98,117,103,32,109,111,100,101,32,115,101,116,32,116,111,32,37,115,10,0,123,32,118,97,114,32,36,97,32,61,32,97,114,103,117,109,101,110,116,115,59,32,118,97,114,32,105,32,61,32,49,50,59,32,105,102,32,40,33,97,114,116,111,111,108,107,105,116,91,34,109,97,114,107,101,114,73,110,102,111,34,93,41,32,123,32,97,114,116,111,111,108,107,105,116,91,34,109,97,114,107,101,114,73,110,102,111,34,93,32,61,32,40,123,32,112,111,115,58,32,91,48,44,48,93,44,32,108,105,110,101,58,32,91,91,48,44,48,44,48,93,44,32,91,48,44,48,44,48,93,44,32,91,48,44,48,44,48,93,44,32,91,48,44,48,44,48,93,93,44,32,118,101,114,116,101,120,58,32,91,91,48,44,48,93,44,32,91,48,44,48,93,44,32,91,48,44,48,93,44,32,91,48,44,48,93,93,32,125,41,59,32,125,32,118,97,114,32,109,97,114,107,101,114,73,110,102,111,32,61,32,97,114,116,111,111,108,107,105,116,91,34,109,97,114,107,101,114,73,110,102,111,34,93,59,32,109,97,114,107,101,114,73,110,102,111,91,34,97,114,101,97,34,93,32,61,32,36,48,59,32,109,97,114,107,101,114,73,110,102,111,91,34,105,100,34,93,32,61,32,36,49,59,32,109,97,114,107,101,114,73,110,102,111,91,34,105,100,80,97,116,116,34,93,32,61,32,36,50,59,32,109,97,114,107,101,114,73,110,102,111,91,34,105,100,77,97,116,114,105,120,34,93,32,61,32,36,51,59,32,109,97,114,107,101,114,73,110,102,111,91,34,100,105,114,34,93,32,61,32,36,52,59,32,109,97,114,107,101,114,73,110,102,111,91,34,100,105,114,80,97,116,116,34,93,32,61,32,36,53,59,32,109,97,114,107,101,114,73,110,102,111,91,34,100,105,114,77,97,116,114,105,120,34,93,32,61,32,36,54,59,32,109,97,114,107,101,114,73,110,102,111,91,34,99,102,34,93,32,61,32,36,55,59,32,109,97,114,107,101,114,73,110,102,111,91,34,99,102,80,97,116,116,34,93,32,61,32,36,56,59,32,109,97,114,107,101,114,73,110,102,111,91,34,99,102,77,97,116,114,105,120,34,93,32,61,32,36,57,59,32,109,97,114,107,101,114,73,110,102,111,91,34,112,111,115,34,93,91,48,93,32,61,32,36,49,48,59,32,109,97,114,107,101,114,73,110,102,111,91,34,112,111,115,34,93,91,49,93,32,61,32,36,49,49,59,32,109,97,114,107,101,114,73,110,102,111,91,34,108,105,110,101,34,93,91,48,93,91,48,93,32,61,32,36,97,91,105,43,43,93,59,32,109,97,114,107,101,114,73,110,102,111,91,34,108,105,110,101,34,93,91,48,93,91,49,93,32,61,32,36,97,91,105,43,43,93,59,32,109,97,114,107,101,114,73,110,102,111,91,34,108,105,110,101,34,93,91,48,93,91,50,93,32,61,32,36,97,91,105,43,43,93,59,32,109,97,114,107,101,114,73,110,102,111,91,34,108,105,110,101,34,93,91,49,93,91,48,93,32,61,32,36,97,91,105,43,43,93,59,32,109,97,114,107,101,114,73,110,102,111,91,34,108,105,110,101,34,93,91,49,93,91,49,93,32,61,32,36,97,91,105,43,43,93,59,32,109,97,114,107,101,114,73,110,102,111,91,34,108,105,110,101,34,93,91,49,93,91,50,93,32,61,32,36,97,91,105,43,43,93,59,32,109,97,114,107,101,114,73,110,102,111,91,34,108,105,110,101,34,93,91,50,93,91,48,93,32,61,32,36,97,91,105,43,43,93,59,32,109,97,114,107,101,114,73,110,102,111,91,34,108,105,110,101,34,93,91,50,93,91,49,93,32,61,32,36,97,91,105,43,43,93,59,32,109,97,114,107,101,114,73,110,102,111,91,34,108,105,110,101,34,93,91,50,93,91,50,93,32,61,32,36,97,91,105,43,43,93,59,32,109,97,114,107,101,114,73,110,102,111,91,34,108,105,110,101,34,93,91,51,93,91,48,93,32,61,32,36,97,91,105,43,43,93,59,32,109,97,114,107,101,114,73,110,102,111,91,34,108,105,110,101,34,93,91,51,93,91,49,93,32,61,32,36,97,91,105,43,43,93,59,32,109,97,114,107,101,114,73,110,102,111,91,34,108,105,110,101,34,93,91,51,93,91,50,93,32,61,32,36,97,91,105,43,43,93,59,32,109,97,114,107,101,114,73,110,102,111,91,34,118,101,114,116,101,120,34,93,91,48,93,91,48,93,32,61,32,36,97,91,105,43,43,93,59,32,109,97,114,107,101,114,73,110,102,111,91,34,118,101,114,116,101,120,34,93,91,48,93,91,49,93,32,61,32,36,97,91,105,43,43,93,59,32,109,97,114,107,101,114,73,110,102,111,91,34,118,101,114,116,101,120,34,93,91,49,93,91,48,93,32,61,32,36,97,91,105,43,43,93,59,32,109,97,114,107,101,114,73,110,102,111,91,34,118,101,114,116,101,120,34,93,91,49,93,91,49,93,32,61,32,36,97,91,105,43,43,93,59,32,109,97,114,107,101,114,73,110,102,111,91,34,118,101,114,116,101,120,34,93,91,50,93,91,48,93,32,61,32,36,97,91,105,43,43,93,59,32,109,97,114,107,101,114,73,110,102,111,91,34,118,101,114,116,101,120,34,93,91,50,93,91,49,93,32,61,32,36,97,91,105,43,43,93,59,32,109,97,114,107,101,114,73,110,102,111,91,34,118,101,114,116,101,120,34,93,91,51,93,91,48,93,32,61,32,36,97,91,105,43,43,93,59,32,109,97,114,107,101,114,73,110,102,111,91,34,118,101,114,116,101,120,34,93,91,51,93,91,49,93,32,61,32,36,97,91,105,43,43,93,59,32,109,97,114,107,101,114,73,110,102,111,91,34,101,114,114,111,114,67,111,114,114,101,99,116,101,100,34,93,32,61,32,36,97,91,105,43,43,93,59,32,125,0,123,32,105,102,32,40,33,97,114,116,111,111,108,107,105,116,91,34,109,117,108,116,105,69,97,99,104,77,97,114,107,101,114,73,110,102,111,34,93,41,32,123,32,97,114,116,111,111,108,107,105,116,91,34,109,117,108,116,105,69,97,99,104,77,97,114,107,101,114,73,110,102,111,34,93,32,61,32,40,123,125,41,59,32,125,32,118,97,114,32,109,117,108,116,105,69,97,99,104,77,97,114,107,101,114,32,61,32,97,114,116,111,111,108,107,105,116,91,34,109,117,108,116,105,69,97,99,104,77,97,114,107,101,114,73,110,102,111,34,93,59,32,109,117,108,116,105,69,97,99,104,77,97,114,107,101,114,91,39,118,105,115,105,98,108,101,39,93,32,61,32,36,48,59,32,109,117,108,116,105,69,97,99,104,77,97,114,107,101,114,91,39,112,97,116,116,73,100,39,93,32,61,32,36,49,59,32,109,117,108,116,105,69,97,99,104,77,97,114,107,101,114,91,39,112,97,116,116,84,121,112,101,39,93,32,61,32,36,50,59,32,109,117,108,116,105,69,97,99,104,77,97,114,107,101,114,91,39,119,105,100,116,104,39,93,32,61,32,36,51,59,32,125,0,105,105,105,0,78,83,116,51,95,95,50,49,50,98,97,115,105,99,95,115,116,114,105,110,103,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,78,83,95,57,97,108,108,111,99,97,116,111,114,73,99,69,69,69,69,0,78,83,116,51,95,95,50,50,49,95,95,98,97,115,105,99,95,115,116,114,105,110,103,95,99,111,109,109,111,110,73,76,98,49,69,69,69,0,108,111,97,100,67,97,109,101,114,97,40,41,58,32,69,114,114,111,114,32,108,111,97,100,105,110,103,32,112,97,114,97,109,101,116,101,114,32,102,105,108,101,32,37,115,32,102,111,114,32,99,97,109,101,114,97,46,10,0,105,105,105,105,0,65,82,84,111,111,108,75,105,116,74,83,40,41,58,32,85,110,97,98,108,101,32,116,111,32,115,101,116,32,117,112,32,65,82,32,109,117,108,116,105,109,97,114,107,101,114,46,10,0,99,111,110,102,105,103,32,100,97,116,97,32,108,111,97,100,32,101,114,114,111,114,32,33,33,10,0,65,82,84,111,111,108,75,105,116,74,83,40,41,58,32,85,110,97,98,108,101,32,116,111,32,115,101,116,32,117,112,32,65,82,32,109,97,114,107,101,114,46,10,0,108,111,97,100,77,97,114,107,101,114,40,41,58,32,69,114,114,111,114,32,108,111,97,100,105,110,103,32,112,97,116,116,101,114,110,32,102,105,108,101,32,37,115,46,10,0,105,105,105,105,105,0,115,101,116,117,112,40,41,58,32,69,114,114,111,114,58,32,97,114,80,97,116,116,67,114,101,97,116,101,72,97,110,100,108,101,46,10,0,65,108,108,111,99,97,116,101,100,32,118,105,100,101,111,70,114,97,109,101,83,105,122,101,32,37,100,10,0,123,32,105,102,32,40,33,97,114,116,111,111,108,107,105,116,91,34,102,114,97,109,101,77,97,108,108,111,99,34,93,41,32,123,32,97,114,116,111,111,108,107,105,116,91,34,102,114,97,109,101,77,97,108,108,111,99,34,93,32,61,32,40,123,125,41,59,32,125,32,118,97,114,32,102,114,97,109,101,77,97,108,108,111,99,32,61,32,97,114,116,111,111,108,107,105,116,91,34,102,114,97,109,101,77,97,108,108,111,99,34,93,59,32,102,114,97,109,101,77,97,108,108,111,99,91,34,102,114,97,109,101,112,111,105,110,116,101,114,34,93,32,61,32,36,49,59,32,102,114,97,109,101,77,97,108,108,111,99,91,34,102,114,97,109,101,115,105,122,101,34,93,32,61,32,36,50,59,32,102,114,97,109,101,77,97,108,108,111,99,91,34,99,97,109,101,114,97,34,93,32,61,32,36,51,59,32,102,114,97,109,101,77,97,108,108,111,99,91,34,116,114,97,110,115,102,111,114,109,34,93,32,61,32,36,52,59,32,125,0,42,42,42,32,67,97,109,101,114,97,32,80,97,114,97,109,101,116,101,114,32,114,101,115,105,122,101,100,32,102,114,111,109,32,37,100,44,32,37,100,46,32,42,42,42,10,0,115,101,116,67,97,109,101,114,97,40,41,58,32,69,114,114,111,114,58,32,97,114,80,97,114], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE);
/* memory initializer */ allocate([97,109,76,84,67,114,101,97,116,101,46,10,0,115,101,116,67,97,109,101,114,97,40,41,58,32,69,114,114,111,114,58,32,97,114,67,114,101,97,116,101,72,97,110,100,108,101,46,10,0,115,101,116,67,97,109,101,114,97,40,41,58,32,69,114,114,111,114,32,99,114,101,97,116,105,110,103,32,51,68,32,104,97,110,100,108,101,0,115,116,100,58,58,98,97,115,105,99,95,115,116,114,105,110,103,60,117,110,115,105,103,110,101,100,32,99,104,97,114,62,0,115,116,100,58,58,119,115,116,114,105,110,103,0,101,109,115,99,114,105,112,116,101,110,58,58,118,97,108,0,101,109,115,99,114,105,112,116,101,110,58,58,109,101,109,111,114,121,95,118,105,101,119,60,115,105,103,110,101,100,32,99,104,97,114,62,0,101,109,115,99,114,105,112,116,101,110,58,58,109,101,109,111,114,121,95,118,105,101,119,60,117,110,115,105,103,110,101,100,32,99,104,97,114,62,0,101,109,115,99,114,105,112,116,101,110,58,58,109,101,109,111,114,121,95,118,105,101,119,60,115,104,111,114,116,62,0,101,109,115,99,114,105,112,116,101,110,58,58,109,101,109,111,114,121,95,118,105,101,119,60,117,110,115,105,103,110,101,100,32,115,104,111,114,116,62,0,101,109,115,99,114,105,112,116,101,110,58,58,109,101,109,111,114,121,95,118,105,101,119,60,105,110,116,62,0,101,109,115,99,114,105,112,116,101,110,58,58,109,101,109,111,114,121,95,118,105,101,119,60,117,110,115,105,103,110,101,100,32,105,110,116,62,0,101,109,115,99,114,105,112,116,101,110,58,58,109,101,109,111,114,121,95,118,105,101,119,60,105,110,116,56,95,116,62,0,101,109,115,99,114,105,112,116,101,110,58,58,109,101,109,111,114,121,95,118,105,101,119,60,117,105,110,116,56,95,116,62,0,101,109,115,99,114,105,112,116,101,110,58,58,109,101,109,111,114,121,95,118,105,101,119,60,105,110,116,49,54,95,116,62,0,101,109,115,99,114,105,112,116,101,110,58,58,109,101,109,111,114,121,95,118,105,101,119,60,117,105,110,116,49,54,95,116,62,0,101,109,115,99,114,105,112,116,101,110,58,58,109,101,109,111,114,121,95,118,105,101,119,60,105,110,116,51,50,95,116,62,0,101,109,115,99,114,105,112,116,101,110,58,58,109,101,109,111,114,121,95,118,105,101,119,60,117,105,110,116,51,50,95,116,62,0,101,109,115,99,114,105,112,116,101,110,58,58,109,101,109,111,114,121,95,118,105,101,119,60,108,111,110,103,32,100,111,117,98,108,101,62,0,78,49,48,101,109,115,99,114,105,112,116,101,110,49,49,109,101,109,111,114,121,95,118,105,101,119,73,101,69,69,0,101,109,115,99,114,105,112,116,101,110,58,58,109,101,109,111,114,121,95,118,105,101,119,60,100,111,117,98,108,101,62,0,78,49,48,101,109,115,99,114,105,112,116,101,110,49,49,109,101,109,111,114,121,95,118,105,101,119,73,100,69,69,0,101,109,115,99,114,105,112,116,101,110,58,58,109,101,109,111,114,121,95,118,105,101,119,60,102,108,111,97,116,62,0,78,49,48,101,109,115,99,114,105,112,116,101,110,49,49,109,101,109,111,114,121,95,118,105,101,119,73,102,69,69,0,101,109,115,99,114,105,112,116,101,110,58,58,109,101,109,111,114,121,95,118,105,101,119,60,117,110,115,105,103,110,101,100,32,108,111,110,103,62,0,78,49,48,101,109,115,99,114,105,112,116,101,110,49,49,109,101,109,111,114,121,95,118,105,101,119,73,109,69,69,0,101,109,115,99,114,105,112,116,101,110,58,58,109,101,109,111,114,121,95,118,105,101,119,60,108,111,110,103,62,0,78,49,48,101,109,115,99,114,105,112,116,101,110,49,49,109,101,109,111,114,121,95,118,105,101,119,73,108,69,69,0,78,49,48,101,109,115,99,114,105,112,116,101,110,49,49,109,101,109,111,114,121,95,118,105,101,119,73,106,69,69,0,78,49,48,101,109,115,99,114,105,112,116,101,110,49,49,109,101,109,111,114,121,95,118,105,101,119,73,105,69,69,0,78,49,48,101,109,115,99,114,105,112,116,101,110,49,49,109,101,109,111,114,121,95,118,105,101,119,73,116,69,69,0,78,49,48,101,109,115,99,114,105,112,116,101,110,49,49,109,101,109,111,114,121,95,118,105,101,119,73,115,69,69,0,78,49,48,101,109,115,99,114,105,112,116,101,110,49,49,109,101,109,111,114,121,95,118,105,101,119,73,104,69,69,0,78,49,48,101,109,115,99,114,105,112,116,101,110,49,49,109,101,109,111,114,121,95,118,105,101,119,73,97,69,69,0,101,109,115,99,114,105,112,116,101,110,58,58,109,101,109,111,114,121,95,118,105,101,119,60,99,104,97,114,62,0,78,49,48,101,109,115,99,114,105,112,116,101,110,49,49,109,101,109,111,114,121,95,118,105,101,119,73,99,69,69,0,78,49,48,101,109,115,99,114,105,112,116,101,110,51,118,97,108,69,0,78,83,116,51,95,95,50,49,50,98,97,115,105,99,95,115,116,114,105,110,103,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,78,83,95,57,97,108,108,111,99,97,116,111,114,73,119,69,69,69,69,0,78,83,116,51,95,95,50,49,50,98,97,115,105,99,95,115,116,114,105,110,103,73,104,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,104,69,69,78,83,95,57,97,108,108,111,99,97,116,111,114,73,104,69,69,69,69,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,0,1,2,3,4,5,6,7,8,9,255,255,255,255,255,255,255,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,255,255,255,255,255,255,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,0,1,2,4,7,3,6,5,0,17,0,10,0,17,17,17,0,0,0,0,5,0,0,0,0,0,0,9,0,0,0,0,11,0,0,0,0,0,0,0,0,17,0,15,10,17,17,17,3,10,7,0,1,19,9,11,11,0,0,9,6,11,0,0,11,0,6,17,0,0,0,17,17,17,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,0,17,0,10,10,17,17,17,0,10,0,0,2,0,9,11,0,0,0,9,0,11,0,0,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,12,0,0,0,0,9,12,0,0,0,0,0,12,0,0,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,14,0,0,0,0,0,0,0,0,0,0,0,13,0,0,0,4,13,0,0,0,0,9,14,0,0,0,0,0,14,0,0,14,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,0,0,0,0,0,0,0,0,0,0,0,15,0,0,0,0,15,0,0,0,0,9,16,0,0,0,0,0,16,0,0,16,0,0,18,0,0,0,18,18,18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,18,0,0,0,18,18,18,0,0,0,0,0,0,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,0,0,0,0,10,0,0,0,0,10,0,0,0,0,9,11,0,0,0,0,0,11,0,0,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,12,0,0,0,0,9,12,0,0,0,0,0,12,0,0,12,0,0,45,43,32,32,32,48,88,48,120,0,40,110,117,108,108,41,0,45,48,88,43,48,88,32,48,88,45,48,120,43,48,120,32,48,120,0,105,110,102,0,73,78,70,0,78,65,78,0,48,49,50,51,52,53,54,55,56,57,65,66,67,68,69,70,84,33,34,25,13,1,2,3,17,75,28,12,16,4,11,29,18,30,39,104,110,111,112,113,98,32,5,6,15,19,20,21,26,8,22,7,40,36,23,24,9,10,14,27,31,37,35,131,130,125,38,42,43,60,61,62,63,67,71,74,77,88,89,90,91,92,93,94,95,96,97,99,100,101,102,103,105,106,107,108,114,115,116,121,122,123,124,0,73,108,108,101,103,97,108,32,98,121,116,101,32,115,101,113,117,101,110,99,101,0,68,111,109,97,105,110,32,101,114,114,111,114,0,82,101,115,117,108,116,32,110,111,116,32,114,101,112,114,101,115,101,110,116,97,98,108,101,0,78,111,116,32,97,32,116,116,121,0,80,101,114,109,105,115,115,105,111,110,32,100,101,110,105,101,100,0,79,112,101,114,97,116,105,111,110,32,110,111,116,32,112,101,114,109,105,116,116,101,100,0,78,111,32,115,117,99,104,32,102,105,108,101,32,111,114,32,100,105,114,101,99,116,111,114,121,0,78,111,32,115,117,99,104,32,112,114,111,99,101,115,115,0,70,105,108,101,32,101,120,105,115,116,115,0,86,97,108,117,101,32,116,111,111,32,108,97,114,103,101,32,102,111,114,32,100,97,116,97,32,116,121,112,101,0,78,111,32,115,112,97,99,101,32,108,101,102,116,32,111,110,32,100,101,118,105,99,101,0,79,117,116,32,111,102,32,109,101,109,111,114,121,0,82,101,115,111,117,114,99,101,32,98,117,115,121,0,73,110,116,101,114,114,117,112,116,101,100,32,115,121,115,116,101,109,32,99,97,108,108,0,82,101,115,111,117,114,99,101,32,116,101,109,112,111,114,97,114,105,108,121,32,117,110,97,118,97,105,108,97,98,108,101,0,73,110,118,97,108,105,100,32,115,101,101,107,0,67,114,111,115,115,45,100,101,118,105,99,101,32,108,105,110,107,0,82,101,97,100,45,111,110,108,121,32,102,105,108,101,32,115,121,115,116,101,109,0,68,105,114,101,99,116,111,114,121,32,110,111,116,32,101,109,112,116,121,0,67,111,110,110,101,99,116,105,111,110,32,114,101,115,101,116,32,98,121,32,112,101,101,114,0,79,112,101,114,97,116,105,111,110,32,116,105,109,101,100,32,111,117,116,0,67,111,110,110,101,99,116,105,111,110,32,114,101,102,117,115,101,100,0,72,111,115,116,32,105,115,32,100,111,119,110,0,72,111,115,116,32,105,115,32,117,110,114,101,97,99,104,97,98,108,101,0,65,100,100,114,101,115,115,32,105,110,32,117,115,101,0,66,114,111,107,101,110,32,112,105,112,101,0,73,47,79,32,101,114,114,111,114,0,78,111,32,115,117,99,104,32,100,101,118,105,99,101,32,111,114,32,97,100,100,114,101,115,115,0,66,108,111,99,107,32,100,101,118,105,99,101,32,114,101,113,117,105,114,101,100,0,78,111,32,115,117,99,104,32,100,101,118,105,99,101,0,78,111,116,32,97,32,100,105,114,101,99,116,111,114,121,0,73,115,32,97,32,100,105,114,101,99,116,111,114,121,0,84,101,120,116,32,102,105,108,101,32,98,117,115,121,0,69,120,101,99,32,102,111,114,109,97,116,32,101,114,114,111,114,0,73,110,118,97,108,105,100,32,97,114,103,117,109,101,110,116,0,65,114,103,117,109,101,110,116,32,108,105,115,116,32,116,111,111,32,108,111,110,103,0,83,121,109,98,111,108,105,99,32,108,105,110,107,32,108,111,111,112,0,70,105,108,101,110,97,109,101,32,116,111,111,32,108,111,110,103,0,84,111,111,32,109,97,110,121,32,111,112,101,110,32,102,105,108,101,115,32,105,110,32,115,121,115,116,101,109,0,78,111,32,102,105,108,101,32,100,101,115,99,114,105,112,116,111,114,115,32,97,118,97,105,108,97,98,108,101,0,66,97,100,32,102,105,108,101,32,100,101,115,99,114,105,112,116,111,114,0,78,111,32,99,104,105,108,100,32,112,114,111,99,101,115,115,0,66,97,100,32,97,100,100,114,101,115,115,0,70,105,108,101,32,116,111,111,32,108,97,114,103,101,0,84,111,111,32,109,97,110,121,32,108,105,110,107,115,0,78,111,32,108,111,99,107,115,32,97,118,97,105,108,97,98,108,101,0,82,101,115,111,117,114,99,101,32,100,101,97,100,108,111,99,107,32,119,111,117,108,100,32,111,99,99,117,114,0,83,116,97,116,101,32,110,111,116,32,114,101,99,111,118,101,114,97,98,108,101,0,80,114,101,118,105,111,117,115,32,111,119,110,101,114,32,100,105,101,100,0,79,112,101,114,97,116,105,111,110,32,99,97,110,99,101,108,101,100,0,70,117,110,99,116,105,111,110,32,110,111,116,32,105,109,112,108,101,109,101,110,116,101,100,0,78,111,32,109,101,115,115,97,103,101,32,111,102,32,100,101,115,105,114,101,100,32,116,121,112,101,0,73,100,101,110,116,105,102,105,101,114,32,114,101,109,111,118,101,100,0,68,101,118,105,99,101,32,110,111,116,32,97,32,115,116,114,101,97,109,0,78,111,32,100,97,116,97,32,97,118,97,105,108,97,98,108,101,0,68,101,118,105,99,101,32,116,105,109,101,111,117,116,0,79,117,116,32,111,102,32,115,116,114,101,97,109,115,32,114,101,115,111,117,114,99,101,115,0,76,105,110,107,32,104,97,115,32,98,101,101,110,32,115,101,118,101,114,101,100,0,80,114,111,116,111,99,111,108,32,101,114,114,111,114,0,66,97,100,32,109,101,115,115,97,103,101,0,70,105,108,101,32,100,101,115,99,114,105,112,116,111,114,32,105,110,32,98,97,100,32,115,116,97,116,101,0,78,111,116,32,97,32,115,111,99,107,101,116,0,68,101,115,116,105,110,97,116,105,111,110,32,97,100,100,114,101,115,115,32,114,101,113,117,105,114,101,100,0,77,101,115,115,97,103,101,32,116,111,111,32,108,97,114,103,101,0,80,114,111,116,111,99,111,108,32,119,114,111,110,103,32,116,121,112,101,32,102,111,114,32,115,111,99,107,101,116,0,80,114,111,116,111,99,111,108,32,110,111,116,32,97,118,97,105,108,97,98,108,101,0,80,114,111,116,111,99,111,108,32,110,111,116,32,115,117,112,112,111,114,116,101,100,0,83,111,99,107,101,116,32,116,121,112,101,32,110,111,116,32,115,117,112,112,111,114,116,101,100,0,78,111,116,32,115,117,112,112,111,114,116,101,100,0,80,114,111,116,111,99,111,108,32,102,97,109,105,108,121,32,110,111,116,32,115,117,112,112,111,114,116,101,100,0,65,100,100,114,101,115,115,32,102,97,109,105,108,121,32,110,111,116,32,115,117,112,112,111,114,116,101,100,32,98,121,32,112,114,111,116,111,99,111,108,0,65,100,100,114,101,115,115,32,110,111,116,32,97,118,97,105,108,97,98,108,101,0,78,101,116,119,111,114,107,32,105,115,32,100,111,119,110,0,78,101,116,119,111,114,107,32,117,110,114,101,97,99,104,97,98,108,101,0,67,111,110,110,101,99,116,105,111,110,32,114,101,115,101,116,32,98,121,32,110,101,116,119,111,114,107,0,67,111,110,110,101,99,116,105,111,110,32,97,98,111,114,116,101,100,0,78,111,32,98,117,102,102,101,114,32,115,112,97,99,101,32,97,118,97,105,108,97,98,108,101,0,83,111,99,107,101,116,32,105,115,32,99,111,110,110,101,99,116,101,100,0,83,111,99,107,101,116,32,110,111,116,32,99,111,110,110,101,99,116,101,100,0,67,97,110,110,111,116,32,115,101,110,100,32,97,102,116,101,114,32,115,111,99,107,101,116,32,115,104,117,116,100,111,119,110,0,79,112,101,114,97,116,105,111,110,32,97,108,114,101,97,100,121,32,105,110,32,112,114,111,103,114,101,115,115,0,79,112,101,114,97,116,105,111,110,32,105,110,32,112,114,111,103,114,101,115,115,0,83,116,97,108,101,32,102,105,108,101,32,104,97,110,100,108,101,0,82,101,109,111,116,101,32,73,47,79,32,101,114,114,111,114,0,81,117,111,116,97,32,101,120,99,101,101,100,101,100,0,78,111,32,109,101,100,105,117,109,32,102,111,117,110,100,0,87,114,111,110,103,32,109,101,100,105,117,109,32,116,121,112,101,0,78,111,32,101,114,114,111,114,32,105,110,102,111,114,109,97,116,105,111,110,0,0,105,110,102,105,110,105,116,121,0,110,97,110,0,114,119,97,0,116,101,114,109,105,110,97,116,105,110,103,32,119,105,116,104,32,37,115,32,101,120,99,101,112,116,105,111,110,32,111,102,32,116,121,112,101,32,37,115,58,32,37,115,0,116,101,114,109,105,110,97,116,105,110,103,32,119,105,116,104,32,37,115,32,101,120,99,101,112,116,105,111,110,32,111,102,32,116,121,112,101,32,37,115,0,116,101,114,109,105,110,97,116,105,110,103,32,119,105,116,104,32,37,115,32,102,111,114,101,105,103,110,32,101,120,99,101,112,116,105,111,110,0,116,101,114,109,105,110,97,116,105,110,103,0,117,110,99,97,117,103,104,116,0,83,116,57,101,120,99,101,112,116,105,111,110,0,78,49,48,95,95,99,120,120,97,98,105,118,49,49,54,95,95,115,104,105,109,95,116,121,112,101,95,105,110,102,111,69,0,83,116,57,116,121,112,101,95,105,110,102,111,0,78,49,48,95,95,99,120,120,97,98,105,118,49,50,48,95,95,115,105,95,99,108,97,115,115,95,116,121,112,101,95,105,110,102,111,69,0,78,49,48,95,95,99,120,120,97,98,105,118,49,49,55,95,95,99,108,97,115,115,95,116,121,112,101,95,105,110,102,111,69,0,112,116,104,114,101,97,100,95,111,110,99,101,32,102,97,105,108,117,114,101,32,105,110,32,95,95,99,120,97,95,103,101,116,95,103,108,111,98,97,108,115,95,102,97,115,116,40,41,0,99,97,110,110,111,116,32,99,114,101,97,116,101,32,112,116,104,114,101,97,100,32,107,101,121,32,102,111,114,32,95,95,99,120,97,95,103,101,116,95,103,108,111,98,97,108,115,40,41,0,99,97,110,110,111,116,32,122,101,114,111,32,111,117,116,32,116,104,114,101,97,100,32,118,97,108,117,101,32,102,111,114,32,95,95,99,120,97,95,103,101,116,95,103,108,111,98,97,108,115,40,41,0,116,101,114,109,105,110,97,116,101,95,104,97,110,100,108,101,114,32,117,110,101,120,112,101,99,116,101,100,108,121,32,114,101,116,117,114,110,101,100,0,83,116,49,49,108,111,103,105,99,95,101,114,114,111,114,0,83,116,49,50,108,101,110,103,116,104,95,101,114,114,111,114,0,78,49,48,95,95,99,120,120,97,98,105,118,49,50,51,95,95,102,117,110,100,97,109,101,110,116,97,108,95,116,121,112,101,95,105,110,102,111,69,0,118,0,98,0,99,0,104,0,97,0,115,0,116,0,105,0,106,0,109,0,102,0,100,0,78,49,48,95,95,99,120,120,97,98,105,118,49,50,49,95,95,118,109,105,95,99,108,97,115,115,95,116,121,112,101,95,105,110,102,111,69,0,32,99,111,110,115,116,0,32,118,111,108,97,116,105,108,101,0,32,114,101,115,116,114,105,99,116,0,32,99,111,109,112,108,101,120,0,32,105,109,97,103,105,110,97,114,121,0,32,91,0,32,40,0,41,0,40,0,38,38,0,111,98,106,99,95,111,98,106,101,99,116,60,0,42,0,38,0,111,98,106,99,112,114,111,116,111,0,32,0,60,0,62,0,32,118,101,99,116,111,114,91,0,93,0,112,105,120,101,108,32,118,101,99,116,111,114,91,0,38,61,0,61,0,44,0,126,0,58,58,0,100,101,108,101,116,101,91,93,32,0,100,101,108,101,116,101,32,0,47,0,47,61,0,94,0,94,61,0,61,61,0,62,61,0,41,91,0,60,61,0,60,60,0,60,60,61,0,45,0,45,61,0,42,61,0,45,45,0,41,45,45,0,33,61,0,33,0,124,124,0,124,0,124,61,0,45,62,42,0,43,0,43,61,0,43,43,0,41,43,43,0,41,32,63,32,40,0,41,32,58,32,40,0,37,0,37,61,0,62,62,0,62,62,61,0,116,104,114,111,119,0,116,104,114,111,119,32,0,116,121,112,101,105,100,40,0,115,105,122,101,111,102,46,46,46,40,0,44,32,0,115,105,122,101,111,102,32,40,0,115,116,97,116,105,99,95,99,97,115,116,60,0,62,40,0,114,101,105,110,116,101,114,112,114,101,116,95,99,97,115,116,60,0,45,62,0,110,111,101,120,99,101,112,116,32,40,0,91,93,32,0,41,32,0,46,0,46,42,0,115,116,100,58,58,0,111,112,101,114,97,116,111,114,38,38,0,111,112,101,114,97,116,111,114,38,0,111,112,101,114,97,116,111,114,38,61,0,111,112,101,114,97,116,111,114,61,0,111,112,101,114,97,116,111,114,40,41,0,111,112,101,114,97,116,111,114,44,0,111,112,101,114,97,116,111,114,126,0,111,112,101,114,97,116,111,114,32,0,111,112,101,114,97,116,111,114,32,100,101,108,101,116,101,91,93,0,111,112,101,114,97,116,111,114,42,0,111,112,101,114,97,116,111,114,47,0,111,112,101,114,97,116,111,114,47,61,0,111,112,101,114,97,116,111,114,94,0,111,112,101,114,97,116,111,114,94,61,0,111,112,101,114,97,116,111,114,61,61,0,111,112,101,114,97,116,111,114,62,61,0,111,112,101,114,97,116,111,114,62,0,111,112,101,114,97,116,111,114,91,93,0,111,112,101,114,97,116,111,114,60,61,0,111,112,101,114,97,116,111,114,34,34,32,0,111,112,101,114,97,116,111,114,60,60,0,111,112,101,114,97,116,111,114,60,60,61,0,111,112,101,114,97,116,111,114,60,0,111,112,101,114,97,116,111,114,45,0,111,112,101,114,97,116,111,114,45,61,0,111,112,101,114,97,116,111,114,42,61,0,111,112,101,114,97,116,111,114,45,45,0,111,112,101,114,97,116,111,114,32,110,101,119,91,93,0,111,112,101,114,97,116,111,114,33,61,0,111,112,101,114,97,116,111,114,33,0,111,112,101,114,97,116,111,114,32,110,101,119,0,111,112,101,114,97,116,111,114,124,124,0,111,112,101,114,97,116,111,114,124,0,111,112,101,114,97,116,111,114,124,61,0,111,112,101,114,97,116,111,114,45,62,42,0,111,112,101,114,97,116,111,114,43,0,111,112,101,114,97,116,111,114,43,61,0,111,112,101,114,97,116,111,114,43,43,0,111,112,101,114,97,116,111,114,45,62,0,111,112,101,114,97,116,111,114,63,0,111,112,101,114,97,116,111,114,37,0,111,112,101,114,97,116,111,114,37,61,0,111,112,101,114,97,116,111,114,62,62,0,111,112,101,114,97,116,111,114,62,62,61,0,111,112,101,114,97,116,111,114,32,100,101,108,101,116,101,0,39,117,110,110,97,109,101,100,0,39,108,97,109,98,100,97,39,40,0,115,116,100,58,58,115,116,114,105,110,103,0,115,116,100,58,58,98,97,115,105,99,95,115,116,114,105,110,103,60,99,104,97,114,44,32,115,116,100,58,58,99,104,97,114,95,116,114,97,105,116,115,60,99,104,97,114,62,44,32,115,116,100,58,58,97,108,108,111,99,97,116,111,114,60,99,104,97,114,62,32,62,0,98,97,115,105,99,95,115,116,114,105,110,103,0,115,116,100,58,58,105,115,116,114,101,97,109,0,115,116,100,58,58,98,97,115,105,99,95,105,115,116,114,101,97,109,60,99,104,97,114,44,32,115,116,100,58,58,99,104,97,114,95,116,114,97,105,116,115,60,99,104,97,114,62,32,62,0,98,97,115,105,99,95,105,115,116,114,101,97,109,0,115,116,100,58,58,111,115,116,114,101,97,109,0,115,116,100,58,58,98,97,115,105,99,95,111,115,116,114,101,97,109,60,99,104,97,114,44,32,115,116,100,58,58,99,104,97,114,95,116,114,97,105,116,115,60,99,104,97,114,62,32,62,0,98,97,115,105,99,95,111,115,116,114,101,97,109,0,115,116,100,58,58,105,111,115,116,114,101,97,109,0,115,116,100,58,58,98,97,115,105,99,95,105,111,115,116,114,101,97,109,60,99,104,97,114,44,32,115,116,100,58,58,99,104,97,114,95,116,114,97,105,116,115,60,99,104,97,114,62,32,62,0,98,97,115,105,99,95,105,111,115,116,114,101,97,109,0,100,121,110,97,109,105,99,95,99,97,115,116,60,0,41,40,0,99,111,110,115,116,95,99,97,115,116,60,0,97,108,105,103,110,111,102,32,40,0,102,112,0,119,99,104,97,114,95,116,0,102,97,108,115,101,0,116,114,117,101,0,99,104,97,114,0,115,105,103,110,101,100,32,99,104,97,114,0,117,110,115,105,103,110,101,100,32,99,104,97,114,0,115,104,111,114,116,0,117,110,115,105,103,110,101,100,32,115,104,111,114,116,0,117,0,108,0,117,108,0,108,108,0,117,108,108,0,95,95,105,110,116,49,50,56,0,117,110,115,105,103,110,101,100,32,95,95,105,110,116,49,50,56,0,37,76,97,76,0,37,97,0,37,97,102,0,100,101,99,108,116,121,112,101,40,0,115,116,100,58,58,97,108,108,111,99,97,116,111,114,0,115,116,100,58,58,98,97,115,105,99,95,115,116,114,105,110,103,0,58,58,115,116,114,105,110,103,32,108,105,116,101,114,97,108,0,115,116,100,0,95,71,76,79,66,65,76,95,95,78,0,40,97,110,111,110,121,109,111,117,115,32,110,97,109,101,115,112,97,99,101,41,0,32,62,0,84,95,0,105,100,0,58,58,42,0,32,38,0,32,38,38,0,32,91,93,0,118,111,105,100,0,98,111,111,108,0,105,110,116,0,117,110,115,105,103,110,101,100,32,105,110,116,0,108,111,110,103,0,117,110,115,105,103,110,101,100,32,108,111,110,103,0,108,111,110,103,32,108,111,110,103,0,102,108,111,97,116,0,108,111,110,103,32,100,111,117,98,108,101,0,95,95,102,108,111,97,116,49,50,56,0,46,46,46,0,100,101,99,105,109,97,108,54,52,0,100,101,99,105,109,97,108,49,50,56,0,100,101,99,105,109,97,108,51,50,0,100,101,99,105,109,97,108,49,54,0,99,104,97,114,51,50,95,116,0,99,104,97,114,49,54,95,116,0,97,117,116,111,0,115,116,100,58,58,110,117,108,108,112,116,114,95,116,0,100,111,117,98,108,101,0,117,110,115,105,103,110,101,100,32,108,111,110,103,32,108,111,110,103,0,95,98,108,111,99,107,95,105,110,118,111,107,101,0,105,110,118,111,99,97,116,105,111,110,32,102,117,110,99,116,105,111,110,32,102,111,114,32,98,108,111,99,107,32,105,110,32,0,118,116,97,98,108,101,32,102,111,114,32,0,86,84,84,32,102,111,114,32,0,116,121,112,101,105,110,102,111,32,102,111,114,32,0,116,121,112,101,105,110,102,111,32,110,97,109,101,32,102,111,114,32,0,99,111,118,97,114,105,97,110,116,32,114,101,116,117,114,110,32,116,104,117,110,107,32,116,111,32,0,99,111,110,115,116,114,117,99,116,105,111,110,32,118,116,97,98,108,101,32,102,111,114,32,0,45,105,110,45,0,118,105,114,116,117,97,108,32,116,104,117,110,107,32,116,111,32,0,110,111,110,45,118,105,114,116,117,97,108,32,116,104,117,110,107,32,116,111,32,0,103,117,97,114,100,32,118,97,114,105,97,98,108,101,32,102,111,114,32,0,114,101,102,101,114,101,110,99,101,32,116,101,109,112,111,114,97,114,121,32,102,111,114,32,0], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+10240);





/* no memory initializer */
var tempDoublePtr = STATICTOP; STATICTOP += 16;

assert(tempDoublePtr % 8 == 0);

function copyTempFloat(ptr) { // functions, because inlining this code increases code size too much

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

}

function copyTempDouble(ptr) {

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

  HEAP8[tempDoublePtr+4] = HEAP8[ptr+4];

  HEAP8[tempDoublePtr+5] = HEAP8[ptr+5];

  HEAP8[tempDoublePtr+6] = HEAP8[ptr+6];

  HEAP8[tempDoublePtr+7] = HEAP8[ptr+7];

}

// {{PRE_LIBRARY}}


  
  function _atexit(func, arg) {
      __ATEXIT__.unshift({ func: func, arg: arg });
    }function ___cxa_atexit() {
  return _atexit.apply(null, arguments)
  }

   

   

  
  
  
  function embind_init_charCodes() {
      var codes = new Array(256);
      for (var i = 0; i < 256; ++i) {
          codes[i] = String.fromCharCode(i);
      }
      embind_charCodes = codes;
    }var embind_charCodes=undefined;function readLatin1String(ptr) {
      var ret = "";
      var c = ptr;
      while (HEAPU8[c]) {
          ret += embind_charCodes[HEAPU8[c++]];
      }
      return ret;
    }
  
  
  var awaitingDependencies={};
  
  var registeredTypes={};
  
  var typeDependencies={};
  
  
  
  
  
  
  var char_0=48;
  
  var char_9=57;function makeLegalFunctionName(name) {
      if (undefined === name) {
          return '_unknown';
      }
      name = name.replace(/[^a-zA-Z0-9_]/g, '$');
      var f = name.charCodeAt(0);
      if (f >= char_0 && f <= char_9) {
          return '_' + name;
      } else {
          return name;
      }
    }function createNamedFunction(name, body) {
      name = makeLegalFunctionName(name);
      /*jshint evil:true*/
      return new Function(
          "body",
          "return function " + name + "() {\n" +
          "    \"use strict\";" +
          "    return body.apply(this, arguments);\n" +
          "};\n"
      )(body);
    }function extendError(baseErrorType, errorName) {
      var errorClass = createNamedFunction(errorName, function(message) {
          this.name = errorName;
          this.message = message;
  
          var stack = (new Error(message)).stack;
          if (stack !== undefined) {
              this.stack = this.toString() + '\n' +
                  stack.replace(/^Error(:[^\n]*)?\n/, '');
          }
      });
      errorClass.prototype = Object.create(baseErrorType.prototype);
      errorClass.prototype.constructor = errorClass;
      errorClass.prototype.toString = function() {
          if (this.message === undefined) {
              return this.name;
          } else {
              return this.name + ': ' + this.message;
          }
      };
  
      return errorClass;
    }var BindingError=undefined;function throwBindingError(message) {
      throw new BindingError(message);
    }
  
  
  
  var InternalError=undefined;function throwInternalError(message) {
      throw new InternalError(message);
    }function whenDependentTypesAreResolved(myTypes, dependentTypes, getTypeConverters) {
      myTypes.forEach(function(type) {
          typeDependencies[type] = dependentTypes;
      });
  
      function onComplete(typeConverters) {
          var myTypeConverters = getTypeConverters(typeConverters);
          if (myTypeConverters.length !== myTypes.length) {
              throwInternalError('Mismatched type converter count');
          }
          for (var i = 0; i < myTypes.length; ++i) {
              registerType(myTypes[i], myTypeConverters[i]);
          }
      }
  
      var typeConverters = new Array(dependentTypes.length);
      var unregisteredTypes = [];
      var registered = 0;
      dependentTypes.forEach(function(dt, i) {
          if (registeredTypes.hasOwnProperty(dt)) {
              typeConverters[i] = registeredTypes[dt];
          } else {
              unregisteredTypes.push(dt);
              if (!awaitingDependencies.hasOwnProperty(dt)) {
                  awaitingDependencies[dt] = [];
              }
              awaitingDependencies[dt].push(function() {
                  typeConverters[i] = registeredTypes[dt];
                  ++registered;
                  if (registered === unregisteredTypes.length) {
                      onComplete(typeConverters);
                  }
              });
          }
      });
      if (0 === unregisteredTypes.length) {
          onComplete(typeConverters);
      }
    }function registerType(rawType, registeredInstance, options) {
      options = options || {};
  
      if (!('argPackAdvance' in registeredInstance)) {
          throw new TypeError('registerType registeredInstance requires argPackAdvance');
      }
  
      var name = registeredInstance.name;
      if (!rawType) {
          throwBindingError('type "' + name + '" must have a positive integer typeid pointer');
      }
      if (registeredTypes.hasOwnProperty(rawType)) {
          if (options.ignoreDuplicateRegistrations) {
              return;
          } else {
              throwBindingError("Cannot register type '" + name + "' twice");
          }
      }
  
      registeredTypes[rawType] = registeredInstance;
      delete typeDependencies[rawType];
  
      if (awaitingDependencies.hasOwnProperty(rawType)) {
          var callbacks = awaitingDependencies[rawType];
          delete awaitingDependencies[rawType];
          callbacks.forEach(function(cb) {
              cb();
          });
      }
    }function __embind_register_void(rawType, name) {
      name = readLatin1String(name);
      registerType(rawType, {
          isVoid: true, // void return values can be optimized out sometimes
          name: name,
          'argPackAdvance': 0,
          'fromWireType': function() {
              return undefined;
          },
          'toWireType': function(destructors, o) {
              // TODO: assert if anything else is given?
              return undefined;
          },
      });
    }

  
  function __ZSt18uncaught_exceptionv() { // std::uncaught_exception()
      return !!__ZSt18uncaught_exceptionv.uncaught_exception;
    }
  
  
  
  var EXCEPTIONS={last:0,caught:[],infos:{},deAdjust:function (adjusted) {
        if (!adjusted || EXCEPTIONS.infos[adjusted]) return adjusted;
        for (var ptr in EXCEPTIONS.infos) {
          var info = EXCEPTIONS.infos[ptr];
          if (info.adjusted === adjusted) {
            return ptr;
          }
        }
        return adjusted;
      },addRef:function (ptr) {
        if (!ptr) return;
        var info = EXCEPTIONS.infos[ptr];
        info.refcount++;
      },decRef:function (ptr) {
        if (!ptr) return;
        var info = EXCEPTIONS.infos[ptr];
        assert(info.refcount > 0);
        info.refcount--;
        // A rethrown exception can reach refcount 0; it must not be discarded
        // Its next handler will clear the rethrown flag and addRef it, prior to
        // final decRef and destruction here
        if (info.refcount === 0 && !info.rethrown) {
          if (info.destructor) {
            Module['dynCall_vi'](info.destructor, ptr);
          }
          delete EXCEPTIONS.infos[ptr];
          ___cxa_free_exception(ptr);
        }
      },clearRef:function (ptr) {
        if (!ptr) return;
        var info = EXCEPTIONS.infos[ptr];
        info.refcount = 0;
      }};
  function ___resumeException(ptr) {
      if (!EXCEPTIONS.last) { EXCEPTIONS.last = ptr; }
      throw ptr + " - Exception catching is disabled, this exception cannot be caught. Compile with -s DISABLE_EXCEPTION_CATCHING=0 or DISABLE_EXCEPTION_CATCHING=2 to catch.";
    }function ___cxa_find_matching_catch() {
      var thrown = EXCEPTIONS.last;
      if (!thrown) {
        // just pass through the null ptr
        return ((Runtime.setTempRet0(0),0)|0);
      }
      var info = EXCEPTIONS.infos[thrown];
      var throwntype = info.type;
      if (!throwntype) {
        // just pass through the thrown ptr
        return ((Runtime.setTempRet0(0),thrown)|0);
      }
      var typeArray = Array.prototype.slice.call(arguments);
  
      var pointer = Module['___cxa_is_pointer_type'](throwntype);
      // can_catch receives a **, add indirection
      if (!___cxa_find_matching_catch.buffer) ___cxa_find_matching_catch.buffer = _malloc(4);
      HEAP32[((___cxa_find_matching_catch.buffer)>>2)]=thrown;
      thrown = ___cxa_find_matching_catch.buffer;
      // The different catch blocks are denoted by different types.
      // Due to inheritance, those types may not precisely match the
      // type of the thrown object. Find one which matches, and
      // return the type of the catch block which should be called.
      for (var i = 0; i < typeArray.length; i++) {
        if (typeArray[i] && Module['___cxa_can_catch'](typeArray[i], throwntype, thrown)) {
          thrown = HEAP32[((thrown)>>2)]; // undo indirection
          info.adjusted = thrown;
          return ((Runtime.setTempRet0(typeArray[i]),thrown)|0);
        }
      }
      // Shouldn't happen unless we have bogus data in typeArray
      // or encounter a type for which emscripten doesn't have suitable
      // typeinfo defined. Best-efforts match just in case.
      thrown = HEAP32[((thrown)>>2)]; // undo indirection
      return ((Runtime.setTempRet0(throwntype),thrown)|0);
    }function ___cxa_throw(ptr, type, destructor) {
      EXCEPTIONS.infos[ptr] = {
        ptr: ptr,
        adjusted: ptr,
        type: type,
        destructor: destructor,
        refcount: 0,
        caught: false,
        rethrown: false
      };
      EXCEPTIONS.last = ptr;
      if (!("uncaught_exception" in __ZSt18uncaught_exceptionv)) {
        __ZSt18uncaught_exceptionv.uncaught_exception = 1;
      } else {
        __ZSt18uncaught_exceptionv.uncaught_exception++;
      }
      throw ptr + " - Exception catching is disabled, this exception cannot be caught. Compile with -s DISABLE_EXCEPTION_CATCHING=0 or DISABLE_EXCEPTION_CATCHING=2 to catch.";
    }

   

  
  function getShiftFromSize(size) {
      switch (size) {
          case 1: return 0;
          case 2: return 1;
          case 4: return 2;
          case 8: return 3;
          default:
              throw new TypeError('Unknown type size: ' + size);
      }
    }function __embind_register_bool(rawType, name, size, trueValue, falseValue) {
      var shift = getShiftFromSize(size);
  
      name = readLatin1String(name);
      registerType(rawType, {
          name: name,
          'fromWireType': function(wt) {
              // ambiguous emscripten ABI: sometimes return values are
              // true or false, and sometimes integers (0 or 1)
              return !!wt;
          },
          'toWireType': function(destructors, o) {
              return o ? trueValue : falseValue;
          },
          'argPackAdvance': 8,
          'readValueFromPointer': function(pointer) {
              // TODO: if heap is fixed (like in asm.js) this could be executed outside
              var heap;
              if (size === 1) {
                  heap = HEAP8;
              } else if (size === 2) {
                  heap = HEAP16;
              } else if (size === 4) {
                  heap = HEAP32;
              } else {
                  throw new TypeError("Unknown boolean type size: " + name);
              }
              return this['fromWireType'](heap[pointer >> shift]);
          },
          destructorFunction: null, // This type does not need a destructor
      });
    }

   

  function _abort() {
      Module['abort']();
    }

  
  function simpleReadValueFromPointer(pointer) {
      return this['fromWireType'](HEAPU32[pointer >> 2]);
    }function __embind_register_std_string(rawType, name) {
      name = readLatin1String(name);
      registerType(rawType, {
          name: name,
          'fromWireType': function(value) {
              var length = HEAPU32[value >> 2];
              var a = new Array(length);
              for (var i = 0; i < length; ++i) {
                  a[i] = String.fromCharCode(HEAPU8[value + 4 + i]);
              }
              _free(value);
              return a.join('');
          },
          'toWireType': function(destructors, value) {
              if (value instanceof ArrayBuffer) {
                  value = new Uint8Array(value);
              }
  
              function getTAElement(ta, index) {
                  return ta[index];
              }
              function getStringElement(string, index) {
                  return string.charCodeAt(index);
              }
              var getElement;
              if (value instanceof Uint8Array) {
                  getElement = getTAElement;
              } else if (value instanceof Uint8ClampedArray) {
                  getElement = getTAElement;
              } else if (value instanceof Int8Array) {
                  getElement = getTAElement;
              } else if (typeof value === 'string') {
                  getElement = getStringElement;
              } else {
                  throwBindingError('Cannot pass non-string to std::string');
              }
  
              // assumes 4-byte alignment
              var length = value.length;
              var ptr = _malloc(4 + length);
              HEAPU32[ptr >> 2] = length;
              for (var i = 0; i < length; ++i) {
                  var charCode = getElement(value, i);
                  if (charCode > 255) {
                      _free(ptr);
                      throwBindingError('String has UTF-16 code units that do not fit in 8 bits');
                  }
                  HEAPU8[ptr + 4 + i] = charCode;
              }
              if (destructors !== null) {
                  destructors.push(_free, ptr);
              }
              return ptr;
          },
          'argPackAdvance': 8,
          'readValueFromPointer': simpleReadValueFromPointer,
          destructorFunction: function(ptr) { _free(ptr); },
      });
    }

  
  function _embind_repr(v) {
      if (v === null) {
          return 'null';
      }
      var t = typeof v;
      if (t === 'object' || t === 'array' || t === 'function') {
          return v.toString();
      } else {
          return '' + v;
      }
    }
  
  function integerReadValueFromPointer(name, shift, signed) {
      // integers are quite common, so generate very specialized functions
      switch (shift) {
          case 0: return signed ?
              function readS8FromPointer(pointer) { return HEAP8[pointer]; } :
              function readU8FromPointer(pointer) { return HEAPU8[pointer]; };
          case 1: return signed ?
              function readS16FromPointer(pointer) { return HEAP16[pointer >> 1]; } :
              function readU16FromPointer(pointer) { return HEAPU16[pointer >> 1]; };
          case 2: return signed ?
              function readS32FromPointer(pointer) { return HEAP32[pointer >> 2]; } :
              function readU32FromPointer(pointer) { return HEAPU32[pointer >> 2]; };
          default:
              throw new TypeError("Unknown integer type: " + name);
      }
    }function __embind_register_integer(primitiveType, name, size, minRange, maxRange) {
      name = readLatin1String(name);
      if (maxRange === -1) { // LLVM doesn't have signed and unsigned 32-bit types, so u32 literals come out as 'i32 -1'. Always treat those as max u32.
          maxRange = 4294967295;
      }
  
      var shift = getShiftFromSize(size);
      
      var fromWireType = function(value) {
          return value;
      };
      
      if (minRange === 0) {
          var bitshift = 32 - 8*size;
          fromWireType = function(value) {
              return (value << bitshift) >>> bitshift;
          };
      }
  
      var isUnsignedType = (name.indexOf('unsigned') != -1);
  
      registerType(primitiveType, {
          name: name,
          'fromWireType': fromWireType,
          'toWireType': function(destructors, value) {
              // todo: Here we have an opportunity for -O3 level "unsafe" optimizations: we could
              // avoid the following two if()s and assume value is of proper type.
              if (typeof value !== "number" && typeof value !== "boolean") {
                  throw new TypeError('Cannot convert "' + _embind_repr(value) + '" to ' + this.name);
              }
              if (value < minRange || value > maxRange) {
                  throw new TypeError('Passing a number "' + _embind_repr(value) + '" from JS side to C/C++ side to an argument of type "' + name + '", which is outside the valid range [' + minRange + ', ' + maxRange + ']!');
              }
              return isUnsignedType ? (value >>> 0) : (value | 0);
          },
          'argPackAdvance': 8,
          'readValueFromPointer': integerReadValueFromPointer(name, shift, minRange !== 0),
          destructorFunction: null, // This type does not need a destructor
      });
    }

  function _pthread_once(ptr, func) {
      if (!_pthread_once.seen) _pthread_once.seen = {};
      if (ptr in _pthread_once.seen) return;
      Module['dynCall_v'](func);
      _pthread_once.seen[ptr] = 1;
    }

  function ___lock() {}

  function ___unlock() {}

  
  var PTHREAD_SPECIFIC={};function _pthread_getspecific(key) {
      return PTHREAD_SPECIFIC[key] || 0;
    }

  
  var PTHREAD_SPECIFIC_NEXT_KEY=1;
  
  var ERRNO_CODES={EPERM:1,ENOENT:2,ESRCH:3,EINTR:4,EIO:5,ENXIO:6,E2BIG:7,ENOEXEC:8,EBADF:9,ECHILD:10,EAGAIN:11,EWOULDBLOCK:11,ENOMEM:12,EACCES:13,EFAULT:14,ENOTBLK:15,EBUSY:16,EEXIST:17,EXDEV:18,ENODEV:19,ENOTDIR:20,EISDIR:21,EINVAL:22,ENFILE:23,EMFILE:24,ENOTTY:25,ETXTBSY:26,EFBIG:27,ENOSPC:28,ESPIPE:29,EROFS:30,EMLINK:31,EPIPE:32,EDOM:33,ERANGE:34,ENOMSG:42,EIDRM:43,ECHRNG:44,EL2NSYNC:45,EL3HLT:46,EL3RST:47,ELNRNG:48,EUNATCH:49,ENOCSI:50,EL2HLT:51,EDEADLK:35,ENOLCK:37,EBADE:52,EBADR:53,EXFULL:54,ENOANO:55,EBADRQC:56,EBADSLT:57,EDEADLOCK:35,EBFONT:59,ENOSTR:60,ENODATA:61,ETIME:62,ENOSR:63,ENONET:64,ENOPKG:65,EREMOTE:66,ENOLINK:67,EADV:68,ESRMNT:69,ECOMM:70,EPROTO:71,EMULTIHOP:72,EDOTDOT:73,EBADMSG:74,ENOTUNIQ:76,EBADFD:77,EREMCHG:78,ELIBACC:79,ELIBBAD:80,ELIBSCN:81,ELIBMAX:82,ELIBEXEC:83,ENOSYS:38,ENOTEMPTY:39,ENAMETOOLONG:36,ELOOP:40,EOPNOTSUPP:95,EPFNOSUPPORT:96,ECONNRESET:104,ENOBUFS:105,EAFNOSUPPORT:97,EPROTOTYPE:91,ENOTSOCK:88,ENOPROTOOPT:92,ESHUTDOWN:108,ECONNREFUSED:111,EADDRINUSE:98,ECONNABORTED:103,ENETUNREACH:101,ENETDOWN:100,ETIMEDOUT:110,EHOSTDOWN:112,EHOSTUNREACH:113,EINPROGRESS:115,EALREADY:114,EDESTADDRREQ:89,EMSGSIZE:90,EPROTONOSUPPORT:93,ESOCKTNOSUPPORT:94,EADDRNOTAVAIL:99,ENETRESET:102,EISCONN:106,ENOTCONN:107,ETOOMANYREFS:109,EUSERS:87,EDQUOT:122,ESTALE:116,ENOTSUP:95,ENOMEDIUM:123,EILSEQ:84,EOVERFLOW:75,ECANCELED:125,ENOTRECOVERABLE:131,EOWNERDEAD:130,ESTRPIPE:86};function _pthread_key_create(key, destructor) {
      if (key == 0) {
        return ERRNO_CODES.EINVAL;
      }
      HEAP32[((key)>>2)]=PTHREAD_SPECIFIC_NEXT_KEY;
      // values start at 0
      PTHREAD_SPECIFIC[PTHREAD_SPECIFIC_NEXT_KEY] = 0;
      PTHREAD_SPECIFIC_NEXT_KEY++;
      return 0;
    }

  var _emscripten_asm_const_int=true;

  
  function __exit(status) {
      // void _exit(int status);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/exit.html
      Module['exit'](status);
    }function _exit(status) {
      __exit(status);
    }

  function _pthread_setspecific(key, value) {
      if (!(key in PTHREAD_SPECIFIC)) {
        return ERRNO_CODES.EINVAL;
      }
      PTHREAD_SPECIFIC[key] = value;
      return 0;
    }

  
  
  var emval_free_list=[];
  
  var emval_handle_array=[{},{value:undefined},{value:null},{value:true},{value:false}];function __emval_decref(handle) {
      if (handle > 4 && 0 === --emval_handle_array[handle].refcount) {
          emval_handle_array[handle] = undefined;
          emval_free_list.push(handle);
      }
    }
  
  
  
  function count_emval_handles() {
      var count = 0;
      for (var i = 5; i < emval_handle_array.length; ++i) {
          if (emval_handle_array[i] !== undefined) {
              ++count;
          }
      }
      return count;
    }
  
  function get_first_emval() {
      for (var i = 5; i < emval_handle_array.length; ++i) {
          if (emval_handle_array[i] !== undefined) {
              return emval_handle_array[i];
          }
      }
      return null;
    }function init_emval() {
      Module['count_emval_handles'] = count_emval_handles;
      Module['get_first_emval'] = get_first_emval;
    }function __emval_register(value) {
  
      switch(value){
        case undefined :{ return 1; }
        case null :{ return 2; }
        case true :{ return 3; }
        case false :{ return 4; }
        default:{
          var handle = emval_free_list.length ?
              emval_free_list.pop() :
              emval_handle_array.length;
  
          emval_handle_array[handle] = {refcount: 1, value: value};
          return handle;
          }
        }
    }function __embind_register_emval(rawType, name) {
      name = readLatin1String(name);
      registerType(rawType, {
          name: name,
          'fromWireType': function(handle) {
              var rv = emval_handle_array[handle].value;
              __emval_decref(handle);
              return rv;
          },
          'toWireType': function(destructors, value) {
              return __emval_register(value);
          },
          'argPackAdvance': 8,
          'readValueFromPointer': simpleReadValueFromPointer,
          destructorFunction: null, // This type does not need a destructor
  
          // TODO: do we need a deleteObject here?  write a test where
          // emval is passed into JS via an interface
      });
    }

  function ___cxa_allocate_exception(size) {
      return _malloc(size);
    }

  
  
  
  var ERRNO_MESSAGES={0:"Success",1:"Not super-user",2:"No such file or directory",3:"No such process",4:"Interrupted system call",5:"I/O error",6:"No such device or address",7:"Arg list too long",8:"Exec format error",9:"Bad file number",10:"No children",11:"No more processes",12:"Not enough core",13:"Permission denied",14:"Bad address",15:"Block device required",16:"Mount device busy",17:"File exists",18:"Cross-device link",19:"No such device",20:"Not a directory",21:"Is a directory",22:"Invalid argument",23:"Too many open files in system",24:"Too many open files",25:"Not a typewriter",26:"Text file busy",27:"File too large",28:"No space left on device",29:"Illegal seek",30:"Read only file system",31:"Too many links",32:"Broken pipe",33:"Math arg out of domain of func",34:"Math result not representable",35:"File locking deadlock error",36:"File or path name too long",37:"No record locks available",38:"Function not implemented",39:"Directory not empty",40:"Too many symbolic links",42:"No message of desired type",43:"Identifier removed",44:"Channel number out of range",45:"Level 2 not synchronized",46:"Level 3 halted",47:"Level 3 reset",48:"Link number out of range",49:"Protocol driver not attached",50:"No CSI structure available",51:"Level 2 halted",52:"Invalid exchange",53:"Invalid request descriptor",54:"Exchange full",55:"No anode",56:"Invalid request code",57:"Invalid slot",59:"Bad font file fmt",60:"Device not a stream",61:"No data (for no delay io)",62:"Timer expired",63:"Out of streams resources",64:"Machine is not on the network",65:"Package not installed",66:"The object is remote",67:"The link has been severed",68:"Advertise error",69:"Srmount error",70:"Communication error on send",71:"Protocol error",72:"Multihop attempted",73:"Cross mount point (not really error)",74:"Trying to read unreadable message",75:"Value too large for defined data type",76:"Given log. name not unique",77:"f.d. invalid for this operation",78:"Remote address changed",79:"Can   access a needed shared lib",80:"Accessing a corrupted shared lib",81:".lib section in a.out corrupted",82:"Attempting to link in too many libs",83:"Attempting to exec a shared library",84:"Illegal byte sequence",86:"Streams pipe error",87:"Too many users",88:"Socket operation on non-socket",89:"Destination address required",90:"Message too long",91:"Protocol wrong type for socket",92:"Protocol not available",93:"Unknown protocol",94:"Socket type not supported",95:"Not supported",96:"Protocol family not supported",97:"Address family not supported by protocol family",98:"Address already in use",99:"Address not available",100:"Network interface is not configured",101:"Network is unreachable",102:"Connection reset by network",103:"Connection aborted",104:"Connection reset by peer",105:"No buffer space available",106:"Socket is already connected",107:"Socket is not connected",108:"Can't send after socket shutdown",109:"Too many references",110:"Connection timed out",111:"Connection refused",112:"Host is down",113:"Host is unreachable",114:"Socket already connected",115:"Connection already in progress",116:"Stale file handle",122:"Quota exceeded",123:"No medium (in tape drive)",125:"Operation canceled",130:"Previous owner died",131:"State not recoverable"};
  
  function ___setErrNo(value) {
      if (Module['___errno_location']) HEAP32[((Module['___errno_location']())>>2)]=value;
      else Module.printErr('failed to set errno from JS');
      return value;
    }
  
  var PATH={splitPath:function (filename) {
        var splitPathRe = /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
        return splitPathRe.exec(filename).slice(1);
      },normalizeArray:function (parts, allowAboveRoot) {
        // if the path tries to go above the root, `up` ends up > 0
        var up = 0;
        for (var i = parts.length - 1; i >= 0; i--) {
          var last = parts[i];
          if (last === '.') {
            parts.splice(i, 1);
          } else if (last === '..') {
            parts.splice(i, 1);
            up++;
          } else if (up) {
            parts.splice(i, 1);
            up--;
          }
        }
        // if the path is allowed to go above the root, restore leading ..s
        if (allowAboveRoot) {
          for (; up; up--) {
            parts.unshift('..');
          }
        }
        return parts;
      },normalize:function (path) {
        var isAbsolute = path.charAt(0) === '/',
            trailingSlash = path.substr(-1) === '/';
        // Normalize the path
        path = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), !isAbsolute).join('/');
        if (!path && !isAbsolute) {
          path = '.';
        }
        if (path && trailingSlash) {
          path += '/';
        }
        return (isAbsolute ? '/' : '') + path;
      },dirname:function (path) {
        var result = PATH.splitPath(path),
            root = result[0],
            dir = result[1];
        if (!root && !dir) {
          // No dirname whatsoever
          return '.';
        }
        if (dir) {
          // It has a dirname, strip trailing slash
          dir = dir.substr(0, dir.length - 1);
        }
        return root + dir;
      },basename:function (path) {
        // EMSCRIPTEN return '/'' for '/', not an empty string
        if (path === '/') return '/';
        var lastSlash = path.lastIndexOf('/');
        if (lastSlash === -1) return path;
        return path.substr(lastSlash+1);
      },extname:function (path) {
        return PATH.splitPath(path)[3];
      },join:function () {
        var paths = Array.prototype.slice.call(arguments, 0);
        return PATH.normalize(paths.join('/'));
      },join2:function (l, r) {
        return PATH.normalize(l + '/' + r);
      },resolve:function () {
        var resolvedPath = '',
          resolvedAbsolute = false;
        for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
          var path = (i >= 0) ? arguments[i] : FS.cwd();
          // Skip empty and invalid entries
          if (typeof path !== 'string') {
            throw new TypeError('Arguments to path.resolve must be strings');
          } else if (!path) {
            return ''; // an invalid portion invalidates the whole thing
          }
          resolvedPath = path + '/' + resolvedPath;
          resolvedAbsolute = path.charAt(0) === '/';
        }
        // At this point the path should be resolved to a full absolute path, but
        // handle relative paths to be safe (might happen when process.cwd() fails)
        resolvedPath = PATH.normalizeArray(resolvedPath.split('/').filter(function(p) {
          return !!p;
        }), !resolvedAbsolute).join('/');
        return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';
      },relative:function (from, to) {
        from = PATH.resolve(from).substr(1);
        to = PATH.resolve(to).substr(1);
        function trim(arr) {
          var start = 0;
          for (; start < arr.length; start++) {
            if (arr[start] !== '') break;
          }
          var end = arr.length - 1;
          for (; end >= 0; end--) {
            if (arr[end] !== '') break;
          }
          if (start > end) return [];
          return arr.slice(start, end - start + 1);
        }
        var fromParts = trim(from.split('/'));
        var toParts = trim(to.split('/'));
        var length = Math.min(fromParts.length, toParts.length);
        var samePartsLength = length;
        for (var i = 0; i < length; i++) {
          if (fromParts[i] !== toParts[i]) {
            samePartsLength = i;
            break;
          }
        }
        var outputParts = [];
        for (var i = samePartsLength; i < fromParts.length; i++) {
          outputParts.push('..');
        }
        outputParts = outputParts.concat(toParts.slice(samePartsLength));
        return outputParts.join('/');
      }};
  
  var TTY={ttys:[],init:function () {
        // https://github.com/kripken/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // currently, FS.init does not distinguish if process.stdin is a file or TTY
        //   // device, it always assumes it's a TTY device. because of this, we're forcing
        //   // process.stdin to UTF8 encoding to at least make stdin reading compatible
        //   // with text files until FS.init can be refactored.
        //   process['stdin']['setEncoding']('utf8');
        // }
      },shutdown:function () {
        // https://github.com/kripken/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // inolen: any idea as to why node -e 'process.stdin.read()' wouldn't exit immediately (with process.stdin being a tty)?
        //   // isaacs: because now it's reading from the stream, you've expressed interest in it, so that read() kicks off a _read() which creates a ReadReq operation
        //   // inolen: I thought read() in that case was a synchronous operation that just grabbed some amount of buffered data if it exists?
        //   // isaacs: it is. but it also triggers a _read() call, which calls readStart() on the handle
        //   // isaacs: do process.stdin.pause() and i'd think it'd probably close the pending call
        //   process['stdin']['pause']();
        // }
      },register:function (dev, ops) {
        TTY.ttys[dev] = { input: [], output: [], ops: ops };
        FS.registerDevice(dev, TTY.stream_ops);
      },stream_ops:{open:function (stream) {
          var tty = TTY.ttys[stream.node.rdev];
          if (!tty) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          stream.tty = tty;
          stream.seekable = false;
        },close:function (stream) {
          // flush any pending line data
          stream.tty.ops.flush(stream.tty);
        },flush:function (stream) {
          stream.tty.ops.flush(stream.tty);
        },read:function (stream, buffer, offset, length, pos /* ignored */) {
          if (!stream.tty || !stream.tty.ops.get_char) {
            throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
          }
          var bytesRead = 0;
          for (var i = 0; i < length; i++) {
            var result;
            try {
              result = stream.tty.ops.get_char(stream.tty);
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
            if (result === undefined && bytesRead === 0) {
              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
            }
            if (result === null || result === undefined) break;
            bytesRead++;
            buffer[offset+i] = result;
          }
          if (bytesRead) {
            stream.node.timestamp = Date.now();
          }
          return bytesRead;
        },write:function (stream, buffer, offset, length, pos) {
          if (!stream.tty || !stream.tty.ops.put_char) {
            throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
          }
          for (var i = 0; i < length; i++) {
            try {
              stream.tty.ops.put_char(stream.tty, buffer[offset+i]);
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
          }
          if (length) {
            stream.node.timestamp = Date.now();
          }
          return i;
        }},default_tty_ops:{get_char:function (tty) {
          if (!tty.input.length) {
            var result = null;
            if (ENVIRONMENT_IS_NODE) {
              // we will read data by chunks of BUFSIZE
              var BUFSIZE = 256;
              var buf = new Buffer(BUFSIZE);
              var bytesRead = 0;
  
              var isPosixPlatform = (process.platform != 'win32'); // Node doesn't offer a direct check, so test by exclusion
  
              var fd = process.stdin.fd;
              if (isPosixPlatform) {
                // Linux and Mac cannot use process.stdin.fd (which isn't set up as sync)
                var usingDevice = false;
                try {
                  fd = fs.openSync('/dev/stdin', 'r');
                  usingDevice = true;
                } catch (e) {}
              }
  
              try {
                bytesRead = fs.readSync(fd, buf, 0, BUFSIZE, null);
              } catch(e) {
                // Cross-platform differences: on Windows, reading EOF throws an exception, but on other OSes,
                // reading EOF returns 0. Uniformize behavior by treating the EOF exception to return 0.
                if (e.toString().indexOf('EOF') != -1) bytesRead = 0;
                else throw e;
              }
  
              if (usingDevice) { fs.closeSync(fd); }
              if (bytesRead > 0) {
                result = buf.slice(0, bytesRead).toString('utf-8');
              } else {
                result = null;
              }
  
            } else if (typeof window != 'undefined' &&
              typeof window.prompt == 'function') {
              // Browser.
              result = window.prompt('Input: ');  // returns null on cancel
              if (result !== null) {
                result += '\n';
              }
            } else if (typeof readline == 'function') {
              // Command line.
              result = readline();
              if (result !== null) {
                result += '\n';
              }
            }
            if (!result) {
              return null;
            }
            tty.input = intArrayFromString(result, true);
          }
          return tty.input.shift();
        },put_char:function (tty, val) {
          if (val === null || val === 10) {
            Module['print'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          } else {
            if (val != 0) tty.output.push(val); // val == 0 would cut text output off in the middle.
          }
        },flush:function (tty) {
          if (tty.output && tty.output.length > 0) {
            Module['print'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          }
        }},default_tty1_ops:{put_char:function (tty, val) {
          if (val === null || val === 10) {
            Module['printErr'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          } else {
            if (val != 0) tty.output.push(val);
          }
        },flush:function (tty) {
          if (tty.output && tty.output.length > 0) {
            Module['printErr'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          }
        }}};
  
  var MEMFS={ops_table:null,mount:function (mount) {
        return MEMFS.createNode(null, '/', 16384 | 511 /* 0777 */, 0);
      },createNode:function (parent, name, mode, dev) {
        if (FS.isBlkdev(mode) || FS.isFIFO(mode)) {
          // no supported
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (!MEMFS.ops_table) {
          MEMFS.ops_table = {
            dir: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                lookup: MEMFS.node_ops.lookup,
                mknod: MEMFS.node_ops.mknod,
                rename: MEMFS.node_ops.rename,
                unlink: MEMFS.node_ops.unlink,
                rmdir: MEMFS.node_ops.rmdir,
                readdir: MEMFS.node_ops.readdir,
                symlink: MEMFS.node_ops.symlink
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek
              }
            },
            file: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek,
                read: MEMFS.stream_ops.read,
                write: MEMFS.stream_ops.write,
                allocate: MEMFS.stream_ops.allocate,
                mmap: MEMFS.stream_ops.mmap,
                msync: MEMFS.stream_ops.msync
              }
            },
            link: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                readlink: MEMFS.node_ops.readlink
              },
              stream: {}
            },
            chrdev: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: FS.chrdev_stream_ops
            }
          };
        }
        var node = FS.createNode(parent, name, mode, dev);
        if (FS.isDir(node.mode)) {
          node.node_ops = MEMFS.ops_table.dir.node;
          node.stream_ops = MEMFS.ops_table.dir.stream;
          node.contents = {};
        } else if (FS.isFile(node.mode)) {
          node.node_ops = MEMFS.ops_table.file.node;
          node.stream_ops = MEMFS.ops_table.file.stream;
          node.usedBytes = 0; // The actual number of bytes used in the typed array, as opposed to contents.length which gives the whole capacity.
          // When the byte data of the file is populated, this will point to either a typed array, or a normal JS array. Typed arrays are preferred
          // for performance, and used by default. However, typed arrays are not resizable like normal JS arrays are, so there is a small disk size
          // penalty involved for appending file writes that continuously grow a file similar to std::vector capacity vs used -scheme.
          node.contents = null; 
        } else if (FS.isLink(node.mode)) {
          node.node_ops = MEMFS.ops_table.link.node;
          node.stream_ops = MEMFS.ops_table.link.stream;
        } else if (FS.isChrdev(node.mode)) {
          node.node_ops = MEMFS.ops_table.chrdev.node;
          node.stream_ops = MEMFS.ops_table.chrdev.stream;
        }
        node.timestamp = Date.now();
        // add the new node to the parent
        if (parent) {
          parent.contents[name] = node;
        }
        return node;
      },getFileDataAsRegularArray:function (node) {
        if (node.contents && node.contents.subarray) {
          var arr = [];
          for (var i = 0; i < node.usedBytes; ++i) arr.push(node.contents[i]);
          return arr; // Returns a copy of the original data.
        }
        return node.contents; // No-op, the file contents are already in a JS array. Return as-is.
      },getFileDataAsTypedArray:function (node) {
        if (!node.contents) return new Uint8Array;
        if (node.contents.subarray) return node.contents.subarray(0, node.usedBytes); // Make sure to not return excess unused bytes.
        return new Uint8Array(node.contents);
      },expandFileStorage:function (node, newCapacity) {
        // If we are asked to expand the size of a file that already exists, revert to using a standard JS array to store the file
        // instead of a typed array. This makes resizing the array more flexible because we can just .push() elements at the back to
        // increase the size.
        if (node.contents && node.contents.subarray && newCapacity > node.contents.length) {
          node.contents = MEMFS.getFileDataAsRegularArray(node);
          node.usedBytes = node.contents.length; // We might be writing to a lazy-loaded file which had overridden this property, so force-reset it.
        }
  
        if (!node.contents || node.contents.subarray) { // Keep using a typed array if creating a new storage, or if old one was a typed array as well.
          var prevCapacity = node.contents ? node.contents.length : 0;
          if (prevCapacity >= newCapacity) return; // No need to expand, the storage was already large enough.
          // Don't expand strictly to the given requested limit if it's only a very small increase, but instead geometrically grow capacity.
          // For small filesizes (<1MB), perform size*2 geometric increase, but for large sizes, do a much more conservative size*1.125 increase to
          // avoid overshooting the allocation cap by a very large margin.
          var CAPACITY_DOUBLING_MAX = 1024 * 1024;
          newCapacity = Math.max(newCapacity, (prevCapacity * (prevCapacity < CAPACITY_DOUBLING_MAX ? 2.0 : 1.125)) | 0);
          if (prevCapacity != 0) newCapacity = Math.max(newCapacity, 256); // At minimum allocate 256b for each file when expanding.
          var oldContents = node.contents;
          node.contents = new Uint8Array(newCapacity); // Allocate new storage.
          if (node.usedBytes > 0) node.contents.set(oldContents.subarray(0, node.usedBytes), 0); // Copy old data over to the new storage.
          return;
        }
        // Not using a typed array to back the file storage. Use a standard JS array instead.
        if (!node.contents && newCapacity > 0) node.contents = [];
        while (node.contents.length < newCapacity) node.contents.push(0);
      },resizeFileStorage:function (node, newSize) {
        if (node.usedBytes == newSize) return;
        if (newSize == 0) {
          node.contents = null; // Fully decommit when requesting a resize to zero.
          node.usedBytes = 0;
          return;
        }
        if (!node.contents || node.contents.subarray) { // Resize a typed array if that is being used as the backing store.
          var oldContents = node.contents;
          node.contents = new Uint8Array(new ArrayBuffer(newSize)); // Allocate new storage.
          if (oldContents) {
            node.contents.set(oldContents.subarray(0, Math.min(newSize, node.usedBytes))); // Copy old data over to the new storage.
          }
          node.usedBytes = newSize;
          return;
        }
        // Backing with a JS array.
        if (!node.contents) node.contents = [];
        if (node.contents.length > newSize) node.contents.length = newSize;
        else while (node.contents.length < newSize) node.contents.push(0);
        node.usedBytes = newSize;
      },node_ops:{getattr:function (node) {
          var attr = {};
          // device numbers reuse inode numbers.
          attr.dev = FS.isChrdev(node.mode) ? node.id : 1;
          attr.ino = node.id;
          attr.mode = node.mode;
          attr.nlink = 1;
          attr.uid = 0;
          attr.gid = 0;
          attr.rdev = node.rdev;
          if (FS.isDir(node.mode)) {
            attr.size = 4096;
          } else if (FS.isFile(node.mode)) {
            attr.size = node.usedBytes;
          } else if (FS.isLink(node.mode)) {
            attr.size = node.link.length;
          } else {
            attr.size = 0;
          }
          attr.atime = new Date(node.timestamp);
          attr.mtime = new Date(node.timestamp);
          attr.ctime = new Date(node.timestamp);
          // NOTE: In our implementation, st_blocks = Math.ceil(st_size/st_blksize),
          //       but this is not required by the standard.
          attr.blksize = 4096;
          attr.blocks = Math.ceil(attr.size / attr.blksize);
          return attr;
        },setattr:function (node, attr) {
          if (attr.mode !== undefined) {
            node.mode = attr.mode;
          }
          if (attr.timestamp !== undefined) {
            node.timestamp = attr.timestamp;
          }
          if (attr.size !== undefined) {
            MEMFS.resizeFileStorage(node, attr.size);
          }
        },lookup:function (parent, name) {
          throw FS.genericErrors[ERRNO_CODES.ENOENT];
        },mknod:function (parent, name, mode, dev) {
          return MEMFS.createNode(parent, name, mode, dev);
        },rename:function (old_node, new_dir, new_name) {
          // if we're overwriting a directory at new_name, make sure it's empty.
          if (FS.isDir(old_node.mode)) {
            var new_node;
            try {
              new_node = FS.lookupNode(new_dir, new_name);
            } catch (e) {
            }
            if (new_node) {
              for (var i in new_node.contents) {
                throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
              }
            }
          }
          // do the internal rewiring
          delete old_node.parent.contents[old_node.name];
          old_node.name = new_name;
          new_dir.contents[new_name] = old_node;
          old_node.parent = new_dir;
        },unlink:function (parent, name) {
          delete parent.contents[name];
        },rmdir:function (parent, name) {
          var node = FS.lookupNode(parent, name);
          for (var i in node.contents) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
          }
          delete parent.contents[name];
        },readdir:function (node) {
          var entries = ['.', '..']
          for (var key in node.contents) {
            if (!node.contents.hasOwnProperty(key)) {
              continue;
            }
            entries.push(key);
          }
          return entries;
        },symlink:function (parent, newname, oldpath) {
          var node = MEMFS.createNode(parent, newname, 511 /* 0777 */ | 40960, 0);
          node.link = oldpath;
          return node;
        },readlink:function (node) {
          if (!FS.isLink(node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return node.link;
        }},stream_ops:{read:function (stream, buffer, offset, length, position) {
          var contents = stream.node.contents;
          if (position >= stream.node.usedBytes) return 0;
          var size = Math.min(stream.node.usedBytes - position, length);
          assert(size >= 0);
          if (size > 8 && contents.subarray) { // non-trivial, and typed array
            buffer.set(contents.subarray(position, position + size), offset);
          } else {
            for (var i = 0; i < size; i++) buffer[offset + i] = contents[position + i];
          }
          return size;
        },write:function (stream, buffer, offset, length, position, canOwn) {
          if (!length) return 0;
          var node = stream.node;
          node.timestamp = Date.now();
  
          if (buffer.subarray && (!node.contents || node.contents.subarray)) { // This write is from a typed array to a typed array?
            if (canOwn) {
              assert(position === 0, 'canOwn must imply no weird position inside the file');
              node.contents = buffer.subarray(offset, offset + length);
              node.usedBytes = length;
              return length;
            } else if (node.usedBytes === 0 && position === 0) { // If this is a simple first write to an empty file, do a fast set since we don't need to care about old data.
              node.contents = new Uint8Array(buffer.subarray(offset, offset + length));
              node.usedBytes = length;
              return length;
            } else if (position + length <= node.usedBytes) { // Writing to an already allocated and used subrange of the file?
              node.contents.set(buffer.subarray(offset, offset + length), position);
              return length;
            }
          }
  
          // Appending to an existing file and we need to reallocate, or source data did not come as a typed array.
          MEMFS.expandFileStorage(node, position+length);
          if (node.contents.subarray && buffer.subarray) node.contents.set(buffer.subarray(offset, offset + length), position); // Use typed array write if available.
          else {
            for (var i = 0; i < length; i++) {
             node.contents[position + i] = buffer[offset + i]; // Or fall back to manual write if not.
            }
          }
          node.usedBytes = Math.max(node.usedBytes, position+length);
          return length;
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              position += stream.node.usedBytes;
            }
          }
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return position;
        },allocate:function (stream, offset, length) {
          MEMFS.expandFileStorage(stream.node, offset + length);
          stream.node.usedBytes = Math.max(stream.node.usedBytes, offset + length);
        },mmap:function (stream, buffer, offset, length, position, prot, flags) {
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          var ptr;
          var allocated;
          var contents = stream.node.contents;
          // Only make a new copy when MAP_PRIVATE is specified.
          if ( !(flags & 2) &&
                (contents.buffer === buffer || contents.buffer === buffer.buffer) ) {
            // We can't emulate MAP_SHARED when the file is not backed by the buffer
            // we're mapping to (e.g. the HEAP buffer).
            allocated = false;
            ptr = contents.byteOffset;
          } else {
            // Try to avoid unnecessary slices.
            if (position > 0 || position + length < stream.node.usedBytes) {
              if (contents.subarray) {
                contents = contents.subarray(position, position + length);
              } else {
                contents = Array.prototype.slice.call(contents, position, position + length);
              }
            }
            allocated = true;
            ptr = _malloc(length);
            if (!ptr) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOMEM);
            }
            buffer.set(contents, ptr);
          }
          return { ptr: ptr, allocated: allocated };
        },msync:function (stream, buffer, offset, length, mmapFlags) {
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          if (mmapFlags & 2) {
            // MAP_PRIVATE calls need not to be synced back to underlying fs
            return 0;
          }
  
          var bytesWritten = MEMFS.stream_ops.write(stream, buffer, 0, length, offset, false);
          // should we check if bytesWritten and length are the same?
          return 0;
        }}};
  
  var IDBFS={dbs:{},indexedDB:function () {
        if (typeof indexedDB !== 'undefined') return indexedDB;
        var ret = null;
        if (typeof window === 'object') ret = window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
        assert(ret, 'IDBFS used, but indexedDB not supported');
        return ret;
      },DB_VERSION:21,DB_STORE_NAME:"FILE_DATA",mount:function (mount) {
        // reuse all of the core MEMFS functionality
        return MEMFS.mount.apply(null, arguments);
      },syncfs:function (mount, populate, callback) {
        IDBFS.getLocalSet(mount, function(err, local) {
          if (err) return callback(err);
  
          IDBFS.getRemoteSet(mount, function(err, remote) {
            if (err) return callback(err);
  
            var src = populate ? remote : local;
            var dst = populate ? local : remote;
  
            IDBFS.reconcile(src, dst, callback);
          });
        });
      },getDB:function (name, callback) {
        // check the cache first
        var db = IDBFS.dbs[name];
        if (db) {
          return callback(null, db);
        }
  
        var req;
        try {
          req = IDBFS.indexedDB().open(name, IDBFS.DB_VERSION);
        } catch (e) {
          return callback(e);
        }
        if (!req) {
          return callback("Unable to connect to IndexedDB");
        }
        req.onupgradeneeded = function(e) {
          var db = e.target.result;
          var transaction = e.target.transaction;
  
          var fileStore;
  
          if (db.objectStoreNames.contains(IDBFS.DB_STORE_NAME)) {
            fileStore = transaction.objectStore(IDBFS.DB_STORE_NAME);
          } else {
            fileStore = db.createObjectStore(IDBFS.DB_STORE_NAME);
          }
  
          if (!fileStore.indexNames.contains('timestamp')) {
            fileStore.createIndex('timestamp', 'timestamp', { unique: false });
          }
        };
        req.onsuccess = function() {
          db = req.result;
  
          // add to the cache
          IDBFS.dbs[name] = db;
          callback(null, db);
        };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },getLocalSet:function (mount, callback) {
        var entries = {};
  
        function isRealDir(p) {
          return p !== '.' && p !== '..';
        };
        function toAbsolute(root) {
          return function(p) {
            return PATH.join2(root, p);
          }
        };
  
        var check = FS.readdir(mount.mountpoint).filter(isRealDir).map(toAbsolute(mount.mountpoint));
  
        while (check.length) {
          var path = check.pop();
          var stat;
  
          try {
            stat = FS.stat(path);
          } catch (e) {
            return callback(e);
          }
  
          if (FS.isDir(stat.mode)) {
            check.push.apply(check, FS.readdir(path).filter(isRealDir).map(toAbsolute(path)));
          }
  
          entries[path] = { timestamp: stat.mtime };
        }
  
        return callback(null, { type: 'local', entries: entries });
      },getRemoteSet:function (mount, callback) {
        var entries = {};
  
        IDBFS.getDB(mount.mountpoint, function(err, db) {
          if (err) return callback(err);
  
          var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readonly');
          transaction.onerror = function(e) {
            callback(this.error);
            e.preventDefault();
          };
  
          var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
          var index = store.index('timestamp');
  
          index.openKeyCursor().onsuccess = function(event) {
            var cursor = event.target.result;
  
            if (!cursor) {
              return callback(null, { type: 'remote', db: db, entries: entries });
            }
  
            entries[cursor.primaryKey] = { timestamp: cursor.key };
  
            cursor.continue();
          };
        });
      },loadLocalEntry:function (path, callback) {
        var stat, node;
  
        try {
          var lookup = FS.lookupPath(path);
          node = lookup.node;
          stat = FS.stat(path);
        } catch (e) {
          return callback(e);
        }
  
        if (FS.isDir(stat.mode)) {
          return callback(null, { timestamp: stat.mtime, mode: stat.mode });
        } else if (FS.isFile(stat.mode)) {
          // Performance consideration: storing a normal JavaScript array to a IndexedDB is much slower than storing a typed array.
          // Therefore always convert the file contents to a typed array first before writing the data to IndexedDB.
          node.contents = MEMFS.getFileDataAsTypedArray(node);
          return callback(null, { timestamp: stat.mtime, mode: stat.mode, contents: node.contents });
        } else {
          return callback(new Error('node type not supported'));
        }
      },storeLocalEntry:function (path, entry, callback) {
        try {
          if (FS.isDir(entry.mode)) {
            FS.mkdir(path, entry.mode);
          } else if (FS.isFile(entry.mode)) {
            FS.writeFile(path, entry.contents, { encoding: 'binary', canOwn: true });
          } else {
            return callback(new Error('node type not supported'));
          }
  
          FS.chmod(path, entry.mode);
          FS.utime(path, entry.timestamp, entry.timestamp);
        } catch (e) {
          return callback(e);
        }
  
        callback(null);
      },removeLocalEntry:function (path, callback) {
        try {
          var lookup = FS.lookupPath(path);
          var stat = FS.stat(path);
  
          if (FS.isDir(stat.mode)) {
            FS.rmdir(path);
          } else if (FS.isFile(stat.mode)) {
            FS.unlink(path);
          }
        } catch (e) {
          return callback(e);
        }
  
        callback(null);
      },loadRemoteEntry:function (store, path, callback) {
        var req = store.get(path);
        req.onsuccess = function(event) { callback(null, event.target.result); };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },storeRemoteEntry:function (store, path, entry, callback) {
        var req = store.put(entry, path);
        req.onsuccess = function() { callback(null); };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },removeRemoteEntry:function (store, path, callback) {
        var req = store.delete(path);
        req.onsuccess = function() { callback(null); };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },reconcile:function (src, dst, callback) {
        var total = 0;
  
        var create = [];
        Object.keys(src.entries).forEach(function (key) {
          var e = src.entries[key];
          var e2 = dst.entries[key];
          if (!e2 || e.timestamp > e2.timestamp) {
            create.push(key);
            total++;
          }
        });
  
        var remove = [];
        Object.keys(dst.entries).forEach(function (key) {
          var e = dst.entries[key];
          var e2 = src.entries[key];
          if (!e2) {
            remove.push(key);
            total++;
          }
        });
  
        if (!total) {
          return callback(null);
        }
  
        var errored = false;
        var completed = 0;
        var db = src.type === 'remote' ? src.db : dst.db;
        var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readwrite');
        var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
  
        function done(err) {
          if (err) {
            if (!done.errored) {
              done.errored = true;
              return callback(err);
            }
            return;
          }
          if (++completed >= total) {
            return callback(null);
          }
        };
  
        transaction.onerror = function(e) {
          done(this.error);
          e.preventDefault();
        };
  
        // sort paths in ascending order so directory entries are created
        // before the files inside them
        create.sort().forEach(function (path) {
          if (dst.type === 'local') {
            IDBFS.loadRemoteEntry(store, path, function (err, entry) {
              if (err) return done(err);
              IDBFS.storeLocalEntry(path, entry, done);
            });
          } else {
            IDBFS.loadLocalEntry(path, function (err, entry) {
              if (err) return done(err);
              IDBFS.storeRemoteEntry(store, path, entry, done);
            });
          }
        });
  
        // sort paths in descending order so files are deleted before their
        // parent directories
        remove.sort().reverse().forEach(function(path) {
          if (dst.type === 'local') {
            IDBFS.removeLocalEntry(path, done);
          } else {
            IDBFS.removeRemoteEntry(store, path, done);
          }
        });
      }};
  
  var NODEFS={isWindows:false,staticInit:function () {
        NODEFS.isWindows = !!process.platform.match(/^win/);
      },mount:function (mount) {
        assert(ENVIRONMENT_IS_NODE);
        return NODEFS.createNode(null, '/', NODEFS.getMode(mount.opts.root), 0);
      },createNode:function (parent, name, mode, dev) {
        if (!FS.isDir(mode) && !FS.isFile(mode) && !FS.isLink(mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var node = FS.createNode(parent, name, mode);
        node.node_ops = NODEFS.node_ops;
        node.stream_ops = NODEFS.stream_ops;
        return node;
      },getMode:function (path) {
        var stat;
        try {
          stat = fs.lstatSync(path);
          if (NODEFS.isWindows) {
            // On Windows, directories return permission bits 'rw-rw-rw-', even though they have 'rwxrwxrwx', so
            // propagate write bits to execute bits.
            stat.mode = stat.mode | ((stat.mode & 146) >> 1);
          }
        } catch (e) {
          if (!e.code) throw e;
          throw new FS.ErrnoError(ERRNO_CODES[e.code]);
        }
        return stat.mode;
      },realPath:function (node) {
        var parts = [];
        while (node.parent !== node) {
          parts.push(node.name);
          node = node.parent;
        }
        parts.push(node.mount.opts.root);
        parts.reverse();
        return PATH.join.apply(null, parts);
      },flagsToPermissionStringMap:{0:"r",1:"r+",2:"r+",64:"r",65:"r+",66:"r+",129:"rx+",193:"rx+",514:"w+",577:"w",578:"w+",705:"wx",706:"wx+",1024:"a",1025:"a",1026:"a+",1089:"a",1090:"a+",1153:"ax",1154:"ax+",1217:"ax",1218:"ax+",4096:"rs",4098:"rs+"},flagsToPermissionString:function (flags) {
        flags &= ~0x200000 /*O_PATH*/; // Ignore this flag from musl, otherwise node.js fails to open the file.
        flags &= ~0x800 /*O_NONBLOCK*/; // Ignore this flag from musl, otherwise node.js fails to open the file.
        flags &= ~0x8000 /*O_LARGEFILE*/; // Ignore this flag from musl, otherwise node.js fails to open the file.
        flags &= ~0x80000 /*O_CLOEXEC*/; // Some applications may pass it; it makes no sense for a single process.
        if (flags in NODEFS.flagsToPermissionStringMap) {
          return NODEFS.flagsToPermissionStringMap[flags];
        } else {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
      },node_ops:{getattr:function (node) {
          var path = NODEFS.realPath(node);
          var stat;
          try {
            stat = fs.lstatSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          // node.js v0.10.20 doesn't report blksize and blocks on Windows. Fake them with default blksize of 4096.
          // See http://support.microsoft.com/kb/140365
          if (NODEFS.isWindows && !stat.blksize) {
            stat.blksize = 4096;
          }
          if (NODEFS.isWindows && !stat.blocks) {
            stat.blocks = (stat.size+stat.blksize-1)/stat.blksize|0;
          }
          return {
            dev: stat.dev,
            ino: stat.ino,
            mode: stat.mode,
            nlink: stat.nlink,
            uid: stat.uid,
            gid: stat.gid,
            rdev: stat.rdev,
            size: stat.size,
            atime: stat.atime,
            mtime: stat.mtime,
            ctime: stat.ctime,
            blksize: stat.blksize,
            blocks: stat.blocks
          };
        },setattr:function (node, attr) {
          var path = NODEFS.realPath(node);
          try {
            if (attr.mode !== undefined) {
              fs.chmodSync(path, attr.mode);
              // update the common node structure mode as well
              node.mode = attr.mode;
            }
            if (attr.timestamp !== undefined) {
              var date = new Date(attr.timestamp);
              fs.utimesSync(path, date, date);
            }
            if (attr.size !== undefined) {
              fs.truncateSync(path, attr.size);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },lookup:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          var mode = NODEFS.getMode(path);
          return NODEFS.createNode(parent, name, mode);
        },mknod:function (parent, name, mode, dev) {
          var node = NODEFS.createNode(parent, name, mode, dev);
          // create the backing node for this in the fs root as well
          var path = NODEFS.realPath(node);
          try {
            if (FS.isDir(node.mode)) {
              fs.mkdirSync(path, node.mode);
            } else {
              fs.writeFileSync(path, '', { mode: node.mode });
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          return node;
        },rename:function (oldNode, newDir, newName) {
          var oldPath = NODEFS.realPath(oldNode);
          var newPath = PATH.join2(NODEFS.realPath(newDir), newName);
          try {
            fs.renameSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },unlink:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.unlinkSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },rmdir:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.rmdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },readdir:function (node) {
          var path = NODEFS.realPath(node);
          try {
            return fs.readdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },symlink:function (parent, newName, oldPath) {
          var newPath = PATH.join2(NODEFS.realPath(parent), newName);
          try {
            fs.symlinkSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },readlink:function (node) {
          var path = NODEFS.realPath(node);
          try {
            path = fs.readlinkSync(path);
            path = NODEJS_PATH.relative(NODEJS_PATH.resolve(node.mount.opts.root), path);
            return path;
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        }},stream_ops:{open:function (stream) {
          var path = NODEFS.realPath(stream.node);
          try {
            if (FS.isFile(stream.node.mode)) {
              stream.nfd = fs.openSync(path, NODEFS.flagsToPermissionString(stream.flags));
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },close:function (stream) {
          try {
            if (FS.isFile(stream.node.mode) && stream.nfd) {
              fs.closeSync(stream.nfd);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },read:function (stream, buffer, offset, length, position) {
          if (length === 0) return 0; // node errors on 0 length reads
          // FIXME this is terrible.
          var nbuffer = new Buffer(length);
          var res;
          try {
            res = fs.readSync(stream.nfd, nbuffer, 0, length, position);
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          if (res > 0) {
            for (var i = 0; i < res; i++) {
              buffer[offset + i] = nbuffer[i];
            }
          }
          return res;
        },write:function (stream, buffer, offset, length, position) {
          // FIXME this is terrible.
          var nbuffer = new Buffer(buffer.subarray(offset, offset + length));
          var res;
          try {
            res = fs.writeSync(stream.nfd, nbuffer, 0, length, position);
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          return res;
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              try {
                var stat = fs.fstatSync(stream.nfd);
                position += stat.size;
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES[e.code]);
              }
            }
          }
  
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
  
          return position;
        }}};
  
  var WORKERFS={DIR_MODE:16895,FILE_MODE:33279,reader:null,mount:function (mount) {
        assert(ENVIRONMENT_IS_WORKER);
        if (!WORKERFS.reader) WORKERFS.reader = new FileReaderSync();
        var root = WORKERFS.createNode(null, '/', WORKERFS.DIR_MODE, 0);
        var createdParents = {};
        function ensureParent(path) {
          // return the parent node, creating subdirs as necessary
          var parts = path.split('/');
          var parent = root;
          for (var i = 0; i < parts.length-1; i++) {
            var curr = parts.slice(0, i+1).join('/');
            // Issue 4254: Using curr as a node name will prevent the node
            // from being found in FS.nameTable when FS.open is called on
            // a path which holds a child of this node,
            // given that all FS functions assume node names
            // are just their corresponding parts within their given path,
            // rather than incremental aggregates which include their parent's
            // directories.
            if (!createdParents[curr]) {
              createdParents[curr] = WORKERFS.createNode(parent, parts[i], WORKERFS.DIR_MODE, 0);
            }
            parent = createdParents[curr];
          }
          return parent;
        }
        function base(path) {
          var parts = path.split('/');
          return parts[parts.length-1];
        }
        // We also accept FileList here, by using Array.prototype
        Array.prototype.forEach.call(mount.opts["files"] || [], function(file) {
          WORKERFS.createNode(ensureParent(file.name), base(file.name), WORKERFS.FILE_MODE, 0, file, file.lastModifiedDate);
        });
        (mount.opts["blobs"] || []).forEach(function(obj) {
          WORKERFS.createNode(ensureParent(obj["name"]), base(obj["name"]), WORKERFS.FILE_MODE, 0, obj["data"]);
        });
        (mount.opts["packages"] || []).forEach(function(pack) {
          pack['metadata'].files.forEach(function(file) {
            var name = file.filename.substr(1); // remove initial slash
            WORKERFS.createNode(ensureParent(name), base(name), WORKERFS.FILE_MODE, 0, pack['blob'].slice(file.start, file.end));
          });
        });
        return root;
      },createNode:function (parent, name, mode, dev, contents, mtime) {
        var node = FS.createNode(parent, name, mode);
        node.mode = mode;
        node.node_ops = WORKERFS.node_ops;
        node.stream_ops = WORKERFS.stream_ops;
        node.timestamp = (mtime || new Date).getTime();
        assert(WORKERFS.FILE_MODE !== WORKERFS.DIR_MODE);
        if (mode === WORKERFS.FILE_MODE) {
          node.size = contents.size;
          node.contents = contents;
        } else {
          node.size = 4096;
          node.contents = {};
        }
        if (parent) {
          parent.contents[name] = node;
        }
        return node;
      },node_ops:{getattr:function (node) {
          return {
            dev: 1,
            ino: undefined,
            mode: node.mode,
            nlink: 1,
            uid: 0,
            gid: 0,
            rdev: undefined,
            size: node.size,
            atime: new Date(node.timestamp),
            mtime: new Date(node.timestamp),
            ctime: new Date(node.timestamp),
            blksize: 4096,
            blocks: Math.ceil(node.size / 4096),
          };
        },setattr:function (node, attr) {
          if (attr.mode !== undefined) {
            node.mode = attr.mode;
          }
          if (attr.timestamp !== undefined) {
            node.timestamp = attr.timestamp;
          }
        },lookup:function (parent, name) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        },mknod:function (parent, name, mode, dev) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },rename:function (oldNode, newDir, newName) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },unlink:function (parent, name) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },rmdir:function (parent, name) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },readdir:function (node) {
          var entries = ['.', '..'];
          for (var key in node.contents) {
            if (!node.contents.hasOwnProperty(key)) {
              continue;
            }
            entries.push(key);
          }
          return entries;
        },symlink:function (parent, newName, oldPath) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },readlink:function (node) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }},stream_ops:{read:function (stream, buffer, offset, length, position) {
          if (position >= stream.node.size) return 0;
          var chunk = stream.node.contents.slice(position, position + length);
          var ab = WORKERFS.reader.readAsArrayBuffer(chunk);
          buffer.set(new Uint8Array(ab), offset);
          return chunk.size;
        },write:function (stream, buffer, offset, length, position) {
          throw new FS.ErrnoError(ERRNO_CODES.EIO);
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              position += stream.node.size;
            }
          }
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return position;
        }}};
  
  var _stdin=STATICTOP; STATICTOP += 16;;
  
  var _stdout=STATICTOP; STATICTOP += 16;;
  
  var _stderr=STATICTOP; STATICTOP += 16;;var FS={root:null,mounts:[],devices:[null],streams:[],nextInode:1,nameTable:null,currentPath:"/",initialized:false,ignorePermissions:true,trackingDelegate:{},tracking:{openFlags:{READ:1,WRITE:2}},ErrnoError:null,genericErrors:{},filesystems:null,syncFSRequests:0,handleFSError:function (e) {
        if (!(e instanceof FS.ErrnoError)) throw e + ' : ' + stackTrace();
        return ___setErrNo(e.errno);
      },lookupPath:function (path, opts) {
        path = PATH.resolve(FS.cwd(), path);
        opts = opts || {};
  
        if (!path) return { path: '', node: null };
  
        var defaults = {
          follow_mount: true,
          recurse_count: 0
        };
        for (var key in defaults) {
          if (opts[key] === undefined) {
            opts[key] = defaults[key];
          }
        }
  
        if (opts.recurse_count > 8) {  // max recursive lookup of 8
          throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
        }
  
        // split the path
        var parts = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), false);
  
        // start at the root
        var current = FS.root;
        var current_path = '/';
  
        for (var i = 0; i < parts.length; i++) {
          var islast = (i === parts.length-1);
          if (islast && opts.parent) {
            // stop resolving
            break;
          }
  
          current = FS.lookupNode(current, parts[i]);
          current_path = PATH.join2(current_path, parts[i]);
  
          // jump to the mount's root node if this is a mountpoint
          if (FS.isMountpoint(current)) {
            if (!islast || (islast && opts.follow_mount)) {
              current = current.mounted.root;
            }
          }
  
          // by default, lookupPath will not follow a symlink if it is the final path component.
          // setting opts.follow = true will override this behavior.
          if (!islast || opts.follow) {
            var count = 0;
            while (FS.isLink(current.mode)) {
              var link = FS.readlink(current_path);
              current_path = PATH.resolve(PATH.dirname(current_path), link);
  
              var lookup = FS.lookupPath(current_path, { recurse_count: opts.recurse_count });
              current = lookup.node;
  
              if (count++ > 40) {  // limit max consecutive symlinks to 40 (SYMLOOP_MAX).
                throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
              }
            }
          }
        }
  
        return { path: current_path, node: current };
      },getPath:function (node) {
        var path;
        while (true) {
          if (FS.isRoot(node)) {
            var mount = node.mount.mountpoint;
            if (!path) return mount;
            return mount[mount.length-1] !== '/' ? mount + '/' + path : mount + path;
          }
          path = path ? node.name + '/' + path : node.name;
          node = node.parent;
        }
      },hashName:function (parentid, name) {
        var hash = 0;
  
  
        for (var i = 0; i < name.length; i++) {
          hash = ((hash << 5) - hash + name.charCodeAt(i)) | 0;
        }
        return ((parentid + hash) >>> 0) % FS.nameTable.length;
      },hashAddNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        node.name_next = FS.nameTable[hash];
        FS.nameTable[hash] = node;
      },hashRemoveNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        if (FS.nameTable[hash] === node) {
          FS.nameTable[hash] = node.name_next;
        } else {
          var current = FS.nameTable[hash];
          while (current) {
            if (current.name_next === node) {
              current.name_next = node.name_next;
              break;
            }
            current = current.name_next;
          }
        }
      },lookupNode:function (parent, name) {
        var err = FS.mayLookup(parent);
        if (err) {
          throw new FS.ErrnoError(err, parent);
        }
        var hash = FS.hashName(parent.id, name);
        for (var node = FS.nameTable[hash]; node; node = node.name_next) {
          var nodeName = node.name;
          if (node.parent.id === parent.id && nodeName === name) {
            return node;
          }
        }
        // if we failed to find it in the cache, call into the VFS
        return FS.lookup(parent, name);
      },createNode:function (parent, name, mode, rdev) {
        if (!FS.FSNode) {
          FS.FSNode = function(parent, name, mode, rdev) {
            if (!parent) {
              parent = this;  // root node sets parent to itself
            }
            this.parent = parent;
            this.mount = parent.mount;
            this.mounted = null;
            this.id = FS.nextInode++;
            this.name = name;
            this.mode = mode;
            this.node_ops = {};
            this.stream_ops = {};
            this.rdev = rdev;
          };
  
          FS.FSNode.prototype = {};
  
          // compatibility
          var readMode = 292 | 73;
          var writeMode = 146;
  
          // NOTE we must use Object.defineProperties instead of individual calls to
          // Object.defineProperty in order to make closure compiler happy
          Object.defineProperties(FS.FSNode.prototype, {
            read: {
              get: function() { return (this.mode & readMode) === readMode; },
              set: function(val) { val ? this.mode |= readMode : this.mode &= ~readMode; }
            },
            write: {
              get: function() { return (this.mode & writeMode) === writeMode; },
              set: function(val) { val ? this.mode |= writeMode : this.mode &= ~writeMode; }
            },
            isFolder: {
              get: function() { return FS.isDir(this.mode); }
            },
            isDevice: {
              get: function() { return FS.isChrdev(this.mode); }
            }
          });
        }
  
        var node = new FS.FSNode(parent, name, mode, rdev);
  
        FS.hashAddNode(node);
  
        return node;
      },destroyNode:function (node) {
        FS.hashRemoveNode(node);
      },isRoot:function (node) {
        return node === node.parent;
      },isMountpoint:function (node) {
        return !!node.mounted;
      },isFile:function (mode) {
        return (mode & 61440) === 32768;
      },isDir:function (mode) {
        return (mode & 61440) === 16384;
      },isLink:function (mode) {
        return (mode & 61440) === 40960;
      },isChrdev:function (mode) {
        return (mode & 61440) === 8192;
      },isBlkdev:function (mode) {
        return (mode & 61440) === 24576;
      },isFIFO:function (mode) {
        return (mode & 61440) === 4096;
      },isSocket:function (mode) {
        return (mode & 49152) === 49152;
      },flagModes:{"r":0,"rs":1052672,"r+":2,"w":577,"wx":705,"xw":705,"w+":578,"wx+":706,"xw+":706,"a":1089,"ax":1217,"xa":1217,"a+":1090,"ax+":1218,"xa+":1218},modeStringToFlags:function (str) {
        var flags = FS.flagModes[str];
        if (typeof flags === 'undefined') {
          throw new Error('Unknown file open mode: ' + str);
        }
        return flags;
      },flagsToPermissionString:function (flag) {
        var perms = ['r', 'w', 'rw'][flag & 3];
        if ((flag & 512)) {
          perms += 'w';
        }
        return perms;
      },nodePermissions:function (node, perms) {
        if (FS.ignorePermissions) {
          return 0;
        }
        // return 0 if any user, group or owner bits are set.
        if (perms.indexOf('r') !== -1 && !(node.mode & 292)) {
          return ERRNO_CODES.EACCES;
        } else if (perms.indexOf('w') !== -1 && !(node.mode & 146)) {
          return ERRNO_CODES.EACCES;
        } else if (perms.indexOf('x') !== -1 && !(node.mode & 73)) {
          return ERRNO_CODES.EACCES;
        }
        return 0;
      },mayLookup:function (dir) {
        var err = FS.nodePermissions(dir, 'x');
        if (err) return err;
        if (!dir.node_ops.lookup) return ERRNO_CODES.EACCES;
        return 0;
      },mayCreate:function (dir, name) {
        try {
          var node = FS.lookupNode(dir, name);
          return ERRNO_CODES.EEXIST;
        } catch (e) {
        }
        return FS.nodePermissions(dir, 'wx');
      },mayDelete:function (dir, name, isdir) {
        var node;
        try {
          node = FS.lookupNode(dir, name);
        } catch (e) {
          return e.errno;
        }
        var err = FS.nodePermissions(dir, 'wx');
        if (err) {
          return err;
        }
        if (isdir) {
          if (!FS.isDir(node.mode)) {
            return ERRNO_CODES.ENOTDIR;
          }
          if (FS.isRoot(node) || FS.getPath(node) === FS.cwd()) {
            return ERRNO_CODES.EBUSY;
          }
        } else {
          if (FS.isDir(node.mode)) {
            return ERRNO_CODES.EISDIR;
          }
        }
        return 0;
      },mayOpen:function (node, flags) {
        if (!node) {
          return ERRNO_CODES.ENOENT;
        }
        if (FS.isLink(node.mode)) {
          return ERRNO_CODES.ELOOP;
        } else if (FS.isDir(node.mode)) {
          if (FS.flagsToPermissionString(flags) !== 'r' || // opening for write
              (flags & 512)) { // TODO: check for O_SEARCH? (== search for dir only)
            return ERRNO_CODES.EISDIR;
          }
        }
        return FS.nodePermissions(node, FS.flagsToPermissionString(flags));
      },MAX_OPEN_FDS:4096,nextfd:function (fd_start, fd_end) {
        fd_start = fd_start || 0;
        fd_end = fd_end || FS.MAX_OPEN_FDS;
        for (var fd = fd_start; fd <= fd_end; fd++) {
          if (!FS.streams[fd]) {
            return fd;
          }
        }
        throw new FS.ErrnoError(ERRNO_CODES.EMFILE);
      },getStream:function (fd) {
        return FS.streams[fd];
      },createStream:function (stream, fd_start, fd_end) {
        if (!FS.FSStream) {
          FS.FSStream = function(){};
          FS.FSStream.prototype = {};
          // compatibility
          Object.defineProperties(FS.FSStream.prototype, {
            object: {
              get: function() { return this.node; },
              set: function(val) { this.node = val; }
            },
            isRead: {
              get: function() { return (this.flags & 2097155) !== 1; }
            },
            isWrite: {
              get: function() { return (this.flags & 2097155) !== 0; }
            },
            isAppend: {
              get: function() { return (this.flags & 1024); }
            }
          });
        }
        // clone it, so we can return an instance of FSStream
        var newStream = new FS.FSStream();
        for (var p in stream) {
          newStream[p] = stream[p];
        }
        stream = newStream;
        var fd = FS.nextfd(fd_start, fd_end);
        stream.fd = fd;
        FS.streams[fd] = stream;
        return stream;
      },closeStream:function (fd) {
        FS.streams[fd] = null;
      },chrdev_stream_ops:{open:function (stream) {
          var device = FS.getDevice(stream.node.rdev);
          // override node's stream ops with the device's
          stream.stream_ops = device.stream_ops;
          // forward the open call
          if (stream.stream_ops.open) {
            stream.stream_ops.open(stream);
          }
        },llseek:function () {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }},major:function (dev) {
        return ((dev) >> 8);
      },minor:function (dev) {
        return ((dev) & 0xff);
      },makedev:function (ma, mi) {
        return ((ma) << 8 | (mi));
      },registerDevice:function (dev, ops) {
        FS.devices[dev] = { stream_ops: ops };
      },getDevice:function (dev) {
        return FS.devices[dev];
      },getMounts:function (mount) {
        var mounts = [];
        var check = [mount];
  
        while (check.length) {
          var m = check.pop();
  
          mounts.push(m);
  
          check.push.apply(check, m.mounts);
        }
  
        return mounts;
      },syncfs:function (populate, callback) {
        if (typeof(populate) === 'function') {
          callback = populate;
          populate = false;
        }
  
        FS.syncFSRequests++;
  
        if (FS.syncFSRequests > 1) {
          console.log('warning: ' + FS.syncFSRequests + ' FS.syncfs operations in flight at once, probably just doing extra work');
        }
  
        var mounts = FS.getMounts(FS.root.mount);
        var completed = 0;
  
        function doCallback(err) {
          assert(FS.syncFSRequests > 0);
          FS.syncFSRequests--;
          return callback(err);
        }
  
        function done(err) {
          if (err) {
            if (!done.errored) {
              done.errored = true;
              return doCallback(err);
            }
            return;
          }
          if (++completed >= mounts.length) {
            doCallback(null);
          }
        };
  
        // sync all mounts
        mounts.forEach(function (mount) {
          if (!mount.type.syncfs) {
            return done(null);
          }
          mount.type.syncfs(mount, populate, done);
        });
      },mount:function (type, opts, mountpoint) {
        var root = mountpoint === '/';
        var pseudo = !mountpoint;
        var node;
  
        if (root && FS.root) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        } else if (!root && !pseudo) {
          var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
          mountpoint = lookup.path;  // use the absolute path
          node = lookup.node;
  
          if (FS.isMountpoint(node)) {
            throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
          }
  
          if (!FS.isDir(node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
          }
        }
  
        var mount = {
          type: type,
          opts: opts,
          mountpoint: mountpoint,
          mounts: []
        };
  
        // create a root node for the fs
        var mountRoot = type.mount(mount);
        mountRoot.mount = mount;
        mount.root = mountRoot;
  
        if (root) {
          FS.root = mountRoot;
        } else if (node) {
          // set as a mountpoint
          node.mounted = mount;
  
          // add the new mount to the current mount's children
          if (node.mount) {
            node.mount.mounts.push(mount);
          }
        }
  
        return mountRoot;
      },unmount:function (mountpoint) {
        var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
        if (!FS.isMountpoint(lookup.node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
  
        // destroy the nodes for this mount, and all its child mounts
        var node = lookup.node;
        var mount = node.mounted;
        var mounts = FS.getMounts(mount);
  
        Object.keys(FS.nameTable).forEach(function (hash) {
          var current = FS.nameTable[hash];
  
          while (current) {
            var next = current.name_next;
  
            if (mounts.indexOf(current.mount) !== -1) {
              FS.destroyNode(current);
            }
  
            current = next;
          }
        });
  
        // no longer a mountpoint
        node.mounted = null;
  
        // remove this mount from the child mounts
        var idx = node.mount.mounts.indexOf(mount);
        assert(idx !== -1);
        node.mount.mounts.splice(idx, 1);
      },lookup:function (parent, name) {
        return parent.node_ops.lookup(parent, name);
      },mknod:function (path, mode, dev) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        if (!name || name === '.' || name === '..') {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var err = FS.mayCreate(parent, name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.mknod) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return parent.node_ops.mknod(parent, name, mode, dev);
      },create:function (path, mode) {
        mode = mode !== undefined ? mode : 438 /* 0666 */;
        mode &= 4095;
        mode |= 32768;
        return FS.mknod(path, mode, 0);
      },mkdir:function (path, mode) {
        mode = mode !== undefined ? mode : 511 /* 0777 */;
        mode &= 511 | 512;
        mode |= 16384;
        return FS.mknod(path, mode, 0);
      },mkdirTree:function (path, mode) {
        var dirs = path.split('/');
        var d = '';
        for (var i = 0; i < dirs.length; ++i) {
          if (!dirs[i]) continue;
          d += '/' + dirs[i];
          try {
            FS.mkdir(d, mode);
          } catch(e) {
            if (e.errno != ERRNO_CODES.EEXIST) throw e;
          }
        }
      },mkdev:function (path, mode, dev) {
        if (typeof(dev) === 'undefined') {
          dev = mode;
          mode = 438 /* 0666 */;
        }
        mode |= 8192;
        return FS.mknod(path, mode, dev);
      },symlink:function (oldpath, newpath) {
        if (!PATH.resolve(oldpath)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        var lookup = FS.lookupPath(newpath, { parent: true });
        var parent = lookup.node;
        if (!parent) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        var newname = PATH.basename(newpath);
        var err = FS.mayCreate(parent, newname);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.symlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return parent.node_ops.symlink(parent, newname, oldpath);
      },rename:function (old_path, new_path) {
        var old_dirname = PATH.dirname(old_path);
        var new_dirname = PATH.dirname(new_path);
        var old_name = PATH.basename(old_path);
        var new_name = PATH.basename(new_path);
        // parents must exist
        var lookup, old_dir, new_dir;
        try {
          lookup = FS.lookupPath(old_path, { parent: true });
          old_dir = lookup.node;
          lookup = FS.lookupPath(new_path, { parent: true });
          new_dir = lookup.node;
        } catch (e) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        if (!old_dir || !new_dir) throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        // need to be part of the same mount
        if (old_dir.mount !== new_dir.mount) {
          throw new FS.ErrnoError(ERRNO_CODES.EXDEV);
        }
        // source must exist
        var old_node = FS.lookupNode(old_dir, old_name);
        // old path should not be an ancestor of the new path
        var relative = PATH.relative(old_path, new_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        // new path should not be an ancestor of the old path
        relative = PATH.relative(new_path, old_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
        }
        // see if the new path already exists
        var new_node;
        try {
          new_node = FS.lookupNode(new_dir, new_name);
        } catch (e) {
          // not fatal
        }
        // early out if nothing needs to change
        if (old_node === new_node) {
          return;
        }
        // we'll need to delete the old entry
        var isdir = FS.isDir(old_node.mode);
        var err = FS.mayDelete(old_dir, old_name, isdir);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        // need delete permissions if we'll be overwriting.
        // need create permissions if new doesn't already exist.
        err = new_node ?
          FS.mayDelete(new_dir, new_name, isdir) :
          FS.mayCreate(new_dir, new_name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!old_dir.node_ops.rename) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(old_node) || (new_node && FS.isMountpoint(new_node))) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        // if we are going to change the parent, check write permissions
        if (new_dir !== old_dir) {
          err = FS.nodePermissions(old_dir, 'w');
          if (err) {
            throw new FS.ErrnoError(err);
          }
        }
        try {
          if (FS.trackingDelegate['willMovePath']) {
            FS.trackingDelegate['willMovePath'](old_path, new_path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willMovePath']('"+old_path+"', '"+new_path+"') threw an exception: " + e.message);
        }
        // remove the node from the lookup hash
        FS.hashRemoveNode(old_node);
        // do the underlying fs rename
        try {
          old_dir.node_ops.rename(old_node, new_dir, new_name);
        } catch (e) {
          throw e;
        } finally {
          // add the node back to the hash (in case node_ops.rename
          // changed its name)
          FS.hashAddNode(old_node);
        }
        try {
          if (FS.trackingDelegate['onMovePath']) FS.trackingDelegate['onMovePath'](old_path, new_path);
        } catch(e) {
          console.log("FS.trackingDelegate['onMovePath']('"+old_path+"', '"+new_path+"') threw an exception: " + e.message);
        }
      },rmdir:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, true);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.rmdir) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        try {
          if (FS.trackingDelegate['willDeletePath']) {
            FS.trackingDelegate['willDeletePath'](path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: " + e.message);
        }
        parent.node_ops.rmdir(parent, name);
        FS.destroyNode(node);
        try {
          if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path);
        } catch(e) {
          console.log("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: " + e.message);
        }
      },readdir:function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        if (!node.node_ops.readdir) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        return node.node_ops.readdir(node);
      },unlink:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, false);
        if (err) {
          // According to POSIX, we should map EISDIR to EPERM, but
          // we instead do what Linux does (and we must, as we use
          // the musl linux libc).
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.unlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        try {
          if (FS.trackingDelegate['willDeletePath']) {
            FS.trackingDelegate['willDeletePath'](path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: " + e.message);
        }
        parent.node_ops.unlink(parent, name);
        FS.destroyNode(node);
        try {
          if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path);
        } catch(e) {
          console.log("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: " + e.message);
        }
      },readlink:function (path) {
        var lookup = FS.lookupPath(path);
        var link = lookup.node;
        if (!link) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        if (!link.node_ops.readlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        return PATH.resolve(FS.getPath(link.parent), link.node_ops.readlink(link));
      },stat:function (path, dontFollow) {
        var lookup = FS.lookupPath(path, { follow: !dontFollow });
        var node = lookup.node;
        if (!node) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        if (!node.node_ops.getattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return node.node_ops.getattr(node);
      },lstat:function (path) {
        return FS.stat(path, true);
      },chmod:function (path, mode, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        node.node_ops.setattr(node, {
          mode: (mode & 4095) | (node.mode & ~4095),
          timestamp: Date.now()
        });
      },lchmod:function (path, mode) {
        FS.chmod(path, mode, true);
      },fchmod:function (fd, mode) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        FS.chmod(stream.node, mode);
      },chown:function (path, uid, gid, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        node.node_ops.setattr(node, {
          timestamp: Date.now()
          // we ignore the uid / gid for now
        });
      },lchown:function (path, uid, gid) {
        FS.chown(path, uid, gid, true);
      },fchown:function (fd, uid, gid) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        FS.chown(stream.node, uid, gid);
      },truncate:function (path, len) {
        if (len < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: true });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!FS.isFile(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var err = FS.nodePermissions(node, 'w');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        node.node_ops.setattr(node, {
          size: len,
          timestamp: Date.now()
        });
      },ftruncate:function (fd, len) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        FS.truncate(stream.node, len);
      },utime:function (path, atime, mtime) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        node.node_ops.setattr(node, {
          timestamp: Math.max(atime, mtime)
        });
      },open:function (path, flags, mode, fd_start, fd_end) {
        if (path === "") {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        flags = typeof flags === 'string' ? FS.modeStringToFlags(flags) : flags;
        mode = typeof mode === 'undefined' ? 438 /* 0666 */ : mode;
        if ((flags & 64)) {
          mode = (mode & 4095) | 32768;
        } else {
          mode = 0;
        }
        var node;
        if (typeof path === 'object') {
          node = path;
        } else {
          path = PATH.normalize(path);
          try {
            var lookup = FS.lookupPath(path, {
              follow: !(flags & 131072)
            });
            node = lookup.node;
          } catch (e) {
            // ignore
          }
        }
        // perhaps we need to create the node
        var created = false;
        if ((flags & 64)) {
          if (node) {
            // if O_CREAT and O_EXCL are set, error out if the node already exists
            if ((flags & 128)) {
              throw new FS.ErrnoError(ERRNO_CODES.EEXIST);
            }
          } else {
            // node doesn't exist, try to create it
            node = FS.mknod(path, mode, 0);
            created = true;
          }
        }
        if (!node) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        // can't truncate a device
        if (FS.isChrdev(node.mode)) {
          flags &= ~512;
        }
        // if asked only for a directory, then this must be one
        if ((flags & 65536) && !FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        // check permissions, if this is not a file we just created now (it is ok to
        // create and write to a file with read-only permissions; it is read-only
        // for later use)
        if (!created) {
          var err = FS.mayOpen(node, flags);
          if (err) {
            throw new FS.ErrnoError(err);
          }
        }
        // do truncation if necessary
        if ((flags & 512)) {
          FS.truncate(node, 0);
        }
        // we've already handled these, don't pass down to the underlying vfs
        flags &= ~(128 | 512);
  
        // register the stream with the filesystem
        var stream = FS.createStream({
          node: node,
          path: FS.getPath(node),  // we want the absolute path to the node
          flags: flags,
          seekable: true,
          position: 0,
          stream_ops: node.stream_ops,
          // used by the file family libc calls (fopen, fwrite, ferror, etc.)
          ungotten: [],
          error: false
        }, fd_start, fd_end);
        // call the new stream's open function
        if (stream.stream_ops.open) {
          stream.stream_ops.open(stream);
        }
        if (Module['logReadFiles'] && !(flags & 1)) {
          if (!FS.readFiles) FS.readFiles = {};
          if (!(path in FS.readFiles)) {
            FS.readFiles[path] = 1;
            Module['printErr']('read file: ' + path);
          }
        }
        try {
          if (FS.trackingDelegate['onOpenFile']) {
            var trackingFlags = 0;
            if ((flags & 2097155) !== 1) {
              trackingFlags |= FS.tracking.openFlags.READ;
            }
            if ((flags & 2097155) !== 0) {
              trackingFlags |= FS.tracking.openFlags.WRITE;
            }
            FS.trackingDelegate['onOpenFile'](path, trackingFlags);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['onOpenFile']('"+path+"', flags) threw an exception: " + e.message);
        }
        return stream;
      },close:function (stream) {
        if (stream.getdents) stream.getdents = null; // free readdir state
        try {
          if (stream.stream_ops.close) {
            stream.stream_ops.close(stream);
          }
        } catch (e) {
          throw e;
        } finally {
          FS.closeStream(stream.fd);
        }
      },llseek:function (stream, offset, whence) {
        if (!stream.seekable || !stream.stream_ops.llseek) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        stream.position = stream.stream_ops.llseek(stream, offset, whence);
        stream.ungotten = [];
        return stream.position;
      },read:function (stream, buffer, offset, length, position) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!stream.stream_ops.read) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var seeking = true;
        if (typeof position === 'undefined') {
          position = stream.position;
          seeking = false;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        var bytesRead = stream.stream_ops.read(stream, buffer, offset, length, position);
        if (!seeking) stream.position += bytesRead;
        return bytesRead;
      },write:function (stream, buffer, offset, length, position, canOwn) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!stream.stream_ops.write) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if (stream.flags & 1024) {
          // seek to the end before writing in append mode
          FS.llseek(stream, 0, 2);
        }
        var seeking = true;
        if (typeof position === 'undefined') {
          position = stream.position;
          seeking = false;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        var bytesWritten = stream.stream_ops.write(stream, buffer, offset, length, position, canOwn);
        if (!seeking) stream.position += bytesWritten;
        try {
          if (stream.path && FS.trackingDelegate['onWriteToFile']) FS.trackingDelegate['onWriteToFile'](stream.path);
        } catch(e) {
          console.log("FS.trackingDelegate['onWriteToFile']('"+path+"') threw an exception: " + e.message);
        }
        return bytesWritten;
      },allocate:function (stream, offset, length) {
        if (offset < 0 || length <= 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (!FS.isFile(stream.node.mode) && !FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
        }
        if (!stream.stream_ops.allocate) {
          throw new FS.ErrnoError(ERRNO_CODES.EOPNOTSUPP);
        }
        stream.stream_ops.allocate(stream, offset, length);
      },mmap:function (stream, buffer, offset, length, position, prot, flags) {
        // TODO if PROT is PROT_WRITE, make sure we have write access
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(ERRNO_CODES.EACCES);
        }
        if (!stream.stream_ops.mmap) {
          throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
        }
        return stream.stream_ops.mmap(stream, buffer, offset, length, position, prot, flags);
      },msync:function (stream, buffer, offset, length, mmapFlags) {
        if (!stream || !stream.stream_ops.msync) {
          return 0;
        }
        return stream.stream_ops.msync(stream, buffer, offset, length, mmapFlags);
      },munmap:function (stream) {
        return 0;
      },ioctl:function (stream, cmd, arg) {
        if (!stream.stream_ops.ioctl) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTTY);
        }
        return stream.stream_ops.ioctl(stream, cmd, arg);
      },readFile:function (path, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'r';
        opts.encoding = opts.encoding || 'binary';
        if (opts.encoding !== 'utf8' && opts.encoding !== 'binary') {
          throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        var ret;
        var stream = FS.open(path, opts.flags);
        var stat = FS.stat(path);
        var length = stat.size;
        var buf = new Uint8Array(length);
        FS.read(stream, buf, 0, length, 0);
        if (opts.encoding === 'utf8') {
          ret = UTF8ArrayToString(buf, 0);
        } else if (opts.encoding === 'binary') {
          ret = buf;
        }
        FS.close(stream);
        return ret;
      },writeFile:function (path, data, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'w';
        opts.encoding = opts.encoding || 'utf8';
        if (opts.encoding !== 'utf8' && opts.encoding !== 'binary') {
          throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        var stream = FS.open(path, opts.flags, opts.mode);
        if (opts.encoding === 'utf8') {
          var buf = new Uint8Array(lengthBytesUTF8(data)+1);
          var actualNumBytes = stringToUTF8Array(data, buf, 0, buf.length);
          FS.write(stream, buf, 0, actualNumBytes, 0, opts.canOwn);
        } else if (opts.encoding === 'binary') {
          FS.write(stream, data, 0, data.length, 0, opts.canOwn);
        }
        FS.close(stream);
      },cwd:function () {
        return FS.currentPath;
      },chdir:function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        if (lookup.node === null) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        if (!FS.isDir(lookup.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        var err = FS.nodePermissions(lookup.node, 'x');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        FS.currentPath = lookup.path;
      },createDefaultDirectories:function () {
        FS.mkdir('/tmp');
        FS.mkdir('/home');
        FS.mkdir('/home/web_user');
      },createDefaultDevices:function () {
        // create /dev
        FS.mkdir('/dev');
        // setup /dev/null
        FS.registerDevice(FS.makedev(1, 3), {
          read: function() { return 0; },
          write: function(stream, buffer, offset, length, pos) { return length; }
        });
        FS.mkdev('/dev/null', FS.makedev(1, 3));
        // setup /dev/tty and /dev/tty1
        // stderr needs to print output using Module['printErr']
        // so we register a second tty just for it.
        TTY.register(FS.makedev(5, 0), TTY.default_tty_ops);
        TTY.register(FS.makedev(6, 0), TTY.default_tty1_ops);
        FS.mkdev('/dev/tty', FS.makedev(5, 0));
        FS.mkdev('/dev/tty1', FS.makedev(6, 0));
        // setup /dev/[u]random
        var random_device;
        if (typeof crypto !== 'undefined') {
          // for modern web browsers
          var randomBuffer = new Uint8Array(1);
          random_device = function() { crypto.getRandomValues(randomBuffer); return randomBuffer[0]; };
        } else if (ENVIRONMENT_IS_NODE) {
          // for nodejs
          random_device = function() { return require('crypto').randomBytes(1)[0]; };
        } else {
          // default for ES5 platforms
          random_device = function() { return (Math.random()*256)|0; };
        }
        FS.createDevice('/dev', 'random', random_device);
        FS.createDevice('/dev', 'urandom', random_device);
        // we're not going to emulate the actual shm device,
        // just create the tmp dirs that reside in it commonly
        FS.mkdir('/dev/shm');
        FS.mkdir('/dev/shm/tmp');
      },createSpecialDirectories:function () {
        // create /proc/self/fd which allows /proc/self/fd/6 => readlink gives the name of the stream for fd 6 (see test_unistd_ttyname)
        FS.mkdir('/proc');
        FS.mkdir('/proc/self');
        FS.mkdir('/proc/self/fd');
        FS.mount({
          mount: function() {
            var node = FS.createNode('/proc/self', 'fd', 16384 | 511 /* 0777 */, 73);
            node.node_ops = {
              lookup: function(parent, name) {
                var fd = +name;
                var stream = FS.getStream(fd);
                if (!stream) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
                var ret = {
                  parent: null,
                  mount: { mountpoint: 'fake' },
                  node_ops: { readlink: function() { return stream.path } }
                };
                ret.parent = ret; // make it look like a simple root node
                return ret;
              }
            };
            return node;
          }
        }, {}, '/proc/self/fd');
      },createStandardStreams:function () {
        // TODO deprecate the old functionality of a single
        // input / output callback and that utilizes FS.createDevice
        // and instead require a unique set of stream ops
  
        // by default, we symlink the standard streams to the
        // default tty devices. however, if the standard streams
        // have been overwritten we create a unique device for
        // them instead.
        if (Module['stdin']) {
          FS.createDevice('/dev', 'stdin', Module['stdin']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdin');
        }
        if (Module['stdout']) {
          FS.createDevice('/dev', 'stdout', null, Module['stdout']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdout');
        }
        if (Module['stderr']) {
          FS.createDevice('/dev', 'stderr', null, Module['stderr']);
        } else {
          FS.symlink('/dev/tty1', '/dev/stderr');
        }
  
        // open default streams for the stdin, stdout and stderr devices
        var stdin = FS.open('/dev/stdin', 'r');
        assert(stdin.fd === 0, 'invalid handle for stdin (' + stdin.fd + ')');
  
        var stdout = FS.open('/dev/stdout', 'w');
        assert(stdout.fd === 1, 'invalid handle for stdout (' + stdout.fd + ')');
  
        var stderr = FS.open('/dev/stderr', 'w');
        assert(stderr.fd === 2, 'invalid handle for stderr (' + stderr.fd + ')');
      },ensureErrnoError:function () {
        if (FS.ErrnoError) return;
        FS.ErrnoError = function ErrnoError(errno, node) {
          //Module.printErr(stackTrace()); // useful for debugging
          this.node = node;
          this.setErrno = function(errno) {
            this.errno = errno;
            for (var key in ERRNO_CODES) {
              if (ERRNO_CODES[key] === errno) {
                this.code = key;
                break;
              }
            }
          };
          this.setErrno(errno);
          this.message = ERRNO_MESSAGES[errno];
          if (this.stack) this.stack = demangleAll(this.stack);
        };
        FS.ErrnoError.prototype = new Error();
        FS.ErrnoError.prototype.constructor = FS.ErrnoError;
        // Some errors may happen quite a bit, to avoid overhead we reuse them (and suffer a lack of stack info)
        [ERRNO_CODES.ENOENT].forEach(function(code) {
          FS.genericErrors[code] = new FS.ErrnoError(code);
          FS.genericErrors[code].stack = '<generic error, no stack>';
        });
      },staticInit:function () {
        FS.ensureErrnoError();
  
        FS.nameTable = new Array(4096);
  
        FS.mount(MEMFS, {}, '/');
  
        FS.createDefaultDirectories();
        FS.createDefaultDevices();
        FS.createSpecialDirectories();
  
        FS.filesystems = {
          'MEMFS': MEMFS,
          'IDBFS': IDBFS,
          'NODEFS': NODEFS,
          'WORKERFS': WORKERFS,
        };
      },init:function (input, output, error) {
        assert(!FS.init.initialized, 'FS.init was previously called. If you want to initialize later with custom parameters, remove any earlier calls (note that one is automatically added to the generated code)');
        FS.init.initialized = true;
  
        FS.ensureErrnoError();
  
        // Allow Module.stdin etc. to provide defaults, if none explicitly passed to us here
        Module['stdin'] = input || Module['stdin'];
        Module['stdout'] = output || Module['stdout'];
        Module['stderr'] = error || Module['stderr'];
  
        FS.createStandardStreams();
      },quit:function () {
        FS.init.initialized = false;
        // force-flush all streams, so we get musl std streams printed out
        var fflush = Module['_fflush'];
        if (fflush) fflush(0);
        // close all of our streams
        for (var i = 0; i < FS.streams.length; i++) {
          var stream = FS.streams[i];
          if (!stream) {
            continue;
          }
          FS.close(stream);
        }
      },getMode:function (canRead, canWrite) {
        var mode = 0;
        if (canRead) mode |= 292 | 73;
        if (canWrite) mode |= 146;
        return mode;
      },joinPath:function (parts, forceRelative) {
        var path = PATH.join.apply(null, parts);
        if (forceRelative && path[0] == '/') path = path.substr(1);
        return path;
      },absolutePath:function (relative, base) {
        return PATH.resolve(base, relative);
      },standardizePath:function (path) {
        return PATH.normalize(path);
      },findObject:function (path, dontResolveLastLink) {
        var ret = FS.analyzePath(path, dontResolveLastLink);
        if (ret.exists) {
          return ret.object;
        } else {
          ___setErrNo(ret.error);
          return null;
        }
      },analyzePath:function (path, dontResolveLastLink) {
        // operate from within the context of the symlink's target
        try {
          var lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          path = lookup.path;
        } catch (e) {
        }
        var ret = {
          isRoot: false, exists: false, error: 0, name: null, path: null, object: null,
          parentExists: false, parentPath: null, parentObject: null
        };
        try {
          var lookup = FS.lookupPath(path, { parent: true });
          ret.parentExists = true;
          ret.parentPath = lookup.path;
          ret.parentObject = lookup.node;
          ret.name = PATH.basename(path);
          lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          ret.exists = true;
          ret.path = lookup.path;
          ret.object = lookup.node;
          ret.name = lookup.node.name;
          ret.isRoot = lookup.path === '/';
        } catch (e) {
          ret.error = e.errno;
        };
        return ret;
      },createFolder:function (parent, name, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.mkdir(path, mode);
      },createPath:function (parent, path, canRead, canWrite) {
        parent = typeof parent === 'string' ? parent : FS.getPath(parent);
        var parts = path.split('/').reverse();
        while (parts.length) {
          var part = parts.pop();
          if (!part) continue;
          var current = PATH.join2(parent, part);
          try {
            FS.mkdir(current);
          } catch (e) {
            // ignore EEXIST
          }
          parent = current;
        }
        return current;
      },createFile:function (parent, name, properties, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.create(path, mode);
      },createDataFile:function (parent, name, data, canRead, canWrite, canOwn) {
        var path = name ? PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name) : parent;
        var mode = FS.getMode(canRead, canWrite);
        var node = FS.create(path, mode);
        if (data) {
          if (typeof data === 'string') {
            var arr = new Array(data.length);
            for (var i = 0, len = data.length; i < len; ++i) arr[i] = data.charCodeAt(i);
            data = arr;
          }
          // make sure we can write to the file
          FS.chmod(node, mode | 146);
          var stream = FS.open(node, 'w');
          FS.write(stream, data, 0, data.length, 0, canOwn);
          FS.close(stream);
          FS.chmod(node, mode);
        }
        return node;
      },createDevice:function (parent, name, input, output) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(!!input, !!output);
        if (!FS.createDevice.major) FS.createDevice.major = 64;
        var dev = FS.makedev(FS.createDevice.major++, 0);
        // Create a fake device that a set of stream ops to emulate
        // the old behavior.
        FS.registerDevice(dev, {
          open: function(stream) {
            stream.seekable = false;
          },
          close: function(stream) {
            // flush any pending line data
            if (output && output.buffer && output.buffer.length) {
              output(10);
            }
          },
          read: function(stream, buffer, offset, length, pos /* ignored */) {
            var bytesRead = 0;
            for (var i = 0; i < length; i++) {
              var result;
              try {
                result = input();
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES.EIO);
              }
              if (result === undefined && bytesRead === 0) {
                throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
              }
              if (result === null || result === undefined) break;
              bytesRead++;
              buffer[offset+i] = result;
            }
            if (bytesRead) {
              stream.node.timestamp = Date.now();
            }
            return bytesRead;
          },
          write: function(stream, buffer, offset, length, pos) {
            for (var i = 0; i < length; i++) {
              try {
                output(buffer[offset+i]);
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES.EIO);
              }
            }
            if (length) {
              stream.node.timestamp = Date.now();
            }
            return i;
          }
        });
        return FS.mkdev(path, mode, dev);
      },createLink:function (parent, name, target, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        return FS.symlink(target, path);
      },forceLoadFile:function (obj) {
        if (obj.isDevice || obj.isFolder || obj.link || obj.contents) return true;
        var success = true;
        if (typeof XMLHttpRequest !== 'undefined') {
          throw new Error("Lazy loading should have been performed (contents set) in createLazyFile, but it was not. Lazy loading only works in web workers. Use --embed-file or --preload-file in emcc on the main thread.");
        } else if (Module['read']) {
          // Command-line.
          try {
            // WARNING: Can't read binary files in V8's d8 or tracemonkey's js, as
            //          read() will try to parse UTF8.
            obj.contents = intArrayFromString(Module['read'](obj.url), true);
            obj.usedBytes = obj.contents.length;
          } catch (e) {
            success = false;
          }
        } else {
          throw new Error('Cannot load without read() or XMLHttpRequest.');
        }
        if (!success) ___setErrNo(ERRNO_CODES.EIO);
        return success;
      },createLazyFile:function (parent, name, url, canRead, canWrite) {
        // Lazy chunked Uint8Array (implements get and length from Uint8Array). Actual getting is abstracted away for eventual reuse.
        function LazyUint8Array() {
          this.lengthKnown = false;
          this.chunks = []; // Loaded chunks. Index is the chunk number
        }
        LazyUint8Array.prototype.get = function LazyUint8Array_get(idx) {
          if (idx > this.length-1 || idx < 0) {
            return undefined;
          }
          var chunkOffset = idx % this.chunkSize;
          var chunkNum = (idx / this.chunkSize)|0;
          return this.getter(chunkNum)[chunkOffset];
        }
        LazyUint8Array.prototype.setDataGetter = function LazyUint8Array_setDataGetter(getter) {
          this.getter = getter;
        }
        LazyUint8Array.prototype.cacheLength = function LazyUint8Array_cacheLength() {
          // Find length
          var xhr = new XMLHttpRequest();
          xhr.open('HEAD', url, false);
          xhr.send(null);
          if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
          var datalength = Number(xhr.getResponseHeader("Content-length"));
          var header;
          var hasByteServing = (header = xhr.getResponseHeader("Accept-Ranges")) && header === "bytes";
          var usesGzip = (header = xhr.getResponseHeader("Content-Encoding")) && header === "gzip";
  
          var chunkSize = 1024*1024; // Chunk size in bytes
  
          if (!hasByteServing) chunkSize = datalength;
  
          // Function to get a range from the remote URL.
          var doXHR = (function(from, to) {
            if (from > to) throw new Error("invalid range (" + from + ", " + to + ") or no bytes requested!");
            if (to > datalength-1) throw new Error("only " + datalength + " bytes available! programmer error!");
  
            // TODO: Use mozResponseArrayBuffer, responseStream, etc. if available.
            var xhr = new XMLHttpRequest();
            xhr.open('GET', url, false);
            if (datalength !== chunkSize) xhr.setRequestHeader("Range", "bytes=" + from + "-" + to);
  
            // Some hints to the browser that we want binary data.
            if (typeof Uint8Array != 'undefined') xhr.responseType = 'arraybuffer';
            if (xhr.overrideMimeType) {
              xhr.overrideMimeType('text/plain; charset=x-user-defined');
            }
  
            xhr.send(null);
            if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
            if (xhr.response !== undefined) {
              return new Uint8Array(xhr.response || []);
            } else {
              return intArrayFromString(xhr.responseText || '', true);
            }
          });
          var lazyArray = this;
          lazyArray.setDataGetter(function(chunkNum) {
            var start = chunkNum * chunkSize;
            var end = (chunkNum+1) * chunkSize - 1; // including this byte
            end = Math.min(end, datalength-1); // if datalength-1 is selected, this is the last block
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") {
              lazyArray.chunks[chunkNum] = doXHR(start, end);
            }
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") throw new Error("doXHR failed!");
            return lazyArray.chunks[chunkNum];
          });
  
          if (usesGzip || !datalength) {
            // if the server uses gzip or doesn't supply the length, we have to download the whole file to get the (uncompressed) length
            chunkSize = datalength = 1; // this will force getter(0)/doXHR do download the whole file
            datalength = this.getter(0).length;
            chunkSize = datalength;
            console.log("LazyFiles on gzip forces download of the whole file when length is accessed");
          }
  
          this._length = datalength;
          this._chunkSize = chunkSize;
          this.lengthKnown = true;
        }
        if (typeof XMLHttpRequest !== 'undefined') {
          if (!ENVIRONMENT_IS_WORKER) throw 'Cannot do synchronous binary XHRs outside webworkers in modern browsers. Use --embed-file or --preload-file in emcc';
          var lazyArray = new LazyUint8Array();
          Object.defineProperties(lazyArray, {
            length: {
              get: function() {
                if(!this.lengthKnown) {
                  this.cacheLength();
                }
                return this._length;
              }
            },
            chunkSize: {
              get: function() {
                if(!this.lengthKnown) {
                  this.cacheLength();
                }
                return this._chunkSize;
              }
            }
          });
  
          var properties = { isDevice: false, contents: lazyArray };
        } else {
          var properties = { isDevice: false, url: url };
        }
  
        var node = FS.createFile(parent, name, properties, canRead, canWrite);
        // This is a total hack, but I want to get this lazy file code out of the
        // core of MEMFS. If we want to keep this lazy file concept I feel it should
        // be its own thin LAZYFS proxying calls to MEMFS.
        if (properties.contents) {
          node.contents = properties.contents;
        } else if (properties.url) {
          node.contents = null;
          node.url = properties.url;
        }
        // Add a function that defers querying the file size until it is asked the first time.
        Object.defineProperties(node, {
          usedBytes: {
            get: function() { return this.contents.length; }
          }
        });
        // override each stream op with one that tries to force load the lazy file first
        var stream_ops = {};
        var keys = Object.keys(node.stream_ops);
        keys.forEach(function(key) {
          var fn = node.stream_ops[key];
          stream_ops[key] = function forceLoadLazyFile() {
            if (!FS.forceLoadFile(node)) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
            return fn.apply(null, arguments);
          };
        });
        // use a custom read function
        stream_ops.read = function stream_ops_read(stream, buffer, offset, length, position) {
          if (!FS.forceLoadFile(node)) {
            throw new FS.ErrnoError(ERRNO_CODES.EIO);
          }
          var contents = stream.node.contents;
          if (position >= contents.length)
            return 0;
          var size = Math.min(contents.length - position, length);
          assert(size >= 0);
          if (contents.slice) { // normal array
            for (var i = 0; i < size; i++) {
              buffer[offset + i] = contents[position + i];
            }
          } else {
            for (var i = 0; i < size; i++) { // LazyUint8Array from sync binary XHR
              buffer[offset + i] = contents.get(position + i);
            }
          }
          return size;
        };
        node.stream_ops = stream_ops;
        return node;
      },createPreloadedFile:function (parent, name, url, canRead, canWrite, onload, onerror, dontCreateFile, canOwn, preFinish) {
        Browser.init(); // XXX perhaps this method should move onto Browser?
        // TODO we should allow people to just pass in a complete filename instead
        // of parent and name being that we just join them anyways
        var fullname = name ? PATH.resolve(PATH.join2(parent, name)) : parent;
        var dep = getUniqueRunDependency('cp ' + fullname); // might have several active requests for the same fullname
        function processData(byteArray) {
          function finish(byteArray) {
            if (preFinish) preFinish();
            if (!dontCreateFile) {
              FS.createDataFile(parent, name, byteArray, canRead, canWrite, canOwn);
            }
            if (onload) onload();
            removeRunDependency(dep);
          }
          var handled = false;
          Module['preloadPlugins'].forEach(function(plugin) {
            if (handled) return;
            if (plugin['canHandle'](fullname)) {
              plugin['handle'](byteArray, fullname, finish, function() {
                if (onerror) onerror();
                removeRunDependency(dep);
              });
              handled = true;
            }
          });
          if (!handled) finish(byteArray);
        }
        addRunDependency(dep);
        if (typeof url == 'string') {
          Browser.asyncLoad(url, function(byteArray) {
            processData(byteArray);
          }, onerror);
        } else {
          processData(url);
        }
      },indexedDB:function () {
        return window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
      },DB_NAME:function () {
        return 'EM_FS_' + window.location.pathname;
      },DB_VERSION:20,DB_STORE_NAME:"FILE_DATA",saveFilesToDB:function (paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = function openRequest_onupgradeneeded() {
          console.log('creating db');
          var db = openRequest.result;
          db.createObjectStore(FS.DB_STORE_NAME);
        };
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          var transaction = db.transaction([FS.DB_STORE_NAME], 'readwrite');
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var putRequest = files.put(FS.analyzePath(path).object.contents, path);
            putRequest.onsuccess = function putRequest_onsuccess() { ok++; if (ok + fail == total) finish() };
            putRequest.onerror = function putRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      },loadFilesFromDB:function (paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = onerror; // no database to load from
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          try {
            var transaction = db.transaction([FS.DB_STORE_NAME], 'readonly');
          } catch(e) {
            onerror(e);
            return;
          }
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var getRequest = files.get(path);
            getRequest.onsuccess = function getRequest_onsuccess() {
              if (FS.analyzePath(path).exists) {
                FS.unlink(path);
              }
              FS.createDataFile(PATH.dirname(path), PATH.basename(path), getRequest.result, true, true, true);
              ok++;
              if (ok + fail == total) finish();
            };
            getRequest.onerror = function getRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      }};var SYSCALLS={DEFAULT_POLLMASK:5,mappings:{},umask:511,calculateAt:function (dirfd, path) {
        if (path[0] !== '/') {
          // relative path
          var dir;
          if (dirfd === -100) {
            dir = FS.cwd();
          } else {
            var dirstream = FS.getStream(dirfd);
            if (!dirstream) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
            dir = dirstream.path;
          }
          path = PATH.join2(dir, path);
        }
        return path;
      },doStat:function (func, path, buf) {
        try {
          var stat = func(path);
        } catch (e) {
          if (e && e.node && PATH.normalize(path) !== PATH.normalize(FS.getPath(e.node))) {
            // an error occurred while trying to look up the path; we should just report ENOTDIR
            return -ERRNO_CODES.ENOTDIR;
          }
          throw e;
        }
        HEAP32[((buf)>>2)]=stat.dev;
        HEAP32[(((buf)+(4))>>2)]=0;
        HEAP32[(((buf)+(8))>>2)]=stat.ino;
        HEAP32[(((buf)+(12))>>2)]=stat.mode;
        HEAP32[(((buf)+(16))>>2)]=stat.nlink;
        HEAP32[(((buf)+(20))>>2)]=stat.uid;
        HEAP32[(((buf)+(24))>>2)]=stat.gid;
        HEAP32[(((buf)+(28))>>2)]=stat.rdev;
        HEAP32[(((buf)+(32))>>2)]=0;
        HEAP32[(((buf)+(36))>>2)]=stat.size;
        HEAP32[(((buf)+(40))>>2)]=4096;
        HEAP32[(((buf)+(44))>>2)]=stat.blocks;
        HEAP32[(((buf)+(48))>>2)]=(stat.atime.getTime() / 1000)|0;
        HEAP32[(((buf)+(52))>>2)]=0;
        HEAP32[(((buf)+(56))>>2)]=(stat.mtime.getTime() / 1000)|0;
        HEAP32[(((buf)+(60))>>2)]=0;
        HEAP32[(((buf)+(64))>>2)]=(stat.ctime.getTime() / 1000)|0;
        HEAP32[(((buf)+(68))>>2)]=0;
        HEAP32[(((buf)+(72))>>2)]=stat.ino;
        return 0;
      },doMsync:function (addr, stream, len, flags) {
        var buffer = new Uint8Array(HEAPU8.subarray(addr, addr + len));
        FS.msync(stream, buffer, 0, len, flags);
      },doMkdir:function (path, mode) {
        // remove a trailing slash, if one - /a/b/ has basename of '', but
        // we want to create b in the context of this function
        path = PATH.normalize(path);
        if (path[path.length-1] === '/') path = path.substr(0, path.length-1);
        FS.mkdir(path, mode, 0);
        return 0;
      },doMknod:function (path, mode, dev) {
        // we don't want this in the JS API as it uses mknod to create all nodes.
        switch (mode & 61440) {
          case 32768:
          case 8192:
          case 24576:
          case 4096:
          case 49152:
            break;
          default: return -ERRNO_CODES.EINVAL;
        }
        FS.mknod(path, mode, dev);
        return 0;
      },doReadlink:function (path, buf, bufsize) {
        if (bufsize <= 0) return -ERRNO_CODES.EINVAL;
        var ret = FS.readlink(path);
  
        var len = Math.min(bufsize, lengthBytesUTF8(ret));
        var endChar = HEAP8[buf+len];
        stringToUTF8(ret, buf, bufsize+1);
        // readlink is one of the rare functions that write out a C string, but does never append a null to the output buffer(!)
        // stringToUTF8() always appends a null byte, so restore the character under the null byte after the write.
        HEAP8[buf+len] = endChar;
  
        return len;
      },doAccess:function (path, amode) {
        if (amode & ~7) {
          // need a valid mode
          return -ERRNO_CODES.EINVAL;
        }
        var node;
        var lookup = FS.lookupPath(path, { follow: true });
        node = lookup.node;
        var perms = '';
        if (amode & 4) perms += 'r';
        if (amode & 2) perms += 'w';
        if (amode & 1) perms += 'x';
        if (perms /* otherwise, they've just passed F_OK */ && FS.nodePermissions(node, perms)) {
          return -ERRNO_CODES.EACCES;
        }
        return 0;
      },doDup:function (path, flags, suggestFD) {
        var suggest = FS.getStream(suggestFD);
        if (suggest) FS.close(suggest);
        return FS.open(path, flags, 0, suggestFD, suggestFD).fd;
      },doReadv:function (stream, iov, iovcnt, offset) {
        var ret = 0;
        for (var i = 0; i < iovcnt; i++) {
          var ptr = HEAP32[(((iov)+(i*8))>>2)];
          var len = HEAP32[(((iov)+(i*8 + 4))>>2)];
          var curr = FS.read(stream, HEAP8,ptr, len, offset);
          if (curr < 0) return -1;
          ret += curr;
          if (curr < len) break; // nothing more to read
        }
        return ret;
      },doWritev:function (stream, iov, iovcnt, offset) {
        var ret = 0;
        for (var i = 0; i < iovcnt; i++) {
          var ptr = HEAP32[(((iov)+(i*8))>>2)];
          var len = HEAP32[(((iov)+(i*8 + 4))>>2)];
          var curr = FS.write(stream, HEAP8,ptr, len, offset);
          if (curr < 0) return -1;
          ret += curr;
        }
        return ret;
      },varargs:0,get:function (varargs) {
        SYSCALLS.varargs += 4;
        var ret = HEAP32[(((SYSCALLS.varargs)-(4))>>2)];
        return ret;
      },getStr:function () {
        var ret = Pointer_stringify(SYSCALLS.get());
        return ret;
      },getStreamFromFD:function () {
        var stream = FS.getStream(SYSCALLS.get());
        if (!stream) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        return stream;
      },getSocketFromFD:function () {
        var socket = SOCKFS.getSocket(SYSCALLS.get());
        if (!socket) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        return socket;
      },getSocketAddress:function (allowNull) {
        var addrp = SYSCALLS.get(), addrlen = SYSCALLS.get();
        if (allowNull && addrp === 0) return null;
        var info = __read_sockaddr(addrp, addrlen);
        if (info.errno) throw new FS.ErrnoError(info.errno);
        info.addr = DNS.lookup_addr(info.addr) || info.addr;
        return info;
      },get64:function () {
        var low = SYSCALLS.get(), high = SYSCALLS.get();
        if (low >= 0) assert(high === 0);
        else assert(high === -1);
        return low;
      },getZero:function () {
        assert(SYSCALLS.get() === 0);
      }};function ___syscall54(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // ioctl
      var stream = SYSCALLS.getStreamFromFD(), op = SYSCALLS.get();
      switch (op) {
        case 21505: {
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          return 0;
        }
        case 21506: {
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          return 0; // no-op, not actually adjusting terminal settings
        }
        case 21519: {
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          var argp = SYSCALLS.get();
          HEAP32[((argp)>>2)]=0;
          return 0;
        }
        case 21520: {
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          return -ERRNO_CODES.EINVAL; // not supported
        }
        case 21531: {
          var argp = SYSCALLS.get();
          return FS.ioctl(stream, op, argp);
        }
        case 21523: {
          // TODO: in theory we should write to the winsize struct that gets
          // passed in, but for now musl doesn't read anything on it
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          return 0;
        }
        default: abort('bad ioctl syscall ' + op);
      }
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

   

  var _llvm_ctlz_i32=true;

  
  function floatReadValueFromPointer(name, shift) {
      switch (shift) {
          case 2: return function(pointer) {
              return this['fromWireType'](HEAPF32[pointer >> 2]);
          };
          case 3: return function(pointer) {
              return this['fromWireType'](HEAPF64[pointer >> 3]);
          };
          default:
              throw new TypeError("Unknown float type: " + name);
      }
    }function __embind_register_float(rawType, name, size) {
      var shift = getShiftFromSize(size);
      name = readLatin1String(name);
      registerType(rawType, {
          name: name,
          'fromWireType': function(value) {
              return value;
          },
          'toWireType': function(destructors, value) {
              // todo: Here we have an opportunity for -O3 level "unsafe" optimizations: we could
              // avoid the following if() and assume value is of proper type.
              if (typeof value !== "number" && typeof value !== "boolean") {
                  throw new TypeError('Cannot convert "' + _embind_repr(value) + '" to ' + this.name);
              }
              return value;
          },
          'argPackAdvance': 8,
          'readValueFromPointer': floatReadValueFromPointer(name, shift),
          destructorFunction: null, // This type does not need a destructor
      });
    }

  
  
  function new_(constructor, argumentList) {
      if (!(constructor instanceof Function)) {
          throw new TypeError('new_ called with constructor type ' + typeof(constructor) + " which is not a function");
      }
  
      /*
       * Previously, the following line was just:
  
       function dummy() {};
  
       * Unfortunately, Chrome was preserving 'dummy' as the object's name, even though at creation, the 'dummy' has the
       * correct constructor name.  Thus, objects created with IMVU.new would show up in the debugger as 'dummy', which
       * isn't very helpful.  Using IMVU.createNamedFunction addresses the issue.  Doublely-unfortunately, there's no way
       * to write a test for this behavior.  -NRD 2013.02.22
       */
      var dummy = createNamedFunction(constructor.name || 'unknownFunctionName', function(){});
      dummy.prototype = constructor.prototype;
      var obj = new dummy;
  
      var r = constructor.apply(obj, argumentList);
      return (r instanceof Object) ? r : obj;
    }
  
  function runDestructors(destructors) {
      while (destructors.length) {
          var ptr = destructors.pop();
          var del = destructors.pop();
          del(ptr);
      }
    }function craftInvokerFunction(humanName, argTypes, classType, cppInvokerFunc, cppTargetFunc) {
      // humanName: a human-readable string name for the function to be generated.
      // argTypes: An array that contains the embind type objects for all types in the function signature.
      //    argTypes[0] is the type object for the function return value.
      //    argTypes[1] is the type object for function this object/class type, or null if not crafting an invoker for a class method.
      //    argTypes[2...] are the actual function parameters.
      // classType: The embind type object for the class to be bound, or null if this is not a method of a class.
      // cppInvokerFunc: JS Function object to the C++-side function that interops into C++ code.
      // cppTargetFunc: Function pointer (an integer to FUNCTION_TABLE) to the target C++ function the cppInvokerFunc will end up calling.
      var argCount = argTypes.length;
  
      if (argCount < 2) {
          throwBindingError("argTypes array size mismatch! Must at least get return value and 'this' types!");
      }
  
      var isClassMethodFunc = (argTypes[1] !== null && classType !== null);
  
      // Free functions with signature "void function()" do not need an invoker that marshalls between wire types.
  // TODO: This omits argument count check - enable only at -O3 or similar.
  //    if (ENABLE_UNSAFE_OPTS && argCount == 2 && argTypes[0].name == "void" && !isClassMethodFunc) {
  //       return FUNCTION_TABLE[fn];
  //    }
  
      var argsList = "";
      var argsListWired = "";
      for(var i = 0; i < argCount - 2; ++i) {
          argsList += (i!==0?", ":"")+"arg"+i;
          argsListWired += (i!==0?", ":"")+"arg"+i+"Wired";
      }
  
      var invokerFnBody =
          "return function "+makeLegalFunctionName(humanName)+"("+argsList+") {\n" +
          "if (arguments.length !== "+(argCount - 2)+") {\n" +
              "throwBindingError('function "+humanName+" called with ' + arguments.length + ' arguments, expected "+(argCount - 2)+" args!');\n" +
          "}\n";
  
  
      // Determine if we need to use a dynamic stack to store the destructors for the function parameters.
      // TODO: Remove this completely once all function invokers are being dynamically generated.
      var needsDestructorStack = false;
  
      for(var i = 1; i < argTypes.length; ++i) { // Skip return value at index 0 - it's not deleted here.
          if (argTypes[i] !== null && argTypes[i].destructorFunction === undefined) { // The type does not define a destructor function - must use dynamic stack
              needsDestructorStack = true;
              break;
          }
      }
  
      if (needsDestructorStack) {
          invokerFnBody +=
              "var destructors = [];\n";
      }
  
      var dtorStack = needsDestructorStack ? "destructors" : "null";
      var args1 = ["throwBindingError", "invoker", "fn", "runDestructors", "retType", "classParam"];
      var args2 = [throwBindingError, cppInvokerFunc, cppTargetFunc, runDestructors, argTypes[0], argTypes[1]];
  
  
      if (isClassMethodFunc) {
          invokerFnBody += "var thisWired = classParam.toWireType("+dtorStack+", this);\n";
      }
  
      for(var i = 0; i < argCount - 2; ++i) {
          invokerFnBody += "var arg"+i+"Wired = argType"+i+".toWireType("+dtorStack+", arg"+i+"); // "+argTypes[i+2].name+"\n";
          args1.push("argType"+i);
          args2.push(argTypes[i+2]);
      }
  
      if (isClassMethodFunc) {
          argsListWired = "thisWired" + (argsListWired.length > 0 ? ", " : "") + argsListWired;
      }
  
      var returns = (argTypes[0].name !== "void");
  
      invokerFnBody +=
          (returns?"var rv = ":"") + "invoker(fn"+(argsListWired.length>0?", ":"")+argsListWired+");\n";
  
      if (needsDestructorStack) {
          invokerFnBody += "runDestructors(destructors);\n";
      } else {
          for(var i = isClassMethodFunc?1:2; i < argTypes.length; ++i) { // Skip return value at index 0 - it's not deleted here. Also skip class type if not a method.
              var paramName = (i === 1 ? "thisWired" : ("arg"+(i - 2)+"Wired"));
              if (argTypes[i].destructorFunction !== null) {
                  invokerFnBody += paramName+"_dtor("+paramName+"); // "+argTypes[i].name+"\n";
                  args1.push(paramName+"_dtor");
                  args2.push(argTypes[i].destructorFunction);
              }
          }
      }
  
      if (returns) {
          invokerFnBody += "var ret = retType.fromWireType(rv);\n" +
                           "return ret;\n";
      } else {
      }
      invokerFnBody += "}\n";
  
      args1.push(invokerFnBody);
  
      var invokerFunction = new_(Function, args1).apply(null, args2);
      return invokerFunction;
    }
  
  
  function ensureOverloadTable(proto, methodName, humanName) {
      if (undefined === proto[methodName].overloadTable) {
          var prevFunc = proto[methodName];
          // Inject an overload resolver function that routes to the appropriate overload based on the number of arguments.
          proto[methodName] = function() {
              // TODO This check can be removed in -O3 level "unsafe" optimizations.
              if (!proto[methodName].overloadTable.hasOwnProperty(arguments.length)) {
                  throwBindingError("Function '" + humanName + "' called with an invalid number of arguments (" + arguments.length + ") - expects one of (" + proto[methodName].overloadTable + ")!");
              }
              return proto[methodName].overloadTable[arguments.length].apply(this, arguments);
          };
          // Move the previous function into the overload table.
          proto[methodName].overloadTable = [];
          proto[methodName].overloadTable[prevFunc.argCount] = prevFunc;
      }
    }function exposePublicSymbol(name, value, numArguments) {
      if (Module.hasOwnProperty(name)) {
          if (undefined === numArguments || (undefined !== Module[name].overloadTable && undefined !== Module[name].overloadTable[numArguments])) {
              throwBindingError("Cannot register public name '" + name + "' twice");
          }
  
          // We are exposing a function with the same name as an existing function. Create an overload table and a function selector
          // that routes between the two.
          ensureOverloadTable(Module, name, name);
          if (Module.hasOwnProperty(numArguments)) {
              throwBindingError("Cannot register multiple overloads of a function with the same number of arguments (" + numArguments + ")!");
          }
          // Add the new function into the overload table.
          Module[name].overloadTable[numArguments] = value;
      }
      else {
          Module[name] = value;
          if (undefined !== numArguments) {
              Module[name].numArguments = numArguments;
          }
      }
    }
  
  function heap32VectorToArray(count, firstElement) {
      var array = [];
      for (var i = 0; i < count; i++) {
          array.push(HEAP32[(firstElement >> 2) + i]);
      }
      return array;
    }
  
  function replacePublicSymbol(name, value, numArguments) {
      if (!Module.hasOwnProperty(name)) {
          throwInternalError('Replacing nonexistant public symbol');
      }
      // If there's an overload table for this symbol, replace the symbol in the overload table instead.
      if (undefined !== Module[name].overloadTable && undefined !== numArguments) {
          Module[name].overloadTable[numArguments] = value;
      }
      else {
          Module[name] = value;
          Module[name].argCount = numArguments;
      }
    }
  
  function requireFunction(signature, rawFunction) {
      signature = readLatin1String(signature);
  
      function makeDynCaller(dynCall) {
          var args = [];
          for (var i = 1; i < signature.length; ++i) {
              args.push('a' + i);
          }
  
          var name = 'dynCall_' + signature + '_' + rawFunction;
          var body = 'return function ' + name + '(' + args.join(', ') + ') {\n';
          body    += '    return dynCall(rawFunction' + (args.length ? ', ' : '') + args.join(', ') + ');\n';
          body    += '};\n';
  
          return (new Function('dynCall', 'rawFunction', body))(dynCall, rawFunction);
      }
  
      var fp;
      if (Module['FUNCTION_TABLE_' + signature] !== undefined) {
          fp = Module['FUNCTION_TABLE_' + signature][rawFunction];
      } else if (typeof FUNCTION_TABLE !== "undefined") {
          fp = FUNCTION_TABLE[rawFunction];
      } else {
          // asm.js does not give direct access to the function tables,
          // and thus we must go through the dynCall interface which allows
          // calling into a signature's function table by pointer value.
          //
          // https://github.com/dherman/asm.js/issues/83
          //
          // This has three main penalties:
          // - dynCall is another function call in the path from JavaScript to C++.
          // - JITs may not predict through the function table indirection at runtime.
          var dc = Module["asm"]['dynCall_' + signature];
          if (dc === undefined) {
              // We will always enter this branch if the signature
              // contains 'f' and PRECISE_F32 is not enabled.
              //
              // Try again, replacing 'f' with 'd'.
              dc = Module["asm"]['dynCall_' + signature.replace(/f/g, 'd')];
              if (dc === undefined) {
                  throwBindingError("No dynCall invoker for signature: " + signature);
              }
          }
          fp = makeDynCaller(dc);
      }
  
      if (typeof fp !== "function") {
          throwBindingError("unknown function pointer with signature " + signature + ": " + rawFunction);
      }
      return fp;
    }
  
  
  var UnboundTypeError=undefined;
  
  function getTypeName(type) {
      var ptr = ___getTypeName(type);
      var rv = readLatin1String(ptr);
      _free(ptr);
      return rv;
    }function throwUnboundTypeError(message, types) {
      var unboundTypes = [];
      var seen = {};
      function visit(type) {
          if (seen[type]) {
              return;
          }
          if (registeredTypes[type]) {
              return;
          }
          if (typeDependencies[type]) {
              typeDependencies[type].forEach(visit);
              return;
          }
          unboundTypes.push(type);
          seen[type] = true;
      }
      types.forEach(visit);
  
      throw new UnboundTypeError(message + ': ' + unboundTypes.map(getTypeName).join([', ']));
    }function __embind_register_function(name, argCount, rawArgTypesAddr, signature, rawInvoker, fn) {
      var argTypes = heap32VectorToArray(argCount, rawArgTypesAddr);
      name = readLatin1String(name);
      
      rawInvoker = requireFunction(signature, rawInvoker);
  
      exposePublicSymbol(name, function() {
          throwUnboundTypeError('Cannot call ' + name + ' due to unbound types', argTypes);
      }, argCount - 1);
  
      whenDependentTypesAreResolved([], argTypes, function(argTypes) {
          var invokerArgsArray = [argTypes[0] /* return value */, null /* no class 'this'*/].concat(argTypes.slice(1) /* actual params */);
          replacePublicSymbol(name, craftInvokerFunction(name, invokerArgsArray, null /* no class 'this'*/, rawInvoker, fn), argCount - 1);
          return [];
      });
    }

  function __embind_register_constant(name, type, value) {
      name = readLatin1String(name);
      whenDependentTypesAreResolved([], [type], function(type) {
          type = type[0];
          Module[name] = type['fromWireType'](value);
          return [];
      });
    }

  function ___cxa_begin_catch(ptr) {
      var info = EXCEPTIONS.infos[ptr];
      if (info && !info.caught) {
        info.caught = true;
        __ZSt18uncaught_exceptionv.uncaught_exception--;
      }
      if (info) info.rethrown = false;
      EXCEPTIONS.caught.push(ptr);
      EXCEPTIONS.addRef(EXCEPTIONS.deAdjust(ptr));
      return ptr;
    }

  function ___syscall5(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // open
      var pathname = SYSCALLS.getStr(), flags = SYSCALLS.get(), mode = SYSCALLS.get() // optional TODO
      var stream = FS.open(pathname, flags, mode);
      return stream.fd;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  
  function _emscripten_memcpy_big(dest, src, num) {
      HEAPU8.set(HEAPU8.subarray(src, src+num), dest);
      return dest;
    } 

  function ___syscall6(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // close
      var stream = SYSCALLS.getStreamFromFD();
      FS.close(stream);
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  
  
  var cttz_i8 = allocate([8,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,7,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0], "i8", ALLOC_STATIC);   

  
    

   

   

  function __embind_register_std_wstring(rawType, charSize, name) {
      // nb. do not cache HEAPU16 and HEAPU32, they may be destroyed by enlargeMemory().
      name = readLatin1String(name);
      var getHeap, shift;
      if (charSize === 2) {
          getHeap = function() { return HEAPU16; };
          shift = 1;
      } else if (charSize === 4) {
          getHeap = function() { return HEAPU32; };
          shift = 2;
      }
      registerType(rawType, {
          name: name,
          'fromWireType': function(value) {
              var HEAP = getHeap();
              var length = HEAPU32[value >> 2];
              var a = new Array(length);
              var start = (value + 4) >> shift;
              for (var i = 0; i < length; ++i) {
                  a[i] = String.fromCharCode(HEAP[start + i]);
              }
              _free(value);
              return a.join('');
          },
          'toWireType': function(destructors, value) {
              // assumes 4-byte alignment
              var HEAP = getHeap();
              var length = value.length;
              var ptr = _malloc(4 + length * charSize);
              HEAPU32[ptr >> 2] = length;
              var start = (ptr + 4) >> shift;
              for (var i = 0; i < length; ++i) {
                  HEAP[start + i] = value.charCodeAt(i);
              }
              if (destructors !== null) {
                  destructors.push(_free, ptr);
              }
              return ptr;
          },
          'argPackAdvance': 8,
          'readValueFromPointer': simpleReadValueFromPointer,
          destructorFunction: function(ptr) { _free(ptr); },
      });
    }

  function ___gxx_personality_v0() {
    }

   

   

  function __embind_register_memory_view(rawType, dataTypeIndex, name) {
      var typeMapping = [
          Int8Array,
          Uint8Array,
          Int16Array,
          Uint16Array,
          Int32Array,
          Uint32Array,
          Float32Array,
          Float64Array,
      ];
  
      var TA = typeMapping[dataTypeIndex];
  
      function decodeMemoryView(handle) {
          handle = handle >> 2;
          var heap = HEAPU32;
          var size = heap[handle]; // in elements
          var data = heap[handle + 1]; // byte offset into emscripten heap
          return new TA(heap['buffer'], data, size);
      }
  
      name = readLatin1String(name);
      registerType(rawType, {
          name: name,
          'fromWireType': decodeMemoryView,
          'argPackAdvance': 8,
          'readValueFromPointer': decodeMemoryView,
      }, {
          ignoreDuplicateRegistrations: true,
      });
    }

  function ___syscall140(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // llseek
      var stream = SYSCALLS.getStreamFromFD(), offset_high = SYSCALLS.get(), offset_low = SYSCALLS.get(), result = SYSCALLS.get(), whence = SYSCALLS.get();
      // NOTE: offset_high is unused - Emscripten's off_t is 32-bit
      var offset = offset_low;
      FS.llseek(stream, offset, whence);
      HEAP32[((result)>>2)]=stream.position;
      if (stream.getdents && offset === 0 && whence === 0) stream.getdents = null; // reset readdir state
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall146(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // writev
      var stream = SYSCALLS.getStreamFromFD(), iov = SYSCALLS.get(), iovcnt = SYSCALLS.get();
      return SYSCALLS.doWritev(stream, iov, iovcnt);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall221(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // fcntl64
      var stream = SYSCALLS.getStreamFromFD(), cmd = SYSCALLS.get();
      switch (cmd) {
        case 0: {
          var arg = SYSCALLS.get();
          if (arg < 0) {
            return -ERRNO_CODES.EINVAL;
          }
          var newStream;
          newStream = FS.open(stream.path, stream.flags, 0, arg);
          return newStream.fd;
        }
        case 1:
        case 2:
          return 0;  // FD_CLOEXEC makes no sense for a single process.
        case 3:
          return stream.flags;
        case 4: {
          var arg = SYSCALLS.get();
          stream.flags |= arg;
          return 0;
        }
        case 12:
        case 12: {
          var arg = SYSCALLS.get();
          var offset = 0;
          // We're always unlocked.
          HEAP16[(((arg)+(offset))>>1)]=2;
          return 0;
        }
        case 13:
        case 14:
        case 13:
        case 14:
          return 0; // Pretend that the locking is successful.
        case 16:
        case 8:
          return -ERRNO_CODES.EINVAL; // These are for sockets. We don't have them fully implemented yet.
        case 9:
          // musl trusts getown return values, due to a bug where they must be, as they overlap with errors. just return -1 here, so fnctl() returns that, and we set errno ourselves.
          ___setErrNo(ERRNO_CODES.EINVAL);
          return -1;
        default: {
          return -ERRNO_CODES.EINVAL;
        }
      }
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall145(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // readv
      var stream = SYSCALLS.getStreamFromFD(), iov = SYSCALLS.get(), iovcnt = SYSCALLS.get();
      return SYSCALLS.doReadv(stream, iov, iovcnt);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  var ___dso_handle=STATICTOP; STATICTOP += 16;;
embind_init_charCodes();
BindingError = Module['BindingError'] = extendError(Error, 'BindingError');;
InternalError = Module['InternalError'] = extendError(Error, 'InternalError');;
init_emval();;
FS.staticInit();__ATINIT__.unshift(function() { if (!Module["noFSInit"] && !FS.init.initialized) FS.init() });__ATMAIN__.push(function() { FS.ignorePermissions = false });__ATEXIT__.push(function() { FS.quit() });Module["FS_createFolder"] = FS.createFolder;Module["FS_createPath"] = FS.createPath;Module["FS_createDataFile"] = FS.createDataFile;Module["FS_createPreloadedFile"] = FS.createPreloadedFile;Module["FS_createLazyFile"] = FS.createLazyFile;Module["FS_createLink"] = FS.createLink;Module["FS_createDevice"] = FS.createDevice;Module["FS_unlink"] = FS.unlink;;
__ATINIT__.unshift(function() { TTY.init() });__ATEXIT__.push(function() { TTY.shutdown() });;
if (ENVIRONMENT_IS_NODE) { var fs = require("fs"); var NODEJS_PATH = require("path"); NODEFS.staticInit(); };
UnboundTypeError = Module['UnboundTypeError'] = extendError(Error, 'UnboundTypeError');;
DYNAMICTOP_PTR = allocate(1, "i32", ALLOC_STATIC);

STACK_BASE = STACKTOP = Runtime.alignMemory(STATICTOP);

STACK_MAX = STACK_BASE + TOTAL_STACK;

DYNAMIC_BASE = Runtime.alignMemory(STACK_MAX);

HEAP32[DYNAMICTOP_PTR>>2] = DYNAMIC_BASE;

staticSealed = true; // seal the static portion of memory

assert(DYNAMIC_BASE < TOTAL_MEMORY, "TOTAL_MEMORY not big enough for stack");


function nullFunc_iiii(x) { Module["printErr"]("Invalid function pointer called with signature 'iiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'viiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_dii(x) { Module["printErr"]("Invalid function pointer called with signature 'dii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_vid(x) { Module["printErr"]("Invalid function pointer called with signature 'vid'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_di(x) { Module["printErr"]("Invalid function pointer called with signature 'di'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_i(x) { Module["printErr"]("Invalid function pointer called with signature 'i'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_vi(x) { Module["printErr"]("Invalid function pointer called with signature 'vi'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_vii(x) { Module["printErr"]("Invalid function pointer called with signature 'vii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_ii(x) { Module["printErr"]("Invalid function pointer called with signature 'ii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viii(x) { Module["printErr"]("Invalid function pointer called with signature 'viii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_v(x) { Module["printErr"]("Invalid function pointer called with signature 'v'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viid(x) { Module["printErr"]("Invalid function pointer called with signature 'viid'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'iiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viiiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'viiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iii(x) { Module["printErr"]("Invalid function pointer called with signature 'iii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viiii(x) { Module["printErr"]("Invalid function pointer called with signature 'viiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function invoke_iiii(index,a1,a2,a3) {
  try {
    return Module["dynCall_iiii"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_viiiii(index,a1,a2,a3,a4,a5) {
  try {
    Module["dynCall_viiiii"](index,a1,a2,a3,a4,a5);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_dii(index,a1,a2) {
  try {
    return Module["dynCall_dii"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_vid(index,a1,a2) {
  try {
    Module["dynCall_vid"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_di(index,a1) {
  try {
    return Module["dynCall_di"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_i(index) {
  try {
    return Module["dynCall_i"](index);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_vi(index,a1) {
  try {
    Module["dynCall_vi"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_vii(index,a1,a2) {
  try {
    Module["dynCall_vii"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_ii(index,a1) {
  try {
    return Module["dynCall_ii"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_viii(index,a1,a2,a3) {
  try {
    Module["dynCall_viii"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_v(index) {
  try {
    Module["dynCall_v"](index);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_viid(index,a1,a2,a3) {
  try {
    Module["dynCall_viid"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_iiiii(index,a1,a2,a3,a4) {
  try {
    return Module["dynCall_iiiii"](index,a1,a2,a3,a4);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_viiiiii(index,a1,a2,a3,a4,a5,a6) {
  try {
    Module["dynCall_viiiiii"](index,a1,a2,a3,a4,a5,a6);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_iii(index,a1,a2) {
  try {
    return Module["dynCall_iii"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_viiii(index,a1,a2,a3,a4) {
  try {
    Module["dynCall_viiii"](index,a1,a2,a3,a4);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

Module.asmGlobalArg = { "Math": Math, "Int8Array": Int8Array, "Int16Array": Int16Array, "Int32Array": Int32Array, "Uint8Array": Uint8Array, "Uint16Array": Uint16Array, "Uint32Array": Uint32Array, "Float32Array": Float32Array, "Float64Array": Float64Array, "NaN": NaN, "Infinity": Infinity, "byteLength": byteLength };

Module.asmLibraryArg = { "abort": abort, "assert": assert, "enlargeMemory": enlargeMemory, "getTotalMemory": getTotalMemory, "abortOnCannotGrowMemory": abortOnCannotGrowMemory, "abortStackOverflow": abortStackOverflow, "nullFunc_iiii": nullFunc_iiii, "nullFunc_viiiii": nullFunc_viiiii, "nullFunc_dii": nullFunc_dii, "nullFunc_vid": nullFunc_vid, "nullFunc_di": nullFunc_di, "nullFunc_i": nullFunc_i, "nullFunc_vi": nullFunc_vi, "nullFunc_vii": nullFunc_vii, "nullFunc_ii": nullFunc_ii, "nullFunc_viii": nullFunc_viii, "nullFunc_v": nullFunc_v, "nullFunc_viid": nullFunc_viid, "nullFunc_iiiii": nullFunc_iiiii, "nullFunc_viiiiii": nullFunc_viiiiii, "nullFunc_iii": nullFunc_iii, "nullFunc_viiii": nullFunc_viiii, "invoke_iiii": invoke_iiii, "invoke_viiiii": invoke_viiiii, "invoke_dii": invoke_dii, "invoke_vid": invoke_vid, "invoke_di": invoke_di, "invoke_i": invoke_i, "invoke_vi": invoke_vi, "invoke_vii": invoke_vii, "invoke_ii": invoke_ii, "invoke_viii": invoke_viii, "invoke_v": invoke_v, "invoke_viid": invoke_viid, "invoke_iiiii": invoke_iiiii, "invoke_viiiiii": invoke_viiiiii, "invoke_iii": invoke_iii, "invoke_viiii": invoke_viiii, "___syscall221": ___syscall221, "floatReadValueFromPointer": floatReadValueFromPointer, "simpleReadValueFromPointer": simpleReadValueFromPointer, "_emscripten_asm_const_iiiid": _emscripten_asm_const_iiiid, "__embind_register_memory_view": __embind_register_memory_view, "throwInternalError": throwInternalError, "get_first_emval": get_first_emval, "_abort": _abort, "throwBindingError": throwBindingError, "___gxx_personality_v0": ___gxx_personality_v0, "extendError": extendError, "__embind_register_void": __embind_register_void, "___cxa_find_matching_catch": ___cxa_find_matching_catch, "count_emval_handles": count_emval_handles, "___syscall54": ___syscall54, "getShiftFromSize": getShiftFromSize, "__embind_register_function": __embind_register_function, "embind_init_charCodes": embind_init_charCodes, "___setErrNo": ___setErrNo, "__emval_register": __emval_register, "___cxa_allocate_exception": ___cxa_allocate_exception, "_emscripten_memcpy_big": _emscripten_memcpy_big, "__embind_register_bool": __embind_register_bool, "___resumeException": ___resumeException, "heap32VectorToArray": heap32VectorToArray, "__ZSt18uncaught_exceptionv": __ZSt18uncaught_exceptionv, "__exit": __exit, "getTypeName": getTypeName, "___cxa_begin_catch": ___cxa_begin_catch, "_pthread_getspecific": _pthread_getspecific, "createNamedFunction": createNamedFunction, "__embind_register_emval": __embind_register_emval, "readLatin1String": readLatin1String, "throwUnboundTypeError": throwUnboundTypeError, "craftInvokerFunction": craftInvokerFunction, "_emscripten_asm_const_iiiiiiiidddddddddddddddddddddddddi": _emscripten_asm_const_iiiiiiiidddddddddddddddddddddddddi, "_pthread_once": _pthread_once, "__emval_decref": __emval_decref, "__embind_register_integer": __embind_register_integer, "__embind_register_float": __embind_register_float, "makeLegalFunctionName": makeLegalFunctionName, "_pthread_key_create": _pthread_key_create, "___unlock": ___unlock, "__embind_register_std_wstring": __embind_register_std_wstring, "init_emval": init_emval, "whenDependentTypesAreResolved": whenDependentTypesAreResolved, "_emscripten_asm_const_iiiiii": _emscripten_asm_const_iiiiii, "new_": new_, "_pthread_setspecific": _pthread_setspecific, "___cxa_atexit": ___cxa_atexit, "integerReadValueFromPointer": integerReadValueFromPointer, "registerType": registerType, "___cxa_throw": ___cxa_throw, "___lock": ___lock, "___syscall6": ___syscall6, "___syscall5": ___syscall5, "ensureOverloadTable": ensureOverloadTable, "__embind_register_constant": __embind_register_constant, "requireFunction": requireFunction, "runDestructors": runDestructors, "_embind_repr": _embind_repr, "_atexit": _atexit, "___syscall140": ___syscall140, "exposePublicSymbol": exposePublicSymbol, "_exit": _exit, "__embind_register_std_string": __embind_register_std_string, "replacePublicSymbol": replacePublicSymbol, "___syscall145": ___syscall145, "___syscall146": ___syscall146, "DYNAMICTOP_PTR": DYNAMICTOP_PTR, "tempDoublePtr": tempDoublePtr, "ABORT": ABORT, "STACKTOP": STACKTOP, "STACK_MAX": STACK_MAX, "cttz_i8": cttz_i8, "___dso_handle": ___dso_handle };
// EMSCRIPTEN_START_ASM
var asm = (function(global, env, buffer) {
'almost asm';


  var Int8View = global.Int8Array;
  var HEAP8 = new Int8View(buffer);
  var Int16View = global.Int16Array;
  var HEAP16 = new Int16View(buffer);
  var Int32View = global.Int32Array;
  var HEAP32 = new Int32View(buffer);
  var Uint8View = global.Uint8Array;
  var HEAPU8 = new Uint8View(buffer);
  var Uint16View = global.Uint16Array;
  var HEAPU16 = new Uint16View(buffer);
  var Uint32View = global.Uint32Array;
  var HEAPU32 = new Uint32View(buffer);
  var Float32View = global.Float32Array;
  var HEAPF32 = new Float32View(buffer);
  var Float64View = global.Float64Array;
  var HEAPF64 = new Float64View(buffer);
  var byteLength = global.byteLength;

  var DYNAMICTOP_PTR=env.DYNAMICTOP_PTR|0;
  var tempDoublePtr=env.tempDoublePtr|0;
  var ABORT=env.ABORT|0;
  var STACKTOP=env.STACKTOP|0;
  var STACK_MAX=env.STACK_MAX|0;
  var cttz_i8=env.cttz_i8|0;
  var ___dso_handle=env.___dso_handle|0;

  var __THREW__ = 0;
  var threwValue = 0;
  var setjmpId = 0;
  var undef = 0;
  var nan = global.NaN, inf = global.Infinity;
  var tempInt = 0, tempBigInt = 0, tempBigIntS = 0, tempValue = 0, tempDouble = 0.0;
  var tempRet0 = 0;

  var Math_floor=global.Math.floor;
  var Math_abs=global.Math.abs;
  var Math_sqrt=global.Math.sqrt;
  var Math_pow=global.Math.pow;
  var Math_cos=global.Math.cos;
  var Math_sin=global.Math.sin;
  var Math_tan=global.Math.tan;
  var Math_acos=global.Math.acos;
  var Math_asin=global.Math.asin;
  var Math_atan=global.Math.atan;
  var Math_atan2=global.Math.atan2;
  var Math_exp=global.Math.exp;
  var Math_log=global.Math.log;
  var Math_ceil=global.Math.ceil;
  var Math_imul=global.Math.imul;
  var Math_min=global.Math.min;
  var Math_max=global.Math.max;
  var Math_clz32=global.Math.clz32;
  var abort=env.abort;
  var assert=env.assert;
  var enlargeMemory=env.enlargeMemory;
  var getTotalMemory=env.getTotalMemory;
  var abortOnCannotGrowMemory=env.abortOnCannotGrowMemory;
  var abortStackOverflow=env.abortStackOverflow;
  var nullFunc_iiii=env.nullFunc_iiii;
  var nullFunc_viiiii=env.nullFunc_viiiii;
  var nullFunc_dii=env.nullFunc_dii;
  var nullFunc_vid=env.nullFunc_vid;
  var nullFunc_di=env.nullFunc_di;
  var nullFunc_i=env.nullFunc_i;
  var nullFunc_vi=env.nullFunc_vi;
  var nullFunc_vii=env.nullFunc_vii;
  var nullFunc_ii=env.nullFunc_ii;
  var nullFunc_viii=env.nullFunc_viii;
  var nullFunc_v=env.nullFunc_v;
  var nullFunc_viid=env.nullFunc_viid;
  var nullFunc_iiiii=env.nullFunc_iiiii;
  var nullFunc_viiiiii=env.nullFunc_viiiiii;
  var nullFunc_iii=env.nullFunc_iii;
  var nullFunc_viiii=env.nullFunc_viiii;
  var invoke_iiii=env.invoke_iiii;
  var invoke_viiiii=env.invoke_viiiii;
  var invoke_dii=env.invoke_dii;
  var invoke_vid=env.invoke_vid;
  var invoke_di=env.invoke_di;
  var invoke_i=env.invoke_i;
  var invoke_vi=env.invoke_vi;
  var invoke_vii=env.invoke_vii;
  var invoke_ii=env.invoke_ii;
  var invoke_viii=env.invoke_viii;
  var invoke_v=env.invoke_v;
  var invoke_viid=env.invoke_viid;
  var invoke_iiiii=env.invoke_iiiii;
  var invoke_viiiiii=env.invoke_viiiiii;
  var invoke_iii=env.invoke_iii;
  var invoke_viiii=env.invoke_viiii;
  var ___syscall221=env.___syscall221;
  var floatReadValueFromPointer=env.floatReadValueFromPointer;
  var simpleReadValueFromPointer=env.simpleReadValueFromPointer;
  var _emscripten_asm_const_iiiid=env._emscripten_asm_const_iiiid;
  var __embind_register_memory_view=env.__embind_register_memory_view;
  var throwInternalError=env.throwInternalError;
  var get_first_emval=env.get_first_emval;
  var _abort=env._abort;
  var throwBindingError=env.throwBindingError;
  var ___gxx_personality_v0=env.___gxx_personality_v0;
  var extendError=env.extendError;
  var __embind_register_void=env.__embind_register_void;
  var ___cxa_find_matching_catch=env.___cxa_find_matching_catch;
  var count_emval_handles=env.count_emval_handles;
  var ___syscall54=env.___syscall54;
  var getShiftFromSize=env.getShiftFromSize;
  var __embind_register_function=env.__embind_register_function;
  var embind_init_charCodes=env.embind_init_charCodes;
  var ___setErrNo=env.___setErrNo;
  var __emval_register=env.__emval_register;
  var ___cxa_allocate_exception=env.___cxa_allocate_exception;
  var _emscripten_memcpy_big=env._emscripten_memcpy_big;
  var __embind_register_bool=env.__embind_register_bool;
  var ___resumeException=env.___resumeException;
  var heap32VectorToArray=env.heap32VectorToArray;
  var __ZSt18uncaught_exceptionv=env.__ZSt18uncaught_exceptionv;
  var __exit=env.__exit;
  var getTypeName=env.getTypeName;
  var ___cxa_begin_catch=env.___cxa_begin_catch;
  var _pthread_getspecific=env._pthread_getspecific;
  var createNamedFunction=env.createNamedFunction;
  var __embind_register_emval=env.__embind_register_emval;
  var readLatin1String=env.readLatin1String;
  var throwUnboundTypeError=env.throwUnboundTypeError;
  var craftInvokerFunction=env.craftInvokerFunction;
  var _emscripten_asm_const_iiiiiiiidddddddddddddddddddddddddi=env._emscripten_asm_const_iiiiiiiidddddddddddddddddddddddddi;
  var _pthread_once=env._pthread_once;
  var __emval_decref=env.__emval_decref;
  var __embind_register_integer=env.__embind_register_integer;
  var __embind_register_float=env.__embind_register_float;
  var makeLegalFunctionName=env.makeLegalFunctionName;
  var _pthread_key_create=env._pthread_key_create;
  var ___unlock=env.___unlock;
  var __embind_register_std_wstring=env.__embind_register_std_wstring;
  var init_emval=env.init_emval;
  var whenDependentTypesAreResolved=env.whenDependentTypesAreResolved;
  var _emscripten_asm_const_iiiiii=env._emscripten_asm_const_iiiiii;
  var new_=env.new_;
  var _pthread_setspecific=env._pthread_setspecific;
  var ___cxa_atexit=env.___cxa_atexit;
  var integerReadValueFromPointer=env.integerReadValueFromPointer;
  var registerType=env.registerType;
  var ___cxa_throw=env.___cxa_throw;
  var ___lock=env.___lock;
  var ___syscall6=env.___syscall6;
  var ___syscall5=env.___syscall5;
  var ensureOverloadTable=env.ensureOverloadTable;
  var __embind_register_constant=env.__embind_register_constant;
  var requireFunction=env.requireFunction;
  var runDestructors=env.runDestructors;
  var _embind_repr=env._embind_repr;
  var _atexit=env._atexit;
  var ___syscall140=env.___syscall140;
  var exposePublicSymbol=env.exposePublicSymbol;
  var _exit=env._exit;
  var __embind_register_std_string=env.__embind_register_std_string;
  var replacePublicSymbol=env.replacePublicSymbol;
  var ___syscall145=env.___syscall145;
  var ___syscall146=env.___syscall146;
  var tempFloat = 0.0;

function _emscripten_replace_memory(newBuffer) {
  if ((byteLength(newBuffer) & 0xffffff || byteLength(newBuffer) <= 0xffffff) || byteLength(newBuffer) > 0x80000000) return false;
  HEAP8 = new Int8View(newBuffer);
  HEAP16 = new Int16View(newBuffer);
  HEAP32 = new Int32View(newBuffer);
  HEAPU8 = new Uint8View(newBuffer);
  HEAPU16 = new Uint16View(newBuffer);
  HEAPU32 = new Uint32View(newBuffer);
  HEAPF32 = new Float32View(newBuffer);
  HEAPF64 = new Float64View(newBuffer);
  buffer = newBuffer;
  return true;
}

// EMSCRIPTEN_START_FUNCS
function __ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($first, $last, $db) {
 $first = $first | 0;
 $last = $last | 0;
 $db = $db | 0;
 var $12 = 0, $14 = 0, $18 = 0, $21 = 0, $23 = 0, $27 = 0, $30 = 0, $31 = 0, $32 = 0, $36 = 0, $37 = 0, $42 = 0, $49 = 0, $52 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $62 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $75 = 0, $9 = 0, $__end_$i = 0, $__end_$i1152 = 0, $__end_$i1398 = 0, $__end_$i1541 = 0, $__end_$i1557 = 0, $__end_$i1653 = 0, $__end_$i658 = 0, $__end_$i945 = 0, $__i$0$i$i = 0, $__i$0$i$i$i = 0, $__i$0$i$i$i$i = 0, $__i$0$i$i$i$i737 = 0, $__i$0$i$i$i1158 = 0, $__i$0$i$i$i1167 = 0, $__i$0$i$i$i1404 = 0, $__i$0$i$i$i1414 = 0, $__i$0$i$i$i1473 = 0, $__i$0$i$i$i1491 = 0, $__i$0$i$i$i1502 = 0, $__i$0$i$i$i1520 = 0, $__i$0$i$i$i1531 = 0, $__i$0$i$i$i622 = 0, $__i$0$i$i$i692 = 0, $__i$0$i$i$i712 = 0, $__i$0$i$i$i907 = 0, $__i$0$i$i$i925 = 0, $__i$0$i$i$i935 = 0, $__i$0$i$i683 = 0, $__p$0$i$i = 0, $__p$0$i$i1015 = 0, $__p$0$i$i1037 = 0, $__p$0$i$i1059 = 0, $__p$0$i$i1081 = 0, $__p$0$i$i1103 = 0, $__p$0$i$i1125 = 0, $__p$0$i$i1147 = 0, $__p$0$i$i1195 = 0, $__p$0$i$i1217 = 0, $__p$0$i$i1239 = 0, $__p$0$i$i1261 = 0, $__p$0$i$i1283 = 0, $__p$0$i$i1305 = 0, $__p$0$i$i1327 = 0, $__p$0$i$i1349 = 0, $__p$0$i$i1371 = 0, $__p$0$i$i1393 = 0, $__p$0$i$i1442 = 0, $__p$0$i$i1583 = 0, $__p$0$i$i1605 = 0, $__p$0$i$i1627 = 0, $__p$0$i$i1649 = 0, $__p$0$i$i481 = 0, $__p$0$i$i503 = 0, $__p$0$i$i525 = 0, $__p$0$i$i547 = 0, $__p$0$i$i569 = 0, $__p$0$i$i591 = 0, $__p$0$i$i613 = 0, $__p$0$i$i653 = 0, $__p$0$i$i678 = 0, $__p$0$i$i762 = 0, $__p$0$i$i784 = 0, $__p$0$i$i806 = 0, $__p$0$i$i828 = 0, $__p$0$i$i850 = 0, $__p$0$i$i872 = 0, $__p$0$i$i894 = 0, $__p$0$i$i971 = 0, $__p$0$i$i993 = 0, $__size_$i1$i$i$i$i = 0, $__size_$i1$i$i$i$i726 = 0, $add$ptr = 0, $add$ptr$i1452 = 0, $add$ptr$i1462 = 0, $add$ptr$i1542 = 0, $add$ptr$i1550 = 0, $add$ptr$i1558 = 0, $add$ptr$i902 = 0, $add$ptr$i946 = 0, $add$ptr104 = 0, $add$ptr485 = 0, $agg$tmp = 0, $agg$tmp508 = 0, $agg$tmp700 = 0, $agg$tmp787 = 0, $and$i$i$i$i = 0, $and$i$i$i$i1008 = 0, $and$i$i$i$i1030 = 0, $and$i$i$i$i1052 = 0, $and$i$i$i$i1074 = 0, $and$i$i$i$i1096 = 0, $and$i$i$i$i1118 = 0, $and$i$i$i$i1140 = 0, $and$i$i$i$i1188 = 0, $and$i$i$i$i1210 = 0, $and$i$i$i$i1232 = 0, $and$i$i$i$i1254 = 0, $and$i$i$i$i1276 = 0, $and$i$i$i$i1298 = 0, $and$i$i$i$i1320 = 0, $and$i$i$i$i1342 = 0, $and$i$i$i$i1364 = 0, $and$i$i$i$i1386 = 0, $and$i$i$i$i1435 = 0, $and$i$i$i$i1576 = 0, $and$i$i$i$i1598 = 0, $and$i$i$i$i1620 = 0, $and$i$i$i$i1642 = 0, $and$i$i$i$i474 = 0, $and$i$i$i$i496 = 0, $and$i$i$i$i518 = 0, $and$i$i$i$i540 = 0, $and$i$i$i$i562 = 0, $and$i$i$i$i584 = 0, $and$i$i$i$i606 = 0, $and$i$i$i$i646 = 0, $and$i$i$i$i671 = 0, $and$i$i$i$i755 = 0, $and$i$i$i$i777 = 0, $and$i$i$i$i799 = 0, $and$i$i$i$i821 = 0, $and$i$i$i$i843 = 0, $and$i$i$i$i865 = 0, $and$i$i$i$i887 = 0, $and$i$i$i$i964 = 0, $and$i$i$i$i986 = 0, $arrayidx17 = 0, $call$i = 0, $call$i$i$i = 0, $call$i$i$i1009 = 0, $call$i$i$i1031 = 0, $call$i$i$i1053 = 0, $call$i$i$i1075 = 0, $call$i$i$i1097 = 0, $call$i$i$i1119 = 0, $call$i$i$i1141 = 0, $call$i$i$i1189 = 0, $call$i$i$i1211 = 0, $call$i$i$i1233 = 0, $call$i$i$i1255 = 0, $call$i$i$i1277 = 0, $call$i$i$i1299 = 0, $call$i$i$i1321 = 0, $call$i$i$i1343 = 0, $call$i$i$i1365 = 0, $call$i$i$i1387 = 0, $call$i$i$i1436 = 0, $call$i$i$i1577 = 0, $call$i$i$i1599 = 0, $call$i$i$i1621 = 0, $call$i$i$i1643 = 0, $call$i$i$i475 = 0, $call$i$i$i497 = 0, $call$i$i$i519 = 0, $call$i$i$i541 = 0, $call$i$i$i563 = 0, $call$i$i$i585 = 0, $call$i$i$i607 = 0, $call$i$i$i647 = 0, $call$i$i$i672 = 0, $call$i$i$i756 = 0, $call$i$i$i778 = 0, $call$i$i$i800 = 0, $call$i$i$i822 = 0, $call$i$i$i844 = 0, $call$i$i$i866 = 0, $call$i$i$i888 = 0, $call$i$i$i965 = 0, $call$i$i$i987 = 0, $call$i1020 = 0, $call$i1042 = 0, $call$i1064 = 0, $call$i1086 = 0, $call$i1108 = 0, $call$i1130 = 0, $call$i1178 = 0, $call$i1200 = 0, $call$i1222 = 0, $call$i1244 = 0, $call$i1266 = 0, $call$i1288 = 0, $call$i1310 = 0, $call$i1332 = 0, $call$i1354 = 0, $call$i1376 = 0, $call$i1425 = 0, $call$i1566 = 0, $call$i1588 = 0, $call$i1610 = 0, $call$i1632 = 0, $call$i464 = 0, $call$i486 = 0, $call$i508 = 0, $call$i530 = 0, $call$i552 = 0, $call$i574 = 0, $call$i596 = 0, $call$i636 = 0, $call$i661 = 0, $call$i745 = 0, $call$i767 = 0, $call$i789 = 0, $call$i811 = 0, $call$i833 = 0, $call$i855 = 0, $call$i877 = 0, $call$i954 = 0, $call$i976 = 0, $call$i998 = 0, $call105 = 0, $call147 = 0, $call157 = 0, $call21 = 0, $call213 = 0, $call225 = 0, $call241 = 0, $call253 = 0, $call265 = 0, $call281 = 0, $call293 = 0, $call308 = 0, $call31 = 0, $call312 = 0, $call382 = 0, $call394 = 0, $call406 = 0, $call41 = 0, $call418 = 0, $call434 = 0, $call446 = 0, $call458 = 0, $call470 = 0, $call489 = 0, $call499 = 0, $call51 = 0, $call549 = 0, $call561 = 0, $call573 = 0, $call582 = 0, $call598 = 0, $call61 = 0, $call610 = 0, $call622 = 0, $call638 = 0, $call650 = 0, $call662 = 0, $call681 = 0, $call691 = 0, $call735 = 0, $call752 = 0, $call757 = 0, $call760 = 0, $call82 = 0, $call863 = 0, $call875 = 0, $call887 = 0, $call899 = 0, $call92 = 0, $cmp479 = 0, $cmp9 = 0, $first129 = 0, $first186 = 0, $incdec$ptr$i$i$i = 0, $incdec$ptr$i$i$i1455 = 0, $incdec$ptr$i$i$i1465 = 0, $incdec$ptr$i$i$i1545 = 0, $incdec$ptr$i$i$i1553 = 0, $incdec$ptr$i$i$i1561 = 0, $incdec$ptr$i$i$i949 = 0, $parsed_gs$0$off0 = 0, $ref$tmp = 0, $ref$tmp$i$i1631 = 0, $ref$tmp113 = 0, $ref$tmp114 = 0, $ref$tmp117 = 0, $ref$tmp332 = 0, $ref$tmp790 = 0, $ref$tmp791 = 0, $ref$tmp792 = 0, $retval$14 = 0, $sub$ptr$lhs$cast = 0, $sub$ptr$sub = 0, $t$0 = 0, $tobool$i$i$i$i$i = 0, $tobool$i$i$i$i$i1483 = 0, $tobool$i$i$i$i$i1512 = 0, $tobool$i$i$i$i$i704 = 0, $tobool$i$i$i$i$i917 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 208 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(208);
 $ref$tmp$i$i1631 = sp + 176 | 0;
 $ref$tmp = sp + 112 | 0;
 $ref$tmp113 = sp + 88 | 0;
 $ref$tmp114 = sp + 64 | 0;
 $ref$tmp117 = sp + 48 | 0;
 $agg$tmp = sp + 160 | 0;
 $ref$tmp332 = sp + 36 | 0;
 $agg$tmp508 = sp + 148 | 0;
 $agg$tmp700 = sp + 136 | 0;
 $agg$tmp787 = sp + 124 | 0;
 $ref$tmp790 = sp + 24 | 0;
 $ref$tmp791 = sp + 12 | 0;
 $ref$tmp792 = sp;
 $sub$ptr$lhs$cast = $last;
 $sub$ptr$sub = $sub$ptr$lhs$cast - $first | 0;
 L1 : do if (($sub$ptr$sub | 0) > 1) {
  $add$ptr = $first + 2 | 0;
  if (($sub$ptr$sub | 0) > 3) if ((HEAP8[$first >> 0] | 0) == 103) {
   $cmp9 = (HEAP8[$first + 1 >> 0] | 0) == 115;
   $parsed_gs$0$off0 = $cmp9;
   $t$0 = $cmp9 ? $add$ptr : $first;
  } else {
   $parsed_gs$0$off0 = 0;
   $t$0 = $first;
  } else {
   $parsed_gs$0$off0 = 0;
   $t$0 = $first;
  }
  $arrayidx17 = $t$0 + 1 | 0;
  $add$ptr485 = $first + 3 | 0;
  $cmp479 = ($add$ptr | 0) != ($last | 0);
  $add$ptr104 = $t$0 + 2 | 0;
  do switch (HEAP8[$t$0 >> 0] | 0) {
  case 76:
   {
    $retval$14 = __ZN10__cxxabiv112_GLOBAL__N_118parse_expr_primaryINS0_2DbEEEPKcS4_S4_RT_($first, $last, $db) | 0;
    break L1;
    break;
   }
  case 84:
   {
    $retval$14 = __ZN10__cxxabiv112_GLOBAL__N_120parse_template_paramINS0_2DbEEEPKcS4_S4_RT_($first, $last, $db) | 0;
    break L1;
    break;
   }
  case 102:
   {
    $retval$14 = __ZN10__cxxabiv112_GLOBAL__N_120parse_function_paramINS0_2DbEEEPKcS4_S4_RT_($first, $last, $db) | 0;
    break L1;
    break;
   }
  case 97:
   {
    switch (HEAP8[$arrayidx17 >> 0] | 0) {
    case 97:
     {
      HEAP32[$ref$tmp >> 2] = 0;
      HEAP32[$ref$tmp + 4 >> 2] = 0;
      HEAP32[$ref$tmp + 8 >> 2] = 0;
      $call$i = __ZNSt3__211char_traitsIcE6lengthEPKc(14889) | 0;
      if ($call$i >>> 0 > 4294967279) __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($ref$tmp);
      if ($call$i >>> 0 < 11) {
       HEAP8[$ref$tmp + 11 >> 0] = $call$i;
       $__p$0$i$i = $ref$tmp;
      } else {
       $and$i$i$i$i = $call$i + 16 & -16;
       $call$i$i$i = __ZN10__cxxabiv112_GLOBAL__N_112malloc_allocIcE8allocateEj($and$i$i$i$i) | 0;
       HEAP32[$ref$tmp >> 2] = $call$i$i$i;
       HEAP32[$ref$tmp + 8 >> 2] = $and$i$i$i$i | -2147483648;
       HEAP32[$ref$tmp + 4 >> 2] = $call$i;
       $__p$0$i$i = $call$i$i$i;
      }
      __ZNSt3__211char_traitsIcE4copyEPcPKcj($__p$0$i$i, 14889, $call$i) | 0;
      HEAP8[$ref$tmp$i$i1631 >> 0] = 0;
      __ZNSt3__211char_traitsIcE6assignERcRKc($__p$0$i$i + $call$i | 0, $ref$tmp$i$i1631);
      $call21 = __ZN10__cxxabiv112_GLOBAL__N_123parse_binary_expressionINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($add$ptr, $last, $ref$tmp, $db) | 0;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($ref$tmp);
      $retval$14 = ($call21 | 0) == ($add$ptr | 0) ? $first : $call21;
      break L1;
      break;
     }
    case 100:
     {
      HEAP32[$ref$tmp >> 2] = 0;
      HEAP32[$ref$tmp + 4 >> 2] = 0;
      HEAP32[$ref$tmp + 8 >> 2] = 0;
      $call$i464 = __ZNSt3__211char_traitsIcE6lengthEPKc(14907) | 0;
      if ($call$i464 >>> 0 > 4294967279) __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($ref$tmp);
      if ($call$i464 >>> 0 < 11) {
       HEAP8[$ref$tmp + 11 >> 0] = $call$i464;
       $__p$0$i$i481 = $ref$tmp;
      } else {
       $and$i$i$i$i474 = $call$i464 + 16 & -16;
       $call$i$i$i475 = __ZN10__cxxabiv112_GLOBAL__N_112malloc_allocIcE8allocateEj($and$i$i$i$i474) | 0;
       HEAP32[$ref$tmp >> 2] = $call$i$i$i475;
       HEAP32[$ref$tmp + 8 >> 2] = $and$i$i$i$i474 | -2147483648;
       HEAP32[$ref$tmp + 4 >> 2] = $call$i464;
       $__p$0$i$i481 = $call$i$i$i475;
      }
      __ZNSt3__211char_traitsIcE4copyEPcPKcj($__p$0$i$i481, 14907, $call$i464) | 0;
      HEAP8[$ref$tmp$i$i1631 >> 0] = 0;
      __ZNSt3__211char_traitsIcE6assignERcRKc($__p$0$i$i481 + $call$i464 | 0, $ref$tmp$i$i1631);
      $call31 = __ZN10__cxxabiv112_GLOBAL__N_123parse_prefix_expressionINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($add$ptr, $last, $ref$tmp, $db) | 0;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($ref$tmp);
      $retval$14 = ($call31 | 0) == ($add$ptr | 0) ? $first : $call31;
      break L1;
      break;
     }
    case 110:
     {
      HEAP32[$ref$tmp >> 2] = 0;
      HEAP32[$ref$tmp + 4 >> 2] = 0;
      HEAP32[$ref$tmp + 8 >> 2] = 0;
      $call$i486 = __ZNSt3__211char_traitsIcE6lengthEPKc(14907) | 0;
      if ($call$i486 >>> 0 > 4294967279) __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($ref$tmp);
      if ($call$i486 >>> 0 < 11) {
       HEAP8[$ref$tmp + 11 >> 0] = $call$i486;
       $__p$0$i$i503 = $ref$tmp;
      } else {
       $and$i$i$i$i496 = $call$i486 + 16 & -16;
       $call$i$i$i497 = __ZN10__cxxabiv112_GLOBAL__N_112malloc_allocIcE8allocateEj($and$i$i$i$i496) | 0;
       HEAP32[$ref$tmp >> 2] = $call$i$i$i497;
       HEAP32[$ref$tmp + 8 >> 2] = $and$i$i$i$i496 | -2147483648;
       HEAP32[$ref$tmp + 4 >> 2] = $call$i486;
       $__p$0$i$i503 = $call$i$i$i497;
      }
      __ZNSt3__211char_traitsIcE4copyEPcPKcj($__p$0$i$i503, 14907, $call$i486) | 0;
      HEAP8[$ref$tmp$i$i1631 >> 0] = 0;
      __ZNSt3__211char_traitsIcE6assignERcRKc($__p$0$i$i503 + $call$i486 | 0, $ref$tmp$i$i1631);
      $call41 = __ZN10__cxxabiv112_GLOBAL__N_123parse_binary_expressionINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($add$ptr, $last, $ref$tmp, $db) | 0;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($ref$tmp);
      $retval$14 = ($call41 | 0) == ($add$ptr | 0) ? $first : $call41;
      break L1;
      break;
     }
    case 78:
     {
      HEAP32[$ref$tmp >> 2] = 0;
      HEAP32[$ref$tmp + 4 >> 2] = 0;
      HEAP32[$ref$tmp + 8 >> 2] = 0;
      $call$i508 = __ZNSt3__211char_traitsIcE6lengthEPKc(14950) | 0;
      if ($call$i508 >>> 0 > 4294967279) __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($ref$tmp);
      if ($call$i508 >>> 0 < 11) {
       HEAP8[$ref$tmp + 11 >> 0] = $call$i508;
       $__p$0$i$i525 = $ref$tmp;
      } else {
       $and$i$i$i$i518 = $call$i508 + 16 & -16;
       $call$i$i$i519 = __ZN10__cxxabiv112_GLOBAL__N_112malloc_allocIcE8allocateEj($and$i$i$i$i518) | 0;
       HEAP32[$ref$tmp >> 2] = $call$i$i$i519;
       HEAP32[$ref$tmp + 8 >> 2] = $and$i$i$i$i518 | -2147483648;
       HEAP32[$ref$tmp + 4 >> 2] = $call$i508;
       $__p$0$i$i525 = $call$i$i$i519;
      }
      __ZNSt3__211char_traitsIcE4copyEPcPKcj($__p$0$i$i525, 14950, $call$i508) | 0;
      HEAP8[$ref$tmp$i$i1631 >> 0] = 0;
      __ZNSt3__211char_traitsIcE6assignERcRKc($__p$0$i$i525 + $call$i508 | 0, $ref$tmp$i$i1631);
      $call51 = __ZN10__cxxabiv112_GLOBAL__N_123parse_binary_expressionINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($add$ptr, $last, $ref$tmp, $db) | 0;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($ref$tmp);
      $retval$14 = ($call51 | 0) == ($add$ptr | 0) ? $first : $call51;
      break L1;
      break;
     }
    case 83:
     {
      HEAP32[$ref$tmp >> 2] = 0;
      HEAP32[$ref$tmp + 4 >> 2] = 0;
      HEAP32[$ref$tmp + 8 >> 2] = 0;
      $call$i530 = __ZNSt3__211char_traitsIcE6lengthEPKc(14953) | 0;
      if ($call$i530 >>> 0 > 4294967279) __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($ref$tmp);
      if ($call$i530 >>> 0 < 11) {
       HEAP8[$ref$tmp + 11 >> 0] = $call$i530;
       $__p$0$i$i547 = $ref$tmp;
      } else {
       $and$i$i$i$i540 = $call$i530 + 16 & -16;
       $call$i$i$i541 = __ZN10__cxxabiv112_GLOBAL__N_112malloc_allocIcE8allocateEj($and$i$i$i$i540) | 0;
       HEAP32[$ref$tmp >> 2] = $call$i$i$i541;
       HEAP32[$ref$tmp + 8 >> 2] = $and$i$i$i$i540 | -2147483648;
       HEAP32[$ref$tmp + 4 >> 2] = $call$i530;
       $__p$0$i$i547 = $call$i$i$i541;
      }
      __ZNSt3__211char_traitsIcE4copyEPcPKcj($__p$0$i$i547, 14953, $call$i530) | 0;
      HEAP8[$ref$tmp$i$i1631 >> 0] = 0;
      __ZNSt3__211char_traitsIcE6assignERcRKc($__p$0$i$i547 + $call$i530 | 0, $ref$tmp$i$i1631);
      $call61 = __ZN10__cxxabiv112_GLOBAL__N_123parse_binary_expressionINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($add$ptr, $last, $ref$tmp, $db) | 0;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($ref$tmp);
      $retval$14 = ($call61 | 0) == ($add$ptr | 0) ? $first : $call61;
      break L1;
      break;
     }
    case 116:
     {
      $retval$14 = __ZN10__cxxabiv112_GLOBAL__N_118parse_alignof_typeINS0_2DbEEEPKcS4_S4_RT_($first, $last, $db) | 0;
      break L1;
      break;
     }
    case 122:
     {
      $retval$14 = __ZN10__cxxabiv112_GLOBAL__N_118parse_alignof_exprINS0_2DbEEEPKcS4_S4_RT_($first, $last, $db) | 0;
      break L1;
      break;
     }
    default:
     {
      $retval$14 = $first;
      break L1;
     }
    }
    break;
   }
  case 99:
   {
    switch (HEAP8[$arrayidx17 >> 0] | 0) {
    case 99:
     {
      $retval$14 = __ZN10__cxxabiv112_GLOBAL__N_121parse_const_cast_exprINS0_2DbEEEPKcS4_S4_RT_($first, $last, $db) | 0;
      break L1;
      break;
     }
    case 108:
     {
      $retval$14 = __ZN10__cxxabiv112_GLOBAL__N_115parse_call_exprINS0_2DbEEEPKcS4_S4_RT_($first, $last, $db) | 0;
      break L1;
      break;
     }
    case 109:
     {
      HEAP32[$ref$tmp >> 2] = 0;
      HEAP32[$ref$tmp + 4 >> 2] = 0;
      HEAP32[$ref$tmp + 8 >> 2] = 0;
      $call$i552 = __ZNSt3__211char_traitsIcE6lengthEPKc(14955) | 0;
      if ($call$i552 >>> 0 > 4294967279) __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($ref$tmp);
      if ($call$i552 >>> 0 < 11) {
       HEAP8[$ref$tmp + 11 >> 0] = $call$i552;
       $__p$0$i$i569 = $ref$tmp;
      } else {
       $and$i$i$i$i562 = $call$i552 + 16 & -16;
       $call$i$i$i563 = __ZN10__cxxabiv112_GLOBAL__N_112malloc_allocIcE8allocateEj($and$i$i$i$i562) | 0;
       HEAP32[$ref$tmp >> 2] = $call$i$i$i563;
       HEAP32[$ref$tmp + 8 >> 2] = $and$i$i$i$i562 | -2147483648;
       HEAP32[$ref$tmp + 4 >> 2] = $call$i552;
       $__p$0$i$i569 = $call$i$i$i563;
      }
      __ZNSt3__211char_traitsIcE4copyEPcPKcj($__p$0$i$i569, 14955, $call$i552) | 0;
      HEAP8[$ref$tmp$i$i1631 >> 0] = 0;
      __ZNSt3__211char_traitsIcE6assignERcRKc($__p$0$i$i569 + $call$i552 | 0, $ref$tmp$i$i1631);
      $call82 = __ZN10__cxxabiv112_GLOBAL__N_123parse_binary_expressionINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($add$ptr, $last, $ref$tmp, $db) | 0;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($ref$tmp);
      $retval$14 = ($call82 | 0) == ($add$ptr | 0) ? $first : $call82;
      break L1;
      break;
     }
    case 111:
     {
      HEAP32[$ref$tmp >> 2] = 0;
      HEAP32[$ref$tmp + 4 >> 2] = 0;
      HEAP32[$ref$tmp + 8 >> 2] = 0;
      $call$i574 = __ZNSt3__211char_traitsIcE6lengthEPKc(14957) | 0;
      if ($call$i574 >>> 0 > 4294967279) __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($ref$tmp);
      if ($call$i574 >>> 0 < 11) {
       HEAP8[$ref$tmp + 11 >> 0] = $call$i574;
       $__p$0$i$i591 = $ref$tmp;
      } else {
       $and$i$i$i$i584 = $call$i574 + 16 & -16;
       $call$i$i$i585 = __ZN10__cxxabiv112_GLOBAL__N_112malloc_allocIcE8allocateEj($and$i$i$i$i584) | 0;
       HEAP32[$ref$tmp >> 2] = $call$i$i$i585;
       HEAP32[$ref$tmp + 8 >> 2] = $and$i$i$i$i584 | -2147483648;
       HEAP32[$ref$tmp + 4 >> 2] = $call$i574;
       $__p$0$i$i591 = $call$i$i$i585;
      }
      __ZNSt3__211char_traitsIcE4copyEPcPKcj($__p$0$i$i591, 14957, $call$i574) | 0;
      HEAP8[$ref$tmp$i$i1631 >> 0] = 0;
      __ZNSt3__211char_traitsIcE6assignERcRKc($__p$0$i$i591 + $call$i574 | 0, $ref$tmp$i$i1631);
      $call92 = __ZN10__cxxabiv112_GLOBAL__N_123parse_prefix_expressionINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($add$ptr, $last, $ref$tmp, $db) | 0;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($ref$tmp);
      $retval$14 = ($call92 | 0) == ($add$ptr | 0) ? $first : $call92;
      break L1;
      break;
     }
    case 118:
     {
      $retval$14 = __ZN10__cxxabiv112_GLOBAL__N_121parse_conversion_exprINS0_2DbEEEPKcS4_S4_RT_($first, $last, $db) | 0;
      break L1;
      break;
     }
    default:
     {
      $retval$14 = $first;
      break L1;
     }
    }
    break;
   }
  case 100:
   {
    switch (HEAP8[$arrayidx17 >> 0] | 0) {
    case 97:
     {
      $call105 = __ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($add$ptr104, $last, $db) | 0;
      if (($call105 | 0) == ($add$ptr104 | 0)) {
       $retval$14 = $first;
       break L1;
      }
      $__end_$i = $db + 4 | 0;
      if ((HEAP32[$db >> 2] | 0) == (HEAP32[$__end_$i >> 2] | 0)) {
       $retval$14 = $first;
       break L1;
      };
      HEAP32[$ref$tmp114 >> 2] = 0;
      HEAP32[$ref$tmp114 + 4 >> 2] = 0;
      HEAP32[$ref$tmp114 + 8 >> 2] = 0;
      L81 : do if ($parsed_gs$0$off0) {
       $call$i596 = __ZNSt3__211char_traitsIcE6lengthEPKc(14959) | 0;
       if ($call$i596 >>> 0 > 4294967279) __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($ref$tmp114);
       if ($call$i596 >>> 0 < 11) {
        HEAP8[$ref$tmp114 + 11 >> 0] = $call$i596;
        $__p$0$i$i613 = $ref$tmp114;
       } else {
        $and$i$i$i$i606 = $call$i596 + 16 & -16;
        $call$i$i$i607 = __ZN10__cxxabiv112_GLOBAL__N_112malloc_allocIcE8allocateEj($and$i$i$i$i606) | 0;
        HEAP32[$ref$tmp114 >> 2] = $call$i$i$i607;
        HEAP32[$ref$tmp114 + 8 >> 2] = $and$i$i$i$i606 | -2147483648;
        HEAP32[$ref$tmp114 + 4 >> 2] = $call$i596;
        $__p$0$i$i613 = $call$i$i$i607;
       }
       __ZNSt3__211char_traitsIcE4copyEPcPKcj($__p$0$i$i613, 14959, $call$i596) | 0;
       HEAP8[$ref$tmp$i$i1631 >> 0] = 0;
       __ZNSt3__211char_traitsIcE6assignERcRKc($__p$0$i$i613 + $call$i596 | 0, $ref$tmp$i$i1631);
      } else {
       $__i$0$i$i = 0;
       while (1) {
        if (($__i$0$i$i | 0) == 3) break L81;
        HEAP32[$ref$tmp114 + ($__i$0$i$i << 2) >> 2] = 0;
        $__i$0$i$i = $__i$0$i$i + 1 | 0;
       }
      } while (0);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($ref$tmp114, 14962) | 0;
      HEAP32[$ref$tmp113 >> 2] = HEAP32[$ref$tmp114 >> 2];
      HEAP32[$ref$tmp113 + 4 >> 2] = HEAP32[$ref$tmp114 + 4 >> 2];
      HEAP32[$ref$tmp113 + 8 >> 2] = HEAP32[$ref$tmp114 + 8 >> 2];
      $__i$0$i$i$i = 0;
      while (1) {
       if (($__i$0$i$i$i | 0) == 3) break;
       HEAP32[$ref$tmp114 + ($__i$0$i$i$i << 2) >> 2] = 0;
       $__i$0$i$i$i = $__i$0$i$i$i + 1 | 0;
      }
      __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($ref$tmp117, (HEAP32[$__end_$i >> 2] | 0) + -24 | 0);
      $9 = HEAP8[$ref$tmp117 + 11 >> 0] | 0;
      $tobool$i$i$i$i$i = $9 << 24 >> 24 < 0;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($ref$tmp113, $tobool$i$i$i$i$i ? HEAP32[$ref$tmp117 >> 2] | 0 : $ref$tmp117, $tobool$i$i$i$i$i ? HEAP32[$ref$tmp117 + 4 >> 2] | 0 : $9 & 255) | 0;
      HEAP32[$ref$tmp >> 2] = HEAP32[$ref$tmp113 >> 2];
      HEAP32[$ref$tmp + 4 >> 2] = HEAP32[$ref$tmp113 + 4 >> 2];
      HEAP32[$ref$tmp + 8 >> 2] = HEAP32[$ref$tmp113 + 8 >> 2];
      $__i$0$i$i$i622 = 0;
      while (1) {
       if (($__i$0$i$i$i622 | 0) == 3) break;
       HEAP32[$ref$tmp113 + ($__i$0$i$i$i622 << 2) >> 2] = 0;
       $__i$0$i$i$i622 = $__i$0$i$i$i622 + 1 | 0;
      }
      $12 = HEAP32[$__end_$i >> 2] | 0;
      $first129 = $12 + -24 | 0;
      $__size_$i1$i$i$i$i = $first129 + 11 | 0;
      if ((HEAP8[$__size_$i1$i$i$i$i >> 0] | 0) < 0) {
       $14 = HEAP32[$first129 >> 2] | 0;
       HEAP8[$ref$tmp$i$i1631 >> 0] = 0;
       __ZNSt3__211char_traitsIcE6assignERcRKc($14, $ref$tmp$i$i1631);
       HEAP32[$12 + -20 >> 2] = 0;
      } else {
       HEAP8[$ref$tmp$i$i1631 >> 0] = 0;
       __ZNSt3__211char_traitsIcE6assignERcRKc($first129, $ref$tmp$i$i1631);
       HEAP8[$__size_$i1$i$i$i$i >> 0] = 0;
      }
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE7reserveEj($first129);
      HEAP32[$first129 >> 2] = HEAP32[$ref$tmp >> 2];
      HEAP32[$first129 + 4 >> 2] = HEAP32[$ref$tmp + 4 >> 2];
      HEAP32[$first129 + 8 >> 2] = HEAP32[$ref$tmp + 8 >> 2];
      $__i$0$i$i$i$i = 0;
      while (1) {
       if (($__i$0$i$i$i$i | 0) == 3) break;
       HEAP32[$ref$tmp + ($__i$0$i$i$i$i << 2) >> 2] = 0;
       $__i$0$i$i$i$i = $__i$0$i$i$i$i + 1 | 0;
      }
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($ref$tmp);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($ref$tmp117);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($ref$tmp113);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($ref$tmp114);
      $retval$14 = $call105;
      break L1;
      break;
     }
    case 99:
     {
      $retval$14 = __ZN10__cxxabiv112_GLOBAL__N_123parse_dynamic_cast_exprINS0_2DbEEEPKcS4_S4_RT_($first, $last, $db) | 0;
      break L1;
      break;
     }
    case 101:
     {
      HEAP32[$ref$tmp >> 2] = 0;
      HEAP32[$ref$tmp + 4 >> 2] = 0;
      HEAP32[$ref$tmp + 8 >> 2] = 0;
      $call$i636 = __ZNSt3__211char_traitsIcE6lengthEPKc(14905) | 0;
      if ($call$i636 >>> 0 > 4294967279) __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($ref$tmp);
      if ($call$i636 >>> 0 < 11) {
       HEAP8[$ref$tmp + 11 >> 0] = $call$i636;
       $__p$0$i$i653 = $ref$tmp;
      } else {
       $and$i$i$i$i646 = $call$i636 + 16 & -16;
       $call$i$i$i647 = __ZN10__cxxabiv112_GLOBAL__N_112malloc_allocIcE8allocateEj($and$i$i$i$i646) | 0;
       HEAP32[$ref$tmp >> 2] = $call$i$i$i647;
       HEAP32[$ref$tmp + 8 >> 2] = $and$i$i$i$i646 | -2147483648;
       HEAP32[$ref$tmp + 4 >> 2] = $call$i636;
       $__p$0$i$i653 = $call$i$i$i647;
      }
      __ZNSt3__211char_traitsIcE4copyEPcPKcj($__p$0$i$i653, 14905, $call$i636) | 0;
      HEAP8[$ref$tmp$i$i1631 >> 0] = 0;
      __ZNSt3__211char_traitsIcE6assignERcRKc($__p$0$i$i653 + $call$i636 | 0, $ref$tmp$i$i1631);
      $call147 = __ZN10__cxxabiv112_GLOBAL__N_123parse_prefix_expressionINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($add$ptr, $last, $ref$tmp, $db) | 0;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($ref$tmp);
      $retval$14 = ($call147 | 0) == ($add$ptr | 0) ? $first : $call147;
      break L1;
      break;
     }
    case 108:
     {
      $call157 = __ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($add$ptr104, $last, $db) | 0;
      if (($call157 | 0) == ($add$ptr104 | 0)) {
       $retval$14 = $first;
       break L1;
      }
      $__end_$i658 = $db + 4 | 0;
      if ((HEAP32[$db >> 2] | 0) == (HEAP32[$__end_$i658 >> 2] | 0)) {
       $retval$14 = $first;
       break L1;
      };
      HEAP32[$ref$tmp114 >> 2] = 0;
      HEAP32[$ref$tmp114 + 4 >> 2] = 0;
      HEAP32[$ref$tmp114 + 8 >> 2] = 0;
      L123 : do if ($parsed_gs$0$off0) {
       $call$i661 = __ZNSt3__211char_traitsIcE6lengthEPKc(14959) | 0;
       if ($call$i661 >>> 0 > 4294967279) __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($ref$tmp114);
       if ($call$i661 >>> 0 < 11) {
        HEAP8[$ref$tmp114 + 11 >> 0] = $call$i661;
        $__p$0$i$i678 = $ref$tmp114;
       } else {
        $and$i$i$i$i671 = $call$i661 + 16 & -16;
        $call$i$i$i672 = __ZN10__cxxabiv112_GLOBAL__N_112malloc_allocIcE8allocateEj($and$i$i$i$i671) | 0;
        HEAP32[$ref$tmp114 >> 2] = $call$i$i$i672;
        HEAP32[$ref$tmp114 + 8 >> 2] = $and$i$i$i$i671 | -2147483648;
        HEAP32[$ref$tmp114 + 4 >> 2] = $call$i661;
        $__p$0$i$i678 = $call$i$i$i672;
       }
       __ZNSt3__211char_traitsIcE4copyEPcPKcj($__p$0$i$i678, 14959, $call$i661) | 0;
       HEAP8[$ref$tmp$i$i1631 >> 0] = 0;
       __ZNSt3__211char_traitsIcE6assignERcRKc($__p$0$i$i678 + $call$i661 | 0, $ref$tmp$i$i1631);
      } else {
       $__i$0$i$i683 = 0;
       while (1) {
        if (($__i$0$i$i683 | 0) == 3) break L123;
        HEAP32[$ref$tmp114 + ($__i$0$i$i683 << 2) >> 2] = 0;
        $__i$0$i$i683 = $__i$0$i$i683 + 1 | 0;
       }
      } while (0);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($ref$tmp114, 14972) | 0;
      HEAP32[$ref$tmp113 >> 2] = HEAP32[$ref$tmp114 >> 2];
      HEAP32[$ref$tmp113 + 4 >> 2] = HEAP32[$ref$tmp114 + 4 >> 2];
      HEAP32[$ref$tmp113 + 8 >> 2] = HEAP32[$ref$tmp114 + 8 >> 2];
      $__i$0$i$i$i692 = 0;
      while (1) {
       if (($__i$0$i$i$i692 | 0) == 3) break;
       HEAP32[$ref$tmp114 + ($__i$0$i$i$i692 << 2) >> 2] = 0;
       $__i$0$i$i$i692 = $__i$0$i$i$i692 + 1 | 0;
      }
      __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($ref$tmp117, (HEAP32[$__end_$i658 >> 2] | 0) + -24 | 0);
      $18 = HEAP8[$ref$tmp117 + 11 >> 0] | 0;
      $tobool$i$i$i$i$i704 = $18 << 24 >> 24 < 0;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($ref$tmp113, $tobool$i$i$i$i$i704 ? HEAP32[$ref$tmp117 >> 2] | 0 : $ref$tmp117, $tobool$i$i$i$i$i704 ? HEAP32[$ref$tmp117 + 4 >> 2] | 0 : $18 & 255) | 0;
      HEAP32[$ref$tmp >> 2] = HEAP32[$ref$tmp113 >> 2];
      HEAP32[$ref$tmp + 4 >> 2] = HEAP32[$ref$tmp113 + 4 >> 2];
      HEAP32[$ref$tmp + 8 >> 2] = HEAP32[$ref$tmp113 + 8 >> 2];
      $__i$0$i$i$i712 = 0;
      while (1) {
       if (($__i$0$i$i$i712 | 0) == 3) break;
       HEAP32[$ref$tmp113 + ($__i$0$i$i$i712 << 2) >> 2] = 0;
       $__i$0$i$i$i712 = $__i$0$i$i$i712 + 1 | 0;
      }
      $21 = HEAP32[$__end_$i658 >> 2] | 0;
      $first186 = $21 + -24 | 0;
      $__size_$i1$i$i$i$i726 = $first186 + 11 | 0;
      if ((HEAP8[$__size_$i1$i$i$i$i726 >> 0] | 0) < 0) {
       $23 = HEAP32[$first186 >> 2] | 0;
       HEAP8[$ref$tmp$i$i1631 >> 0] = 0;
       __ZNSt3__211char_traitsIcE6assignERcRKc($23, $ref$tmp$i$i1631);
       HEAP32[$21 + -20 >> 2] = 0;
      } else {
       HEAP8[$ref$tmp$i$i1631 >> 0] = 0;
       __ZNSt3__211char_traitsIcE6assignERcRKc($first186, $ref$tmp$i$i1631);
       HEAP8[$__size_$i1$i$i$i$i726 >> 0] = 0;
      }
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE7reserveEj($first186);
      HEAP32[$first186 >> 2] = HEAP32[$ref$tmp >> 2];
      HEAP32[$first186 + 4 >> 2] = HEAP32[$ref$tmp + 4 >> 2];
      HEAP32[$first186 + 8 >> 2] = HEAP32[$ref$tmp + 8 >> 2];
      $__i$0$i$i$i$i737 = 0;
      while (1) {
       if (($__i$0$i$i$i$i737 | 0) == 3) break;
       HEAP32[$ref$tmp + ($__i$0$i$i$i$i737 << 2) >> 2] = 0;
       $__i$0$i$i$i$i737 = $__i$0$i$i$i$i737 + 1 | 0;
      }
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($ref$tmp);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($ref$tmp117);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($ref$tmp113);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($ref$tmp114);
      $retval$14 = $call157;
      break L1;
      break;
     }
    case 110:
     {
      $retval$14 = __ZN10__cxxabiv112_GLOBAL__N_121parse_unresolved_nameINS0_2DbEEEPKcS4_S4_RT_($first, $last, $db) | 0;
      break L1;
      break;
     }
    case 115:
     {
      $retval$14 = __ZN10__cxxabiv112_GLOBAL__N_119parse_dot_star_exprINS0_2DbEEEPKcS4_S4_RT_($first, $last, $db) | 0;
      break L1;
      break;
     }
    case 116:
     {
      $retval$14 = __ZN10__cxxabiv112_GLOBAL__N_114parse_dot_exprINS0_2DbEEEPKcS4_S4_RT_($first, $last, $db) | 0;
      break L1;
      break;
     }
    case 118:
     {
      HEAP32[$ref$tmp >> 2] = 0;
      HEAP32[$ref$tmp + 4 >> 2] = 0;
      HEAP32[$ref$tmp + 8 >> 2] = 0;
      $call$i745 = __ZNSt3__211char_traitsIcE6lengthEPKc(14980) | 0;
      if ($call$i745 >>> 0 > 4294967279) __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($ref$tmp);
      if ($call$i745 >>> 0 < 11) {
       HEAP8[$ref$tmp + 11 >> 0] = $call$i745;
       $__p$0$i$i762 = $ref$tmp;
      } else {
       $and$i$i$i$i755 = $call$i745 + 16 & -16;
       $call$i$i$i756 = __ZN10__cxxabiv112_GLOBAL__N_112malloc_allocIcE8allocateEj($and$i$i$i$i755) | 0;
       HEAP32[$ref$tmp >> 2] = $call$i$i$i756;
       HEAP32[$ref$tmp + 8 >> 2] = $and$i$i$i$i755 | -2147483648;
       HEAP32[$ref$tmp + 4 >> 2] = $call$i745;
       $__p$0$i$i762 = $call$i$i$i756;
      }
      __ZNSt3__211char_traitsIcE4copyEPcPKcj($__p$0$i$i762, 14980, $call$i745) | 0;
      HEAP8[$ref$tmp$i$i1631 >> 0] = 0;
      __ZNSt3__211char_traitsIcE6assignERcRKc($__p$0$i$i762 + $call$i745 | 0, $ref$tmp$i$i1631);
      $call213 = __ZN10__cxxabiv112_GLOBAL__N_123parse_binary_expressionINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($add$ptr, $last, $ref$tmp, $db) | 0;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($ref$tmp);
      $retval$14 = ($call213 | 0) == ($add$ptr | 0) ? $first : $call213;
      break L1;
      break;
     }
    case 86:
     {
      HEAP32[$ref$tmp >> 2] = 0;
      HEAP32[$ref$tmp + 4 >> 2] = 0;
      HEAP32[$ref$tmp + 8 >> 2] = 0;
      $call$i767 = __ZNSt3__211char_traitsIcE6lengthEPKc(14982) | 0;
      if ($call$i767 >>> 0 > 4294967279) __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($ref$tmp);
      if ($call$i767 >>> 0 < 11) {
       HEAP8[$ref$tmp + 11 >> 0] = $call$i767;
       $__p$0$i$i784 = $ref$tmp;
      } else {
       $and$i$i$i$i777 = $call$i767 + 16 & -16;
       $call$i$i$i778 = __ZN10__cxxabiv112_GLOBAL__N_112malloc_allocIcE8allocateEj($and$i$i$i$i777) | 0;
       HEAP32[$ref$tmp >> 2] = $call$i$i$i778;
       HEAP32[$ref$tmp + 8 >> 2] = $and$i$i$i$i777 | -2147483648;
       HEAP32[$ref$tmp + 4 >> 2] = $call$i767;
       $__p$0$i$i784 = $call$i$i$i778;
      }
      __ZNSt3__211char_traitsIcE4copyEPcPKcj($__p$0$i$i784, 14982, $call$i767) | 0;
      HEAP8[$ref$tmp$i$i1631 >> 0] = 0;
      __ZNSt3__211char_traitsIcE6assignERcRKc($__p$0$i$i784 + $call$i767 | 0, $ref$tmp$i$i1631);
      $call225 = __ZN10__cxxabiv112_GLOBAL__N_123parse_binary_expressionINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($add$ptr, $last, $ref$tmp, $db) | 0;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($ref$tmp);
      $retval$14 = ($call225 | 0) == ($add$ptr | 0) ? $first : $call225;
      break L1;
      break;
     }
    default:
     {
      $retval$14 = $first;
      break L1;
     }
    }
    break;
   }
  case 101:
   {
    switch (HEAP8[$arrayidx17 >> 0] | 0) {
    case 111:
     {
      HEAP32[$ref$tmp >> 2] = 0;
      HEAP32[$ref$tmp + 4 >> 2] = 0;
      HEAP32[$ref$tmp + 8 >> 2] = 0;
      $call$i789 = __ZNSt3__211char_traitsIcE6lengthEPKc(14985) | 0;
      if ($call$i789 >>> 0 > 4294967279) __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($ref$tmp);
      if ($call$i789 >>> 0 < 11) {
       HEAP8[$ref$tmp + 11 >> 0] = $call$i789;
       $__p$0$i$i806 = $ref$tmp;
      } else {
       $and$i$i$i$i799 = $call$i789 + 16 & -16;
       $call$i$i$i800 = __ZN10__cxxabiv112_GLOBAL__N_112malloc_allocIcE8allocateEj($and$i$i$i$i799) | 0;
       HEAP32[$ref$tmp >> 2] = $call$i$i$i800;
       HEAP32[$ref$tmp + 8 >> 2] = $and$i$i$i$i799 | -2147483648;
       HEAP32[$ref$tmp + 4 >> 2] = $call$i789;
       $__p$0$i$i806 = $call$i$i$i800;
      }
      __ZNSt3__211char_traitsIcE4copyEPcPKcj($__p$0$i$i806, 14985, $call$i789) | 0;
      HEAP8[$ref$tmp$i$i1631 >> 0] = 0;
      __ZNSt3__211char_traitsIcE6assignERcRKc($__p$0$i$i806 + $call$i789 | 0, $ref$tmp$i$i1631);
      $call241 = __ZN10__cxxabiv112_GLOBAL__N_123parse_binary_expressionINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($add$ptr, $last, $ref$tmp, $db) | 0;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($ref$tmp);
      $retval$14 = ($call241 | 0) == ($add$ptr | 0) ? $first : $call241;
      break L1;
      break;
     }
    case 79:
     {
      HEAP32[$ref$tmp >> 2] = 0;
      HEAP32[$ref$tmp + 4 >> 2] = 0;
      HEAP32[$ref$tmp + 8 >> 2] = 0;
      $call$i811 = __ZNSt3__211char_traitsIcE6lengthEPKc(14987) | 0;
      if ($call$i811 >>> 0 > 4294967279) __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($ref$tmp);
      if ($call$i811 >>> 0 < 11) {
       HEAP8[$ref$tmp + 11 >> 0] = $call$i811;
       $__p$0$i$i828 = $ref$tmp;
      } else {
       $and$i$i$i$i821 = $call$i811 + 16 & -16;
       $call$i$i$i822 = __ZN10__cxxabiv112_GLOBAL__N_112malloc_allocIcE8allocateEj($and$i$i$i$i821) | 0;
       HEAP32[$ref$tmp >> 2] = $call$i$i$i822;
       HEAP32[$ref$tmp + 8 >> 2] = $and$i$i$i$i821 | -2147483648;
       HEAP32[$ref$tmp + 4 >> 2] = $call$i811;
       $__p$0$i$i828 = $call$i$i$i822;
      }
      __ZNSt3__211char_traitsIcE4copyEPcPKcj($__p$0$i$i828, 14987, $call$i811) | 0;
      HEAP8[$ref$tmp$i$i1631 >> 0] = 0;
      __ZNSt3__211char_traitsIcE6assignERcRKc($__p$0$i$i828 + $call$i811 | 0, $ref$tmp$i$i1631);
      $call253 = __ZN10__cxxabiv112_GLOBAL__N_123parse_binary_expressionINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($add$ptr, $last, $ref$tmp, $db) | 0;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($ref$tmp);
      $retval$14 = ($call253 | 0) == ($add$ptr | 0) ? $first : $call253;
      break L1;
      break;
     }
    case 113:
     {
      HEAP32[$ref$tmp >> 2] = 0;
      HEAP32[$ref$tmp + 4 >> 2] = 0;
      HEAP32[$ref$tmp + 8 >> 2] = 0;
      $call$i833 = __ZNSt3__211char_traitsIcE6lengthEPKc(14990) | 0;
      if ($call$i833 >>> 0 > 4294967279) __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($ref$tmp);
      if ($call$i833 >>> 0 < 11) {
       HEAP8[$ref$tmp + 11 >> 0] = $call$i833;
       $__p$0$i$i850 = $ref$tmp;
      } else {
       $and$i$i$i$i843 = $call$i833 + 16 & -16;
       $call$i$i$i844 = __ZN10__cxxabiv112_GLOBAL__N_112malloc_allocIcE8allocateEj($and$i$i$i$i843) | 0;
       HEAP32[$ref$tmp >> 2] = $call$i$i$i844;
       HEAP32[$ref$tmp + 8 >> 2] = $and$i$i$i$i843 | -2147483648;
       HEAP32[$ref$tmp + 4 >> 2] = $call$i833;
       $__p$0$i$i850 = $call$i$i$i844;
      }
      __ZNSt3__211char_traitsIcE4copyEPcPKcj($__p$0$i$i850, 14990, $call$i833) | 0;
      HEAP8[$ref$tmp$i$i1631 >> 0] = 0;
      __ZNSt3__211char_traitsIcE6assignERcRKc($__p$0$i$i850 + $call$i833 | 0, $ref$tmp$i$i1631);
      $call265 = __ZN10__cxxabiv112_GLOBAL__N_123parse_binary_expressionINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($add$ptr, $last, $ref$tmp, $db) | 0;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($ref$tmp);
      $retval$14 = ($call265 | 0) == ($add$ptr | 0) ? $first : $call265;
      break L1;
      break;
     }
    default:
     {
      $retval$14 = $first;
      break L1;
     }
    }
    break;
   }
  case 103:
   {
    switch (HEAP8[$arrayidx17 >> 0] | 0) {
    case 101:
     {
      HEAP32[$ref$tmp >> 2] = 0;
      HEAP32[$ref$tmp + 4 >> 2] = 0;
      HEAP32[$ref$tmp + 8 >> 2] = 0;
      $call$i855 = __ZNSt3__211char_traitsIcE6lengthEPKc(14993) | 0;
      if ($call$i855 >>> 0 > 4294967279) __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($ref$tmp);
      if ($call$i855 >>> 0 < 11) {
       HEAP8[$ref$tmp + 11 >> 0] = $call$i855;
       $__p$0$i$i872 = $ref$tmp;
      } else {
       $and$i$i$i$i865 = $call$i855 + 16 & -16;
       $call$i$i$i866 = __ZN10__cxxabiv112_GLOBAL__N_112malloc_allocIcE8allocateEj($and$i$i$i$i865) | 0;
       HEAP32[$ref$tmp >> 2] = $call$i$i$i866;
       HEAP32[$ref$tmp + 8 >> 2] = $and$i$i$i$i865 | -2147483648;
       HEAP32[$ref$tmp + 4 >> 2] = $call$i855;
       $__p$0$i$i872 = $call$i$i$i866;
      }
      __ZNSt3__211char_traitsIcE4copyEPcPKcj($__p$0$i$i872, 14993, $call$i855) | 0;
      HEAP8[$ref$tmp$i$i1631 >> 0] = 0;
      __ZNSt3__211char_traitsIcE6assignERcRKc($__p$0$i$i872 + $call$i855 | 0, $ref$tmp$i$i1631);
      $call281 = __ZN10__cxxabiv112_GLOBAL__N_123parse_binary_expressionINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($add$ptr, $last, $ref$tmp, $db) | 0;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($ref$tmp);
      $retval$14 = ($call281 | 0) == ($add$ptr | 0) ? $first : $call281;
      break L1;
      break;
     }
    case 116:
     {
      HEAP32[$ref$tmp >> 2] = 0;
      HEAP32[$ref$tmp + 4 >> 2] = 0;
      HEAP32[$ref$tmp + 8 >> 2] = 0;
      $call$i877 = __ZNSt3__211char_traitsIcE6lengthEPKc(14923) | 0;
      if ($call$i877 >>> 0 > 4294967279) __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($ref$tmp);
      if ($call$i877 >>> 0 < 11) {
       HEAP8[$ref$tmp + 11 >> 0] = $call$i877;
       $__p$0$i$i894 = $ref$tmp;
      } else {
       $and$i$i$i$i887 = $call$i877 + 16 & -16;
       $call$i$i$i888 = __ZN10__cxxabiv112_GLOBAL__N_112malloc_allocIcE8allocateEj($and$i$i$i$i887) | 0;
       HEAP32[$ref$tmp >> 2] = $call$i$i$i888;
       HEAP32[$ref$tmp + 8 >> 2] = $and$i$i$i$i887 | -2147483648;
       HEAP32[$ref$tmp + 4 >> 2] = $call$i877;
       $__p$0$i$i894 = $call$i$i$i888;
      }
      __ZNSt3__211char_traitsIcE4copyEPcPKcj($__p$0$i$i894, 14923, $call$i877) | 0;
      HEAP8[$ref$tmp$i$i1631 >> 0] = 0;
      __ZNSt3__211char_traitsIcE6assignERcRKc($__p$0$i$i894 + $call$i877 | 0, $ref$tmp$i$i1631);
      $call293 = __ZN10__cxxabiv112_GLOBAL__N_123parse_binary_expressionINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($add$ptr, $last, $ref$tmp, $db) | 0;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($ref$tmp);
      $retval$14 = ($call293 | 0) == ($add$ptr | 0) ? $first : $call293;
      break L1;
      break;
     }
    default:
     {
      $retval$14 = $first;
      break L1;
     }
    }
    break;
   }
  case 105:
   {
    if ((HEAP8[$arrayidx17 >> 0] | 0) != 120) {
     $retval$14 = $first;
     break L1;
    }
    $call308 = __ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($add$ptr, $last, $db) | 0;
    if (($call308 | 0) == ($add$ptr | 0)) {
     $retval$14 = $first;
     break L1;
    }
    $call312 = __ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($call308, $last, $db) | 0;
    $__end_$i945 = $db + 4 | 0;
    if (($call312 | 0) == ($call308 | 0)) {
     $36 = HEAP32[$__end_$i945 >> 2] | 0;
     $add$ptr$i946 = $36 + -24 | 0;
     $37 = $36;
     while (1) {
      if (($37 | 0) == ($add$ptr$i946 | 0)) {
       $retval$14 = $first;
       break L1;
      }
      $incdec$ptr$i$i$i949 = $37 + -24 | 0;
      HEAP32[$__end_$i945 >> 2] = $incdec$ptr$i$i$i949;
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($incdec$ptr$i$i$i949);
      $37 = HEAP32[$__end_$i945 >> 2] | 0;
     }
    }
    $27 = HEAP32[$__end_$i945 >> 2] | 0;
    if ((($27 - (HEAP32[$db >> 2] | 0) | 0) / 24 | 0) >>> 0 < 2) {
     $retval$14 = $first;
     break L1;
    }
    __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($ref$tmp$i$i1631, $27 + -24 | 0);
    $30 = HEAP32[$__end_$i945 >> 2] | 0;
    $add$ptr$i902 = $30 + -24 | 0;
    $31 = $30;
    while (1) {
     if (($31 | 0) == ($add$ptr$i902 | 0)) break;
     $incdec$ptr$i$i$i = $31 + -24 | 0;
     HEAP32[$__end_$i945 >> 2] = $incdec$ptr$i$i$i;
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($incdec$ptr$i$i$i);
     $31 = HEAP32[$__end_$i945 >> 2] | 0;
    }
    __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($ref$tmp, $30 + -48 | 0);
    __ZNSt3__2plIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEENS_12basic_stringIT_T0_T1_EEPKS8_RKSB_($ref$tmp332, 14887, $ref$tmp);
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($ref$tmp332, 14996) | 0;
    HEAP32[$ref$tmp117 >> 2] = HEAP32[$ref$tmp332 >> 2];
    HEAP32[$ref$tmp117 + 4 >> 2] = HEAP32[$ref$tmp332 + 4 >> 2];
    HEAP32[$ref$tmp117 + 8 >> 2] = HEAP32[$ref$tmp332 + 8 >> 2];
    $__i$0$i$i$i907 = 0;
    while (1) {
     if (($__i$0$i$i$i907 | 0) == 3) break;
     HEAP32[$ref$tmp332 + ($__i$0$i$i$i907 << 2) >> 2] = 0;
     $__i$0$i$i$i907 = $__i$0$i$i$i907 + 1 | 0;
    }
    $32 = HEAP8[$ref$tmp$i$i1631 + 11 >> 0] | 0;
    $tobool$i$i$i$i$i917 = $32 << 24 >> 24 < 0;
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($ref$tmp117, $tobool$i$i$i$i$i917 ? HEAP32[$ref$tmp$i$i1631 >> 2] | 0 : $ref$tmp$i$i1631, $tobool$i$i$i$i$i917 ? HEAP32[$ref$tmp$i$i1631 + 4 >> 2] | 0 : $32 & 255) | 0;
    HEAP32[$ref$tmp114 >> 2] = HEAP32[$ref$tmp117 >> 2];
    HEAP32[$ref$tmp114 + 4 >> 2] = HEAP32[$ref$tmp117 + 4 >> 2];
    HEAP32[$ref$tmp114 + 8 >> 2] = HEAP32[$ref$tmp117 + 8 >> 2];
    $__i$0$i$i$i925 = 0;
    while (1) {
     if (($__i$0$i$i$i925 | 0) == 3) break;
     HEAP32[$ref$tmp117 + ($__i$0$i$i$i925 << 2) >> 2] = 0;
     $__i$0$i$i$i925 = $__i$0$i$i$i925 + 1 | 0;
    }
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($ref$tmp114, 14934) | 0;
    HEAP32[$agg$tmp >> 2] = HEAP32[$ref$tmp114 >> 2];
    HEAP32[$agg$tmp + 4 >> 2] = HEAP32[$ref$tmp114 + 4 >> 2];
    HEAP32[$agg$tmp + 8 >> 2] = HEAP32[$ref$tmp114 + 8 >> 2];
    $__i$0$i$i$i935 = 0;
    while (1) {
     if (($__i$0$i$i$i935 | 0) == 3) break;
     HEAP32[$ref$tmp114 + ($__i$0$i$i$i935 << 2) >> 2] = 0;
     $__i$0$i$i$i935 = $__i$0$i$i$i935 + 1 | 0;
    }
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ENSt3__212basic_stringIcNS2_11char_traitsIcEENS0_12malloc_allocIcEEEE($ref$tmp113, $agg$tmp);
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairaSEOS1_((HEAP32[$__end_$i945 >> 2] | 0) + -24 | 0, $ref$tmp113);
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($ref$tmp113);
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($agg$tmp);
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($ref$tmp114);
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($ref$tmp117);
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($ref$tmp332);
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($ref$tmp);
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($ref$tmp$i$i1631);
    $retval$14 = $call312;
    break L1;
    break;
   }
  case 108:
   {
    switch (HEAP8[$arrayidx17 >> 0] | 0) {
    case 101:
     {
      HEAP32[$ref$tmp >> 2] = 0;
      HEAP32[$ref$tmp + 4 >> 2] = 0;
      HEAP32[$ref$tmp + 8 >> 2] = 0;
      $call$i954 = __ZNSt3__211char_traitsIcE6lengthEPKc(14999) | 0;
      if ($call$i954 >>> 0 > 4294967279) __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($ref$tmp);
      if ($call$i954 >>> 0 < 11) {
       HEAP8[$ref$tmp + 11 >> 0] = $call$i954;
       $__p$0$i$i971 = $ref$tmp;
      } else {
       $and$i$i$i$i964 = $call$i954 + 16 & -16;
       $call$i$i$i965 = __ZN10__cxxabiv112_GLOBAL__N_112malloc_allocIcE8allocateEj($and$i$i$i$i964) | 0;
       HEAP32[$ref$tmp >> 2] = $call$i$i$i965;
       HEAP32[$ref$tmp + 8 >> 2] = $and$i$i$i$i964 | -2147483648;
       HEAP32[$ref$tmp + 4 >> 2] = $call$i954;
       $__p$0$i$i971 = $call$i$i$i965;
      }
      __ZNSt3__211char_traitsIcE4copyEPcPKcj($__p$0$i$i971, 14999, $call$i954) | 0;
      HEAP8[$ref$tmp$i$i1631 >> 0] = 0;
      __ZNSt3__211char_traitsIcE6assignERcRKc($__p$0$i$i971 + $call$i954 | 0, $ref$tmp$i$i1631);
      $call382 = __ZN10__cxxabiv112_GLOBAL__N_123parse_binary_expressionINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($add$ptr, $last, $ref$tmp, $db) | 0;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($ref$tmp);
      $retval$14 = ($call382 | 0) == ($add$ptr | 0) ? $first : $call382;
      break L1;
      break;
     }
    case 115:
     {
      HEAP32[$ref$tmp >> 2] = 0;
      HEAP32[$ref$tmp + 4 >> 2] = 0;
      HEAP32[$ref$tmp + 8 >> 2] = 0;
      $call$i976 = __ZNSt3__211char_traitsIcE6lengthEPKc(15002) | 0;
      if ($call$i976 >>> 0 > 4294967279) __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($ref$tmp);
      if ($call$i976 >>> 0 < 11) {
       HEAP8[$ref$tmp + 11 >> 0] = $call$i976;
       $__p$0$i$i993 = $ref$tmp;
      } else {
       $and$i$i$i$i986 = $call$i976 + 16 & -16;
       $call$i$i$i987 = __ZN10__cxxabiv112_GLOBAL__N_112malloc_allocIcE8allocateEj($and$i$i$i$i986) | 0;
       HEAP32[$ref$tmp >> 2] = $call$i$i$i987;
       HEAP32[$ref$tmp + 8 >> 2] = $and$i$i$i$i986 | -2147483648;
       HEAP32[$ref$tmp + 4 >> 2] = $call$i976;
       $__p$0$i$i993 = $call$i$i$i987;
      }
      __ZNSt3__211char_traitsIcE4copyEPcPKcj($__p$0$i$i993, 15002, $call$i976) | 0;
      HEAP8[$ref$tmp$i$i1631 >> 0] = 0;
      __ZNSt3__211char_traitsIcE6assignERcRKc($__p$0$i$i993 + $call$i976 | 0, $ref$tmp$i$i1631);
      $call394 = __ZN10__cxxabiv112_GLOBAL__N_123parse_binary_expressionINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($add$ptr, $last, $ref$tmp, $db) | 0;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($ref$tmp);
      $retval$14 = ($call394 | 0) == ($add$ptr | 0) ? $first : $call394;
      break L1;
      break;
     }
    case 83:
     {
      HEAP32[$ref$tmp >> 2] = 0;
      HEAP32[$ref$tmp + 4 >> 2] = 0;
      HEAP32[$ref$tmp + 8 >> 2] = 0;
      $call$i998 = __ZNSt3__211char_traitsIcE6lengthEPKc(15005) | 0;
      if ($call$i998 >>> 0 > 4294967279) __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($ref$tmp);
      if ($call$i998 >>> 0 < 11) {
       HEAP8[$ref$tmp + 11 >> 0] = $call$i998;
       $__p$0$i$i1015 = $ref$tmp;
      } else {
       $and$i$i$i$i1008 = $call$i998 + 16 & -16;
       $call$i$i$i1009 = __ZN10__cxxabiv112_GLOBAL__N_112malloc_allocIcE8allocateEj($and$i$i$i$i1008) | 0;
       HEAP32[$ref$tmp >> 2] = $call$i$i$i1009;
       HEAP32[$ref$tmp + 8 >> 2] = $and$i$i$i$i1008 | -2147483648;
       HEAP32[$ref$tmp + 4 >> 2] = $call$i998;
       $__p$0$i$i1015 = $call$i$i$i1009;
      }
      __ZNSt3__211char_traitsIcE4copyEPcPKcj($__p$0$i$i1015, 15005, $call$i998) | 0;
      HEAP8[$ref$tmp$i$i1631 >> 0] = 0;
      __ZNSt3__211char_traitsIcE6assignERcRKc($__p$0$i$i1015 + $call$i998 | 0, $ref$tmp$i$i1631);
      $call406 = __ZN10__cxxabiv112_GLOBAL__N_123parse_binary_expressionINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($add$ptr, $last, $ref$tmp, $db) | 0;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($ref$tmp);
      $retval$14 = ($call406 | 0) == ($add$ptr | 0) ? $first : $call406;
      break L1;
      break;
     }
    case 116:
     {
      HEAP32[$ref$tmp >> 2] = 0;
      HEAP32[$ref$tmp + 4 >> 2] = 0;
      HEAP32[$ref$tmp + 8 >> 2] = 0;
      $call$i1020 = __ZNSt3__211char_traitsIcE6lengthEPKc(14921) | 0;
      if ($call$i1020 >>> 0 > 4294967279) __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($ref$tmp);
      if ($call$i1020 >>> 0 < 11) {
       HEAP8[$ref$tmp + 11 >> 0] = $call$i1020;
       $__p$0$i$i1037 = $ref$tmp;
      } else {
       $and$i$i$i$i1030 = $call$i1020 + 16 & -16;
       $call$i$i$i1031 = __ZN10__cxxabiv112_GLOBAL__N_112malloc_allocIcE8allocateEj($and$i$i$i$i1030) | 0;
       HEAP32[$ref$tmp >> 2] = $call$i$i$i1031;
       HEAP32[$ref$tmp + 8 >> 2] = $and$i$i$i$i1030 | -2147483648;
       HEAP32[$ref$tmp + 4 >> 2] = $call$i1020;
       $__p$0$i$i1037 = $call$i$i$i1031;
      }
      __ZNSt3__211char_traitsIcE4copyEPcPKcj($__p$0$i$i1037, 14921, $call$i1020) | 0;
      HEAP8[$ref$tmp$i$i1631 >> 0] = 0;
      __ZNSt3__211char_traitsIcE6assignERcRKc($__p$0$i$i1037 + $call$i1020 | 0, $ref$tmp$i$i1631);
      $call418 = __ZN10__cxxabiv112_GLOBAL__N_123parse_binary_expressionINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($add$ptr, $last, $ref$tmp, $db) | 0;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($ref$tmp);
      $retval$14 = ($call418 | 0) == ($add$ptr | 0) ? $first : $call418;
      break L1;
      break;
     }
    default:
     {
      $retval$14 = $first;
      break L1;
     }
    }
    break;
   }
  case 109:
   {
    switch (HEAP8[$arrayidx17 >> 0] | 0) {
    case 105:
     {
      HEAP32[$ref$tmp >> 2] = 0;
      HEAP32[$ref$tmp + 4 >> 2] = 0;
      HEAP32[$ref$tmp + 8 >> 2] = 0;
      $call$i1042 = __ZNSt3__211char_traitsIcE6lengthEPKc(15009) | 0;
      if ($call$i1042 >>> 0 > 4294967279) __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($ref$tmp);
      if ($call$i1042 >>> 0 < 11) {
       HEAP8[$ref$tmp + 11 >> 0] = $call$i1042;
       $__p$0$i$i1059 = $ref$tmp;
      } else {
       $and$i$i$i$i1052 = $call$i1042 + 16 & -16;
       $call$i$i$i1053 = __ZN10__cxxabiv112_GLOBAL__N_112malloc_allocIcE8allocateEj($and$i$i$i$i1052) | 0;
       HEAP32[$ref$tmp >> 2] = $call$i$i$i1053;
       HEAP32[$ref$tmp + 8 >> 2] = $and$i$i$i$i1052 | -2147483648;
       HEAP32[$ref$tmp + 4 >> 2] = $call$i1042;
       $__p$0$i$i1059 = $call$i$i$i1053;
      }
      __ZNSt3__211char_traitsIcE4copyEPcPKcj($__p$0$i$i1059, 15009, $call$i1042) | 0;
      HEAP8[$ref$tmp$i$i1631 >> 0] = 0;
      __ZNSt3__211char_traitsIcE6assignERcRKc($__p$0$i$i1059 + $call$i1042 | 0, $ref$tmp$i$i1631);
      $call434 = __ZN10__cxxabiv112_GLOBAL__N_123parse_binary_expressionINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($add$ptr, $last, $ref$tmp, $db) | 0;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($ref$tmp);
      $retval$14 = ($call434 | 0) == ($add$ptr | 0) ? $first : $call434;
      break L1;
      break;
     }
    case 73:
     {
      HEAP32[$ref$tmp >> 2] = 0;
      HEAP32[$ref$tmp + 4 >> 2] = 0;
      HEAP32[$ref$tmp + 8 >> 2] = 0;
      $call$i1064 = __ZNSt3__211char_traitsIcE6lengthEPKc(15011) | 0;
      if ($call$i1064 >>> 0 > 4294967279) __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($ref$tmp);
      if ($call$i1064 >>> 0 < 11) {
       HEAP8[$ref$tmp + 11 >> 0] = $call$i1064;
       $__p$0$i$i1081 = $ref$tmp;
      } else {
       $and$i$i$i$i1074 = $call$i1064 + 16 & -16;
       $call$i$i$i1075 = __ZN10__cxxabiv112_GLOBAL__N_112malloc_allocIcE8allocateEj($and$i$i$i$i1074) | 0;
       HEAP32[$ref$tmp >> 2] = $call$i$i$i1075;
       HEAP32[$ref$tmp + 8 >> 2] = $and$i$i$i$i1074 | -2147483648;
       HEAP32[$ref$tmp + 4 >> 2] = $call$i1064;
       $__p$0$i$i1081 = $call$i$i$i1075;
      }
      __ZNSt3__211char_traitsIcE4copyEPcPKcj($__p$0$i$i1081, 15011, $call$i1064) | 0;
      HEAP8[$ref$tmp$i$i1631 >> 0] = 0;
      __ZNSt3__211char_traitsIcE6assignERcRKc($__p$0$i$i1081 + $call$i1064 | 0, $ref$tmp$i$i1631);
      $call446 = __ZN10__cxxabiv112_GLOBAL__N_123parse_binary_expressionINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($add$ptr, $last, $ref$tmp, $db) | 0;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($ref$tmp);
      $retval$14 = ($call446 | 0) == ($add$ptr | 0) ? $first : $call446;
      break L1;
      break;
     }
    case 108:
     {
      HEAP32[$ref$tmp >> 2] = 0;
      HEAP32[$ref$tmp + 4 >> 2] = 0;
      HEAP32[$ref$tmp + 8 >> 2] = 0;
      $call$i1086 = __ZNSt3__211char_traitsIcE6lengthEPKc(14905) | 0;
      if ($call$i1086 >>> 0 > 4294967279) __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($ref$tmp);
      if ($call$i1086 >>> 0 < 11) {
       HEAP8[$ref$tmp + 11 >> 0] = $call$i1086;
       $__p$0$i$i1103 = $ref$tmp;
      } else {
       $and$i$i$i$i1096 = $call$i1086 + 16 & -16;
       $call$i$i$i1097 = __ZN10__cxxabiv112_GLOBAL__N_112malloc_allocIcE8allocateEj($and$i$i$i$i1096) | 0;
       HEAP32[$ref$tmp >> 2] = $call$i$i$i1097;
       HEAP32[$ref$tmp + 8 >> 2] = $and$i$i$i$i1096 | -2147483648;
       HEAP32[$ref$tmp + 4 >> 2] = $call$i1086;
       $__p$0$i$i1103 = $call$i$i$i1097;
      }
      __ZNSt3__211char_traitsIcE4copyEPcPKcj($__p$0$i$i1103, 14905, $call$i1086) | 0;
      HEAP8[$ref$tmp$i$i1631 >> 0] = 0;
      __ZNSt3__211char_traitsIcE6assignERcRKc($__p$0$i$i1103 + $call$i1086 | 0, $ref$tmp$i$i1631);
      $call458 = __ZN10__cxxabiv112_GLOBAL__N_123parse_binary_expressionINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($add$ptr, $last, $ref$tmp, $db) | 0;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($ref$tmp);
      $retval$14 = ($call458 | 0) == ($add$ptr | 0) ? $first : $call458;
      break L1;
      break;
     }
    case 76:
     {
      HEAP32[$ref$tmp >> 2] = 0;
      HEAP32[$ref$tmp + 4 >> 2] = 0;
      HEAP32[$ref$tmp + 8 >> 2] = 0;
      $call$i1108 = __ZNSt3__211char_traitsIcE6lengthEPKc(15014) | 0;
      if ($call$i1108 >>> 0 > 4294967279) __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($ref$tmp);
      if ($call$i1108 >>> 0 < 11) {
       HEAP8[$ref$tmp + 11 >> 0] = $call$i1108;
       $__p$0$i$i1125 = $ref$tmp;
      } else {
       $and$i$i$i$i1118 = $call$i1108 + 16 & -16;
       $call$i$i$i1119 = __ZN10__cxxabiv112_GLOBAL__N_112malloc_allocIcE8allocateEj($and$i$i$i$i1118) | 0;
       HEAP32[$ref$tmp >> 2] = $call$i$i$i1119;
       HEAP32[$ref$tmp + 8 >> 2] = $and$i$i$i$i1118 | -2147483648;
       HEAP32[$ref$tmp + 4 >> 2] = $call$i1108;
       $__p$0$i$i1125 = $call$i$i$i1119;
      }
      __ZNSt3__211char_traitsIcE4copyEPcPKcj($__p$0$i$i1125, 15014, $call$i1108) | 0;
      HEAP8[$ref$tmp$i$i1631 >> 0] = 0;
      __ZNSt3__211char_traitsIcE6assignERcRKc($__p$0$i$i1125 + $call$i1108 | 0, $ref$tmp$i$i1631);
      $call470 = __ZN10__cxxabiv112_GLOBAL__N_123parse_binary_expressionINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($add$ptr, $last, $ref$tmp, $db) | 0;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($ref$tmp);
      $retval$14 = ($call470 | 0) == ($add$ptr | 0) ? $first : $call470;
      break L1;
      break;
     }
    case 109:
     {
      if ($cmp479) if ((HEAP8[$add$ptr >> 0] | 0) == 95) {
       HEAP32[$ref$tmp >> 2] = 0;
       HEAP32[$ref$tmp + 4 >> 2] = 0;
       HEAP32[$ref$tmp + 8 >> 2] = 0;
       $call$i1130 = __ZNSt3__211char_traitsIcE6lengthEPKc(15017) | 0;
       if ($call$i1130 >>> 0 > 4294967279) __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($ref$tmp);
       if ($call$i1130 >>> 0 < 11) {
        HEAP8[$ref$tmp + 11 >> 0] = $call$i1130;
        $__p$0$i$i1147 = $ref$tmp;
       } else {
        $and$i$i$i$i1140 = $call$i1130 + 16 & -16;
        $call$i$i$i1141 = __ZN10__cxxabiv112_GLOBAL__N_112malloc_allocIcE8allocateEj($and$i$i$i$i1140) | 0;
        HEAP32[$ref$tmp >> 2] = $call$i$i$i1141;
        HEAP32[$ref$tmp + 8 >> 2] = $and$i$i$i$i1140 | -2147483648;
        HEAP32[$ref$tmp + 4 >> 2] = $call$i1130;
        $__p$0$i$i1147 = $call$i$i$i1141;
       }
       __ZNSt3__211char_traitsIcE4copyEPcPKcj($__p$0$i$i1147, 15017, $call$i1130) | 0;
       HEAP8[$ref$tmp$i$i1631 >> 0] = 0;
       __ZNSt3__211char_traitsIcE6assignERcRKc($__p$0$i$i1147 + $call$i1130 | 0, $ref$tmp$i$i1631);
       $call489 = __ZN10__cxxabiv112_GLOBAL__N_123parse_prefix_expressionINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($add$ptr485, $last, $ref$tmp, $db) | 0;
       __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($ref$tmp);
       $retval$14 = ($call489 | 0) == ($add$ptr485 | 0) ? $first : $call489;
       break L1;
      }
      $call499 = __ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($add$ptr, $last, $db) | 0;
      if (($call499 | 0) == ($add$ptr | 0)) {
       $retval$14 = $first;
       break L1;
      }
      $__end_$i1152 = $db + 4 | 0;
      $42 = HEAP32[$__end_$i1152 >> 2] | 0;
      if ((HEAP32[$db >> 2] | 0) == ($42 | 0)) {
       $retval$14 = $first;
       break L1;
      }
      __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($ref$tmp113, $42 + -24 | 0);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKc($ref$tmp113, 0, 14887) | 0;
      HEAP32[$ref$tmp >> 2] = HEAP32[$ref$tmp113 >> 2];
      HEAP32[$ref$tmp + 4 >> 2] = HEAP32[$ref$tmp113 + 4 >> 2];
      HEAP32[$ref$tmp + 8 >> 2] = HEAP32[$ref$tmp113 + 8 >> 2];
      $__i$0$i$i$i1158 = 0;
      while (1) {
       if (($__i$0$i$i$i1158 | 0) == 3) break;
       HEAP32[$ref$tmp113 + ($__i$0$i$i$i1158 << 2) >> 2] = 0;
       $__i$0$i$i$i1158 = $__i$0$i$i$i1158 + 1 | 0;
      }
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($ref$tmp, 15020) | 0;
      HEAP32[$agg$tmp508 >> 2] = HEAP32[$ref$tmp >> 2];
      HEAP32[$agg$tmp508 + 4 >> 2] = HEAP32[$ref$tmp + 4 >> 2];
      HEAP32[$agg$tmp508 + 8 >> 2] = HEAP32[$ref$tmp + 8 >> 2];
      $__i$0$i$i$i1167 = 0;
      while (1) {
       if (($__i$0$i$i$i1167 | 0) == 3) break;
       HEAP32[$ref$tmp + ($__i$0$i$i$i1167 << 2) >> 2] = 0;
       $__i$0$i$i$i1167 = $__i$0$i$i$i1167 + 1 | 0;
      }
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ENSt3__212basic_stringIcNS2_11char_traitsIcEENS0_12malloc_allocIcEEEE($ref$tmp$i$i1631, $agg$tmp508);
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairaSEOS1_((HEAP32[$__end_$i1152 >> 2] | 0) + -24 | 0, $ref$tmp$i$i1631);
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($ref$tmp$i$i1631);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($agg$tmp508);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($ref$tmp);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($ref$tmp113);
      $retval$14 = $call499;
      break L1;
      break;
     }
    default:
     {
      $retval$14 = $first;
      break L1;
     }
    }
    break;
   }
  case 110:
   {
    switch (HEAP8[$arrayidx17 >> 0] | 0) {
    case 119:
    case 97:
     {
      $retval$14 = __ZN10__cxxabiv112_GLOBAL__N_114parse_new_exprINS0_2DbEEEPKcS4_S4_RT_($first, $last, $db) | 0;
      break L1;
      break;
     }
    case 101:
     {
      HEAP32[$ref$tmp >> 2] = 0;
      HEAP32[$ref$tmp + 4 >> 2] = 0;
      HEAP32[$ref$tmp + 8 >> 2] = 0;
      $call$i1178 = __ZNSt3__211char_traitsIcE6lengthEPKc(15024) | 0;
      if ($call$i1178 >>> 0 > 4294967279) __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($ref$tmp);
      if ($call$i1178 >>> 0 < 11) {
       HEAP8[$ref$tmp + 11 >> 0] = $call$i1178;
       $__p$0$i$i1195 = $ref$tmp;
      } else {
       $and$i$i$i$i1188 = $call$i1178 + 16 & -16;
       $call$i$i$i1189 = __ZN10__cxxabiv112_GLOBAL__N_112malloc_allocIcE8allocateEj($and$i$i$i$i1188) | 0;
       HEAP32[$ref$tmp >> 2] = $call$i$i$i1189;
       HEAP32[$ref$tmp + 8 >> 2] = $and$i$i$i$i1188 | -2147483648;
       HEAP32[$ref$tmp + 4 >> 2] = $call$i1178;
       $__p$0$i$i1195 = $call$i$i$i1189;
      }
      __ZNSt3__211char_traitsIcE4copyEPcPKcj($__p$0$i$i1195, 15024, $call$i1178) | 0;
      HEAP8[$ref$tmp$i$i1631 >> 0] = 0;
      __ZNSt3__211char_traitsIcE6assignERcRKc($__p$0$i$i1195 + $call$i1178 | 0, $ref$tmp$i$i1631);
      $call549 = __ZN10__cxxabiv112_GLOBAL__N_123parse_binary_expressionINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($add$ptr, $last, $ref$tmp, $db) | 0;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($ref$tmp);
      $retval$14 = ($call549 | 0) == ($add$ptr | 0) ? $first : $call549;
      break L1;
      break;
     }
    case 103:
     {
      HEAP32[$ref$tmp >> 2] = 0;
      HEAP32[$ref$tmp + 4 >> 2] = 0;
      HEAP32[$ref$tmp + 8 >> 2] = 0;
      $call$i1200 = __ZNSt3__211char_traitsIcE6lengthEPKc(15009) | 0;
      if ($call$i1200 >>> 0 > 4294967279) __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($ref$tmp);
      if ($call$i1200 >>> 0 < 11) {
       HEAP8[$ref$tmp + 11 >> 0] = $call$i1200;
       $__p$0$i$i1217 = $ref$tmp;
      } else {
       $and$i$i$i$i1210 = $call$i1200 + 16 & -16;
       $call$i$i$i1211 = __ZN10__cxxabiv112_GLOBAL__N_112malloc_allocIcE8allocateEj($and$i$i$i$i1210) | 0;
       HEAP32[$ref$tmp >> 2] = $call$i$i$i1211;
       HEAP32[$ref$tmp + 8 >> 2] = $and$i$i$i$i1210 | -2147483648;
       HEAP32[$ref$tmp + 4 >> 2] = $call$i1200;
       $__p$0$i$i1217 = $call$i$i$i1211;
      }
      __ZNSt3__211char_traitsIcE4copyEPcPKcj($__p$0$i$i1217, 15009, $call$i1200) | 0;
      HEAP8[$ref$tmp$i$i1631 >> 0] = 0;
      __ZNSt3__211char_traitsIcE6assignERcRKc($__p$0$i$i1217 + $call$i1200 | 0, $ref$tmp$i$i1631);
      $call561 = __ZN10__cxxabiv112_GLOBAL__N_123parse_prefix_expressionINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($add$ptr, $last, $ref$tmp, $db) | 0;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($ref$tmp);
      $retval$14 = ($call561 | 0) == ($add$ptr | 0) ? $first : $call561;
      break L1;
      break;
     }
    case 116:
     {
      HEAP32[$ref$tmp >> 2] = 0;
      HEAP32[$ref$tmp + 4 >> 2] = 0;
      HEAP32[$ref$tmp + 8 >> 2] = 0;
      $call$i1222 = __ZNSt3__211char_traitsIcE6lengthEPKc(15027) | 0;
      if ($call$i1222 >>> 0 > 4294967279) __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($ref$tmp);
      if ($call$i1222 >>> 0 < 11) {
       HEAP8[$ref$tmp + 11 >> 0] = $call$i1222;
       $__p$0$i$i1239 = $ref$tmp;
      } else {
       $and$i$i$i$i1232 = $call$i1222 + 16 & -16;
       $call$i$i$i1233 = __ZN10__cxxabiv112_GLOBAL__N_112malloc_allocIcE8allocateEj($and$i$i$i$i1232) | 0;
       HEAP32[$ref$tmp >> 2] = $call$i$i$i1233;
       HEAP32[$ref$tmp + 8 >> 2] = $and$i$i$i$i1232 | -2147483648;
       HEAP32[$ref$tmp + 4 >> 2] = $call$i1222;
       $__p$0$i$i1239 = $call$i$i$i1233;
      }
      __ZNSt3__211char_traitsIcE4copyEPcPKcj($__p$0$i$i1239, 15027, $call$i1222) | 0;
      HEAP8[$ref$tmp$i$i1631 >> 0] = 0;
      __ZNSt3__211char_traitsIcE6assignERcRKc($__p$0$i$i1239 + $call$i1222 | 0, $ref$tmp$i$i1631);
      $call573 = __ZN10__cxxabiv112_GLOBAL__N_123parse_prefix_expressionINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($add$ptr, $last, $ref$tmp, $db) | 0;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($ref$tmp);
      $retval$14 = ($call573 | 0) == ($add$ptr | 0) ? $first : $call573;
      break L1;
      break;
     }
    case 120:
     {
      $call582 = __ZN10__cxxabiv112_GLOBAL__N_125parse_noexcept_expressionINS0_2DbEEEPKcS4_S4_RT_($add$ptr, $last, $db) | 0;
      $retval$14 = ($call582 | 0) == ($add$ptr | 0) ? $first : $call582;
      break L1;
      break;
     }
    default:
     {
      $retval$14 = $first;
      break L1;
     }
    }
    break;
   }
  case 111:
   {
    switch (HEAP8[$arrayidx17 >> 0] | 0) {
    case 110:
     {
      $retval$14 = __ZN10__cxxabiv112_GLOBAL__N_121parse_unresolved_nameINS0_2DbEEEPKcS4_S4_RT_($first, $last, $db) | 0;
      break L1;
      break;
     }
    case 111:
     {
      HEAP32[$ref$tmp >> 2] = 0;
      HEAP32[$ref$tmp + 4 >> 2] = 0;
      HEAP32[$ref$tmp + 8 >> 2] = 0;
      $call$i1244 = __ZNSt3__211char_traitsIcE6lengthEPKc(15029) | 0;
      if ($call$i1244 >>> 0 > 4294967279) __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($ref$tmp);
      if ($call$i1244 >>> 0 < 11) {
       HEAP8[$ref$tmp + 11 >> 0] = $call$i1244;
       $__p$0$i$i1261 = $ref$tmp;
      } else {
       $and$i$i$i$i1254 = $call$i1244 + 16 & -16;
       $call$i$i$i1255 = __ZN10__cxxabiv112_GLOBAL__N_112malloc_allocIcE8allocateEj($and$i$i$i$i1254) | 0;
       HEAP32[$ref$tmp >> 2] = $call$i$i$i1255;
       HEAP32[$ref$tmp + 8 >> 2] = $and$i$i$i$i1254 | -2147483648;
       HEAP32[$ref$tmp + 4 >> 2] = $call$i1244;
       $__p$0$i$i1261 = $call$i$i$i1255;
      }
      __ZNSt3__211char_traitsIcE4copyEPcPKcj($__p$0$i$i1261, 15029, $call$i1244) | 0;
      HEAP8[$ref$tmp$i$i1631 >> 0] = 0;
      __ZNSt3__211char_traitsIcE6assignERcRKc($__p$0$i$i1261 + $call$i1244 | 0, $ref$tmp$i$i1631);
      $call598 = __ZN10__cxxabiv112_GLOBAL__N_123parse_binary_expressionINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($add$ptr, $last, $ref$tmp, $db) | 0;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($ref$tmp);
      $retval$14 = ($call598 | 0) == ($add$ptr | 0) ? $first : $call598;
      break L1;
      break;
     }
    case 114:
     {
      HEAP32[$ref$tmp >> 2] = 0;
      HEAP32[$ref$tmp + 4 >> 2] = 0;
      HEAP32[$ref$tmp + 8 >> 2] = 0;
      $call$i1266 = __ZNSt3__211char_traitsIcE6lengthEPKc(15032) | 0;
      if ($call$i1266 >>> 0 > 4294967279) __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($ref$tmp);
      if ($call$i1266 >>> 0 < 11) {
       HEAP8[$ref$tmp + 11 >> 0] = $call$i1266;
       $__p$0$i$i1283 = $ref$tmp;
      } else {
       $and$i$i$i$i1276 = $call$i1266 + 16 & -16;
       $call$i$i$i1277 = __ZN10__cxxabiv112_GLOBAL__N_112malloc_allocIcE8allocateEj($and$i$i$i$i1276) | 0;
       HEAP32[$ref$tmp >> 2] = $call$i$i$i1277;
       HEAP32[$ref$tmp + 8 >> 2] = $and$i$i$i$i1276 | -2147483648;
       HEAP32[$ref$tmp + 4 >> 2] = $call$i1266;
       $__p$0$i$i1283 = $call$i$i$i1277;
      }
      __ZNSt3__211char_traitsIcE4copyEPcPKcj($__p$0$i$i1283, 15032, $call$i1266) | 0;
      HEAP8[$ref$tmp$i$i1631 >> 0] = 0;
      __ZNSt3__211char_traitsIcE6assignERcRKc($__p$0$i$i1283 + $call$i1266 | 0, $ref$tmp$i$i1631);
      $call610 = __ZN10__cxxabiv112_GLOBAL__N_123parse_binary_expressionINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($add$ptr, $last, $ref$tmp, $db) | 0;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($ref$tmp);
      $retval$14 = ($call610 | 0) == ($add$ptr | 0) ? $first : $call610;
      break L1;
      break;
     }
    case 82:
     {
      HEAP32[$ref$tmp >> 2] = 0;
      HEAP32[$ref$tmp + 4 >> 2] = 0;
      HEAP32[$ref$tmp + 8 >> 2] = 0;
      $call$i1288 = __ZNSt3__211char_traitsIcE6lengthEPKc(15034) | 0;
      if ($call$i1288 >>> 0 > 4294967279) __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($ref$tmp);
      if ($call$i1288 >>> 0 < 11) {
       HEAP8[$ref$tmp + 11 >> 0] = $call$i1288;
       $__p$0$i$i1305 = $ref$tmp;
      } else {
       $and$i$i$i$i1298 = $call$i1288 + 16 & -16;
       $call$i$i$i1299 = __ZN10__cxxabiv112_GLOBAL__N_112malloc_allocIcE8allocateEj($and$i$i$i$i1298) | 0;
       HEAP32[$ref$tmp >> 2] = $call$i$i$i1299;
       HEAP32[$ref$tmp + 8 >> 2] = $and$i$i$i$i1298 | -2147483648;
       HEAP32[$ref$tmp + 4 >> 2] = $call$i1288;
       $__p$0$i$i1305 = $call$i$i$i1299;
      }
      __ZNSt3__211char_traitsIcE4copyEPcPKcj($__p$0$i$i1305, 15034, $call$i1288) | 0;
      HEAP8[$ref$tmp$i$i1631 >> 0] = 0;
      __ZNSt3__211char_traitsIcE6assignERcRKc($__p$0$i$i1305 + $call$i1288 | 0, $ref$tmp$i$i1631);
      $call622 = __ZN10__cxxabiv112_GLOBAL__N_123parse_binary_expressionINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($add$ptr, $last, $ref$tmp, $db) | 0;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($ref$tmp);
      $retval$14 = ($call622 | 0) == ($add$ptr | 0) ? $first : $call622;
      break L1;
      break;
     }
    default:
     {
      $retval$14 = $first;
      break L1;
     }
    }
    break;
   }
  case 112:
   {
    switch (HEAP8[$arrayidx17 >> 0] | 0) {
    case 109:
     {
      HEAP32[$ref$tmp >> 2] = 0;
      HEAP32[$ref$tmp + 4 >> 2] = 0;
      HEAP32[$ref$tmp + 8 >> 2] = 0;
      $call$i1310 = __ZNSt3__211char_traitsIcE6lengthEPKc(15037) | 0;
      if ($call$i1310 >>> 0 > 4294967279) __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($ref$tmp);
      if ($call$i1310 >>> 0 < 11) {
       HEAP8[$ref$tmp + 11 >> 0] = $call$i1310;
       $__p$0$i$i1327 = $ref$tmp;
      } else {
       $and$i$i$i$i1320 = $call$i1310 + 16 & -16;
       $call$i$i$i1321 = __ZN10__cxxabiv112_GLOBAL__N_112malloc_allocIcE8allocateEj($and$i$i$i$i1320) | 0;
       HEAP32[$ref$tmp >> 2] = $call$i$i$i1321;
       HEAP32[$ref$tmp + 8 >> 2] = $and$i$i$i$i1320 | -2147483648;
       HEAP32[$ref$tmp + 4 >> 2] = $call$i1310;
       $__p$0$i$i1327 = $call$i$i$i1321;
      }
      __ZNSt3__211char_traitsIcE4copyEPcPKcj($__p$0$i$i1327, 15037, $call$i1310) | 0;
      HEAP8[$ref$tmp$i$i1631 >> 0] = 0;
      __ZNSt3__211char_traitsIcE6assignERcRKc($__p$0$i$i1327 + $call$i1310 | 0, $ref$tmp$i$i1631);
      $call638 = __ZN10__cxxabiv112_GLOBAL__N_123parse_binary_expressionINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($add$ptr, $last, $ref$tmp, $db) | 0;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($ref$tmp);
      $retval$14 = ($call638 | 0) == ($add$ptr | 0) ? $first : $call638;
      break L1;
      break;
     }
    case 108:
     {
      HEAP32[$ref$tmp >> 2] = 0;
      HEAP32[$ref$tmp + 4 >> 2] = 0;
      HEAP32[$ref$tmp + 8 >> 2] = 0;
      $call$i1332 = __ZNSt3__211char_traitsIcE6lengthEPKc(15041) | 0;
      if ($call$i1332 >>> 0 > 4294967279) __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($ref$tmp);
      if ($call$i1332 >>> 0 < 11) {
       HEAP8[$ref$tmp + 11 >> 0] = $call$i1332;
       $__p$0$i$i1349 = $ref$tmp;
      } else {
       $and$i$i$i$i1342 = $call$i1332 + 16 & -16;
       $call$i$i$i1343 = __ZN10__cxxabiv112_GLOBAL__N_112malloc_allocIcE8allocateEj($and$i$i$i$i1342) | 0;
       HEAP32[$ref$tmp >> 2] = $call$i$i$i1343;
       HEAP32[$ref$tmp + 8 >> 2] = $and$i$i$i$i1342 | -2147483648;
       HEAP32[$ref$tmp + 4 >> 2] = $call$i1332;
       $__p$0$i$i1349 = $call$i$i$i1343;
      }
      __ZNSt3__211char_traitsIcE4copyEPcPKcj($__p$0$i$i1349, 15041, $call$i1332) | 0;
      HEAP8[$ref$tmp$i$i1631 >> 0] = 0;
      __ZNSt3__211char_traitsIcE6assignERcRKc($__p$0$i$i1349 + $call$i1332 | 0, $ref$tmp$i$i1631);
      $call650 = __ZN10__cxxabiv112_GLOBAL__N_123parse_binary_expressionINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($add$ptr, $last, $ref$tmp, $db) | 0;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($ref$tmp);
      $retval$14 = ($call650 | 0) == ($add$ptr | 0) ? $first : $call650;
      break L1;
      break;
     }
    case 76:
     {
      HEAP32[$ref$tmp >> 2] = 0;
      HEAP32[$ref$tmp + 4 >> 2] = 0;
      HEAP32[$ref$tmp + 8 >> 2] = 0;
      $call$i1354 = __ZNSt3__211char_traitsIcE6lengthEPKc(15043) | 0;
      if ($call$i1354 >>> 0 > 4294967279) __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($ref$tmp);
      if ($call$i1354 >>> 0 < 11) {
       HEAP8[$ref$tmp + 11 >> 0] = $call$i1354;
       $__p$0$i$i1371 = $ref$tmp;
      } else {
       $and$i$i$i$i1364 = $call$i1354 + 16 & -16;
       $call$i$i$i1365 = __ZN10__cxxabiv112_GLOBAL__N_112malloc_allocIcE8allocateEj($and$i$i$i$i1364) | 0;
       HEAP32[$ref$tmp >> 2] = $call$i$i$i1365;
       HEAP32[$ref$tmp + 8 >> 2] = $and$i$i$i$i1364 | -2147483648;
       HEAP32[$ref$tmp + 4 >> 2] = $call$i1354;
       $__p$0$i$i1371 = $call$i$i$i1365;
      }
      __ZNSt3__211char_traitsIcE4copyEPcPKcj($__p$0$i$i1371, 15043, $call$i1354) | 0;
      HEAP8[$ref$tmp$i$i1631 >> 0] = 0;
      __ZNSt3__211char_traitsIcE6assignERcRKc($__p$0$i$i1371 + $call$i1354 | 0, $ref$tmp$i$i1631);
      $call662 = __ZN10__cxxabiv112_GLOBAL__N_123parse_binary_expressionINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($add$ptr, $last, $ref$tmp, $db) | 0;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($ref$tmp);
      $retval$14 = ($call662 | 0) == ($add$ptr | 0) ? $first : $call662;
      break L1;
      break;
     }
    case 112:
     {
      if ($cmp479) if ((HEAP8[$add$ptr >> 0] | 0) == 95) {
       HEAP32[$ref$tmp >> 2] = 0;
       HEAP32[$ref$tmp + 4 >> 2] = 0;
       HEAP32[$ref$tmp + 8 >> 2] = 0;
       $call$i1376 = __ZNSt3__211char_traitsIcE6lengthEPKc(15046) | 0;
       if ($call$i1376 >>> 0 > 4294967279) __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($ref$tmp);
       if ($call$i1376 >>> 0 < 11) {
        HEAP8[$ref$tmp + 11 >> 0] = $call$i1376;
        $__p$0$i$i1393 = $ref$tmp;
       } else {
        $and$i$i$i$i1386 = $call$i1376 + 16 & -16;
        $call$i$i$i1387 = __ZN10__cxxabiv112_GLOBAL__N_112malloc_allocIcE8allocateEj($and$i$i$i$i1386) | 0;
        HEAP32[$ref$tmp >> 2] = $call$i$i$i1387;
        HEAP32[$ref$tmp + 8 >> 2] = $and$i$i$i$i1386 | -2147483648;
        HEAP32[$ref$tmp + 4 >> 2] = $call$i1376;
        $__p$0$i$i1393 = $call$i$i$i1387;
       }
       __ZNSt3__211char_traitsIcE4copyEPcPKcj($__p$0$i$i1393, 15046, $call$i1376) | 0;
       HEAP8[$ref$tmp$i$i1631 >> 0] = 0;
       __ZNSt3__211char_traitsIcE6assignERcRKc($__p$0$i$i1393 + $call$i1376 | 0, $ref$tmp$i$i1631);
       $call681 = __ZN10__cxxabiv112_GLOBAL__N_123parse_prefix_expressionINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($add$ptr485, $last, $ref$tmp, $db) | 0;
       __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($ref$tmp);
       $retval$14 = ($call681 | 0) == ($add$ptr485 | 0) ? $first : $call681;
       break L1;
      }
      $call691 = __ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($add$ptr, $last, $db) | 0;
      if (($call691 | 0) == ($add$ptr | 0)) {
       $retval$14 = $first;
       break L1;
      }
      $__end_$i1398 = $db + 4 | 0;
      $49 = HEAP32[$__end_$i1398 >> 2] | 0;
      if ((HEAP32[$db >> 2] | 0) == ($49 | 0)) {
       $retval$14 = $first;
       break L1;
      }
      __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($ref$tmp113, $49 + -24 | 0);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKc($ref$tmp113, 0, 14887) | 0;
      HEAP32[$ref$tmp >> 2] = HEAP32[$ref$tmp113 >> 2];
      HEAP32[$ref$tmp + 4 >> 2] = HEAP32[$ref$tmp113 + 4 >> 2];
      HEAP32[$ref$tmp + 8 >> 2] = HEAP32[$ref$tmp113 + 8 >> 2];
      $__i$0$i$i$i1404 = 0;
      while (1) {
       if (($__i$0$i$i$i1404 | 0) == 3) break;
       HEAP32[$ref$tmp113 + ($__i$0$i$i$i1404 << 2) >> 2] = 0;
       $__i$0$i$i$i1404 = $__i$0$i$i$i1404 + 1 | 0;
      }
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($ref$tmp, 15049) | 0;
      HEAP32[$agg$tmp700 >> 2] = HEAP32[$ref$tmp >> 2];
      HEAP32[$agg$tmp700 + 4 >> 2] = HEAP32[$ref$tmp + 4 >> 2];
      HEAP32[$agg$tmp700 + 8 >> 2] = HEAP32[$ref$tmp + 8 >> 2];
      $__i$0$i$i$i1414 = 0;
      while (1) {
       if (($__i$0$i$i$i1414 | 0) == 3) break;
       HEAP32[$ref$tmp + ($__i$0$i$i$i1414 << 2) >> 2] = 0;
       $__i$0$i$i$i1414 = $__i$0$i$i$i1414 + 1 | 0;
      }
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ENSt3__212basic_stringIcNS2_11char_traitsIcEENS0_12malloc_allocIcEEEE($ref$tmp$i$i1631, $agg$tmp700);
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairaSEOS1_((HEAP32[$__end_$i1398 >> 2] | 0) + -24 | 0, $ref$tmp$i$i1631);
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($ref$tmp$i$i1631);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($agg$tmp700);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($ref$tmp);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($ref$tmp113);
      $retval$14 = $call691;
      break L1;
      break;
     }
    case 115:
     {
      HEAP32[$ref$tmp >> 2] = 0;
      HEAP32[$ref$tmp + 4 >> 2] = 0;
      HEAP32[$ref$tmp + 8 >> 2] = 0;
      $call$i1425 = __ZNSt3__211char_traitsIcE6lengthEPKc(15041) | 0;
      if ($call$i1425 >>> 0 > 4294967279) __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($ref$tmp);
      if ($call$i1425 >>> 0 < 11) {
       HEAP8[$ref$tmp + 11 >> 0] = $call$i1425;
       $__p$0$i$i1442 = $ref$tmp;
      } else {
       $and$i$i$i$i1435 = $call$i1425 + 16 & -16;
       $call$i$i$i1436 = __ZN10__cxxabiv112_GLOBAL__N_112malloc_allocIcE8allocateEj($and$i$i$i$i1435) | 0;
       HEAP32[$ref$tmp >> 2] = $call$i$i$i1436;
       HEAP32[$ref$tmp + 8 >> 2] = $and$i$i$i$i1435 | -2147483648;
       HEAP32[$ref$tmp + 4 >> 2] = $call$i1425;
       $__p$0$i$i1442 = $call$i$i$i1436;
      }
      __ZNSt3__211char_traitsIcE4copyEPcPKcj($__p$0$i$i1442, 15041, $call$i1425) | 0;
      HEAP8[$ref$tmp$i$i1631 >> 0] = 0;
      __ZNSt3__211char_traitsIcE6assignERcRKc($__p$0$i$i1442 + $call$i1425 | 0, $ref$tmp$i$i1631);
      $call735 = __ZN10__cxxabiv112_GLOBAL__N_123parse_prefix_expressionINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($add$ptr, $last, $ref$tmp, $db) | 0;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($ref$tmp);
      $retval$14 = ($call735 | 0) == ($add$ptr | 0) ? $first : $call735;
      break L1;
      break;
     }
    case 116:
     {
      $retval$14 = __ZN10__cxxabiv112_GLOBAL__N_116parse_arrow_exprINS0_2DbEEEPKcS4_S4_RT_($first, $last, $db) | 0;
      break L1;
      break;
     }
    default:
     {
      $retval$14 = $first;
      break L1;
     }
    }
    break;
   }
  case 113:
   {
    if ((HEAP8[$arrayidx17 >> 0] | 0) != 117) {
     $retval$14 = $first;
     break L1;
    }
    $call752 = __ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($add$ptr, $last, $db) | 0;
    if (($call752 | 0) == ($add$ptr | 0)) {
     $retval$14 = $first;
     break L1;
    }
    $call757 = __ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($call752, $last, $db) | 0;
    if (($call757 | 0) == ($call752 | 0)) {
     $__end_$i1557 = $db + 4 | 0;
     $69 = HEAP32[$__end_$i1557 >> 2] | 0;
     $add$ptr$i1558 = $69 + -24 | 0;
     $70 = $69;
     while (1) {
      if (($70 | 0) == ($add$ptr$i1558 | 0)) {
       $retval$14 = $first;
       break L1;
      }
      $incdec$ptr$i$i$i1561 = $70 + -24 | 0;
      HEAP32[$__end_$i1557 >> 2] = $incdec$ptr$i$i$i1561;
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($incdec$ptr$i$i$i1561);
      $70 = HEAP32[$__end_$i1557 >> 2] | 0;
     }
    }
    $call760 = __ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($call757, $last, $db) | 0;
    $__end_$i1541 = $db + 4 | 0;
    if (($call760 | 0) == ($call757 | 0)) {
     $66 = HEAP32[$__end_$i1541 >> 2] | 0;
     $add$ptr$i1542 = $66 + -24 | 0;
     $67 = $66;
     while (1) {
      if (($67 | 0) == ($add$ptr$i1542 | 0)) break;
      $incdec$ptr$i$i$i1545 = $67 + -24 | 0;
      HEAP32[$__end_$i1541 >> 2] = $incdec$ptr$i$i$i1545;
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($incdec$ptr$i$i$i1545);
      $67 = HEAP32[$__end_$i1541 >> 2] | 0;
     }
     $add$ptr$i1550 = $66 + -48 | 0;
     $68 = $add$ptr$i1542;
     while (1) {
      if (($68 | 0) == ($add$ptr$i1550 | 0)) {
       $retval$14 = $first;
       break L1;
      }
      $incdec$ptr$i$i$i1553 = $68 + -24 | 0;
      HEAP32[$__end_$i1541 >> 2] = $incdec$ptr$i$i$i1553;
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($incdec$ptr$i$i$i1553);
      $68 = HEAP32[$__end_$i1541 >> 2] | 0;
     }
    }
    $52 = HEAP32[$__end_$i1541 >> 2] | 0;
    if ((($52 - (HEAP32[$db >> 2] | 0) | 0) / 24 | 0) >>> 0 < 3) {
     $retval$14 = $first;
     break L1;
    }
    __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($ref$tmp$i$i1631, $52 + -24 | 0);
    $55 = HEAP32[$__end_$i1541 >> 2] | 0;
    $add$ptr$i1452 = $55 + -24 | 0;
    $56 = $55;
    while (1) {
     if (($56 | 0) == ($add$ptr$i1452 | 0)) break;
     $incdec$ptr$i$i$i1455 = $56 + -24 | 0;
     HEAP32[$__end_$i1541 >> 2] = $incdec$ptr$i$i$i1455;
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($incdec$ptr$i$i$i1455);
     $56 = HEAP32[$__end_$i1541 >> 2] | 0;
    }
    __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($ref$tmp, $55 + -48 | 0);
    $57 = HEAP32[$__end_$i1541 >> 2] | 0;
    $add$ptr$i1462 = $57 + -24 | 0;
    $58 = $57;
    while (1) {
     if (($58 | 0) == ($add$ptr$i1462 | 0)) break;
     $incdec$ptr$i$i$i1465 = $58 + -24 | 0;
     HEAP32[$__end_$i1541 >> 2] = $incdec$ptr$i$i$i1465;
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($incdec$ptr$i$i$i1465);
     $58 = HEAP32[$__end_$i1541 >> 2] | 0;
    }
    __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($ref$tmp113, $57 + -48 | 0);
    __ZNSt3__2plIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEENS_12basic_stringIT_T0_T1_EEPKS8_RKSB_($ref$tmp792, 14887, $ref$tmp113);
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($ref$tmp792, 15053) | 0;
    HEAP32[$ref$tmp791 >> 2] = HEAP32[$ref$tmp792 >> 2];
    HEAP32[$ref$tmp791 + 4 >> 2] = HEAP32[$ref$tmp792 + 4 >> 2];
    HEAP32[$ref$tmp791 + 8 >> 2] = HEAP32[$ref$tmp792 + 8 >> 2];
    $__i$0$i$i$i1473 = 0;
    while (1) {
     if (($__i$0$i$i$i1473 | 0) == 3) break;
     HEAP32[$ref$tmp792 + ($__i$0$i$i$i1473 << 2) >> 2] = 0;
     $__i$0$i$i$i1473 = $__i$0$i$i$i1473 + 1 | 0;
    }
    $59 = HEAP8[$ref$tmp + 11 >> 0] | 0;
    $tobool$i$i$i$i$i1483 = $59 << 24 >> 24 < 0;
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($ref$tmp791, $tobool$i$i$i$i$i1483 ? HEAP32[$ref$tmp >> 2] | 0 : $ref$tmp, $tobool$i$i$i$i$i1483 ? HEAP32[$ref$tmp + 4 >> 2] | 0 : $59 & 255) | 0;
    HEAP32[$ref$tmp790 >> 2] = HEAP32[$ref$tmp791 >> 2];
    HEAP32[$ref$tmp790 + 4 >> 2] = HEAP32[$ref$tmp791 + 4 >> 2];
    HEAP32[$ref$tmp790 + 8 >> 2] = HEAP32[$ref$tmp791 + 8 >> 2];
    $__i$0$i$i$i1491 = 0;
    while (1) {
     if (($__i$0$i$i$i1491 | 0) == 3) break;
     HEAP32[$ref$tmp791 + ($__i$0$i$i$i1491 << 2) >> 2] = 0;
     $__i$0$i$i$i1491 = $__i$0$i$i$i1491 + 1 | 0;
    }
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($ref$tmp790, 15059) | 0;
    HEAP32[$ref$tmp332 >> 2] = HEAP32[$ref$tmp790 >> 2];
    HEAP32[$ref$tmp332 + 4 >> 2] = HEAP32[$ref$tmp790 + 4 >> 2];
    HEAP32[$ref$tmp332 + 8 >> 2] = HEAP32[$ref$tmp790 + 8 >> 2];
    $__i$0$i$i$i1502 = 0;
    while (1) {
     if (($__i$0$i$i$i1502 | 0) == 3) break;
     HEAP32[$ref$tmp790 + ($__i$0$i$i$i1502 << 2) >> 2] = 0;
     $__i$0$i$i$i1502 = $__i$0$i$i$i1502 + 1 | 0;
    }
    $62 = HEAP8[$ref$tmp$i$i1631 + 11 >> 0] | 0;
    $tobool$i$i$i$i$i1512 = $62 << 24 >> 24 < 0;
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($ref$tmp332, $tobool$i$i$i$i$i1512 ? HEAP32[$ref$tmp$i$i1631 >> 2] | 0 : $ref$tmp$i$i1631, $tobool$i$i$i$i$i1512 ? HEAP32[$ref$tmp$i$i1631 + 4 >> 2] | 0 : $62 & 255) | 0;
    HEAP32[$ref$tmp117 >> 2] = HEAP32[$ref$tmp332 >> 2];
    HEAP32[$ref$tmp117 + 4 >> 2] = HEAP32[$ref$tmp332 + 4 >> 2];
    HEAP32[$ref$tmp117 + 8 >> 2] = HEAP32[$ref$tmp332 + 8 >> 2];
    $__i$0$i$i$i1520 = 0;
    while (1) {
     if (($__i$0$i$i$i1520 | 0) == 3) break;
     HEAP32[$ref$tmp332 + ($__i$0$i$i$i1520 << 2) >> 2] = 0;
     $__i$0$i$i$i1520 = $__i$0$i$i$i1520 + 1 | 0;
    }
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($ref$tmp117, 14885) | 0;
    HEAP32[$agg$tmp787 >> 2] = HEAP32[$ref$tmp117 >> 2];
    HEAP32[$agg$tmp787 + 4 >> 2] = HEAP32[$ref$tmp117 + 4 >> 2];
    HEAP32[$agg$tmp787 + 8 >> 2] = HEAP32[$ref$tmp117 + 8 >> 2];
    $__i$0$i$i$i1531 = 0;
    while (1) {
     if (($__i$0$i$i$i1531 | 0) == 3) break;
     HEAP32[$ref$tmp117 + ($__i$0$i$i$i1531 << 2) >> 2] = 0;
     $__i$0$i$i$i1531 = $__i$0$i$i$i1531 + 1 | 0;
    }
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ENSt3__212basic_stringIcNS2_11char_traitsIcEENS0_12malloc_allocIcEEEE($ref$tmp114, $agg$tmp787);
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairaSEOS1_((HEAP32[$__end_$i1541 >> 2] | 0) + -24 | 0, $ref$tmp114);
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($ref$tmp114);
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($agg$tmp787);
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($ref$tmp117);
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($ref$tmp332);
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($ref$tmp790);
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($ref$tmp791);
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($ref$tmp792);
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($ref$tmp113);
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($ref$tmp);
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($ref$tmp$i$i1631);
    $retval$14 = $call760;
    break L1;
    break;
   }
  case 114:
   {
    switch (HEAP8[$arrayidx17 >> 0] | 0) {
    case 99:
     {
      $retval$14 = __ZN10__cxxabiv112_GLOBAL__N_127parse_reinterpret_cast_exprINS0_2DbEEEPKcS4_S4_RT_($first, $last, $db) | 0;
      break L1;
      break;
     }
    case 109:
     {
      HEAP32[$ref$tmp >> 2] = 0;
      HEAP32[$ref$tmp + 4 >> 2] = 0;
      HEAP32[$ref$tmp + 8 >> 2] = 0;
      $call$i1566 = __ZNSt3__211char_traitsIcE6lengthEPKc(15065) | 0;
      if ($call$i1566 >>> 0 > 4294967279) __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($ref$tmp);
      if ($call$i1566 >>> 0 < 11) {
       HEAP8[$ref$tmp + 11 >> 0] = $call$i1566;
       $__p$0$i$i1583 = $ref$tmp;
      } else {
       $and$i$i$i$i1576 = $call$i1566 + 16 & -16;
       $call$i$i$i1577 = __ZN10__cxxabiv112_GLOBAL__N_112malloc_allocIcE8allocateEj($and$i$i$i$i1576) | 0;
       HEAP32[$ref$tmp >> 2] = $call$i$i$i1577;
       HEAP32[$ref$tmp + 8 >> 2] = $and$i$i$i$i1576 | -2147483648;
       HEAP32[$ref$tmp + 4 >> 2] = $call$i1566;
       $__p$0$i$i1583 = $call$i$i$i1577;
      }
      __ZNSt3__211char_traitsIcE4copyEPcPKcj($__p$0$i$i1583, 15065, $call$i1566) | 0;
      HEAP8[$ref$tmp$i$i1631 >> 0] = 0;
      __ZNSt3__211char_traitsIcE6assignERcRKc($__p$0$i$i1583 + $call$i1566 | 0, $ref$tmp$i$i1631);
      $call863 = __ZN10__cxxabiv112_GLOBAL__N_123parse_binary_expressionINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($add$ptr, $last, $ref$tmp, $db) | 0;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($ref$tmp);
      $retval$14 = ($call863 | 0) == ($add$ptr | 0) ? $first : $call863;
      break L1;
      break;
     }
    case 77:
     {
      HEAP32[$ref$tmp >> 2] = 0;
      HEAP32[$ref$tmp + 4 >> 2] = 0;
      HEAP32[$ref$tmp + 8 >> 2] = 0;
      $call$i1588 = __ZNSt3__211char_traitsIcE6lengthEPKc(15067) | 0;
      if ($call$i1588 >>> 0 > 4294967279) __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($ref$tmp);
      if ($call$i1588 >>> 0 < 11) {
       HEAP8[$ref$tmp + 11 >> 0] = $call$i1588;
       $__p$0$i$i1605 = $ref$tmp;
      } else {
       $and$i$i$i$i1598 = $call$i1588 + 16 & -16;
       $call$i$i$i1599 = __ZN10__cxxabiv112_GLOBAL__N_112malloc_allocIcE8allocateEj($and$i$i$i$i1598) | 0;
       HEAP32[$ref$tmp >> 2] = $call$i$i$i1599;
       HEAP32[$ref$tmp + 8 >> 2] = $and$i$i$i$i1598 | -2147483648;
       HEAP32[$ref$tmp + 4 >> 2] = $call$i1588;
       $__p$0$i$i1605 = $call$i$i$i1599;
      }
      __ZNSt3__211char_traitsIcE4copyEPcPKcj($__p$0$i$i1605, 15067, $call$i1588) | 0;
      HEAP8[$ref$tmp$i$i1631 >> 0] = 0;
      __ZNSt3__211char_traitsIcE6assignERcRKc($__p$0$i$i1605 + $call$i1588 | 0, $ref$tmp$i$i1631);
      $call875 = __ZN10__cxxabiv112_GLOBAL__N_123parse_binary_expressionINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($add$ptr, $last, $ref$tmp, $db) | 0;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($ref$tmp);
      $retval$14 = ($call875 | 0) == ($add$ptr | 0) ? $first : $call875;
      break L1;
      break;
     }
    case 115:
     {
      HEAP32[$ref$tmp >> 2] = 0;
      HEAP32[$ref$tmp + 4 >> 2] = 0;
      HEAP32[$ref$tmp + 8 >> 2] = 0;
      $call$i1610 = __ZNSt3__211char_traitsIcE6lengthEPKc(15070) | 0;
      if ($call$i1610 >>> 0 > 4294967279) __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($ref$tmp);
      if ($call$i1610 >>> 0 < 11) {
       HEAP8[$ref$tmp + 11 >> 0] = $call$i1610;
       $__p$0$i$i1627 = $ref$tmp;
      } else {
       $and$i$i$i$i1620 = $call$i1610 + 16 & -16;
       $call$i$i$i1621 = __ZN10__cxxabiv112_GLOBAL__N_112malloc_allocIcE8allocateEj($and$i$i$i$i1620) | 0;
       HEAP32[$ref$tmp >> 2] = $call$i$i$i1621;
       HEAP32[$ref$tmp + 8 >> 2] = $and$i$i$i$i1620 | -2147483648;
       HEAP32[$ref$tmp + 4 >> 2] = $call$i1610;
       $__p$0$i$i1627 = $call$i$i$i1621;
      }
      __ZNSt3__211char_traitsIcE4copyEPcPKcj($__p$0$i$i1627, 15070, $call$i1610) | 0;
      HEAP8[$ref$tmp$i$i1631 >> 0] = 0;
      __ZNSt3__211char_traitsIcE6assignERcRKc($__p$0$i$i1627 + $call$i1610 | 0, $ref$tmp$i$i1631);
      $call887 = __ZN10__cxxabiv112_GLOBAL__N_123parse_binary_expressionINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($add$ptr, $last, $ref$tmp, $db) | 0;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($ref$tmp);
      $retval$14 = ($call887 | 0) == ($add$ptr | 0) ? $first : $call887;
      break L1;
      break;
     }
    case 83:
     {
      HEAP32[$ref$tmp >> 2] = 0;
      HEAP32[$ref$tmp + 4 >> 2] = 0;
      HEAP32[$ref$tmp + 8 >> 2] = 0;
      $call$i1632 = __ZNSt3__211char_traitsIcE6lengthEPKc(15073) | 0;
      if ($call$i1632 >>> 0 > 4294967279) __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($ref$tmp);
      if ($call$i1632 >>> 0 < 11) {
       HEAP8[$ref$tmp + 11 >> 0] = $call$i1632;
       $__p$0$i$i1649 = $ref$tmp;
      } else {
       $and$i$i$i$i1642 = $call$i1632 + 16 & -16;
       $call$i$i$i1643 = __ZN10__cxxabiv112_GLOBAL__N_112malloc_allocIcE8allocateEj($and$i$i$i$i1642) | 0;
       HEAP32[$ref$tmp >> 2] = $call$i$i$i1643;
       HEAP32[$ref$tmp + 8 >> 2] = $and$i$i$i$i1642 | -2147483648;
       HEAP32[$ref$tmp + 4 >> 2] = $call$i1632;
       $__p$0$i$i1649 = $call$i$i$i1643;
      }
      __ZNSt3__211char_traitsIcE4copyEPcPKcj($__p$0$i$i1649, 15073, $call$i1632) | 0;
      HEAP8[$ref$tmp$i$i1631 >> 0] = 0;
      __ZNSt3__211char_traitsIcE6assignERcRKc($__p$0$i$i1649 + $call$i1632 | 0, $ref$tmp$i$i1631);
      $call899 = __ZN10__cxxabiv112_GLOBAL__N_123parse_binary_expressionINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($add$ptr, $last, $ref$tmp, $db) | 0;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($ref$tmp);
      $retval$14 = ($call899 | 0) == ($add$ptr | 0) ? $first : $call899;
      break L1;
      break;
     }
    default:
     {
      $retval$14 = $first;
      break L1;
     }
    }
    break;
   }
  case 115:
   {
    switch (HEAP8[$arrayidx17 >> 0] | 0) {
    case 99:
     {
      $retval$14 = __ZN10__cxxabiv112_GLOBAL__N_122parse_static_cast_exprINS0_2DbEEEPKcS4_S4_RT_($first, $last, $db) | 0;
      break L1;
      break;
     }
    case 112:
     {
      $retval$14 = __ZN10__cxxabiv112_GLOBAL__N_120parse_pack_expansionINS0_2DbEEEPKcS4_S4_RT_($first, $last, $db) | 0;
      break L1;
      break;
     }
    case 114:
     {
      $retval$14 = __ZN10__cxxabiv112_GLOBAL__N_121parse_unresolved_nameINS0_2DbEEEPKcS4_S4_RT_($first, $last, $db) | 0;
      break L1;
      break;
     }
    case 116:
     {
      $retval$14 = __ZN10__cxxabiv112_GLOBAL__N_122parse_sizeof_type_exprINS0_2DbEEEPKcS4_S4_RT_($first, $last, $db) | 0;
      break L1;
      break;
     }
    case 122:
     {
      $retval$14 = __ZN10__cxxabiv112_GLOBAL__N_122parse_sizeof_expr_exprINS0_2DbEEEPKcS4_S4_RT_($first, $last, $db) | 0;
      break L1;
      break;
     }
    case 90:
     {
      if (($sub$ptr$lhs$cast - $t$0 | 0) <= 2) {
       $retval$14 = $first;
       break L1;
      }
      switch (HEAP8[$add$ptr104 >> 0] | 0) {
      case 84:
       {
        $retval$14 = __ZN10__cxxabiv112_GLOBAL__N_128parse_sizeof_param_pack_exprINS0_2DbEEEPKcS4_S4_RT_($first, $last, $db) | 0;
        break L1;
        break;
       }
      case 102:
       {
        $retval$14 = __ZN10__cxxabiv112_GLOBAL__N_137parse_sizeof_function_param_pack_exprINS0_2DbEEEPKcS4_S4_RT_($first, $last, $db) | 0;
        break L1;
        break;
       }
      default:
       {
        $retval$14 = $first;
        break L1;
       }
      }
      break;
     }
    default:
     {
      $retval$14 = $first;
      break L1;
     }
    }
    break;
   }
  case 116:
   {
    switch (HEAP8[$arrayidx17 >> 0] | 0) {
    case 105:
    case 101:
     {
      $retval$14 = __ZN10__cxxabiv112_GLOBAL__N_117parse_typeid_exprINS0_2DbEEEPKcS4_S4_RT_($first, $last, $db) | 0;
      break L1;
      break;
     }
    case 114:
     {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj6EEERAT__Kc($ref$tmp$i$i1631, 15077);
      $__end_$i1653 = $db + 4 | 0;
      $75 = HEAP32[$__end_$i1653 >> 2] | 0;
      if ($75 >>> 0 < (HEAP32[$db + 8 >> 2] | 0) >>> 0) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($75, $ref$tmp$i$i1631);
       HEAP32[$__end_$i1653 >> 2] = (HEAP32[$__end_$i1653 >> 2] | 0) + 24;
      } else __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIS3_EEvOT_($db, $ref$tmp$i$i1631);
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($ref$tmp$i$i1631);
      $retval$14 = $add$ptr;
      break L1;
      break;
     }
    case 119:
     {
      $retval$14 = __ZN10__cxxabiv112_GLOBAL__N_116parse_throw_exprINS0_2DbEEEPKcS4_S4_RT_($first, $last, $db) | 0;
      break L1;
      break;
     }
    default:
     {
      $retval$14 = $first;
      break L1;
     }
    }
    break;
   }
  case 57:
  case 56:
  case 55:
  case 54:
  case 53:
  case 52:
  case 51:
  case 50:
  case 49:
   {
    $retval$14 = __ZN10__cxxabiv112_GLOBAL__N_121parse_unresolved_nameINS0_2DbEEEPKcS4_S4_RT_($first, $last, $db) | 0;
    break L1;
    break;
   }
  default:
   {
    $retval$14 = $first;
    break L1;
   }
  } while (0);
 } else $retval$14 = $first; while (0);
 STACKTOP = sp;
 return $retval$14 | 0;
}

function __ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($first, $last, $db) {
 $first = $first | 0;
 $last = $last | 0;
 $db = $db | 0;
 var $$ph = 0, $10 = 0, $105 = 0, $109 = 0, $111 = 0, $12 = 0, $120 = 0, $123 = 0, $125 = 0, $13 = 0, $132 = 0, $136 = 0, $138 = 0, $14 = 0, $145 = 0, $147 = 0, $154 = 0, $158 = 0, $160 = 0, $164 = 0, $165 = 0, $166 = 0, $170 = 0, $172 = 0, $177 = 0, $180 = 0, $181 = 0, $182 = 0, $185 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $198 = 0, $202 = 0, $205 = 0, $209 = 0, $211 = 0, $218 = 0, $219 = 0, $221 = 0, $226 = 0, $229 = 0, $230 = 0, $231 = 0, $235 = 0, $237 = 0, $247 = 0, $250 = 0, $252 = 0, $256 = 0, $257 = 0, $259 = 0, $26 = 0, $265 = 0, $266 = 0, $268 = 0, $274 = 0, $275 = 0, $277 = 0, $28 = 0, $33 = 0, $34 = 0, $36 = 0, $42 = 0, $44 = 0, $46 = 0, $52 = 0, $53 = 0, $55 = 0, $6 = 0, $61 = 0, $63 = 0, $65 = 0, $7 = 0, $71 = 0, $72 = 0, $74 = 0, $83 = 0, $87 = 0, $89 = 0, $9 = 0, $96 = 0, $98 = 0, $__end_$i = 0, $__end_$i$i$i$i = 0, $__end_$i$i$i$i$i = 0, $__end_$i$i$i$i$i380 = 0, $__end_$i$i$i$i$i404 = 0, $__end_$i$i$i$i$i453 = 0, $__end_$i$i$i$i$i546 = 0, $__end_$i$i$i$i$i570 = 0, $__end_$i$i$i$i$i596 = 0, $__end_$i$i$i$i$i622 = 0, $__end_$i$i$i$i$i650 = 0, $__end_$i$i$i$i$i677 = 0, $__end_$i$i$i$i$i958 = 0, $__end_$i$i$i$i$i976 = 0, $__end_$i$i$i$i384 = 0, $__end_$i$i$i$i408 = 0, $__end_$i$i$i$i457 = 0, $__end_$i$i$i$i550 = 0, $__end_$i$i$i$i574 = 0, $__end_$i$i$i$i600 = 0, $__end_$i$i$i$i626 = 0, $__end_$i$i$i$i654 = 0, $__end_$i$i$i$i681 = 0, $__end_$i$i$i$i962 = 0, $__end_$i$i$i$i980 = 0, $__end_$i375 = 0, $__end_$i399 = 0, $__end_$i423 = 0, $__end_$i432 = 0, $__end_$i445 = 0, $__end_$i448 = 0, $__end_$i476 = 0, $__end_$i479 = 0, $__end_$i485 = 0, $__end_$i534 = 0, $__end_$i541 = 0, $__end_$i565 = 0, $__end_$i583 = 0, $__end_$i591 = 0, $__end_$i617 = 0, $__end_$i637 = 0, $__end_$i645 = 0, $__end_$i672 = 0, $__end_$i689 = 0, $__end_$i697 = 0, $__end_$i741 = 0, $__end_$i749 = 0, $__end_$i757 = 0, $__end_$i816 = 0, $__end_$i824 = 0, $__end_$i832 = 0, $__end_$i886 = 0, $__end_$i894 = 0, $__end_$i902 = 0, $__end_$i918 = 0, $__end_$i971 = 0, $__end_$i989 = 0, $__first_$i$i$i$i903 = 0, $__first_$i$i$i8$i$i$i$i = 0, $__first_$i$i$i8$i$i$i$i385 = 0, $__first_$i$i$i8$i$i$i$i409 = 0, $__first_$i$i$i8$i$i$i$i458 = 0, $__first_$i$i$i8$i$i$i$i551 = 0, $__first_$i$i$i8$i$i$i$i575 = 0, $__first_$i$i$i8$i$i$i$i601 = 0, $__first_$i$i$i8$i$i$i$i627 = 0, $__first_$i$i$i8$i$i$i$i655 = 0, $__first_$i$i$i8$i$i$i$i682 = 0, $__first_$i$i$i8$i$i$i$i963 = 0, $__first_$i$i$i8$i$i$i$i981 = 0, $__i$0$i$i$i = 0, $__i$0$i$i$i1092 = 0, $__i$0$i$i$i1103 = 0, $__i$0$i$i$i1122 = 0, $__size_$i$i$i$i = 0, $__size_$i$i$i1046 = 0, $__size_$i$i$i711 = 0, $__size_$i$i$i773 = 0, $__size_$i$i$i848 = 0, $__size_$i3$i$i$i807 = 0, $__size_$i3$i$i713 = 0, $__size_$i3$i$i775 = 0, $__size_$i3$i$i850 = 0, $add$ptr = 0, $add$ptr$i1038 = 0, $add$ptr$i1139 = 0, $add$ptr$i468 = 0, $add$ptr$i473 = 0, $add$ptr$i486 = 0, $add$ptr$i588 = 0, $add$ptr$i642 = 0, $add$ptr$i929 = 0, $add$ptr$i950 = 0, $add$ptr$i995 = 0, $add$ptr731 = 0, $agg$tmp = 0, $agg$tmp570 = 0, $agg$tmp605 = 0, $arrayidx$i = 0, $arrayidx$i533 = 0, $arrayidx$i740 = 0, $arrayidx$i815 = 0, $arrayidx$i885 = 0, $arrayidx$i917 = 0, $call = 0, $call$i = 0, $call$i$i = 0, $call$i$i1005 = 0, $call$i771 = 0, $call$i846 = 0, $call102 = 0, $call119 = 0, $call143 = 0, $call163 = 0, $call187 = 0, $call210 = 0, $call276 = 0, $call360 = 0, $call425 = 0, $call453 = 0, $call496 = 0, $call500 = 0, $call564 = 0, $call6 = 0, $call655 = 0, $call677 = 0, $call680 = 0, $call732 = 0, $call762 = 0, $call784 = 0, $call807 = 0, $call811 = 0, $call96 = 0, $cmp4 = 0, $cmp493 = 0, $cond$i$i = 0, $cond$i$i729 = 0, $cond$i$i798 = 0, $cond$i$i873 = 0, $cond$i6$i = 0, $cond$i7$i = 0, $cv = 0, $first$addr$1 = 0, $first339 = 0, $first3391144 = 0, $incdec$ptr$i$i$i = 0, $incdec$ptr$i$i$i1041 = 0, $incdec$ptr$i$i$i489 = 0, $incdec$ptr$i$i$i932 = 0, $incdec$ptr$i$i$i998 = 0, $k$0 = 0, $k222$0 = 0, $k288$0 = 0, $k372$0 = 0, $k436$0 = 0, $k744$0 = 0, $p$0 = 0, $p$1 = 0, $p$2 = 0, $phitmp$i1015 = 0, $ref$tmp = 0, $ref$tmp474 = 0, $ref$tmp527 = 0, $ref$tmp572 = 0, $ref$tmp575 = 0, $retval$0$i = 0, $retval$0$i784 = 0, $retval$0$i859 = 0, $retval$5 = 0, $retval$sroa$0$0$$sroa_idx$i900 = 0, $retval$sroa$0$0$copyload$i4431162 = 0, $retval$sroa$0$0$copyload$i6961170 = 0, $retval$sroa$0$0$copyload$i7561169 = 0, $retval$sroa$0$0$copyload$i8311168 = 0, $retval$sroa$0$0$copyload$i9011166 = 0, $second = 0, $second244 = 0, $second310 = 0, $second394 = 0, $sub$ptr$div$i = 0, $sub$ptr$div$i447 = 0, $sub$ptr$div$i481 = 0, $sub$ptr$div$i484 = 0, $sub$ptr$div$i691 = 0, $sub$ptr$div$i694 = 0, $sub$ptr$div$i751 = 0, $sub$ptr$div$i754 = 0, $sub$ptr$div$i826 = 0, $sub$ptr$div$i829 = 0, $sub$ptr$div$i896 = 0, $sub$ptr$div$i899 = 0, $sub1185 = 0, $sub1185$in = 0, $subs818 = 0, $tobool$i$i = 0, $tobool$i$i$i$i$i = 0, $tobool$i$i$i$i$i1024 = 0, $tobool$i$i$i$i$i1084 = 0, $tobool$i$i$i$i$i1114 = 0, $tobool$i$i$i$i$i940 = 0, $tobool$i$i$i1047 = 0, $tobool39 = 0, $tobool47 = 0, $tobool56 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(144);
 $cv = sp + 128 | 0;
 $ref$tmp = sp + 104 | 0;
 $ref$tmp474 = sp + 40 | 0;
 $agg$tmp = sp + 88 | 0;
 $ref$tmp527 = sp + 24 | 0;
 $agg$tmp570 = sp + 76 | 0;
 $ref$tmp572 = sp + 12 | 0;
 $ref$tmp575 = sp;
 $agg$tmp605 = sp + 64 | 0;
 L1 : do if (($first | 0) == ($last | 0)) $retval$5 = $first; else {
  $subs818 = $db + 16 | 0;
  switch (HEAP8[$first >> 0] | 0) {
  case 75:
  case 86:
  case 114:
   {
    HEAP32[$cv >> 2] = 0;
    $call = __ZN10__cxxabiv112_GLOBAL__N_119parse_cv_qualifiersEPKcS2_Rj($first, $last, $cv) | 0;
    L5 : do if (($call | 0) == ($first | 0)) $first$addr$1 = $first; else {
     $cmp4 = (HEAP8[$call >> 0] | 0) == 70;
     $__end_$i479 = $db + 4 | 0;
     $sub$ptr$div$i481 = ((HEAP32[$__end_$i479 >> 2] | 0) - (HEAP32[$db >> 2] | 0) | 0) / 24 | 0;
     $call6 = __ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($call, $last, $db) | 0;
     $sub$ptr$div$i484 = ((HEAP32[$__end_$i479 >> 2] | 0) - (HEAP32[$db >> 2] | 0) | 0) / 24 | 0;
     if (($call6 | 0) == ($call | 0)) $first$addr$1 = $first; else {
      $__end_$i485 = $db + 20 | 0;
      $6 = HEAP32[$__end_$i485 >> 2] | 0;
      L8 : do if ($cmp4) {
       $add$ptr$i486 = $6 + -16 | 0;
       $7 = $6;
       while (1) {
        if (($7 | 0) == ($add$ptr$i486 | 0)) {
         $9 = $add$ptr$i486;
         break L8;
        }
        $incdec$ptr$i$i$i489 = $7 + -16 | 0;
        HEAP32[$__end_$i485 >> 2] = $incdec$ptr$i$i$i489;
        __ZNSt3__213__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEED2Ev($incdec$ptr$i$i$i489);
        $7 = HEAP32[$__end_$i485 >> 2] | 0;
       }
      } else $9 = $6; while (0);
      HEAP32[$ref$tmp >> 2] = HEAP32[$db + 12 >> 2];
      if ($9 >>> 0 < (HEAP32[$db + 24 >> 2] | 0) >>> 0) {
       HEAP32[$9 >> 2] = 0;
       HEAP32[$9 + 4 >> 2] = 0;
       $10 = HEAP32[$ref$tmp >> 2] | 0;
       HEAP32[$9 + 8 >> 2] = 0;
       HEAP32[$9 + 12 >> 2] = $10;
       HEAP32[$__end_$i485 >> 2] = (HEAP32[$__end_$i485 >> 2] | 0) + 16;
      } else __ZNSt3__26vectorINS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEENS4_IS6_Lj4096EEEE24__emplace_back_slow_pathIJS5_EEEvDpOT_($subs818, $ref$tmp);
      $12 = HEAP32[$cv >> 2] | 0;
      $tobool39 = ($12 & 1 | 0) == 0;
      $tobool47 = ($12 & 2 | 0) == 0;
      $tobool56 = ($12 & 4 | 0) == 0;
      $k$0 = $sub$ptr$div$i481;
      while (1) {
       if ($k$0 >>> 0 >= $sub$ptr$div$i484 >>> 0) {
        $first$addr$1 = $call6;
        break L5;
       }
       if ($cmp4) {
        $13 = HEAP32[$db >> 2] | 0;
        $second = $13 + ($k$0 * 24 | 0) + 12 | 0;
        $14 = HEAP8[$second + 11 >> 0] | 0;
        $tobool$i$i = $14 << 24 >> 24 < 0;
        if ($tobool$i$i) {
         $cond$i$i = HEAP32[$second >> 2] | 0;
         $sub1185$in = HEAP32[$13 + ($k$0 * 24 | 0) + 16 >> 2] | 0;
        } else {
         $cond$i$i = $second;
         $sub1185$in = $14 & 255;
        }
        $sub1185 = $sub1185$in + -2 | 0;
        if ((HEAP8[$cond$i$i + $sub1185 >> 0] | 0) == 38) $p$0 = $sub1185$in + -3 | 0; else {
         if ($tobool$i$i) {
          $cond$i6$i = HEAP32[$13 + ($k$0 * 24 | 0) + 16 >> 2] | 0;
          $cond$i7$i = HEAP32[$second >> 2] | 0;
         } else {
          $cond$i6$i = $14 & 255;
          $cond$i7$i = $second;
         }
         $p$0 = (HEAP8[$cond$i7$i + $cond$i6$i + -1 >> 0] | 0) == 38 ? $sub1185 : $sub1185$in;
        }
        if ($tobool39) $p$1 = $p$0; else {
         __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKc($second, $p$0, 14832) | 0;
         $p$1 = $p$0 + 6 | 0;
        }
        if ($tobool47) $p$2 = $p$1; else {
         __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKc((HEAP32[$db >> 2] | 0) + ($k$0 * 24 | 0) + 12 | 0, $p$1, 14839) | 0;
         $p$2 = $p$1 + 9 | 0;
        }
        if (!$tobool56) __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKc((HEAP32[$db >> 2] | 0) + ($k$0 * 24 | 0) + 12 | 0, $p$2, 14849) | 0;
       } else {
        if (!$tobool39) __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc((HEAP32[$db >> 2] | 0) + ($k$0 * 24 | 0) | 0, 14832) | 0;
        if (!$tobool47) __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc((HEAP32[$db >> 2] | 0) + ($k$0 * 24 | 0) | 0, 14839) | 0;
        if (!$tobool56) __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc((HEAP32[$db >> 2] | 0) + ($k$0 * 24 | 0) | 0, 14849) | 0;
       }
       $26 = HEAP32[$__end_$i485 >> 2] | 0;
       $arrayidx$i533 = (HEAP32[$db >> 2] | 0) + ($k$0 * 24 | 0) | 0;
       $__end_$i534 = $26 + -12 | 0;
       $28 = HEAP32[$__end_$i534 >> 2] | 0;
       if (($28 | 0) == (HEAP32[$26 + -8 >> 2] | 0)) __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIRKS3_EEvOT_($26 + -16 | 0, $arrayidx$i533); else {
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ERKS1_($28, $arrayidx$i533);
        HEAP32[$__end_$i534 >> 2] = (HEAP32[$__end_$i534 >> 2] | 0) + 24;
       }
       $k$0 = $k$0 + 1 | 0;
      }
     }
    } while (0);
    $retval$5 = $first$addr$1;
    break L1;
    break;
   }
  default:
   {}
  }
  $call96 = __ZN10__cxxabiv112_GLOBAL__N_118parse_builtin_typeINS0_2DbEEEPKcS4_S4_RT_($first, $last, $db) | 0;
  if (($call96 | 0) == ($first | 0)) {
   $add$ptr = $first + 1 | 0;
   $cmp493 = ($add$ptr | 0) != ($last | 0);
   L58 : do switch (HEAP8[$first >> 0] | 0) {
   case 65:
    {
     $call102 = __ZN10__cxxabiv112_GLOBAL__N_116parse_array_typeINS0_2DbEEEPKcS4_S4_RT_($first, $last, $db) | 0;
     if (($call102 | 0) == ($first | 0)) {
      $retval$5 = $first;
      break L1;
     }
     $33 = HEAP32[$db + 4 >> 2] | 0;
     if ((HEAP32[$db >> 2] | 0) == ($33 | 0)) {
      $retval$5 = $first;
      break L1;
     }
     HEAP32[$ref$tmp >> 2] = HEAP32[$db + 12 >> 2];
     __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEC2EjRKS3_RKS5_($cv, $33 + -24 | 0, $ref$tmp);
     $__end_$i565 = $db + 20 | 0;
     $34 = HEAP32[$__end_$i565 >> 2] | 0;
     if ($34 >>> 0 < (HEAP32[$db + 24 >> 2] | 0) >>> 0) {
      HEAP32[$34 >> 2] = 0;
      $__end_$i$i$i$i$i570 = $34 + 4 | 0;
      HEAP32[$__end_$i$i$i$i$i570 >> 2] = 0;
      $36 = HEAP32[$cv + 12 >> 2] | 0;
      HEAP32[$34 + 8 >> 2] = 0;
      HEAP32[$34 + 12 >> 2] = $36;
      HEAP32[$34 >> 2] = HEAP32[$cv >> 2];
      $__end_$i$i$i$i574 = $cv + 4 | 0;
      HEAP32[$__end_$i$i$i$i$i570 >> 2] = HEAP32[$__end_$i$i$i$i574 >> 2];
      $__first_$i$i$i8$i$i$i$i575 = $cv + 8 | 0;
      HEAP32[$34 + 8 >> 2] = HEAP32[$__first_$i$i$i8$i$i$i$i575 >> 2];
      HEAP32[$__first_$i$i$i8$i$i$i$i575 >> 2] = 0;
      HEAP32[$__end_$i$i$i$i574 >> 2] = 0;
      HEAP32[$cv >> 2] = 0;
      HEAP32[$__end_$i565 >> 2] = (HEAP32[$__end_$i565 >> 2] | 0) + 16;
     } else __ZNSt3__26vectorINS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEENS4_IS6_Lj4096EEEE21__push_back_slow_pathIS6_EEvOT_($subs818, $cv);
     __ZNSt3__213__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEED2Ev($cv);
     $retval$5 = $call102;
     break L1;
     break;
    }
   case 67:
    {
     $call119 = __ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($add$ptr, $last, $db) | 0;
     if (($call119 | 0) == ($add$ptr | 0)) {
      $retval$5 = $first;
      break L1;
     }
     $__end_$i583 = $db + 4 | 0;
     $42 = HEAP32[$__end_$i583 >> 2] | 0;
     if ((HEAP32[$db >> 2] | 0) == ($42 | 0)) {
      $retval$5 = $first;
      break L1;
     }
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($42 + -24 | 0, 14859) | 0;
     $add$ptr$i588 = (HEAP32[$__end_$i583 >> 2] | 0) + -24 | 0;
     HEAP32[$ref$tmp >> 2] = HEAP32[$db + 12 >> 2];
     __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEC2EjRKS3_RKS5_($cv, $add$ptr$i588, $ref$tmp);
     $__end_$i591 = $db + 20 | 0;
     $44 = HEAP32[$__end_$i591 >> 2] | 0;
     if ($44 >>> 0 < (HEAP32[$db + 24 >> 2] | 0) >>> 0) {
      HEAP32[$44 >> 2] = 0;
      $__end_$i$i$i$i$i596 = $44 + 4 | 0;
      HEAP32[$__end_$i$i$i$i$i596 >> 2] = 0;
      $46 = HEAP32[$cv + 12 >> 2] | 0;
      HEAP32[$44 + 8 >> 2] = 0;
      HEAP32[$44 + 12 >> 2] = $46;
      HEAP32[$44 >> 2] = HEAP32[$cv >> 2];
      $__end_$i$i$i$i600 = $cv + 4 | 0;
      HEAP32[$__end_$i$i$i$i$i596 >> 2] = HEAP32[$__end_$i$i$i$i600 >> 2];
      $__first_$i$i$i8$i$i$i$i601 = $cv + 8 | 0;
      HEAP32[$44 + 8 >> 2] = HEAP32[$__first_$i$i$i8$i$i$i$i601 >> 2];
      HEAP32[$__first_$i$i$i8$i$i$i$i601 >> 2] = 0;
      HEAP32[$__end_$i$i$i$i600 >> 2] = 0;
      HEAP32[$cv >> 2] = 0;
      HEAP32[$__end_$i591 >> 2] = (HEAP32[$__end_$i591 >> 2] | 0) + 16;
     } else __ZNSt3__26vectorINS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEENS4_IS6_Lj4096EEEE21__push_back_slow_pathIS6_EEvOT_($subs818, $cv);
     __ZNSt3__213__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEED2Ev($cv);
     $retval$5 = $call119;
     break L1;
     break;
    }
   case 70:
    {
     $call143 = __ZN10__cxxabiv112_GLOBAL__N_119parse_function_typeINS0_2DbEEEPKcS4_S4_RT_($first, $last, $db) | 0;
     if (($call143 | 0) == ($first | 0)) {
      $retval$5 = $first;
      break L1;
     }
     $52 = HEAP32[$db + 4 >> 2] | 0;
     if ((HEAP32[$db >> 2] | 0) == ($52 | 0)) {
      $retval$5 = $first;
      break L1;
     }
     HEAP32[$ref$tmp >> 2] = HEAP32[$db + 12 >> 2];
     __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEC2EjRKS3_RKS5_($cv, $52 + -24 | 0, $ref$tmp);
     $__end_$i617 = $db + 20 | 0;
     $53 = HEAP32[$__end_$i617 >> 2] | 0;
     if ($53 >>> 0 < (HEAP32[$db + 24 >> 2] | 0) >>> 0) {
      HEAP32[$53 >> 2] = 0;
      $__end_$i$i$i$i$i622 = $53 + 4 | 0;
      HEAP32[$__end_$i$i$i$i$i622 >> 2] = 0;
      $55 = HEAP32[$cv + 12 >> 2] | 0;
      HEAP32[$53 + 8 >> 2] = 0;
      HEAP32[$53 + 12 >> 2] = $55;
      HEAP32[$53 >> 2] = HEAP32[$cv >> 2];
      $__end_$i$i$i$i626 = $cv + 4 | 0;
      HEAP32[$__end_$i$i$i$i$i622 >> 2] = HEAP32[$__end_$i$i$i$i626 >> 2];
      $__first_$i$i$i8$i$i$i$i627 = $cv + 8 | 0;
      HEAP32[$53 + 8 >> 2] = HEAP32[$__first_$i$i$i8$i$i$i$i627 >> 2];
      HEAP32[$__first_$i$i$i8$i$i$i$i627 >> 2] = 0;
      HEAP32[$__end_$i$i$i$i626 >> 2] = 0;
      HEAP32[$cv >> 2] = 0;
      HEAP32[$__end_$i617 >> 2] = (HEAP32[$__end_$i617 >> 2] | 0) + 16;
     } else __ZNSt3__26vectorINS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEENS4_IS6_Lj4096EEEE21__push_back_slow_pathIS6_EEvOT_($subs818, $cv);
     __ZNSt3__213__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEED2Ev($cv);
     $retval$5 = $call143;
     break L1;
     break;
    }
   case 71:
    {
     $call163 = __ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($add$ptr, $last, $db) | 0;
     if (($call163 | 0) == ($add$ptr | 0)) {
      $retval$5 = $first;
      break L1;
     }
     $__end_$i637 = $db + 4 | 0;
     $61 = HEAP32[$__end_$i637 >> 2] | 0;
     if ((HEAP32[$db >> 2] | 0) == ($61 | 0)) {
      $retval$5 = $first;
      break L1;
     }
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($61 + -24 | 0, 14868) | 0;
     $add$ptr$i642 = (HEAP32[$__end_$i637 >> 2] | 0) + -24 | 0;
     HEAP32[$ref$tmp >> 2] = HEAP32[$db + 12 >> 2];
     __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEC2EjRKS3_RKS5_($cv, $add$ptr$i642, $ref$tmp);
     $__end_$i645 = $db + 20 | 0;
     $63 = HEAP32[$__end_$i645 >> 2] | 0;
     if ($63 >>> 0 < (HEAP32[$db + 24 >> 2] | 0) >>> 0) {
      HEAP32[$63 >> 2] = 0;
      $__end_$i$i$i$i$i650 = $63 + 4 | 0;
      HEAP32[$__end_$i$i$i$i$i650 >> 2] = 0;
      $65 = HEAP32[$cv + 12 >> 2] | 0;
      HEAP32[$63 + 8 >> 2] = 0;
      HEAP32[$63 + 12 >> 2] = $65;
      HEAP32[$63 >> 2] = HEAP32[$cv >> 2];
      $__end_$i$i$i$i654 = $cv + 4 | 0;
      HEAP32[$__end_$i$i$i$i$i650 >> 2] = HEAP32[$__end_$i$i$i$i654 >> 2];
      $__first_$i$i$i8$i$i$i$i655 = $cv + 8 | 0;
      HEAP32[$63 + 8 >> 2] = HEAP32[$__first_$i$i$i8$i$i$i$i655 >> 2];
      HEAP32[$__first_$i$i$i8$i$i$i$i655 >> 2] = 0;
      HEAP32[$__end_$i$i$i$i654 >> 2] = 0;
      HEAP32[$cv >> 2] = 0;
      HEAP32[$__end_$i645 >> 2] = (HEAP32[$__end_$i645 >> 2] | 0) + 16;
     } else __ZNSt3__26vectorINS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEENS4_IS6_Lj4096EEEE21__push_back_slow_pathIS6_EEvOT_($subs818, $cv);
     __ZNSt3__213__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEED2Ev($cv);
     $retval$5 = $call163;
     break L1;
     break;
    }
   case 77:
    {
     $call187 = __ZN10__cxxabiv112_GLOBAL__N_128parse_pointer_to_member_typeINS0_2DbEEEPKcS4_S4_RT_($first, $last, $db) | 0;
     if (($call187 | 0) == ($first | 0)) {
      $retval$5 = $first;
      break L1;
     }
     $71 = HEAP32[$db + 4 >> 2] | 0;
     if ((HEAP32[$db >> 2] | 0) == ($71 | 0)) {
      $retval$5 = $first;
      break L1;
     }
     HEAP32[$ref$tmp >> 2] = HEAP32[$db + 12 >> 2];
     __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEC2EjRKS3_RKS5_($cv, $71 + -24 | 0, $ref$tmp);
     $__end_$i672 = $db + 20 | 0;
     $72 = HEAP32[$__end_$i672 >> 2] | 0;
     if ($72 >>> 0 < (HEAP32[$db + 24 >> 2] | 0) >>> 0) {
      HEAP32[$72 >> 2] = 0;
      $__end_$i$i$i$i$i677 = $72 + 4 | 0;
      HEAP32[$__end_$i$i$i$i$i677 >> 2] = 0;
      $74 = HEAP32[$cv + 12 >> 2] | 0;
      HEAP32[$72 + 8 >> 2] = 0;
      HEAP32[$72 + 12 >> 2] = $74;
      HEAP32[$72 >> 2] = HEAP32[$cv >> 2];
      $__end_$i$i$i$i681 = $cv + 4 | 0;
      HEAP32[$__end_$i$i$i$i$i677 >> 2] = HEAP32[$__end_$i$i$i$i681 >> 2];
      $__first_$i$i$i8$i$i$i$i682 = $cv + 8 | 0;
      HEAP32[$72 + 8 >> 2] = HEAP32[$__first_$i$i$i8$i$i$i$i682 >> 2];
      HEAP32[$__first_$i$i$i8$i$i$i$i682 >> 2] = 0;
      HEAP32[$__end_$i$i$i$i681 >> 2] = 0;
      HEAP32[$cv >> 2] = 0;
      HEAP32[$__end_$i672 >> 2] = (HEAP32[$__end_$i672 >> 2] | 0) + 16;
     } else __ZNSt3__26vectorINS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEENS4_IS6_Lj4096EEEE21__push_back_slow_pathIS6_EEvOT_($subs818, $cv);
     __ZNSt3__213__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEED2Ev($cv);
     $retval$5 = $call187;
     break L1;
     break;
    }
   case 79:
    {
     $__end_$i689 = $db + 4 | 0;
     $sub$ptr$div$i691 = ((HEAP32[$__end_$i689 >> 2] | 0) - (HEAP32[$db >> 2] | 0) | 0) / 24 | 0;
     $call210 = __ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($add$ptr, $last, $db) | 0;
     $sub$ptr$div$i694 = ((HEAP32[$__end_$i689 >> 2] | 0) - (HEAP32[$db >> 2] | 0) | 0) / 24 | 0;
     if (($call210 | 0) == ($add$ptr | 0)) {
      $retval$5 = $first;
      break L1;
     }
     $retval$sroa$0$0$copyload$i6961170 = HEAP32[$db + 12 >> 2] | 0;
     HEAP32[$cv >> 2] = $retval$sroa$0$0$copyload$i6961170;
     $__end_$i697 = $db + 20 | 0;
     $83 = HEAP32[$__end_$i697 >> 2] | 0;
     if ($83 >>> 0 < (HEAP32[$db + 24 >> 2] | 0) >>> 0) {
      HEAP32[$83 >> 2] = 0;
      HEAP32[$83 + 4 >> 2] = 0;
      HEAP32[$83 + 8 >> 2] = 0;
      HEAP32[$83 + 12 >> 2] = $retval$sroa$0$0$copyload$i6961170;
      HEAP32[$__end_$i697 >> 2] = (HEAP32[$__end_$i697 >> 2] | 0) + 16;
     } else __ZNSt3__26vectorINS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEENS4_IS6_Lj4096EEEE24__emplace_back_slow_pathIJS5_EEEvDpOT_($subs818, $cv);
     $__size_$i$i$i711 = $cv + 11 | 0;
     $__size_$i3$i$i713 = $cv + 4 | 0;
     $k222$0 = $sub$ptr$div$i691;
     while (1) {
      if ($k222$0 >>> 0 >= $sub$ptr$div$i694 >>> 0) {
       $retval$5 = $call210;
       break L1;
      }
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEC2ERKS7_jjRKS6_($cv, (HEAP32[$db >> 2] | 0) + ($k222$0 * 24 | 0) + 12 | 0, 2);
      $call$i = __ZNSt3__211char_traitsIcE6lengthEPKc(14879) | 0;
      $87 = HEAP8[$__size_$i$i$i711 >> 0] | 0;
      if (($call$i | 0) == (($87 << 24 >> 24 < 0 ? HEAP32[$__size_$i3$i$i713 >> 2] | 0 : $87 & 255) | 0)) $retval$0$i = (__ZNKSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE7compareEjjPKcj($cv, 14879, $call$i) | 0) == 0; else $retval$0$i = 0;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($cv);
      $89 = HEAP32[$db >> 2] | 0;
      if ($retval$0$i) {
       __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($89 + ($k222$0 * 24 | 0) | 0, 14882) | 0;
       __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKc((HEAP32[$db >> 2] | 0) + ($k222$0 * 24 | 0) + 12 | 0, 0, 14885) | 0;
      } else {
       $second244 = $89 + ($k222$0 * 24 | 0) + 12 | 0;
       if ((HEAP8[$second244 + 11 >> 0] | 0) < 0) $cond$i$i729 = HEAP32[$second244 >> 2] | 0; else $cond$i$i729 = $second244;
       if ((HEAP8[$cond$i$i729 >> 0] | 0) == 40) {
        __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($89 + ($k222$0 * 24 | 0) | 0, 14887) | 0;
        __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKc((HEAP32[$db >> 2] | 0) + ($k222$0 * 24 | 0) + 12 | 0, 0, 14885) | 0;
       }
      }
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc((HEAP32[$db >> 2] | 0) + ($k222$0 * 24 | 0) | 0, 14889) | 0;
      $96 = HEAP32[$__end_$i697 >> 2] | 0;
      $arrayidx$i740 = (HEAP32[$db >> 2] | 0) + ($k222$0 * 24 | 0) | 0;
      $__end_$i741 = $96 + -12 | 0;
      $98 = HEAP32[$__end_$i741 >> 2] | 0;
      if (($98 | 0) == (HEAP32[$96 + -8 >> 2] | 0)) __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIRKS3_EEvOT_($96 + -16 | 0, $arrayidx$i740); else {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ERKS1_($98, $arrayidx$i740);
       HEAP32[$__end_$i741 >> 2] = (HEAP32[$__end_$i741 >> 2] | 0) + 24;
      }
      $k222$0 = $k222$0 + 1 | 0;
     }
     break;
    }
   case 80:
    {
     $__end_$i749 = $db + 4 | 0;
     $sub$ptr$div$i751 = ((HEAP32[$__end_$i749 >> 2] | 0) - (HEAP32[$db >> 2] | 0) | 0) / 24 | 0;
     $call276 = __ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($add$ptr, $last, $db) | 0;
     $sub$ptr$div$i754 = ((HEAP32[$__end_$i749 >> 2] | 0) - (HEAP32[$db >> 2] | 0) | 0) / 24 | 0;
     if (($call276 | 0) == ($add$ptr | 0)) {
      $retval$5 = $first;
      break L1;
     }
     $retval$sroa$0$0$copyload$i7561169 = HEAP32[$db + 12 >> 2] | 0;
     HEAP32[$cv >> 2] = $retval$sroa$0$0$copyload$i7561169;
     $__end_$i757 = $db + 20 | 0;
     $105 = HEAP32[$__end_$i757 >> 2] | 0;
     if ($105 >>> 0 < (HEAP32[$db + 24 >> 2] | 0) >>> 0) {
      HEAP32[$105 >> 2] = 0;
      HEAP32[$105 + 4 >> 2] = 0;
      HEAP32[$105 + 8 >> 2] = 0;
      HEAP32[$105 + 12 >> 2] = $retval$sroa$0$0$copyload$i7561169;
      HEAP32[$__end_$i757 >> 2] = (HEAP32[$__end_$i757 >> 2] | 0) + 16;
     } else __ZNSt3__26vectorINS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEENS4_IS6_Lj4096EEEE24__emplace_back_slow_pathIJS5_EEEvDpOT_($subs818, $cv);
     $__size_$i$i$i773 = $cv + 11 | 0;
     $__size_$i3$i$i775 = $cv + 4 | 0;
     $__size_$i$i$i$i = $cv + 11 | 0;
     $__size_$i3$i$i$i807 = $cv + 4 | 0;
     $k288$0 = $sub$ptr$div$i751;
     while (1) {
      if ($k288$0 >>> 0 >= $sub$ptr$div$i754 >>> 0) {
       $retval$5 = $call276;
       break L1;
      }
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEC2ERKS7_jjRKS6_($cv, (HEAP32[$db >> 2] | 0) + ($k288$0 * 24 | 0) + 12 | 0, 2);
      $call$i771 = __ZNSt3__211char_traitsIcE6lengthEPKc(14879) | 0;
      $109 = HEAP8[$__size_$i$i$i773 >> 0] | 0;
      if (($call$i771 | 0) == (($109 << 24 >> 24 < 0 ? HEAP32[$__size_$i3$i$i775 >> 2] | 0 : $109 & 255) | 0)) $retval$0$i784 = (__ZNKSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE7compareEjjPKcj($cv, 14879, $call$i771) | 0) == 0; else $retval$0$i784 = 0;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($cv);
      $111 = HEAP32[$db >> 2] | 0;
      if ($retval$0$i784) {
       __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($111 + ($k288$0 * 24 | 0) | 0, 14882) | 0;
       __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKc((HEAP32[$db >> 2] | 0) + ($k288$0 * 24 | 0) + 12 | 0, 0, 14885) | 0;
      } else {
       $second310 = $111 + ($k288$0 * 24 | 0) + 12 | 0;
       if ((HEAP8[$second310 + 11 >> 0] | 0) < 0) $cond$i$i798 = HEAP32[$second310 >> 2] | 0; else $cond$i$i798 = $second310;
       if ((HEAP8[$cond$i$i798 >> 0] | 0) == 40) {
        __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($111 + ($k288$0 * 24 | 0) | 0, 14887) | 0;
        __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKc((HEAP32[$db >> 2] | 0) + ($k288$0 * 24 | 0) + 12 | 0, 0, 14885) | 0;
       }
      }
      if ((HEAP8[$add$ptr >> 0] | 0) == 85) {
       __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEC2ERKS7_jjRKS6_($cv, (HEAP32[$db >> 2] | 0) + ($k288$0 * 24 | 0) | 0, 12);
       $call$i$i = __ZNSt3__211char_traitsIcE6lengthEPKc(14892) | 0;
       $120 = HEAP8[$__size_$i$i$i$i >> 0] | 0;
       if (($call$i$i | 0) == (($120 << 24 >> 24 < 0 ? HEAP32[$__size_$i3$i$i$i807 >> 2] | 0 : $120 & 255) | 0)) $$ph = (__ZNKSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE7compareEjjPKcj($cv, 14892, $call$i$i) | 0) != 0; else $$ph = 1;
       __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($cv);
       $first339 = (HEAP32[$db >> 2] | 0) + ($k288$0 * 24 | 0) | 0;
       if ($$ph) {
        $first3391144 = $first339;
        label = 112;
       } else __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE7replaceEjjPKc($first339);
      } else {
       $first3391144 = (HEAP32[$db >> 2] | 0) + ($k288$0 * 24 | 0) | 0;
       label = 112;
      }
      if ((label | 0) == 112) {
       label = 0;
       __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($first3391144, 14905) | 0;
      }
      $123 = HEAP32[$__end_$i757 >> 2] | 0;
      $arrayidx$i815 = (HEAP32[$db >> 2] | 0) + ($k288$0 * 24 | 0) | 0;
      $__end_$i816 = $123 + -12 | 0;
      $125 = HEAP32[$__end_$i816 >> 2] | 0;
      if (($125 | 0) == (HEAP32[$123 + -8 >> 2] | 0)) __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIRKS3_EEvOT_($123 + -16 | 0, $arrayidx$i815); else {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ERKS1_($125, $arrayidx$i815);
       HEAP32[$__end_$i816 >> 2] = (HEAP32[$__end_$i816 >> 2] | 0) + 24;
      }
      $k288$0 = $k288$0 + 1 | 0;
     }
     break;
    }
   case 82:
    {
     $__end_$i824 = $db + 4 | 0;
     $sub$ptr$div$i826 = ((HEAP32[$__end_$i824 >> 2] | 0) - (HEAP32[$db >> 2] | 0) | 0) / 24 | 0;
     $call360 = __ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($add$ptr, $last, $db) | 0;
     $sub$ptr$div$i829 = ((HEAP32[$__end_$i824 >> 2] | 0) - (HEAP32[$db >> 2] | 0) | 0) / 24 | 0;
     if (($call360 | 0) == ($add$ptr | 0)) {
      $retval$5 = $first;
      break L1;
     }
     $retval$sroa$0$0$copyload$i8311168 = HEAP32[$db + 12 >> 2] | 0;
     HEAP32[$cv >> 2] = $retval$sroa$0$0$copyload$i8311168;
     $__end_$i832 = $db + 20 | 0;
     $132 = HEAP32[$__end_$i832 >> 2] | 0;
     if ($132 >>> 0 < (HEAP32[$db + 24 >> 2] | 0) >>> 0) {
      HEAP32[$132 >> 2] = 0;
      HEAP32[$132 + 4 >> 2] = 0;
      HEAP32[$132 + 8 >> 2] = 0;
      HEAP32[$132 + 12 >> 2] = $retval$sroa$0$0$copyload$i8311168;
      HEAP32[$__end_$i832 >> 2] = (HEAP32[$__end_$i832 >> 2] | 0) + 16;
     } else __ZNSt3__26vectorINS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEENS4_IS6_Lj4096EEEE24__emplace_back_slow_pathIJS5_EEEvDpOT_($subs818, $cv);
     $__size_$i$i$i848 = $cv + 11 | 0;
     $__size_$i3$i$i850 = $cv + 4 | 0;
     $k372$0 = $sub$ptr$div$i826;
     while (1) {
      if ($k372$0 >>> 0 >= $sub$ptr$div$i829 >>> 0) {
       $retval$5 = $call360;
       break L1;
      }
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEC2ERKS7_jjRKS6_($cv, (HEAP32[$db >> 2] | 0) + ($k372$0 * 24 | 0) + 12 | 0, 2);
      $call$i846 = __ZNSt3__211char_traitsIcE6lengthEPKc(14879) | 0;
      $136 = HEAP8[$__size_$i$i$i848 >> 0] | 0;
      if (($call$i846 | 0) == (($136 << 24 >> 24 < 0 ? HEAP32[$__size_$i3$i$i850 >> 2] | 0 : $136 & 255) | 0)) $retval$0$i859 = (__ZNKSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE7compareEjjPKcj($cv, 14879, $call$i846) | 0) == 0; else $retval$0$i859 = 0;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($cv);
      $138 = HEAP32[$db >> 2] | 0;
      if ($retval$0$i859) {
       __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($138 + ($k372$0 * 24 | 0) | 0, 14882) | 0;
       __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKc((HEAP32[$db >> 2] | 0) + ($k372$0 * 24 | 0) + 12 | 0, 0, 14885) | 0;
      } else {
       $second394 = $138 + ($k372$0 * 24 | 0) + 12 | 0;
       if ((HEAP8[$second394 + 11 >> 0] | 0) < 0) $cond$i$i873 = HEAP32[$second394 >> 2] | 0; else $cond$i$i873 = $second394;
       if ((HEAP8[$cond$i$i873 >> 0] | 0) == 40) {
        __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($138 + ($k372$0 * 24 | 0) | 0, 14887) | 0;
        __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKc((HEAP32[$db >> 2] | 0) + ($k372$0 * 24 | 0) + 12 | 0, 0, 14885) | 0;
       }
      }
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc((HEAP32[$db >> 2] | 0) + ($k372$0 * 24 | 0) | 0, 14907) | 0;
      $145 = HEAP32[$__end_$i832 >> 2] | 0;
      $arrayidx$i885 = (HEAP32[$db >> 2] | 0) + ($k372$0 * 24 | 0) | 0;
      $__end_$i886 = $145 + -12 | 0;
      $147 = HEAP32[$__end_$i886 >> 2] | 0;
      if (($147 | 0) == (HEAP32[$145 + -8 >> 2] | 0)) __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIRKS3_EEvOT_($145 + -16 | 0, $arrayidx$i885); else {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ERKS1_($147, $arrayidx$i885);
       HEAP32[$__end_$i886 >> 2] = (HEAP32[$__end_$i886 >> 2] | 0) + 24;
      }
      $k372$0 = $k372$0 + 1 | 0;
     }
     break;
    }
   case 84:
    {
     $__end_$i894 = $db + 4 | 0;
     $sub$ptr$div$i896 = ((HEAP32[$__end_$i894 >> 2] | 0) - (HEAP32[$db >> 2] | 0) | 0) / 24 | 0;
     $call425 = __ZN10__cxxabiv112_GLOBAL__N_120parse_template_paramINS0_2DbEEEPKcS4_S4_RT_($first, $last, $db) | 0;
     $sub$ptr$div$i899 = ((HEAP32[$__end_$i894 >> 2] | 0) - (HEAP32[$db >> 2] | 0) | 0) / 24 | 0;
     if (($call425 | 0) == ($first | 0)) {
      $retval$5 = $first;
      break L1;
     }
     $retval$sroa$0$0$$sroa_idx$i900 = $db + 12 | 0;
     $retval$sroa$0$0$copyload$i9011166 = HEAP32[$retval$sroa$0$0$$sroa_idx$i900 >> 2] | 0;
     HEAP32[$cv >> 2] = $retval$sroa$0$0$copyload$i9011166;
     $__end_$i902 = $db + 20 | 0;
     $154 = HEAP32[$__end_$i902 >> 2] | 0;
     $__first_$i$i$i$i903 = $db + 24 | 0;
     if ($154 >>> 0 < (HEAP32[$__first_$i$i$i$i903 >> 2] | 0) >>> 0) {
      HEAP32[$154 >> 2] = 0;
      HEAP32[$154 + 4 >> 2] = 0;
      HEAP32[$154 + 8 >> 2] = 0;
      HEAP32[$154 + 12 >> 2] = $retval$sroa$0$0$copyload$i9011166;
      HEAP32[$__end_$i902 >> 2] = (HEAP32[$__end_$i902 >> 2] | 0) + 16;
     } else __ZNSt3__26vectorINS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEENS4_IS6_Lj4096EEEE24__emplace_back_slow_pathIJS5_EEEvDpOT_($subs818, $cv);
     $k436$0 = $sub$ptr$div$i896;
     while (1) {
      if ($k436$0 >>> 0 >= $sub$ptr$div$i899 >>> 0) break;
      $158 = HEAP32[$__end_$i902 >> 2] | 0;
      $arrayidx$i917 = (HEAP32[$db >> 2] | 0) + ($k436$0 * 24 | 0) | 0;
      $__end_$i918 = $158 + -12 | 0;
      $160 = HEAP32[$__end_$i918 >> 2] | 0;
      if (($160 | 0) == (HEAP32[$158 + -8 >> 2] | 0)) __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIRKS3_EEvOT_($158 + -16 | 0, $arrayidx$i917); else {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ERKS1_($160, $arrayidx$i917);
       HEAP32[$__end_$i918 >> 2] = (HEAP32[$__end_$i918 >> 2] | 0) + 24;
      }
      $k436$0 = $k436$0 + 1 | 0;
     }
     if (!(($sub$ptr$div$i899 | 0) == ($sub$ptr$div$i896 + 1 | 0) & (HEAP8[$db + 63 >> 0] | 0) != 0)) {
      $retval$5 = $call425;
      break L1;
     }
     $call453 = __ZN10__cxxabiv112_GLOBAL__N_119parse_template_argsINS0_2DbEEEPKcS4_S4_RT_($call425, $last, $db) | 0;
     if (($call453 | 0) == ($call425 | 0)) {
      $retval$5 = $call425;
      break L1;
     }
     __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($cv, (HEAP32[$__end_$i894 >> 2] | 0) + -24 | 0);
     $164 = HEAP32[$__end_$i894 >> 2] | 0;
     $add$ptr$i929 = $164 + -24 | 0;
     $165 = $164;
     while (1) {
      if (($165 | 0) == ($add$ptr$i929 | 0)) break;
      $incdec$ptr$i$i$i932 = $165 + -24 | 0;
      HEAP32[$__end_$i894 >> 2] = $incdec$ptr$i$i$i932;
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($incdec$ptr$i$i$i932);
      $165 = HEAP32[$__end_$i894 >> 2] | 0;
     }
     $166 = HEAP8[$cv + 11 >> 0] | 0;
     $tobool$i$i$i$i$i940 = $166 << 24 >> 24 < 0;
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($164 + -48 | 0, $tobool$i$i$i$i$i940 ? HEAP32[$cv >> 2] | 0 : $cv, $tobool$i$i$i$i$i940 ? HEAP32[$cv + 4 >> 2] | 0 : $166 & 255) | 0;
     $add$ptr$i950 = (HEAP32[$__end_$i894 >> 2] | 0) + -24 | 0;
     HEAP32[$ref$tmp474 >> 2] = HEAP32[$retval$sroa$0$0$$sroa_idx$i900 >> 2];
     __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEC2EjRKS3_RKS5_($ref$tmp, $add$ptr$i950, $ref$tmp474);
     $170 = HEAP32[$__end_$i902 >> 2] | 0;
     if ($170 >>> 0 < (HEAP32[$__first_$i$i$i$i903 >> 2] | 0) >>> 0) {
      HEAP32[$170 >> 2] = 0;
      $__end_$i$i$i$i$i958 = $170 + 4 | 0;
      HEAP32[$__end_$i$i$i$i$i958 >> 2] = 0;
      $172 = HEAP32[$ref$tmp + 12 >> 2] | 0;
      HEAP32[$170 + 8 >> 2] = 0;
      HEAP32[$170 + 12 >> 2] = $172;
      HEAP32[$170 >> 2] = HEAP32[$ref$tmp >> 2];
      $__end_$i$i$i$i962 = $ref$tmp + 4 | 0;
      HEAP32[$__end_$i$i$i$i$i958 >> 2] = HEAP32[$__end_$i$i$i$i962 >> 2];
      $__first_$i$i$i8$i$i$i$i963 = $ref$tmp + 8 | 0;
      HEAP32[$170 + 8 >> 2] = HEAP32[$__first_$i$i$i8$i$i$i$i963 >> 2];
      HEAP32[$__first_$i$i$i8$i$i$i$i963 >> 2] = 0;
      HEAP32[$__end_$i$i$i$i962 >> 2] = 0;
      HEAP32[$ref$tmp >> 2] = 0;
      HEAP32[$__end_$i902 >> 2] = (HEAP32[$__end_$i902 >> 2] | 0) + 16;
     } else __ZNSt3__26vectorINS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEENS4_IS6_Lj4096EEEE21__push_back_slow_pathIS6_EEvOT_($subs818, $ref$tmp);
     __ZNSt3__213__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEED2Ev($ref$tmp);
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($cv);
     $retval$5 = $call453;
     break L1;
     break;
    }
   case 85:
    {
     if (!$cmp493) {
      $retval$5 = $first;
      break L1;
     }
     $call496 = __ZN10__cxxabiv112_GLOBAL__N_117parse_source_nameINS0_2DbEEEPKcS4_S4_RT_($add$ptr, $last, $db) | 0;
     if (($call496 | 0) == ($add$ptr | 0)) {
      $retval$5 = $first;
      break L1;
     }
     $call500 = __ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($call496, $last, $db) | 0;
     if (($call500 | 0) == ($call496 | 0)) {
      $retval$5 = $first;
      break L1;
     }
     $__end_$i989 = $db + 4 | 0;
     $177 = HEAP32[$__end_$i989 >> 2] | 0;
     if ((($177 - (HEAP32[$db >> 2] | 0) | 0) / 24 | 0) >>> 0 < 2) {
      $retval$5 = $first;
      break L1;
     }
     __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($cv, $177 + -24 | 0);
     $180 = HEAP32[$__end_$i989 >> 2] | 0;
     $add$ptr$i995 = $180 + -24 | 0;
     $181 = $180;
     while (1) {
      if (($181 | 0) == ($add$ptr$i995 | 0)) break;
      $incdec$ptr$i$i$i998 = $181 + -24 | 0;
      HEAP32[$__end_$i989 >> 2] = $incdec$ptr$i$i$i998;
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($incdec$ptr$i$i$i998);
      $181 = HEAP32[$__end_$i989 >> 2] | 0;
     }
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEC2ERKS7_jjRKS6_($ref$tmp, $180 + -48 | 0, 9);
     $call$i$i1005 = __ZNSt3__211char_traitsIcE6lengthEPKc(14909) | 0;
     $182 = HEAP8[$ref$tmp + 11 >> 0] | 0;
     if (($call$i$i1005 | 0) == (($182 << 24 >> 24 < 0 ? HEAP32[$ref$tmp + 4 >> 2] | 0 : $182 & 255) | 0)) {
      $phitmp$i1015 = (__ZNKSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE7compareEjjPKcj($ref$tmp, 14909, $call$i$i1005) | 0) == 0;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($ref$tmp);
      if ($phitmp$i1015) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($ref$tmp, (HEAP32[$__end_$i989 >> 2] | 0) + -24 | 0);
       $190 = HEAP32[$__end_$i989 >> 2] | 0;
       $add$ptr$i1038 = $190 + -24 | 0;
       $191 = $190;
       while (1) {
        if (($191 | 0) == ($add$ptr$i1038 | 0)) break;
        $incdec$ptr$i$i$i1041 = $191 + -24 | 0;
        HEAP32[$__end_$i989 >> 2] = $incdec$ptr$i$i$i1041;
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($incdec$ptr$i$i$i1041);
        $191 = HEAP32[$__end_$i989 >> 2] | 0;
       }
       $__size_$i$i$i1046 = $ref$tmp + 11 | 0;
       $192 = HEAP8[$__size_$i$i$i1046 >> 0] | 0;
       $tobool$i$i$i1047 = $192 << 24 >> 24 < 0;
       $193 = HEAP32[$ref$tmp >> 2] | 0;
       $call564 = __ZN10__cxxabiv112_GLOBAL__N_117parse_source_nameINS0_2DbEEEPKcS4_S4_RT_($tobool$i$i$i1047 ? $193 + 9 | 0 : $ref$tmp + 9 | 0, ($tobool$i$i$i1047 ? $193 : $ref$tmp) + ($tobool$i$i$i1047 ? HEAP32[$ref$tmp + 4 >> 2] | 0 : $192 & 255) | 0, $db) | 0;
       if (($call564 | 0) == (((HEAP8[$__size_$i$i$i1046 >> 0] | 0) < 0 ? HEAP32[$ref$tmp >> 2] | 0 : $ref$tmp) + 9 | 0)) {
        __ZNSt3__2plIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEENS_12basic_stringIT_T0_T1_EERKSB_PKS8_($ref$tmp527, $cv, 14919);
        $202 = HEAP8[$__size_$i$i$i1046 >> 0] | 0;
        $tobool$i$i$i$i$i1114 = $202 << 24 >> 24 < 0;
        __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($ref$tmp527, $tobool$i$i$i$i$i1114 ? HEAP32[$ref$tmp >> 2] | 0 : $ref$tmp, $tobool$i$i$i$i$i1114 ? HEAP32[$ref$tmp + 4 >> 2] | 0 : $202 & 255) | 0;
        HEAP32[$agg$tmp605 >> 2] = HEAP32[$ref$tmp527 >> 2];
        HEAP32[$agg$tmp605 + 4 >> 2] = HEAP32[$ref$tmp527 + 4 >> 2];
        HEAP32[$agg$tmp605 + 8 >> 2] = HEAP32[$ref$tmp527 + 8 >> 2];
        $__i$0$i$i$i1122 = 0;
        while (1) {
         if (($__i$0$i$i$i1122 | 0) == 3) break;
         HEAP32[$ref$tmp527 + ($__i$0$i$i$i1122 << 2) >> 2] = 0;
         $__i$0$i$i$i1122 = $__i$0$i$i$i1122 + 1 | 0;
        }
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ENSt3__212basic_stringIcNS2_11char_traitsIcEENS0_12malloc_allocIcEEEE($ref$tmp474, $agg$tmp605);
        $205 = HEAP32[$__end_$i989 >> 2] | 0;
        if ($205 >>> 0 < (HEAP32[$db + 8 >> 2] | 0) >>> 0) {
         __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($205, $ref$tmp474);
         HEAP32[$__end_$i989 >> 2] = (HEAP32[$__end_$i989 >> 2] | 0) + 24;
        } else __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIS3_EEvOT_($db, $ref$tmp474);
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($ref$tmp474);
        __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($agg$tmp605);
        __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($ref$tmp527);
       } else {
        __ZNSt3__2plIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEENS_12basic_stringIT_T0_T1_EERKSB_PKS8_($ref$tmp572, $cv, 14921);
        __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($ref$tmp575, (HEAP32[$__end_$i989 >> 2] | 0) + -24 | 0);
        $198 = HEAP8[$ref$tmp575 + 11 >> 0] | 0;
        $tobool$i$i$i$i$i1084 = $198 << 24 >> 24 < 0;
        __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($ref$tmp572, $tobool$i$i$i$i$i1084 ? HEAP32[$ref$tmp575 >> 2] | 0 : $ref$tmp575, $tobool$i$i$i$i$i1084 ? HEAP32[$ref$tmp575 + 4 >> 2] | 0 : $198 & 255) | 0;
        HEAP32[$ref$tmp527 >> 2] = HEAP32[$ref$tmp572 >> 2];
        HEAP32[$ref$tmp527 + 4 >> 2] = HEAP32[$ref$tmp572 + 4 >> 2];
        HEAP32[$ref$tmp527 + 8 >> 2] = HEAP32[$ref$tmp572 + 8 >> 2];
        $__i$0$i$i$i1092 = 0;
        while (1) {
         if (($__i$0$i$i$i1092 | 0) == 3) break;
         HEAP32[$ref$tmp572 + ($__i$0$i$i$i1092 << 2) >> 2] = 0;
         $__i$0$i$i$i1092 = $__i$0$i$i$i1092 + 1 | 0;
        }
        __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($ref$tmp527, 14923) | 0;
        HEAP32[$agg$tmp570 >> 2] = HEAP32[$ref$tmp527 >> 2];
        HEAP32[$agg$tmp570 + 4 >> 2] = HEAP32[$ref$tmp527 + 4 >> 2];
        HEAP32[$agg$tmp570 + 8 >> 2] = HEAP32[$ref$tmp527 + 8 >> 2];
        $__i$0$i$i$i1103 = 0;
        while (1) {
         if (($__i$0$i$i$i1103 | 0) == 3) break;
         HEAP32[$ref$tmp527 + ($__i$0$i$i$i1103 << 2) >> 2] = 0;
         $__i$0$i$i$i1103 = $__i$0$i$i$i1103 + 1 | 0;
        }
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ENSt3__212basic_stringIcNS2_11char_traitsIcEENS0_12malloc_allocIcEEEE($ref$tmp474, $agg$tmp570);
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairaSEOS1_((HEAP32[$__end_$i989 >> 2] | 0) + -24 | 0, $ref$tmp474);
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($ref$tmp474);
        __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($agg$tmp570);
        __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($ref$tmp527);
        __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($ref$tmp575);
        __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($ref$tmp572);
       }
       __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($ref$tmp);
      } else label = 166;
     } else {
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($ref$tmp);
      label = 166;
     }
     if ((label | 0) == 166) {
      __ZNSt3__2plIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEENS_12basic_stringIT_T0_T1_EERKSB_PKS8_($ref$tmp474, $cv, 14919);
      __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($ref$tmp527, (HEAP32[$__end_$i989 >> 2] | 0) + -24 | 0);
      $185 = HEAP8[$ref$tmp527 + 11 >> 0] | 0;
      $tobool$i$i$i$i$i1024 = $185 << 24 >> 24 < 0;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($ref$tmp474, $tobool$i$i$i$i$i1024 ? HEAP32[$ref$tmp527 >> 2] | 0 : $ref$tmp527, $tobool$i$i$i$i$i1024 ? HEAP32[$ref$tmp527 + 4 >> 2] | 0 : $185 & 255) | 0;
      HEAP32[$agg$tmp >> 2] = HEAP32[$ref$tmp474 >> 2];
      HEAP32[$agg$tmp + 4 >> 2] = HEAP32[$ref$tmp474 + 4 >> 2];
      HEAP32[$agg$tmp + 8 >> 2] = HEAP32[$ref$tmp474 + 8 >> 2];
      $__i$0$i$i$i = 0;
      while (1) {
       if (($__i$0$i$i$i | 0) == 3) break;
       HEAP32[$ref$tmp474 + ($__i$0$i$i$i << 2) >> 2] = 0;
       $__i$0$i$i$i = $__i$0$i$i$i + 1 | 0;
      }
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ENSt3__212basic_stringIcNS2_11char_traitsIcEENS0_12malloc_allocIcEEEE($ref$tmp, $agg$tmp);
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairaSEOS1_((HEAP32[$__end_$i989 >> 2] | 0) + -24 | 0, $ref$tmp);
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($ref$tmp);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($agg$tmp);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($ref$tmp527);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($ref$tmp474);
     }
     $add$ptr$i1139 = (HEAP32[$__end_$i989 >> 2] | 0) + -24 | 0;
     HEAP32[$ref$tmp474 >> 2] = HEAP32[$db + 12 >> 2];
     __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEC2EjRKS3_RKS5_($ref$tmp, $add$ptr$i1139, $ref$tmp474);
     $__end_$i971 = $db + 20 | 0;
     $209 = HEAP32[$__end_$i971 >> 2] | 0;
     if ($209 >>> 0 < (HEAP32[$db + 24 >> 2] | 0) >>> 0) {
      HEAP32[$209 >> 2] = 0;
      $__end_$i$i$i$i$i976 = $209 + 4 | 0;
      HEAP32[$__end_$i$i$i$i$i976 >> 2] = 0;
      $211 = HEAP32[$ref$tmp + 12 >> 2] | 0;
      HEAP32[$209 + 8 >> 2] = 0;
      HEAP32[$209 + 12 >> 2] = $211;
      HEAP32[$209 >> 2] = HEAP32[$ref$tmp >> 2];
      $__end_$i$i$i$i980 = $ref$tmp + 4 | 0;
      HEAP32[$__end_$i$i$i$i$i976 >> 2] = HEAP32[$__end_$i$i$i$i980 >> 2];
      $__first_$i$i$i8$i$i$i$i981 = $ref$tmp + 8 | 0;
      HEAP32[$209 + 8 >> 2] = HEAP32[$__first_$i$i$i8$i$i$i$i981 >> 2];
      HEAP32[$__first_$i$i$i8$i$i$i$i981 >> 2] = 0;
      HEAP32[$__end_$i$i$i$i980 >> 2] = 0;
      HEAP32[$ref$tmp >> 2] = 0;
      HEAP32[$__end_$i971 >> 2] = (HEAP32[$__end_$i971 >> 2] | 0) + 16;
     } else __ZNSt3__26vectorINS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEENS4_IS6_Lj4096EEEE21__push_back_slow_pathIS6_EEvOT_($subs818, $ref$tmp);
     __ZNSt3__213__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEED2Ev($ref$tmp);
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($cv);
     $retval$5 = $call500;
     break L1;
     break;
    }
   case 83:
    {
     if ($cmp493) if ((HEAP8[$add$ptr >> 0] | 0) == 116) {
      $call655 = __ZN10__cxxabiv112_GLOBAL__N_110parse_nameINS0_2DbEEEPKcS4_S4_RT_($first, $last, $db) | 0;
      if (($call655 | 0) == ($first | 0)) {
       $retval$5 = $first;
       break L1;
      }
      $218 = HEAP32[$db + 4 >> 2] | 0;
      if ((HEAP32[$db >> 2] | 0) == ($218 | 0)) {
       $retval$5 = $first;
       break L1;
      }
      HEAP32[$ref$tmp >> 2] = HEAP32[$db + 12 >> 2];
      __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEC2EjRKS3_RKS5_($cv, $218 + -24 | 0, $ref$tmp);
      $__end_$i541 = $db + 20 | 0;
      $219 = HEAP32[$__end_$i541 >> 2] | 0;
      if ($219 >>> 0 < (HEAP32[$db + 24 >> 2] | 0) >>> 0) {
       HEAP32[$219 >> 2] = 0;
       $__end_$i$i$i$i$i546 = $219 + 4 | 0;
       HEAP32[$__end_$i$i$i$i$i546 >> 2] = 0;
       $221 = HEAP32[$cv + 12 >> 2] | 0;
       HEAP32[$219 + 8 >> 2] = 0;
       HEAP32[$219 + 12 >> 2] = $221;
       HEAP32[$219 >> 2] = HEAP32[$cv >> 2];
       $__end_$i$i$i$i550 = $cv + 4 | 0;
       HEAP32[$__end_$i$i$i$i$i546 >> 2] = HEAP32[$__end_$i$i$i$i550 >> 2];
       $__first_$i$i$i8$i$i$i$i551 = $cv + 8 | 0;
       HEAP32[$219 + 8 >> 2] = HEAP32[$__first_$i$i$i8$i$i$i$i551 >> 2];
       HEAP32[$__first_$i$i$i8$i$i$i$i551 >> 2] = 0;
       HEAP32[$__end_$i$i$i$i550 >> 2] = 0;
       HEAP32[$cv >> 2] = 0;
       HEAP32[$__end_$i541 >> 2] = (HEAP32[$__end_$i541 >> 2] | 0) + 16;
      } else __ZNSt3__26vectorINS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEENS4_IS6_Lj4096EEEE21__push_back_slow_pathIS6_EEvOT_($subs818, $cv);
      __ZNSt3__213__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEED2Ev($cv);
      $retval$5 = $call655;
      break L1;
     }
     $call677 = __ZN10__cxxabiv112_GLOBAL__N_118parse_substitutionINS0_2DbEEEPKcS4_S4_RT_($first, $last, $db) | 0;
     if (($call677 | 0) == ($first | 0)) {
      $retval$5 = $first;
      break L1;
     }
     $call680 = __ZN10__cxxabiv112_GLOBAL__N_119parse_template_argsINS0_2DbEEEPKcS4_S4_RT_($call677, $last, $db) | 0;
     if (($call680 | 0) == ($call677 | 0)) {
      $retval$5 = $call677;
      break L1;
     }
     $__end_$i476 = $db + 4 | 0;
     $226 = HEAP32[$__end_$i476 >> 2] | 0;
     if ((($226 - (HEAP32[$db >> 2] | 0) | 0) / 24 | 0) >>> 0 < 2) {
      $retval$5 = $call677;
      break L1;
     }
     __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($cv, $226 + -24 | 0);
     $229 = HEAP32[$__end_$i476 >> 2] | 0;
     $add$ptr$i473 = $229 + -24 | 0;
     $230 = $229;
     while (1) {
      if (($230 | 0) == ($add$ptr$i473 | 0)) break;
      $incdec$ptr$i$i$i = $230 + -24 | 0;
      HEAP32[$__end_$i476 >> 2] = $incdec$ptr$i$i$i;
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($incdec$ptr$i$i$i);
      $230 = HEAP32[$__end_$i476 >> 2] | 0;
     }
     $231 = HEAP8[$cv + 11 >> 0] | 0;
     $tobool$i$i$i$i$i = $231 << 24 >> 24 < 0;
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($229 + -48 | 0, $tobool$i$i$i$i$i ? HEAP32[$cv >> 2] | 0 : $cv, $tobool$i$i$i$i$i ? HEAP32[$cv + 4 >> 2] | 0 : $231 & 255) | 0;
     $add$ptr$i468 = (HEAP32[$__end_$i476 >> 2] | 0) + -24 | 0;
     HEAP32[$ref$tmp474 >> 2] = HEAP32[$db + 12 >> 2];
     __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEC2EjRKS3_RKS5_($ref$tmp, $add$ptr$i468, $ref$tmp474);
     $__end_$i448 = $db + 20 | 0;
     $235 = HEAP32[$__end_$i448 >> 2] | 0;
     if ($235 >>> 0 < (HEAP32[$db + 24 >> 2] | 0) >>> 0) {
      HEAP32[$235 >> 2] = 0;
      $__end_$i$i$i$i$i453 = $235 + 4 | 0;
      HEAP32[$__end_$i$i$i$i$i453 >> 2] = 0;
      $237 = HEAP32[$ref$tmp + 12 >> 2] | 0;
      HEAP32[$235 + 8 >> 2] = 0;
      HEAP32[$235 + 12 >> 2] = $237;
      HEAP32[$235 >> 2] = HEAP32[$ref$tmp >> 2];
      $__end_$i$i$i$i457 = $ref$tmp + 4 | 0;
      HEAP32[$__end_$i$i$i$i$i453 >> 2] = HEAP32[$__end_$i$i$i$i457 >> 2];
      $__first_$i$i$i8$i$i$i$i458 = $ref$tmp + 8 | 0;
      HEAP32[$235 + 8 >> 2] = HEAP32[$__first_$i$i$i8$i$i$i$i458 >> 2];
      HEAP32[$__first_$i$i$i8$i$i$i$i458 >> 2] = 0;
      HEAP32[$__end_$i$i$i$i457 >> 2] = 0;
      HEAP32[$ref$tmp >> 2] = 0;
      HEAP32[$__end_$i448 >> 2] = (HEAP32[$__end_$i448 >> 2] | 0) + 16;
     } else __ZNSt3__26vectorINS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEENS4_IS6_Lj4096EEEE21__push_back_slow_pathIS6_EEvOT_($subs818, $ref$tmp);
     __ZNSt3__213__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEED2Ev($ref$tmp);
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($cv);
     $retval$5 = $call680;
     break L1;
     break;
    }
   case 68:
    {
     if ($cmp493) switch (HEAP8[$add$ptr >> 0] | 0) {
     case 112:
      {
       $__end_$i445 = $db + 4 | 0;
       $sub$ptr$div$i447 = ((HEAP32[$__end_$i445 >> 2] | 0) - (HEAP32[$db >> 2] | 0) | 0) / 24 | 0;
       $add$ptr731 = $first + 2 | 0;
       $call732 = __ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($add$ptr731, $last, $db) | 0;
       $sub$ptr$div$i = ((HEAP32[$__end_$i445 >> 2] | 0) - (HEAP32[$db >> 2] | 0) | 0) / 24 | 0;
       if (($call732 | 0) == ($add$ptr731 | 0)) break L58;
       $retval$sroa$0$0$copyload$i4431162 = HEAP32[$db + 12 >> 2] | 0;
       HEAP32[$cv >> 2] = $retval$sroa$0$0$copyload$i4431162;
       $__end_$i432 = $db + 20 | 0;
       $247 = HEAP32[$__end_$i432 >> 2] | 0;
       if ($247 >>> 0 < (HEAP32[$db + 24 >> 2] | 0) >>> 0) {
        HEAP32[$247 >> 2] = 0;
        HEAP32[$247 + 4 >> 2] = 0;
        HEAP32[$247 + 8 >> 2] = 0;
        HEAP32[$247 + 12 >> 2] = $retval$sroa$0$0$copyload$i4431162;
        HEAP32[$__end_$i432 >> 2] = (HEAP32[$__end_$i432 >> 2] | 0) + 16;
       } else __ZNSt3__26vectorINS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEENS4_IS6_Lj4096EEEE24__emplace_back_slow_pathIJS5_EEEvDpOT_($subs818, $cv);
       $k744$0 = $sub$ptr$div$i447;
       while (1) {
        if ($k744$0 >>> 0 >= $sub$ptr$div$i >>> 0) {
         $retval$5 = $call732;
         break L1;
        }
        $250 = HEAP32[$__end_$i432 >> 2] | 0;
        $arrayidx$i = (HEAP32[$db >> 2] | 0) + ($k744$0 * 24 | 0) | 0;
        $__end_$i423 = $250 + -12 | 0;
        $252 = HEAP32[$__end_$i423 >> 2] | 0;
        if (($252 | 0) == (HEAP32[$250 + -8 >> 2] | 0)) __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIRKS3_EEvOT_($250 + -16 | 0, $arrayidx$i); else {
         __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ERKS1_($252, $arrayidx$i);
         HEAP32[$__end_$i423 >> 2] = (HEAP32[$__end_$i423 >> 2] | 0) + 24;
        }
        $k744$0 = $k744$0 + 1 | 0;
       }
       break;
      }
     case 84:
     case 116:
      {
       $call762 = __ZN10__cxxabiv112_GLOBAL__N_114parse_decltypeINS0_2DbEEEPKcS4_S4_RT_($first, $last, $db) | 0;
       if (($call762 | 0) == ($first | 0)) break L58;
       $256 = HEAP32[$db + 4 >> 2] | 0;
       if ((HEAP32[$db >> 2] | 0) == ($256 | 0)) {
        $retval$5 = $first;
        break L1;
       }
       HEAP32[$ref$tmp >> 2] = HEAP32[$db + 12 >> 2];
       __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEC2EjRKS3_RKS5_($cv, $256 + -24 | 0, $ref$tmp);
       $__end_$i399 = $db + 20 | 0;
       $257 = HEAP32[$__end_$i399 >> 2] | 0;
       if ($257 >>> 0 < (HEAP32[$db + 24 >> 2] | 0) >>> 0) {
        HEAP32[$257 >> 2] = 0;
        $__end_$i$i$i$i$i404 = $257 + 4 | 0;
        HEAP32[$__end_$i$i$i$i$i404 >> 2] = 0;
        $259 = HEAP32[$cv + 12 >> 2] | 0;
        HEAP32[$257 + 8 >> 2] = 0;
        HEAP32[$257 + 12 >> 2] = $259;
        HEAP32[$257 >> 2] = HEAP32[$cv >> 2];
        $__end_$i$i$i$i408 = $cv + 4 | 0;
        HEAP32[$__end_$i$i$i$i$i404 >> 2] = HEAP32[$__end_$i$i$i$i408 >> 2];
        $__first_$i$i$i8$i$i$i$i409 = $cv + 8 | 0;
        HEAP32[$257 + 8 >> 2] = HEAP32[$__first_$i$i$i8$i$i$i$i409 >> 2];
        HEAP32[$__first_$i$i$i8$i$i$i$i409 >> 2] = 0;
        HEAP32[$__end_$i$i$i$i408 >> 2] = 0;
        HEAP32[$cv >> 2] = 0;
        HEAP32[$__end_$i399 >> 2] = (HEAP32[$__end_$i399 >> 2] | 0) + 16;
       } else __ZNSt3__26vectorINS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEENS4_IS6_Lj4096EEEE21__push_back_slow_pathIS6_EEvOT_($subs818, $cv);
       __ZNSt3__213__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEED2Ev($cv);
       $retval$5 = $call762;
       break L1;
       break;
      }
     case 118:
      {
       $call784 = __ZN10__cxxabiv112_GLOBAL__N_117parse_vector_typeINS0_2DbEEEPKcS4_S4_RT_($first, $last, $db) | 0;
       if (($call784 | 0) == ($first | 0)) break L58;
       $265 = HEAP32[$db + 4 >> 2] | 0;
       if ((HEAP32[$db >> 2] | 0) == ($265 | 0)) {
        $retval$5 = $first;
        break L1;
       }
       HEAP32[$ref$tmp >> 2] = HEAP32[$db + 12 >> 2];
       __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEC2EjRKS3_RKS5_($cv, $265 + -24 | 0, $ref$tmp);
       $__end_$i375 = $db + 20 | 0;
       $266 = HEAP32[$__end_$i375 >> 2] | 0;
       if ($266 >>> 0 < (HEAP32[$db + 24 >> 2] | 0) >>> 0) {
        HEAP32[$266 >> 2] = 0;
        $__end_$i$i$i$i$i380 = $266 + 4 | 0;
        HEAP32[$__end_$i$i$i$i$i380 >> 2] = 0;
        $268 = HEAP32[$cv + 12 >> 2] | 0;
        HEAP32[$266 + 8 >> 2] = 0;
        HEAP32[$266 + 12 >> 2] = $268;
        HEAP32[$266 >> 2] = HEAP32[$cv >> 2];
        $__end_$i$i$i$i384 = $cv + 4 | 0;
        HEAP32[$__end_$i$i$i$i$i380 >> 2] = HEAP32[$__end_$i$i$i$i384 >> 2];
        $__first_$i$i$i8$i$i$i$i385 = $cv + 8 | 0;
        HEAP32[$266 + 8 >> 2] = HEAP32[$__first_$i$i$i8$i$i$i$i385 >> 2];
        HEAP32[$__first_$i$i$i8$i$i$i$i385 >> 2] = 0;
        HEAP32[$__end_$i$i$i$i384 >> 2] = 0;
        HEAP32[$cv >> 2] = 0;
        HEAP32[$__end_$i375 >> 2] = (HEAP32[$__end_$i375 >> 2] | 0) + 16;
       } else __ZNSt3__26vectorINS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEENS4_IS6_Lj4096EEEE21__push_back_slow_pathIS6_EEvOT_($subs818, $cv);
       __ZNSt3__213__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEED2Ev($cv);
       $retval$5 = $call784;
       break L1;
       break;
      }
     default:
      break L58;
     }
     break;
    }
   default:
    {}
   } while (0);
   $call807 = __ZN10__cxxabiv112_GLOBAL__N_118parse_builtin_typeINS0_2DbEEEPKcS4_S4_RT_($first, $last, $db) | 0;
   if (($call807 | 0) == ($first | 0)) {
    $call811 = __ZN10__cxxabiv112_GLOBAL__N_110parse_nameINS0_2DbEEEPKcS4_S4_RT_($first, $last, $db) | 0;
    if (($call811 | 0) == ($first | 0)) $retval$5 = $first; else {
     $274 = HEAP32[$db + 4 >> 2] | 0;
     if ((HEAP32[$db >> 2] | 0) == ($274 | 0)) $retval$5 = $first; else {
      HEAP32[$ref$tmp >> 2] = HEAP32[$db + 12 >> 2];
      __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEC2EjRKS3_RKS5_($cv, $274 + -24 | 0, $ref$tmp);
      $__end_$i = $db + 20 | 0;
      $275 = HEAP32[$__end_$i >> 2] | 0;
      if ($275 >>> 0 < (HEAP32[$db + 24 >> 2] | 0) >>> 0) {
       HEAP32[$275 >> 2] = 0;
       $__end_$i$i$i$i$i = $275 + 4 | 0;
       HEAP32[$__end_$i$i$i$i$i >> 2] = 0;
       $277 = HEAP32[$cv + 12 >> 2] | 0;
       HEAP32[$275 + 8 >> 2] = 0;
       HEAP32[$275 + 12 >> 2] = $277;
       HEAP32[$275 >> 2] = HEAP32[$cv >> 2];
       $__end_$i$i$i$i = $cv + 4 | 0;
       HEAP32[$__end_$i$i$i$i$i >> 2] = HEAP32[$__end_$i$i$i$i >> 2];
       $__first_$i$i$i8$i$i$i$i = $cv + 8 | 0;
       HEAP32[$275 + 8 >> 2] = HEAP32[$__first_$i$i$i8$i$i$i$i >> 2];
       HEAP32[$__first_$i$i$i8$i$i$i$i >> 2] = 0;
       HEAP32[$__end_$i$i$i$i >> 2] = 0;
       HEAP32[$cv >> 2] = 0;
       HEAP32[$__end_$i >> 2] = (HEAP32[$__end_$i >> 2] | 0) + 16;
      } else __ZNSt3__26vectorINS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEENS4_IS6_Lj4096EEEE21__push_back_slow_pathIS6_EEvOT_($subs818, $cv);
      __ZNSt3__213__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEED2Ev($cv);
      $retval$5 = $call811;
     }
    }
   } else $retval$5 = $call807;
  } else $retval$5 = $call96;
 } while (0);
 STACKTOP = sp;
 return $retval$5 | 0;
}
function _arPattGetImage2($imageProcMode, $pattDetectMode, $patt_size, $sample_size, $image, $xsize, $ysize, $pixelFormat, $paramLTf, $vertex, $pattRatio, $ext_patt) {
 $imageProcMode = $imageProcMode | 0;
 $pattDetectMode = $pattDetectMode | 0;
 $patt_size = $patt_size | 0;
 $sample_size = $sample_size | 0;
 $image = $image | 0;
 $xsize = $xsize | 0;
 $ysize = $ysize | 0;
 $pixelFormat = $pixelFormat | 0;
 $paramLTf = $paramLTf | 0;
 $vertex = $vertex | 0;
 $pattRatio = +$pattRatio;
 $ext_patt = $ext_patt | 0;
 var $104 = 0.0, $105 = 0.0, $119 = 0.0, $120 = 0.0, $136 = 0.0, $137 = 0.0, $153 = 0.0, $154 = 0.0, $170 = 0.0, $171 = 0.0, $172 = 0, $176 = 0, $19 = 0.0, $193 = 0.0, $194 = 0.0, $195 = 0, $199 = 0, $2 = 0.0, $20 = 0.0, $216 = 0.0, $217 = 0.0, $222 = 0, $240 = 0.0, $241 = 0.0, $255 = 0.0, $256 = 0.0, $272 = 0.0, $273 = 0.0, $287 = 0.0, $288 = 0.0, $3 = 0.0, $300 = 0.0, $301 = 0.0, $313 = 0.0, $314 = 0.0, $326 = 0.0, $327 = 0.0, $340 = 0.0, $341 = 0.0, $354 = 0.0, $355 = 0.0, $36 = 0.0, $362 = 0, $37 = 0.0, $4 = 0.0, $5 = 0.0, $53 = 0.0, $54 = 0.0, $6 = 0.0, $7 = 0.0, $70 = 0.0, $71 = 0.0, $8 = 0.0, $87 = 0.0, $88 = 0.0, $9 = 0.0, $add1071 = 0.0, $add1082 = 0.0, $add1092 = 0.0, $add1214 = 0.0, $add1225 = 0.0, $add1235 = 0.0, $add1430 = 0.0, $add1441 = 0.0, $add1451 = 0.0, $add1658 = 0.0, $add1669 = 0.0, $add1679 = 0.0, $add1817 = 0.0, $add1828 = 0.0, $add1838 = 0.0, $add1977 = 0.0, $add1988 = 0.0, $add1998 = 0.0, $add206 = 0.0, $add212 = 0.0, $add2163 = 0.0, $add2174 = 0.0, $add2184 = 0.0, $add223 = 0.0, $add2294 = 0.0, $add2305 = 0.0, $add2315 = 0.0, $add233 = 0.0, $add2425 = 0.0, $add2436 = 0.0, $add2446 = 0.0, $add2562 = 0.0, $add2573 = 0.0, $add2583 = 0.0, $add2673 = 0.0, $add2684 = 0.0, $add2694 = 0.0, $add2786 = 0.0, $add2797 = 0.0, $add2807 = 0.0, $add2898 = 0.0, $add2909 = 0.0, $add2919 = 0.0, $add3043 = 0.0, $add3054 = 0.0, $add3064 = 0.0, $add3188 = 0.0, $add3199 = 0.0, $add3209 = 0.0, $add354 = 0.0, $add365 = 0.0, $add375 = 0.0, $add497 = 0.0, $add508 = 0.0, $add518 = 0.0, $add640 = 0.0, $add651 = 0.0, $add661 = 0.0, $add783 = 0.0, $add794 = 0.0, $add804 = 0.0, $add934 = 0.0, $add945 = 0.0, $add955 = 0.0, $arrayidx1016 = 0, $arrayidx1024 = 0, $arrayidx1036 = 0, $arrayidx1048 = 0, $arrayidx1163 = 0, $arrayidx1177 = 0, $arrayidx1191 = 0, $arrayidx1355 = 0, $arrayidx1381 = 0, $arrayidx1407 = 0, $arrayidx1583 = 0, $arrayidx1609 = 0, $arrayidx1635 = 0, $arrayidx1752 = 0, $arrayidx1778 = 0, $arrayidx1794 = 0, $arrayidx1912 = 0, $arrayidx1938 = 0, $arrayidx1954 = 0, $arrayidx2071 = 0, $arrayidx2088 = 0, $arrayidx2104 = 0, $arrayidx225 = 0, $arrayidx2268 = 0, $arrayidx228 = 0, $arrayidx232 = 0, $arrayidx2399 = 0, $arrayidx242 = 0, $arrayidx246 = 0, $arrayidx251 = 0, $arrayidx2530 = 0, $arrayidx254 = 0, $arrayidx258 = 0, $arrayidx2644 = 0, $arrayidx2650 = 0, $arrayidx2757 = 0, $arrayidx2763 = 0, $arrayidx2869 = 0, $arrayidx2875 = 0, $arrayidx3020 = 0, $arrayidx303 = 0, $arrayidx3165 = 0, $arrayidx317 = 0, $arrayidx3300 = 0, $arrayidx331 = 0, $arrayidx446 = 0, $arrayidx460 = 0, $arrayidx474 = 0, $arrayidx589 = 0, $arrayidx603 = 0, $arrayidx617 = 0, $arrayidx732 = 0, $arrayidx746 = 0, $arrayidx760 = 0, $arrayidx875 = 0, $arrayidx889 = 0, $arrayidx903 = 0, $call = 0, $call2142 = 0, $cmp1122 = 0, $cmp1201 = 0, $cmp1265 = 0, $cmp1417 = 0, $cmp1481 = 0, $cmp1645 = 0, $cmp1709 = 0, $cmp1804 = 0, $cmp1868 = 0, $cmp1964 = 0, $cmp2028 = 0, $cmp2214 = 0, $cmp2345 = 0, $cmp2476 = 0, $cmp2613 = 0, $cmp263 = 0, $cmp2724 = 0, $cmp2837 = 0, $cmp2949 = 0, $cmp3094 = 0, $cmp3239 = 0, $cmp405 = 0, $cmp548 = 0, $cmp691 = 0, $cmp834 = 0, $cmp985 = 0, $cond = 0, $cond1362 = 0, $cond1388 = 0, $cond1564 = 0, $cond1590 = 0, $cond1616 = 0, $conv = 0, $conv1017 = 0, $conv1108 = 0.0, $conv1120 = 0.0, $conv117 = 0, $conv1251 = 0.0, $conv1263 = 0.0, $conv127 = 0, $conv1301 = 0.0, $conv131 = 0, $conv1318 = 0.0, $conv1467 = 0.0, $conv1479 = 0.0, $conv1528 = 0.0, $conv1538 = 0.0, $conv1695 = 0.0, $conv1707 = 0.0, $conv1854 = 0.0, $conv1866 = 0.0, $conv2014 = 0.0, $conv2026 = 0.0, $conv210 = 0.0, $conv2200 = 0.0, $conv221 = 0.0, $conv2212 = 0.0, $conv2331 = 0.0, $conv2343 = 0.0, $conv2462 = 0.0, $conv2474 = 0.0, $conv249 = 0.0, $conv2599 = 0.0, $conv261 = 0.0, $conv2611 = 0.0, $conv2710 = 0.0, $conv2722 = 0.0, $conv2823 = 0.0, $conv2835 = 0.0, $conv2935 = 0.0, $conv2947 = 0.0, $conv2983 = 0, $conv2999 = 0, $conv3080 = 0.0, $conv3092 = 0.0, $conv3128 = 0, $conv3144 = 0, $conv3225 = 0.0, $conv3237 = 0.0, $conv3273 = 0, $conv391 = 0.0, $conv403 = 0.0, $conv534 = 0.0, $conv546 = 0.0, $conv677 = 0.0, $conv689 = 0.0, $conv69 = 0, $conv820 = 0.0, $conv832 = 0.0, $conv93 = 0, $conv971 = 0.0, $conv983 = 0.0, $div = 0, $div185 = 0, $i$0 = 0, $i$1 = 0, $i$10 = 0, $i$11 = 0, $i$12 = 0, $i$13 = 0, $i$14 = 0, $i$15 = 0, $i$16 = 0, $i$17 = 0, $i$18 = 0, $i$19 = 0, $i$2 = 0, $i$20 = 0, $i$21 = 0, $i$22 = 0, $i$23 = 0, $i$3 = 0, $i$4 = 0, $i$5 = 0, $i$6 = 0, $i$7 = 0, $i$8 = 0, $i$9 = 0, $j$0 = 0, $j$1 = 0, $j$10 = 0, $j$11 = 0, $j$12 = 0, $j$13 = 0, $j$14 = 0, $j$15 = 0, $j$16 = 0, $j$17 = 0, $j$18 = 0, $j$19 = 0, $j$2 = 0, $j$20 = 0, $j$3 = 0, $j$4 = 0, $j$5 = 0, $j$6 = 0, $j$7 = 0, $j$8 = 0, $j$9 = 0, $local = 0, $mul1022 = 0, $mul1153 = 0, $mul1161 = 0, $mul1294 = 0, $mul1296 = 0, $mul1319 = 0.0, $mul1353 = 0, $mul1511 = 0, $mul1523 = 0, $mul1540 = 0.0, $mul1581 = 0, $mul1740 = 0, $mul1750 = 0, $mul189 = 0.0, $mul1899 = 0, $mul1910 = 0, $mul193 = 0, $mul194 = 0, $mul2059 = 0, $mul2069 = 0, $mul2133 = 0, $mul2245 = 0, $mul2376 = 0, $mul2507 = 0, $mul293 = 0, $mul2980 = 0, $mul301 = 0, $mul3125 = 0, $mul3270 = 0, $mul436 = 0, $mul444 = 0, $mul579 = 0, $mul587 = 0, $mul722 = 0, $mul730 = 0, $mul865 = 0, $mul873 = 0, $para = 0, $retval$0 = 0, $sample_size$xdiv2$2 = 0, $shr = 0, $shr1329 = 0, $shr1334 = 0, $shr1544 = 0, $shr1552 = 0, $shr1558 = 0, $sub = 0.0, $sub109 = 0.0, $sub39 = 0.0, $sub50 = 0.0, $sub61 = 0.0, $sub74 = 0.0, $sub85 = 0.0, $sub98 = 0.0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer3 = 0, $vararg_buffer5 = 0, $world = 0, $xc$0 = 0, $xc$1 = 0, $xc$10 = 0, $xc$11 = 0, $xc$12 = 0, $xc$13 = 0, $xc$14 = 0, $xc$15 = 0, $xc$16 = 0, $xc$17 = 0, $xc$18 = 0, $xc$19 = 0, $xc$2 = 0, $xc$20 = 0, $xc$3 = 0, $xc$4 = 0, $xc$5 = 0, $xc$6 = 0, $xc$7 = 0, $xc$8 = 0, $xc$9 = 0, $xc2 = 0, $xdiv2$0 = 0, $xdiv2$1 = 0, $xdiv2$2 = 0, $yc$0 = 0, $yc$1 = 0, $yc$10 = 0, $yc$11 = 0, $yc$12 = 0, $yc$13 = 0, $yc$14 = 0, $yc$15 = 0, $yc$16 = 0, $yc$17 = 0, $yc$18 = 0, $yc$19 = 0, $yc$2 = 0, $yc$20 = 0, $yc$3 = 0, $yc$4 = 0, $yc$5 = 0, $yc$6 = 0, $yc$7 = 0, $yc$8 = 0, $yc$9 = 0, $yc2 = 0, $ydiv2$0 = 0, $ydiv2$1 = 0, $ydiv2$2 = 0, $ydiv2$3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(240);
 $vararg_buffer5 = sp + 224 | 0;
 $vararg_buffer3 = sp + 216 | 0;
 $vararg_buffer1 = sp + 208 | 0;
 $vararg_buffer = sp + 200 | 0;
 $world = sp + 136 | 0;
 $local = sp + 72 | 0;
 $para = sp;
 $xc2 = sp + 232 | 0;
 $yc2 = sp + 228 | 0;
 HEAPF64[$world >> 3] = 100.0;
 HEAPF64[$world + 8 >> 3] = 100.0;
 HEAPF64[$world + 16 >> 3] = 110.0;
 HEAPF64[$world + 24 >> 3] = 100.0;
 HEAPF64[$world + 32 >> 3] = 110.0;
 HEAPF64[$world + 40 >> 3] = 110.0;
 HEAPF64[$world + 48 >> 3] = 100.0;
 HEAPF64[$world + 56 >> 3] = 110.0;
 $i$0 = 0;
 while (1) {
  if (($i$0 | 0) == 4) break;
  HEAPF64[$local + ($i$0 << 4) >> 3] = +HEAPF64[$vertex + ($i$0 << 4) >> 3];
  HEAPF64[$local + ($i$0 << 4) + 8 >> 3] = +HEAPF64[$vertex + ($i$0 << 4) + 8 >> 3];
  $i$0 = $i$0 + 1 | 0;
 }
 _get_cpara($world, $local, $para);
 $2 = +HEAPF64[$local >> 3];
 $3 = +HEAPF64[$local + 16 >> 3];
 $sub = $2 - $3;
 $4 = +HEAPF64[$local + 8 >> 3];
 $5 = +HEAPF64[$local + 24 >> 3];
 $sub39 = $4 - $5;
 $conv = ~~($sub * $sub + $sub39 * $sub39);
 $6 = +HEAPF64[$local + 32 >> 3];
 $7 = +HEAPF64[$local + 48 >> 3];
 $sub50 = $6 - $7;
 $8 = +HEAPF64[$local + 40 >> 3];
 $9 = +HEAPF64[$local + 56 >> 3];
 $sub61 = $8 - $9;
 $conv69 = ~~($sub50 * $sub50 + $sub61 * $sub61);
 $sub74 = $3 - $6;
 $sub85 = $5 - $8;
 $conv93 = ~~($sub74 * $sub74 + $sub85 * $sub85);
 $sub98 = $7 - $2;
 $sub109 = $9 - $4;
 $conv117 = ~~($sub98 * $sub98 + $sub109 * $sub109);
 $conv127 = ~~(+((($conv69 | 0) > ($conv | 0) ? $conv69 : $conv) | 0) * $pattRatio * $pattRatio);
 $conv131 = ~~(+((($conv117 | 0) > ($conv93 | 0) ? $conv117 : $conv93) | 0) * $pattRatio * $pattRatio);
 if (!$imageProcMode) {
  $xdiv2$0 = $patt_size;
  while (1) if (($xdiv2$0 | 0) < ($sample_size | 0) & (Math_imul($xdiv2$0, $xdiv2$0) | 0) < ($conv127 | 0)) $xdiv2$0 = $xdiv2$0 << 1; else {
   $ydiv2$0 = $patt_size;
   break;
  }
  while (1) if (($ydiv2$0 | 0) < ($sample_size | 0) & (Math_imul($ydiv2$0, $ydiv2$0) | 0) < ($conv131 | 0)) $ydiv2$0 = $ydiv2$0 << 1; else {
   $xdiv2$2 = $xdiv2$0;
   $ydiv2$2 = $ydiv2$0;
   break;
  }
 } else {
  $xdiv2$1 = $patt_size;
  while (1) if (($xdiv2$1 | 0) < ($sample_size | 0) & (Math_imul($xdiv2$1 << 2, $xdiv2$1) | 0) < ($conv127 | 0)) $xdiv2$1 = $xdiv2$1 << 1; else {
   $ydiv2$1 = $patt_size;
   break;
  }
  while (1) if (($ydiv2$1 | 0) < ($sample_size | 0) & (Math_imul($ydiv2$1 << 2, $ydiv2$1) | 0) < ($conv131 | 0)) $ydiv2$1 = $ydiv2$1 << 1; else {
   $xdiv2$2 = $xdiv2$1;
   $ydiv2$2 = $ydiv2$1;
   break;
  }
 }
 $sample_size$xdiv2$2 = ($xdiv2$2 | 0) > ($sample_size | 0) ? $sample_size : $xdiv2$2;
 $ydiv2$3 = ($ydiv2$2 | 0) > ($sample_size | 0) ? $sample_size : $ydiv2$2;
 $div = ($sample_size$xdiv2$2 | 0) / ($patt_size | 0) | 0;
 $div185 = ($ydiv2$3 | 0) / ($patt_size | 0) | 0;
 $mul189 = $pattRatio * 10.0;
 $mul193 = Math_imul($patt_size, $patt_size) | 0;
 $arrayidx246 = $para + 16 | 0;
 $cmp1201 = ($pixelFormat | 0) == 7;
 $cmp1645 = ($pixelFormat | 0) == 9;
 $conv210 = +($ydiv2$3 | 0);
 $mul2133 = Math_imul($div185, $div) | 0;
 $cmp1417 = ($pixelFormat | 0) == 8;
 $add206 = (1.0 - $pattRatio) * .5 * 10.0 + 100.0;
 $arrayidx242 = $para + 8 | 0;
 $cmp1804 = ($pixelFormat | 0) == 10;
 $arrayidx258 = $para + 40 | 0;
 $arrayidx228 = $para + 56 | 0;
 $arrayidx232 = $para + 64 | 0;
 $cmp1964 = ($pixelFormat | 0) == 11;
 $conv221 = +($sample_size$xdiv2$2 | 0);
 $arrayidx254 = $para + 32 | 0;
 $arrayidx251 = $para + 24 | 0;
 $arrayidx225 = $para + 48 | 0;
 L15 : do if (!$pattDetectMode) {
  $mul194 = $mul193 * 3 | 0;
  $call = _calloc($mul194, 4) | 0;
  if (!$call) {
   _arLog(3, 4823, $vararg_buffer);
   _exit(1);
  }
  L20 : do switch ($pixelFormat | 0) {
  case 0:
   {
    $cmp263 = ($imageProcMode | 0) == 1;
    $j$0 = 0;
    while (1) {
     if (($j$0 | 0) >= ($ydiv2$3 | 0)) {
      $i$13 = 0;
      break L20;
     }
     $add212 = $add206 + $mul189 * (+($j$0 | 0) + .5) / $conv210;
     $i$1 = 0;
     while (1) {
      if (($i$1 | 0) >= ($sample_size$xdiv2$2 | 0)) break;
      $add223 = $add206 + $mul189 * (+($i$1 | 0) + .5) / $conv221;
      $add233 = +HEAPF64[$arrayidx232 >> 3] + ($add223 * +HEAPF64[$arrayidx225 >> 3] + $add212 * +HEAPF64[$arrayidx228 >> 3]);
      if ($add233 == 0.0) {
       $362 = $call;
       label = 309;
       break L15;
      }
      $conv249 = (+HEAPF64[$arrayidx246 >> 3] + ($add223 * +HEAPF64[$para >> 3] + $add212 * +HEAPF64[$arrayidx242 >> 3])) / $add233;
      HEAPF32[$xc2 >> 2] = $conv249;
      $conv261 = (+HEAPF64[$arrayidx258 >> 3] + ($add223 * +HEAPF64[$arrayidx251 >> 3] + $add212 * +HEAPF64[$arrayidx254 >> 3])) / $add233;
      HEAPF32[$yc2 >> 2] = $conv261;
      _arParamIdeal2ObservLTf($paramLTf, $conv249, $conv261, $xc2, $yc2) | 0;
      $19 = +HEAPF32[$xc2 >> 2];
      $20 = +HEAPF32[$yc2 >> 2];
      if ($cmp263) {
       $xc$0 = ((~~($19 + 1.0) | 0) / 2 | 0) << 1;
       $yc$0 = ((~~($20 + 1.0) | 0) / 2 | 0) << 1;
      } else {
       $xc$0 = ~~($19 + .5);
       $yc$0 = ~~($20 + .5);
      }
      if (($xc$0 | 0) > -1) if (($yc$0 | 0) < ($ysize | 0) & (($yc$0 | 0) > -1 & ($xc$0 | 0) < ($xsize | 0))) {
       $mul293 = ((Math_imul($yc$0, $xsize) | 0) + $xc$0 | 0) * 3 | 0;
       $mul301 = ((Math_imul(($j$0 | 0) / ($div185 | 0) | 0, $patt_size) | 0) + (($i$1 | 0) / ($div | 0) | 0) | 0) * 3 | 0;
       $arrayidx303 = $call + ($mul301 << 2) | 0;
       HEAP32[$arrayidx303 >> 2] = (HEAP32[$arrayidx303 >> 2] | 0) + (HEAPU8[$image + ($mul293 + 2) >> 0] | 0);
       $arrayidx317 = $call + ($mul301 + 1 << 2) | 0;
       HEAP32[$arrayidx317 >> 2] = (HEAP32[$arrayidx317 >> 2] | 0) + (HEAPU8[$image + ($mul293 + 1) >> 0] | 0);
       $arrayidx331 = $call + ($mul301 + 2 << 2) | 0;
       HEAP32[$arrayidx331 >> 2] = (HEAP32[$arrayidx331 >> 2] | 0) + (HEAPU8[$image + $mul293 >> 0] | 0);
      }
      $i$1 = $i$1 + 1 | 0;
     }
     $j$0 = $j$0 + 1 | 0;
    }
    break;
   }
  case 1:
   {
    $cmp405 = ($imageProcMode | 0) == 1;
    $j$1 = 0;
    while (1) {
     if (($j$1 | 0) >= ($ydiv2$3 | 0)) {
      $i$13 = 0;
      break L20;
     }
     $add354 = $add206 + $mul189 * (+($j$1 | 0) + .5) / $conv210;
     $i$2 = 0;
     while (1) {
      if (($i$2 | 0) >= ($sample_size$xdiv2$2 | 0)) break;
      $add365 = $add206 + $mul189 * (+($i$2 | 0) + .5) / $conv221;
      $add375 = +HEAPF64[$arrayidx232 >> 3] + ($add365 * +HEAPF64[$arrayidx225 >> 3] + $add354 * +HEAPF64[$arrayidx228 >> 3]);
      if ($add375 == 0.0) {
       $362 = $call;
       label = 309;
       break L15;
      }
      $conv391 = (+HEAPF64[$arrayidx246 >> 3] + ($add365 * +HEAPF64[$para >> 3] + $add354 * +HEAPF64[$arrayidx242 >> 3])) / $add375;
      HEAPF32[$xc2 >> 2] = $conv391;
      $conv403 = (+HEAPF64[$arrayidx258 >> 3] + ($add365 * +HEAPF64[$arrayidx251 >> 3] + $add354 * +HEAPF64[$arrayidx254 >> 3])) / $add375;
      HEAPF32[$yc2 >> 2] = $conv403;
      _arParamIdeal2ObservLTf($paramLTf, $conv391, $conv403, $xc2, $yc2) | 0;
      $36 = +HEAPF32[$xc2 >> 2];
      $37 = +HEAPF32[$yc2 >> 2];
      if ($cmp405) {
       $xc$1 = ((~~($36 + 1.0) | 0) / 2 | 0) << 1;
       $yc$1 = ((~~($37 + 1.0) | 0) / 2 | 0) << 1;
      } else {
       $xc$1 = ~~($36 + .5);
       $yc$1 = ~~($37 + .5);
      }
      if (($xc$1 | 0) > -1) if (($yc$1 | 0) < ($ysize | 0) & (($yc$1 | 0) > -1 & ($xc$1 | 0) < ($xsize | 0))) {
       $mul436 = ((Math_imul($yc$1, $xsize) | 0) + $xc$1 | 0) * 3 | 0;
       $mul444 = ((Math_imul(($j$1 | 0) / ($div185 | 0) | 0, $patt_size) | 0) + (($i$2 | 0) / ($div | 0) | 0) | 0) * 3 | 0;
       $arrayidx446 = $call + ($mul444 << 2) | 0;
       HEAP32[$arrayidx446 >> 2] = (HEAP32[$arrayidx446 >> 2] | 0) + (HEAPU8[$image + $mul436 >> 0] | 0);
       $arrayidx460 = $call + ($mul444 + 1 << 2) | 0;
       HEAP32[$arrayidx460 >> 2] = (HEAP32[$arrayidx460 >> 2] | 0) + (HEAPU8[$image + ($mul436 + 1) >> 0] | 0);
       $arrayidx474 = $call + ($mul444 + 2 << 2) | 0;
       HEAP32[$arrayidx474 >> 2] = (HEAP32[$arrayidx474 >> 2] | 0) + (HEAPU8[$image + ($mul436 + 2) >> 0] | 0);
      }
      $i$2 = $i$2 + 1 | 0;
     }
     $j$1 = $j$1 + 1 | 0;
    }
    break;
   }
  case 2:
   {
    $cmp548 = ($imageProcMode | 0) == 1;
    $j$2 = 0;
    while (1) {
     if (($j$2 | 0) >= ($ydiv2$3 | 0)) {
      $i$13 = 0;
      break L20;
     }
     $add497 = $add206 + $mul189 * (+($j$2 | 0) + .5) / $conv210;
     $i$3 = 0;
     while (1) {
      if (($i$3 | 0) >= ($sample_size$xdiv2$2 | 0)) break;
      $add508 = $add206 + $mul189 * (+($i$3 | 0) + .5) / $conv221;
      $add518 = +HEAPF64[$arrayidx232 >> 3] + ($add508 * +HEAPF64[$arrayidx225 >> 3] + $add497 * +HEAPF64[$arrayidx228 >> 3]);
      if ($add518 == 0.0) {
       $362 = $call;
       label = 309;
       break L15;
      }
      $conv534 = (+HEAPF64[$arrayidx246 >> 3] + ($add508 * +HEAPF64[$para >> 3] + $add497 * +HEAPF64[$arrayidx242 >> 3])) / $add518;
      HEAPF32[$xc2 >> 2] = $conv534;
      $conv546 = (+HEAPF64[$arrayidx258 >> 3] + ($add508 * +HEAPF64[$arrayidx251 >> 3] + $add497 * +HEAPF64[$arrayidx254 >> 3])) / $add518;
      HEAPF32[$yc2 >> 2] = $conv546;
      _arParamIdeal2ObservLTf($paramLTf, $conv534, $conv546, $xc2, $yc2) | 0;
      $53 = +HEAPF32[$xc2 >> 2];
      $54 = +HEAPF32[$yc2 >> 2];
      if ($cmp548) {
       $xc$2 = ((~~($53 + 1.0) | 0) / 2 | 0) << 1;
       $yc$2 = ((~~($54 + 1.0) | 0) / 2 | 0) << 1;
      } else {
       $xc$2 = ~~($53 + .5);
       $yc$2 = ~~($54 + .5);
      }
      if (($xc$2 | 0) > -1) if (($yc$2 | 0) < ($ysize | 0) & (($yc$2 | 0) > -1 & ($xc$2 | 0) < ($xsize | 0))) {
       $mul579 = (Math_imul($yc$2, $xsize) | 0) + $xc$2 << 2;
       $mul587 = ((Math_imul(($j$2 | 0) / ($div185 | 0) | 0, $patt_size) | 0) + (($i$3 | 0) / ($div | 0) | 0) | 0) * 3 | 0;
       $arrayidx589 = $call + ($mul587 << 2) | 0;
       HEAP32[$arrayidx589 >> 2] = (HEAP32[$arrayidx589 >> 2] | 0) + (HEAPU8[$image + ($mul579 | 2) >> 0] | 0);
       $arrayidx603 = $call + ($mul587 + 1 << 2) | 0;
       HEAP32[$arrayidx603 >> 2] = (HEAP32[$arrayidx603 >> 2] | 0) + (HEAPU8[$image + ($mul579 | 1) >> 0] | 0);
       $arrayidx617 = $call + ($mul587 + 2 << 2) | 0;
       HEAP32[$arrayidx617 >> 2] = (HEAP32[$arrayidx617 >> 2] | 0) + (HEAPU8[$image + $mul579 >> 0] | 0);
      }
      $i$3 = $i$3 + 1 | 0;
     }
     $j$2 = $j$2 + 1 | 0;
    }
    break;
   }
  case 3:
   {
    $cmp691 = ($imageProcMode | 0) == 1;
    $j$3 = 0;
    while (1) {
     if (($j$3 | 0) >= ($ydiv2$3 | 0)) {
      $i$13 = 0;
      break L20;
     }
     $add640 = $add206 + $mul189 * (+($j$3 | 0) + .5) / $conv210;
     $i$4 = 0;
     while (1) {
      if (($i$4 | 0) >= ($sample_size$xdiv2$2 | 0)) break;
      $add651 = $add206 + $mul189 * (+($i$4 | 0) + .5) / $conv221;
      $add661 = +HEAPF64[$arrayidx232 >> 3] + ($add651 * +HEAPF64[$arrayidx225 >> 3] + $add640 * +HEAPF64[$arrayidx228 >> 3]);
      if ($add661 == 0.0) {
       $362 = $call;
       label = 309;
       break L15;
      }
      $conv677 = (+HEAPF64[$arrayidx246 >> 3] + ($add651 * +HEAPF64[$para >> 3] + $add640 * +HEAPF64[$arrayidx242 >> 3])) / $add661;
      HEAPF32[$xc2 >> 2] = $conv677;
      $conv689 = (+HEAPF64[$arrayidx258 >> 3] + ($add651 * +HEAPF64[$arrayidx251 >> 3] + $add640 * +HEAPF64[$arrayidx254 >> 3])) / $add661;
      HEAPF32[$yc2 >> 2] = $conv689;
      _arParamIdeal2ObservLTf($paramLTf, $conv677, $conv689, $xc2, $yc2) | 0;
      $70 = +HEAPF32[$xc2 >> 2];
      $71 = +HEAPF32[$yc2 >> 2];
      if ($cmp691) {
       $xc$3 = ((~~($70 + 1.0) | 0) / 2 | 0) << 1;
       $yc$3 = ((~~($71 + 1.0) | 0) / 2 | 0) << 1;
      } else {
       $xc$3 = ~~($70 + .5);
       $yc$3 = ~~($71 + .5);
      }
      if (($xc$3 | 0) > -1) if (($yc$3 | 0) < ($ysize | 0) & (($yc$3 | 0) > -1 & ($xc$3 | 0) < ($xsize | 0))) {
       $mul722 = (Math_imul($yc$3, $xsize) | 0) + $xc$3 << 2;
       $mul730 = ((Math_imul(($j$3 | 0) / ($div185 | 0) | 0, $patt_size) | 0) + (($i$4 | 0) / ($div | 0) | 0) | 0) * 3 | 0;
       $arrayidx732 = $call + ($mul730 << 2) | 0;
       HEAP32[$arrayidx732 >> 2] = (HEAP32[$arrayidx732 >> 2] | 0) + (HEAPU8[$image + $mul722 >> 0] | 0);
       $arrayidx746 = $call + ($mul730 + 1 << 2) | 0;
       HEAP32[$arrayidx746 >> 2] = (HEAP32[$arrayidx746 >> 2] | 0) + (HEAPU8[$image + ($mul722 | 1) >> 0] | 0);
       $arrayidx760 = $call + ($mul730 + 2 << 2) | 0;
       HEAP32[$arrayidx760 >> 2] = (HEAP32[$arrayidx760 >> 2] | 0) + (HEAPU8[$image + ($mul722 | 2) >> 0] | 0);
      }
      $i$4 = $i$4 + 1 | 0;
     }
     $j$3 = $j$3 + 1 | 0;
    }
    break;
   }
  case 4:
   {
    $cmp834 = ($imageProcMode | 0) == 1;
    $j$4 = 0;
    while (1) {
     if (($j$4 | 0) >= ($ydiv2$3 | 0)) {
      $i$13 = 0;
      break L20;
     }
     $add783 = $add206 + $mul189 * (+($j$4 | 0) + .5) / $conv210;
     $i$5 = 0;
     while (1) {
      if (($i$5 | 0) >= ($sample_size$xdiv2$2 | 0)) break;
      $add794 = $add206 + $mul189 * (+($i$5 | 0) + .5) / $conv221;
      $add804 = +HEAPF64[$arrayidx232 >> 3] + ($add794 * +HEAPF64[$arrayidx225 >> 3] + $add783 * +HEAPF64[$arrayidx228 >> 3]);
      if ($add804 == 0.0) {
       $362 = $call;
       label = 309;
       break L15;
      }
      $conv820 = (+HEAPF64[$arrayidx246 >> 3] + ($add794 * +HEAPF64[$para >> 3] + $add783 * +HEAPF64[$arrayidx242 >> 3])) / $add804;
      HEAPF32[$xc2 >> 2] = $conv820;
      $conv832 = (+HEAPF64[$arrayidx258 >> 3] + ($add794 * +HEAPF64[$arrayidx251 >> 3] + $add783 * +HEAPF64[$arrayidx254 >> 3])) / $add804;
      HEAPF32[$yc2 >> 2] = $conv832;
      _arParamIdeal2ObservLTf($paramLTf, $conv820, $conv832, $xc2, $yc2) | 0;
      $87 = +HEAPF32[$xc2 >> 2];
      $88 = +HEAPF32[$yc2 >> 2];
      if ($cmp834) {
       $xc$4 = ((~~($87 + 1.0) | 0) / 2 | 0) << 1;
       $yc$4 = ((~~($88 + 1.0) | 0) / 2 | 0) << 1;
      } else {
       $xc$4 = ~~($87 + .5);
       $yc$4 = ~~($88 + .5);
      }
      if (($xc$4 | 0) > -1) if (($yc$4 | 0) < ($ysize | 0) & (($yc$4 | 0) > -1 & ($xc$4 | 0) < ($xsize | 0))) {
       $mul865 = (Math_imul($yc$4, $xsize) | 0) + $xc$4 << 2;
       $mul873 = ((Math_imul(($j$4 | 0) / ($div185 | 0) | 0, $patt_size) | 0) + (($i$5 | 0) / ($div | 0) | 0) | 0) * 3 | 0;
       $arrayidx875 = $call + ($mul873 << 2) | 0;
       HEAP32[$arrayidx875 >> 2] = (HEAP32[$arrayidx875 >> 2] | 0) + (HEAPU8[$image + ($mul865 | 1) >> 0] | 0);
       $arrayidx889 = $call + ($mul873 + 1 << 2) | 0;
       HEAP32[$arrayidx889 >> 2] = (HEAP32[$arrayidx889 >> 2] | 0) + (HEAPU8[$image + ($mul865 | 2) >> 0] | 0);
       $arrayidx903 = $call + ($mul873 + 2 << 2) | 0;
       HEAP32[$arrayidx903 >> 2] = (HEAP32[$arrayidx903 >> 2] | 0) + (HEAPU8[$image + ($mul865 | 3) >> 0] | 0);
      }
      $i$5 = $i$5 + 1 | 0;
     }
     $j$4 = $j$4 + 1 | 0;
    }
    break;
   }
  case 5:
  case 12:
  case 13:
  case 14:
   {
    $cmp985 = ($imageProcMode | 0) == 1;
    $j$5 = 0;
    while (1) {
     if (($j$5 | 0) >= ($ydiv2$3 | 0)) {
      $i$13 = 0;
      break L20;
     }
     $add934 = $add206 + $mul189 * (+($j$5 | 0) + .5) / $conv210;
     $i$6 = 0;
     while (1) {
      if (($i$6 | 0) >= ($sample_size$xdiv2$2 | 0)) break;
      $add945 = $add206 + $mul189 * (+($i$6 | 0) + .5) / $conv221;
      $add955 = +HEAPF64[$arrayidx232 >> 3] + ($add945 * +HEAPF64[$arrayidx225 >> 3] + $add934 * +HEAPF64[$arrayidx228 >> 3]);
      if ($add955 == 0.0) {
       $362 = $call;
       label = 309;
       break L15;
      }
      $conv971 = (+HEAPF64[$arrayidx246 >> 3] + ($add945 * +HEAPF64[$para >> 3] + $add934 * +HEAPF64[$arrayidx242 >> 3])) / $add955;
      HEAPF32[$xc2 >> 2] = $conv971;
      $conv983 = (+HEAPF64[$arrayidx258 >> 3] + ($add945 * +HEAPF64[$arrayidx251 >> 3] + $add934 * +HEAPF64[$arrayidx254 >> 3])) / $add955;
      HEAPF32[$yc2 >> 2] = $conv983;
      _arParamIdeal2ObservLTf($paramLTf, $conv971, $conv983, $xc2, $yc2) | 0;
      $104 = +HEAPF32[$xc2 >> 2];
      $105 = +HEAPF32[$yc2 >> 2];
      if ($cmp985) {
       $xc$5 = ((~~($104 + 1.0) | 0) / 2 | 0) << 1;
       $yc$5 = ((~~($105 + 1.0) | 0) / 2 | 0) << 1;
      } else {
       $xc$5 = ~~($104 + .5);
       $yc$5 = ~~($105 + .5);
      }
      if (($xc$5 | 0) > -1) if (($yc$5 | 0) < ($ysize | 0) & (($yc$5 | 0) > -1 & ($xc$5 | 0) < ($xsize | 0))) {
       $arrayidx1016 = $image + ((Math_imul($yc$5, $xsize) | 0) + $xc$5) | 0;
       $conv1017 = HEAPU8[$arrayidx1016 >> 0] | 0;
       $mul1022 = ((Math_imul(($j$5 | 0) / ($div185 | 0) | 0, $patt_size) | 0) + (($i$6 | 0) / ($div | 0) | 0) | 0) * 3 | 0;
       $arrayidx1024 = $call + ($mul1022 << 2) | 0;
       HEAP32[$arrayidx1024 >> 2] = (HEAP32[$arrayidx1024 >> 2] | 0) + $conv1017;
       $arrayidx1036 = $call + ($mul1022 + 1 << 2) | 0;
       HEAP32[$arrayidx1036 >> 2] = (HEAP32[$arrayidx1036 >> 2] | 0) + $conv1017;
       $arrayidx1048 = $call + ($mul1022 + 2 << 2) | 0;
       HEAP32[$arrayidx1048 >> 2] = (HEAP32[$arrayidx1048 >> 2] | 0) + $conv1017;
      }
      $i$6 = $i$6 + 1 | 0;
     }
     $j$5 = $j$5 + 1 | 0;
    }
    break;
   }
  case 6:
   {
    $cmp1122 = ($imageProcMode | 0) == 1;
    $j$6 = 0;
    while (1) {
     if (($j$6 | 0) >= ($ydiv2$3 | 0)) {
      $i$13 = 0;
      break L20;
     }
     $add1071 = $add206 + $mul189 * (+($j$6 | 0) + .5) / $conv210;
     $i$7 = 0;
     while (1) {
      if (($i$7 | 0) >= ($sample_size$xdiv2$2 | 0)) break;
      $add1082 = $add206 + $mul189 * (+($i$7 | 0) + .5) / $conv221;
      $add1092 = +HEAPF64[$arrayidx232 >> 3] + ($add1082 * +HEAPF64[$arrayidx225 >> 3] + $add1071 * +HEAPF64[$arrayidx228 >> 3]);
      if ($add1092 == 0.0) {
       $362 = $call;
       label = 309;
       break L15;
      }
      $conv1108 = (+HEAPF64[$arrayidx246 >> 3] + ($add1082 * +HEAPF64[$para >> 3] + $add1071 * +HEAPF64[$arrayidx242 >> 3])) / $add1092;
      HEAPF32[$xc2 >> 2] = $conv1108;
      $conv1120 = (+HEAPF64[$arrayidx258 >> 3] + ($add1082 * +HEAPF64[$arrayidx251 >> 3] + $add1071 * +HEAPF64[$arrayidx254 >> 3])) / $add1092;
      HEAPF32[$yc2 >> 2] = $conv1120;
      _arParamIdeal2ObservLTf($paramLTf, $conv1108, $conv1120, $xc2, $yc2) | 0;
      $119 = +HEAPF32[$xc2 >> 2];
      $120 = +HEAPF32[$yc2 >> 2];
      if ($cmp1122) {
       $xc$6 = ((~~($119 + 1.0) | 0) / 2 | 0) << 1;
       $yc$6 = ((~~($120 + 1.0) | 0) / 2 | 0) << 1;
      } else {
       $xc$6 = ~~($119 + .5);
       $yc$6 = ~~($120 + .5);
      }
      if (($xc$6 | 0) > -1) if (($yc$6 | 0) < ($ysize | 0) & (($yc$6 | 0) > -1 & ($xc$6 | 0) < ($xsize | 0))) {
       $mul1153 = (Math_imul($yc$6, $xsize) | 0) + $xc$6 << 2;
       $mul1161 = ((Math_imul(($j$6 | 0) / ($div185 | 0) | 0, $patt_size) | 0) + (($i$7 | 0) / ($div | 0) | 0) | 0) * 3 | 0;
       $arrayidx1163 = $call + ($mul1161 << 2) | 0;
       HEAP32[$arrayidx1163 >> 2] = (HEAP32[$arrayidx1163 >> 2] | 0) + (HEAPU8[$image + ($mul1153 | 3) >> 0] | 0);
       $arrayidx1177 = $call + ($mul1161 + 1 << 2) | 0;
       HEAP32[$arrayidx1177 >> 2] = (HEAP32[$arrayidx1177 >> 2] | 0) + (HEAPU8[$image + ($mul1153 | 2) >> 0] | 0);
       $arrayidx1191 = $call + ($mul1161 + 2 << 2) | 0;
       HEAP32[$arrayidx1191 >> 2] = (HEAP32[$arrayidx1191 >> 2] | 0) + (HEAPU8[$image + ($mul1153 | 1) >> 0] | 0);
      }
      $i$7 = $i$7 + 1 | 0;
     }
     $j$6 = $j$6 + 1 | 0;
    }
    break;
   }
  default:
   {
    if ($cmp1201) {
     $cmp1265 = ($imageProcMode | 0) == 1;
     $j$7 = 0;
     while (1) {
      if (($j$7 | 0) >= ($ydiv2$3 | 0)) {
       $i$13 = 0;
       break L20;
      }
      $add1214 = $add206 + $mul189 * (+($j$7 | 0) + .5) / $conv210;
      $i$8 = 0;
      while (1) {
       if (($i$8 | 0) >= ($sample_size$xdiv2$2 | 0)) break;
       $add1225 = $add206 + $mul189 * (+($i$8 | 0) + .5) / $conv221;
       $add1235 = +HEAPF64[$arrayidx232 >> 3] + ($add1225 * +HEAPF64[$arrayidx225 >> 3] + $add1214 * +HEAPF64[$arrayidx228 >> 3]);
       if ($add1235 == 0.0) {
        $362 = $call;
        label = 309;
        break L15;
       }
       $conv1251 = (+HEAPF64[$arrayidx246 >> 3] + ($add1225 * +HEAPF64[$para >> 3] + $add1214 * +HEAPF64[$arrayidx242 >> 3])) / $add1235;
       HEAPF32[$xc2 >> 2] = $conv1251;
       $conv1263 = (+HEAPF64[$arrayidx258 >> 3] + ($add1225 * +HEAPF64[$arrayidx251 >> 3] + $add1214 * +HEAPF64[$arrayidx254 >> 3])) / $add1235;
       HEAPF32[$yc2 >> 2] = $conv1263;
       _arParamIdeal2ObservLTf($paramLTf, $conv1251, $conv1263, $xc2, $yc2) | 0;
       $136 = +HEAPF32[$xc2 >> 2];
       $137 = +HEAPF32[$yc2 >> 2];
       if ($cmp1265) {
        $xc$7 = ((~~($136 + 1.0) | 0) / 2 | 0) << 1;
        $yc$7 = ((~~($137 + 1.0) | 0) / 2 | 0) << 1;
       } else {
        $xc$7 = ~~($136 + .5);
        $yc$7 = ~~($137 + .5);
       }
       if (($xc$7 | 0) > -1) if (($yc$7 | 0) < ($ysize | 0) & (($yc$7 | 0) > -1 & ($xc$7 | 0) < ($xsize | 0))) {
        $mul1294 = Math_imul($yc$7, $xsize) | 0;
        $mul1296 = ($xc$7 & 65534) + $mul1294 << 1;
        $conv1301 = +((HEAPU8[$image + $mul1296 >> 0] | 0) + -128 | 0);
        $conv1318 = +((HEAPU8[$image + ($mul1296 + 2) >> 0] | 0) + -128 | 0);
        $mul1319 = +((HEAPU8[$image + ($mul1294 + $xc$7 << 1 | 1) >> 0] | 0) + -16 | 0) * 298.0820007324219;
        $shr = ~~($conv1301 * 516.4110107421875 + $mul1319) >> 8;
        $shr1329 = ~~($mul1319 - $conv1301 * 100.29100036621094 - $conv1318 * 208.1199951171875) >> 8;
        $shr1334 = ~~($mul1319 + $conv1318 * 408.5830078125) >> 8;
        $cond = ($shr | 0) > 0 ? $shr : 0;
        $mul1353 = ((Math_imul(($j$7 | 0) / ($div185 | 0) | 0, $patt_size) | 0) + (($i$8 | 0) / ($div | 0) | 0) | 0) * 3 | 0;
        $arrayidx1355 = $call + ($mul1353 << 2) | 0;
        HEAP32[$arrayidx1355 >> 2] = (($cond | 0) < 255 ? $cond : 255) + (HEAP32[$arrayidx1355 >> 2] | 0);
        $cond1362 = ($shr1329 | 0) > 0 ? $shr1329 : 0;
        $arrayidx1381 = $call + ($mul1353 + 1 << 2) | 0;
        HEAP32[$arrayidx1381 >> 2] = (($cond1362 | 0) < 255 ? $cond1362 : 255) + (HEAP32[$arrayidx1381 >> 2] | 0);
        $cond1388 = ($shr1334 | 0) > 0 ? $shr1334 : 0;
        $arrayidx1407 = $call + ($mul1353 + 2 << 2) | 0;
        HEAP32[$arrayidx1407 >> 2] = (($cond1388 | 0) < 255 ? $cond1388 : 255) + (HEAP32[$arrayidx1407 >> 2] | 0);
       }
       $i$8 = $i$8 + 1 | 0;
      }
      $j$7 = $j$7 + 1 | 0;
     }
    }
    if ($cmp1417) {
     $cmp1481 = ($imageProcMode | 0) == 1;
     $j$8 = 0;
     while (1) {
      if (($j$8 | 0) >= ($ydiv2$3 | 0)) {
       $i$13 = 0;
       break L20;
      }
      $add1430 = $add206 + $mul189 * (+($j$8 | 0) + .5) / $conv210;
      $i$9 = 0;
      while (1) {
       if (($i$9 | 0) >= ($sample_size$xdiv2$2 | 0)) break;
       $add1441 = $add206 + $mul189 * (+($i$9 | 0) + .5) / $conv221;
       $add1451 = +HEAPF64[$arrayidx232 >> 3] + ($add1441 * +HEAPF64[$arrayidx225 >> 3] + $add1430 * +HEAPF64[$arrayidx228 >> 3]);
       if ($add1451 == 0.0) {
        $362 = $call;
        label = 309;
        break L15;
       }
       $conv1467 = (+HEAPF64[$arrayidx246 >> 3] + ($add1441 * +HEAPF64[$para >> 3] + $add1430 * +HEAPF64[$arrayidx242 >> 3])) / $add1451;
       HEAPF32[$xc2 >> 2] = $conv1467;
       $conv1479 = (+HEAPF64[$arrayidx258 >> 3] + ($add1441 * +HEAPF64[$arrayidx251 >> 3] + $add1430 * +HEAPF64[$arrayidx254 >> 3])) / $add1451;
       HEAPF32[$yc2 >> 2] = $conv1479;
       _arParamIdeal2ObservLTf($paramLTf, $conv1467, $conv1479, $xc2, $yc2) | 0;
       $153 = +HEAPF32[$xc2 >> 2];
       $154 = +HEAPF32[$yc2 >> 2];
       if ($cmp1481) {
        $xc$8 = ((~~($153 + 1.0) | 0) / 2 | 0) << 1;
        $yc$8 = ((~~($154 + 1.0) | 0) / 2 | 0) << 1;
       } else {
        $xc$8 = ~~($153 + .5);
        $yc$8 = ~~($154 + .5);
       }
       if (($xc$8 | 0) > -1) if (($yc$8 | 0) < ($ysize | 0) & (($yc$8 | 0) > -1 & ($xc$8 | 0) < ($xsize | 0))) {
        $mul1511 = Math_imul($yc$8, $xsize) | 0;
        $mul1523 = ($xc$8 & 65534) + $mul1511 << 1;
        $conv1528 = +((HEAPU8[$image + ($mul1523 | 1) >> 0] | 0) + -128 | 0);
        $conv1538 = +((HEAPU8[$image + ($mul1523 + 3) >> 0] | 0) + -128 | 0);
        $mul1540 = +((HEAPU8[$image + ($mul1511 + $xc$8 << 1) >> 0] | 0) + -16 | 0) * 298.0820007324219;
        $shr1544 = ~~($mul1540 + $conv1528 * 516.4110107421875) >> 8;
        $shr1552 = ~~($mul1540 - $conv1528 * 100.29100036621094 - $conv1538 * 208.1199951171875) >> 8;
        $shr1558 = ~~($mul1540 + $conv1538 * 408.5830078125) >> 8;
        $cond1564 = ($shr1544 | 0) > 0 ? $shr1544 : 0;
        $mul1581 = ((Math_imul(($j$8 | 0) / ($div185 | 0) | 0, $patt_size) | 0) + (($i$9 | 0) / ($div | 0) | 0) | 0) * 3 | 0;
        $arrayidx1583 = $call + ($mul1581 << 2) | 0;
        HEAP32[$arrayidx1583 >> 2] = (($cond1564 | 0) < 255 ? $cond1564 : 255) + (HEAP32[$arrayidx1583 >> 2] | 0);
        $cond1590 = ($shr1552 | 0) > 0 ? $shr1552 : 0;
        $arrayidx1609 = $call + ($mul1581 + 1 << 2) | 0;
        HEAP32[$arrayidx1609 >> 2] = (($cond1590 | 0) < 255 ? $cond1590 : 255) + (HEAP32[$arrayidx1609 >> 2] | 0);
        $cond1616 = ($shr1558 | 0) > 0 ? $shr1558 : 0;
        $arrayidx1635 = $call + ($mul1581 + 2 << 2) | 0;
        HEAP32[$arrayidx1635 >> 2] = (($cond1616 | 0) < 255 ? $cond1616 : 255) + (HEAP32[$arrayidx1635 >> 2] | 0);
       }
       $i$9 = $i$9 + 1 | 0;
      }
      $j$8 = $j$8 + 1 | 0;
     }
    }
    if ($cmp1645) {
     $cmp1709 = ($imageProcMode | 0) == 1;
     $j$9 = 0;
     while (1) {
      if (($j$9 | 0) >= ($ydiv2$3 | 0)) {
       $i$13 = 0;
       break L20;
      }
      $add1658 = $add206 + $mul189 * (+($j$9 | 0) + .5) / $conv210;
      $i$10 = 0;
      while (1) {
       if (($i$10 | 0) >= ($sample_size$xdiv2$2 | 0)) break;
       $add1669 = $add206 + $mul189 * (+($i$10 | 0) + .5) / $conv221;
       $add1679 = +HEAPF64[$arrayidx232 >> 3] + ($add1669 * +HEAPF64[$arrayidx225 >> 3] + $add1658 * +HEAPF64[$arrayidx228 >> 3]);
       if ($add1679 == 0.0) {
        $362 = $call;
        label = 309;
        break L15;
       }
       $conv1695 = (+HEAPF64[$arrayidx246 >> 3] + ($add1669 * +HEAPF64[$para >> 3] + $add1658 * +HEAPF64[$arrayidx242 >> 3])) / $add1679;
       HEAPF32[$xc2 >> 2] = $conv1695;
       $conv1707 = (+HEAPF64[$arrayidx258 >> 3] + ($add1669 * +HEAPF64[$arrayidx251 >> 3] + $add1658 * +HEAPF64[$arrayidx254 >> 3])) / $add1679;
       HEAPF32[$yc2 >> 2] = $conv1707;
       _arParamIdeal2ObservLTf($paramLTf, $conv1695, $conv1707, $xc2, $yc2) | 0;
       $170 = +HEAPF32[$xc2 >> 2];
       $171 = +HEAPF32[$yc2 >> 2];
       if ($cmp1709) {
        $xc$9 = ((~~($170 + 1.0) | 0) / 2 | 0) << 1;
        $yc$9 = ((~~($171 + 1.0) | 0) / 2 | 0) << 1;
       } else {
        $xc$9 = ~~($170 + .5);
        $yc$9 = ~~($171 + .5);
       }
       if (($xc$9 | 0) > -1) if (($yc$9 | 0) < ($ysize | 0) & (($yc$9 | 0) > -1 & ($xc$9 | 0) < ($xsize | 0))) {
        $mul1740 = (Math_imul($yc$9, $xsize) | 0) + $xc$9 << 1;
        $172 = HEAP8[$image + ($mul1740 | 1) >> 0] | 0;
        $mul1750 = ((Math_imul(($j$9 | 0) / ($div185 | 0) | 0, $patt_size) | 0) + (($i$10 | 0) / ($div | 0) | 0) | 0) * 3 | 0;
        $arrayidx1752 = $call + ($mul1750 << 2) | 0;
        HEAP32[$arrayidx1752 >> 2] = (HEAP32[$arrayidx1752 >> 2] | 0) + (($172 << 3 & 255 | 4) & 255);
        $176 = HEAP8[$image + $mul1740 >> 0] | 0;
        $arrayidx1778 = $call + ($mul1750 + 1 << 2) | 0;
        HEAP32[$arrayidx1778 >> 2] = (($176 << 5 & 255 | 2) & 255 | ($172 & -32 & 255) >>> 3) + (HEAP32[$arrayidx1778 >> 2] | 0);
        $arrayidx1794 = $call + ($mul1750 + 2 << 2) | 0;
        HEAP32[$arrayidx1794 >> 2] = (($176 & -8 | 4) & 255) + (HEAP32[$arrayidx1794 >> 2] | 0);
       }
       $i$10 = $i$10 + 1 | 0;
      }
      $j$9 = $j$9 + 1 | 0;
     }
    }
    if ($cmp1804) {
     $cmp1868 = ($imageProcMode | 0) == 1;
     $j$10 = 0;
     while (1) {
      if (($j$10 | 0) >= ($ydiv2$3 | 0)) {
       $i$13 = 0;
       break L20;
      }
      $add1817 = $add206 + $mul189 * (+($j$10 | 0) + .5) / $conv210;
      $i$11 = 0;
      while (1) {
       if (($i$11 | 0) >= ($sample_size$xdiv2$2 | 0)) break;
       $add1828 = $add206 + $mul189 * (+($i$11 | 0) + .5) / $conv221;
       $add1838 = +HEAPF64[$arrayidx232 >> 3] + ($add1828 * +HEAPF64[$arrayidx225 >> 3] + $add1817 * +HEAPF64[$arrayidx228 >> 3]);
       if ($add1838 == 0.0) {
        $362 = $call;
        label = 309;
        break L15;
       }
       $conv1854 = (+HEAPF64[$arrayidx246 >> 3] + ($add1828 * +HEAPF64[$para >> 3] + $add1817 * +HEAPF64[$arrayidx242 >> 3])) / $add1838;
       HEAPF32[$xc2 >> 2] = $conv1854;
       $conv1866 = (+HEAPF64[$arrayidx258 >> 3] + ($add1828 * +HEAPF64[$arrayidx251 >> 3] + $add1817 * +HEAPF64[$arrayidx254 >> 3])) / $add1838;
       HEAPF32[$yc2 >> 2] = $conv1866;
       _arParamIdeal2ObservLTf($paramLTf, $conv1854, $conv1866, $xc2, $yc2) | 0;
       $193 = +HEAPF32[$xc2 >> 2];
       $194 = +HEAPF32[$yc2 >> 2];
       if ($cmp1868) {
        $xc$10 = ((~~($193 + 1.0) | 0) / 2 | 0) << 1;
        $yc$10 = ((~~($194 + 1.0) | 0) / 2 | 0) << 1;
       } else {
        $xc$10 = ~~($193 + .5);
        $yc$10 = ~~($194 + .5);
       }
       if (($xc$10 | 0) > -1) if (($yc$10 | 0) < ($ysize | 0) & (($yc$10 | 0) > -1 & ($xc$10 | 0) < ($xsize | 0))) {
        $mul1899 = (Math_imul($yc$10, $xsize) | 0) + $xc$10 << 1;
        $195 = HEAP8[$image + ($mul1899 | 1) >> 0] | 0;
        $mul1910 = ((Math_imul(($j$10 | 0) / ($div185 | 0) | 0, $patt_size) | 0) + (($i$11 | 0) / ($div | 0) | 0) | 0) * 3 | 0;
        $arrayidx1912 = $call + ($mul1910 << 2) | 0;
        HEAP32[$arrayidx1912 >> 2] = (HEAP32[$arrayidx1912 >> 2] | 0) + (($195 << 2 & 255 | 4) & 255);
        $199 = HEAP8[$image + $mul1899 >> 0] | 0;
        $arrayidx1938 = $call + ($mul1910 + 1 << 2) | 0;
        HEAP32[$arrayidx1938 >> 2] = (($199 << 5 & 255 | 4) & 255 | ($195 & -64 & 255) >>> 3) + (HEAP32[$arrayidx1938 >> 2] | 0);
        $arrayidx1954 = $call + ($mul1910 + 2 << 2) | 0;
        HEAP32[$arrayidx1954 >> 2] = (($199 & -8 | 4) & 255) + (HEAP32[$arrayidx1954 >> 2] | 0);
       }
       $i$11 = $i$11 + 1 | 0;
      }
      $j$10 = $j$10 + 1 | 0;
     }
    }
    if (!$cmp1964) {
     _arLog(3, 3967, $vararg_buffer1);
     $362 = $call;
     label = 309;
     break L15;
    }
    $cmp2028 = ($imageProcMode | 0) == 1;
    $j$11 = 0;
    while (1) {
     if (($j$11 | 0) >= ($ydiv2$3 | 0)) {
      $i$13 = 0;
      break L20;
     }
     $add1977 = $add206 + $mul189 * (+($j$11 | 0) + .5) / $conv210;
     $i$12 = 0;
     while (1) {
      if (($i$12 | 0) >= ($sample_size$xdiv2$2 | 0)) break;
      $add1988 = $add206 + $mul189 * (+($i$12 | 0) + .5) / $conv221;
      $add1998 = +HEAPF64[$arrayidx232 >> 3] + ($add1988 * +HEAPF64[$arrayidx225 >> 3] + $add1977 * +HEAPF64[$arrayidx228 >> 3]);
      if ($add1998 == 0.0) {
       $362 = $call;
       label = 309;
       break L15;
      }
      $conv2014 = (+HEAPF64[$arrayidx246 >> 3] + ($add1988 * +HEAPF64[$para >> 3] + $add1977 * +HEAPF64[$arrayidx242 >> 3])) / $add1998;
      HEAPF32[$xc2 >> 2] = $conv2014;
      $conv2026 = (+HEAPF64[$arrayidx258 >> 3] + ($add1988 * +HEAPF64[$arrayidx251 >> 3] + $add1977 * +HEAPF64[$arrayidx254 >> 3])) / $add1998;
      HEAPF32[$yc2 >> 2] = $conv2026;
      _arParamIdeal2ObservLTf($paramLTf, $conv2014, $conv2026, $xc2, $yc2) | 0;
      $216 = +HEAPF32[$xc2 >> 2];
      $217 = +HEAPF32[$yc2 >> 2];
      if ($cmp2028) {
       $xc$11 = ((~~($216 + 1.0) | 0) / 2 | 0) << 1;
       $yc$11 = ((~~($217 + 1.0) | 0) / 2 | 0) << 1;
      } else {
       $xc$11 = ~~($216 + .5);
       $yc$11 = ~~($217 + .5);
      }
      if (($xc$11 | 0) > -1) if (($yc$11 | 0) < ($ysize | 0) & (($yc$11 | 0) > -1 & ($xc$11 | 0) < ($xsize | 0))) {
       $mul2059 = (Math_imul($yc$11, $xsize) | 0) + $xc$11 << 1;
       $mul2069 = ((Math_imul(($j$11 | 0) / ($div185 | 0) | 0, $patt_size) | 0) + (($i$12 | 0) / ($div | 0) | 0) | 0) * 3 | 0;
       $arrayidx2071 = $call + ($mul2069 << 2) | 0;
       HEAP32[$arrayidx2071 >> 2] = (HEAP32[$arrayidx2071 >> 2] | 0) + ((HEAP8[$image + ($mul2059 | 1) >> 0] & -16 | 8) & 255);
       $222 = HEAP8[$image + $mul2059 >> 0] | 0;
       $arrayidx2088 = $call + ($mul2069 + 1 << 2) | 0;
       HEAP32[$arrayidx2088 >> 2] = (($222 << 4 & 255 | 8) & 255) + (HEAP32[$arrayidx2088 >> 2] | 0);
       $arrayidx2104 = $call + ($mul2069 + 2 << 2) | 0;
       HEAP32[$arrayidx2104 >> 2] = (($222 & -16 | 8) & 255) + (HEAP32[$arrayidx2104 >> 2] | 0);
      }
      $i$12 = $i$12 + 1 | 0;
     }
     $j$11 = $j$11 + 1 | 0;
    }
   }
  } while (0);
  while (1) {
   if (($i$13 | 0) >= ($mul194 | 0)) break;
   HEAP8[$ext_patt + $i$13 >> 0] = ((HEAP32[$call + ($i$13 << 2) >> 2] | 0) >>> 0) / ($mul2133 >>> 0) | 0;
   $i$13 = $i$13 + 1 | 0;
  }
  _free($call);
  $retval$0 = 0;
 } else {
  $call2142 = _calloc($mul193, 4) | 0;
  if (!$call2142) {
   _arLog(3, 4823, $vararg_buffer3);
   _exit(1);
  }
  L244 : do switch ($pixelFormat | 1 | 0) {
  case 1:
   {
    $cmp2214 = ($imageProcMode | 0) == 1;
    $j$12 = 0;
    while (1) {
     if (($j$12 | 0) >= ($ydiv2$3 | 0)) {
      $i$23 = 0;
      break L244;
     }
     $add2163 = $add206 + $mul189 * (+($j$12 | 0) + .5) / $conv210;
     $i$14 = 0;
     while (1) {
      if (($i$14 | 0) >= ($sample_size$xdiv2$2 | 0)) break;
      $add2174 = $add206 + $mul189 * (+($i$14 | 0) + .5) / $conv221;
      $add2184 = +HEAPF64[$arrayidx232 >> 3] + ($add2174 * +HEAPF64[$arrayidx225 >> 3] + $add2163 * +HEAPF64[$arrayidx228 >> 3]);
      if ($add2184 == 0.0) {
       $362 = $call2142;
       label = 309;
       break L15;
      }
      $conv2200 = (+HEAPF64[$arrayidx246 >> 3] + ($add2174 * +HEAPF64[$para >> 3] + $add2163 * +HEAPF64[$arrayidx242 >> 3])) / $add2184;
      HEAPF32[$xc2 >> 2] = $conv2200;
      $conv2212 = (+HEAPF64[$arrayidx258 >> 3] + ($add2174 * +HEAPF64[$arrayidx251 >> 3] + $add2163 * +HEAPF64[$arrayidx254 >> 3])) / $add2184;
      HEAPF32[$yc2 >> 2] = $conv2212;
      _arParamIdeal2ObservLTf($paramLTf, $conv2200, $conv2212, $xc2, $yc2) | 0;
      $240 = +HEAPF32[$xc2 >> 2];
      $241 = +HEAPF32[$yc2 >> 2];
      if ($cmp2214) {
       $xc$12 = ((~~($240 + 1.0) | 0) / 2 | 0) << 1;
       $yc$12 = ((~~($241 + 1.0) | 0) / 2 | 0) << 1;
      } else {
       $xc$12 = ~~($240 + .5);
       $yc$12 = ~~($241 + .5);
      }
      if (($xc$12 | 0) > -1) if (($yc$12 | 0) < ($ysize | 0) & (($yc$12 | 0) > -1 & ($xc$12 | 0) < ($xsize | 0))) {
       $mul2245 = ((Math_imul($yc$12, $xsize) | 0) + $xc$12 | 0) * 3 | 0;
       $arrayidx2268 = $call2142 + ((Math_imul(($j$12 | 0) / ($div185 | 0) | 0, $patt_size) | 0) + (($i$14 | 0) / ($div | 0) | 0) << 2) | 0;
       HEAP32[$arrayidx2268 >> 2] = (HEAP32[$arrayidx2268 >> 2] | 0) + ((((HEAPU8[$image + ($mul2245 + 1) >> 0] | 0) + (HEAPU8[$image + $mul2245 >> 0] | 0) + (HEAPU8[$image + ($mul2245 + 2) >> 0] | 0) | 0) >>> 0) / 3 | 0);
      }
      $i$14 = $i$14 + 1 | 0;
     }
     $j$12 = $j$12 + 1 | 0;
    }
    break;
   }
  case 3:
   {
    $cmp2345 = ($imageProcMode | 0) == 1;
    $j$13 = 0;
    while (1) {
     if (($j$13 | 0) >= ($ydiv2$3 | 0)) {
      $i$23 = 0;
      break L244;
     }
     $add2294 = $add206 + $mul189 * (+($j$13 | 0) + .5) / $conv210;
     $i$15 = 0;
     while (1) {
      if (($i$15 | 0) >= ($sample_size$xdiv2$2 | 0)) break;
      $add2305 = $add206 + $mul189 * (+($i$15 | 0) + .5) / $conv221;
      $add2315 = +HEAPF64[$arrayidx232 >> 3] + ($add2305 * +HEAPF64[$arrayidx225 >> 3] + $add2294 * +HEAPF64[$arrayidx228 >> 3]);
      if ($add2315 == 0.0) {
       $362 = $call2142;
       label = 309;
       break L15;
      }
      $conv2331 = (+HEAPF64[$arrayidx246 >> 3] + ($add2305 * +HEAPF64[$para >> 3] + $add2294 * +HEAPF64[$arrayidx242 >> 3])) / $add2315;
      HEAPF32[$xc2 >> 2] = $conv2331;
      $conv2343 = (+HEAPF64[$arrayidx258 >> 3] + ($add2305 * +HEAPF64[$arrayidx251 >> 3] + $add2294 * +HEAPF64[$arrayidx254 >> 3])) / $add2315;
      HEAPF32[$yc2 >> 2] = $conv2343;
      _arParamIdeal2ObservLTf($paramLTf, $conv2331, $conv2343, $xc2, $yc2) | 0;
      $255 = +HEAPF32[$xc2 >> 2];
      $256 = +HEAPF32[$yc2 >> 2];
      if ($cmp2345) {
       $xc$13 = ((~~($255 + 1.0) | 0) / 2 | 0) << 1;
       $yc$13 = ((~~($256 + 1.0) | 0) / 2 | 0) << 1;
      } else {
       $xc$13 = ~~($255 + .5);
       $yc$13 = ~~($256 + .5);
      }
      if (($xc$13 | 0) > -1) if (($yc$13 | 0) < ($ysize | 0) & (($yc$13 | 0) > -1 & ($xc$13 | 0) < ($xsize | 0))) {
       $mul2376 = (Math_imul($yc$13, $xsize) | 0) + $xc$13 << 2;
       $arrayidx2399 = $call2142 + ((Math_imul(($j$13 | 0) / ($div185 | 0) | 0, $patt_size) | 0) + (($i$15 | 0) / ($div | 0) | 0) << 2) | 0;
       HEAP32[$arrayidx2399 >> 2] = (HEAP32[$arrayidx2399 >> 2] | 0) + ((((HEAPU8[$image + ($mul2376 | 1) >> 0] | 0) + (HEAPU8[$image + $mul2376 >> 0] | 0) + (HEAPU8[$image + ($mul2376 | 2) >> 0] | 0) | 0) >>> 0) / 3 | 0);
      }
      $i$15 = $i$15 + 1 | 0;
     }
     $j$13 = $j$13 + 1 | 0;
    }
    break;
   }
  default:
   {
    if (($pixelFormat | 2 | 0) == 6) {
     $cmp2476 = ($imageProcMode | 0) == 1;
     $j$14 = 0;
     while (1) {
      if (($j$14 | 0) >= ($ydiv2$3 | 0)) {
       $i$23 = 0;
       break L244;
      }
      $add2425 = $add206 + $mul189 * (+($j$14 | 0) + .5) / $conv210;
      $i$16 = 0;
      while (1) {
       if (($i$16 | 0) >= ($sample_size$xdiv2$2 | 0)) break;
       $add2436 = $add206 + $mul189 * (+($i$16 | 0) + .5) / $conv221;
       $add2446 = +HEAPF64[$arrayidx232 >> 3] + ($add2436 * +HEAPF64[$arrayidx225 >> 3] + $add2425 * +HEAPF64[$arrayidx228 >> 3]);
       if ($add2446 == 0.0) {
        $362 = $call2142;
        label = 309;
        break L15;
       }
       $conv2462 = (+HEAPF64[$arrayidx246 >> 3] + ($add2436 * +HEAPF64[$para >> 3] + $add2425 * +HEAPF64[$arrayidx242 >> 3])) / $add2446;
       HEAPF32[$xc2 >> 2] = $conv2462;
       $conv2474 = (+HEAPF64[$arrayidx258 >> 3] + ($add2436 * +HEAPF64[$arrayidx251 >> 3] + $add2425 * +HEAPF64[$arrayidx254 >> 3])) / $add2446;
       HEAPF32[$yc2 >> 2] = $conv2474;
       _arParamIdeal2ObservLTf($paramLTf, $conv2462, $conv2474, $xc2, $yc2) | 0;
       $272 = +HEAPF32[$xc2 >> 2];
       $273 = +HEAPF32[$yc2 >> 2];
       if ($cmp2476) {
        $xc$14 = ((~~($272 + 1.0) | 0) / 2 | 0) << 1;
        $yc$14 = ((~~($273 + 1.0) | 0) / 2 | 0) << 1;
       } else {
        $xc$14 = ~~($272 + .5);
        $yc$14 = ~~($273 + .5);
       }
       if (($xc$14 | 0) > -1) if (($yc$14 | 0) < ($ysize | 0) & (($yc$14 | 0) > -1 & ($xc$14 | 0) < ($xsize | 0))) {
        $mul2507 = (Math_imul($yc$14, $xsize) | 0) + $xc$14 << 2;
        $arrayidx2530 = $call2142 + ((Math_imul(($j$14 | 0) / ($div185 | 0) | 0, $patt_size) | 0) + (($i$16 | 0) / ($div | 0) | 0) << 2) | 0;
        HEAP32[$arrayidx2530 >> 2] = (HEAP32[$arrayidx2530 >> 2] | 0) + ((((HEAPU8[$image + ($mul2507 | 2) >> 0] | 0) + (HEAPU8[$image + ($mul2507 | 1) >> 0] | 0) + (HEAPU8[$image + ($mul2507 | 3) >> 0] | 0) | 0) >>> 0) / 3 | 0);
       }
       $i$16 = $i$16 + 1 | 0;
      }
      $j$14 = $j$14 + 1 | 0;
     }
    }
    switch ($pixelFormat | 0) {
    case 5:
    case 12:
    case 13:
    case 14:
     {
      $cmp2613 = ($imageProcMode | 0) == 1;
      $j$15 = 0;
      while (1) {
       if (($j$15 | 0) >= ($ydiv2$3 | 0)) {
        $i$23 = 0;
        break L244;
       }
       $add2562 = $add206 + $mul189 * (+($j$15 | 0) + .5) / $conv210;
       $i$17 = 0;
       while (1) {
        if (($i$17 | 0) >= ($sample_size$xdiv2$2 | 0)) break;
        $add2573 = $add206 + $mul189 * (+($i$17 | 0) + .5) / $conv221;
        $add2583 = +HEAPF64[$arrayidx232 >> 3] + ($add2573 * +HEAPF64[$arrayidx225 >> 3] + $add2562 * +HEAPF64[$arrayidx228 >> 3]);
        if ($add2583 == 0.0) {
         $362 = $call2142;
         label = 309;
         break L15;
        }
        $conv2599 = (+HEAPF64[$arrayidx246 >> 3] + ($add2573 * +HEAPF64[$para >> 3] + $add2562 * +HEAPF64[$arrayidx242 >> 3])) / $add2583;
        HEAPF32[$xc2 >> 2] = $conv2599;
        $conv2611 = (+HEAPF64[$arrayidx258 >> 3] + ($add2573 * +HEAPF64[$arrayidx251 >> 3] + $add2562 * +HEAPF64[$arrayidx254 >> 3])) / $add2583;
        HEAPF32[$yc2 >> 2] = $conv2611;
        _arParamIdeal2ObservLTf($paramLTf, $conv2599, $conv2611, $xc2, $yc2) | 0;
        $287 = +HEAPF32[$xc2 >> 2];
        $288 = +HEAPF32[$yc2 >> 2];
        if ($cmp2613) {
         $xc$15 = ((~~($287 + 1.0) | 0) / 2 | 0) << 1;
         $yc$15 = ((~~($288 + 1.0) | 0) / 2 | 0) << 1;
        } else {
         $xc$15 = ~~($287 + .5);
         $yc$15 = ~~($288 + .5);
        }
        if (($xc$15 | 0) > -1) if (($yc$15 | 0) < ($ysize | 0) & (($yc$15 | 0) > -1 & ($xc$15 | 0) < ($xsize | 0))) {
         $arrayidx2644 = $image + ((Math_imul($yc$15, $xsize) | 0) + $xc$15) | 0;
         $arrayidx2650 = $call2142 + ((Math_imul(($j$15 | 0) / ($div185 | 0) | 0, $patt_size) | 0) + (($i$17 | 0) / ($div | 0) | 0) << 2) | 0;
         HEAP32[$arrayidx2650 >> 2] = (HEAP32[$arrayidx2650 >> 2] | 0) + (HEAPU8[$arrayidx2644 >> 0] | 0);
        }
        $i$17 = $i$17 + 1 | 0;
       }
       $j$15 = $j$15 + 1 | 0;
      }
      break;
     }
    default:
     {}
    }
    if ($cmp1201) {
     $cmp2724 = ($imageProcMode | 0) == 1;
     $j$16 = 0;
     while (1) {
      if (($j$16 | 0) >= ($ydiv2$3 | 0)) {
       $i$23 = 0;
       break L244;
      }
      $add2673 = $add206 + $mul189 * (+($j$16 | 0) + .5) / $conv210;
      $i$18 = 0;
      while (1) {
       if (($i$18 | 0) >= ($sample_size$xdiv2$2 | 0)) break;
       $add2684 = $add206 + $mul189 * (+($i$18 | 0) + .5) / $conv221;
       $add2694 = +HEAPF64[$arrayidx232 >> 3] + ($add2684 * +HEAPF64[$arrayidx225 >> 3] + $add2673 * +HEAPF64[$arrayidx228 >> 3]);
       if ($add2694 == 0.0) {
        $362 = $call2142;
        label = 309;
        break L15;
       }
       $conv2710 = (+HEAPF64[$arrayidx246 >> 3] + ($add2684 * +HEAPF64[$para >> 3] + $add2673 * +HEAPF64[$arrayidx242 >> 3])) / $add2694;
       HEAPF32[$xc2 >> 2] = $conv2710;
       $conv2722 = (+HEAPF64[$arrayidx258 >> 3] + ($add2684 * +HEAPF64[$arrayidx251 >> 3] + $add2673 * +HEAPF64[$arrayidx254 >> 3])) / $add2694;
       HEAPF32[$yc2 >> 2] = $conv2722;
       _arParamIdeal2ObservLTf($paramLTf, $conv2710, $conv2722, $xc2, $yc2) | 0;
       $300 = +HEAPF32[$xc2 >> 2];
       $301 = +HEAPF32[$yc2 >> 2];
       if ($cmp2724) {
        $xc$16 = ((~~($300 + 1.0) | 0) / 2 | 0) << 1;
        $yc$16 = ((~~($301 + 1.0) | 0) / 2 | 0) << 1;
       } else {
        $xc$16 = ~~($300 + .5);
        $yc$16 = ~~($301 + .5);
       }
       if (($xc$16 | 0) > -1) if (($yc$16 | 0) < ($ysize | 0) & (($yc$16 | 0) > -1 & ($xc$16 | 0) < ($xsize | 0))) {
        $arrayidx2757 = $image + ((Math_imul($yc$16, $xsize) | 0) + $xc$16 << 1 | 1) | 0;
        $arrayidx2763 = $call2142 + ((Math_imul(($j$16 | 0) / ($div185 | 0) | 0, $patt_size) | 0) + (($i$18 | 0) / ($div | 0) | 0) << 2) | 0;
        HEAP32[$arrayidx2763 >> 2] = (HEAP32[$arrayidx2763 >> 2] | 0) + (HEAPU8[$arrayidx2757 >> 0] | 0);
       }
       $i$18 = $i$18 + 1 | 0;
      }
      $j$16 = $j$16 + 1 | 0;
     }
    }
    if ($cmp1417) {
     $cmp2837 = ($imageProcMode | 0) == 1;
     $j$17 = 0;
     while (1) {
      if (($j$17 | 0) >= ($ydiv2$3 | 0)) {
       $i$23 = 0;
       break L244;
      }
      $add2786 = $add206 + $mul189 * (+($j$17 | 0) + .5) / $conv210;
      $i$19 = 0;
      while (1) {
       if (($i$19 | 0) >= ($sample_size$xdiv2$2 | 0)) break;
       $add2797 = $add206 + $mul189 * (+($i$19 | 0) + .5) / $conv221;
       $add2807 = +HEAPF64[$arrayidx232 >> 3] + ($add2797 * +HEAPF64[$arrayidx225 >> 3] + $add2786 * +HEAPF64[$arrayidx228 >> 3]);
       if ($add2807 == 0.0) {
        $362 = $call2142;
        label = 309;
        break L15;
       }
       $conv2823 = (+HEAPF64[$arrayidx246 >> 3] + ($add2797 * +HEAPF64[$para >> 3] + $add2786 * +HEAPF64[$arrayidx242 >> 3])) / $add2807;
       HEAPF32[$xc2 >> 2] = $conv2823;
       $conv2835 = (+HEAPF64[$arrayidx258 >> 3] + ($add2797 * +HEAPF64[$arrayidx251 >> 3] + $add2786 * +HEAPF64[$arrayidx254 >> 3])) / $add2807;
       HEAPF32[$yc2 >> 2] = $conv2835;
       _arParamIdeal2ObservLTf($paramLTf, $conv2823, $conv2835, $xc2, $yc2) | 0;
       $313 = +HEAPF32[$xc2 >> 2];
       $314 = +HEAPF32[$yc2 >> 2];
       if ($cmp2837) {
        $xc$17 = ((~~($313 + 1.0) | 0) / 2 | 0) << 1;
        $yc$17 = ((~~($314 + 1.0) | 0) / 2 | 0) << 1;
       } else {
        $xc$17 = ~~($313 + .5);
        $yc$17 = ~~($314 + .5);
       }
       if (($xc$17 | 0) > -1) if (($yc$17 | 0) < ($ysize | 0) & (($yc$17 | 0) > -1 & ($xc$17 | 0) < ($xsize | 0))) {
        $arrayidx2869 = $image + ((Math_imul($yc$17, $xsize) | 0) + $xc$17 << 1) | 0;
        $arrayidx2875 = $call2142 + ((Math_imul(($j$17 | 0) / ($div185 | 0) | 0, $patt_size) | 0) + (($i$19 | 0) / ($div | 0) | 0) << 2) | 0;
        HEAP32[$arrayidx2875 >> 2] = (HEAP32[$arrayidx2875 >> 2] | 0) + (HEAPU8[$arrayidx2869 >> 0] | 0);
       }
       $i$19 = $i$19 + 1 | 0;
      }
      $j$17 = $j$17 + 1 | 0;
     }
    }
    if ($cmp1645) {
     $cmp2949 = ($imageProcMode | 0) == 1;
     $j$18 = 0;
     while (1) {
      if (($j$18 | 0) >= ($ydiv2$3 | 0)) {
       $i$23 = 0;
       break L244;
      }
      $add2898 = $add206 + $mul189 * (+($j$18 | 0) + .5) / $conv210;
      $i$20 = 0;
      while (1) {
       if (($i$20 | 0) >= ($sample_size$xdiv2$2 | 0)) break;
       $add2909 = $add206 + $mul189 * (+($i$20 | 0) + .5) / $conv221;
       $add2919 = +HEAPF64[$arrayidx232 >> 3] + ($add2909 * +HEAPF64[$arrayidx225 >> 3] + $add2898 * +HEAPF64[$arrayidx228 >> 3]);
       if ($add2919 == 0.0) {
        $362 = $call2142;
        label = 309;
        break L15;
       }
       $conv2935 = (+HEAPF64[$arrayidx246 >> 3] + ($add2909 * +HEAPF64[$para >> 3] + $add2898 * +HEAPF64[$arrayidx242 >> 3])) / $add2919;
       HEAPF32[$xc2 >> 2] = $conv2935;
       $conv2947 = (+HEAPF64[$arrayidx258 >> 3] + ($add2909 * +HEAPF64[$arrayidx251 >> 3] + $add2898 * +HEAPF64[$arrayidx254 >> 3])) / $add2919;
       HEAPF32[$yc2 >> 2] = $conv2947;
       _arParamIdeal2ObservLTf($paramLTf, $conv2935, $conv2947, $xc2, $yc2) | 0;
       $326 = +HEAPF32[$xc2 >> 2];
       $327 = +HEAPF32[$yc2 >> 2];
       if ($cmp2949) {
        $xc$18 = ((~~($326 + 1.0) | 0) / 2 | 0) << 1;
        $yc$18 = ((~~($327 + 1.0) | 0) / 2 | 0) << 1;
       } else {
        $xc$18 = ~~($326 + .5);
        $yc$18 = ~~($327 + .5);
       }
       if (($xc$18 | 0) > -1) if (($yc$18 | 0) < ($ysize | 0) & (($yc$18 | 0) > -1 & ($xc$18 | 0) < ($xsize | 0))) {
        $mul2980 = (Math_imul($yc$18, $xsize) | 0) + $xc$18 << 1;
        $conv2983 = HEAPU8[$image + $mul2980 >> 0] | 0;
        $conv2999 = HEAPU8[$image + ($mul2980 | 1) >> 0] | 0;
        $arrayidx3020 = $call2142 + ((Math_imul(($j$18 | 0) / ($div185 | 0) | 0, $patt_size) | 0) + (($i$20 | 0) / ($div | 0) | 0) << 2) | 0;
        HEAP32[$arrayidx3020 >> 2] = (((($conv2999 << 3 & 248 | 4) + ($conv2983 & 248 | 4) + ($conv2983 << 5 & 224 | $conv2999 >>> 3 & 28 | 2) | 0) >>> 0) / 3 | 0) + (HEAP32[$arrayidx3020 >> 2] | 0);
       }
       $i$20 = $i$20 + 1 | 0;
      }
      $j$18 = $j$18 + 1 | 0;
     }
    }
    if ($cmp1804) {
     $cmp3094 = ($imageProcMode | 0) == 1;
     $j$19 = 0;
     while (1) {
      if (($j$19 | 0) >= ($ydiv2$3 | 0)) {
       $i$23 = 0;
       break L244;
      }
      $add3043 = $add206 + $mul189 * (+($j$19 | 0) + .5) / $conv210;
      $i$21 = 0;
      while (1) {
       if (($i$21 | 0) >= ($sample_size$xdiv2$2 | 0)) break;
       $add3054 = $add206 + $mul189 * (+($i$21 | 0) + .5) / $conv221;
       $add3064 = +HEAPF64[$arrayidx232 >> 3] + ($add3054 * +HEAPF64[$arrayidx225 >> 3] + $add3043 * +HEAPF64[$arrayidx228 >> 3]);
       if ($add3064 == 0.0) {
        $362 = $call2142;
        label = 309;
        break L15;
       }
       $conv3080 = (+HEAPF64[$arrayidx246 >> 3] + ($add3054 * +HEAPF64[$para >> 3] + $add3043 * +HEAPF64[$arrayidx242 >> 3])) / $add3064;
       HEAPF32[$xc2 >> 2] = $conv3080;
       $conv3092 = (+HEAPF64[$arrayidx258 >> 3] + ($add3054 * +HEAPF64[$arrayidx251 >> 3] + $add3043 * +HEAPF64[$arrayidx254 >> 3])) / $add3064;
       HEAPF32[$yc2 >> 2] = $conv3092;
       _arParamIdeal2ObservLTf($paramLTf, $conv3080, $conv3092, $xc2, $yc2) | 0;
       $340 = +HEAPF32[$xc2 >> 2];
       $341 = +HEAPF32[$yc2 >> 2];
       if ($cmp3094) {
        $xc$19 = ((~~($340 + 1.0) | 0) / 2 | 0) << 1;
        $yc$19 = ((~~($341 + 1.0) | 0) / 2 | 0) << 1;
       } else {
        $xc$19 = ~~($340 + .5);
        $yc$19 = ~~($341 + .5);
       }
       if (($xc$19 | 0) > -1) if (($yc$19 | 0) < ($ysize | 0) & (($yc$19 | 0) > -1 & ($xc$19 | 0) < ($xsize | 0))) {
        $mul3125 = (Math_imul($yc$19, $xsize) | 0) + $xc$19 << 1;
        $conv3128 = HEAPU8[$image + $mul3125 >> 0] | 0;
        $conv3144 = HEAPU8[$image + ($mul3125 | 1) >> 0] | 0;
        $arrayidx3165 = $call2142 + ((Math_imul(($j$19 | 0) / ($div185 | 0) | 0, $patt_size) | 0) + (($i$21 | 0) / ($div | 0) | 0) << 2) | 0;
        HEAP32[$arrayidx3165 >> 2] = (((($conv3144 << 2 & 248 | 4) + ($conv3128 & 248 | 4) + ($conv3128 << 5 & 224 | $conv3144 >>> 3 & 24 | 4) | 0) >>> 0) / 3 | 0) + (HEAP32[$arrayidx3165 >> 2] | 0);
       }
       $i$21 = $i$21 + 1 | 0;
      }
      $j$19 = $j$19 + 1 | 0;
     }
    }
    if (!$cmp1964) {
     _arLog(3, 3967, $vararg_buffer5);
     $362 = $call2142;
     label = 309;
     break L15;
    }
    $cmp3239 = ($imageProcMode | 0) == 1;
    $j$20 = 0;
    while (1) {
     if (($j$20 | 0) >= ($ydiv2$3 | 0)) {
      $i$23 = 0;
      break L244;
     }
     $add3188 = $add206 + $mul189 * (+($j$20 | 0) + .5) / $conv210;
     $i$22 = 0;
     while (1) {
      if (($i$22 | 0) >= ($sample_size$xdiv2$2 | 0)) break;
      $add3199 = $add206 + $mul189 * (+($i$22 | 0) + .5) / $conv221;
      $add3209 = +HEAPF64[$arrayidx232 >> 3] + ($add3199 * +HEAPF64[$arrayidx225 >> 3] + $add3188 * +HEAPF64[$arrayidx228 >> 3]);
      if ($add3209 == 0.0) {
       $362 = $call2142;
       label = 309;
       break L15;
      }
      $conv3225 = (+HEAPF64[$arrayidx246 >> 3] + ($add3199 * +HEAPF64[$para >> 3] + $add3188 * +HEAPF64[$arrayidx242 >> 3])) / $add3209;
      HEAPF32[$xc2 >> 2] = $conv3225;
      $conv3237 = (+HEAPF64[$arrayidx258 >> 3] + ($add3199 * +HEAPF64[$arrayidx251 >> 3] + $add3188 * +HEAPF64[$arrayidx254 >> 3])) / $add3209;
      HEAPF32[$yc2 >> 2] = $conv3237;
      _arParamIdeal2ObservLTf($paramLTf, $conv3225, $conv3237, $xc2, $yc2) | 0;
      $354 = +HEAPF32[$xc2 >> 2];
      $355 = +HEAPF32[$yc2 >> 2];
      if ($cmp3239) {
       $xc$20 = ((~~($354 + 1.0) | 0) / 2 | 0) << 1;
       $yc$20 = ((~~($355 + 1.0) | 0) / 2 | 0) << 1;
      } else {
       $xc$20 = ~~($354 + .5);
       $yc$20 = ~~($355 + .5);
      }
      if (($xc$20 | 0) > -1) if (($yc$20 | 0) < ($ysize | 0) & (($yc$20 | 0) > -1 & ($xc$20 | 0) < ($xsize | 0))) {
       $mul3270 = (Math_imul($yc$20, $xsize) | 0) + $xc$20 << 1;
       $conv3273 = HEAPU8[$image + $mul3270 >> 0] | 0;
       $arrayidx3300 = $call2142 + ((Math_imul(($j$20 | 0) / ($div185 | 0) | 0, $patt_size) | 0) + (($i$22 | 0) / ($div | 0) | 0) << 2) | 0;
       HEAP32[$arrayidx3300 >> 2] = (((($conv3273 << 4 & 240 | 8) + ($conv3273 & 240 | 8) + ((HEAP8[$image + ($mul3270 | 1) >> 0] & -16 | 8) & 255) | 0) >>> 0) / 3 | 0) + (HEAP32[$arrayidx3300 >> 2] | 0);
      }
      $i$22 = $i$22 + 1 | 0;
     }
     $j$20 = $j$20 + 1 | 0;
    }
   }
  } while (0);
  while (1) {
   if (($i$23 | 0) >= ($mul193 | 0)) break;
   HEAP8[$ext_patt + $i$23 >> 0] = ((HEAP32[$call2142 + ($i$23 << 2) >> 2] | 0) >>> 0) / ($mul2133 >>> 0) | 0;
   $i$23 = $i$23 + 1 | 0;
  }
  _free($call2142);
  $retval$0 = 0;
 } while (0);
 if ((label | 0) == 309) {
  _free($362);
  $retval$0 = -1;
 }
 STACKTOP = sp;
 return $retval$0 | 0;
}

function _malloc($bytes) {
 $bytes = $bytes | 0;
 var $$pre$phi$i$iZ2D = 0, $$pre$phi$i176Z2D = 0, $$pre$phi$i46$iZ2D = 0, $$pre$phi$iZ2D = 0, $$pre$phiZ2D = 0, $$v$0$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $102 = 0, $103 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $112 = 0, $116 = 0, $117 = 0, $121 = 0, $124 = 0, $125 = 0, $126 = 0, $129 = 0, $13 = 0, $132 = 0, $134 = 0, $137 = 0, $139 = 0, $14 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $15 = 0, $151 = 0, $152 = 0, $153 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $165 = 0, $166 = 0, $167 = 0, $170 = 0, $171 = 0, $172 = 0, $174 = 0, $177 = 0, $179 = 0, $18 = 0, $180 = 0, $182 = 0, $185 = 0, $187 = 0, $19 = 0, $190 = 0, $192 = 0, $193 = 0, $194 = 0, $196 = 0, $199 = 0, $2 = 0, $201 = 0, $202 = 0, $204 = 0, $205 = 0, $22 = 0, $23 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $41 = 0, $42 = 0, $43 = 0, $46 = 0, $47 = 0, $48 = 0, $50 = 0, $51 = 0, $53 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $74 = 0, $75 = 0, $76 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $83 = 0, $86 = 0, $88 = 0, $89 = 0, $9 = 0, $91 = 0, $92 = 0, $94 = 0, $95 = 0, $98 = 0, $99 = 0, $F$0$i$i = 0, $F104$0 = 0, $F197$0$i = 0, $F224$0$i$i = 0, $F290$0$i = 0, $I252$0$i$i = 0, $I316$0$i = 0, $I57$0$i$i = 0, $K105$0$i$i = 0, $K305$0$i$i = 0, $K373$0$i = 0, $R$1$i = 0, $R$1$i$i = 0, $R$1$i165 = 0, $R$3$i = 0, $R$3$i$i = 0, $R$3$i168 = 0, $RP$1$i = 0, $RP$1$i$i = 0, $RP$1$i164 = 0, $T$0$i = 0, $T$0$i$i = 0, $T$0$i47$i = 0, $add$i$i = 0, $add$i179 = 0, $add$ptr$i = 0, $add$ptr$i$i$i = 0, $add$ptr$i158 = 0, $add$ptr14$i$i = 0, $add$ptr16$i$i = 0, $add$ptr166 = 0, $add$ptr17$i$i = 0, $add$ptr193 = 0, $add$ptr2$i$i = 0, $add$ptr227$i = 0, $add$ptr262$i = 0, $add$ptr4$i$i = 0, $add$ptr4$i$i$i = 0, $add$ptr4$i26$i = 0, $add$ptr4$i54$i = 0, $add$ptr7$i$i = 0, $add$ptr81$i$i = 0, $add$ptr95 = 0, $add144 = 0, $add150$i = 0, $add17$i = 0, $add17$i182 = 0, $add177$i = 0, $add26$i$i = 0, $add268$i = 0, $add278$i$i = 0, $add346$i = 0, $add54$i = 0, $add64 = 0, $add8 = 0, $add83$i$i = 0, $add9$i = 0, $and$i142 = 0, $and104$i = 0, $and11$add51$i = 0, $and11$i = 0, $and12$i = 0, $and13$i = 0, $and145 = 0, $and17$i = 0, $and194$i = 0, $and264$i$i = 0, $and268$i$i = 0, $and273$i$i = 0, $and3$i = 0, $and331$i = 0, $and336$i = 0, $and341$i = 0, $and37$i$i = 0, $and41 = 0, $and46 = 0, $and49 = 0, $and53 = 0, $and57 = 0, $and6$i = 0, $and6$i$i = 0, $and61 = 0, $and64$i = 0, $and69$i$i = 0, $and73$i = 0, $and73$i$i = 0, $and74 = 0, $and77$i = 0, $and78$i$i = 0, $and8$i = 0, $and80$i = 0, $and81$i = 0, $and85$i = 0, $and89$i = 0, $and9$i = 0, $arrayidx = 0, $arrayidx$i$i = 0, $arrayidx$i14$i = 0, $arrayidx$i37$i = 0, $arrayidx103 = 0, $arrayidx103$i$i = 0, $arrayidx107$i$i = 0, $arrayidx123$i$i = 0, $arrayidx126$i$i = 0, $arrayidx151$i = 0, $arrayidx155$i = 0, $arrayidx161$i = 0, $arrayidx165$i166 = 0, $arrayidx184$i = 0, $arrayidx196$i = 0, $arrayidx223$i$i = 0, $arrayidx287$i$i = 0, $arrayidx289$i = 0, $arrayidx325$i$i = 0, $arrayidx355$i = 0, $arrayidx394$i = 0, $arrayidx61$i = 0, $arrayidx65$i = 0, $arrayidx66 = 0, $arrayidx71$i = 0, $arrayidx75$i = 0, $arrayidx91$i$i = 0, $arrayidx94$i = 0, $arrayidx96$i$i = 0, $bk = 0, $bk136$i = 0, $bk47$i = 0, $bk78 = 0, $bk82$i$i = 0, $br$2$ph$i = 0, $call131$i = 0, $call132$i = 0, $call275$i = 0, $call37$i = 0, $call68$i = 0, $call83$i = 0, $child$i$i = 0, $child166$i$i = 0, $child289$i$i = 0, $child357$i = 0, $cmp102$i = 0, $cmp141$i = 0, $cmp32$i = 0, $cmp49$i = 0, $cond = 0, $cond$i$i$i = 0, $cond$i19$i = 0, $cond$i53$i = 0, $cond13$i$i = 0, $fd139$i = 0, $fd148$i$i = 0, $fd344$i$i = 0, $fd416$i = 0, $fd50$i = 0, $fd59$i$i = 0, $fd68$pre$phi$i$iZ2D = 0, $fd69 = 0, $fd85$i$i = 0, $fd9 = 0, $head$i$i = 0, $head179 = 0, $head182$i = 0, $head208$i$i = 0, $head25 = 0, $head274$i = 0, $i$01$i$i = 0, $idx$0$i = 0, $magic$i$i = 0, $nb$0 = 0, $neg$i181 = 0, $oldfirst$0$i$i = 0, $qsize$0$i$i = 0, $retval$0 = 0, $rsize$0$i = 0, $rsize$0$lcssa$i = 0, $rsize$08$i = 0, $rsize$1$i = 0, $rsize$3$i = 0, $rsize$4$lcssa$i = 0, $rsize$49$i = 0, $rst$0$i = 0, $rst$1$i = 0, $shl$i143 = 0, $shl105 = 0, $shl198$i = 0, $shl22 = 0, $shl226$i$i = 0, $shl265$i$i = 0, $shl270$i$i = 0, $shl291$i = 0, $shl294$i$i = 0, $shl333$i = 0, $shl338$i = 0, $shl362$i = 0, $shl37 = 0, $shl39$i$i = 0, $shl60$i = 0, $shl70$i$i = 0, $shl75$i$i = 0, $shl9$i = 0, $shl95$i$i = 0, $shr = 0, $shr$i$i = 0, $shr$i139 = 0, $shr$i34$i = 0, $shr101 = 0, $shr11$i = 0, $shr15$i = 0, $shr194$i = 0, $shr214$i$i = 0, $shr253$i$i = 0, $shr283$i = 0, $shr3 = 0, $shr318$i = 0, $shr4$i = 0, $shr47 = 0, $shr51 = 0, $shr55 = 0, $shr58$i$i = 0, $shr59 = 0, $shr7$i = 0, $shr75$i = 0, $shr79$i = 0, $shr83$i = 0, $shr87$i = 0, $size$i$i = 0, $size188$i = 0, $size245$i = 0, $sizebits$0$i = 0, $sp$0$i$i = 0, $sp$0$i$i$i = 0, $sp$0108$i = 0, $sp$1107$i = 0, $ssize$2$ph$i = 0, $sub$i138 = 0, $sub$i180 = 0, $sub$ptr$sub$i = 0, $sub$ptr$sub$i$i = 0, $sub101$i = 0, $sub101$rsize$4$i = 0, $sub112$i = 0, $sub160 = 0, $sub18$i$i = 0, $sub190 = 0, $sub2$i = 0, $sub22$i = 0, $sub260$i = 0, $sub31$i = 0, $sub31$rsize$0$i = 0, $sub33$i = 0, $sub41$i = 0, $sub44 = 0, $sub5$i$i = 0, $sub5$i$i$i = 0, $sub5$i55$i = 0, $sub70$i = 0, $sub91 = 0, $t$0$i = 0, $t$2$i = 0, $t$4$ph$i = 0, $t$4$v$4$i = 0, $t$48$i = 0, $tbase$796$i = 0, $tsize$2657583$i = 0, $tsize$4$i = 0, $tsize$795$i = 0, $v$0$i = 0, $v$0$lcssa$i = 0, $v$09$i = 0, $v$1$i = 0, $v$3$i = 0, $v$4$lcssa$i = 0, $v$4$ph$i = 0, $v$410$i = 0, label = 0, sp = 0, $190$looptemp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $magic$i$i = sp;
 do if ($bytes >>> 0 < 245) {
  $cond = $bytes >>> 0 < 11 ? 16 : $bytes + 11 & -8;
  $shr = $cond >>> 3;
  $0 = HEAP32[4298] | 0;
  $shr3 = $0 >>> $shr;
  if ($shr3 & 3 | 0) {
   $add8 = ($shr3 & 1 ^ 1) + $shr | 0;
   $arrayidx = 17232 + ($add8 << 1 << 2) | 0;
   $1 = $arrayidx + 8 | 0;
   $2 = HEAP32[$1 >> 2] | 0;
   $fd9 = $2 + 8 | 0;
   $3 = HEAP32[$fd9 >> 2] | 0;
   do if (($arrayidx | 0) == ($3 | 0)) HEAP32[4298] = $0 & ~(1 << $add8); else {
    if ($3 >>> 0 < (HEAP32[4302] | 0) >>> 0) _abort();
    $bk = $3 + 12 | 0;
    if ((HEAP32[$bk >> 2] | 0) == ($2 | 0)) {
     HEAP32[$bk >> 2] = $arrayidx;
     HEAP32[$1 >> 2] = $3;
     break;
    } else _abort();
   } while (0);
   $shl22 = $add8 << 3;
   HEAP32[$2 + 4 >> 2] = $shl22 | 3;
   $head25 = $2 + $shl22 + 4 | 0;
   HEAP32[$head25 >> 2] = HEAP32[$head25 >> 2] | 1;
   $retval$0 = $fd9;
   STACKTOP = sp;
   return $retval$0 | 0;
  }
  $7 = HEAP32[4300] | 0;
  if ($cond >>> 0 > $7 >>> 0) {
   if ($shr3 | 0) {
    $shl37 = 2 << $shr;
    $and41 = $shr3 << $shr & ($shl37 | 0 - $shl37);
    $sub44 = ($and41 & 0 - $and41) + -1 | 0;
    $and46 = $sub44 >>> 12 & 16;
    $shr47 = $sub44 >>> $and46;
    $and49 = $shr47 >>> 5 & 8;
    $shr51 = $shr47 >>> $and49;
    $and53 = $shr51 >>> 2 & 4;
    $shr55 = $shr51 >>> $and53;
    $and57 = $shr55 >>> 1 & 2;
    $shr59 = $shr55 >>> $and57;
    $and61 = $shr59 >>> 1 & 1;
    $add64 = ($and49 | $and46 | $and53 | $and57 | $and61) + ($shr59 >>> $and61) | 0;
    $arrayidx66 = 17232 + ($add64 << 1 << 2) | 0;
    $8 = $arrayidx66 + 8 | 0;
    $9 = HEAP32[$8 >> 2] | 0;
    $fd69 = $9 + 8 | 0;
    $10 = HEAP32[$fd69 >> 2] | 0;
    do if (($arrayidx66 | 0) == ($10 | 0)) {
     $and74 = $0 & ~(1 << $add64);
     HEAP32[4298] = $and74;
     $14 = $and74;
    } else {
     if ($10 >>> 0 < (HEAP32[4302] | 0) >>> 0) _abort();
     $bk78 = $10 + 12 | 0;
     if ((HEAP32[$bk78 >> 2] | 0) == ($9 | 0)) {
      HEAP32[$bk78 >> 2] = $arrayidx66;
      HEAP32[$8 >> 2] = $10;
      $14 = $0;
      break;
     } else _abort();
    } while (0);
    $sub91 = ($add64 << 3) - $cond | 0;
    HEAP32[$9 + 4 >> 2] = $cond | 3;
    $add$ptr95 = $9 + $cond | 0;
    HEAP32[$add$ptr95 + 4 >> 2] = $sub91 | 1;
    HEAP32[$add$ptr95 + $sub91 >> 2] = $sub91;
    if ($7 | 0) {
     $13 = HEAP32[4303] | 0;
     $shr101 = $7 >>> 3;
     $arrayidx103 = 17232 + ($shr101 << 1 << 2) | 0;
     $shl105 = 1 << $shr101;
     if (!($14 & $shl105)) {
      HEAP32[4298] = $14 | $shl105;
      $$pre$phiZ2D = $arrayidx103 + 8 | 0;
      $F104$0 = $arrayidx103;
     } else {
      $15 = $arrayidx103 + 8 | 0;
      $16 = HEAP32[$15 >> 2] | 0;
      if ($16 >>> 0 < (HEAP32[4302] | 0) >>> 0) _abort(); else {
       $$pre$phiZ2D = $15;
       $F104$0 = $16;
      }
     }
     HEAP32[$$pre$phiZ2D >> 2] = $13;
     HEAP32[$F104$0 + 12 >> 2] = $13;
     HEAP32[$13 + 8 >> 2] = $F104$0;
     HEAP32[$13 + 12 >> 2] = $arrayidx103;
    }
    HEAP32[4300] = $sub91;
    HEAP32[4303] = $add$ptr95;
    $retval$0 = $fd69;
    STACKTOP = sp;
    return $retval$0 | 0;
   }
   $18 = HEAP32[4299] | 0;
   if (!$18) $nb$0 = $cond; else {
    $sub2$i = ($18 & 0 - $18) + -1 | 0;
    $and3$i = $sub2$i >>> 12 & 16;
    $shr4$i = $sub2$i >>> $and3$i;
    $and6$i = $shr4$i >>> 5 & 8;
    $shr7$i = $shr4$i >>> $and6$i;
    $and9$i = $shr7$i >>> 2 & 4;
    $shr11$i = $shr7$i >>> $and9$i;
    $and13$i = $shr11$i >>> 1 & 2;
    $shr15$i = $shr11$i >>> $and13$i;
    $and17$i = $shr15$i >>> 1 & 1;
    $19 = HEAP32[17496 + (($and6$i | $and3$i | $and9$i | $and13$i | $and17$i) + ($shr15$i >>> $and17$i) << 2) >> 2] | 0;
    $sub22$i = (HEAP32[$19 + 4 >> 2] & -8) - $cond | 0;
    $22 = HEAP32[$19 + 16 + (((HEAP32[$19 + 16 >> 2] | 0) == 0 & 1) << 2) >> 2] | 0;
    if (!$22) {
     $rsize$0$lcssa$i = $sub22$i;
     $v$0$lcssa$i = $19;
    } else {
     $23 = $22;
     $rsize$08$i = $sub22$i;
     $v$09$i = $19;
     while (1) {
      $sub31$i = (HEAP32[$23 + 4 >> 2] & -8) - $cond | 0;
      $cmp32$i = $sub31$i >>> 0 < $rsize$08$i >>> 0;
      $sub31$rsize$0$i = $cmp32$i ? $sub31$i : $rsize$08$i;
      $$v$0$i = $cmp32$i ? $23 : $v$09$i;
      $23 = HEAP32[$23 + 16 + (((HEAP32[$23 + 16 >> 2] | 0) == 0 & 1) << 2) >> 2] | 0;
      if (!$23) {
       $rsize$0$lcssa$i = $sub31$rsize$0$i;
       $v$0$lcssa$i = $$v$0$i;
       break;
      } else {
       $rsize$08$i = $sub31$rsize$0$i;
       $v$09$i = $$v$0$i;
      }
     }
    }
    $27 = HEAP32[4302] | 0;
    if ($v$0$lcssa$i >>> 0 < $27 >>> 0) _abort();
    $add$ptr$i = $v$0$lcssa$i + $cond | 0;
    if ($v$0$lcssa$i >>> 0 >= $add$ptr$i >>> 0) _abort();
    $28 = HEAP32[$v$0$lcssa$i + 24 >> 2] | 0;
    $29 = HEAP32[$v$0$lcssa$i + 12 >> 2] | 0;
    do if (($29 | 0) == ($v$0$lcssa$i | 0)) {
     $arrayidx61$i = $v$0$lcssa$i + 20 | 0;
     $33 = HEAP32[$arrayidx61$i >> 2] | 0;
     if (!$33) {
      $arrayidx65$i = $v$0$lcssa$i + 16 | 0;
      $34 = HEAP32[$arrayidx65$i >> 2] | 0;
      if (!$34) {
       $R$3$i = 0;
       break;
      } else {
       $R$1$i = $34;
       $RP$1$i = $arrayidx65$i;
      }
     } else {
      $R$1$i = $33;
      $RP$1$i = $arrayidx61$i;
     }
     while (1) {
      $arrayidx71$i = $R$1$i + 20 | 0;
      $35 = HEAP32[$arrayidx71$i >> 2] | 0;
      if ($35 | 0) {
       $R$1$i = $35;
       $RP$1$i = $arrayidx71$i;
       continue;
      }
      $arrayidx75$i = $R$1$i + 16 | 0;
      $36 = HEAP32[$arrayidx75$i >> 2] | 0;
      if (!$36) break; else {
       $R$1$i = $36;
       $RP$1$i = $arrayidx75$i;
      }
     }
     if ($RP$1$i >>> 0 < $27 >>> 0) _abort(); else {
      HEAP32[$RP$1$i >> 2] = 0;
      $R$3$i = $R$1$i;
      break;
     }
    } else {
     $30 = HEAP32[$v$0$lcssa$i + 8 >> 2] | 0;
     if ($30 >>> 0 < $27 >>> 0) _abort();
     $bk47$i = $30 + 12 | 0;
     if ((HEAP32[$bk47$i >> 2] | 0) != ($v$0$lcssa$i | 0)) _abort();
     $fd50$i = $29 + 8 | 0;
     if ((HEAP32[$fd50$i >> 2] | 0) == ($v$0$lcssa$i | 0)) {
      HEAP32[$bk47$i >> 2] = $29;
      HEAP32[$fd50$i >> 2] = $30;
      $R$3$i = $29;
      break;
     } else _abort();
    } while (0);
    L73 : do if ($28 | 0) {
     $37 = HEAP32[$v$0$lcssa$i + 28 >> 2] | 0;
     $arrayidx94$i = 17496 + ($37 << 2) | 0;
     do if (($v$0$lcssa$i | 0) == (HEAP32[$arrayidx94$i >> 2] | 0)) {
      HEAP32[$arrayidx94$i >> 2] = $R$3$i;
      if (!$R$3$i) {
       HEAP32[4299] = $18 & ~(1 << $37);
       break L73;
      }
     } else if ($28 >>> 0 < (HEAP32[4302] | 0) >>> 0) _abort(); else {
      HEAP32[$28 + 16 + (((HEAP32[$28 + 16 >> 2] | 0) != ($v$0$lcssa$i | 0) & 1) << 2) >> 2] = $R$3$i;
      if (!$R$3$i) break L73; else break;
     } while (0);
     $41 = HEAP32[4302] | 0;
     if ($R$3$i >>> 0 < $41 >>> 0) _abort();
     HEAP32[$R$3$i + 24 >> 2] = $28;
     $42 = HEAP32[$v$0$lcssa$i + 16 >> 2] | 0;
     do if ($42 | 0) if ($42 >>> 0 < $41 >>> 0) _abort(); else {
      HEAP32[$R$3$i + 16 >> 2] = $42;
      HEAP32[$42 + 24 >> 2] = $R$3$i;
      break;
     } while (0);
     $43 = HEAP32[$v$0$lcssa$i + 20 >> 2] | 0;
     if ($43 | 0) if ($43 >>> 0 < (HEAP32[4302] | 0) >>> 0) _abort(); else {
      HEAP32[$R$3$i + 20 >> 2] = $43;
      HEAP32[$43 + 24 >> 2] = $R$3$i;
      break;
     }
    } while (0);
    if ($rsize$0$lcssa$i >>> 0 < 16) {
     $add177$i = $rsize$0$lcssa$i + $cond | 0;
     HEAP32[$v$0$lcssa$i + 4 >> 2] = $add177$i | 3;
     $head182$i = $v$0$lcssa$i + $add177$i + 4 | 0;
     HEAP32[$head182$i >> 2] = HEAP32[$head182$i >> 2] | 1;
    } else {
     HEAP32[$v$0$lcssa$i + 4 >> 2] = $cond | 3;
     HEAP32[$add$ptr$i + 4 >> 2] = $rsize$0$lcssa$i | 1;
     HEAP32[$add$ptr$i + $rsize$0$lcssa$i >> 2] = $rsize$0$lcssa$i;
     if ($7 | 0) {
      $46 = HEAP32[4303] | 0;
      $shr194$i = $7 >>> 3;
      $arrayidx196$i = 17232 + ($shr194$i << 1 << 2) | 0;
      $shl198$i = 1 << $shr194$i;
      if (!($0 & $shl198$i)) {
       HEAP32[4298] = $0 | $shl198$i;
       $$pre$phi$iZ2D = $arrayidx196$i + 8 | 0;
       $F197$0$i = $arrayidx196$i;
      } else {
       $47 = $arrayidx196$i + 8 | 0;
       $48 = HEAP32[$47 >> 2] | 0;
       if ($48 >>> 0 < (HEAP32[4302] | 0) >>> 0) _abort(); else {
        $$pre$phi$iZ2D = $47;
        $F197$0$i = $48;
       }
      }
      HEAP32[$$pre$phi$iZ2D >> 2] = $46;
      HEAP32[$F197$0$i + 12 >> 2] = $46;
      HEAP32[$46 + 8 >> 2] = $F197$0$i;
      HEAP32[$46 + 12 >> 2] = $arrayidx196$i;
     }
     HEAP32[4300] = $rsize$0$lcssa$i;
     HEAP32[4303] = $add$ptr$i;
    }
    $retval$0 = $v$0$lcssa$i + 8 | 0;
    STACKTOP = sp;
    return $retval$0 | 0;
   }
  } else $nb$0 = $cond;
 } else if ($bytes >>> 0 > 4294967231) $nb$0 = -1; else {
  $add144 = $bytes + 11 | 0;
  $and145 = $add144 & -8;
  $50 = HEAP32[4299] | 0;
  if (!$50) $nb$0 = $and145; else {
   $sub$i138 = 0 - $and145 | 0;
   $shr$i139 = $add144 >>> 8;
   if (!$shr$i139) $idx$0$i = 0; else if ($and145 >>> 0 > 16777215) $idx$0$i = 31; else {
    $and$i142 = ($shr$i139 + 1048320 | 0) >>> 16 & 8;
    $shl$i143 = $shr$i139 << $and$i142;
    $and8$i = ($shl$i143 + 520192 | 0) >>> 16 & 4;
    $shl9$i = $shl$i143 << $and8$i;
    $and12$i = ($shl9$i + 245760 | 0) >>> 16 & 2;
    $add17$i = 14 - ($and8$i | $and$i142 | $and12$i) + ($shl9$i << $and12$i >>> 15) | 0;
    $idx$0$i = $and145 >>> ($add17$i + 7 | 0) & 1 | $add17$i << 1;
   }
   $51 = HEAP32[17496 + ($idx$0$i << 2) >> 2] | 0;
   L117 : do if (!$51) {
    $rsize$3$i = $sub$i138;
    $t$2$i = 0;
    $v$3$i = 0;
    label = 81;
   } else {
    $rsize$0$i = $sub$i138;
    $rst$0$i = 0;
    $sizebits$0$i = $and145 << (($idx$0$i | 0) == 31 ? 0 : 25 - ($idx$0$i >>> 1) | 0);
    $t$0$i = $51;
    $v$0$i = 0;
    while (1) {
     $sub33$i = (HEAP32[$t$0$i + 4 >> 2] & -8) - $and145 | 0;
     if ($sub33$i >>> 0 < $rsize$0$i >>> 0) if (!$sub33$i) {
      $rsize$49$i = 0;
      $t$48$i = $t$0$i;
      $v$410$i = $t$0$i;
      label = 85;
      break L117;
     } else {
      $rsize$1$i = $sub33$i;
      $v$1$i = $t$0$i;
     } else {
      $rsize$1$i = $rsize$0$i;
      $v$1$i = $v$0$i;
     }
     $53 = HEAP32[$t$0$i + 20 >> 2] | 0;
     $t$0$i = HEAP32[$t$0$i + 16 + ($sizebits$0$i >>> 31 << 2) >> 2] | 0;
     $rst$1$i = ($53 | 0) == 0 | ($53 | 0) == ($t$0$i | 0) ? $rst$0$i : $53;
     $cmp49$i = ($t$0$i | 0) == 0;
     if ($cmp49$i) {
      $rsize$3$i = $rsize$1$i;
      $t$2$i = $rst$1$i;
      $v$3$i = $v$1$i;
      label = 81;
      break;
     } else {
      $rsize$0$i = $rsize$1$i;
      $rst$0$i = $rst$1$i;
      $sizebits$0$i = $sizebits$0$i << (($cmp49$i ^ 1) & 1);
      $v$0$i = $v$1$i;
     }
    }
   } while (0);
   if ((label | 0) == 81) {
    if (($t$2$i | 0) == 0 & ($v$3$i | 0) == 0) {
     $shl60$i = 2 << $idx$0$i;
     $and64$i = $50 & ($shl60$i | 0 - $shl60$i);
     if (!$and64$i) {
      $nb$0 = $and145;
      break;
     }
     $sub70$i = ($and64$i & 0 - $and64$i) + -1 | 0;
     $and73$i = $sub70$i >>> 12 & 16;
     $shr75$i = $sub70$i >>> $and73$i;
     $and77$i = $shr75$i >>> 5 & 8;
     $shr79$i = $shr75$i >>> $and77$i;
     $and81$i = $shr79$i >>> 2 & 4;
     $shr83$i = $shr79$i >>> $and81$i;
     $and85$i = $shr83$i >>> 1 & 2;
     $shr87$i = $shr83$i >>> $and85$i;
     $and89$i = $shr87$i >>> 1 & 1;
     $t$4$ph$i = HEAP32[17496 + (($and77$i | $and73$i | $and81$i | $and85$i | $and89$i) + ($shr87$i >>> $and89$i) << 2) >> 2] | 0;
     $v$4$ph$i = 0;
    } else {
     $t$4$ph$i = $t$2$i;
     $v$4$ph$i = $v$3$i;
    }
    if (!$t$4$ph$i) {
     $rsize$4$lcssa$i = $rsize$3$i;
     $v$4$lcssa$i = $v$4$ph$i;
    } else {
     $rsize$49$i = $rsize$3$i;
     $t$48$i = $t$4$ph$i;
     $v$410$i = $v$4$ph$i;
     label = 85;
    }
   }
   if ((label | 0) == 85) while (1) {
    label = 0;
    $sub101$i = (HEAP32[$t$48$i + 4 >> 2] & -8) - $and145 | 0;
    $cmp102$i = $sub101$i >>> 0 < $rsize$49$i >>> 0;
    $sub101$rsize$4$i = $cmp102$i ? $sub101$i : $rsize$49$i;
    $t$4$v$4$i = $cmp102$i ? $t$48$i : $v$410$i;
    $t$48$i = HEAP32[$t$48$i + 16 + (((HEAP32[$t$48$i + 16 >> 2] | 0) == 0 & 1) << 2) >> 2] | 0;
    if (!$t$48$i) {
     $rsize$4$lcssa$i = $sub101$rsize$4$i;
     $v$4$lcssa$i = $t$4$v$4$i;
     break;
    } else {
     $rsize$49$i = $sub101$rsize$4$i;
     $v$410$i = $t$4$v$4$i;
     label = 85;
    }
   }
   if (!$v$4$lcssa$i) $nb$0 = $and145; else if ($rsize$4$lcssa$i >>> 0 < ((HEAP32[4300] | 0) - $and145 | 0) >>> 0) {
    $60 = HEAP32[4302] | 0;
    if ($v$4$lcssa$i >>> 0 < $60 >>> 0) _abort();
    $add$ptr$i158 = $v$4$lcssa$i + $and145 | 0;
    if ($v$4$lcssa$i >>> 0 >= $add$ptr$i158 >>> 0) _abort();
    $61 = HEAP32[$v$4$lcssa$i + 24 >> 2] | 0;
    $62 = HEAP32[$v$4$lcssa$i + 12 >> 2] | 0;
    do if (($62 | 0) == ($v$4$lcssa$i | 0)) {
     $arrayidx151$i = $v$4$lcssa$i + 20 | 0;
     $66 = HEAP32[$arrayidx151$i >> 2] | 0;
     if (!$66) {
      $arrayidx155$i = $v$4$lcssa$i + 16 | 0;
      $67 = HEAP32[$arrayidx155$i >> 2] | 0;
      if (!$67) {
       $R$3$i168 = 0;
       break;
      } else {
       $R$1$i165 = $67;
       $RP$1$i164 = $arrayidx155$i;
      }
     } else {
      $R$1$i165 = $66;
      $RP$1$i164 = $arrayidx151$i;
     }
     while (1) {
      $arrayidx161$i = $R$1$i165 + 20 | 0;
      $68 = HEAP32[$arrayidx161$i >> 2] | 0;
      if ($68 | 0) {
       $R$1$i165 = $68;
       $RP$1$i164 = $arrayidx161$i;
       continue;
      }
      $arrayidx165$i166 = $R$1$i165 + 16 | 0;
      $69 = HEAP32[$arrayidx165$i166 >> 2] | 0;
      if (!$69) break; else {
       $R$1$i165 = $69;
       $RP$1$i164 = $arrayidx165$i166;
      }
     }
     if ($RP$1$i164 >>> 0 < $60 >>> 0) _abort(); else {
      HEAP32[$RP$1$i164 >> 2] = 0;
      $R$3$i168 = $R$1$i165;
      break;
     }
    } else {
     $63 = HEAP32[$v$4$lcssa$i + 8 >> 2] | 0;
     if ($63 >>> 0 < $60 >>> 0) _abort();
     $bk136$i = $63 + 12 | 0;
     if ((HEAP32[$bk136$i >> 2] | 0) != ($v$4$lcssa$i | 0)) _abort();
     $fd139$i = $62 + 8 | 0;
     if ((HEAP32[$fd139$i >> 2] | 0) == ($v$4$lcssa$i | 0)) {
      HEAP32[$bk136$i >> 2] = $62;
      HEAP32[$fd139$i >> 2] = $63;
      $R$3$i168 = $62;
      break;
     } else _abort();
    } while (0);
    L164 : do if (!$61) $83 = $50; else {
     $70 = HEAP32[$v$4$lcssa$i + 28 >> 2] | 0;
     $arrayidx184$i = 17496 + ($70 << 2) | 0;
     do if (($v$4$lcssa$i | 0) == (HEAP32[$arrayidx184$i >> 2] | 0)) {
      HEAP32[$arrayidx184$i >> 2] = $R$3$i168;
      if (!$R$3$i168) {
       $and194$i = $50 & ~(1 << $70);
       HEAP32[4299] = $and194$i;
       $83 = $and194$i;
       break L164;
      }
     } else if ($61 >>> 0 < (HEAP32[4302] | 0) >>> 0) _abort(); else {
      HEAP32[$61 + 16 + (((HEAP32[$61 + 16 >> 2] | 0) != ($v$4$lcssa$i | 0) & 1) << 2) >> 2] = $R$3$i168;
      if (!$R$3$i168) {
       $83 = $50;
       break L164;
      } else break;
     } while (0);
     $74 = HEAP32[4302] | 0;
     if ($R$3$i168 >>> 0 < $74 >>> 0) _abort();
     HEAP32[$R$3$i168 + 24 >> 2] = $61;
     $75 = HEAP32[$v$4$lcssa$i + 16 >> 2] | 0;
     do if ($75 | 0) if ($75 >>> 0 < $74 >>> 0) _abort(); else {
      HEAP32[$R$3$i168 + 16 >> 2] = $75;
      HEAP32[$75 + 24 >> 2] = $R$3$i168;
      break;
     } while (0);
     $76 = HEAP32[$v$4$lcssa$i + 20 >> 2] | 0;
     if (!$76) $83 = $50; else if ($76 >>> 0 < (HEAP32[4302] | 0) >>> 0) _abort(); else {
      HEAP32[$R$3$i168 + 20 >> 2] = $76;
      HEAP32[$76 + 24 >> 2] = $R$3$i168;
      $83 = $50;
      break;
     }
    } while (0);
    do if ($rsize$4$lcssa$i >>> 0 < 16) {
     $add268$i = $rsize$4$lcssa$i + $and145 | 0;
     HEAP32[$v$4$lcssa$i + 4 >> 2] = $add268$i | 3;
     $head274$i = $v$4$lcssa$i + $add268$i + 4 | 0;
     HEAP32[$head274$i >> 2] = HEAP32[$head274$i >> 2] | 1;
    } else {
     HEAP32[$v$4$lcssa$i + 4 >> 2] = $and145 | 3;
     HEAP32[$add$ptr$i158 + 4 >> 2] = $rsize$4$lcssa$i | 1;
     HEAP32[$add$ptr$i158 + $rsize$4$lcssa$i >> 2] = $rsize$4$lcssa$i;
     $shr283$i = $rsize$4$lcssa$i >>> 3;
     if ($rsize$4$lcssa$i >>> 0 < 256) {
      $arrayidx289$i = 17232 + ($shr283$i << 1 << 2) | 0;
      $79 = HEAP32[4298] | 0;
      $shl291$i = 1 << $shr283$i;
      if (!($79 & $shl291$i)) {
       HEAP32[4298] = $79 | $shl291$i;
       $$pre$phi$i176Z2D = $arrayidx289$i + 8 | 0;
       $F290$0$i = $arrayidx289$i;
      } else {
       $80 = $arrayidx289$i + 8 | 0;
       $81 = HEAP32[$80 >> 2] | 0;
       if ($81 >>> 0 < (HEAP32[4302] | 0) >>> 0) _abort(); else {
        $$pre$phi$i176Z2D = $80;
        $F290$0$i = $81;
       }
      }
      HEAP32[$$pre$phi$i176Z2D >> 2] = $add$ptr$i158;
      HEAP32[$F290$0$i + 12 >> 2] = $add$ptr$i158;
      HEAP32[$add$ptr$i158 + 8 >> 2] = $F290$0$i;
      HEAP32[$add$ptr$i158 + 12 >> 2] = $arrayidx289$i;
      break;
     }
     $shr318$i = $rsize$4$lcssa$i >>> 8;
     if (!$shr318$i) $I316$0$i = 0; else if ($rsize$4$lcssa$i >>> 0 > 16777215) $I316$0$i = 31; else {
      $and331$i = ($shr318$i + 1048320 | 0) >>> 16 & 8;
      $shl333$i = $shr318$i << $and331$i;
      $and336$i = ($shl333$i + 520192 | 0) >>> 16 & 4;
      $shl338$i = $shl333$i << $and336$i;
      $and341$i = ($shl338$i + 245760 | 0) >>> 16 & 2;
      $add346$i = 14 - ($and336$i | $and331$i | $and341$i) + ($shl338$i << $and341$i >>> 15) | 0;
      $I316$0$i = $rsize$4$lcssa$i >>> ($add346$i + 7 | 0) & 1 | $add346$i << 1;
     }
     $arrayidx355$i = 17496 + ($I316$0$i << 2) | 0;
     HEAP32[$add$ptr$i158 + 28 >> 2] = $I316$0$i;
     $child357$i = $add$ptr$i158 + 16 | 0;
     HEAP32[$child357$i + 4 >> 2] = 0;
     HEAP32[$child357$i >> 2] = 0;
     $shl362$i = 1 << $I316$0$i;
     if (!($83 & $shl362$i)) {
      HEAP32[4299] = $83 | $shl362$i;
      HEAP32[$arrayidx355$i >> 2] = $add$ptr$i158;
      HEAP32[$add$ptr$i158 + 24 >> 2] = $arrayidx355$i;
      HEAP32[$add$ptr$i158 + 12 >> 2] = $add$ptr$i158;
      HEAP32[$add$ptr$i158 + 8 >> 2] = $add$ptr$i158;
      break;
     }
     $K373$0$i = $rsize$4$lcssa$i << (($I316$0$i | 0) == 31 ? 0 : 25 - ($I316$0$i >>> 1) | 0);
     $T$0$i = HEAP32[$arrayidx355$i >> 2] | 0;
     while (1) {
      if ((HEAP32[$T$0$i + 4 >> 2] & -8 | 0) == ($rsize$4$lcssa$i | 0)) {
       label = 139;
       break;
      }
      $arrayidx394$i = $T$0$i + 16 + ($K373$0$i >>> 31 << 2) | 0;
      $86 = HEAP32[$arrayidx394$i >> 2] | 0;
      if (!$86) {
       label = 136;
       break;
      } else {
       $K373$0$i = $K373$0$i << 1;
       $T$0$i = $86;
      }
     }
     if ((label | 0) == 136) if ($arrayidx394$i >>> 0 < (HEAP32[4302] | 0) >>> 0) _abort(); else {
      HEAP32[$arrayidx394$i >> 2] = $add$ptr$i158;
      HEAP32[$add$ptr$i158 + 24 >> 2] = $T$0$i;
      HEAP32[$add$ptr$i158 + 12 >> 2] = $add$ptr$i158;
      HEAP32[$add$ptr$i158 + 8 >> 2] = $add$ptr$i158;
      break;
     } else if ((label | 0) == 139) {
      $fd416$i = $T$0$i + 8 | 0;
      $88 = HEAP32[$fd416$i >> 2] | 0;
      $89 = HEAP32[4302] | 0;
      if ($88 >>> 0 >= $89 >>> 0 & $T$0$i >>> 0 >= $89 >>> 0) {
       HEAP32[$88 + 12 >> 2] = $add$ptr$i158;
       HEAP32[$fd416$i >> 2] = $add$ptr$i158;
       HEAP32[$add$ptr$i158 + 8 >> 2] = $88;
       HEAP32[$add$ptr$i158 + 12 >> 2] = $T$0$i;
       HEAP32[$add$ptr$i158 + 24 >> 2] = 0;
       break;
      } else _abort();
     }
    } while (0);
    $retval$0 = $v$4$lcssa$i + 8 | 0;
    STACKTOP = sp;
    return $retval$0 | 0;
   } else $nb$0 = $and145;
  }
 } while (0);
 $91 = HEAP32[4300] | 0;
 if ($91 >>> 0 >= $nb$0 >>> 0) {
  $sub160 = $91 - $nb$0 | 0;
  $92 = HEAP32[4303] | 0;
  if ($sub160 >>> 0 > 15) {
   $add$ptr166 = $92 + $nb$0 | 0;
   HEAP32[4303] = $add$ptr166;
   HEAP32[4300] = $sub160;
   HEAP32[$add$ptr166 + 4 >> 2] = $sub160 | 1;
   HEAP32[$add$ptr166 + $sub160 >> 2] = $sub160;
   HEAP32[$92 + 4 >> 2] = $nb$0 | 3;
  } else {
   HEAP32[4300] = 0;
   HEAP32[4303] = 0;
   HEAP32[$92 + 4 >> 2] = $91 | 3;
   $head179 = $92 + $91 + 4 | 0;
   HEAP32[$head179 >> 2] = HEAP32[$head179 >> 2] | 1;
  }
  $retval$0 = $92 + 8 | 0;
  STACKTOP = sp;
  return $retval$0 | 0;
 }
 $94 = HEAP32[4301] | 0;
 if ($94 >>> 0 > $nb$0 >>> 0) {
  $sub190 = $94 - $nb$0 | 0;
  HEAP32[4301] = $sub190;
  $95 = HEAP32[4304] | 0;
  $add$ptr193 = $95 + $nb$0 | 0;
  HEAP32[4304] = $add$ptr193;
  HEAP32[$add$ptr193 + 4 >> 2] = $sub190 | 1;
  HEAP32[$95 + 4 >> 2] = $nb$0 | 3;
  $retval$0 = $95 + 8 | 0;
  STACKTOP = sp;
  return $retval$0 | 0;
 }
 if (!(HEAP32[4416] | 0)) {
  HEAP32[4418] = 4096;
  HEAP32[4417] = 4096;
  HEAP32[4419] = -1;
  HEAP32[4420] = -1;
  HEAP32[4421] = 0;
  HEAP32[4409] = 0;
  $and6$i$i = $magic$i$i & -16 ^ 1431655768;
  HEAP32[$magic$i$i >> 2] = $and6$i$i;
  HEAP32[4416] = $and6$i$i;
  $98 = 4096;
 } else $98 = HEAP32[4418] | 0;
 $add$i179 = $nb$0 + 48 | 0;
 $sub$i180 = $nb$0 + 47 | 0;
 $add9$i = $98 + $sub$i180 | 0;
 $neg$i181 = 0 - $98 | 0;
 $and11$i = $add9$i & $neg$i181;
 if ($and11$i >>> 0 <= $nb$0 >>> 0) {
  $retval$0 = 0;
  STACKTOP = sp;
  return $retval$0 | 0;
 }
 $99 = HEAP32[4408] | 0;
 if ($99 | 0) {
  $100 = HEAP32[4406] | 0;
  $add17$i182 = $100 + $and11$i | 0;
  if ($add17$i182 >>> 0 <= $100 >>> 0 | $add17$i182 >>> 0 > $99 >>> 0) {
   $retval$0 = 0;
   STACKTOP = sp;
   return $retval$0 | 0;
  }
 }
 L244 : do if (!(HEAP32[4409] & 4)) {
  $102 = HEAP32[4304] | 0;
  L246 : do if (!$102) label = 163; else {
   $sp$0$i$i = 17640;
   while (1) {
    $103 = HEAP32[$sp$0$i$i >> 2] | 0;
    if ($103 >>> 0 <= $102 >>> 0) {
     $size$i$i = $sp$0$i$i + 4 | 0;
     if (($103 + (HEAP32[$size$i$i >> 2] | 0) | 0) >>> 0 > $102 >>> 0) break;
    }
    $105 = HEAP32[$sp$0$i$i + 8 >> 2] | 0;
    if (!$105) {
     label = 163;
     break L246;
    } else $sp$0$i$i = $105;
   }
   $and80$i = $add9$i - $94 & $neg$i181;
   if ($and80$i >>> 0 < 2147483647) {
    $call83$i = _sbrk($and80$i | 0) | 0;
    if (($call83$i | 0) == ((HEAP32[$sp$0$i$i >> 2] | 0) + (HEAP32[$size$i$i >> 2] | 0) | 0)) if (($call83$i | 0) == (-1 | 0)) $tsize$2657583$i = $and80$i; else {
     $tbase$796$i = $call83$i;
     $tsize$795$i = $and80$i;
     label = 180;
     break L244;
    } else {
     $br$2$ph$i = $call83$i;
     $ssize$2$ph$i = $and80$i;
     label = 171;
    }
   } else $tsize$2657583$i = 0;
  } while (0);
  do if ((label | 0) == 163) {
   $call37$i = _sbrk(0) | 0;
   if (($call37$i | 0) == (-1 | 0)) $tsize$2657583$i = 0; else {
    $106 = $call37$i;
    $107 = HEAP32[4417] | 0;
    $sub41$i = $107 + -1 | 0;
    $and11$add51$i = (($sub41$i & $106 | 0) == 0 ? 0 : ($sub41$i + $106 & 0 - $107) - $106 | 0) + $and11$i | 0;
    $108 = HEAP32[4406] | 0;
    $add54$i = $and11$add51$i + $108 | 0;
    if ($and11$add51$i >>> 0 > $nb$0 >>> 0 & $and11$add51$i >>> 0 < 2147483647) {
     $109 = HEAP32[4408] | 0;
     if ($109 | 0) if ($add54$i >>> 0 <= $108 >>> 0 | $add54$i >>> 0 > $109 >>> 0) {
      $tsize$2657583$i = 0;
      break;
     }
     $call68$i = _sbrk($and11$add51$i | 0) | 0;
     if (($call68$i | 0) == ($call37$i | 0)) {
      $tbase$796$i = $call37$i;
      $tsize$795$i = $and11$add51$i;
      label = 180;
      break L244;
     } else {
      $br$2$ph$i = $call68$i;
      $ssize$2$ph$i = $and11$add51$i;
      label = 171;
     }
    } else $tsize$2657583$i = 0;
   }
  } while (0);
  do if ((label | 0) == 171) {
   $sub112$i = 0 - $ssize$2$ph$i | 0;
   if (!($add$i179 >>> 0 > $ssize$2$ph$i >>> 0 & ($ssize$2$ph$i >>> 0 < 2147483647 & ($br$2$ph$i | 0) != (-1 | 0)))) if (($br$2$ph$i | 0) == (-1 | 0)) {
    $tsize$2657583$i = 0;
    break;
   } else {
    $tbase$796$i = $br$2$ph$i;
    $tsize$795$i = $ssize$2$ph$i;
    label = 180;
    break L244;
   }
   $112 = HEAP32[4418] | 0;
   $and104$i = $sub$i180 - $ssize$2$ph$i + $112 & 0 - $112;
   if ($and104$i >>> 0 >= 2147483647) {
    $tbase$796$i = $br$2$ph$i;
    $tsize$795$i = $ssize$2$ph$i;
    label = 180;
    break L244;
   }
   if ((_sbrk($and104$i | 0) | 0) == (-1 | 0)) {
    _sbrk($sub112$i | 0) | 0;
    $tsize$2657583$i = 0;
    break;
   } else {
    $tbase$796$i = $br$2$ph$i;
    $tsize$795$i = $and104$i + $ssize$2$ph$i | 0;
    label = 180;
    break L244;
   }
  } while (0);
  HEAP32[4409] = HEAP32[4409] | 4;
  $tsize$4$i = $tsize$2657583$i;
  label = 178;
 } else {
  $tsize$4$i = 0;
  label = 178;
 } while (0);
 if ((label | 0) == 178) if ($and11$i >>> 0 < 2147483647) {
  $call131$i = _sbrk($and11$i | 0) | 0;
  $call132$i = _sbrk(0) | 0;
  $sub$ptr$sub$i = $call132$i - $call131$i | 0;
  $cmp141$i = $sub$ptr$sub$i >>> 0 > ($nb$0 + 40 | 0) >>> 0;
  if (!(($call131$i | 0) == (-1 | 0) | $cmp141$i ^ 1 | $call131$i >>> 0 < $call132$i >>> 0 & (($call131$i | 0) != (-1 | 0) & ($call132$i | 0) != (-1 | 0)) ^ 1)) {
   $tbase$796$i = $call131$i;
   $tsize$795$i = $cmp141$i ? $sub$ptr$sub$i : $tsize$4$i;
   label = 180;
  }
 }
 if ((label | 0) == 180) {
  $add150$i = (HEAP32[4406] | 0) + $tsize$795$i | 0;
  HEAP32[4406] = $add150$i;
  if ($add150$i >>> 0 > (HEAP32[4407] | 0) >>> 0) HEAP32[4407] = $add150$i;
  $116 = HEAP32[4304] | 0;
  do if (!$116) {
   $117 = HEAP32[4302] | 0;
   if (($117 | 0) == 0 | $tbase$796$i >>> 0 < $117 >>> 0) HEAP32[4302] = $tbase$796$i;
   HEAP32[4410] = $tbase$796$i;
   HEAP32[4411] = $tsize$795$i;
   HEAP32[4413] = 0;
   HEAP32[4307] = HEAP32[4416];
   HEAP32[4306] = -1;
   $i$01$i$i = 0;
   do {
    $arrayidx$i14$i = 17232 + ($i$01$i$i << 1 << 2) | 0;
    HEAP32[$arrayidx$i14$i + 12 >> 2] = $arrayidx$i14$i;
    HEAP32[$arrayidx$i14$i + 8 >> 2] = $arrayidx$i14$i;
    $i$01$i$i = $i$01$i$i + 1 | 0;
   } while (($i$01$i$i | 0) != 32);
   $121 = $tbase$796$i + 8 | 0;
   $cond$i19$i = ($121 & 7 | 0) == 0 ? 0 : 0 - $121 & 7;
   $add$ptr4$i$i = $tbase$796$i + $cond$i19$i | 0;
   $sub5$i$i = $tsize$795$i + -40 - $cond$i19$i | 0;
   HEAP32[4304] = $add$ptr4$i$i;
   HEAP32[4301] = $sub5$i$i;
   HEAP32[$add$ptr4$i$i + 4 >> 2] = $sub5$i$i | 1;
   HEAP32[$add$ptr4$i$i + $sub5$i$i + 4 >> 2] = 40;
   HEAP32[4305] = HEAP32[4420];
  } else {
   $sp$0108$i = 17640;
   while (1) {
    $124 = HEAP32[$sp$0108$i >> 2] | 0;
    $size188$i = $sp$0108$i + 4 | 0;
    $125 = HEAP32[$size188$i >> 2] | 0;
    if (($tbase$796$i | 0) == ($124 + $125 | 0)) {
     label = 190;
     break;
    }
    $126 = HEAP32[$sp$0108$i + 8 >> 2] | 0;
    if (!$126) break; else $sp$0108$i = $126;
   }
   if ((label | 0) == 190) if (!(HEAP32[$sp$0108$i + 12 >> 2] & 8)) if ($116 >>> 0 < $tbase$796$i >>> 0 & $116 >>> 0 >= $124 >>> 0) {
    HEAP32[$size188$i >> 2] = $125 + $tsize$795$i;
    $129 = $116 + 8 | 0;
    $cond$i53$i = ($129 & 7 | 0) == 0 ? 0 : 0 - $129 & 7;
    $add$ptr4$i54$i = $116 + $cond$i53$i | 0;
    $sub5$i55$i = (HEAP32[4301] | 0) + ($tsize$795$i - $cond$i53$i) | 0;
    HEAP32[4304] = $add$ptr4$i54$i;
    HEAP32[4301] = $sub5$i55$i;
    HEAP32[$add$ptr4$i54$i + 4 >> 2] = $sub5$i55$i | 1;
    HEAP32[$add$ptr4$i54$i + $sub5$i55$i + 4 >> 2] = 40;
    HEAP32[4305] = HEAP32[4420];
    break;
   }
   $132 = HEAP32[4302] | 0;
   if ($tbase$796$i >>> 0 < $132 >>> 0) {
    HEAP32[4302] = $tbase$796$i;
    $147 = $tbase$796$i;
   } else $147 = $132;
   $add$ptr227$i = $tbase$796$i + $tsize$795$i | 0;
   $sp$1107$i = 17640;
   while (1) {
    if ((HEAP32[$sp$1107$i >> 2] | 0) == ($add$ptr227$i | 0)) {
     label = 198;
     break;
    }
    $134 = HEAP32[$sp$1107$i + 8 >> 2] | 0;
    if (!$134) break; else $sp$1107$i = $134;
   }
   if ((label | 0) == 198) if (!(HEAP32[$sp$1107$i + 12 >> 2] & 8)) {
    HEAP32[$sp$1107$i >> 2] = $tbase$796$i;
    $size245$i = $sp$1107$i + 4 | 0;
    HEAP32[$size245$i >> 2] = (HEAP32[$size245$i >> 2] | 0) + $tsize$795$i;
    $137 = $tbase$796$i + 8 | 0;
    $add$ptr4$i26$i = $tbase$796$i + (($137 & 7 | 0) == 0 ? 0 : 0 - $137 & 7) | 0;
    $139 = $add$ptr227$i + 8 | 0;
    $add$ptr16$i$i = $add$ptr227$i + (($139 & 7 | 0) == 0 ? 0 : 0 - $139 & 7) | 0;
    $add$ptr17$i$i = $add$ptr4$i26$i + $nb$0 | 0;
    $sub18$i$i = $add$ptr16$i$i - $add$ptr4$i26$i - $nb$0 | 0;
    HEAP32[$add$ptr4$i26$i + 4 >> 2] = $nb$0 | 3;
    do if (($add$ptr16$i$i | 0) == ($116 | 0)) {
     $add$i$i = (HEAP32[4301] | 0) + $sub18$i$i | 0;
     HEAP32[4301] = $add$i$i;
     HEAP32[4304] = $add$ptr17$i$i;
     HEAP32[$add$ptr17$i$i + 4 >> 2] = $add$i$i | 1;
    } else {
     if (($add$ptr16$i$i | 0) == (HEAP32[4303] | 0)) {
      $add26$i$i = (HEAP32[4300] | 0) + $sub18$i$i | 0;
      HEAP32[4300] = $add26$i$i;
      HEAP32[4303] = $add$ptr17$i$i;
      HEAP32[$add$ptr17$i$i + 4 >> 2] = $add26$i$i | 1;
      HEAP32[$add$ptr17$i$i + $add26$i$i >> 2] = $add26$i$i;
      break;
     }
     $144 = HEAP32[$add$ptr16$i$i + 4 >> 2] | 0;
     if (($144 & 3 | 0) == 1) {
      $and37$i$i = $144 & -8;
      $shr$i34$i = $144 >>> 3;
      L314 : do if ($144 >>> 0 < 256) {
       $145 = HEAP32[$add$ptr16$i$i + 8 >> 2] | 0;
       $146 = HEAP32[$add$ptr16$i$i + 12 >> 2] | 0;
       $arrayidx$i37$i = 17232 + ($shr$i34$i << 1 << 2) | 0;
       do if (($145 | 0) != ($arrayidx$i37$i | 0)) {
        if ($145 >>> 0 < $147 >>> 0) _abort();
        if ((HEAP32[$145 + 12 >> 2] | 0) == ($add$ptr16$i$i | 0)) break;
        _abort();
       } while (0);
       if (($146 | 0) == ($145 | 0)) {
        HEAP32[4298] = HEAP32[4298] & ~(1 << $shr$i34$i);
        break;
       }
       do if (($146 | 0) == ($arrayidx$i37$i | 0)) $fd68$pre$phi$i$iZ2D = $146 + 8 | 0; else {
        if ($146 >>> 0 < $147 >>> 0) _abort();
        $fd59$i$i = $146 + 8 | 0;
        if ((HEAP32[$fd59$i$i >> 2] | 0) == ($add$ptr16$i$i | 0)) {
         $fd68$pre$phi$i$iZ2D = $fd59$i$i;
         break;
        }
        _abort();
       } while (0);
       HEAP32[$145 + 12 >> 2] = $146;
       HEAP32[$fd68$pre$phi$i$iZ2D >> 2] = $145;
      } else {
       $151 = HEAP32[$add$ptr16$i$i + 24 >> 2] | 0;
       $152 = HEAP32[$add$ptr16$i$i + 12 >> 2] | 0;
       do if (($152 | 0) == ($add$ptr16$i$i | 0)) {
        $child$i$i = $add$ptr16$i$i + 16 | 0;
        $arrayidx96$i$i = $child$i$i + 4 | 0;
        $156 = HEAP32[$arrayidx96$i$i >> 2] | 0;
        if (!$156) {
         $157 = HEAP32[$child$i$i >> 2] | 0;
         if (!$157) {
          $R$3$i$i = 0;
          break;
         } else {
          $R$1$i$i = $157;
          $RP$1$i$i = $child$i$i;
         }
        } else {
         $R$1$i$i = $156;
         $RP$1$i$i = $arrayidx96$i$i;
        }
        while (1) {
         $arrayidx103$i$i = $R$1$i$i + 20 | 0;
         $158 = HEAP32[$arrayidx103$i$i >> 2] | 0;
         if ($158 | 0) {
          $R$1$i$i = $158;
          $RP$1$i$i = $arrayidx103$i$i;
          continue;
         }
         $arrayidx107$i$i = $R$1$i$i + 16 | 0;
         $159 = HEAP32[$arrayidx107$i$i >> 2] | 0;
         if (!$159) break; else {
          $R$1$i$i = $159;
          $RP$1$i$i = $arrayidx107$i$i;
         }
        }
        if ($RP$1$i$i >>> 0 < $147 >>> 0) _abort(); else {
         HEAP32[$RP$1$i$i >> 2] = 0;
         $R$3$i$i = $R$1$i$i;
         break;
        }
       } else {
        $153 = HEAP32[$add$ptr16$i$i + 8 >> 2] | 0;
        if ($153 >>> 0 < $147 >>> 0) _abort();
        $bk82$i$i = $153 + 12 | 0;
        if ((HEAP32[$bk82$i$i >> 2] | 0) != ($add$ptr16$i$i | 0)) _abort();
        $fd85$i$i = $152 + 8 | 0;
        if ((HEAP32[$fd85$i$i >> 2] | 0) == ($add$ptr16$i$i | 0)) {
         HEAP32[$bk82$i$i >> 2] = $152;
         HEAP32[$fd85$i$i >> 2] = $153;
         $R$3$i$i = $152;
         break;
        } else _abort();
       } while (0);
       if (!$151) break;
       $160 = HEAP32[$add$ptr16$i$i + 28 >> 2] | 0;
       $arrayidx123$i$i = 17496 + ($160 << 2) | 0;
       do if (($add$ptr16$i$i | 0) == (HEAP32[$arrayidx123$i$i >> 2] | 0)) {
        HEAP32[$arrayidx123$i$i >> 2] = $R$3$i$i;
        if ($R$3$i$i | 0) break;
        HEAP32[4299] = HEAP32[4299] & ~(1 << $160);
        break L314;
       } else if ($151 >>> 0 < (HEAP32[4302] | 0) >>> 0) _abort(); else {
        HEAP32[$151 + 16 + (((HEAP32[$151 + 16 >> 2] | 0) != ($add$ptr16$i$i | 0) & 1) << 2) >> 2] = $R$3$i$i;
        if (!$R$3$i$i) break L314; else break;
       } while (0);
       $165 = HEAP32[4302] | 0;
       if ($R$3$i$i >>> 0 < $165 >>> 0) _abort();
       HEAP32[$R$3$i$i + 24 >> 2] = $151;
       $child166$i$i = $add$ptr16$i$i + 16 | 0;
       $166 = HEAP32[$child166$i$i >> 2] | 0;
       do if ($166 | 0) if ($166 >>> 0 < $165 >>> 0) _abort(); else {
        HEAP32[$R$3$i$i + 16 >> 2] = $166;
        HEAP32[$166 + 24 >> 2] = $R$3$i$i;
        break;
       } while (0);
       $167 = HEAP32[$child166$i$i + 4 >> 2] | 0;
       if (!$167) break;
       if ($167 >>> 0 < (HEAP32[4302] | 0) >>> 0) _abort(); else {
        HEAP32[$R$3$i$i + 20 >> 2] = $167;
        HEAP32[$167 + 24 >> 2] = $R$3$i$i;
        break;
       }
      } while (0);
      $oldfirst$0$i$i = $add$ptr16$i$i + $and37$i$i | 0;
      $qsize$0$i$i = $and37$i$i + $sub18$i$i | 0;
     } else {
      $oldfirst$0$i$i = $add$ptr16$i$i;
      $qsize$0$i$i = $sub18$i$i;
     }
     $head208$i$i = $oldfirst$0$i$i + 4 | 0;
     HEAP32[$head208$i$i >> 2] = HEAP32[$head208$i$i >> 2] & -2;
     HEAP32[$add$ptr17$i$i + 4 >> 2] = $qsize$0$i$i | 1;
     HEAP32[$add$ptr17$i$i + $qsize$0$i$i >> 2] = $qsize$0$i$i;
     $shr214$i$i = $qsize$0$i$i >>> 3;
     if ($qsize$0$i$i >>> 0 < 256) {
      $arrayidx223$i$i = 17232 + ($shr214$i$i << 1 << 2) | 0;
      $170 = HEAP32[4298] | 0;
      $shl226$i$i = 1 << $shr214$i$i;
      do if (!($170 & $shl226$i$i)) {
       HEAP32[4298] = $170 | $shl226$i$i;
       $$pre$phi$i46$iZ2D = $arrayidx223$i$i + 8 | 0;
       $F224$0$i$i = $arrayidx223$i$i;
      } else {
       $171 = $arrayidx223$i$i + 8 | 0;
       $172 = HEAP32[$171 >> 2] | 0;
       if ($172 >>> 0 >= (HEAP32[4302] | 0) >>> 0) {
        $$pre$phi$i46$iZ2D = $171;
        $F224$0$i$i = $172;
        break;
       }
       _abort();
      } while (0);
      HEAP32[$$pre$phi$i46$iZ2D >> 2] = $add$ptr17$i$i;
      HEAP32[$F224$0$i$i + 12 >> 2] = $add$ptr17$i$i;
      HEAP32[$add$ptr17$i$i + 8 >> 2] = $F224$0$i$i;
      HEAP32[$add$ptr17$i$i + 12 >> 2] = $arrayidx223$i$i;
      break;
     }
     $shr253$i$i = $qsize$0$i$i >>> 8;
     do if (!$shr253$i$i) $I252$0$i$i = 0; else {
      if ($qsize$0$i$i >>> 0 > 16777215) {
       $I252$0$i$i = 31;
       break;
      }
      $and264$i$i = ($shr253$i$i + 1048320 | 0) >>> 16 & 8;
      $shl265$i$i = $shr253$i$i << $and264$i$i;
      $and268$i$i = ($shl265$i$i + 520192 | 0) >>> 16 & 4;
      $shl270$i$i = $shl265$i$i << $and268$i$i;
      $and273$i$i = ($shl270$i$i + 245760 | 0) >>> 16 & 2;
      $add278$i$i = 14 - ($and268$i$i | $and264$i$i | $and273$i$i) + ($shl270$i$i << $and273$i$i >>> 15) | 0;
      $I252$0$i$i = $qsize$0$i$i >>> ($add278$i$i + 7 | 0) & 1 | $add278$i$i << 1;
     } while (0);
     $arrayidx287$i$i = 17496 + ($I252$0$i$i << 2) | 0;
     HEAP32[$add$ptr17$i$i + 28 >> 2] = $I252$0$i$i;
     $child289$i$i = $add$ptr17$i$i + 16 | 0;
     HEAP32[$child289$i$i + 4 >> 2] = 0;
     HEAP32[$child289$i$i >> 2] = 0;
     $174 = HEAP32[4299] | 0;
     $shl294$i$i = 1 << $I252$0$i$i;
     if (!($174 & $shl294$i$i)) {
      HEAP32[4299] = $174 | $shl294$i$i;
      HEAP32[$arrayidx287$i$i >> 2] = $add$ptr17$i$i;
      HEAP32[$add$ptr17$i$i + 24 >> 2] = $arrayidx287$i$i;
      HEAP32[$add$ptr17$i$i + 12 >> 2] = $add$ptr17$i$i;
      HEAP32[$add$ptr17$i$i + 8 >> 2] = $add$ptr17$i$i;
      break;
     }
     $K305$0$i$i = $qsize$0$i$i << (($I252$0$i$i | 0) == 31 ? 0 : 25 - ($I252$0$i$i >>> 1) | 0);
     $T$0$i47$i = HEAP32[$arrayidx287$i$i >> 2] | 0;
     while (1) {
      if ((HEAP32[$T$0$i47$i + 4 >> 2] & -8 | 0) == ($qsize$0$i$i | 0)) {
       label = 265;
       break;
      }
      $arrayidx325$i$i = $T$0$i47$i + 16 + ($K305$0$i$i >>> 31 << 2) | 0;
      $177 = HEAP32[$arrayidx325$i$i >> 2] | 0;
      if (!$177) {
       label = 262;
       break;
      } else {
       $K305$0$i$i = $K305$0$i$i << 1;
       $T$0$i47$i = $177;
      }
     }
     if ((label | 0) == 262) if ($arrayidx325$i$i >>> 0 < (HEAP32[4302] | 0) >>> 0) _abort(); else {
      HEAP32[$arrayidx325$i$i >> 2] = $add$ptr17$i$i;
      HEAP32[$add$ptr17$i$i + 24 >> 2] = $T$0$i47$i;
      HEAP32[$add$ptr17$i$i + 12 >> 2] = $add$ptr17$i$i;
      HEAP32[$add$ptr17$i$i + 8 >> 2] = $add$ptr17$i$i;
      break;
     } else if ((label | 0) == 265) {
      $fd344$i$i = $T$0$i47$i + 8 | 0;
      $179 = HEAP32[$fd344$i$i >> 2] | 0;
      $180 = HEAP32[4302] | 0;
      if ($179 >>> 0 >= $180 >>> 0 & $T$0$i47$i >>> 0 >= $180 >>> 0) {
       HEAP32[$179 + 12 >> 2] = $add$ptr17$i$i;
       HEAP32[$fd344$i$i >> 2] = $add$ptr17$i$i;
       HEAP32[$add$ptr17$i$i + 8 >> 2] = $179;
       HEAP32[$add$ptr17$i$i + 12 >> 2] = $T$0$i47$i;
       HEAP32[$add$ptr17$i$i + 24 >> 2] = 0;
       break;
      } else _abort();
     }
    } while (0);
    $retval$0 = $add$ptr4$i26$i + 8 | 0;
    STACKTOP = sp;
    return $retval$0 | 0;
   }
   $sp$0$i$i$i = 17640;
   while (1) {
    $182 = HEAP32[$sp$0$i$i$i >> 2] | 0;
    if ($182 >>> 0 <= $116 >>> 0) {
     $add$ptr$i$i$i = $182 + (HEAP32[$sp$0$i$i$i + 4 >> 2] | 0) | 0;
     if ($add$ptr$i$i$i >>> 0 > $116 >>> 0) break;
    }
    $sp$0$i$i$i = HEAP32[$sp$0$i$i$i + 8 >> 2] | 0;
   }
   $add$ptr2$i$i = $add$ptr$i$i$i + -47 | 0;
   $185 = $add$ptr2$i$i + 8 | 0;
   $add$ptr7$i$i = $add$ptr2$i$i + (($185 & 7 | 0) == 0 ? 0 : 0 - $185 & 7) | 0;
   $add$ptr81$i$i = $116 + 16 | 0;
   $cond13$i$i = $add$ptr7$i$i >>> 0 < $add$ptr81$i$i >>> 0 ? $116 : $add$ptr7$i$i;
   $add$ptr14$i$i = $cond13$i$i + 8 | 0;
   $187 = $tbase$796$i + 8 | 0;
   $cond$i$i$i = ($187 & 7 | 0) == 0 ? 0 : 0 - $187 & 7;
   $add$ptr4$i$i$i = $tbase$796$i + $cond$i$i$i | 0;
   $sub5$i$i$i = $tsize$795$i + -40 - $cond$i$i$i | 0;
   HEAP32[4304] = $add$ptr4$i$i$i;
   HEAP32[4301] = $sub5$i$i$i;
   HEAP32[$add$ptr4$i$i$i + 4 >> 2] = $sub5$i$i$i | 1;
   HEAP32[$add$ptr4$i$i$i + $sub5$i$i$i + 4 >> 2] = 40;
   HEAP32[4305] = HEAP32[4420];
   $head$i$i = $cond13$i$i + 4 | 0;
   HEAP32[$head$i$i >> 2] = 27;
   HEAP32[$add$ptr14$i$i >> 2] = HEAP32[4410];
   HEAP32[$add$ptr14$i$i + 4 >> 2] = HEAP32[4411];
   HEAP32[$add$ptr14$i$i + 8 >> 2] = HEAP32[4412];
   HEAP32[$add$ptr14$i$i + 12 >> 2] = HEAP32[4413];
   HEAP32[4410] = $tbase$796$i;
   HEAP32[4411] = $tsize$795$i;
   HEAP32[4413] = 0;
   HEAP32[4412] = $add$ptr14$i$i;
   $190 = $cond13$i$i + 24 | 0;
   do {
    $190$looptemp = $190;
    $190 = $190 + 4 | 0;
    HEAP32[$190 >> 2] = 7;
   } while (($190$looptemp + 8 | 0) >>> 0 < $add$ptr$i$i$i >>> 0);
   if (($cond13$i$i | 0) != ($116 | 0)) {
    $sub$ptr$sub$i$i = $cond13$i$i - $116 | 0;
    HEAP32[$head$i$i >> 2] = HEAP32[$head$i$i >> 2] & -2;
    HEAP32[$116 + 4 >> 2] = $sub$ptr$sub$i$i | 1;
    HEAP32[$cond13$i$i >> 2] = $sub$ptr$sub$i$i;
    $shr$i$i = $sub$ptr$sub$i$i >>> 3;
    if ($sub$ptr$sub$i$i >>> 0 < 256) {
     $arrayidx$i$i = 17232 + ($shr$i$i << 1 << 2) | 0;
     $192 = HEAP32[4298] | 0;
     $shl39$i$i = 1 << $shr$i$i;
     if (!($192 & $shl39$i$i)) {
      HEAP32[4298] = $192 | $shl39$i$i;
      $$pre$phi$i$iZ2D = $arrayidx$i$i + 8 | 0;
      $F$0$i$i = $arrayidx$i$i;
     } else {
      $193 = $arrayidx$i$i + 8 | 0;
      $194 = HEAP32[$193 >> 2] | 0;
      if ($194 >>> 0 < (HEAP32[4302] | 0) >>> 0) _abort(); else {
       $$pre$phi$i$iZ2D = $193;
       $F$0$i$i = $194;
      }
     }
     HEAP32[$$pre$phi$i$iZ2D >> 2] = $116;
     HEAP32[$F$0$i$i + 12 >> 2] = $116;
     HEAP32[$116 + 8 >> 2] = $F$0$i$i;
     HEAP32[$116 + 12 >> 2] = $arrayidx$i$i;
     break;
    }
    $shr58$i$i = $sub$ptr$sub$i$i >>> 8;
    if (!$shr58$i$i) $I57$0$i$i = 0; else if ($sub$ptr$sub$i$i >>> 0 > 16777215) $I57$0$i$i = 31; else {
     $and69$i$i = ($shr58$i$i + 1048320 | 0) >>> 16 & 8;
     $shl70$i$i = $shr58$i$i << $and69$i$i;
     $and73$i$i = ($shl70$i$i + 520192 | 0) >>> 16 & 4;
     $shl75$i$i = $shl70$i$i << $and73$i$i;
     $and78$i$i = ($shl75$i$i + 245760 | 0) >>> 16 & 2;
     $add83$i$i = 14 - ($and73$i$i | $and69$i$i | $and78$i$i) + ($shl75$i$i << $and78$i$i >>> 15) | 0;
     $I57$0$i$i = $sub$ptr$sub$i$i >>> ($add83$i$i + 7 | 0) & 1 | $add83$i$i << 1;
    }
    $arrayidx91$i$i = 17496 + ($I57$0$i$i << 2) | 0;
    HEAP32[$116 + 28 >> 2] = $I57$0$i$i;
    HEAP32[$116 + 20 >> 2] = 0;
    HEAP32[$add$ptr81$i$i >> 2] = 0;
    $196 = HEAP32[4299] | 0;
    $shl95$i$i = 1 << $I57$0$i$i;
    if (!($196 & $shl95$i$i)) {
     HEAP32[4299] = $196 | $shl95$i$i;
     HEAP32[$arrayidx91$i$i >> 2] = $116;
     HEAP32[$116 + 24 >> 2] = $arrayidx91$i$i;
     HEAP32[$116 + 12 >> 2] = $116;
     HEAP32[$116 + 8 >> 2] = $116;
     break;
    }
    $K105$0$i$i = $sub$ptr$sub$i$i << (($I57$0$i$i | 0) == 31 ? 0 : 25 - ($I57$0$i$i >>> 1) | 0);
    $T$0$i$i = HEAP32[$arrayidx91$i$i >> 2] | 0;
    while (1) {
     if ((HEAP32[$T$0$i$i + 4 >> 2] & -8 | 0) == ($sub$ptr$sub$i$i | 0)) {
      label = 292;
      break;
     }
     $arrayidx126$i$i = $T$0$i$i + 16 + ($K105$0$i$i >>> 31 << 2) | 0;
     $199 = HEAP32[$arrayidx126$i$i >> 2] | 0;
     if (!$199) {
      label = 289;
      break;
     } else {
      $K105$0$i$i = $K105$0$i$i << 1;
      $T$0$i$i = $199;
     }
    }
    if ((label | 0) == 289) if ($arrayidx126$i$i >>> 0 < (HEAP32[4302] | 0) >>> 0) _abort(); else {
     HEAP32[$arrayidx126$i$i >> 2] = $116;
     HEAP32[$116 + 24 >> 2] = $T$0$i$i;
     HEAP32[$116 + 12 >> 2] = $116;
     HEAP32[$116 + 8 >> 2] = $116;
     break;
    } else if ((label | 0) == 292) {
     $fd148$i$i = $T$0$i$i + 8 | 0;
     $201 = HEAP32[$fd148$i$i >> 2] | 0;
     $202 = HEAP32[4302] | 0;
     if ($201 >>> 0 >= $202 >>> 0 & $T$0$i$i >>> 0 >= $202 >>> 0) {
      HEAP32[$201 + 12 >> 2] = $116;
      HEAP32[$fd148$i$i >> 2] = $116;
      HEAP32[$116 + 8 >> 2] = $201;
      HEAP32[$116 + 12 >> 2] = $T$0$i$i;
      HEAP32[$116 + 24 >> 2] = 0;
      break;
     } else _abort();
    }
   }
  } while (0);
  $204 = HEAP32[4301] | 0;
  if ($204 >>> 0 > $nb$0 >>> 0) {
   $sub260$i = $204 - $nb$0 | 0;
   HEAP32[4301] = $sub260$i;
   $205 = HEAP32[4304] | 0;
   $add$ptr262$i = $205 + $nb$0 | 0;
   HEAP32[4304] = $add$ptr262$i;
   HEAP32[$add$ptr262$i + 4 >> 2] = $sub260$i | 1;
   HEAP32[$205 + 4 >> 2] = $nb$0 | 3;
   $retval$0 = $205 + 8 | 0;
   STACKTOP = sp;
   return $retval$0 | 0;
  }
 }
 $call275$i = ___errno_location() | 0;
 HEAP32[$call275$i >> 2] = 12;
 $retval$0 = 0;
 STACKTOP = sp;
 return $retval$0 | 0;
}

function __ZN10__cxxabiv112_GLOBAL__N_119parse_operator_nameINS0_2DbEEEPKcS4_S4_RT_($first, $last, $db) {
 $first = $first | 0;
 $last = $last | 0;
 $db = $db | 0;
 var $102 = 0, $105 = 0, $108 = 0, $11 = 0, $112 = 0, $115 = 0, $118 = 0, $122 = 0, $125 = 0, $128 = 0, $131 = 0, $134 = 0, $137 = 0, $141 = 0, $145 = 0, $148 = 0, $15 = 0, $151 = 0, $154 = 0, $159 = 0, $18 = 0, $2 = 0, $21 = 0, $24 = 0, $26 = 0, $28 = 0, $31 = 0, $34 = 0, $37 = 0, $40 = 0, $44 = 0, $47 = 0, $5 = 0, $50 = 0, $54 = 0, $57 = 0, $61 = 0, $65 = 0, $69 = 0, $70 = 0, $73 = 0, $76 = 0, $8 = 0, $80 = 0, $83 = 0, $86 = 0, $89 = 0, $92 = 0, $96 = 0, $99 = 0, $__end_$i = 0, $__end_$i143 = 0, $__end_$i151 = 0, $__end_$i159 = 0, $__end_$i167 = 0, $__end_$i175 = 0, $__end_$i183 = 0, $__end_$i194 = 0, $__end_$i202 = 0, $__end_$i210 = 0, $__end_$i218 = 0, $__end_$i226 = 0, $__end_$i234 = 0, $__end_$i242 = 0, $__end_$i250 = 0, $__end_$i258 = 0, $__end_$i266 = 0, $__end_$i274 = 0, $__end_$i282 = 0, $__end_$i295 = 0, $__end_$i303 = 0, $__end_$i311 = 0, $__end_$i319 = 0, $__end_$i327 = 0, $__end_$i335 = 0, $__end_$i343 = 0, $__end_$i351 = 0, $__end_$i359 = 0, $__end_$i367 = 0, $__end_$i375 = 0, $__end_$i383 = 0, $__end_$i391 = 0, $__end_$i399 = 0, $__end_$i407 = 0, $__end_$i415 = 0, $__end_$i423 = 0, $__end_$i431 = 0, $__end_$i439 = 0, $__end_$i447 = 0, $__end_$i455 = 0, $__end_$i463 = 0, $__end_$i471 = 0, $__end_$i479 = 0, $__end_$i487 = 0, $__end_$i495 = 0, $__end_$i503 = 0, $add$ptr = 0, $arrayidx1 = 0, $call = 0, $call158 = 0, $call370 = 0, $ref$tmp = 0, $retval$3 = 0, $try_to_parse_template_args44 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 $ref$tmp = sp;
 L1 : do if (($last - $first | 0) > 1) {
  $add$ptr = $first + 2 | 0;
  $arrayidx1 = $first + 1 | 0;
  do switch (HEAP8[$first >> 0] | 0) {
  case 97:
   {
    switch (HEAP8[$arrayidx1 >> 0] | 0) {
    case 97:
     {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj11EEERAT__Kc($ref$tmp, 15187);
      $__end_$i = $db + 4 | 0;
      $2 = HEAP32[$__end_$i >> 2] | 0;
      if ($2 >>> 0 < (HEAP32[$db + 8 >> 2] | 0) >>> 0) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($2, $ref$tmp);
       HEAP32[$__end_$i >> 2] = (HEAP32[$__end_$i >> 2] | 0) + 24;
      } else __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIS3_EEvOT_($db, $ref$tmp);
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($ref$tmp);
      $retval$3 = $add$ptr;
      break L1;
      break;
     }
    case 110:
    case 100:
     {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj10EEERAT__Kc($ref$tmp, 15198);
      $__end_$i143 = $db + 4 | 0;
      $5 = HEAP32[$__end_$i143 >> 2] | 0;
      if ($5 >>> 0 < (HEAP32[$db + 8 >> 2] | 0) >>> 0) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($5, $ref$tmp);
       HEAP32[$__end_$i143 >> 2] = (HEAP32[$__end_$i143 >> 2] | 0) + 24;
      } else __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIS3_EEvOT_($db, $ref$tmp);
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($ref$tmp);
      $retval$3 = $add$ptr;
      break L1;
      break;
     }
    case 78:
     {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj11EEERAT__Kc($ref$tmp, 15208);
      $__end_$i151 = $db + 4 | 0;
      $8 = HEAP32[$__end_$i151 >> 2] | 0;
      if ($8 >>> 0 < (HEAP32[$db + 8 >> 2] | 0) >>> 0) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($8, $ref$tmp);
       HEAP32[$__end_$i151 >> 2] = (HEAP32[$__end_$i151 >> 2] | 0) + 24;
      } else __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIS3_EEvOT_($db, $ref$tmp);
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($ref$tmp);
      $retval$3 = $add$ptr;
      break L1;
      break;
     }
    case 83:
     {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj10EEERAT__Kc($ref$tmp, 15219);
      $__end_$i159 = $db + 4 | 0;
      $11 = HEAP32[$__end_$i159 >> 2] | 0;
      if ($11 >>> 0 < (HEAP32[$db + 8 >> 2] | 0) >>> 0) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($11, $ref$tmp);
       HEAP32[$__end_$i159 >> 2] = (HEAP32[$__end_$i159 >> 2] | 0) + 24;
      } else __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIS3_EEvOT_($db, $ref$tmp);
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($ref$tmp);
      $retval$3 = $add$ptr;
      break L1;
      break;
     }
    default:
     {
      $retval$3 = $first;
      break L1;
     }
    }
    break;
   }
  case 99:
   {
    switch (HEAP8[$arrayidx1 >> 0] | 0) {
    case 108:
     {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj11EEERAT__Kc($ref$tmp, 15229);
      $__end_$i167 = $db + 4 | 0;
      $15 = HEAP32[$__end_$i167 >> 2] | 0;
      if ($15 >>> 0 < (HEAP32[$db + 8 >> 2] | 0) >>> 0) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($15, $ref$tmp);
       HEAP32[$__end_$i167 >> 2] = (HEAP32[$__end_$i167 >> 2] | 0) + 24;
      } else __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIS3_EEvOT_($db, $ref$tmp);
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($ref$tmp);
      $retval$3 = $add$ptr;
      break L1;
      break;
     }
    case 109:
     {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj10EEERAT__Kc($ref$tmp, 15240);
      $__end_$i175 = $db + 4 | 0;
      $18 = HEAP32[$__end_$i175 >> 2] | 0;
      if ($18 >>> 0 < (HEAP32[$db + 8 >> 2] | 0) >>> 0) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($18, $ref$tmp);
       HEAP32[$__end_$i175 >> 2] = (HEAP32[$__end_$i175 >> 2] | 0) + 24;
      } else __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIS3_EEvOT_($db, $ref$tmp);
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($ref$tmp);
      $retval$3 = $add$ptr;
      break L1;
      break;
     }
    case 111:
     {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj10EEERAT__Kc($ref$tmp, 15250);
      $__end_$i183 = $db + 4 | 0;
      $21 = HEAP32[$__end_$i183 >> 2] | 0;
      if ($21 >>> 0 < (HEAP32[$db + 8 >> 2] | 0) >>> 0) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($21, $ref$tmp);
       HEAP32[$__end_$i183 >> 2] = (HEAP32[$__end_$i183 >> 2] | 0) + 24;
      } else __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIS3_EEvOT_($db, $ref$tmp);
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($ref$tmp);
      $retval$3 = $add$ptr;
      break L1;
      break;
     }
    case 118:
     {
      $try_to_parse_template_args44 = $db + 63 | 0;
      $24 = HEAP8[$try_to_parse_template_args44 >> 0] | 0;
      HEAP8[$try_to_parse_template_args44 >> 0] = 0;
      $call = __ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($add$ptr, $last, $db) | 0;
      HEAP8[$try_to_parse_template_args44 >> 0] = $24;
      if (($call | 0) == ($add$ptr | 0)) {
       $retval$3 = $first;
       break L1;
      }
      $26 = HEAP32[$db + 4 >> 2] | 0;
      if ((HEAP32[$db >> 2] | 0) == ($26 | 0)) {
       $retval$3 = $first;
       break L1;
      }
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKc($26 + -24 | 0, 0, 15260) | 0;
      HEAP8[$db + 60 >> 0] = 1;
      $retval$3 = $call;
      break L1;
      break;
     }
    default:
     {
      $retval$3 = $first;
      break L1;
     }
    }
    break;
   }
  case 100:
   {
    switch (HEAP8[$arrayidx1 >> 0] | 0) {
    case 97:
     {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj18EEERAT__Kc($ref$tmp, 15270);
      $__end_$i194 = $db + 4 | 0;
      $28 = HEAP32[$__end_$i194 >> 2] | 0;
      if ($28 >>> 0 < (HEAP32[$db + 8 >> 2] | 0) >>> 0) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($28, $ref$tmp);
       HEAP32[$__end_$i194 >> 2] = (HEAP32[$__end_$i194 >> 2] | 0) + 24;
      } else __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIS3_EEvOT_($db, $ref$tmp);
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($ref$tmp);
      $retval$3 = $add$ptr;
      break L1;
      break;
     }
    case 101:
     {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj10EEERAT__Kc($ref$tmp, 15288);
      $__end_$i202 = $db + 4 | 0;
      $31 = HEAP32[$__end_$i202 >> 2] | 0;
      if ($31 >>> 0 < (HEAP32[$db + 8 >> 2] | 0) >>> 0) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($31, $ref$tmp);
       HEAP32[$__end_$i202 >> 2] = (HEAP32[$__end_$i202 >> 2] | 0) + 24;
      } else __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIS3_EEvOT_($db, $ref$tmp);
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($ref$tmp);
      $retval$3 = $add$ptr;
      break L1;
      break;
     }
    case 108:
     {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj16EEERAT__Kc($ref$tmp);
      $__end_$i210 = $db + 4 | 0;
      $34 = HEAP32[$__end_$i210 >> 2] | 0;
      if ($34 >>> 0 < (HEAP32[$db + 8 >> 2] | 0) >>> 0) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($34, $ref$tmp);
       HEAP32[$__end_$i210 >> 2] = (HEAP32[$__end_$i210 >> 2] | 0) + 24;
      } else __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIS3_EEvOT_($db, $ref$tmp);
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($ref$tmp);
      $retval$3 = $add$ptr;
      break L1;
      break;
     }
    case 118:
     {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj10EEERAT__Kc($ref$tmp, 15298);
      $__end_$i218 = $db + 4 | 0;
      $37 = HEAP32[$__end_$i218 >> 2] | 0;
      if ($37 >>> 0 < (HEAP32[$db + 8 >> 2] | 0) >>> 0) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($37, $ref$tmp);
       HEAP32[$__end_$i218 >> 2] = (HEAP32[$__end_$i218 >> 2] | 0) + 24;
      } else __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIS3_EEvOT_($db, $ref$tmp);
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($ref$tmp);
      $retval$3 = $add$ptr;
      break L1;
      break;
     }
    case 86:
     {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj11EEERAT__Kc($ref$tmp, 15308);
      $__end_$i226 = $db + 4 | 0;
      $40 = HEAP32[$__end_$i226 >> 2] | 0;
      if ($40 >>> 0 < (HEAP32[$db + 8 >> 2] | 0) >>> 0) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($40, $ref$tmp);
       HEAP32[$__end_$i226 >> 2] = (HEAP32[$__end_$i226 >> 2] | 0) + 24;
      } else __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIS3_EEvOT_($db, $ref$tmp);
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($ref$tmp);
      $retval$3 = $add$ptr;
      break L1;
      break;
     }
    default:
     {
      $retval$3 = $first;
      break L1;
     }
    }
    break;
   }
  case 101:
   {
    switch (HEAP8[$arrayidx1 >> 0] | 0) {
    case 111:
     {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj10EEERAT__Kc($ref$tmp, 15319);
      $__end_$i234 = $db + 4 | 0;
      $44 = HEAP32[$__end_$i234 >> 2] | 0;
      if ($44 >>> 0 < (HEAP32[$db + 8 >> 2] | 0) >>> 0) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($44, $ref$tmp);
       HEAP32[$__end_$i234 >> 2] = (HEAP32[$__end_$i234 >> 2] | 0) + 24;
      } else __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIS3_EEvOT_($db, $ref$tmp);
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($ref$tmp);
      $retval$3 = $add$ptr;
      break L1;
      break;
     }
    case 79:
     {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj11EEERAT__Kc($ref$tmp, 15329);
      $__end_$i242 = $db + 4 | 0;
      $47 = HEAP32[$__end_$i242 >> 2] | 0;
      if ($47 >>> 0 < (HEAP32[$db + 8 >> 2] | 0) >>> 0) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($47, $ref$tmp);
       HEAP32[$__end_$i242 >> 2] = (HEAP32[$__end_$i242 >> 2] | 0) + 24;
      } else __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIS3_EEvOT_($db, $ref$tmp);
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($ref$tmp);
      $retval$3 = $add$ptr;
      break L1;
      break;
     }
    case 113:
     {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj11EEERAT__Kc($ref$tmp, 15340);
      $__end_$i250 = $db + 4 | 0;
      $50 = HEAP32[$__end_$i250 >> 2] | 0;
      if ($50 >>> 0 < (HEAP32[$db + 8 >> 2] | 0) >>> 0) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($50, $ref$tmp);
       HEAP32[$__end_$i250 >> 2] = (HEAP32[$__end_$i250 >> 2] | 0) + 24;
      } else __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIS3_EEvOT_($db, $ref$tmp);
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($ref$tmp);
      $retval$3 = $add$ptr;
      break L1;
      break;
     }
    default:
     {
      $retval$3 = $first;
      break L1;
     }
    }
    break;
   }
  case 103:
   {
    switch (HEAP8[$arrayidx1 >> 0] | 0) {
    case 101:
     {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj11EEERAT__Kc($ref$tmp, 15351);
      $__end_$i258 = $db + 4 | 0;
      $54 = HEAP32[$__end_$i258 >> 2] | 0;
      if ($54 >>> 0 < (HEAP32[$db + 8 >> 2] | 0) >>> 0) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($54, $ref$tmp);
       HEAP32[$__end_$i258 >> 2] = (HEAP32[$__end_$i258 >> 2] | 0) + 24;
      } else __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIS3_EEvOT_($db, $ref$tmp);
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($ref$tmp);
      $retval$3 = $add$ptr;
      break L1;
      break;
     }
    case 116:
     {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj10EEERAT__Kc($ref$tmp, 15362);
      $__end_$i266 = $db + 4 | 0;
      $57 = HEAP32[$__end_$i266 >> 2] | 0;
      if ($57 >>> 0 < (HEAP32[$db + 8 >> 2] | 0) >>> 0) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($57, $ref$tmp);
       HEAP32[$__end_$i266 >> 2] = (HEAP32[$__end_$i266 >> 2] | 0) + 24;
      } else __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIS3_EEvOT_($db, $ref$tmp);
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($ref$tmp);
      $retval$3 = $add$ptr;
      break L1;
      break;
     }
    default:
     {
      $retval$3 = $first;
      break L1;
     }
    }
    break;
   }
  case 105:
   {
    if ((HEAP8[$arrayidx1 >> 0] | 0) != 120) {
     $retval$3 = $first;
     break L1;
    }
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj11EEERAT__Kc($ref$tmp, 15372);
    $__end_$i274 = $db + 4 | 0;
    $61 = HEAP32[$__end_$i274 >> 2] | 0;
    if ($61 >>> 0 < (HEAP32[$db + 8 >> 2] | 0) >>> 0) {
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($61, $ref$tmp);
     HEAP32[$__end_$i274 >> 2] = (HEAP32[$__end_$i274 >> 2] | 0) + 24;
    } else __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIS3_EEvOT_($db, $ref$tmp);
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($ref$tmp);
    $retval$3 = $add$ptr;
    break L1;
    break;
   }
  case 108:
   {
    switch (HEAP8[$arrayidx1 >> 0] | 0) {
    case 101:
     {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj11EEERAT__Kc($ref$tmp, 15383);
      $__end_$i282 = $db + 4 | 0;
      $65 = HEAP32[$__end_$i282 >> 2] | 0;
      if ($65 >>> 0 < (HEAP32[$db + 8 >> 2] | 0) >>> 0) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($65, $ref$tmp);
       HEAP32[$__end_$i282 >> 2] = (HEAP32[$__end_$i282 >> 2] | 0) + 24;
      } else __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIS3_EEvOT_($db, $ref$tmp);
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($ref$tmp);
      $retval$3 = $add$ptr;
      break L1;
      break;
     }
    case 105:
     {
      $call158 = __ZN10__cxxabiv112_GLOBAL__N_117parse_source_nameINS0_2DbEEEPKcS4_S4_RT_($add$ptr, $last, $db) | 0;
      if (($call158 | 0) == ($add$ptr | 0)) {
       $retval$3 = $first;
       break L1;
      }
      $69 = HEAP32[$db + 4 >> 2] | 0;
      if ((HEAP32[$db >> 2] | 0) == ($69 | 0)) {
       $retval$3 = $first;
       break L1;
      }
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKc($69 + -24 | 0, 0, 15394) | 0;
      $retval$3 = $call158;
      break L1;
      break;
     }
    case 115:
     {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj11EEERAT__Kc($ref$tmp, 15406);
      $__end_$i295 = $db + 4 | 0;
      $70 = HEAP32[$__end_$i295 >> 2] | 0;
      if ($70 >>> 0 < (HEAP32[$db + 8 >> 2] | 0) >>> 0) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($70, $ref$tmp);
       HEAP32[$__end_$i295 >> 2] = (HEAP32[$__end_$i295 >> 2] | 0) + 24;
      } else __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIS3_EEvOT_($db, $ref$tmp);
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($ref$tmp);
      $retval$3 = $add$ptr;
      break L1;
      break;
     }
    case 83:
     {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj12EEERAT__Kc($ref$tmp, 15417);
      $__end_$i303 = $db + 4 | 0;
      $73 = HEAP32[$__end_$i303 >> 2] | 0;
      if ($73 >>> 0 < (HEAP32[$db + 8 >> 2] | 0) >>> 0) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($73, $ref$tmp);
       HEAP32[$__end_$i303 >> 2] = (HEAP32[$__end_$i303 >> 2] | 0) + 24;
      } else __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIS3_EEvOT_($db, $ref$tmp);
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($ref$tmp);
      $retval$3 = $add$ptr;
      break L1;
      break;
     }
    case 116:
     {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj10EEERAT__Kc($ref$tmp, 15429);
      $__end_$i311 = $db + 4 | 0;
      $76 = HEAP32[$__end_$i311 >> 2] | 0;
      if ($76 >>> 0 < (HEAP32[$db + 8 >> 2] | 0) >>> 0) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($76, $ref$tmp);
       HEAP32[$__end_$i311 >> 2] = (HEAP32[$__end_$i311 >> 2] | 0) + 24;
      } else __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIS3_EEvOT_($db, $ref$tmp);
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($ref$tmp);
      $retval$3 = $add$ptr;
      break L1;
      break;
     }
    default:
     {
      $retval$3 = $first;
      break L1;
     }
    }
    break;
   }
  case 109:
   {
    switch (HEAP8[$arrayidx1 >> 0] | 0) {
    case 105:
     {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj10EEERAT__Kc($ref$tmp, 15439);
      $__end_$i319 = $db + 4 | 0;
      $80 = HEAP32[$__end_$i319 >> 2] | 0;
      if ($80 >>> 0 < (HEAP32[$db + 8 >> 2] | 0) >>> 0) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($80, $ref$tmp);
       HEAP32[$__end_$i319 >> 2] = (HEAP32[$__end_$i319 >> 2] | 0) + 24;
      } else __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIS3_EEvOT_($db, $ref$tmp);
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($ref$tmp);
      $retval$3 = $add$ptr;
      break L1;
      break;
     }
    case 73:
     {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj11EEERAT__Kc($ref$tmp, 15449);
      $__end_$i327 = $db + 4 | 0;
      $83 = HEAP32[$__end_$i327 >> 2] | 0;
      if ($83 >>> 0 < (HEAP32[$db + 8 >> 2] | 0) >>> 0) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($83, $ref$tmp);
       HEAP32[$__end_$i327 >> 2] = (HEAP32[$__end_$i327 >> 2] | 0) + 24;
      } else __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIS3_EEvOT_($db, $ref$tmp);
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($ref$tmp);
      $retval$3 = $add$ptr;
      break L1;
      break;
     }
    case 108:
     {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj10EEERAT__Kc($ref$tmp, 15288);
      $__end_$i335 = $db + 4 | 0;
      $86 = HEAP32[$__end_$i335 >> 2] | 0;
      if ($86 >>> 0 < (HEAP32[$db + 8 >> 2] | 0) >>> 0) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($86, $ref$tmp);
       HEAP32[$__end_$i335 >> 2] = (HEAP32[$__end_$i335 >> 2] | 0) + 24;
      } else __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIS3_EEvOT_($db, $ref$tmp);
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($ref$tmp);
      $retval$3 = $add$ptr;
      break L1;
      break;
     }
    case 76:
     {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj11EEERAT__Kc($ref$tmp, 15460);
      $__end_$i343 = $db + 4 | 0;
      $89 = HEAP32[$__end_$i343 >> 2] | 0;
      if ($89 >>> 0 < (HEAP32[$db + 8 >> 2] | 0) >>> 0) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($89, $ref$tmp);
       HEAP32[$__end_$i343 >> 2] = (HEAP32[$__end_$i343 >> 2] | 0) + 24;
      } else __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIS3_EEvOT_($db, $ref$tmp);
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($ref$tmp);
      $retval$3 = $add$ptr;
      break L1;
      break;
     }
    case 109:
     {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj11EEERAT__Kc($ref$tmp, 15471);
      $__end_$i351 = $db + 4 | 0;
      $92 = HEAP32[$__end_$i351 >> 2] | 0;
      if ($92 >>> 0 < (HEAP32[$db + 8 >> 2] | 0) >>> 0) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($92, $ref$tmp);
       HEAP32[$__end_$i351 >> 2] = (HEAP32[$__end_$i351 >> 2] | 0) + 24;
      } else __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIS3_EEvOT_($db, $ref$tmp);
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($ref$tmp);
      $retval$3 = $add$ptr;
      break L1;
      break;
     }
    default:
     {
      $retval$3 = $first;
      break L1;
     }
    }
    break;
   }
  case 110:
   {
    switch (HEAP8[$arrayidx1 >> 0] | 0) {
    case 97:
     {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj15EEERAT__Kc($ref$tmp, 15482);
      $__end_$i359 = $db + 4 | 0;
      $96 = HEAP32[$__end_$i359 >> 2] | 0;
      if ($96 >>> 0 < (HEAP32[$db + 8 >> 2] | 0) >>> 0) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($96, $ref$tmp);
       HEAP32[$__end_$i359 >> 2] = (HEAP32[$__end_$i359 >> 2] | 0) + 24;
      } else __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIS3_EEvOT_($db, $ref$tmp);
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($ref$tmp);
      $retval$3 = $add$ptr;
      break L1;
      break;
     }
    case 101:
     {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj11EEERAT__Kc($ref$tmp, 15497);
      $__end_$i367 = $db + 4 | 0;
      $99 = HEAP32[$__end_$i367 >> 2] | 0;
      if ($99 >>> 0 < (HEAP32[$db + 8 >> 2] | 0) >>> 0) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($99, $ref$tmp);
       HEAP32[$__end_$i367 >> 2] = (HEAP32[$__end_$i367 >> 2] | 0) + 24;
      } else __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIS3_EEvOT_($db, $ref$tmp);
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($ref$tmp);
      $retval$3 = $add$ptr;
      break L1;
      break;
     }
    case 103:
     {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj10EEERAT__Kc($ref$tmp, 15439);
      $__end_$i375 = $db + 4 | 0;
      $102 = HEAP32[$__end_$i375 >> 2] | 0;
      if ($102 >>> 0 < (HEAP32[$db + 8 >> 2] | 0) >>> 0) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($102, $ref$tmp);
       HEAP32[$__end_$i375 >> 2] = (HEAP32[$__end_$i375 >> 2] | 0) + 24;
      } else __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIS3_EEvOT_($db, $ref$tmp);
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($ref$tmp);
      $retval$3 = $add$ptr;
      break L1;
      break;
     }
    case 116:
     {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj10EEERAT__Kc($ref$tmp, 15508);
      $__end_$i383 = $db + 4 | 0;
      $105 = HEAP32[$__end_$i383 >> 2] | 0;
      if ($105 >>> 0 < (HEAP32[$db + 8 >> 2] | 0) >>> 0) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($105, $ref$tmp);
       HEAP32[$__end_$i383 >> 2] = (HEAP32[$__end_$i383 >> 2] | 0) + 24;
      } else __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIS3_EEvOT_($db, $ref$tmp);
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($ref$tmp);
      $retval$3 = $add$ptr;
      break L1;
      break;
     }
    case 119:
     {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj13EEERAT__Kc($ref$tmp, 15518);
      $__end_$i391 = $db + 4 | 0;
      $108 = HEAP32[$__end_$i391 >> 2] | 0;
      if ($108 >>> 0 < (HEAP32[$db + 8 >> 2] | 0) >>> 0) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($108, $ref$tmp);
       HEAP32[$__end_$i391 >> 2] = (HEAP32[$__end_$i391 >> 2] | 0) + 24;
      } else __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIS3_EEvOT_($db, $ref$tmp);
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($ref$tmp);
      $retval$3 = $add$ptr;
      break L1;
      break;
     }
    default:
     {
      $retval$3 = $first;
      break L1;
     }
    }
    break;
   }
  case 111:
   {
    switch (HEAP8[$arrayidx1 >> 0] | 0) {
    case 111:
     {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj11EEERAT__Kc($ref$tmp, 15531);
      $__end_$i399 = $db + 4 | 0;
      $112 = HEAP32[$__end_$i399 >> 2] | 0;
      if ($112 >>> 0 < (HEAP32[$db + 8 >> 2] | 0) >>> 0) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($112, $ref$tmp);
       HEAP32[$__end_$i399 >> 2] = (HEAP32[$__end_$i399 >> 2] | 0) + 24;
      } else __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIS3_EEvOT_($db, $ref$tmp);
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($ref$tmp);
      $retval$3 = $add$ptr;
      break L1;
      break;
     }
    case 114:
     {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj10EEERAT__Kc($ref$tmp, 15542);
      $__end_$i407 = $db + 4 | 0;
      $115 = HEAP32[$__end_$i407 >> 2] | 0;
      if ($115 >>> 0 < (HEAP32[$db + 8 >> 2] | 0) >>> 0) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($115, $ref$tmp);
       HEAP32[$__end_$i407 >> 2] = (HEAP32[$__end_$i407 >> 2] | 0) + 24;
      } else __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIS3_EEvOT_($db, $ref$tmp);
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($ref$tmp);
      $retval$3 = $add$ptr;
      break L1;
      break;
     }
    case 82:
     {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj11EEERAT__Kc($ref$tmp, 15552);
      $__end_$i415 = $db + 4 | 0;
      $118 = HEAP32[$__end_$i415 >> 2] | 0;
      if ($118 >>> 0 < (HEAP32[$db + 8 >> 2] | 0) >>> 0) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($118, $ref$tmp);
       HEAP32[$__end_$i415 >> 2] = (HEAP32[$__end_$i415 >> 2] | 0) + 24;
      } else __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIS3_EEvOT_($db, $ref$tmp);
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($ref$tmp);
      $retval$3 = $add$ptr;
      break L1;
      break;
     }
    default:
     {
      $retval$3 = $first;
      break L1;
     }
    }
    break;
   }
  case 112:
   {
    switch (HEAP8[$arrayidx1 >> 0] | 0) {
    case 109:
     {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj12EEERAT__Kc($ref$tmp, 15563);
      $__end_$i423 = $db + 4 | 0;
      $122 = HEAP32[$__end_$i423 >> 2] | 0;
      if ($122 >>> 0 < (HEAP32[$db + 8 >> 2] | 0) >>> 0) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($122, $ref$tmp);
       HEAP32[$__end_$i423 >> 2] = (HEAP32[$__end_$i423 >> 2] | 0) + 24;
      } else __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIS3_EEvOT_($db, $ref$tmp);
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($ref$tmp);
      $retval$3 = $add$ptr;
      break L1;
      break;
     }
    case 108:
     {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj10EEERAT__Kc($ref$tmp, 15575);
      $__end_$i431 = $db + 4 | 0;
      $125 = HEAP32[$__end_$i431 >> 2] | 0;
      if ($125 >>> 0 < (HEAP32[$db + 8 >> 2] | 0) >>> 0) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($125, $ref$tmp);
       HEAP32[$__end_$i431 >> 2] = (HEAP32[$__end_$i431 >> 2] | 0) + 24;
      } else __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIS3_EEvOT_($db, $ref$tmp);
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($ref$tmp);
      $retval$3 = $add$ptr;
      break L1;
      break;
     }
    case 76:
     {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj11EEERAT__Kc($ref$tmp, 15585);
      $__end_$i439 = $db + 4 | 0;
      $128 = HEAP32[$__end_$i439 >> 2] | 0;
      if ($128 >>> 0 < (HEAP32[$db + 8 >> 2] | 0) >>> 0) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($128, $ref$tmp);
       HEAP32[$__end_$i439 >> 2] = (HEAP32[$__end_$i439 >> 2] | 0) + 24;
      } else __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIS3_EEvOT_($db, $ref$tmp);
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($ref$tmp);
      $retval$3 = $add$ptr;
      break L1;
      break;
     }
    case 112:
     {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj11EEERAT__Kc($ref$tmp, 15596);
      $__end_$i447 = $db + 4 | 0;
      $131 = HEAP32[$__end_$i447 >> 2] | 0;
      if ($131 >>> 0 < (HEAP32[$db + 8 >> 2] | 0) >>> 0) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($131, $ref$tmp);
       HEAP32[$__end_$i447 >> 2] = (HEAP32[$__end_$i447 >> 2] | 0) + 24;
      } else __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIS3_EEvOT_($db, $ref$tmp);
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($ref$tmp);
      $retval$3 = $add$ptr;
      break L1;
      break;
     }
    case 115:
     {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj10EEERAT__Kc($ref$tmp, 15575);
      $__end_$i455 = $db + 4 | 0;
      $134 = HEAP32[$__end_$i455 >> 2] | 0;
      if ($134 >>> 0 < (HEAP32[$db + 8 >> 2] | 0) >>> 0) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($134, $ref$tmp);
       HEAP32[$__end_$i455 >> 2] = (HEAP32[$__end_$i455 >> 2] | 0) + 24;
      } else __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIS3_EEvOT_($db, $ref$tmp);
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($ref$tmp);
      $retval$3 = $add$ptr;
      break L1;
      break;
     }
    case 116:
     {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj11EEERAT__Kc($ref$tmp, 15607);
      $__end_$i463 = $db + 4 | 0;
      $137 = HEAP32[$__end_$i463 >> 2] | 0;
      if ($137 >>> 0 < (HEAP32[$db + 8 >> 2] | 0) >>> 0) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($137, $ref$tmp);
       HEAP32[$__end_$i463 >> 2] = (HEAP32[$__end_$i463 >> 2] | 0) + 24;
      } else __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIS3_EEvOT_($db, $ref$tmp);
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($ref$tmp);
      $retval$3 = $add$ptr;
      break L1;
      break;
     }
    default:
     {
      $retval$3 = $first;
      break L1;
     }
    }
    break;
   }
  case 113:
   {
    if ((HEAP8[$arrayidx1 >> 0] | 0) != 117) {
     $retval$3 = $first;
     break L1;
    }
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj10EEERAT__Kc($ref$tmp, 15618);
    $__end_$i471 = $db + 4 | 0;
    $141 = HEAP32[$__end_$i471 >> 2] | 0;
    if ($141 >>> 0 < (HEAP32[$db + 8 >> 2] | 0) >>> 0) {
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($141, $ref$tmp);
     HEAP32[$__end_$i471 >> 2] = (HEAP32[$__end_$i471 >> 2] | 0) + 24;
    } else __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIS3_EEvOT_($db, $ref$tmp);
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($ref$tmp);
    $retval$3 = $add$ptr;
    break L1;
    break;
   }
  case 114:
   {
    switch (HEAP8[$arrayidx1 >> 0] | 0) {
    case 109:
     {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj10EEERAT__Kc($ref$tmp, 15628);
      $__end_$i479 = $db + 4 | 0;
      $145 = HEAP32[$__end_$i479 >> 2] | 0;
      if ($145 >>> 0 < (HEAP32[$db + 8 >> 2] | 0) >>> 0) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($145, $ref$tmp);
       HEAP32[$__end_$i479 >> 2] = (HEAP32[$__end_$i479 >> 2] | 0) + 24;
      } else __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIS3_EEvOT_($db, $ref$tmp);
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($ref$tmp);
      $retval$3 = $add$ptr;
      break L1;
      break;
     }
    case 77:
     {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj11EEERAT__Kc($ref$tmp, 15638);
      $__end_$i487 = $db + 4 | 0;
      $148 = HEAP32[$__end_$i487 >> 2] | 0;
      if ($148 >>> 0 < (HEAP32[$db + 8 >> 2] | 0) >>> 0) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($148, $ref$tmp);
       HEAP32[$__end_$i487 >> 2] = (HEAP32[$__end_$i487 >> 2] | 0) + 24;
      } else __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIS3_EEvOT_($db, $ref$tmp);
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($ref$tmp);
      $retval$3 = $add$ptr;
      break L1;
      break;
     }
    case 115:
     {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj11EEERAT__Kc($ref$tmp, 15649);
      $__end_$i495 = $db + 4 | 0;
      $151 = HEAP32[$__end_$i495 >> 2] | 0;
      if ($151 >>> 0 < (HEAP32[$db + 8 >> 2] | 0) >>> 0) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($151, $ref$tmp);
       HEAP32[$__end_$i495 >> 2] = (HEAP32[$__end_$i495 >> 2] | 0) + 24;
      } else __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIS3_EEvOT_($db, $ref$tmp);
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($ref$tmp);
      $retval$3 = $add$ptr;
      break L1;
      break;
     }
    case 83:
     {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj12EEERAT__Kc($ref$tmp, 15660);
      $__end_$i503 = $db + 4 | 0;
      $154 = HEAP32[$__end_$i503 >> 2] | 0;
      if ($154 >>> 0 < (HEAP32[$db + 8 >> 2] | 0) >>> 0) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($154, $ref$tmp);
       HEAP32[$__end_$i503 >> 2] = (HEAP32[$__end_$i503 >> 2] | 0) + 24;
      } else __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIS3_EEvOT_($db, $ref$tmp);
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($ref$tmp);
      $retval$3 = $add$ptr;
      break L1;
      break;
     }
    default:
     {
      $retval$3 = $first;
      break L1;
     }
    }
    break;
   }
  case 118:
   {
    if (((HEAP8[$arrayidx1 >> 0] | 0) + -48 | 0) >>> 0 >= 10) {
     $retval$3 = $first;
     break L1;
    }
    $call370 = __ZN10__cxxabiv112_GLOBAL__N_117parse_source_nameINS0_2DbEEEPKcS4_S4_RT_($add$ptr, $last, $db) | 0;
    if (($call370 | 0) == ($add$ptr | 0)) {
     $retval$3 = $first;
     break L1;
    }
    $159 = HEAP32[$db + 4 >> 2] | 0;
    if ((HEAP32[$db >> 2] | 0) == ($159 | 0)) {
     $retval$3 = $first;
     break L1;
    }
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKc($159 + -24 | 0, 0, 15260) | 0;
    $retval$3 = $call370;
    break L1;
    break;
   }
  default:
   {
    $retval$3 = $first;
    break L1;
   }
  } while (0);
 } else $retval$3 = $first; while (0);
 STACKTOP = sp;
 return $retval$3 | 0;
}

function __ZN10__cxxabiv112_GLOBAL__N_118parse_expr_primaryINS0_2DbEEEPKcS4_S4_RT_($first, $last, $db) {
 $first = $first | 0;
 $last = $last | 0;
 $db = $db | 0;
 var $13 = 0, $15 = 0, $16 = 0, $4 = 0, $7 = 0, $__end_$i = 0, $__end_$i151 = 0, $__end_$i445 = 0, $__first$addr$0$i$i = 0, $__i$0$i$i$i = 0, $__i$0$i$i$i452 = 0, $__i$0$i$i$i476 = 0, $__p$0$i$i = 0, $__p$0$i$i177 = 0, $__p$0$i$i199 = 0, $__p$0$i$i221 = 0, $__p$0$i$i243 = 0, $__p$0$i$i265 = 0, $__p$0$i$i287 = 0, $__p$0$i$i309 = 0, $__p$0$i$i331 = 0, $__p$0$i$i353 = 0, $__p$0$i$i375 = 0, $__p$0$i$i397 = 0, $__p$0$i$i419 = 0, $__p$0$i$i441 = 0, $__p$0$i$i473 = 0, $__p$0$ph$i$i = 0, $add$ptr = 0, $add$ptr17 = 0, $agg$tmp = 0, $and$i$i$i$i = 0, $and$i$i$i$i170 = 0, $and$i$i$i$i192 = 0, $and$i$i$i$i214 = 0, $and$i$i$i$i236 = 0, $and$i$i$i$i258 = 0, $and$i$i$i$i280 = 0, $and$i$i$i$i302 = 0, $and$i$i$i$i324 = 0, $and$i$i$i$i346 = 0, $and$i$i$i$i368 = 0, $and$i$i$i$i390 = 0, $and$i$i$i$i412 = 0, $and$i$i$i$i434 = 0, $and$i$i$i$i467 = 0, $arrayidx = 0, $arrayidx7 = 0, $call = 0, $call$i = 0, $call$i$i$i = 0, $call$i$i$i171 = 0, $call$i$i$i193 = 0, $call$i$i$i215 = 0, $call$i$i$i237 = 0, $call$i$i$i259 = 0, $call$i$i$i281 = 0, $call$i$i$i303 = 0, $call$i$i$i325 = 0, $call$i$i$i347 = 0, $call$i$i$i369 = 0, $call$i$i$i391 = 0, $call$i$i$i413 = 0, $call$i$i$i435 = 0, $call$i$i$i468 = 0, $call$i160 = 0, $call$i182 = 0, $call$i204 = 0, $call$i226 = 0, $call$i248 = 0, $call$i270 = 0, $call$i292 = 0, $call$i314 = 0, $call$i336 = 0, $call$i358 = 0, $call$i380 = 0, $call$i402 = 0, $call$i424 = 0, $call108 = 0, $call119 = 0, $call130 = 0, $call141 = 0, $call152 = 0, $call163 = 0, $call171 = 0, $call179 = 0, $call187 = 0, $call199 = 0, $call213 = 0, $call31 = 0, $call42 = 0, $call53 = 0, $call64 = 0, $call75 = 0, $call86 = 0, $call97 = 0, $incdec$ptr = 0, $n$0 = 0, $ref$tmp = 0, $ref$tmp$i$i459 = 0, $ref$tmp237 = 0, $ref$tmp238 = 0, $ref$tmp239 = 0, $ref$tmp246 = 0, $retval$3 = 0, $sub$ptr$sub$i$i$i$i = 0, $tobool$i$i$i$i$i = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(112);
 $ref$tmp$i$i459 = sp + 88 | 0;
 $ref$tmp = sp + 48 | 0;
 $agg$tmp = sp + 72 | 0;
 $ref$tmp237 = sp + 36 | 0;
 $ref$tmp238 = sp + 24 | 0;
 $ref$tmp239 = sp + 12 | 0;
 $ref$tmp246 = sp;
 L1 : do if (($last - $first | 0) > 3) if ((HEAP8[$first >> 0] | 0) == 76) {
  $arrayidx = $first + 1 | 0;
  $arrayidx7 = $first + 3 | 0;
  $add$ptr = $first + 2 | 0;
  do switch (HEAP8[$arrayidx >> 0] | 0) {
  case 84:
   {
    $retval$3 = $first;
    break L1;
    break;
   }
  case 119:
   {
    HEAP32[$ref$tmp >> 2] = 0;
    HEAP32[$ref$tmp + 4 >> 2] = 0;
    HEAP32[$ref$tmp + 8 >> 2] = 0;
    $call$i = __ZNSt3__211char_traitsIcE6lengthEPKc(16079) | 0;
    if ($call$i >>> 0 > 4294967279) __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($ref$tmp);
    if ($call$i >>> 0 < 11) {
     HEAP8[$ref$tmp + 11 >> 0] = $call$i;
     $__p$0$i$i = $ref$tmp;
    } else {
     $and$i$i$i$i = $call$i + 16 & -16;
     $call$i$i$i = __ZN10__cxxabiv112_GLOBAL__N_112malloc_allocIcE8allocateEj($and$i$i$i$i) | 0;
     HEAP32[$ref$tmp >> 2] = $call$i$i$i;
     HEAP32[$ref$tmp + 8 >> 2] = $and$i$i$i$i | -2147483648;
     HEAP32[$ref$tmp + 4 >> 2] = $call$i;
     $__p$0$i$i = $call$i$i$i;
    }
    __ZNSt3__211char_traitsIcE4copyEPcPKcj($__p$0$i$i, 16079, $call$i) | 0;
    HEAP8[$ref$tmp$i$i459 >> 0] = 0;
    __ZNSt3__211char_traitsIcE6assignERcRKc($__p$0$i$i + $call$i | 0, $ref$tmp$i$i459);
    $call = __ZN10__cxxabiv112_GLOBAL__N_121parse_integer_literalINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($add$ptr, $last, $ref$tmp, $db) | 0;
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($ref$tmp);
    $retval$3 = ($call | 0) == ($add$ptr | 0) ? $first : $call;
    break L1;
    break;
   }
  case 98:
   {
    if ((HEAP8[$arrayidx7 >> 0] | 0) != 69) {
     $retval$3 = $first;
     break L1;
    }
    $add$ptr17 = $first + 4 | 0;
    switch (HEAP8[$add$ptr >> 0] | 0) {
    case 48:
     {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj6EEERAT__Kc($ref$tmp$i$i459, 16087);
      $__end_$i = $db + 4 | 0;
      $4 = HEAP32[$__end_$i >> 2] | 0;
      if ($4 >>> 0 < (HEAP32[$db + 8 >> 2] | 0) >>> 0) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($4, $ref$tmp$i$i459);
       HEAP32[$__end_$i >> 2] = (HEAP32[$__end_$i >> 2] | 0) + 24;
      } else __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIS3_EEvOT_($db, $ref$tmp$i$i459);
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($ref$tmp$i$i459);
      $retval$3 = $add$ptr17;
      break L1;
      break;
     }
    case 49:
     {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj5EEERAT__Kc($ref$tmp$i$i459, 16093);
      $__end_$i151 = $db + 4 | 0;
      $7 = HEAP32[$__end_$i151 >> 2] | 0;
      if ($7 >>> 0 < (HEAP32[$db + 8 >> 2] | 0) >>> 0) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($7, $ref$tmp$i$i459);
       HEAP32[$__end_$i151 >> 2] = (HEAP32[$__end_$i151 >> 2] | 0) + 24;
      } else __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIS3_EEvOT_($db, $ref$tmp$i$i459);
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($ref$tmp$i$i459);
      $retval$3 = $add$ptr17;
      break L1;
      break;
     }
    default:
     {
      $retval$3 = $first;
      break L1;
     }
    }
    break;
   }
  case 99:
   {
    HEAP32[$ref$tmp >> 2] = 0;
    HEAP32[$ref$tmp + 4 >> 2] = 0;
    HEAP32[$ref$tmp + 8 >> 2] = 0;
    $call$i160 = __ZNSt3__211char_traitsIcE6lengthEPKc(16098) | 0;
    if ($call$i160 >>> 0 > 4294967279) __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($ref$tmp);
    if ($call$i160 >>> 0 < 11) {
     HEAP8[$ref$tmp + 11 >> 0] = $call$i160;
     $__p$0$i$i177 = $ref$tmp;
    } else {
     $and$i$i$i$i170 = $call$i160 + 16 & -16;
     $call$i$i$i171 = __ZN10__cxxabiv112_GLOBAL__N_112malloc_allocIcE8allocateEj($and$i$i$i$i170) | 0;
     HEAP32[$ref$tmp >> 2] = $call$i$i$i171;
     HEAP32[$ref$tmp + 8 >> 2] = $and$i$i$i$i170 | -2147483648;
     HEAP32[$ref$tmp + 4 >> 2] = $call$i160;
     $__p$0$i$i177 = $call$i$i$i171;
    }
    __ZNSt3__211char_traitsIcE4copyEPcPKcj($__p$0$i$i177, 16098, $call$i160) | 0;
    HEAP8[$ref$tmp$i$i459 >> 0] = 0;
    __ZNSt3__211char_traitsIcE6assignERcRKc($__p$0$i$i177 + $call$i160 | 0, $ref$tmp$i$i459);
    $call31 = __ZN10__cxxabiv112_GLOBAL__N_121parse_integer_literalINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($add$ptr, $last, $ref$tmp, $db) | 0;
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($ref$tmp);
    $retval$3 = ($call31 | 0) == ($add$ptr | 0) ? $first : $call31;
    break L1;
    break;
   }
  case 97:
   {
    HEAP32[$ref$tmp >> 2] = 0;
    HEAP32[$ref$tmp + 4 >> 2] = 0;
    HEAP32[$ref$tmp + 8 >> 2] = 0;
    $call$i182 = __ZNSt3__211char_traitsIcE6lengthEPKc(16103) | 0;
    if ($call$i182 >>> 0 > 4294967279) __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($ref$tmp);
    if ($call$i182 >>> 0 < 11) {
     HEAP8[$ref$tmp + 11 >> 0] = $call$i182;
     $__p$0$i$i199 = $ref$tmp;
    } else {
     $and$i$i$i$i192 = $call$i182 + 16 & -16;
     $call$i$i$i193 = __ZN10__cxxabiv112_GLOBAL__N_112malloc_allocIcE8allocateEj($and$i$i$i$i192) | 0;
     HEAP32[$ref$tmp >> 2] = $call$i$i$i193;
     HEAP32[$ref$tmp + 8 >> 2] = $and$i$i$i$i192 | -2147483648;
     HEAP32[$ref$tmp + 4 >> 2] = $call$i182;
     $__p$0$i$i199 = $call$i$i$i193;
    }
    __ZNSt3__211char_traitsIcE4copyEPcPKcj($__p$0$i$i199, 16103, $call$i182) | 0;
    HEAP8[$ref$tmp$i$i459 >> 0] = 0;
    __ZNSt3__211char_traitsIcE6assignERcRKc($__p$0$i$i199 + $call$i182 | 0, $ref$tmp$i$i459);
    $call42 = __ZN10__cxxabiv112_GLOBAL__N_121parse_integer_literalINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($add$ptr, $last, $ref$tmp, $db) | 0;
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($ref$tmp);
    $retval$3 = ($call42 | 0) == ($add$ptr | 0) ? $first : $call42;
    break L1;
    break;
   }
  case 104:
   {
    HEAP32[$ref$tmp >> 2] = 0;
    HEAP32[$ref$tmp + 4 >> 2] = 0;
    HEAP32[$ref$tmp + 8 >> 2] = 0;
    $call$i204 = __ZNSt3__211char_traitsIcE6lengthEPKc(16115) | 0;
    if ($call$i204 >>> 0 > 4294967279) __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($ref$tmp);
    if ($call$i204 >>> 0 < 11) {
     HEAP8[$ref$tmp + 11 >> 0] = $call$i204;
     $__p$0$i$i221 = $ref$tmp;
    } else {
     $and$i$i$i$i214 = $call$i204 + 16 & -16;
     $call$i$i$i215 = __ZN10__cxxabiv112_GLOBAL__N_112malloc_allocIcE8allocateEj($and$i$i$i$i214) | 0;
     HEAP32[$ref$tmp >> 2] = $call$i$i$i215;
     HEAP32[$ref$tmp + 8 >> 2] = $and$i$i$i$i214 | -2147483648;
     HEAP32[$ref$tmp + 4 >> 2] = $call$i204;
     $__p$0$i$i221 = $call$i$i$i215;
    }
    __ZNSt3__211char_traitsIcE4copyEPcPKcj($__p$0$i$i221, 16115, $call$i204) | 0;
    HEAP8[$ref$tmp$i$i459 >> 0] = 0;
    __ZNSt3__211char_traitsIcE6assignERcRKc($__p$0$i$i221 + $call$i204 | 0, $ref$tmp$i$i459);
    $call53 = __ZN10__cxxabiv112_GLOBAL__N_121parse_integer_literalINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($add$ptr, $last, $ref$tmp, $db) | 0;
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($ref$tmp);
    $retval$3 = ($call53 | 0) == ($add$ptr | 0) ? $first : $call53;
    break L1;
    break;
   }
  case 115:
   {
    HEAP32[$ref$tmp >> 2] = 0;
    HEAP32[$ref$tmp + 4 >> 2] = 0;
    HEAP32[$ref$tmp + 8 >> 2] = 0;
    $call$i226 = __ZNSt3__211char_traitsIcE6lengthEPKc(16129) | 0;
    if ($call$i226 >>> 0 > 4294967279) __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($ref$tmp);
    if ($call$i226 >>> 0 < 11) {
     HEAP8[$ref$tmp + 11 >> 0] = $call$i226;
     $__p$0$i$i243 = $ref$tmp;
    } else {
     $and$i$i$i$i236 = $call$i226 + 16 & -16;
     $call$i$i$i237 = __ZN10__cxxabiv112_GLOBAL__N_112malloc_allocIcE8allocateEj($and$i$i$i$i236) | 0;
     HEAP32[$ref$tmp >> 2] = $call$i$i$i237;
     HEAP32[$ref$tmp + 8 >> 2] = $and$i$i$i$i236 | -2147483648;
     HEAP32[$ref$tmp + 4 >> 2] = $call$i226;
     $__p$0$i$i243 = $call$i$i$i237;
    }
    __ZNSt3__211char_traitsIcE4copyEPcPKcj($__p$0$i$i243, 16129, $call$i226) | 0;
    HEAP8[$ref$tmp$i$i459 >> 0] = 0;
    __ZNSt3__211char_traitsIcE6assignERcRKc($__p$0$i$i243 + $call$i226 | 0, $ref$tmp$i$i459);
    $call64 = __ZN10__cxxabiv112_GLOBAL__N_121parse_integer_literalINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($add$ptr, $last, $ref$tmp, $db) | 0;
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($ref$tmp);
    $retval$3 = ($call64 | 0) == ($add$ptr | 0) ? $first : $call64;
    break L1;
    break;
   }
  case 116:
   {
    HEAP32[$ref$tmp >> 2] = 0;
    HEAP32[$ref$tmp + 4 >> 2] = 0;
    HEAP32[$ref$tmp + 8 >> 2] = 0;
    $call$i248 = __ZNSt3__211char_traitsIcE6lengthEPKc(16135) | 0;
    if ($call$i248 >>> 0 > 4294967279) __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($ref$tmp);
    if ($call$i248 >>> 0 < 11) {
     HEAP8[$ref$tmp + 11 >> 0] = $call$i248;
     $__p$0$i$i265 = $ref$tmp;
    } else {
     $and$i$i$i$i258 = $call$i248 + 16 & -16;
     $call$i$i$i259 = __ZN10__cxxabiv112_GLOBAL__N_112malloc_allocIcE8allocateEj($and$i$i$i$i258) | 0;
     HEAP32[$ref$tmp >> 2] = $call$i$i$i259;
     HEAP32[$ref$tmp + 8 >> 2] = $and$i$i$i$i258 | -2147483648;
     HEAP32[$ref$tmp + 4 >> 2] = $call$i248;
     $__p$0$i$i265 = $call$i$i$i259;
    }
    __ZNSt3__211char_traitsIcE4copyEPcPKcj($__p$0$i$i265, 16135, $call$i248) | 0;
    HEAP8[$ref$tmp$i$i459 >> 0] = 0;
    __ZNSt3__211char_traitsIcE6assignERcRKc($__p$0$i$i265 + $call$i248 | 0, $ref$tmp$i$i459);
    $call75 = __ZN10__cxxabiv112_GLOBAL__N_121parse_integer_literalINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($add$ptr, $last, $ref$tmp, $db) | 0;
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($ref$tmp);
    $retval$3 = ($call75 | 0) == ($add$ptr | 0) ? $first : $call75;
    break L1;
    break;
   }
  case 105:
   {
    HEAP32[$ref$tmp >> 2] = 0;
    HEAP32[$ref$tmp + 4 >> 2] = 0;
    HEAP32[$ref$tmp + 8 >> 2] = 0;
    $call$i270 = __ZNSt3__211char_traitsIcE6lengthEPKc(18825) | 0;
    if ($call$i270 >>> 0 > 4294967279) __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($ref$tmp);
    if ($call$i270 >>> 0 < 11) {
     HEAP8[$ref$tmp + 11 >> 0] = $call$i270;
     $__p$0$i$i287 = $ref$tmp;
    } else {
     $and$i$i$i$i280 = $call$i270 + 16 & -16;
     $call$i$i$i281 = __ZN10__cxxabiv112_GLOBAL__N_112malloc_allocIcE8allocateEj($and$i$i$i$i280) | 0;
     HEAP32[$ref$tmp >> 2] = $call$i$i$i281;
     HEAP32[$ref$tmp + 8 >> 2] = $and$i$i$i$i280 | -2147483648;
     HEAP32[$ref$tmp + 4 >> 2] = $call$i270;
     $__p$0$i$i287 = $call$i$i$i281;
    }
    __ZNSt3__211char_traitsIcE4copyEPcPKcj($__p$0$i$i287, 18825, $call$i270) | 0;
    HEAP8[$ref$tmp$i$i459 >> 0] = 0;
    __ZNSt3__211char_traitsIcE6assignERcRKc($__p$0$i$i287 + $call$i270 | 0, $ref$tmp$i$i459);
    $call86 = __ZN10__cxxabiv112_GLOBAL__N_121parse_integer_literalINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($add$ptr, $last, $ref$tmp, $db) | 0;
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($ref$tmp);
    $retval$3 = ($call86 | 0) == ($add$ptr | 0) ? $first : $call86;
    break L1;
    break;
   }
  case 106:
   {
    HEAP32[$ref$tmp >> 2] = 0;
    HEAP32[$ref$tmp + 4 >> 2] = 0;
    HEAP32[$ref$tmp + 8 >> 2] = 0;
    $call$i292 = __ZNSt3__211char_traitsIcE6lengthEPKc(16150) | 0;
    if ($call$i292 >>> 0 > 4294967279) __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($ref$tmp);
    if ($call$i292 >>> 0 < 11) {
     HEAP8[$ref$tmp + 11 >> 0] = $call$i292;
     $__p$0$i$i309 = $ref$tmp;
    } else {
     $and$i$i$i$i302 = $call$i292 + 16 & -16;
     $call$i$i$i303 = __ZN10__cxxabiv112_GLOBAL__N_112malloc_allocIcE8allocateEj($and$i$i$i$i302) | 0;
     HEAP32[$ref$tmp >> 2] = $call$i$i$i303;
     HEAP32[$ref$tmp + 8 >> 2] = $and$i$i$i$i302 | -2147483648;
     HEAP32[$ref$tmp + 4 >> 2] = $call$i292;
     $__p$0$i$i309 = $call$i$i$i303;
    }
    __ZNSt3__211char_traitsIcE4copyEPcPKcj($__p$0$i$i309, 16150, $call$i292) | 0;
    HEAP8[$ref$tmp$i$i459 >> 0] = 0;
    __ZNSt3__211char_traitsIcE6assignERcRKc($__p$0$i$i309 + $call$i292 | 0, $ref$tmp$i$i459);
    $call97 = __ZN10__cxxabiv112_GLOBAL__N_121parse_integer_literalINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($add$ptr, $last, $ref$tmp, $db) | 0;
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($ref$tmp);
    $retval$3 = ($call97 | 0) == ($add$ptr | 0) ? $first : $call97;
    break L1;
    break;
   }
  case 108:
   {
    HEAP32[$ref$tmp >> 2] = 0;
    HEAP32[$ref$tmp + 4 >> 2] = 0;
    HEAP32[$ref$tmp + 8 >> 2] = 0;
    $call$i314 = __ZNSt3__211char_traitsIcE6lengthEPKc(16152) | 0;
    if ($call$i314 >>> 0 > 4294967279) __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($ref$tmp);
    if ($call$i314 >>> 0 < 11) {
     HEAP8[$ref$tmp + 11 >> 0] = $call$i314;
     $__p$0$i$i331 = $ref$tmp;
    } else {
     $and$i$i$i$i324 = $call$i314 + 16 & -16;
     $call$i$i$i325 = __ZN10__cxxabiv112_GLOBAL__N_112malloc_allocIcE8allocateEj($and$i$i$i$i324) | 0;
     HEAP32[$ref$tmp >> 2] = $call$i$i$i325;
     HEAP32[$ref$tmp + 8 >> 2] = $and$i$i$i$i324 | -2147483648;
     HEAP32[$ref$tmp + 4 >> 2] = $call$i314;
     $__p$0$i$i331 = $call$i$i$i325;
    }
    __ZNSt3__211char_traitsIcE4copyEPcPKcj($__p$0$i$i331, 16152, $call$i314) | 0;
    HEAP8[$ref$tmp$i$i459 >> 0] = 0;
    __ZNSt3__211char_traitsIcE6assignERcRKc($__p$0$i$i331 + $call$i314 | 0, $ref$tmp$i$i459);
    $call108 = __ZN10__cxxabiv112_GLOBAL__N_121parse_integer_literalINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($add$ptr, $last, $ref$tmp, $db) | 0;
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($ref$tmp);
    $retval$3 = ($call108 | 0) == ($add$ptr | 0) ? $first : $call108;
    break L1;
    break;
   }
  case 109:
   {
    HEAP32[$ref$tmp >> 2] = 0;
    HEAP32[$ref$tmp + 4 >> 2] = 0;
    HEAP32[$ref$tmp + 8 >> 2] = 0;
    $call$i336 = __ZNSt3__211char_traitsIcE6lengthEPKc(16154) | 0;
    if ($call$i336 >>> 0 > 4294967279) __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($ref$tmp);
    if ($call$i336 >>> 0 < 11) {
     HEAP8[$ref$tmp + 11 >> 0] = $call$i336;
     $__p$0$i$i353 = $ref$tmp;
    } else {
     $and$i$i$i$i346 = $call$i336 + 16 & -16;
     $call$i$i$i347 = __ZN10__cxxabiv112_GLOBAL__N_112malloc_allocIcE8allocateEj($and$i$i$i$i346) | 0;
     HEAP32[$ref$tmp >> 2] = $call$i$i$i347;
     HEAP32[$ref$tmp + 8 >> 2] = $and$i$i$i$i346 | -2147483648;
     HEAP32[$ref$tmp + 4 >> 2] = $call$i336;
     $__p$0$i$i353 = $call$i$i$i347;
    }
    __ZNSt3__211char_traitsIcE4copyEPcPKcj($__p$0$i$i353, 16154, $call$i336) | 0;
    HEAP8[$ref$tmp$i$i459 >> 0] = 0;
    __ZNSt3__211char_traitsIcE6assignERcRKc($__p$0$i$i353 + $call$i336 | 0, $ref$tmp$i$i459);
    $call119 = __ZN10__cxxabiv112_GLOBAL__N_121parse_integer_literalINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($add$ptr, $last, $ref$tmp, $db) | 0;
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($ref$tmp);
    $retval$3 = ($call119 | 0) == ($add$ptr | 0) ? $first : $call119;
    break L1;
    break;
   }
  case 120:
   {
    HEAP32[$ref$tmp >> 2] = 0;
    HEAP32[$ref$tmp + 4 >> 2] = 0;
    HEAP32[$ref$tmp + 8 >> 2] = 0;
    $call$i358 = __ZNSt3__211char_traitsIcE6lengthEPKc(16157) | 0;
    if ($call$i358 >>> 0 > 4294967279) __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($ref$tmp);
    if ($call$i358 >>> 0 < 11) {
     HEAP8[$ref$tmp + 11 >> 0] = $call$i358;
     $__p$0$i$i375 = $ref$tmp;
    } else {
     $and$i$i$i$i368 = $call$i358 + 16 & -16;
     $call$i$i$i369 = __ZN10__cxxabiv112_GLOBAL__N_112malloc_allocIcE8allocateEj($and$i$i$i$i368) | 0;
     HEAP32[$ref$tmp >> 2] = $call$i$i$i369;
     HEAP32[$ref$tmp + 8 >> 2] = $and$i$i$i$i368 | -2147483648;
     HEAP32[$ref$tmp + 4 >> 2] = $call$i358;
     $__p$0$i$i375 = $call$i$i$i369;
    }
    __ZNSt3__211char_traitsIcE4copyEPcPKcj($__p$0$i$i375, 16157, $call$i358) | 0;
    HEAP8[$ref$tmp$i$i459 >> 0] = 0;
    __ZNSt3__211char_traitsIcE6assignERcRKc($__p$0$i$i375 + $call$i358 | 0, $ref$tmp$i$i459);
    $call130 = __ZN10__cxxabiv112_GLOBAL__N_121parse_integer_literalINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($add$ptr, $last, $ref$tmp, $db) | 0;
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($ref$tmp);
    $retval$3 = ($call130 | 0) == ($add$ptr | 0) ? $first : $call130;
    break L1;
    break;
   }
  case 121:
   {
    HEAP32[$ref$tmp >> 2] = 0;
    HEAP32[$ref$tmp + 4 >> 2] = 0;
    HEAP32[$ref$tmp + 8 >> 2] = 0;
    $call$i380 = __ZNSt3__211char_traitsIcE6lengthEPKc(16160) | 0;
    if ($call$i380 >>> 0 > 4294967279) __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($ref$tmp);
    if ($call$i380 >>> 0 < 11) {
     HEAP8[$ref$tmp + 11 >> 0] = $call$i380;
     $__p$0$i$i397 = $ref$tmp;
    } else {
     $and$i$i$i$i390 = $call$i380 + 16 & -16;
     $call$i$i$i391 = __ZN10__cxxabiv112_GLOBAL__N_112malloc_allocIcE8allocateEj($and$i$i$i$i390) | 0;
     HEAP32[$ref$tmp >> 2] = $call$i$i$i391;
     HEAP32[$ref$tmp + 8 >> 2] = $and$i$i$i$i390 | -2147483648;
     HEAP32[$ref$tmp + 4 >> 2] = $call$i380;
     $__p$0$i$i397 = $call$i$i$i391;
    }
    __ZNSt3__211char_traitsIcE4copyEPcPKcj($__p$0$i$i397, 16160, $call$i380) | 0;
    HEAP8[$ref$tmp$i$i459 >> 0] = 0;
    __ZNSt3__211char_traitsIcE6assignERcRKc($__p$0$i$i397 + $call$i380 | 0, $ref$tmp$i$i459);
    $call141 = __ZN10__cxxabiv112_GLOBAL__N_121parse_integer_literalINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($add$ptr, $last, $ref$tmp, $db) | 0;
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($ref$tmp);
    $retval$3 = ($call141 | 0) == ($add$ptr | 0) ? $first : $call141;
    break L1;
    break;
   }
  case 110:
   {
    HEAP32[$ref$tmp >> 2] = 0;
    HEAP32[$ref$tmp + 4 >> 2] = 0;
    HEAP32[$ref$tmp + 8 >> 2] = 0;
    $call$i402 = __ZNSt3__211char_traitsIcE6lengthEPKc(16164) | 0;
    if ($call$i402 >>> 0 > 4294967279) __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($ref$tmp);
    if ($call$i402 >>> 0 < 11) {
     HEAP8[$ref$tmp + 11 >> 0] = $call$i402;
     $__p$0$i$i419 = $ref$tmp;
    } else {
     $and$i$i$i$i412 = $call$i402 + 16 & -16;
     $call$i$i$i413 = __ZN10__cxxabiv112_GLOBAL__N_112malloc_allocIcE8allocateEj($and$i$i$i$i412) | 0;
     HEAP32[$ref$tmp >> 2] = $call$i$i$i413;
     HEAP32[$ref$tmp + 8 >> 2] = $and$i$i$i$i412 | -2147483648;
     HEAP32[$ref$tmp + 4 >> 2] = $call$i402;
     $__p$0$i$i419 = $call$i$i$i413;
    }
    __ZNSt3__211char_traitsIcE4copyEPcPKcj($__p$0$i$i419, 16164, $call$i402) | 0;
    HEAP8[$ref$tmp$i$i459 >> 0] = 0;
    __ZNSt3__211char_traitsIcE6assignERcRKc($__p$0$i$i419 + $call$i402 | 0, $ref$tmp$i$i459);
    $call152 = __ZN10__cxxabiv112_GLOBAL__N_121parse_integer_literalINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($add$ptr, $last, $ref$tmp, $db) | 0;
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($ref$tmp);
    $retval$3 = ($call152 | 0) == ($add$ptr | 0) ? $first : $call152;
    break L1;
    break;
   }
  case 111:
   {
    HEAP32[$ref$tmp >> 2] = 0;
    HEAP32[$ref$tmp + 4 >> 2] = 0;
    HEAP32[$ref$tmp + 8 >> 2] = 0;
    $call$i424 = __ZNSt3__211char_traitsIcE6lengthEPKc(16173) | 0;
    if ($call$i424 >>> 0 > 4294967279) __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($ref$tmp);
    if ($call$i424 >>> 0 < 11) {
     HEAP8[$ref$tmp + 11 >> 0] = $call$i424;
     $__p$0$i$i441 = $ref$tmp;
    } else {
     $and$i$i$i$i434 = $call$i424 + 16 & -16;
     $call$i$i$i435 = __ZN10__cxxabiv112_GLOBAL__N_112malloc_allocIcE8allocateEj($and$i$i$i$i434) | 0;
     HEAP32[$ref$tmp >> 2] = $call$i$i$i435;
     HEAP32[$ref$tmp + 8 >> 2] = $and$i$i$i$i434 | -2147483648;
     HEAP32[$ref$tmp + 4 >> 2] = $call$i424;
     $__p$0$i$i441 = $call$i$i$i435;
    }
    __ZNSt3__211char_traitsIcE4copyEPcPKcj($__p$0$i$i441, 16173, $call$i424) | 0;
    HEAP8[$ref$tmp$i$i459 >> 0] = 0;
    __ZNSt3__211char_traitsIcE6assignERcRKc($__p$0$i$i441 + $call$i424 | 0, $ref$tmp$i$i459);
    $call163 = __ZN10__cxxabiv112_GLOBAL__N_121parse_integer_literalINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($add$ptr, $last, $ref$tmp, $db) | 0;
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($ref$tmp);
    $retval$3 = ($call163 | 0) == ($add$ptr | 0) ? $first : $call163;
    break L1;
    break;
   }
  case 102:
   {
    $call171 = __ZN10__cxxabiv112_GLOBAL__N_121parse_floating_numberIfNS0_2DbEEEPKcS4_S4_RT0_($add$ptr, $last, $db) | 0;
    $retval$3 = ($call171 | 0) == ($add$ptr | 0) ? $first : $call171;
    break L1;
    break;
   }
  case 100:
   {
    $call179 = __ZN10__cxxabiv112_GLOBAL__N_121parse_floating_numberIdNS0_2DbEEEPKcS4_S4_RT0_($add$ptr, $last, $db) | 0;
    $retval$3 = ($call179 | 0) == ($add$ptr | 0) ? $first : $call179;
    break L1;
    break;
   }
  case 101:
   {
    $call187 = __ZN10__cxxabiv112_GLOBAL__N_121parse_floating_numberIeNS0_2DbEEEPKcS4_S4_RT0_($add$ptr, $last, $db) | 0;
    $retval$3 = ($call187 | 0) == ($add$ptr | 0) ? $first : $call187;
    break L1;
    break;
   }
  case 95:
   {
    if ((HEAP8[$add$ptr >> 0] | 0) != 90) {
     $retval$3 = $first;
     break L1;
    }
    $call199 = __ZN10__cxxabiv112_GLOBAL__N_114parse_encodingINS0_2DbEEEPKcS4_S4_RT_($arrayidx7, $last, $db) | 0;
    if (($call199 | 0) == ($arrayidx7 | 0) | ($call199 | 0) == ($last | 0)) {
     $retval$3 = $first;
     break L1;
    }
    $retval$3 = (HEAP8[$call199 >> 0] | 0) == 69 ? $call199 + 1 | 0 : $first;
    break L1;
    break;
   }
  default:
   {
    $call213 = __ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($arrayidx, $last, $db) | 0;
    if (($call213 | 0) == ($arrayidx | 0) | ($call213 | 0) == ($last | 0)) {
     $retval$3 = $first;
     break L1;
    }
    if ((HEAP8[$call213 >> 0] | 0) == 69) {
     $retval$3 = $call213 + 1 | 0;
     break L1;
    } else $n$0 = $call213;
    while (1) {
     $incdec$ptr = $n$0 + 1 | 0;
     if (($n$0 | 0) == ($last | 0)) {
      $retval$3 = $first;
      break L1;
     }
     $13 = HEAP8[$n$0 >> 0] | 0;
     if ((($13 << 24 >> 24) + -48 | 0) >>> 0 < 10) $n$0 = $incdec$ptr; else break;
    }
    if (!(($n$0 | 0) != ($call213 | 0) & $13 << 24 >> 24 == 69)) {
     $retval$3 = $first;
     break L1;
    }
    $__end_$i445 = $db + 4 | 0;
    $15 = HEAP32[$__end_$i445 >> 2] | 0;
    if ((HEAP32[$db >> 2] | 0) == ($15 | 0)) {
     $retval$3 = $first;
     break L1;
    }
    __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($ref$tmp239, $15 + -24 | 0);
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKc($ref$tmp239, 0, 14887) | 0;
    HEAP32[$ref$tmp238 >> 2] = HEAP32[$ref$tmp239 >> 2];
    HEAP32[$ref$tmp238 + 4 >> 2] = HEAP32[$ref$tmp239 + 4 >> 2];
    HEAP32[$ref$tmp238 + 8 >> 2] = HEAP32[$ref$tmp239 + 8 >> 2];
    $__i$0$i$i$i = 0;
    while (1) {
     if (($__i$0$i$i$i | 0) == 3) break;
     HEAP32[$ref$tmp239 + ($__i$0$i$i$i << 2) >> 2] = 0;
     $__i$0$i$i$i = $__i$0$i$i$i + 1 | 0;
    }
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($ref$tmp238, 14885) | 0;
    HEAP32[$ref$tmp237 >> 2] = HEAP32[$ref$tmp238 >> 2];
    HEAP32[$ref$tmp237 + 4 >> 2] = HEAP32[$ref$tmp238 + 4 >> 2];
    HEAP32[$ref$tmp237 + 8 >> 2] = HEAP32[$ref$tmp238 + 8 >> 2];
    $__i$0$i$i$i452 = 0;
    while (1) {
     if (($__i$0$i$i$i452 | 0) == 3) break;
     HEAP32[$ref$tmp238 + ($__i$0$i$i$i452 << 2) >> 2] = 0;
     $__i$0$i$i$i452 = $__i$0$i$i$i452 + 1 | 0;
    }
    HEAP32[$ref$tmp246 >> 2] = 0;
    HEAP32[$ref$tmp246 + 4 >> 2] = 0;
    HEAP32[$ref$tmp246 + 8 >> 2] = 0;
    $sub$ptr$sub$i$i$i$i = $n$0 - $call213 | 0;
    if ($sub$ptr$sub$i$i$i$i >>> 0 > 4294967279) __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($ref$tmp246);
    if ($sub$ptr$sub$i$i$i$i >>> 0 < 11) {
     HEAP8[$ref$tmp246 + 11 >> 0] = $sub$ptr$sub$i$i$i$i;
     $__p$0$ph$i$i = $ref$tmp246;
    } else {
     $and$i$i$i$i467 = $sub$ptr$sub$i$i$i$i + 16 & -16;
     $call$i$i$i468 = __ZN10__cxxabiv112_GLOBAL__N_112malloc_allocIcE8allocateEj($and$i$i$i$i467) | 0;
     HEAP32[$ref$tmp246 >> 2] = $call$i$i$i468;
     HEAP32[$ref$tmp246 + 8 >> 2] = $and$i$i$i$i467 | -2147483648;
     HEAP32[$ref$tmp246 + 4 >> 2] = $sub$ptr$sub$i$i$i$i;
     $__p$0$ph$i$i = $call$i$i$i468;
    }
    $__first$addr$0$i$i = $call213;
    $__p$0$i$i473 = $__p$0$ph$i$i;
    while (1) {
     if (($__first$addr$0$i$i | 0) == ($n$0 | 0)) break;
     __ZNSt3__211char_traitsIcE6assignERcRKc($__p$0$i$i473, $__first$addr$0$i$i);
     $__first$addr$0$i$i = $__first$addr$0$i$i + 1 | 0;
     $__p$0$i$i473 = $__p$0$i$i473 + 1 | 0;
    }
    HEAP8[$ref$tmp$i$i459 >> 0] = 0;
    __ZNSt3__211char_traitsIcE6assignERcRKc($__p$0$ph$i$i + $sub$ptr$sub$i$i$i$i | 0, $ref$tmp$i$i459);
    $16 = HEAP8[$ref$tmp246 + 11 >> 0] | 0;
    $tobool$i$i$i$i$i = $16 << 24 >> 24 < 0;
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($ref$tmp237, $tobool$i$i$i$i$i ? HEAP32[$ref$tmp246 >> 2] | 0 : $ref$tmp246, $tobool$i$i$i$i$i ? HEAP32[$ref$tmp246 + 4 >> 2] | 0 : $16 & 255) | 0;
    HEAP32[$agg$tmp >> 2] = HEAP32[$ref$tmp237 >> 2];
    HEAP32[$agg$tmp + 4 >> 2] = HEAP32[$ref$tmp237 + 4 >> 2];
    HEAP32[$agg$tmp + 8 >> 2] = HEAP32[$ref$tmp237 + 8 >> 2];
    $__i$0$i$i$i476 = 0;
    while (1) {
     if (($__i$0$i$i$i476 | 0) == 3) break;
     HEAP32[$ref$tmp237 + ($__i$0$i$i$i476 << 2) >> 2] = 0;
     $__i$0$i$i$i476 = $__i$0$i$i$i476 + 1 | 0;
    }
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ENSt3__212basic_stringIcNS2_11char_traitsIcEENS0_12malloc_allocIcEEEE($ref$tmp, $agg$tmp);
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairaSEOS1_((HEAP32[$__end_$i445 >> 2] | 0) + -24 | 0, $ref$tmp);
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($ref$tmp);
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($agg$tmp);
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($ref$tmp246);
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($ref$tmp237);
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($ref$tmp238);
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($ref$tmp239);
    $retval$3 = $incdec$ptr;
    break L1;
   }
  } while (0);
 } else $retval$3 = $first; else $retval$3 = $first; while (0);
 STACKTOP = sp;
 return $retval$3 | 0;
}

function __ZNSt3__212__next_primeEj($n) {
 $n = $n | 0;
 var $2 = 0, $add108 = 0, $add117 = 0, $add126 = 0, $add135 = 0, $add144 = 0, $add153 = 0, $add162 = 0, $add171 = 0, $add180 = 0, $add189 = 0, $add198 = 0, $add207 = 0, $add216 = 0, $add225 = 0, $add234 = 0, $add243 = 0, $add252 = 0, $add261 = 0, $add27 = 0, $add270 = 0, $add279 = 0, $add288 = 0, $add297 = 0, $add306 = 0, $add315 = 0, $add324 = 0, $add333 = 0, $add342 = 0, $add351 = 0, $add36 = 0, $add360 = 0, $add369 = 0, $add378 = 0, $add387 = 0, $add396 = 0, $add405 = 0, $add414 = 0, $add423 = 0, $add432 = 0, $add441 = 0, $add45 = 0, $add464 = 0, $add54 = 0, $add63 = 0, $add72 = 0, $add81 = 0, $add90 = 0, $add99 = 0, $agg$tmp1$i312 = 0, $call$i$i = 0, $cleanup$dest$slot$2 = 0, $cmp443 = 0, $cmp447 = 0, $cmp458 = 0, $div = 0, $div100 = 0, $div109 = 0, $div118 = 0, $div127 = 0, $div136 = 0, $div145 = 0, $div154 = 0, $div163 = 0, $div172 = 0, $div181 = 0, $div19 = 0, $div190 = 0, $div199 = 0, $div208 = 0, $div217 = 0, $div226 = 0, $div235 = 0, $div244 = 0, $div253 = 0, $div262 = 0, $div271 = 0, $div28 = 0, $div280 = 0, $div289 = 0, $div298 = 0, $div307 = 0, $div316 = 0, $div325 = 0, $div334 = 0, $div343 = 0, $div352 = 0, $div361 = 0, $div37 = 0, $div370 = 0, $div379 = 0, $div388 = 0, $div397 = 0, $div406 = 0, $div415 = 0, $div424 = 0, $div433 = 0, $div442 = 0, $div46 = 0, $div5 = 0, $div55 = 0, $div64 = 0, $div73 = 0, $div82 = 0, $div91 = 0, $i$0 = 0, $i$1 = 0, $in$1$sink = 0, $inc457 = 0, $inc460$k0$0 = 0, $j$0 = 0, $k0$0 = 0, $mul = 0, $mul462$sink = 0, $n$addr = 0, $ref$tmp = 0, $retval$0 = 0, $retval$4 = 0, $retval$5 = 0, $retval$6 = 0, $retval$8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $agg$tmp1$i312 = sp;
 $n$addr = sp + 8 | 0;
 $ref$tmp = sp + 4 | 0;
 HEAP32[$n$addr >> 2] = $n;
 do if ($n >>> 0 < 212) {
  $call$i$i = __ZNSt3__213__lower_boundIRNS_6__lessIjjEEPKjjEET0_S6_S6_RKT1_T_(2676, 2868, $n$addr, $agg$tmp1$i312) | 0;
  $retval$8 = HEAP32[$call$i$i >> 2] | 0;
 } else {
  $div = ($n >>> 0) / 210 | 0;
  $mul = $div * 210 | 0;
  HEAP32[$ref$tmp >> 2] = $n - $mul;
  $in$1$sink = (__ZNSt3__213__lower_boundIRNS_6__lessIjjEEPKjjEET0_S6_S6_RKT1_T_(2868, 3060, $ref$tmp, $agg$tmp1$i312) | 0) - 2868 >> 2;
  $k0$0 = $div;
  $mul462$sink = $mul;
  $retval$0 = 0;
  L4 : while (1) {
   $add464 = (HEAP32[2868 + ($in$1$sink << 2) >> 2] | 0) + $mul462$sink | 0;
   $j$0 = 5;
   while (1) {
    if ($j$0 >>> 0 >= 47) {
     $i$0 = 211;
     $retval$4 = $retval$0;
     label = 8;
     break;
    }
    $2 = HEAP32[2676 + ($j$0 << 2) >> 2] | 0;
    $div5 = ($add464 >>> 0) / ($2 >>> 0) | 0;
    if ($div5 >>> 0 < $2 >>> 0) {
     label = 106;
     break L4;
    }
    if (($add464 | 0) == (Math_imul($div5, $2) | 0)) {
     $retval$6 = $retval$0;
     break;
    } else $j$0 = $j$0 + 1 | 0;
   }
   L10 : do if ((label | 0) == 8) {
    L11 : while (1) {
     label = 0;
     $div19 = ($add464 >>> 0) / ($i$0 >>> 0) | 0;
     do if ($div19 >>> 0 < $i$0 >>> 0) {
      $cleanup$dest$slot$2 = 1;
      $i$1 = $i$0;
      $retval$5 = $add464;
     } else if (($add464 | 0) == (Math_imul($div19, $i$0) | 0)) {
      $cleanup$dest$slot$2 = 9;
      $i$1 = $i$0;
      $retval$5 = $retval$4;
     } else {
      $add27 = $i$0 + 10 | 0;
      $div28 = ($add464 >>> 0) / ($add27 >>> 0) | 0;
      if ($div28 >>> 0 < $add27 >>> 0) {
       $cleanup$dest$slot$2 = 1;
       $i$1 = $add27;
       $retval$5 = $add464;
      } else if (($add464 | 0) == (Math_imul($div28, $add27) | 0)) {
       $cleanup$dest$slot$2 = 9;
       $i$1 = $add27;
       $retval$5 = $retval$4;
      } else {
       $add36 = $i$0 + 12 | 0;
       $div37 = ($add464 >>> 0) / ($add36 >>> 0) | 0;
       if ($div37 >>> 0 < $add36 >>> 0) {
        $cleanup$dest$slot$2 = 1;
        $i$1 = $add36;
        $retval$5 = $add464;
       } else if (($add464 | 0) == (Math_imul($div37, $add36) | 0)) {
        $cleanup$dest$slot$2 = 9;
        $i$1 = $add36;
        $retval$5 = $retval$4;
       } else {
        $add45 = $i$0 + 16 | 0;
        $div46 = ($add464 >>> 0) / ($add45 >>> 0) | 0;
        if ($div46 >>> 0 < $add45 >>> 0) {
         $cleanup$dest$slot$2 = 1;
         $i$1 = $add45;
         $retval$5 = $add464;
        } else if (($add464 | 0) == (Math_imul($div46, $add45) | 0)) {
         $cleanup$dest$slot$2 = 9;
         $i$1 = $add45;
         $retval$5 = $retval$4;
        } else {
         $add54 = $i$0 + 18 | 0;
         $div55 = ($add464 >>> 0) / ($add54 >>> 0) | 0;
         if ($div55 >>> 0 < $add54 >>> 0) {
          $cleanup$dest$slot$2 = 1;
          $i$1 = $add54;
          $retval$5 = $add464;
         } else if (($add464 | 0) == (Math_imul($div55, $add54) | 0)) {
          $cleanup$dest$slot$2 = 9;
          $i$1 = $add54;
          $retval$5 = $retval$4;
         } else {
          $add63 = $i$0 + 22 | 0;
          $div64 = ($add464 >>> 0) / ($add63 >>> 0) | 0;
          if ($div64 >>> 0 < $add63 >>> 0) {
           $cleanup$dest$slot$2 = 1;
           $i$1 = $add63;
           $retval$5 = $add464;
          } else if (($add464 | 0) == (Math_imul($div64, $add63) | 0)) {
           $cleanup$dest$slot$2 = 9;
           $i$1 = $add63;
           $retval$5 = $retval$4;
          } else {
           $add72 = $i$0 + 28 | 0;
           $div73 = ($add464 >>> 0) / ($add72 >>> 0) | 0;
           if ($div73 >>> 0 < $add72 >>> 0) {
            $cleanup$dest$slot$2 = 1;
            $i$1 = $add72;
            $retval$5 = $add464;
           } else if (($add464 | 0) == (Math_imul($div73, $add72) | 0)) {
            $cleanup$dest$slot$2 = 9;
            $i$1 = $add72;
            $retval$5 = $retval$4;
           } else {
            $add81 = $i$0 + 30 | 0;
            $div82 = ($add464 >>> 0) / ($add81 >>> 0) | 0;
            if ($div82 >>> 0 < $add81 >>> 0) {
             $cleanup$dest$slot$2 = 1;
             $i$1 = $add81;
             $retval$5 = $add464;
             break;
            }
            if (($add464 | 0) == (Math_imul($div82, $add81) | 0)) {
             $cleanup$dest$slot$2 = 9;
             $i$1 = $add81;
             $retval$5 = $retval$4;
             break;
            }
            $add90 = $i$0 + 36 | 0;
            $div91 = ($add464 >>> 0) / ($add90 >>> 0) | 0;
            if ($div91 >>> 0 < $add90 >>> 0) {
             $cleanup$dest$slot$2 = 1;
             $i$1 = $add90;
             $retval$5 = $add464;
             break;
            }
            if (($add464 | 0) == (Math_imul($div91, $add90) | 0)) {
             $cleanup$dest$slot$2 = 9;
             $i$1 = $add90;
             $retval$5 = $retval$4;
             break;
            }
            $add99 = $i$0 + 40 | 0;
            $div100 = ($add464 >>> 0) / ($add99 >>> 0) | 0;
            if ($div100 >>> 0 < $add99 >>> 0) {
             $cleanup$dest$slot$2 = 1;
             $i$1 = $add99;
             $retval$5 = $add464;
             break;
            }
            if (($add464 | 0) == (Math_imul($div100, $add99) | 0)) {
             $cleanup$dest$slot$2 = 9;
             $i$1 = $add99;
             $retval$5 = $retval$4;
             break;
            }
            $add108 = $i$0 + 42 | 0;
            $div109 = ($add464 >>> 0) / ($add108 >>> 0) | 0;
            if ($div109 >>> 0 < $add108 >>> 0) {
             $cleanup$dest$slot$2 = 1;
             $i$1 = $add108;
             $retval$5 = $add464;
             break;
            }
            if (($add464 | 0) == (Math_imul($div109, $add108) | 0)) {
             $cleanup$dest$slot$2 = 9;
             $i$1 = $add108;
             $retval$5 = $retval$4;
             break;
            }
            $add117 = $i$0 + 46 | 0;
            $div118 = ($add464 >>> 0) / ($add117 >>> 0) | 0;
            if ($div118 >>> 0 < $add117 >>> 0) {
             $cleanup$dest$slot$2 = 1;
             $i$1 = $add117;
             $retval$5 = $add464;
             break;
            }
            if (($add464 | 0) == (Math_imul($div118, $add117) | 0)) {
             $cleanup$dest$slot$2 = 9;
             $i$1 = $add117;
             $retval$5 = $retval$4;
             break;
            }
            $add126 = $i$0 + 52 | 0;
            $div127 = ($add464 >>> 0) / ($add126 >>> 0) | 0;
            if ($div127 >>> 0 < $add126 >>> 0) {
             $cleanup$dest$slot$2 = 1;
             $i$1 = $add126;
             $retval$5 = $add464;
             break;
            }
            if (($add464 | 0) == (Math_imul($div127, $add126) | 0)) {
             $cleanup$dest$slot$2 = 9;
             $i$1 = $add126;
             $retval$5 = $retval$4;
             break;
            }
            $add135 = $i$0 + 58 | 0;
            $div136 = ($add464 >>> 0) / ($add135 >>> 0) | 0;
            if ($div136 >>> 0 < $add135 >>> 0) {
             $cleanup$dest$slot$2 = 1;
             $i$1 = $add135;
             $retval$5 = $add464;
             break;
            }
            if (($add464 | 0) == (Math_imul($div136, $add135) | 0)) {
             $cleanup$dest$slot$2 = 9;
             $i$1 = $add135;
             $retval$5 = $retval$4;
             break;
            }
            $add144 = $i$0 + 60 | 0;
            $div145 = ($add464 >>> 0) / ($add144 >>> 0) | 0;
            if ($div145 >>> 0 < $add144 >>> 0) {
             $cleanup$dest$slot$2 = 1;
             $i$1 = $add144;
             $retval$5 = $add464;
             break;
            }
            if (($add464 | 0) == (Math_imul($div145, $add144) | 0)) {
             $cleanup$dest$slot$2 = 9;
             $i$1 = $add144;
             $retval$5 = $retval$4;
             break;
            }
            $add153 = $i$0 + 66 | 0;
            $div154 = ($add464 >>> 0) / ($add153 >>> 0) | 0;
            if ($div154 >>> 0 < $add153 >>> 0) {
             $cleanup$dest$slot$2 = 1;
             $i$1 = $add153;
             $retval$5 = $add464;
             break;
            }
            if (($add464 | 0) == (Math_imul($div154, $add153) | 0)) {
             $cleanup$dest$slot$2 = 9;
             $i$1 = $add153;
             $retval$5 = $retval$4;
             break;
            }
            $add162 = $i$0 + 70 | 0;
            $div163 = ($add464 >>> 0) / ($add162 >>> 0) | 0;
            if ($div163 >>> 0 < $add162 >>> 0) {
             $cleanup$dest$slot$2 = 1;
             $i$1 = $add162;
             $retval$5 = $add464;
             break;
            }
            if (($add464 | 0) == (Math_imul($div163, $add162) | 0)) {
             $cleanup$dest$slot$2 = 9;
             $i$1 = $add162;
             $retval$5 = $retval$4;
             break;
            }
            $add171 = $i$0 + 72 | 0;
            $div172 = ($add464 >>> 0) / ($add171 >>> 0) | 0;
            if ($div172 >>> 0 < $add171 >>> 0) {
             $cleanup$dest$slot$2 = 1;
             $i$1 = $add171;
             $retval$5 = $add464;
             break;
            }
            if (($add464 | 0) == (Math_imul($div172, $add171) | 0)) {
             $cleanup$dest$slot$2 = 9;
             $i$1 = $add171;
             $retval$5 = $retval$4;
             break;
            }
            $add180 = $i$0 + 78 | 0;
            $div181 = ($add464 >>> 0) / ($add180 >>> 0) | 0;
            if ($div181 >>> 0 < $add180 >>> 0) {
             $cleanup$dest$slot$2 = 1;
             $i$1 = $add180;
             $retval$5 = $add464;
             break;
            }
            if (($add464 | 0) == (Math_imul($div181, $add180) | 0)) {
             $cleanup$dest$slot$2 = 9;
             $i$1 = $add180;
             $retval$5 = $retval$4;
             break;
            }
            $add189 = $i$0 + 82 | 0;
            $div190 = ($add464 >>> 0) / ($add189 >>> 0) | 0;
            if ($div190 >>> 0 < $add189 >>> 0) {
             $cleanup$dest$slot$2 = 1;
             $i$1 = $add189;
             $retval$5 = $add464;
             break;
            }
            if (($add464 | 0) == (Math_imul($div190, $add189) | 0)) {
             $cleanup$dest$slot$2 = 9;
             $i$1 = $add189;
             $retval$5 = $retval$4;
             break;
            }
            $add198 = $i$0 + 88 | 0;
            $div199 = ($add464 >>> 0) / ($add198 >>> 0) | 0;
            if ($div199 >>> 0 < $add198 >>> 0) {
             $cleanup$dest$slot$2 = 1;
             $i$1 = $add198;
             $retval$5 = $add464;
             break;
            }
            if (($add464 | 0) == (Math_imul($div199, $add198) | 0)) {
             $cleanup$dest$slot$2 = 9;
             $i$1 = $add198;
             $retval$5 = $retval$4;
             break;
            }
            $add207 = $i$0 + 96 | 0;
            $div208 = ($add464 >>> 0) / ($add207 >>> 0) | 0;
            if ($div208 >>> 0 < $add207 >>> 0) {
             $cleanup$dest$slot$2 = 1;
             $i$1 = $add207;
             $retval$5 = $add464;
             break;
            }
            if (($add464 | 0) == (Math_imul($div208, $add207) | 0)) {
             $cleanup$dest$slot$2 = 9;
             $i$1 = $add207;
             $retval$5 = $retval$4;
             break;
            }
            $add216 = $i$0 + 100 | 0;
            $div217 = ($add464 >>> 0) / ($add216 >>> 0) | 0;
            if ($div217 >>> 0 < $add216 >>> 0) {
             $cleanup$dest$slot$2 = 1;
             $i$1 = $add216;
             $retval$5 = $add464;
             break;
            }
            if (($add464 | 0) == (Math_imul($div217, $add216) | 0)) {
             $cleanup$dest$slot$2 = 9;
             $i$1 = $add216;
             $retval$5 = $retval$4;
             break;
            }
            $add225 = $i$0 + 102 | 0;
            $div226 = ($add464 >>> 0) / ($add225 >>> 0) | 0;
            if ($div226 >>> 0 < $add225 >>> 0) {
             $cleanup$dest$slot$2 = 1;
             $i$1 = $add225;
             $retval$5 = $add464;
             break;
            }
            if (($add464 | 0) == (Math_imul($div226, $add225) | 0)) {
             $cleanup$dest$slot$2 = 9;
             $i$1 = $add225;
             $retval$5 = $retval$4;
             break;
            }
            $add234 = $i$0 + 106 | 0;
            $div235 = ($add464 >>> 0) / ($add234 >>> 0) | 0;
            if ($div235 >>> 0 < $add234 >>> 0) {
             $cleanup$dest$slot$2 = 1;
             $i$1 = $add234;
             $retval$5 = $add464;
             break;
            }
            if (($add464 | 0) == (Math_imul($div235, $add234) | 0)) {
             $cleanup$dest$slot$2 = 9;
             $i$1 = $add234;
             $retval$5 = $retval$4;
             break;
            }
            $add243 = $i$0 + 108 | 0;
            $div244 = ($add464 >>> 0) / ($add243 >>> 0) | 0;
            if ($div244 >>> 0 < $add243 >>> 0) {
             $cleanup$dest$slot$2 = 1;
             $i$1 = $add243;
             $retval$5 = $add464;
             break;
            }
            if (($add464 | 0) == (Math_imul($div244, $add243) | 0)) {
             $cleanup$dest$slot$2 = 9;
             $i$1 = $add243;
             $retval$5 = $retval$4;
             break;
            }
            $add252 = $i$0 + 112 | 0;
            $div253 = ($add464 >>> 0) / ($add252 >>> 0) | 0;
            if ($div253 >>> 0 < $add252 >>> 0) {
             $cleanup$dest$slot$2 = 1;
             $i$1 = $add252;
             $retval$5 = $add464;
             break;
            }
            if (($add464 | 0) == (Math_imul($div253, $add252) | 0)) {
             $cleanup$dest$slot$2 = 9;
             $i$1 = $add252;
             $retval$5 = $retval$4;
             break;
            }
            $add261 = $i$0 + 120 | 0;
            $div262 = ($add464 >>> 0) / ($add261 >>> 0) | 0;
            if ($div262 >>> 0 < $add261 >>> 0) {
             $cleanup$dest$slot$2 = 1;
             $i$1 = $add261;
             $retval$5 = $add464;
             break;
            }
            if (($add464 | 0) == (Math_imul($div262, $add261) | 0)) {
             $cleanup$dest$slot$2 = 9;
             $i$1 = $add261;
             $retval$5 = $retval$4;
             break;
            }
            $add270 = $i$0 + 126 | 0;
            $div271 = ($add464 >>> 0) / ($add270 >>> 0) | 0;
            if ($div271 >>> 0 < $add270 >>> 0) {
             $cleanup$dest$slot$2 = 1;
             $i$1 = $add270;
             $retval$5 = $add464;
             break;
            }
            if (($add464 | 0) == (Math_imul($div271, $add270) | 0)) {
             $cleanup$dest$slot$2 = 9;
             $i$1 = $add270;
             $retval$5 = $retval$4;
             break;
            }
            $add279 = $i$0 + 130 | 0;
            $div280 = ($add464 >>> 0) / ($add279 >>> 0) | 0;
            if ($div280 >>> 0 < $add279 >>> 0) {
             $cleanup$dest$slot$2 = 1;
             $i$1 = $add279;
             $retval$5 = $add464;
             break;
            }
            if (($add464 | 0) == (Math_imul($div280, $add279) | 0)) {
             $cleanup$dest$slot$2 = 9;
             $i$1 = $add279;
             $retval$5 = $retval$4;
             break;
            }
            $add288 = $i$0 + 136 | 0;
            $div289 = ($add464 >>> 0) / ($add288 >>> 0) | 0;
            if ($div289 >>> 0 < $add288 >>> 0) {
             $cleanup$dest$slot$2 = 1;
             $i$1 = $add288;
             $retval$5 = $add464;
             break;
            }
            if (($add464 | 0) == (Math_imul($div289, $add288) | 0)) {
             $cleanup$dest$slot$2 = 9;
             $i$1 = $add288;
             $retval$5 = $retval$4;
             break;
            }
            $add297 = $i$0 + 138 | 0;
            $div298 = ($add464 >>> 0) / ($add297 >>> 0) | 0;
            if ($div298 >>> 0 < $add297 >>> 0) {
             $cleanup$dest$slot$2 = 1;
             $i$1 = $add297;
             $retval$5 = $add464;
             break;
            }
            if (($add464 | 0) == (Math_imul($div298, $add297) | 0)) {
             $cleanup$dest$slot$2 = 9;
             $i$1 = $add297;
             $retval$5 = $retval$4;
             break;
            }
            $add306 = $i$0 + 142 | 0;
            $div307 = ($add464 >>> 0) / ($add306 >>> 0) | 0;
            if ($div307 >>> 0 < $add306 >>> 0) {
             $cleanup$dest$slot$2 = 1;
             $i$1 = $add306;
             $retval$5 = $add464;
             break;
            }
            if (($add464 | 0) == (Math_imul($div307, $add306) | 0)) {
             $cleanup$dest$slot$2 = 9;
             $i$1 = $add306;
             $retval$5 = $retval$4;
             break;
            }
            $add315 = $i$0 + 148 | 0;
            $div316 = ($add464 >>> 0) / ($add315 >>> 0) | 0;
            if ($div316 >>> 0 < $add315 >>> 0) {
             $cleanup$dest$slot$2 = 1;
             $i$1 = $add315;
             $retval$5 = $add464;
             break;
            }
            if (($add464 | 0) == (Math_imul($div316, $add315) | 0)) {
             $cleanup$dest$slot$2 = 9;
             $i$1 = $add315;
             $retval$5 = $retval$4;
             break;
            }
            $add324 = $i$0 + 150 | 0;
            $div325 = ($add464 >>> 0) / ($add324 >>> 0) | 0;
            if ($div325 >>> 0 < $add324 >>> 0) {
             $cleanup$dest$slot$2 = 1;
             $i$1 = $add324;
             $retval$5 = $add464;
             break;
            }
            if (($add464 | 0) == (Math_imul($div325, $add324) | 0)) {
             $cleanup$dest$slot$2 = 9;
             $i$1 = $add324;
             $retval$5 = $retval$4;
             break;
            }
            $add333 = $i$0 + 156 | 0;
            $div334 = ($add464 >>> 0) / ($add333 >>> 0) | 0;
            if ($div334 >>> 0 < $add333 >>> 0) {
             $cleanup$dest$slot$2 = 1;
             $i$1 = $add333;
             $retval$5 = $add464;
             break;
            }
            if (($add464 | 0) == (Math_imul($div334, $add333) | 0)) {
             $cleanup$dest$slot$2 = 9;
             $i$1 = $add333;
             $retval$5 = $retval$4;
             break;
            }
            $add342 = $i$0 + 162 | 0;
            $div343 = ($add464 >>> 0) / ($add342 >>> 0) | 0;
            if ($div343 >>> 0 < $add342 >>> 0) {
             $cleanup$dest$slot$2 = 1;
             $i$1 = $add342;
             $retval$5 = $add464;
             break;
            }
            if (($add464 | 0) == (Math_imul($div343, $add342) | 0)) {
             $cleanup$dest$slot$2 = 9;
             $i$1 = $add342;
             $retval$5 = $retval$4;
             break;
            }
            $add351 = $i$0 + 166 | 0;
            $div352 = ($add464 >>> 0) / ($add351 >>> 0) | 0;
            if ($div352 >>> 0 < $add351 >>> 0) {
             $cleanup$dest$slot$2 = 1;
             $i$1 = $add351;
             $retval$5 = $add464;
             break;
            }
            if (($add464 | 0) == (Math_imul($div352, $add351) | 0)) {
             $cleanup$dest$slot$2 = 9;
             $i$1 = $add351;
             $retval$5 = $retval$4;
             break;
            }
            $add360 = $i$0 + 168 | 0;
            $div361 = ($add464 >>> 0) / ($add360 >>> 0) | 0;
            if ($div361 >>> 0 < $add360 >>> 0) {
             $cleanup$dest$slot$2 = 1;
             $i$1 = $add360;
             $retval$5 = $add464;
             break;
            }
            if (($add464 | 0) == (Math_imul($div361, $add360) | 0)) {
             $cleanup$dest$slot$2 = 9;
             $i$1 = $add360;
             $retval$5 = $retval$4;
             break;
            }
            $add369 = $i$0 + 172 | 0;
            $div370 = ($add464 >>> 0) / ($add369 >>> 0) | 0;
            if ($div370 >>> 0 < $add369 >>> 0) {
             $cleanup$dest$slot$2 = 1;
             $i$1 = $add369;
             $retval$5 = $add464;
             break;
            }
            if (($add464 | 0) == (Math_imul($div370, $add369) | 0)) {
             $cleanup$dest$slot$2 = 9;
             $i$1 = $add369;
             $retval$5 = $retval$4;
             break;
            }
            $add378 = $i$0 + 178 | 0;
            $div379 = ($add464 >>> 0) / ($add378 >>> 0) | 0;
            if ($div379 >>> 0 < $add378 >>> 0) {
             $cleanup$dest$slot$2 = 1;
             $i$1 = $add378;
             $retval$5 = $add464;
             break;
            }
            if (($add464 | 0) == (Math_imul($div379, $add378) | 0)) {
             $cleanup$dest$slot$2 = 9;
             $i$1 = $add378;
             $retval$5 = $retval$4;
             break;
            }
            $add387 = $i$0 + 180 | 0;
            $div388 = ($add464 >>> 0) / ($add387 >>> 0) | 0;
            if ($div388 >>> 0 < $add387 >>> 0) {
             $cleanup$dest$slot$2 = 1;
             $i$1 = $add387;
             $retval$5 = $add464;
             break;
            }
            if (($add464 | 0) == (Math_imul($div388, $add387) | 0)) {
             $cleanup$dest$slot$2 = 9;
             $i$1 = $add387;
             $retval$5 = $retval$4;
             break;
            }
            $add396 = $i$0 + 186 | 0;
            $div397 = ($add464 >>> 0) / ($add396 >>> 0) | 0;
            if ($div397 >>> 0 < $add396 >>> 0) {
             $cleanup$dest$slot$2 = 1;
             $i$1 = $add396;
             $retval$5 = $add464;
             break;
            }
            if (($add464 | 0) == (Math_imul($div397, $add396) | 0)) {
             $cleanup$dest$slot$2 = 9;
             $i$1 = $add396;
             $retval$5 = $retval$4;
             break;
            }
            $add405 = $i$0 + 190 | 0;
            $div406 = ($add464 >>> 0) / ($add405 >>> 0) | 0;
            if ($div406 >>> 0 < $add405 >>> 0) {
             $cleanup$dest$slot$2 = 1;
             $i$1 = $add405;
             $retval$5 = $add464;
             break;
            }
            if (($add464 | 0) == (Math_imul($div406, $add405) | 0)) {
             $cleanup$dest$slot$2 = 9;
             $i$1 = $add405;
             $retval$5 = $retval$4;
             break;
            }
            $add414 = $i$0 + 192 | 0;
            $div415 = ($add464 >>> 0) / ($add414 >>> 0) | 0;
            if ($div415 >>> 0 < $add414 >>> 0) {
             $cleanup$dest$slot$2 = 1;
             $i$1 = $add414;
             $retval$5 = $add464;
             break;
            }
            if (($add464 | 0) == (Math_imul($div415, $add414) | 0)) {
             $cleanup$dest$slot$2 = 9;
             $i$1 = $add414;
             $retval$5 = $retval$4;
             break;
            }
            $add423 = $i$0 + 196 | 0;
            $div424 = ($add464 >>> 0) / ($add423 >>> 0) | 0;
            if ($div424 >>> 0 < $add423 >>> 0) {
             $cleanup$dest$slot$2 = 1;
             $i$1 = $add423;
             $retval$5 = $add464;
             break;
            }
            if (($add464 | 0) == (Math_imul($div424, $add423) | 0)) {
             $cleanup$dest$slot$2 = 9;
             $i$1 = $add423;
             $retval$5 = $retval$4;
             break;
            }
            $add432 = $i$0 + 198 | 0;
            $div433 = ($add464 >>> 0) / ($add432 >>> 0) | 0;
            if ($div433 >>> 0 < $add432 >>> 0) {
             $cleanup$dest$slot$2 = 1;
             $i$1 = $add432;
             $retval$5 = $add464;
             break;
            }
            if (($add464 | 0) == (Math_imul($div433, $add432) | 0)) {
             $cleanup$dest$slot$2 = 9;
             $i$1 = $add432;
             $retval$5 = $retval$4;
             break;
            }
            $add441 = $i$0 + 208 | 0;
            $div442 = ($add464 >>> 0) / ($add441 >>> 0) | 0;
            $cmp443 = $div442 >>> 0 < $add441 >>> 0;
            $cmp447 = ($add464 | 0) == (Math_imul($div442, $add441) | 0);
            $cleanup$dest$slot$2 = $cmp443 ? 1 : $cmp447 ? 9 : 0;
            $i$1 = $cmp443 | $cmp447 ? $add441 : $i$0 + 210 | 0;
            $retval$5 = $cmp443 ? $add464 : $retval$4;
           }
          }
         }
        }
       }
      }
     } while (0);
     switch ($cleanup$dest$slot$2 & 15) {
     case 9:
      {
       $retval$6 = $retval$5;
       break L10;
       break;
      }
     case 0:
      {
       $i$0 = $i$1;
       $retval$4 = $retval$5;
       label = 8;
       break;
      }
     default:
      break L11;
     }
    }
    if (!$cleanup$dest$slot$2) $retval$6 = $retval$5; else {
     label = 107;
     break L4;
    }
   } while (0);
   $inc457 = $in$1$sink + 1 | 0;
   $cmp458 = ($inc457 | 0) == 48;
   $inc460$k0$0 = ($cmp458 & 1) + $k0$0 | 0;
   $in$1$sink = $cmp458 ? 0 : $inc457;
   $k0$0 = $inc460$k0$0;
   $mul462$sink = $inc460$k0$0 * 210 | 0;
   $retval$0 = $retval$6;
  }
  if ((label | 0) == 106) {
   HEAP32[$n$addr >> 2] = $add464;
   $retval$8 = $add464;
   break;
  } else if ((label | 0) == 107) {
   HEAP32[$n$addr >> 2] = $add464;
   $retval$8 = $retval$5;
   break;
  }
 } while (0);
 STACKTOP = sp;
 return $retval$8 | 0;
}

function __ZN10__cxxabiv112_GLOBAL__N_117parse_nested_nameINS0_2DbEEEPKcS4_S4_RT_($first, $last, $db) {
 $first = $first | 0;
 $last = $last | 0;
 $db = $db | 0;
 var $$sink = 0, $10 = 0, $13 = 0, $14 = 0, $15 = 0, $18 = 0, $2 = 0, $22 = 0, $24 = 0, $30 = 0, $31 = 0, $32 = 0, $35 = 0, $39 = 0, $41 = 0, $48 = 0, $49 = 0, $50 = 0, $53 = 0, $57 = 0, $59 = 0, $65 = 0, $66 = 0, $67 = 0, $71 = 0, $73 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $84 = 0, $88 = 0, $9 = 0, $90 = 0, $97 = 0, $98 = 0, $__end_$i = 0, $__end_$i$i$i$i = 0, $__end_$i$i$i$i$i = 0, $__end_$i$i$i$i$i215 = 0, $__end_$i$i$i$i$i273 = 0, $__end_$i$i$i$i$i317 = 0, $__end_$i$i$i$i$i375 = 0, $__end_$i$i$i$i219 = 0, $__end_$i$i$i$i277 = 0, $__end_$i$i$i$i321 = 0, $__end_$i$i$i$i379 = 0, $__end_$i312 = 0, $__first_$i$i$i$i313 = 0, $__first_$i$i$i8$i$i$i$i = 0, $__first_$i$i$i8$i$i$i$i220 = 0, $__first_$i$i$i8$i$i$i$i278 = 0, $__first_$i$i$i8$i$i$i$i322 = 0, $__first_$i$i$i8$i$i$i$i380 = 0, $__second_$i$i$i$i$i$i$i = 0, $__second_$i$i$i$i$i$i$i213 = 0, $__second_$i$i$i$i$i$i$i271 = 0, $__second_$i$i$i$i$i$i$i315 = 0, $__second_$i$i$i$i$i$i$i373 = 0, $__size_$i$i$i$i$i = 0, $__size_$i$i$i$i$i194 = 0, $__size_$i$i$i$i$i252 = 0, $__size_$i$i$i$i$i298 = 0, $__size_$i$i$i$i$i354 = 0, $__size_$i3$i$i$i = 0, $__size_$i3$i$i$i199 = 0, $__size_$i3$i$i$i257 = 0, $__size_$i3$i$i$i303 = 0, $__size_$i3$i$i$i359 = 0, $add$ptr$i142 = 0, $add$ptr$i146 = 0, $add$ptr$i160 = 0, $add$ptr$i172 = 0, $add$ptr$i207 = 0, $add$ptr$i230 = 0, $add$ptr$i265 = 0, $add$ptr$i288 = 0, $add$ptr$i309 = 0, $add$ptr$i332 = 0, $add$ptr$i367 = 0, $add$ptr$i390 = 0, $add$ptr37 = 0, $call = 0, $call167 = 0, $call226 = 0, $call269 = 0, $call45 = 0, $call96 = 0, $cond$i$i = 0, $cond$i$i188 = 0, $cond$i$i246 = 0, $cond$i$i348 = 0, $cv = 0, $first110 = 0, $first181 = 0, $first283 = 0, $first56 = 0, $incdec$ptr = 0, $incdec$ptr$i$i$i = 0, $incdec$ptr$i$i$i149 = 0, $incdec$ptr$i$i$i175 = 0, $incdec$ptr$i$i$i233 = 0, $incdec$ptr$i$i$i291 = 0, $incdec$ptr$i$i$i335 = 0, $incdec$ptr$i$i$i393 = 0, $name = 0, $pop_subs$0$off0$ph = 0, $ref = 0, $ref$tmp = 0, $ref$tmp73 = 0, $retval$4 = 0, $retval$sroa$0$0$$sroa_idx$i310 = 0, $subs306 = 0, $t0$0 = 0, $t0$1 = 0, $t0$2 = 0, $t0$2$ph = 0, $tobool$i$i$i$i$i = 0, $tobool$i$i$i$i$i195 = 0, $tobool$i$i$i$i$i253 = 0, $tobool$i$i$i$i$i299 = 0, $tobool$i$i$i$i$i355 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48);
 $cv = sp + 36 | 0;
 $name = sp + 24 | 0;
 $ref$tmp = sp + 8 | 0;
 $ref$tmp73 = sp;
 L1 : do if (($first | 0) == ($last | 0)) $retval$4 = $first; else if ((HEAP8[$first >> 0] | 0) == 78) {
  $call = __ZN10__cxxabiv112_GLOBAL__N_119parse_cv_qualifiersEPKcS2_Rj($first + 1 | 0, $last, $cv) | 0;
  L4 : do if (($call | 0) != ($last | 0)) {
   $ref = $db + 52 | 0;
   HEAP32[$ref >> 2] = 0;
   $incdec$ptr = $call + 1 | 0;
   switch (HEAP8[$call >> 0] | 0) {
   case 82:
    {
     $$sink = 1;
     label = 6;
     break;
    }
   case 79:
    {
     $$sink = 2;
     label = 6;
     break;
    }
   default:
    $t0$0 = $call;
   }
   if ((label | 0) == 6) {
    HEAP32[$ref >> 2] = $$sink;
    $t0$0 = $incdec$ptr;
   }
   $__end_$i = $db + 4 | 0;
   $2 = HEAP32[$__end_$i >> 2] | 0;
   if ($2 >>> 0 < (HEAP32[$db + 8 >> 2] | 0) >>> 0) {
    HEAP32[$2 >> 2] = 0;
    HEAP32[$2 + 4 >> 2] = 0;
    HEAP32[$2 + 8 >> 2] = 0;
    HEAP32[$2 + 12 >> 2] = 0;
    HEAP32[$2 + 16 >> 2] = 0;
    HEAP32[$2 + 20 >> 2] = 0;
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2Ev($2);
    HEAP32[$__end_$i >> 2] = (HEAP32[$__end_$i >> 2] | 0) + 24;
   } else __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE24__emplace_back_slow_pathIJEEEvDpOT_($db);
   if (($last - $t0$0 | 0) > 1) if ((HEAP8[$t0$0 >> 0] | 0) == 83) if ((HEAP8[$t0$0 + 1 >> 0] | 0) == 116) {
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6assignEPKc((HEAP32[$__end_$i >> 2] | 0) + -24 | 0, 16263);
    $t0$1 = $t0$0 + 2 | 0;
   } else $t0$1 = $t0$0; else $t0$1 = $t0$0; else $t0$1 = $t0$0;
   if (($t0$1 | 0) == ($last | 0)) {
    $8 = HEAP32[$__end_$i >> 2] | 0;
    $add$ptr$i142 = $8 + -24 | 0;
    $9 = $8;
    while (1) {
     if (($9 | 0) == ($add$ptr$i142 | 0)) break L4;
     $incdec$ptr$i$i$i = $9 + -24 | 0;
     HEAP32[$__end_$i >> 2] = $incdec$ptr$i$i$i;
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($incdec$ptr$i$i$i);
     $9 = HEAP32[$__end_$i >> 2] | 0;
    }
   }
   $subs306 = $db + 16 | 0;
   $__size_$i$i$i$i$i298 = $name + 11 | 0;
   $__size_$i3$i$i$i303 = $name + 4 | 0;
   $retval$sroa$0$0$$sroa_idx$i310 = $db + 12 | 0;
   $__end_$i312 = $db + 20 | 0;
   $__first_$i$i$i$i313 = $db + 24 | 0;
   $__second_$i$i$i$i$i$i$i315 = $ref$tmp + 12 | 0;
   $__end_$i$i$i$i321 = $ref$tmp + 4 | 0;
   $__first_$i$i$i8$i$i$i$i322 = $ref$tmp + 8 | 0;
   $__second_$i$i$i$i$i$i$i373 = $ref$tmp + 12 | 0;
   $__end_$i$i$i$i379 = $ref$tmp + 4 | 0;
   $__first_$i$i$i8$i$i$i$i380 = $ref$tmp + 8 | 0;
   $__size_$i$i$i$i$i354 = $ref$tmp + 11 | 0;
   $__size_$i3$i$i$i359 = $ref$tmp + 4 | 0;
   $__size_$i$i$i$i$i = $ref$tmp + 11 | 0;
   $__size_$i3$i$i$i = $ref$tmp + 4 | 0;
   $__second_$i$i$i$i$i$i$i = $ref$tmp + 12 | 0;
   $__end_$i$i$i$i = $ref$tmp + 4 | 0;
   $__first_$i$i$i8$i$i$i$i = $ref$tmp + 8 | 0;
   $__second_$i$i$i$i$i$i$i213 = $ref$tmp + 12 | 0;
   $__end_$i$i$i$i219 = $ref$tmp + 4 | 0;
   $__first_$i$i$i8$i$i$i$i220 = $ref$tmp + 8 | 0;
   $__size_$i$i$i$i$i194 = $ref$tmp + 11 | 0;
   $__size_$i3$i$i$i199 = $ref$tmp + 4 | 0;
   $__second_$i$i$i$i$i$i$i271 = $ref$tmp + 12 | 0;
   $__end_$i$i$i$i277 = $ref$tmp + 4 | 0;
   $__first_$i$i$i8$i$i$i$i278 = $ref$tmp + 8 | 0;
   $__size_$i$i$i$i$i252 = $ref$tmp + 11 | 0;
   $__size_$i3$i$i$i257 = $ref$tmp + 4 | 0;
   $pop_subs$0$off0$ph = 0;
   $t0$2$ph = $t0$1;
   L26 : while (1) {
    $t0$2 = $t0$2$ph;
    L28 : while (1) {
     $10 = HEAP8[$t0$2 >> 0] | 0;
     $add$ptr37 = $t0$2 + 1 | 0;
     if ($10 << 24 >> 24 == 69) break L26;
     switch ($10 << 24 >> 24 | 0) {
     case 83:
      {
       label = 21;
       break L28;
       break;
      }
     case 84:
      {
       label = 37;
       break L28;
       break;
      }
     case 68:
      {
       label = 51;
       break L28;
       break;
      }
     case 73:
      break;
     case 76:
      {
       if (($add$ptr37 | 0) == ($last | 0)) break L4; else {
        $t0$2 = $add$ptr37;
        continue L28;
       }
       break;
      }
     default:
      break L28;
     }
     $call226 = __ZN10__cxxabiv112_GLOBAL__N_119parse_template_argsINS0_2DbEEEPKcS4_S4_RT_($t0$2, $last, $db) | 0;
     if (($call226 | 0) == ($t0$2 | 0) | ($call226 | 0) == ($last | 0)) break L4;
     __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($name, (HEAP32[$__end_$i >> 2] | 0) + -24 | 0);
     $65 = HEAP32[$__end_$i >> 2] | 0;
     $add$ptr$i288 = $65 + -24 | 0;
     $66 = $65;
     while (1) {
      if (($66 | 0) == ($add$ptr$i288 | 0)) break;
      $incdec$ptr$i$i$i291 = $66 + -24 | 0;
      HEAP32[$__end_$i >> 2] = $incdec$ptr$i$i$i291;
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($incdec$ptr$i$i$i291);
      $66 = HEAP32[$__end_$i >> 2] | 0;
     }
     $67 = HEAP8[$__size_$i$i$i$i$i298 >> 0] | 0;
     $tobool$i$i$i$i$i299 = $67 << 24 >> 24 < 0;
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($65 + -48 | 0, $tobool$i$i$i$i$i299 ? HEAP32[$name >> 2] | 0 : $name, $tobool$i$i$i$i$i299 ? HEAP32[$__size_$i3$i$i$i303 >> 2] | 0 : $67 & 255) | 0;
     $add$ptr$i309 = (HEAP32[$__end_$i >> 2] | 0) + -24 | 0;
     HEAP32[$ref$tmp73 >> 2] = HEAP32[$retval$sroa$0$0$$sroa_idx$i310 >> 2];
     __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEC2EjRKS3_RKS5_($ref$tmp, $add$ptr$i309, $ref$tmp73);
     $71 = HEAP32[$__end_$i312 >> 2] | 0;
     if ($71 >>> 0 < (HEAP32[$__first_$i$i$i$i313 >> 2] | 0) >>> 0) {
      HEAP32[$71 >> 2] = 0;
      $__end_$i$i$i$i$i317 = $71 + 4 | 0;
      HEAP32[$__end_$i$i$i$i$i317 >> 2] = 0;
      $73 = HEAP32[$__second_$i$i$i$i$i$i$i315 >> 2] | 0;
      HEAP32[$71 + 8 >> 2] = 0;
      HEAP32[$71 + 12 >> 2] = $73;
      HEAP32[$71 >> 2] = HEAP32[$ref$tmp >> 2];
      HEAP32[$__end_$i$i$i$i$i317 >> 2] = HEAP32[$__end_$i$i$i$i321 >> 2];
      HEAP32[$71 + 8 >> 2] = HEAP32[$__first_$i$i$i8$i$i$i$i322 >> 2];
      HEAP32[$__first_$i$i$i8$i$i$i$i322 >> 2] = 0;
      HEAP32[$__end_$i$i$i$i321 >> 2] = 0;
      HEAP32[$ref$tmp >> 2] = 0;
      HEAP32[$__end_$i312 >> 2] = (HEAP32[$__end_$i312 >> 2] | 0) + 16;
     } else __ZNSt3__26vectorINS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEENS4_IS6_Lj4096EEEE21__push_back_slow_pathIS6_EEvOT_($subs306, $ref$tmp);
     __ZNSt3__213__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEED2Ev($ref$tmp);
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($name);
     $t0$2 = $call226;
    }
    L43 : do if ((label | 0) == 21) {
     label = 0;
     if (($add$ptr37 | 0) != ($last | 0)) if ((HEAP8[$add$ptr37 >> 0] | 0) == 116) break;
     $call45 = __ZN10__cxxabiv112_GLOBAL__N_118parse_substitutionINS0_2DbEEEPKcS4_S4_RT_($t0$2, $last, $db) | 0;
     if (($call45 | 0) == ($t0$2 | 0) | ($call45 | 0) == ($last | 0)) break L4;
     __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($name, (HEAP32[$__end_$i >> 2] | 0) + -24 | 0);
     $13 = HEAP32[$__end_$i >> 2] | 0;
     $add$ptr$i146 = $13 + -24 | 0;
     $14 = $13;
     while (1) {
      if (($14 | 0) == ($add$ptr$i146 | 0)) break;
      $incdec$ptr$i$i$i149 = $14 + -24 | 0;
      HEAP32[$__end_$i >> 2] = $incdec$ptr$i$i$i149;
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($incdec$ptr$i$i$i149);
      $14 = HEAP32[$__end_$i >> 2] | 0;
     }
     $first56 = $13 + -48 | 0;
     $15 = HEAP8[$first56 + 11 >> 0] | 0;
     if ($15 << 24 >> 24 < 0) $cond$i$i = HEAP32[$13 + -44 >> 2] | 0; else $cond$i$i = $15 & 255;
     if (!$cond$i$i) __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEaSERKS7_($first56, $name); else {
      __ZNSt3__2plIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEENS_12basic_stringIT_T0_T1_EEPKS8_RKSB_($ref$tmp, 14959, $name);
      $18 = HEAP8[$__size_$i$i$i$i$i >> 0] | 0;
      $tobool$i$i$i$i$i = $18 << 24 >> 24 < 0;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj((HEAP32[$__end_$i >> 2] | 0) + -24 | 0, $tobool$i$i$i$i$i ? HEAP32[$ref$tmp >> 2] | 0 : $ref$tmp, $tobool$i$i$i$i$i ? HEAP32[$__size_$i3$i$i$i >> 2] | 0 : $18 & 255) | 0;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($ref$tmp);
      $add$ptr$i160 = (HEAP32[$__end_$i >> 2] | 0) + -24 | 0;
      HEAP32[$ref$tmp73 >> 2] = HEAP32[$retval$sroa$0$0$$sroa_idx$i310 >> 2];
      __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEC2EjRKS3_RKS5_($ref$tmp, $add$ptr$i160, $ref$tmp73);
      $22 = HEAP32[$__end_$i312 >> 2] | 0;
      if ($22 >>> 0 < (HEAP32[$__first_$i$i$i$i313 >> 2] | 0) >>> 0) {
       HEAP32[$22 >> 2] = 0;
       $__end_$i$i$i$i$i = $22 + 4 | 0;
       HEAP32[$__end_$i$i$i$i$i >> 2] = 0;
       $24 = HEAP32[$__second_$i$i$i$i$i$i$i >> 2] | 0;
       HEAP32[$22 + 8 >> 2] = 0;
       HEAP32[$22 + 12 >> 2] = $24;
       HEAP32[$22 >> 2] = HEAP32[$ref$tmp >> 2];
       HEAP32[$__end_$i$i$i$i$i >> 2] = HEAP32[$__end_$i$i$i$i >> 2];
       HEAP32[$22 + 8 >> 2] = HEAP32[$__first_$i$i$i8$i$i$i$i >> 2];
       HEAP32[$__first_$i$i$i8$i$i$i$i >> 2] = 0;
       HEAP32[$__end_$i$i$i$i >> 2] = 0;
       HEAP32[$ref$tmp >> 2] = 0;
       HEAP32[$__end_$i312 >> 2] = (HEAP32[$__end_$i312 >> 2] | 0) + 16;
      } else __ZNSt3__26vectorINS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEENS4_IS6_Lj4096EEEE21__push_back_slow_pathIS6_EEvOT_($subs306, $ref$tmp);
      __ZNSt3__213__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEED2Ev($ref$tmp);
     }
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($name);
     $pop_subs$0$off0$ph = 1;
     $t0$2$ph = $call45;
     continue L26;
    } else if ((label | 0) == 37) {
     label = 0;
     $call96 = __ZN10__cxxabiv112_GLOBAL__N_120parse_template_paramINS0_2DbEEEPKcS4_S4_RT_($t0$2, $last, $db) | 0;
     if (($call96 | 0) == ($t0$2 | 0) | ($call96 | 0) == ($last | 0)) break L4;
     __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($name, (HEAP32[$__end_$i >> 2] | 0) + -24 | 0);
     $30 = HEAP32[$__end_$i >> 2] | 0;
     $add$ptr$i172 = $30 + -24 | 0;
     $31 = $30;
     while (1) {
      if (($31 | 0) == ($add$ptr$i172 | 0)) break;
      $incdec$ptr$i$i$i175 = $31 + -24 | 0;
      HEAP32[$__end_$i >> 2] = $incdec$ptr$i$i$i175;
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($incdec$ptr$i$i$i175);
      $31 = HEAP32[$__end_$i >> 2] | 0;
     }
     $first110 = $30 + -48 | 0;
     $32 = HEAP8[$first110 + 11 >> 0] | 0;
     if ($32 << 24 >> 24 < 0) $cond$i$i188 = HEAP32[$30 + -44 >> 2] | 0; else $cond$i$i188 = $32 & 255;
     if (!$cond$i$i188) __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEaSERKS7_($first110, $name); else {
      __ZNSt3__2plIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEENS_12basic_stringIT_T0_T1_EEPKS8_RKSB_($ref$tmp, 14959, $name);
      $35 = HEAP8[$__size_$i$i$i$i$i194 >> 0] | 0;
      $tobool$i$i$i$i$i195 = $35 << 24 >> 24 < 0;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj((HEAP32[$__end_$i >> 2] | 0) + -24 | 0, $tobool$i$i$i$i$i195 ? HEAP32[$ref$tmp >> 2] | 0 : $ref$tmp, $tobool$i$i$i$i$i195 ? HEAP32[$__size_$i3$i$i$i199 >> 2] | 0 : $35 & 255) | 0;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($ref$tmp);
     }
     $add$ptr$i207 = (HEAP32[$__end_$i >> 2] | 0) + -24 | 0;
     HEAP32[$ref$tmp73 >> 2] = HEAP32[$retval$sroa$0$0$$sroa_idx$i310 >> 2];
     __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEC2EjRKS3_RKS5_($ref$tmp, $add$ptr$i207, $ref$tmp73);
     $39 = HEAP32[$__end_$i312 >> 2] | 0;
     if ($39 >>> 0 < (HEAP32[$__first_$i$i$i$i313 >> 2] | 0) >>> 0) {
      HEAP32[$39 >> 2] = 0;
      $__end_$i$i$i$i$i215 = $39 + 4 | 0;
      HEAP32[$__end_$i$i$i$i$i215 >> 2] = 0;
      $41 = HEAP32[$__second_$i$i$i$i$i$i$i213 >> 2] | 0;
      HEAP32[$39 + 8 >> 2] = 0;
      HEAP32[$39 + 12 >> 2] = $41;
      HEAP32[$39 >> 2] = HEAP32[$ref$tmp >> 2];
      HEAP32[$__end_$i$i$i$i$i215 >> 2] = HEAP32[$__end_$i$i$i$i219 >> 2];
      HEAP32[$39 + 8 >> 2] = HEAP32[$__first_$i$i$i8$i$i$i$i220 >> 2];
      HEAP32[$__first_$i$i$i8$i$i$i$i220 >> 2] = 0;
      HEAP32[$__end_$i$i$i$i219 >> 2] = 0;
      HEAP32[$ref$tmp >> 2] = 0;
      HEAP32[$__end_$i312 >> 2] = (HEAP32[$__end_$i312 >> 2] | 0) + 16;
     } else __ZNSt3__26vectorINS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEENS4_IS6_Lj4096EEEE21__push_back_slow_pathIS6_EEvOT_($subs306, $ref$tmp);
     __ZNSt3__213__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEED2Ev($ref$tmp);
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($name);
     $pop_subs$0$off0$ph = 1;
     $t0$2$ph = $call96;
     continue L26;
    } else if ((label | 0) == 51) {
     label = 0;
     if (($add$ptr37 | 0) != ($last | 0)) switch (HEAP8[$add$ptr37 >> 0] | 0) {
     case 84:
     case 116:
      break;
     default:
      break L43;
     }
     $call167 = __ZN10__cxxabiv112_GLOBAL__N_114parse_decltypeINS0_2DbEEEPKcS4_S4_RT_($t0$2, $last, $db) | 0;
     if (($call167 | 0) == ($t0$2 | 0) | ($call167 | 0) == ($last | 0)) break L4;
     __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($name, (HEAP32[$__end_$i >> 2] | 0) + -24 | 0);
     $48 = HEAP32[$__end_$i >> 2] | 0;
     $add$ptr$i230 = $48 + -24 | 0;
     $49 = $48;
     while (1) {
      if (($49 | 0) == ($add$ptr$i230 | 0)) break;
      $incdec$ptr$i$i$i233 = $49 + -24 | 0;
      HEAP32[$__end_$i >> 2] = $incdec$ptr$i$i$i233;
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($incdec$ptr$i$i$i233);
      $49 = HEAP32[$__end_$i >> 2] | 0;
     }
     $first181 = $48 + -48 | 0;
     $50 = HEAP8[$first181 + 11 >> 0] | 0;
     if ($50 << 24 >> 24 < 0) $cond$i$i246 = HEAP32[$48 + -44 >> 2] | 0; else $cond$i$i246 = $50 & 255;
     if (!$cond$i$i246) __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEaSERKS7_($first181, $name); else {
      __ZNSt3__2plIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEENS_12basic_stringIT_T0_T1_EEPKS8_RKSB_($ref$tmp, 14959, $name);
      $53 = HEAP8[$__size_$i$i$i$i$i252 >> 0] | 0;
      $tobool$i$i$i$i$i253 = $53 << 24 >> 24 < 0;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj((HEAP32[$__end_$i >> 2] | 0) + -24 | 0, $tobool$i$i$i$i$i253 ? HEAP32[$ref$tmp >> 2] | 0 : $ref$tmp, $tobool$i$i$i$i$i253 ? HEAP32[$__size_$i3$i$i$i257 >> 2] | 0 : $53 & 255) | 0;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($ref$tmp);
     }
     $add$ptr$i265 = (HEAP32[$__end_$i >> 2] | 0) + -24 | 0;
     HEAP32[$ref$tmp73 >> 2] = HEAP32[$retval$sroa$0$0$$sroa_idx$i310 >> 2];
     __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEC2EjRKS3_RKS5_($ref$tmp, $add$ptr$i265, $ref$tmp73);
     $57 = HEAP32[$__end_$i312 >> 2] | 0;
     if ($57 >>> 0 < (HEAP32[$__first_$i$i$i$i313 >> 2] | 0) >>> 0) {
      HEAP32[$57 >> 2] = 0;
      $__end_$i$i$i$i$i273 = $57 + 4 | 0;
      HEAP32[$__end_$i$i$i$i$i273 >> 2] = 0;
      $59 = HEAP32[$__second_$i$i$i$i$i$i$i271 >> 2] | 0;
      HEAP32[$57 + 8 >> 2] = 0;
      HEAP32[$57 + 12 >> 2] = $59;
      HEAP32[$57 >> 2] = HEAP32[$ref$tmp >> 2];
      HEAP32[$__end_$i$i$i$i$i273 >> 2] = HEAP32[$__end_$i$i$i$i277 >> 2];
      HEAP32[$57 + 8 >> 2] = HEAP32[$__first_$i$i$i8$i$i$i$i278 >> 2];
      HEAP32[$__first_$i$i$i8$i$i$i$i278 >> 2] = 0;
      HEAP32[$__end_$i$i$i$i277 >> 2] = 0;
      HEAP32[$ref$tmp >> 2] = 0;
      HEAP32[$__end_$i312 >> 2] = (HEAP32[$__end_$i312 >> 2] | 0) + 16;
     } else __ZNSt3__26vectorINS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEENS4_IS6_Lj4096EEEE21__push_back_slow_pathIS6_EEvOT_($subs306, $ref$tmp);
     __ZNSt3__213__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEED2Ev($ref$tmp);
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($name);
     $pop_subs$0$off0$ph = 1;
     $t0$2$ph = $call167;
     continue L26;
    } while (0);
    $call269 = __ZN10__cxxabiv112_GLOBAL__N_122parse_unqualified_nameINS0_2DbEEEPKcS4_S4_RT_($t0$2, $last, $db) | 0;
    if (($call269 | 0) == ($t0$2 | 0) | ($call269 | 0) == ($last | 0)) break L4;
    __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($name, (HEAP32[$__end_$i >> 2] | 0) + -24 | 0);
    $79 = HEAP32[$__end_$i >> 2] | 0;
    $add$ptr$i332 = $79 + -24 | 0;
    $80 = $79;
    while (1) {
     if (($80 | 0) == ($add$ptr$i332 | 0)) break;
     $incdec$ptr$i$i$i335 = $80 + -24 | 0;
     HEAP32[$__end_$i >> 2] = $incdec$ptr$i$i$i335;
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($incdec$ptr$i$i$i335);
     $80 = HEAP32[$__end_$i >> 2] | 0;
    }
    $first283 = $79 + -48 | 0;
    $81 = HEAP8[$first283 + 11 >> 0] | 0;
    if ($81 << 24 >> 24 < 0) $cond$i$i348 = HEAP32[$79 + -44 >> 2] | 0; else $cond$i$i348 = $81 & 255;
    if (!$cond$i$i348) __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEaSERKS7_($first283, $name); else {
     __ZNSt3__2plIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEENS_12basic_stringIT_T0_T1_EEPKS8_RKSB_($ref$tmp, 14959, $name);
     $84 = HEAP8[$__size_$i$i$i$i$i354 >> 0] | 0;
     $tobool$i$i$i$i$i355 = $84 << 24 >> 24 < 0;
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj((HEAP32[$__end_$i >> 2] | 0) + -24 | 0, $tobool$i$i$i$i$i355 ? HEAP32[$ref$tmp >> 2] | 0 : $ref$tmp, $tobool$i$i$i$i$i355 ? HEAP32[$__size_$i3$i$i$i359 >> 2] | 0 : $84 & 255) | 0;
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($ref$tmp);
    }
    $add$ptr$i367 = (HEAP32[$__end_$i >> 2] | 0) + -24 | 0;
    HEAP32[$ref$tmp73 >> 2] = HEAP32[$retval$sroa$0$0$$sroa_idx$i310 >> 2];
    __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEC2EjRKS3_RKS5_($ref$tmp, $add$ptr$i367, $ref$tmp73);
    $88 = HEAP32[$__end_$i312 >> 2] | 0;
    if ($88 >>> 0 < (HEAP32[$__first_$i$i$i$i313 >> 2] | 0) >>> 0) {
     HEAP32[$88 >> 2] = 0;
     $__end_$i$i$i$i$i375 = $88 + 4 | 0;
     HEAP32[$__end_$i$i$i$i$i375 >> 2] = 0;
     $90 = HEAP32[$__second_$i$i$i$i$i$i$i373 >> 2] | 0;
     HEAP32[$88 + 8 >> 2] = 0;
     HEAP32[$88 + 12 >> 2] = $90;
     HEAP32[$88 >> 2] = HEAP32[$ref$tmp >> 2];
     HEAP32[$__end_$i$i$i$i$i375 >> 2] = HEAP32[$__end_$i$i$i$i379 >> 2];
     HEAP32[$88 + 8 >> 2] = HEAP32[$__first_$i$i$i8$i$i$i$i380 >> 2];
     HEAP32[$__first_$i$i$i8$i$i$i$i380 >> 2] = 0;
     HEAP32[$__end_$i$i$i$i379 >> 2] = 0;
     HEAP32[$ref$tmp >> 2] = 0;
     HEAP32[$__end_$i312 >> 2] = (HEAP32[$__end_$i312 >> 2] | 0) + 16;
    } else __ZNSt3__26vectorINS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEENS4_IS6_Lj4096EEEE21__push_back_slow_pathIS6_EEvOT_($subs306, $ref$tmp);
    __ZNSt3__213__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEED2Ev($ref$tmp);
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($name);
    $pop_subs$0$off0$ph = 1;
    $t0$2$ph = $call269;
   }
   HEAP32[$db + 48 >> 2] = HEAP32[$cv >> 2];
   L123 : do if ($pop_subs$0$off0$ph) {
    $97 = HEAP32[$__end_$i312 >> 2] | 0;
    if ((HEAP32[$subs306 >> 2] | 0) != ($97 | 0)) {
     $add$ptr$i390 = $97 + -16 | 0;
     $98 = $97;
     while (1) {
      if (($98 | 0) == ($add$ptr$i390 | 0)) break L123;
      $incdec$ptr$i$i$i393 = $98 + -16 | 0;
      HEAP32[$__end_$i312 >> 2] = $incdec$ptr$i$i$i393;
      __ZNSt3__213__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEED2Ev($incdec$ptr$i$i$i393);
      $98 = HEAP32[$__end_$i312 >> 2] | 0;
     }
    }
   } while (0);
   $retval$4 = $add$ptr37;
   break L1;
  } while (0);
  $retval$4 = $first;
 } else $retval$4 = $first; while (0);
 STACKTOP = sp;
 return $retval$4 | 0;
}
function _vfscanf($f, $fmt, $ap) {
 $f = $f | 0;
 $fmt = $fmt | 0;
 $ap = $ap | 0;
 var $$ = 0, $$compoundliteral$sroa$2$0$$sroa_idx8 = 0, $$compoundliteral329 = 0, $$lcssa = 0, $$ph = 0, $$ph245 = 0, $$s$0 = 0, $$size$0 = 0, $1 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $40 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $68 = 0, $72 = 0, $73 = 0, $76 = 0, $77 = 0, $85 = 0, $86 = 0, $99 = 0, $add$ptr = 0, $add346 = 0, $add389 = 0, $add460 = 0, $alloc$1 = 0, $alloc$2 = 0, $arrayidx = 0, $arrayidx210 = 0, $arrayidx215 = 0, $arrayidx235 = 0, $arrayidx244 = 0, $arrayidx244$sink = 0, $arrayidx259 = 0, $arrayidx33 = 0, $base$0 = 0, $c$0308 = 0, $call306 = 0, $call348 = 0, $call361 = 0, $call392 = 0, $call522 = 0.0, $cmp100 = 0, $cmp111 = 0, $cmp119 = 0, $cmp131 = 0, $cmp200 = 0, $cmp220 = 0, $cmp300 = 0, $cmp31 = 0, $cond = 0, $cond155 = 0, $cond16 = 0, $cond299 = 0, $cond324 = 0, $cond377 = 0, $cond416 = 0, $cond438 = 0, $cond52 = 0, $conv130 = 0, $conv243 = 0, $conv285$pre$phiZ2D = 0, $conv91298 = 0, $conv91303 = 0, $dest$0 = 0, $i$0$ph = 0, $i$0$ph$phi = 0, $i$0$ph236 = 0, $i$1 = 0, $i$2 = 0, $i$2$ph = 0, $i$2$ph$phi = 0, $i$3 = 0, $i$4 = 0, $incdec$ptr105$p$3 = 0, $incdec$ptr108 = 0, $incdec$ptr164 = 0, $incdec$ptr218 = 0, $incdec$ptr25 = 0, $incdec$ptr451 = 0, $incdec$ptr98 = 0, $invert$0 = 0, $isdigittmp = 0, $k$0$ph = 0, $k$1$ph = 0, $lnot$ext$$le326 = 0, $matches$0312 = 0, $matches$1 = 0, $matches$2 = 0, $matches$3 = 0, $narrow = 0, $narrow350 = 0, $or$conv130 = 0, $p$0316 = 0, $p$1 = 0, $p$10 = 0, $p$11 = 0, $p$2 = 0, $p$3$lcssa = 0, $p$3301 = 0, $p$5 = 0, $p$6 = 0, $p$7 = 0, $p$7$ph = 0, $p$8 = 0, $p$9 = 0, $pos$0315 = 0, $pos$1 = 0, $pos$2 = 0, $rend169 = 0, $rpos144 = 0, $s$0310 = 0, $s$2$ph = 0, $s$4 = 0, $s$5 = 0, $s$6 = 0, $s$7 = 0, $s$8 = 0, $s$9 = 0, $s$9$ph = 0, $scanset = 0, $shcnt167 = 0, $shend145 = 0, $size$0 = 0, $st = 0, $sub97 = 0, $tobool103 = 0, $tobool335 = 0, $trunc = 0, $wc = 0, $wcs$5 = 0, $width$0$lcssa = 0, $width$0302 = 0, $width$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 288 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(288);
 $st = sp + 8 | 0;
 $scanset = sp + 17 | 0;
 $wc = sp;
 $$compoundliteral329 = sp + 16 | 0;
 if ((HEAP32[$f + 76 >> 2] | 0) > -1) $cond = ___lockfile($f) | 0; else $cond = 0;
 $1 = HEAP8[$fmt >> 0] | 0;
 L4 : do if (!($1 << 24 >> 24)) $matches$3 = 0; else {
  $rpos144 = $f + 4 | 0;
  $shend145 = $f + 100 | 0;
  $shcnt167 = $f + 108 | 0;
  $rend169 = $f + 8 | 0;
  $arrayidx210 = $scanset + 10 | 0;
  $arrayidx215 = $scanset + 33 | 0;
  $$compoundliteral$sroa$2$0$$sroa_idx8 = $st + 4 | 0;
  $arrayidx235 = $scanset + 46 | 0;
  $arrayidx244 = $scanset + 94 | 0;
  $2 = $scanset + 1 | 0;
  $3 = $scanset + 1 | 0;
  $32 = 0;
  $4 = $1;
  $matches$0312 = 0;
  $p$0316 = $fmt;
  $pos$0315 = 0;
  $s$0310 = 0;
  L6 : while (1) {
   L8 : do if (!(_isspace($4 & 255) | 0)) {
    $cmp31 = $4 << 24 >> 24 == 37;
    L10 : do if ($cmp31) {
     $arrayidx33 = $p$0316 + 1 | 0;
     $15 = HEAP8[$arrayidx33 >> 0] | 0;
     L12 : do switch ($15 << 24 >> 24) {
     case 37:
      {
       break L10;
       break;
      }
     case 42:
      {
       $dest$0 = 0;
       $p$2 = $p$0316 + 2 | 0;
       break;
      }
     default:
      {
       $isdigittmp = ($15 & 255) + -48 | 0;
       if ($isdigittmp >>> 0 < 10) if ((HEAP8[$p$0316 + 2 >> 0] | 0) == 36) {
        $dest$0 = _arg_n($ap, $isdigittmp) | 0;
        $p$2 = $p$0316 + 3 | 0;
        break L12;
       }
       $28 = (HEAP32[$ap >> 2] | 0) + (4 - 1) & ~(4 - 1);
       $29 = HEAP32[$28 >> 2] | 0;
       HEAP32[$ap >> 2] = $28 + 4;
       $dest$0 = $29;
       $p$2 = $arrayidx33;
      }
     } while (0);
     $30 = HEAP8[$p$2 >> 0] | 0;
     $conv91298 = $30 & 255;
     if (($conv91298 + -48 | 0) >>> 0 < 10) {
      $conv91303 = $conv91298;
      $p$3301 = $p$2;
      $width$0302 = 0;
      while (1) {
       $sub97 = ($width$0302 * 10 | 0) + -48 + $conv91303 | 0;
       $incdec$ptr98 = $p$3301 + 1 | 0;
       $31 = HEAP8[$incdec$ptr98 >> 0] | 0;
       $conv91303 = $31 & 255;
       if (($conv91303 + -48 | 0) >>> 0 >= 10) {
        $$lcssa = $31;
        $p$3$lcssa = $incdec$ptr98;
        $width$0$lcssa = $sub97;
        break;
       } else {
        $p$3301 = $incdec$ptr98;
        $width$0302 = $sub97;
       }
      }
     } else {
      $$lcssa = $30;
      $p$3$lcssa = $p$2;
      $width$0$lcssa = 0;
     }
     $cmp100 = $$lcssa << 24 >> 24 == 109;
     $tobool103 = ($dest$0 | 0) != 0;
     $$s$0 = $cmp100 ? 0 : $s$0310;
     $$ = $cmp100 ? 0 : $32;
     $incdec$ptr105$p$3 = $cmp100 ? $p$3$lcssa + 1 | 0 : $p$3$lcssa;
     $narrow = $tobool103 & $cmp100;
     $incdec$ptr108 = $incdec$ptr105$p$3 + 1 | 0;
     switch (HEAP8[$incdec$ptr105$p$3 >> 0] | 0) {
     case 104:
      {
       $cmp111 = (HEAP8[$incdec$ptr108 >> 0] | 0) == 104;
       $p$5 = $cmp111 ? $incdec$ptr105$p$3 + 2 | 0 : $incdec$ptr108;
       $size$0 = $cmp111 ? -2 : -1;
       break;
      }
     case 108:
      {
       $cmp119 = (HEAP8[$incdec$ptr108 >> 0] | 0) == 108;
       $p$5 = $cmp119 ? $incdec$ptr105$p$3 + 2 | 0 : $incdec$ptr108;
       $size$0 = $cmp119 ? 3 : 1;
       break;
      }
     case 106:
      {
       $p$5 = $incdec$ptr108;
       $size$0 = 3;
       break;
      }
     case 116:
     case 122:
      {
       $p$5 = $incdec$ptr108;
       $size$0 = 1;
       break;
      }
     case 76:
      {
       $p$5 = $incdec$ptr108;
       $size$0 = 2;
       break;
      }
     case 110:
     case 112:
     case 67:
     case 83:
     case 91:
     case 99:
     case 115:
     case 88:
     case 71:
     case 70:
     case 69:
     case 65:
     case 103:
     case 102:
     case 101:
     case 97:
     case 120:
     case 117:
     case 111:
     case 105:
     case 100:
      {
       $p$5 = $incdec$ptr105$p$3;
       $size$0 = 0;
       break;
      }
     default:
      {
       $102 = $$;
       $narrow350 = $narrow;
       $s$7 = $$s$0;
       label = 137;
       break L6;
      }
     }
     $conv130 = HEAPU8[$p$5 >> 0] | 0;
     $cmp131 = ($conv130 & 47 | 0) == 3;
     $or$conv130 = $cmp131 ? $conv130 | 32 : $conv130;
     $$size$0 = $cmp131 ? 1 : $size$0;
     $trunc = $or$conv130 & 255;
     switch ($trunc << 24 >> 24) {
     case 99:
      {
       $pos$1 = $pos$0315;
       $width$1 = ($width$0$lcssa | 0) > 1 ? $width$0$lcssa : 1;
       break;
      }
     case 91:
      {
       $pos$1 = $pos$0315;
       $width$1 = $width$0$lcssa;
       break;
      }
     case 110:
      {
       _store_int($dest$0, $$size$0, $pos$0315, (($pos$0315 | 0) < 0) << 31 >> 31);
       $100 = $$;
       $matches$1 = $matches$0312;
       $p$11 = $p$5;
       $pos$2 = $pos$0315;
       $s$6 = $$s$0;
       break L8;
       break;
      }
     default:
      {
       ___shlim($f, 0);
       do {
        $40 = HEAP32[$rpos144 >> 2] | 0;
        if ($40 >>> 0 < (HEAP32[$shend145 >> 2] | 0) >>> 0) {
         HEAP32[$rpos144 >> 2] = $40 + 1;
         $cond155 = HEAPU8[$40 >> 0] | 0;
        } else $cond155 = ___shgetc($f) | 0;
       } while ((_isspace($cond155) | 0) != 0);
       if (!(HEAP32[$shend145 >> 2] | 0)) $48 = HEAP32[$rpos144 >> 2] | 0; else {
        $incdec$ptr164 = (HEAP32[$rpos144 >> 2] | 0) + -1 | 0;
        HEAP32[$rpos144 >> 2] = $incdec$ptr164;
        $48 = $incdec$ptr164;
       }
       $pos$1 = (HEAP32[$shcnt167 >> 2] | 0) + $pos$0315 + $48 - (HEAP32[$rend169 >> 2] | 0) | 0;
       $width$1 = $width$0$lcssa;
      }
     }
     ___shlim($f, $width$1);
     $49 = HEAP32[$rpos144 >> 2] | 0;
     $50 = HEAP32[$shend145 >> 2] | 0;
     if ($49 >>> 0 < $50 >>> 0) {
      HEAP32[$rpos144 >> 2] = $49 + 1;
      $51 = $50;
     } else {
      if ((___shgetc($f) | 0) < 0) {
       $102 = $$;
       $narrow350 = $narrow;
       $s$7 = $$s$0;
       label = 137;
       break L6;
      }
      $51 = HEAP32[$shend145 >> 2] | 0;
     }
     if ($51 | 0) HEAP32[$rpos144 >> 2] = (HEAP32[$rpos144 >> 2] | 0) + -1;
     L55 : do switch ($trunc << 24 >> 24) {
     case 91:
     case 99:
     case 115:
      {
       $cmp200 = ($or$conv130 | 0) == 99;
       L57 : do if (($or$conv130 | 16 | 0) == 115) {
        _memset($2 | 0, -1, 256) | 0;
        HEAP8[$scanset >> 0] = 0;
        if (($or$conv130 | 0) == 115) {
         HEAP8[$arrayidx215 >> 0] = 0;
         HEAP8[$arrayidx210 >> 0] = 0;
         HEAP8[$arrayidx210 + 1 >> 0] = 0;
         HEAP8[$arrayidx210 + 2 >> 0] = 0;
         HEAP8[$arrayidx210 + 3 >> 0] = 0;
         HEAP8[$arrayidx210 + 4 >> 0] = 0;
         $p$9 = $p$5;
        } else $p$9 = $p$5;
       } else {
        $incdec$ptr218 = $p$5 + 1 | 0;
        $cmp220 = (HEAP8[$incdec$ptr218 >> 0] | 0) == 94;
        $invert$0 = $cmp220 & 1;
        $p$6 = $cmp220 ? $p$5 + 2 | 0 : $incdec$ptr218;
        _memset($3 | 0, $cmp220 & 1 | 0, 256) | 0;
        HEAP8[$scanset >> 0] = 0;
        switch (HEAP8[$p$6 >> 0] | 0) {
        case 45:
         {
          $arrayidx244$sink = $arrayidx235;
          label = 64;
          break;
         }
        case 93:
         {
          $arrayidx244$sink = $arrayidx244;
          label = 64;
          break;
         }
        default:
         {
          $conv285$pre$phiZ2D = ($invert$0 ^ 1) & 255;
          $p$7$ph = $p$6;
         }
        }
        if ((label | 0) == 64) {
         label = 0;
         $conv243 = ($invert$0 ^ 1) & 255;
         HEAP8[$arrayidx244$sink >> 0] = $conv243;
         $conv285$pre$phiZ2D = $conv243;
         $p$7$ph = $p$6 + 1 | 0;
        }
        $p$7 = $p$7$ph;
        while (1) {
         $58 = HEAP8[$p$7 >> 0] | 0;
         L69 : do switch ($58 << 24 >> 24) {
         case 0:
          {
           $102 = $$;
           $narrow350 = $narrow;
           $s$7 = $$s$0;
           label = 137;
           break L6;
           break;
          }
         case 93:
          {
           $p$9 = $p$7;
           break L57;
           break;
          }
         case 45:
          {
           $arrayidx259 = $p$7 + 1 | 0;
           $59 = HEAP8[$arrayidx259 >> 0] | 0;
           switch ($59 << 24 >> 24) {
           case 93:
           case 0:
            {
             $62 = 45;
             $p$8 = $p$7;
             break L69;
             break;
            }
           default:
            {}
           }
           $60 = HEAP8[$p$7 + -1 >> 0] | 0;
           if (($60 & 255) < ($59 & 255)) {
            $c$0308 = $60 & 255;
            do {
             $c$0308 = $c$0308 + 1 | 0;
             HEAP8[$scanset + $c$0308 >> 0] = $conv285$pre$phiZ2D;
             $61 = HEAP8[$arrayidx259 >> 0] | 0;
            } while (($c$0308 | 0) < ($61 & 255 | 0));
            $62 = $61;
            $p$8 = $arrayidx259;
           } else {
            $62 = $59;
            $p$8 = $arrayidx259;
           }
           break;
          }
         default:
          {
           $62 = $58;
           $p$8 = $p$7;
          }
         } while (0);
         HEAP8[$scanset + (($62 & 255) + 1) >> 0] = $conv285$pre$phiZ2D;
         $p$7 = $p$8 + 1 | 0;
        }
       } while (0);
       $cond299 = $cmp200 ? $width$1 + 1 | 0 : 31;
       $cmp300 = ($$size$0 | 0) == 1;
       L77 : do if ($cmp300) {
        if ($narrow) {
         $call306 = _malloc($cond299 << 2) | 0;
         if (!$call306) {
          $102 = 0;
          $narrow350 = 1;
          $s$7 = 0;
          label = 137;
          break L6;
         } else $104 = $call306;
        } else $104 = $dest$0;
        HEAP32[$st >> 2] = 0;
        HEAP32[$$compoundliteral$sroa$2$0$$sroa_idx8 >> 2] = 0;
        $$ph = $104;
        $i$0$ph = 0;
        $k$0$ph = $cond299;
        L82 : while (1) {
         $tobool335 = ($$ph | 0) == 0;
         $i$0$ph236 = $i$0$ph;
         while (1) {
          L86 : while (1) {
           $63 = HEAP32[$rpos144 >> 2] | 0;
           if ($63 >>> 0 < (HEAP32[$shend145 >> 2] | 0) >>> 0) {
            HEAP32[$rpos144 >> 2] = $63 + 1;
            $cond324 = HEAPU8[$63 >> 0] | 0;
           } else $cond324 = ___shgetc($f) | 0;
           if (!(HEAP8[$scanset + ($cond324 + 1) >> 0] | 0)) break L82;
           HEAP8[$$compoundliteral329 >> 0] = $cond324;
           switch (_mbrtowc($wc, $$compoundliteral329, 1, $st) | 0) {
           case -1:
            {
             $102 = $$ph;
             $narrow350 = $narrow;
             $s$7 = 0;
             label = 137;
             break L6;
             break;
            }
           case -2:
            break;
           default:
            break L86;
           }
          }
          if ($tobool335) $i$1 = $i$0$ph236; else {
           HEAP32[$$ph + ($i$0$ph236 << 2) >> 2] = HEAP32[$wc >> 2];
           $i$1 = $i$0$ph236 + 1 | 0;
          }
          if ($narrow & ($i$1 | 0) == ($k$0$ph | 0)) break; else $i$0$ph236 = $i$1;
         }
         $add346 = $k$0$ph << 1 | 1;
         $call348 = _realloc($$ph, $add346 << 2) | 0;
         if (!$call348) {
          $102 = $$ph;
          $narrow350 = 1;
          $s$7 = 0;
          label = 137;
          break L6;
         } else {
          $i$0$ph$phi = $k$0$ph;
          $$ph = $call348;
          $k$0$ph = $add346;
          $i$0$ph = $i$0$ph$phi;
         }
        }
        if (!(_mbsinit($st) | 0)) {
         $102 = $$ph;
         $narrow350 = $narrow;
         $s$7 = 0;
         label = 137;
         break L6;
        } else {
         $105 = $$ph;
         $i$4 = $i$0$ph236;
         $s$4 = 0;
         $wcs$5 = $$ph;
        }
       } else {
        if ($narrow) {
         $call361 = _malloc($cond299) | 0;
         if (!$call361) {
          $102 = 0;
          $narrow350 = 1;
          $s$7 = 0;
          label = 137;
          break L6;
         } else {
          $i$2$ph = 0;
          $k$1$ph = $cond299;
          $s$2$ph = $call361;
         }
         while (1) {
          $i$2 = $i$2$ph;
          do {
           $68 = HEAP32[$rpos144 >> 2] | 0;
           if ($68 >>> 0 < (HEAP32[$shend145 >> 2] | 0) >>> 0) {
            HEAP32[$rpos144 >> 2] = $68 + 1;
            $cond377 = HEAPU8[$68 >> 0] | 0;
           } else $cond377 = ___shgetc($f) | 0;
           if (!(HEAP8[$scanset + ($cond377 + 1) >> 0] | 0)) {
            $105 = 0;
            $i$4 = $i$2;
            $s$4 = $s$2$ph;
            $wcs$5 = 0;
            break L77;
           }
           HEAP8[$s$2$ph + $i$2 >> 0] = $cond377;
           $i$2 = $i$2 + 1 | 0;
          } while (($i$2 | 0) != ($k$1$ph | 0));
          $add389 = $k$1$ph << 1 | 1;
          $call392 = _realloc($s$2$ph, $add389) | 0;
          if (!$call392) {
           $102 = 0;
           $narrow350 = 1;
           $s$7 = $s$2$ph;
           label = 137;
           break L6;
          } else {
           $i$2$ph$phi = $k$1$ph;
           $k$1$ph = $add389;
           $s$2$ph = $call392;
           $i$2$ph = $i$2$ph$phi;
          }
         }
        }
        if (!$dest$0) {
         $77 = $51;
         while (1) {
          $76 = HEAP32[$rpos144 >> 2] | 0;
          if ($76 >>> 0 < $77 >>> 0) {
           HEAP32[$rpos144 >> 2] = $76 + 1;
           $cond438 = HEAPU8[$76 >> 0] | 0;
          } else $cond438 = ___shgetc($f) | 0;
          if (!(HEAP8[$scanset + ($cond438 + 1) >> 0] | 0)) {
           $105 = 0;
           $i$4 = 0;
           $s$4 = 0;
           $wcs$5 = 0;
           break L77;
          }
          $77 = HEAP32[$shend145 >> 2] | 0;
         }
        } else {
         $73 = $51;
         $i$3 = 0;
         while (1) {
          $72 = HEAP32[$rpos144 >> 2] | 0;
          if ($72 >>> 0 < $73 >>> 0) {
           HEAP32[$rpos144 >> 2] = $72 + 1;
           $cond416 = HEAPU8[$72 >> 0] | 0;
          } else $cond416 = ___shgetc($f) | 0;
          if (!(HEAP8[$scanset + ($cond416 + 1) >> 0] | 0)) {
           $105 = 0;
           $i$4 = $i$3;
           $s$4 = $dest$0;
           $wcs$5 = 0;
           break L77;
          }
          HEAP8[$dest$0 + $i$3 >> 0] = $cond416;
          $73 = HEAP32[$shend145 >> 2] | 0;
          $i$3 = $i$3 + 1 | 0;
         }
        }
       } while (0);
       if (!(HEAP32[$shend145 >> 2] | 0)) $85 = HEAP32[$rpos144 >> 2] | 0; else {
        $incdec$ptr451 = (HEAP32[$rpos144 >> 2] | 0) + -1 | 0;
        HEAP32[$rpos144 >> 2] = $incdec$ptr451;
        $85 = $incdec$ptr451;
       }
       $add460 = $85 - (HEAP32[$rend169 >> 2] | 0) + (HEAP32[$shcnt167 >> 2] | 0) | 0;
       if (!$add460) {
        $$ph245 = $105;
        $s$9$ph = $s$4;
        label = 139;
        break L6;
       }
       if (!(($add460 | 0) == ($width$1 | 0) | $cmp200 ^ 1)) {
        $$ph245 = $105;
        $s$9$ph = $s$4;
        label = 139;
        break L6;
       }
       do if ($narrow) if ($cmp300) {
        HEAP32[$dest$0 >> 2] = $wcs$5;
        break;
       } else {
        HEAP32[$dest$0 >> 2] = $s$4;
        break;
       } while (0);
       if ($cmp200) {
        $103 = $105;
        $p$10 = $p$9;
        $s$5 = $s$4;
       } else {
        if ($wcs$5 | 0) HEAP32[$wcs$5 + ($i$4 << 2) >> 2] = 0;
        if (!$s$4) {
         $103 = $105;
         $p$10 = $p$9;
         $s$5 = 0;
         break L55;
        }
        HEAP8[$s$4 + $i$4 >> 0] = 0;
        $103 = $105;
        $p$10 = $p$9;
        $s$5 = $s$4;
       }
       break;
      }
     case 120:
     case 88:
     case 112:
      {
       $base$0 = 16;
       label = 125;
       break;
      }
     case 111:
      {
       $base$0 = 8;
       label = 125;
       break;
      }
     case 117:
     case 100:
      {
       $base$0 = 10;
       label = 125;
       break;
      }
     case 105:
      {
       $base$0 = 0;
       label = 125;
       break;
      }
     case 71:
     case 103:
     case 70:
     case 102:
     case 69:
     case 101:
     case 65:
     case 97:
      {
       $call522 = +___floatscan($f, $$size$0, 0);
       if ((HEAP32[$shcnt167 >> 2] | 0) == ((HEAP32[$rend169 >> 2] | 0) - (HEAP32[$rpos144 >> 2] | 0) | 0)) {
        $$ph245 = $$;
        $s$9$ph = $$s$0;
        label = 139;
        break L6;
       }
       if (!$dest$0) {
        $103 = $$;
        $p$10 = $p$5;
        $s$5 = $$s$0;
       } else switch ($$size$0 | 0) {
       case 0:
        {
         HEAPF32[$dest$0 >> 2] = $call522;
         $103 = $$;
         $p$10 = $p$5;
         $s$5 = $$s$0;
         break L55;
         break;
        }
       case 1:
        {
         HEAPF64[$dest$0 >> 3] = $call522;
         $103 = $$;
         $p$10 = $p$5;
         $s$5 = $$s$0;
         break L55;
         break;
        }
       case 2:
        {
         HEAPF64[$dest$0 >> 3] = $call522;
         $103 = $$;
         $p$10 = $p$5;
         $s$5 = $$s$0;
         break L55;
         break;
        }
       default:
        {
         $103 = $$;
         $p$10 = $p$5;
         $s$5 = $$s$0;
         break L55;
        }
       }
       break;
      }
     default:
      {
       $103 = $$;
       $p$10 = $p$5;
       $s$5 = $$s$0;
      }
     } while (0);
     do if ((label | 0) == 125) {
      label = 0;
      $86 = ___intscan($f, $base$0, 0, -1, -1) | 0;
      if ((HEAP32[$shcnt167 >> 2] | 0) == ((HEAP32[$rend169 >> 2] | 0) - (HEAP32[$rpos144 >> 2] | 0) | 0)) {
       $$ph245 = $$;
       $s$9$ph = $$s$0;
       label = 139;
       break L6;
      }
      if ($tobool103 & ($or$conv130 | 0) == 112) {
       HEAP32[$dest$0 >> 2] = $86;
       $103 = $$;
       $p$10 = $p$5;
       $s$5 = $$s$0;
       break;
      } else {
       _store_int($dest$0, $$size$0, $86, tempRet0);
       $103 = $$;
       $p$10 = $p$5;
       $s$5 = $$s$0;
       break;
      }
     } while (0);
     $100 = $103;
     $matches$1 = ($tobool103 & 1) + $matches$0312 | 0;
     $p$11 = $p$10;
     $pos$2 = (HEAP32[$shcnt167 >> 2] | 0) + $pos$1 + (HEAP32[$rpos144 >> 2] | 0) - (HEAP32[$rend169 >> 2] | 0) | 0;
     $s$6 = $s$5;
     break L8;
    } while (0);
    $add$ptr = $p$0316 + ($cmp31 & 1) | 0;
    ___shlim($f, 0);
    $16 = HEAP32[$rpos144 >> 2] | 0;
    if ($16 >>> 0 < (HEAP32[$shend145 >> 2] | 0) >>> 0) {
     HEAP32[$rpos144 >> 2] = $16 + 1;
     $cond52 = HEAPU8[$16 >> 0] | 0;
    } else $cond52 = ___shgetc($f) | 0;
    if (($cond52 | 0) != (HEAPU8[$add$ptr >> 0] | 0)) {
     label = 22;
     break L6;
    }
    $100 = $32;
    $matches$1 = $matches$0312;
    $p$11 = $add$ptr;
    $pos$2 = $pos$0315 + 1 | 0;
    $s$6 = $s$0310;
   } else {
    $p$1 = $p$0316;
    while (1) {
     $arrayidx = $p$1 + 1 | 0;
     if (!(_isspace(HEAPU8[$arrayidx >> 0] | 0) | 0)) break; else $p$1 = $arrayidx;
    }
    ___shlim($f, 0);
    do {
     $6 = HEAP32[$rpos144 >> 2] | 0;
     if ($6 >>> 0 < (HEAP32[$shend145 >> 2] | 0) >>> 0) {
      HEAP32[$rpos144 >> 2] = $6 + 1;
      $cond16 = HEAPU8[$6 >> 0] | 0;
     } else $cond16 = ___shgetc($f) | 0;
    } while ((_isspace($cond16) | 0) != 0);
    if (!(HEAP32[$shend145 >> 2] | 0)) $14 = HEAP32[$rpos144 >> 2] | 0; else {
     $incdec$ptr25 = (HEAP32[$rpos144 >> 2] | 0) + -1 | 0;
     HEAP32[$rpos144 >> 2] = $incdec$ptr25;
     $14 = $incdec$ptr25;
    }
    $100 = $32;
    $matches$1 = $matches$0312;
    $p$11 = $p$1;
    $pos$2 = (HEAP32[$shcnt167 >> 2] | 0) + $pos$0315 + $14 - (HEAP32[$rend169 >> 2] | 0) | 0;
    $s$6 = $s$0310;
   } while (0);
   $p$0316 = $p$11 + 1 | 0;
   $4 = HEAP8[$p$0316 >> 0] | 0;
   if (!($4 << 24 >> 24)) {
    $matches$3 = $matches$1;
    break L4;
   } else {
    $32 = $100;
    $matches$0312 = $matches$1;
    $pos$0315 = $pos$2;
    $s$0310 = $s$6;
   }
  }
  if ((label | 0) == 22) {
   if (HEAP32[$shend145 >> 2] | 0) HEAP32[$rpos144 >> 2] = (HEAP32[$rpos144 >> 2] | 0) + -1;
   if (($matches$0312 | 0) != 0 | ($cond52 | 0) > -1) {
    $matches$3 = $matches$0312;
    break;
   } else {
    $101 = $32;
    $alloc$1 = 0;
    $s$8 = $s$0310;
    label = 138;
   }
  } else if ((label | 0) == 137) {
   $lnot$ext$$le326 = $narrow350 & 1;
   if (!$matches$0312) {
    $101 = $102;
    $alloc$1 = $lnot$ext$$le326;
    $s$8 = $s$7;
    label = 138;
   } else {
    $99 = $102;
    $alloc$2 = $lnot$ext$$le326;
    $matches$2 = $matches$0312;
    $s$9 = $s$7;
   }
  } else if ((label | 0) == 139) {
   $99 = $$ph245;
   $alloc$2 = $narrow & 1;
   $matches$2 = $matches$0312;
   $s$9 = $s$9$ph;
  }
  if ((label | 0) == 138) {
   $99 = $101;
   $alloc$2 = $alloc$1;
   $matches$2 = -1;
   $s$9 = $s$8;
  }
  if (!$alloc$2) $matches$3 = $matches$2; else {
   _free($s$9);
   _free($99);
   $matches$3 = $matches$2;
  }
 } while (0);
 if ($cond | 0) ___unlockfile($f);
 STACKTOP = sp;
 return $matches$3 | 0;
}

function _fmt_fp($f, $y, $w, $p, $fl, $t) {
 $f = $f | 0;
 $y = +$y;
 $w = $w | 0;
 $p = $p | 0;
 $fl = $fl | 0;
 $t = $t | 0;
 var $$$405 = 0.0, $$397 = 0.0, $$p = 0, $$p$inc468 = 0, $$pr = 0, $$pr407 = 0, $$sub514 = 0, $$sub562 = 0, $13 = 0, $16 = 0, $23 = 0, $25 = 0, $27 = 0, $28 = 0, $29 = 0, $35 = 0, $38 = 0, $4 = 0, $41 = 0, $44 = 0, $47 = 0, $49 = 0, $53 = 0, $57 = 0, $62 = 0, $68 = 0, $73 = 0, $75 = 0, $a$1$lcssa = 0, $a$1476 = 0, $a$2$ph = 0, $a$3$lcssa = 0, $a$3466 = 0, $a$5$lcssa = 0, $a$5448 = 0, $a$6 = 0, $a$8 = 0, $a$9$ph = 0, $add = 0, $add$ptr311$z$4 = 0, $add$ptr358 = 0, $add$ptr442 = 0, $add$ptr671 = 0, $add$ptr756 = 0, $add150$pn = 0, $add165 = 0, $add275 = 0, $add355 = 0, $add414 = 0, $add653 = 0, $add653$sink406 = 0, $add67 = 0, $and483 = 0, $and610$pre$phiZ2D = 0, $and62 = 0, $arraydecay208$add$ptr213 = 0, $arrayidx = 0, $arrayidx251 = 0, $arrayidx453 = 0, $big = 0, $buf = 0, $carry$0471 = 0, $carry262$0462 = 0, $cmp299 = 0, $cmp338 = 0, $cmp374 = 0, $cmp403 = 0, $cmp450$lcssa = 0, $cmp614 = 0, $cond100 = 0, $cond233 = 0, $cond271 = 0, $cond304 = 0, $cond629 = 0, $conv116 = 0, $conv216 = 0, $d$0469 = 0, $d$0472 = 0, $d$1461 = 0, $d$4 = 0, $d$5422 = 0, $d$6416 = 0, $d$7428 = 0, $div384 = 0, $e$0458 = 0, $e$1 = 0, $e$2444 = 0, $e$4 = 0, $e$5$ph = 0, $e2 = 0, $ebuf0 = 0, $estr$0 = 0, $estr$1$lcssa = 0, $estr$1434 = 0, $estr$2 = 0, $i$0457 = 0, $i$1$lcssa = 0, $i$1453 = 0, $i$2443 = 0, $i$3439 = 0, $inc = 0, $inc425 = 0, $inc438 = 0, $inc500 = 0, $incdec$ptr106 = 0, $incdec$ptr115 = 0, $incdec$ptr122 = 0, $incdec$ptr246 = 0, $incdec$ptr292$a$3 = 0, $incdec$ptr292$a$3494 = 0, $incdec$ptr419 = 0, $incdec$ptr419$sink$lcssa = 0, $incdec$ptr419$sink447 = 0, $incdec$ptr423 = 0, $incdec$ptr639 = 0, $incdec$ptr647 = 0, $incdec$ptr681 = 0, $incdec$ptr689 = 0, $incdec$ptr725 = 0, $incdec$ptr763 = 0, $incdec$ptr773 = 0, $incdec$ptr776 = 0, $j$0451 = 0, $j$0454 = 0, $j$1440 = 0, $j$2 = 0, $lor$ext = 0, $mul = 0.0, $mul322 = 0, $mul367 = 0, $mul431 = 0, $mul513 = 0, $notrhs = 0, $or = 0, $p$addr$2 = 0, $p$addr$3 = 0, $p$addr$4$lcssa = 0, $p$addr$4417 = 0, $p$addr$5$lcssa = 0, $p$addr$5429 = 0, $pl$0 = 0, $prefix$0 = 0, $prefix$0$add$ptr65 = 0, $r$0$a$9 = 0, $re$1410 = 0, $rem370 = 0, $round$0409 = 0.0, $round377$1 = 0.0, $s$0 = 0, $s$1 = 0, $s668$0420 = 0, $s668$1 = 0, $s715$0$lcssa = 0, $s715$0412 = 0, $s753$0 = 0, $s753$1424 = 0, $s753$2 = 0, $shr285 = 0, $small$1 = 0.0, $sub$ptr$lhs$cast318 = 0, $sub$ptr$lhs$cast633 = 0, $sub$ptr$lhs$cast694 = 0, $sub$ptr$lhs$cast787 = 0, $sub$ptr$rhs$cast = 0, $sub$ptr$sub145 = 0, $sub$ptr$sub153 = 0, $sub$ptr$sub650$pn = 0, $sub$ptr$sub789 = 0, $sub203 = 0, $sub256 = 0, $sub264 = 0, $sub281 = 0, $sub343 = 0, $sub409 = 0, $sub514 = 0, $sub562 = 0, $sub626$le = 0, $sub735 = 0, $sub74 = 0, $sub806 = 0, $t$addr$0 = 0, $t$addr$1 = 0, $tobool135 = 0, $tobool341 = 0, $tobool37 = 0, $tobool56 = 0, $tobool781 = 0, $y$addr$0 = 0.0, $y$addr$1 = 0.0, $y$addr$2 = 0.0, $y$addr$3 = 0.0, $y$addr$4 = 0.0, $z$0 = 0, $z$1$lcssa = 0, $z$1475 = 0, $z$2 = 0, $z$3$lcssa = 0, $z$3465 = 0, $z$4 = 0, $z$7 = 0, $z$7$add$ptr742 = 0, $z$7$ph = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 560 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(560);
 $big = sp + 8 | 0;
 $e2 = sp;
 $buf = sp + 524 | 0;
 $sub$ptr$rhs$cast = $buf;
 $ebuf0 = sp + 512 | 0;
 HEAP32[$e2 >> 2] = 0;
 $arrayidx = $ebuf0 + 12 | 0;
 ___DOUBLE_BITS_685($y) | 0;
 if ((tempRet0 | 0) < 0) {
  $pl$0 = 1;
  $prefix$0 = 12274;
  $y$addr$0 = -$y;
 } else {
  $pl$0 = ($fl & 2049 | 0) != 0 & 1;
  $prefix$0 = ($fl & 2048 | 0) == 0 ? (($fl & 1 | 0) == 0 ? 12275 : 12280) : 12277;
  $y$addr$0 = $y;
 }
 ___DOUBLE_BITS_685($y$addr$0) | 0;
 $4 = tempRet0 & 2146435072;
 do if ($4 >>> 0 < 2146435072 | ($4 | 0) == 2146435072 & 0 < 0) {
  $mul = +_frexpl($y$addr$0, $e2) * 2.0;
  $tobool56 = $mul != 0.0;
  if ($tobool56) HEAP32[$e2 >> 2] = (HEAP32[$e2 >> 2] | 0) + -1;
  $or = $t | 32;
  if (($or | 0) == 97) {
   $and62 = $t & 32;
   $prefix$0$add$ptr65 = ($and62 | 0) == 0 ? $prefix$0 : $prefix$0 + 9 | 0;
   $add67 = $pl$0 | 2;
   $sub74 = 12 - $p | 0;
   do if ($p >>> 0 > 11 | ($sub74 | 0) == 0) $y$addr$1 = $mul; else {
    $re$1410 = $sub74;
    $round$0409 = 8.0;
    do {
     $re$1410 = $re$1410 + -1 | 0;
     $round$0409 = $round$0409 * 16.0;
    } while (($re$1410 | 0) != 0);
    if ((HEAP8[$prefix$0$add$ptr65 >> 0] | 0) == 45) {
     $y$addr$1 = -($round$0409 + (-$mul - $round$0409));
     break;
    } else {
     $y$addr$1 = $mul + $round$0409 - $round$0409;
     break;
    }
   } while (0);
   $13 = HEAP32[$e2 >> 2] | 0;
   $cond100 = ($13 | 0) < 0 ? 0 - $13 | 0 : $13;
   $16 = _fmt_u($cond100, (($cond100 | 0) < 0) << 31 >> 31, $arrayidx) | 0;
   if (($16 | 0) == ($arrayidx | 0)) {
    $incdec$ptr106 = $ebuf0 + 11 | 0;
    HEAP8[$incdec$ptr106 >> 0] = 48;
    $estr$0 = $incdec$ptr106;
   } else $estr$0 = $16;
   HEAP8[$estr$0 + -1 >> 0] = ($13 >> 31 & 2) + 43;
   $incdec$ptr115 = $estr$0 + -2 | 0;
   HEAP8[$incdec$ptr115 >> 0] = $t + 15;
   $notrhs = ($p | 0) < 1;
   $tobool135 = ($fl & 8 | 0) == 0;
   $s$0 = $buf;
   $y$addr$2 = $y$addr$1;
   while (1) {
    $conv116 = ~~$y$addr$2;
    $incdec$ptr122 = $s$0 + 1 | 0;
    HEAP8[$s$0 >> 0] = HEAPU8[12305 + $conv116 >> 0] | $and62;
    $y$addr$2 = ($y$addr$2 - +($conv116 | 0)) * 16.0;
    if (($incdec$ptr122 - $sub$ptr$rhs$cast | 0) == 1) if ($tobool135 & ($notrhs & $y$addr$2 == 0.0)) $s$1 = $incdec$ptr122; else {
     HEAP8[$incdec$ptr122 >> 0] = 46;
     $s$1 = $s$0 + 2 | 0;
    } else $s$1 = $incdec$ptr122;
    if (!($y$addr$2 != 0.0)) break; else $s$0 = $s$1;
   }
   $sub$ptr$sub145 = $s$1 - $sub$ptr$rhs$cast | 0;
   $sub$ptr$sub153 = $arrayidx - $incdec$ptr115 | 0;
   $add150$pn = ($p | 0) != 0 & ($sub$ptr$sub145 + -2 | 0) < ($p | 0) ? $p + 2 | 0 : $sub$ptr$sub145;
   $add165 = $sub$ptr$sub153 + $add67 + $add150$pn | 0;
   _pad_684($f, 32, $w, $add165, $fl);
   _out($f, $prefix$0$add$ptr65, $add67);
   _pad_684($f, 48, $w, $add165, $fl ^ 65536);
   _out($f, $buf, $sub$ptr$sub145);
   _pad_684($f, 48, $add150$pn - $sub$ptr$sub145 | 0, 0, 0);
   _out($f, $incdec$ptr115, $sub$ptr$sub153);
   _pad_684($f, 32, $w, $add165, $fl ^ 8192);
   $add653$sink406 = $add165;
   break;
  }
  $$p = ($p | 0) < 0 ? 6 : $p;
  if ($tobool56) {
   $sub203 = (HEAP32[$e2 >> 2] | 0) + -28 | 0;
   HEAP32[$e2 >> 2] = $sub203;
   $$pr = $sub203;
   $y$addr$3 = $mul * 268435456.0;
  } else {
   $$pr = HEAP32[$e2 >> 2] | 0;
   $y$addr$3 = $mul;
  }
  $arraydecay208$add$ptr213 = ($$pr | 0) < 0 ? $big : $big + 288 | 0;
  $y$addr$4 = $y$addr$3;
  $z$0 = $arraydecay208$add$ptr213;
  do {
   $conv216 = ~~$y$addr$4 >>> 0;
   HEAP32[$z$0 >> 2] = $conv216;
   $z$0 = $z$0 + 4 | 0;
   $y$addr$4 = ($y$addr$4 - +($conv216 >>> 0)) * 1.0e9;
  } while ($y$addr$4 != 0.0);
  if (($$pr | 0) > 0) {
   $23 = $$pr;
   $a$1476 = $arraydecay208$add$ptr213;
   $z$1475 = $z$0;
   while (1) {
    $cond233 = ($23 | 0) < 29 ? $23 : 29;
    $d$0469 = $z$1475 + -4 | 0;
    if ($d$0469 >>> 0 < $a$1476 >>> 0) $a$2$ph = $a$1476; else {
     $carry$0471 = 0;
     $d$0472 = $d$0469;
     do {
      $25 = _bitshift64Shl(HEAP32[$d$0472 >> 2] | 0, 0, $cond233 | 0) | 0;
      $27 = _i64Add($25 | 0, tempRet0 | 0, $carry$0471 | 0, 0) | 0;
      $28 = tempRet0;
      $29 = ___uremdi3($27 | 0, $28 | 0, 1e9, 0) | 0;
      HEAP32[$d$0472 >> 2] = $29;
      $carry$0471 = ___udivdi3($27 | 0, $28 | 0, 1e9, 0) | 0;
      $d$0472 = $d$0472 + -4 | 0;
     } while ($d$0472 >>> 0 >= $a$1476 >>> 0);
     if (!$carry$0471) $a$2$ph = $a$1476; else {
      $incdec$ptr246 = $a$1476 + -4 | 0;
      HEAP32[$incdec$ptr246 >> 2] = $carry$0471;
      $a$2$ph = $incdec$ptr246;
     }
    }
    $z$2 = $z$1475;
    while (1) {
     if ($z$2 >>> 0 <= $a$2$ph >>> 0) break;
     $arrayidx251 = $z$2 + -4 | 0;
     if (!(HEAP32[$arrayidx251 >> 2] | 0)) $z$2 = $arrayidx251; else break;
    }
    $sub256 = (HEAP32[$e2 >> 2] | 0) - $cond233 | 0;
    HEAP32[$e2 >> 2] = $sub256;
    if (($sub256 | 0) > 0) {
     $23 = $sub256;
     $a$1476 = $a$2$ph;
     $z$1475 = $z$2;
    } else {
     $$pr407 = $sub256;
     $a$1$lcssa = $a$2$ph;
     $z$1$lcssa = $z$2;
     break;
    }
   }
  } else {
   $$pr407 = $$pr;
   $a$1$lcssa = $arraydecay208$add$ptr213;
   $z$1$lcssa = $z$0;
  }
  if (($$pr407 | 0) < 0) {
   $add275 = (($$p + 25 | 0) / 9 | 0) + 1 | 0;
   $cmp299 = ($or | 0) == 102;
   $35 = $$pr407;
   $a$3466 = $a$1$lcssa;
   $z$3465 = $z$1$lcssa;
   while (1) {
    $sub264 = 0 - $35 | 0;
    $cond271 = ($sub264 | 0) < 9 ? $sub264 : 9;
    if ($a$3466 >>> 0 < $z$3465 >>> 0) {
     $sub281 = (1 << $cond271) + -1 | 0;
     $shr285 = 1e9 >>> $cond271;
     $carry262$0462 = 0;
     $d$1461 = $a$3466;
     do {
      $38 = HEAP32[$d$1461 >> 2] | 0;
      HEAP32[$d$1461 >> 2] = ($38 >>> $cond271) + $carry262$0462;
      $carry262$0462 = Math_imul($38 & $sub281, $shr285) | 0;
      $d$1461 = $d$1461 + 4 | 0;
     } while ($d$1461 >>> 0 < $z$3465 >>> 0);
     $incdec$ptr292$a$3 = (HEAP32[$a$3466 >> 2] | 0) == 0 ? $a$3466 + 4 | 0 : $a$3466;
     if (!$carry262$0462) {
      $incdec$ptr292$a$3494 = $incdec$ptr292$a$3;
      $z$4 = $z$3465;
     } else {
      HEAP32[$z$3465 >> 2] = $carry262$0462;
      $incdec$ptr292$a$3494 = $incdec$ptr292$a$3;
      $z$4 = $z$3465 + 4 | 0;
     }
    } else {
     $incdec$ptr292$a$3494 = (HEAP32[$a$3466 >> 2] | 0) == 0 ? $a$3466 + 4 | 0 : $a$3466;
     $z$4 = $z$3465;
    }
    $cond304 = $cmp299 ? $arraydecay208$add$ptr213 : $incdec$ptr292$a$3494;
    $add$ptr311$z$4 = ($z$4 - $cond304 >> 2 | 0) > ($add275 | 0) ? $cond304 + ($add275 << 2) | 0 : $z$4;
    $35 = (HEAP32[$e2 >> 2] | 0) + $cond271 | 0;
    HEAP32[$e2 >> 2] = $35;
    if (($35 | 0) >= 0) {
     $a$3$lcssa = $incdec$ptr292$a$3494;
     $z$3$lcssa = $add$ptr311$z$4;
     break;
    } else {
     $a$3466 = $incdec$ptr292$a$3494;
     $z$3465 = $add$ptr311$z$4;
    }
   }
  } else {
   $a$3$lcssa = $a$1$lcssa;
   $z$3$lcssa = $z$1$lcssa;
  }
  $sub$ptr$lhs$cast318 = $arraydecay208$add$ptr213;
  if ($a$3$lcssa >>> 0 < $z$3$lcssa >>> 0) {
   $mul322 = ($sub$ptr$lhs$cast318 - $a$3$lcssa >> 2) * 9 | 0;
   $41 = HEAP32[$a$3$lcssa >> 2] | 0;
   if ($41 >>> 0 < 10) $e$1 = $mul322; else {
    $e$0458 = $mul322;
    $i$0457 = 10;
    while (1) {
     $i$0457 = $i$0457 * 10 | 0;
     $inc = $e$0458 + 1 | 0;
     if ($41 >>> 0 < $i$0457 >>> 0) {
      $e$1 = $inc;
      break;
     } else $e$0458 = $inc;
    }
   }
  } else $e$1 = 0;
  $cmp338 = ($or | 0) == 103;
  $tobool341 = ($$p | 0) != 0;
  $sub343 = $$p - (($or | 0) != 102 ? $e$1 : 0) + (($tobool341 & $cmp338) << 31 >> 31) | 0;
  if (($sub343 | 0) < ((($z$3$lcssa - $sub$ptr$lhs$cast318 >> 2) * 9 | 0) + -9 | 0)) {
   $add355 = $sub343 + 9216 | 0;
   $add$ptr358 = $arraydecay208$add$ptr213 + 4 + ((($add355 | 0) / 9 | 0) + -1024 << 2) | 0;
   $j$0451 = (($add355 | 0) % 9 | 0) + 1 | 0;
   if (($j$0451 | 0) < 9) {
    $i$1453 = 10;
    $j$0454 = $j$0451;
    while (1) {
     $mul367 = $i$1453 * 10 | 0;
     $j$0454 = $j$0454 + 1 | 0;
     if (($j$0454 | 0) == 9) {
      $i$1$lcssa = $mul367;
      break;
     } else $i$1453 = $mul367;
    }
   } else $i$1$lcssa = 10;
   $44 = HEAP32[$add$ptr358 >> 2] | 0;
   $rem370 = ($44 >>> 0) % ($i$1$lcssa >>> 0) | 0;
   $cmp374 = ($add$ptr358 + 4 | 0) == ($z$3$lcssa | 0);
   if ($cmp374 & ($rem370 | 0) == 0) {
    $a$8 = $a$3$lcssa;
    $d$4 = $add$ptr358;
    $e$4 = $e$1;
   } else {
    $$397 = ((($44 >>> 0) / ($i$1$lcssa >>> 0) | 0) & 1 | 0) == 0 ? 9007199254740992.0 : 9007199254740994.0;
    $div384 = ($i$1$lcssa | 0) / 2 | 0;
    $$$405 = $rem370 >>> 0 < $div384 >>> 0 ? .5 : $cmp374 & ($rem370 | 0) == ($div384 | 0) ? 1.0 : 1.5;
    if (!$pl$0) {
     $round377$1 = $$397;
     $small$1 = $$$405;
    } else {
     $cmp403 = (HEAP8[$prefix$0 >> 0] | 0) == 45;
     $round377$1 = $cmp403 ? -$$397 : $$397;
     $small$1 = $cmp403 ? -$$$405 : $$$405;
    }
    $sub409 = $44 - $rem370 | 0;
    HEAP32[$add$ptr358 >> 2] = $sub409;
    if ($round377$1 + $small$1 != $round377$1) {
     $add414 = $sub409 + $i$1$lcssa | 0;
     HEAP32[$add$ptr358 >> 2] = $add414;
     if ($add414 >>> 0 > 999999999) {
      $a$5448 = $a$3$lcssa;
      $incdec$ptr419$sink447 = $add$ptr358;
      while (1) {
       $incdec$ptr419 = $incdec$ptr419$sink447 + -4 | 0;
       HEAP32[$incdec$ptr419$sink447 >> 2] = 0;
       if ($incdec$ptr419 >>> 0 < $a$5448 >>> 0) {
        $incdec$ptr423 = $a$5448 + -4 | 0;
        HEAP32[$incdec$ptr423 >> 2] = 0;
        $a$6 = $incdec$ptr423;
       } else $a$6 = $a$5448;
       $inc425 = (HEAP32[$incdec$ptr419 >> 2] | 0) + 1 | 0;
       HEAP32[$incdec$ptr419 >> 2] = $inc425;
       if ($inc425 >>> 0 > 999999999) {
        $a$5448 = $a$6;
        $incdec$ptr419$sink447 = $incdec$ptr419;
       } else {
        $a$5$lcssa = $a$6;
        $incdec$ptr419$sink$lcssa = $incdec$ptr419;
        break;
       }
      }
     } else {
      $a$5$lcssa = $a$3$lcssa;
      $incdec$ptr419$sink$lcssa = $add$ptr358;
     }
     $mul431 = ($sub$ptr$lhs$cast318 - $a$5$lcssa >> 2) * 9 | 0;
     $47 = HEAP32[$a$5$lcssa >> 2] | 0;
     if ($47 >>> 0 < 10) {
      $a$8 = $a$5$lcssa;
      $d$4 = $incdec$ptr419$sink$lcssa;
      $e$4 = $mul431;
     } else {
      $e$2444 = $mul431;
      $i$2443 = 10;
      while (1) {
       $i$2443 = $i$2443 * 10 | 0;
       $inc438 = $e$2444 + 1 | 0;
       if ($47 >>> 0 < $i$2443 >>> 0) {
        $a$8 = $a$5$lcssa;
        $d$4 = $incdec$ptr419$sink$lcssa;
        $e$4 = $inc438;
        break;
       } else $e$2444 = $inc438;
      }
     }
    } else {
     $a$8 = $a$3$lcssa;
     $d$4 = $add$ptr358;
     $e$4 = $e$1;
    }
   }
   $add$ptr442 = $d$4 + 4 | 0;
   $a$9$ph = $a$8;
   $e$5$ph = $e$4;
   $z$7$ph = $z$3$lcssa >>> 0 > $add$ptr442 >>> 0 ? $add$ptr442 : $z$3$lcssa;
  } else {
   $a$9$ph = $a$3$lcssa;
   $e$5$ph = $e$1;
   $z$7$ph = $z$3$lcssa;
  }
  $z$7 = $z$7$ph;
  while (1) {
   if ($z$7 >>> 0 <= $a$9$ph >>> 0) {
    $cmp450$lcssa = 0;
    break;
   }
   $arrayidx453 = $z$7 + -4 | 0;
   if (!(HEAP32[$arrayidx453 >> 2] | 0)) $z$7 = $arrayidx453; else {
    $cmp450$lcssa = 1;
    break;
   }
  }
  $sub626$le = 0 - $e$5$ph | 0;
  do if ($cmp338) {
   $$p$inc468 = (($tobool341 ^ 1) & 1) + $$p | 0;
   if (($$p$inc468 | 0) > ($e$5$ph | 0) & ($e$5$ph | 0) > -5) {
    $p$addr$2 = $$p$inc468 + -1 - $e$5$ph | 0;
    $t$addr$0 = $t + -1 | 0;
   } else {
    $p$addr$2 = $$p$inc468 + -1 | 0;
    $t$addr$0 = $t + -2 | 0;
   }
   $and483 = $fl & 8;
   if (!$and483) {
    if ($cmp450$lcssa) {
     $49 = HEAP32[$z$7 + -4 >> 2] | 0;
     if (!$49) $j$2 = 9; else if (!(($49 >>> 0) % 10 | 0)) {
      $i$3439 = 10;
      $j$1440 = 0;
      while (1) {
       $i$3439 = $i$3439 * 10 | 0;
       $inc500 = $j$1440 + 1 | 0;
       if (($49 >>> 0) % ($i$3439 >>> 0) | 0 | 0) {
        $j$2 = $inc500;
        break;
       } else $j$1440 = $inc500;
      }
     } else $j$2 = 0;
    } else $j$2 = 9;
    $mul513 = (($z$7 - $sub$ptr$lhs$cast318 >> 2) * 9 | 0) + -9 | 0;
    if (($t$addr$0 | 32 | 0) == 102) {
     $sub514 = $mul513 - $j$2 | 0;
     $$sub514 = ($sub514 | 0) > 0 ? $sub514 : 0;
     $and610$pre$phiZ2D = 0;
     $p$addr$3 = ($p$addr$2 | 0) < ($$sub514 | 0) ? $p$addr$2 : $$sub514;
     $t$addr$1 = $t$addr$0;
     break;
    } else {
     $sub562 = $mul513 + $e$5$ph - $j$2 | 0;
     $$sub562 = ($sub562 | 0) > 0 ? $sub562 : 0;
     $and610$pre$phiZ2D = 0;
     $p$addr$3 = ($p$addr$2 | 0) < ($$sub562 | 0) ? $p$addr$2 : $$sub562;
     $t$addr$1 = $t$addr$0;
     break;
    }
   } else {
    $and610$pre$phiZ2D = $and483;
    $p$addr$3 = $p$addr$2;
    $t$addr$1 = $t$addr$0;
   }
  } else {
   $and610$pre$phiZ2D = $fl & 8;
   $p$addr$3 = $$p;
   $t$addr$1 = $t;
  } while (0);
  $53 = $p$addr$3 | $and610$pre$phiZ2D;
  $lor$ext = ($53 | 0) != 0 & 1;
  $cmp614 = ($t$addr$1 | 32 | 0) == 102;
  if ($cmp614) {
   $estr$2 = 0;
   $sub$ptr$sub650$pn = ($e$5$ph | 0) > 0 ? $e$5$ph : 0;
  } else {
   $cond629 = ($e$5$ph | 0) < 0 ? $sub626$le : $e$5$ph;
   $57 = _fmt_u($cond629, (($cond629 | 0) < 0) << 31 >> 31, $arrayidx) | 0;
   $sub$ptr$lhs$cast633 = $arrayidx;
   if (($sub$ptr$lhs$cast633 - $57 | 0) < 2) {
    $estr$1434 = $57;
    while (1) {
     $incdec$ptr639 = $estr$1434 + -1 | 0;
     HEAP8[$incdec$ptr639 >> 0] = 48;
     if (($sub$ptr$lhs$cast633 - $incdec$ptr639 | 0) < 2) $estr$1434 = $incdec$ptr639; else {
      $estr$1$lcssa = $incdec$ptr639;
      break;
     }
    }
   } else $estr$1$lcssa = $57;
   HEAP8[$estr$1$lcssa + -1 >> 0] = ($e$5$ph >> 31 & 2) + 43;
   $incdec$ptr647 = $estr$1$lcssa + -2 | 0;
   HEAP8[$incdec$ptr647 >> 0] = $t$addr$1;
   $estr$2 = $incdec$ptr647;
   $sub$ptr$sub650$pn = $sub$ptr$lhs$cast633 - $incdec$ptr647 | 0;
  }
  $add653 = $pl$0 + 1 + $p$addr$3 + $lor$ext + $sub$ptr$sub650$pn | 0;
  _pad_684($f, 32, $w, $add653, $fl);
  _out($f, $prefix$0, $pl$0);
  _pad_684($f, 48, $w, $add653, $fl ^ 65536);
  if ($cmp614) {
   $r$0$a$9 = $a$9$ph >>> 0 > $arraydecay208$add$ptr213 >>> 0 ? $arraydecay208$add$ptr213 : $a$9$ph;
   $add$ptr671 = $buf + 9 | 0;
   $sub$ptr$lhs$cast694 = $add$ptr671;
   $incdec$ptr689 = $buf + 8 | 0;
   $d$5422 = $r$0$a$9;
   do {
    $62 = _fmt_u(HEAP32[$d$5422 >> 2] | 0, 0, $add$ptr671) | 0;
    if (($d$5422 | 0) == ($r$0$a$9 | 0)) if (($62 | 0) == ($add$ptr671 | 0)) {
     HEAP8[$incdec$ptr689 >> 0] = 48;
     $s668$1 = $incdec$ptr689;
    } else $s668$1 = $62; else if ($62 >>> 0 > $buf >>> 0) {
     _memset($buf | 0, 48, $62 - $sub$ptr$rhs$cast | 0) | 0;
     $s668$0420 = $62;
     while (1) {
      $incdec$ptr681 = $s668$0420 + -1 | 0;
      if ($incdec$ptr681 >>> 0 > $buf >>> 0) $s668$0420 = $incdec$ptr681; else {
       $s668$1 = $incdec$ptr681;
       break;
      }
     }
    } else $s668$1 = $62;
    _out($f, $s668$1, $sub$ptr$lhs$cast694 - $s668$1 | 0);
    $d$5422 = $d$5422 + 4 | 0;
   } while ($d$5422 >>> 0 <= $arraydecay208$add$ptr213 >>> 0);
   if ($53 | 0) _out($f, 15176, 1);
   if ($d$5422 >>> 0 < $z$7 >>> 0 & ($p$addr$3 | 0) > 0) {
    $d$6416 = $d$5422;
    $p$addr$4417 = $p$addr$3;
    while (1) {
     $68 = _fmt_u(HEAP32[$d$6416 >> 2] | 0, 0, $add$ptr671) | 0;
     if ($68 >>> 0 > $buf >>> 0) {
      _memset($buf | 0, 48, $68 - $sub$ptr$rhs$cast | 0) | 0;
      $s715$0412 = $68;
      while (1) {
       $incdec$ptr725 = $s715$0412 + -1 | 0;
       if ($incdec$ptr725 >>> 0 > $buf >>> 0) $s715$0412 = $incdec$ptr725; else {
        $s715$0$lcssa = $incdec$ptr725;
        break;
       }
      }
     } else $s715$0$lcssa = $68;
     _out($f, $s715$0$lcssa, ($p$addr$4417 | 0) < 9 ? $p$addr$4417 : 9);
     $d$6416 = $d$6416 + 4 | 0;
     $sub735 = $p$addr$4417 + -9 | 0;
     if (!($d$6416 >>> 0 < $z$7 >>> 0 & ($p$addr$4417 | 0) > 9)) {
      $p$addr$4$lcssa = $sub735;
      break;
     } else $p$addr$4417 = $sub735;
    }
   } else $p$addr$4$lcssa = $p$addr$3;
   _pad_684($f, 48, $p$addr$4$lcssa + 9 | 0, 9, 0);
  } else {
   $z$7$add$ptr742 = $cmp450$lcssa ? $z$7 : $a$9$ph + 4 | 0;
   if (($p$addr$3 | 0) > -1) {
    $add$ptr756 = $buf + 9 | 0;
    $tobool781 = ($and610$pre$phiZ2D | 0) == 0;
    $sub$ptr$lhs$cast787 = $add$ptr756;
    $73 = 0 - $sub$ptr$rhs$cast | 0;
    $incdec$ptr763 = $buf + 8 | 0;
    $d$7428 = $a$9$ph;
    $p$addr$5429 = $p$addr$3;
    while (1) {
     $75 = _fmt_u(HEAP32[$d$7428 >> 2] | 0, 0, $add$ptr756) | 0;
     if (($75 | 0) == ($add$ptr756 | 0)) {
      HEAP8[$incdec$ptr763 >> 0] = 48;
      $s753$0 = $incdec$ptr763;
     } else $s753$0 = $75;
     do if (($d$7428 | 0) == ($a$9$ph | 0)) {
      $incdec$ptr776 = $s753$0 + 1 | 0;
      _out($f, $s753$0, 1);
      if ($tobool781 & ($p$addr$5429 | 0) < 1) {
       $s753$2 = $incdec$ptr776;
       break;
      }
      _out($f, 15176, 1);
      $s753$2 = $incdec$ptr776;
     } else {
      if ($s753$0 >>> 0 <= $buf >>> 0) {
       $s753$2 = $s753$0;
       break;
      }
      _memset($buf | 0, 48, $s753$0 + $73 | 0) | 0;
      $s753$1424 = $s753$0;
      while (1) {
       $incdec$ptr773 = $s753$1424 + -1 | 0;
       if ($incdec$ptr773 >>> 0 > $buf >>> 0) $s753$1424 = $incdec$ptr773; else {
        $s753$2 = $incdec$ptr773;
        break;
       }
      }
     } while (0);
     $sub$ptr$sub789 = $sub$ptr$lhs$cast787 - $s753$2 | 0;
     _out($f, $s753$2, ($p$addr$5429 | 0) > ($sub$ptr$sub789 | 0) ? $sub$ptr$sub789 : $p$addr$5429);
     $sub806 = $p$addr$5429 - $sub$ptr$sub789 | 0;
     $d$7428 = $d$7428 + 4 | 0;
     if (!($d$7428 >>> 0 < $z$7$add$ptr742 >>> 0 & ($sub806 | 0) > -1)) {
      $p$addr$5$lcssa = $sub806;
      break;
     } else $p$addr$5429 = $sub806;
    }
   } else $p$addr$5$lcssa = $p$addr$3;
   _pad_684($f, 48, $p$addr$5$lcssa + 18 | 0, 18, 0);
   _out($f, $estr$2, $arrayidx - $estr$2 | 0);
  }
  _pad_684($f, 32, $w, $add653, $fl ^ 8192);
  $add653$sink406 = $add653;
 } else {
  $tobool37 = ($t & 32 | 0) != 0;
  $add = $pl$0 + 3 | 0;
  _pad_684($f, 32, $w, $add, $fl & -65537);
  _out($f, $prefix$0, $pl$0);
  _out($f, $y$addr$0 != $y$addr$0 | 0.0 != 0.0 ? ($tobool37 ? 14222 : 12301) : $tobool37 ? 12293 : 12297, 3);
  _pad_684($f, 32, $w, $add, $fl ^ 8192);
  $add653$sink406 = $add;
 } while (0);
 STACKTOP = sp;
 return (($add653$sink406 | 0) < ($w | 0) ? $w : $add653$sink406) | 0;
}

function __ZN10__cxxabiv112_GLOBAL__N_118parse_builtin_typeINS0_2DbEEEPKcS4_S4_RT_($first, $last, $db) {
 $first = $first | 0;
 $last = $last | 0;
 $db = $db | 0;
 var $1 = 0, $10 = 0, $13 = 0, $16 = 0, $19 = 0, $22 = 0, $25 = 0, $28 = 0, $31 = 0, $34 = 0, $37 = 0, $4 = 0, $40 = 0, $43 = 0, $46 = 0, $49 = 0, $52 = 0, $55 = 0, $58 = 0, $61 = 0, $65 = 0, $68 = 0, $7 = 0, $71 = 0, $74 = 0, $77 = 0, $80 = 0, $83 = 0, $86 = 0, $__end_$i = 0, $__end_$i101 = 0, $__end_$i109 = 0, $__end_$i117 = 0, $__end_$i125 = 0, $__end_$i133 = 0, $__end_$i141 = 0, $__end_$i149 = 0, $__end_$i157 = 0, $__end_$i165 = 0, $__end_$i173 = 0, $__end_$i181 = 0, $__end_$i189 = 0, $__end_$i197 = 0, $__end_$i205 = 0, $__end_$i213 = 0, $__end_$i221 = 0, $__end_$i229 = 0, $__end_$i237 = 0, $__end_$i245 = 0, $__end_$i253 = 0, $__end_$i261 = 0, $__end_$i269 = 0, $__end_$i277 = 0, $__end_$i285 = 0, $__end_$i69 = 0, $__end_$i77 = 0, $__end_$i85 = 0, $__end_$i93 = 0, $add$ptr135 = 0, $call = 0, $first$addr$1 = 0, $incdec$ptr = 0, $ref$tmp = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 $ref$tmp = sp;
 L1 : do if (($first | 0) == ($last | 0)) $first$addr$1 = $first; else {
  $incdec$ptr = $first + 1 | 0;
  do switch (HEAP8[$first >> 0] | 0) {
  case 118:
   {
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj5EEERAT__Kc($ref$tmp, 16324);
    $__end_$i = $db + 4 | 0;
    $1 = HEAP32[$__end_$i >> 2] | 0;
    if ($1 >>> 0 < (HEAP32[$db + 8 >> 2] | 0) >>> 0) {
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($1, $ref$tmp);
     HEAP32[$__end_$i >> 2] = (HEAP32[$__end_$i >> 2] | 0) + 24;
    } else __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIS3_EEvOT_($db, $ref$tmp);
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($ref$tmp);
    $first$addr$1 = $incdec$ptr;
    break L1;
    break;
   }
  case 119:
   {
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj8EEERAT__Kc($ref$tmp);
    $__end_$i69 = $db + 4 | 0;
    $4 = HEAP32[$__end_$i69 >> 2] | 0;
    if ($4 >>> 0 < (HEAP32[$db + 8 >> 2] | 0) >>> 0) {
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($4, $ref$tmp);
     HEAP32[$__end_$i69 >> 2] = (HEAP32[$__end_$i69 >> 2] | 0) + 24;
    } else __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIS3_EEvOT_($db, $ref$tmp);
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($ref$tmp);
    $first$addr$1 = $incdec$ptr;
    break L1;
    break;
   }
  case 98:
   {
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj5EEERAT__Kc($ref$tmp, 16329);
    $__end_$i77 = $db + 4 | 0;
    $7 = HEAP32[$__end_$i77 >> 2] | 0;
    if ($7 >>> 0 < (HEAP32[$db + 8 >> 2] | 0) >>> 0) {
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($7, $ref$tmp);
     HEAP32[$__end_$i77 >> 2] = (HEAP32[$__end_$i77 >> 2] | 0) + 24;
    } else __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIS3_EEvOT_($db, $ref$tmp);
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($ref$tmp);
    $first$addr$1 = $incdec$ptr;
    break L1;
    break;
   }
  case 99:
   {
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj5EEERAT__Kc($ref$tmp, 16098);
    $__end_$i85 = $db + 4 | 0;
    $10 = HEAP32[$__end_$i85 >> 2] | 0;
    if ($10 >>> 0 < (HEAP32[$db + 8 >> 2] | 0) >>> 0) {
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($10, $ref$tmp);
     HEAP32[$__end_$i85 >> 2] = (HEAP32[$__end_$i85 >> 2] | 0) + 24;
    } else __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIS3_EEvOT_($db, $ref$tmp);
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($ref$tmp);
    $first$addr$1 = $incdec$ptr;
    break L1;
    break;
   }
  case 97:
   {
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj12EEERAT__Kc($ref$tmp, 16103);
    $__end_$i93 = $db + 4 | 0;
    $13 = HEAP32[$__end_$i93 >> 2] | 0;
    if ($13 >>> 0 < (HEAP32[$db + 8 >> 2] | 0) >>> 0) {
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($13, $ref$tmp);
     HEAP32[$__end_$i93 >> 2] = (HEAP32[$__end_$i93 >> 2] | 0) + 24;
    } else __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIS3_EEvOT_($db, $ref$tmp);
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($ref$tmp);
    $first$addr$1 = $incdec$ptr;
    break L1;
    break;
   }
  case 104:
   {
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj14EEERAT__Kc($ref$tmp, 16115);
    $__end_$i101 = $db + 4 | 0;
    $16 = HEAP32[$__end_$i101 >> 2] | 0;
    if ($16 >>> 0 < (HEAP32[$db + 8 >> 2] | 0) >>> 0) {
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($16, $ref$tmp);
     HEAP32[$__end_$i101 >> 2] = (HEAP32[$__end_$i101 >> 2] | 0) + 24;
    } else __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIS3_EEvOT_($db, $ref$tmp);
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($ref$tmp);
    $first$addr$1 = $incdec$ptr;
    break L1;
    break;
   }
  case 115:
   {
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj6EEERAT__Kc($ref$tmp, 16129);
    $__end_$i109 = $db + 4 | 0;
    $19 = HEAP32[$__end_$i109 >> 2] | 0;
    if ($19 >>> 0 < (HEAP32[$db + 8 >> 2] | 0) >>> 0) {
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($19, $ref$tmp);
     HEAP32[$__end_$i109 >> 2] = (HEAP32[$__end_$i109 >> 2] | 0) + 24;
    } else __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIS3_EEvOT_($db, $ref$tmp);
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($ref$tmp);
    $first$addr$1 = $incdec$ptr;
    break L1;
    break;
   }
  case 116:
   {
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj15EEERAT__Kc($ref$tmp, 16135);
    $__end_$i117 = $db + 4 | 0;
    $22 = HEAP32[$__end_$i117 >> 2] | 0;
    if ($22 >>> 0 < (HEAP32[$db + 8 >> 2] | 0) >>> 0) {
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($22, $ref$tmp);
     HEAP32[$__end_$i117 >> 2] = (HEAP32[$__end_$i117 >> 2] | 0) + 24;
    } else __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIS3_EEvOT_($db, $ref$tmp);
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($ref$tmp);
    $first$addr$1 = $incdec$ptr;
    break L1;
    break;
   }
  case 105:
   {
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj4EEERAT__Kc($ref$tmp, 16334);
    $__end_$i125 = $db + 4 | 0;
    $25 = HEAP32[$__end_$i125 >> 2] | 0;
    if ($25 >>> 0 < (HEAP32[$db + 8 >> 2] | 0) >>> 0) {
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($25, $ref$tmp);
     HEAP32[$__end_$i125 >> 2] = (HEAP32[$__end_$i125 >> 2] | 0) + 24;
    } else __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIS3_EEvOT_($db, $ref$tmp);
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($ref$tmp);
    $first$addr$1 = $incdec$ptr;
    break L1;
    break;
   }
  case 106:
   {
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj13EEERAT__Kc($ref$tmp, 16338);
    $__end_$i133 = $db + 4 | 0;
    $28 = HEAP32[$__end_$i133 >> 2] | 0;
    if ($28 >>> 0 < (HEAP32[$db + 8 >> 2] | 0) >>> 0) {
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($28, $ref$tmp);
     HEAP32[$__end_$i133 >> 2] = (HEAP32[$__end_$i133 >> 2] | 0) + 24;
    } else __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIS3_EEvOT_($db, $ref$tmp);
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($ref$tmp);
    $first$addr$1 = $incdec$ptr;
    break L1;
    break;
   }
  case 108:
   {
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj5EEERAT__Kc($ref$tmp, 16351);
    $__end_$i141 = $db + 4 | 0;
    $31 = HEAP32[$__end_$i141 >> 2] | 0;
    if ($31 >>> 0 < (HEAP32[$db + 8 >> 2] | 0) >>> 0) {
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($31, $ref$tmp);
     HEAP32[$__end_$i141 >> 2] = (HEAP32[$__end_$i141 >> 2] | 0) + 24;
    } else __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIS3_EEvOT_($db, $ref$tmp);
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($ref$tmp);
    $first$addr$1 = $incdec$ptr;
    break L1;
    break;
   }
  case 109:
   {
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj14EEERAT__Kc($ref$tmp, 16356);
    $__end_$i149 = $db + 4 | 0;
    $34 = HEAP32[$__end_$i149 >> 2] | 0;
    if ($34 >>> 0 < (HEAP32[$db + 8 >> 2] | 0) >>> 0) {
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($34, $ref$tmp);
     HEAP32[$__end_$i149 >> 2] = (HEAP32[$__end_$i149 >> 2] | 0) + 24;
    } else __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIS3_EEvOT_($db, $ref$tmp);
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($ref$tmp);
    $first$addr$1 = $incdec$ptr;
    break L1;
    break;
   }
  case 120:
   {
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj10EEERAT__Kc($ref$tmp, 16370);
    $__end_$i157 = $db + 4 | 0;
    $37 = HEAP32[$__end_$i157 >> 2] | 0;
    if ($37 >>> 0 < (HEAP32[$db + 8 >> 2] | 0) >>> 0) {
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($37, $ref$tmp);
     HEAP32[$__end_$i157 >> 2] = (HEAP32[$__end_$i157 >> 2] | 0) + 24;
    } else __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIS3_EEvOT_($db, $ref$tmp);
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($ref$tmp);
    $first$addr$1 = $incdec$ptr;
    break L1;
    break;
   }
  case 121:
   {
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj19EEERAT__Kc($ref$tmp);
    $__end_$i165 = $db + 4 | 0;
    $40 = HEAP32[$__end_$i165 >> 2] | 0;
    if ($40 >>> 0 < (HEAP32[$db + 8 >> 2] | 0) >>> 0) {
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($40, $ref$tmp);
     HEAP32[$__end_$i165 >> 2] = (HEAP32[$__end_$i165 >> 2] | 0) + 24;
    } else __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIS3_EEvOT_($db, $ref$tmp);
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($ref$tmp);
    $first$addr$1 = $incdec$ptr;
    break L1;
    break;
   }
  case 110:
   {
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj9EEERAT__Kc($ref$tmp, 16164);
    $__end_$i173 = $db + 4 | 0;
    $43 = HEAP32[$__end_$i173 >> 2] | 0;
    if ($43 >>> 0 < (HEAP32[$db + 8 >> 2] | 0) >>> 0) {
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($43, $ref$tmp);
     HEAP32[$__end_$i173 >> 2] = (HEAP32[$__end_$i173 >> 2] | 0) + 24;
    } else __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIS3_EEvOT_($db, $ref$tmp);
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($ref$tmp);
    $first$addr$1 = $incdec$ptr;
    break L1;
    break;
   }
  case 111:
   {
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj18EEERAT__Kc($ref$tmp, 16173);
    $__end_$i181 = $db + 4 | 0;
    $46 = HEAP32[$__end_$i181 >> 2] | 0;
    if ($46 >>> 0 < (HEAP32[$db + 8 >> 2] | 0) >>> 0) {
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($46, $ref$tmp);
     HEAP32[$__end_$i181 >> 2] = (HEAP32[$__end_$i181 >> 2] | 0) + 24;
    } else __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIS3_EEvOT_($db, $ref$tmp);
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($ref$tmp);
    $first$addr$1 = $incdec$ptr;
    break L1;
    break;
   }
  case 102:
   {
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj6EEERAT__Kc($ref$tmp, 16380);
    $__end_$i189 = $db + 4 | 0;
    $49 = HEAP32[$__end_$i189 >> 2] | 0;
    if ($49 >>> 0 < (HEAP32[$db + 8 >> 2] | 0) >>> 0) {
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($49, $ref$tmp);
     HEAP32[$__end_$i189 >> 2] = (HEAP32[$__end_$i189 >> 2] | 0) + 24;
    } else __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIS3_EEvOT_($db, $ref$tmp);
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($ref$tmp);
    $first$addr$1 = $incdec$ptr;
    break L1;
    break;
   }
  case 100:
   {
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj7EEERAT__Kc($ref$tmp);
    $__end_$i197 = $db + 4 | 0;
    $52 = HEAP32[$__end_$i197 >> 2] | 0;
    if ($52 >>> 0 < (HEAP32[$db + 8 >> 2] | 0) >>> 0) {
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($52, $ref$tmp);
     HEAP32[$__end_$i197 >> 2] = (HEAP32[$__end_$i197 >> 2] | 0) + 24;
    } else __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIS3_EEvOT_($db, $ref$tmp);
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($ref$tmp);
    $first$addr$1 = $incdec$ptr;
    break L1;
    break;
   }
  case 101:
   {
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj12EEERAT__Kc($ref$tmp, 16386);
    $__end_$i205 = $db + 4 | 0;
    $55 = HEAP32[$__end_$i205 >> 2] | 0;
    if ($55 >>> 0 < (HEAP32[$db + 8 >> 2] | 0) >>> 0) {
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($55, $ref$tmp);
     HEAP32[$__end_$i205 >> 2] = (HEAP32[$__end_$i205 >> 2] | 0) + 24;
    } else __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIS3_EEvOT_($db, $ref$tmp);
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($ref$tmp);
    $first$addr$1 = $incdec$ptr;
    break L1;
    break;
   }
  case 103:
   {
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj11EEERAT__Kc($ref$tmp, 16398);
    $__end_$i213 = $db + 4 | 0;
    $58 = HEAP32[$__end_$i213 >> 2] | 0;
    if ($58 >>> 0 < (HEAP32[$db + 8 >> 2] | 0) >>> 0) {
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($58, $ref$tmp);
     HEAP32[$__end_$i213 >> 2] = (HEAP32[$__end_$i213 >> 2] | 0) + 24;
    } else __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIS3_EEvOT_($db, $ref$tmp);
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($ref$tmp);
    $first$addr$1 = $incdec$ptr;
    break L1;
    break;
   }
  case 122:
   {
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj4EEERAT__Kc($ref$tmp, 16409);
    $__end_$i221 = $db + 4 | 0;
    $61 = HEAP32[$__end_$i221 >> 2] | 0;
    if ($61 >>> 0 < (HEAP32[$db + 8 >> 2] | 0) >>> 0) {
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($61, $ref$tmp);
     HEAP32[$__end_$i221 >> 2] = (HEAP32[$__end_$i221 >> 2] | 0) + 24;
    } else __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIS3_EEvOT_($db, $ref$tmp);
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($ref$tmp);
    $first$addr$1 = $incdec$ptr;
    break L1;
    break;
   }
  case 117:
   {
    $call = __ZN10__cxxabiv112_GLOBAL__N_117parse_source_nameINS0_2DbEEEPKcS4_S4_RT_($incdec$ptr, $last, $db) | 0;
    $first$addr$1 = ($call | 0) == ($incdec$ptr | 0) ? $first : $call;
    break L1;
    break;
   }
  case 68:
   {
    if (($incdec$ptr | 0) == ($last | 0)) {
     $first$addr$1 = $first;
     break L1;
    }
    $add$ptr135 = $first + 2 | 0;
    switch (HEAP8[$incdec$ptr >> 0] | 0) {
    case 100:
     {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj10EEERAT__Kc($ref$tmp, 16413);
      $__end_$i229 = $db + 4 | 0;
      $65 = HEAP32[$__end_$i229 >> 2] | 0;
      if ($65 >>> 0 < (HEAP32[$db + 8 >> 2] | 0) >>> 0) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($65, $ref$tmp);
       HEAP32[$__end_$i229 >> 2] = (HEAP32[$__end_$i229 >> 2] | 0) + 24;
      } else __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIS3_EEvOT_($db, $ref$tmp);
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($ref$tmp);
      $first$addr$1 = $add$ptr135;
      break L1;
      break;
     }
    case 101:
     {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj11EEERAT__Kc($ref$tmp, 16423);
      $__end_$i237 = $db + 4 | 0;
      $68 = HEAP32[$__end_$i237 >> 2] | 0;
      if ($68 >>> 0 < (HEAP32[$db + 8 >> 2] | 0) >>> 0) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($68, $ref$tmp);
       HEAP32[$__end_$i237 >> 2] = (HEAP32[$__end_$i237 >> 2] | 0) + 24;
      } else __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIS3_EEvOT_($db, $ref$tmp);
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($ref$tmp);
      $first$addr$1 = $add$ptr135;
      break L1;
      break;
     }
    case 102:
     {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj10EEERAT__Kc($ref$tmp, 16434);
      $__end_$i245 = $db + 4 | 0;
      $71 = HEAP32[$__end_$i245 >> 2] | 0;
      if ($71 >>> 0 < (HEAP32[$db + 8 >> 2] | 0) >>> 0) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($71, $ref$tmp);
       HEAP32[$__end_$i245 >> 2] = (HEAP32[$__end_$i245 >> 2] | 0) + 24;
      } else __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIS3_EEvOT_($db, $ref$tmp);
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($ref$tmp);
      $first$addr$1 = $add$ptr135;
      break L1;
      break;
     }
    case 104:
     {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj10EEERAT__Kc($ref$tmp, 16444);
      $__end_$i253 = $db + 4 | 0;
      $74 = HEAP32[$__end_$i253 >> 2] | 0;
      if ($74 >>> 0 < (HEAP32[$db + 8 >> 2] | 0) >>> 0) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($74, $ref$tmp);
       HEAP32[$__end_$i253 >> 2] = (HEAP32[$__end_$i253 >> 2] | 0) + 24;
      } else __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIS3_EEvOT_($db, $ref$tmp);
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($ref$tmp);
      $first$addr$1 = $add$ptr135;
      break L1;
      break;
     }
    case 105:
     {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj9EEERAT__Kc($ref$tmp, 16454);
      $__end_$i261 = $db + 4 | 0;
      $77 = HEAP32[$__end_$i261 >> 2] | 0;
      if ($77 >>> 0 < (HEAP32[$db + 8 >> 2] | 0) >>> 0) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($77, $ref$tmp);
       HEAP32[$__end_$i261 >> 2] = (HEAP32[$__end_$i261 >> 2] | 0) + 24;
      } else __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIS3_EEvOT_($db, $ref$tmp);
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($ref$tmp);
      $first$addr$1 = $add$ptr135;
      break L1;
      break;
     }
    case 115:
     {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj9EEERAT__Kc($ref$tmp, 16463);
      $__end_$i269 = $db + 4 | 0;
      $80 = HEAP32[$__end_$i269 >> 2] | 0;
      if ($80 >>> 0 < (HEAP32[$db + 8 >> 2] | 0) >>> 0) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($80, $ref$tmp);
       HEAP32[$__end_$i269 >> 2] = (HEAP32[$__end_$i269 >> 2] | 0) + 24;
      } else __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIS3_EEvOT_($db, $ref$tmp);
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($ref$tmp);
      $first$addr$1 = $add$ptr135;
      break L1;
      break;
     }
    case 97:
     {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj5EEERAT__Kc($ref$tmp, 16472);
      $__end_$i277 = $db + 4 | 0;
      $83 = HEAP32[$__end_$i277 >> 2] | 0;
      if ($83 >>> 0 < (HEAP32[$db + 8 >> 2] | 0) >>> 0) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($83, $ref$tmp);
       HEAP32[$__end_$i277 >> 2] = (HEAP32[$__end_$i277 >> 2] | 0) + 24;
      } else __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIS3_EEvOT_($db, $ref$tmp);
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($ref$tmp);
      $first$addr$1 = $add$ptr135;
      break L1;
      break;
     }
    case 110:
     {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj15EEERAT__Kc($ref$tmp, 16477);
      $__end_$i285 = $db + 4 | 0;
      $86 = HEAP32[$__end_$i285 >> 2] | 0;
      if ($86 >>> 0 < (HEAP32[$db + 8 >> 2] | 0) >>> 0) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($86, $ref$tmp);
       HEAP32[$__end_$i285 >> 2] = (HEAP32[$__end_$i285 >> 2] | 0) + 24;
      } else __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIS3_EEvOT_($db, $ref$tmp);
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($ref$tmp);
      $first$addr$1 = $add$ptr135;
      break L1;
      break;
     }
    default:
     {
      $first$addr$1 = $first;
      break L1;
     }
    }
    break;
   }
  default:
   {
    $first$addr$1 = $first;
    break L1;
   }
  } while (0);
 } while (0);
 STACKTOP = sp;
 return $first$addr$1 | 0;
}

function _decfloat($f, $c, $bits, $emin, $sign, $pok) {
 $f = $f | 0;
 $c = $c | 0;
 $bits = $bits | 0;
 $emin = $emin | 0;
 $sign = $sign | 0;
 $pok = $pok | 0;
 var $$264 = 0, $$pre = 0, $0 = 0, $10 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $20 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $37 = 0, $38 = 0, $39 = 0, $43 = 0, $45 = 0, $46 = 0, $48 = 0, $49 = 0, $57 = 0, $6 = 0, $64 = 0, $7 = 0, $70 = 0, $73 = 0, $74 = 0, $77 = 0, $79 = 0, $8 = 0, $80 = 0, $86 = 0, $88 = 0, $9 = 0, $92 = 0, $93 = 0, $94 = 0, $98 = 0, $a$0$lcssa380 = 0, $a$0329 = 0, $a$2$ph288 = 0, $a$4 = 0, $a$4$ph = 0, $a$4$ph386 = 0, $a$5322 = 0, $add265 = 0, $add309$sink$off0 = 0, $add404 = 0, $add417 = 0, $add483 = 0, $and349 = 0, $and354 = 0, $and372 = 0, $and439 = 0, $and463 = 0, $and468 = 0, $and509 = 0, $arrayidx186 = 0, $arrayidx261 = 0, $arrayidx294 = 0, $arrayidx306 = 0, $arrayidx358 = 0, $arrayidx411 = 0, $arrayidx449 = 0, $arrayidx77 = 0, $bias$0 = 0.0, $bits$addr$0 = 0, $c$addr$0 = 0, $c$addr$1$be = 0, $c$addr$1$ph = 0, $c$addr$2 = 0, $c$addr$3$be = 0, $c$addr$3$lcssa = 0, $c$addr$3348 = 0, $call135 = 0, $call165 = 0, $call175 = 0, $call501 = 0.0, $call504 = 0.0, $call600 = 0, $carry$0331 = 0, $carry299$0 = 0, $carry299$1 = 0, $carry365$0324 = 0, $cmp289 = 0, $cmp292 = 0, $cmp327 = 0, $cmp396 = 0, $cmp40340 = 0, $cmp40350 = 0, $cmp485 = 0, $cmp51 = 0, $cmp578 = 0, $cmp67 = 0, $cond254 = 0, $conv481 = 0.0, $div = 0, $div267 = 0, $e2$0 = 0, $e2$0$ph = 0, $e2$1 = 0, $e2$1$ph = 0, $e2$1$ph385 = 0, $e2$3 = 0, $e2$4 = 0, $frac$0 = 0.0, $frac$1 = 0.0, $frac$3 = 0.0, $gotdig$0 = 0, $gotdig$2 = 0, $gotdig$3$lcssa = 0, $gotdig$3344 = 0, $gotdig$4 = 0, $gotrad$0 = 0, $gotrad$1$lcssa = 0, $gotrad$1345 = 0, $gotrad$2 = 0, $i$0319 = 0, $i$1 = 0, $i$4318 = 0, $inc391 = 0, $inc66 = 0, $j$0$lcssa = 0, $j$0296 = 0, $j$0297 = 0, $j$0298 = 0, $j$0347 = 0, $j$2 = 0, $j$3336 = 0, $k$0$lcssa = 0, $k$0300 = 0, $k$0301 = 0, $k$0302 = 0, $k$0346 = 0, $k$2 = 0, $k$3 = 0, $k$4330 = 0, $k$5 = 0, $k$5$in = 0, $k$6323 = 0, $lnz$0$lcssa = 0, $lnz$0306 = 0, $lnz$0307 = 0, $lnz$0308 = 0, $lnz$0343 = 0, $lnz$2 = 0, $mul187337 = 0, $mul482 = 0.0, $or$cond261 = 0, $or$cond265 = 0, $rem = 0, $retval$1 = 0.0, $rp$0$lcssa379 = 0, $rp$0328 = 0, $rp$2$ph286 = 0, $rp$4$ph = 0, $rp$4$ph285 = 0, $rp$5321 = 0, $rpos = 0, $shend = 0, $shr419 = 0, $sub1 = 0, $sub170 = 0, $sub225 = 0, $sub37338 = 0, $sub37349 = 0, $sub413 = 0, $sub484 = 0, $sub570 = 0.0, $sub63$sink = 0, $sum = 0, $tobool95 = 0, $tobool98 = 0, $tobool98272 = 0, $tobool98273275 = 0, $x = 0, $y$0317 = 0.0, $y$1 = 0.0, $y$2 = 0.0, $y$3 = 0.0, $z$0 = 0, $z$1 = 0, $z$1$ph287 = 0, $z$10 = 0, $z$2 = 0, $z$4 = 0, $z$6$ph = 0, $z$9316 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 512 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(512);
 $x = sp;
 $sum = $emin + $bits | 0;
 $sub1 = 0 - $sum | 0;
 $rpos = $f + 4 | 0;
 $shend = $f + 100 | 0;
 $c$addr$0 = $c;
 $gotdig$0 = 0;
 L1 : while (1) {
  switch ($c$addr$0 | 0) {
  case 46:
   {
    label = 6;
    break L1;
    break;
   }
  case 48:
   break;
  default:
   {
    $101 = 0;
    $102 = 0;
    $c$addr$2 = $c$addr$0;
    $gotdig$2 = $gotdig$0;
    $gotrad$0 = 0;
    break L1;
   }
  }
  $0 = HEAP32[$rpos >> 2] | 0;
  if ($0 >>> 0 < (HEAP32[$shend >> 2] | 0) >>> 0) {
   HEAP32[$rpos >> 2] = $0 + 1;
   $c$addr$0 = HEAPU8[$0 >> 0] | 0;
   $gotdig$0 = 1;
   continue;
  } else {
   $c$addr$0 = ___shgetc($f) | 0;
   $gotdig$0 = 1;
   continue;
  }
 }
 if ((label | 0) == 6) {
  $3 = HEAP32[$rpos >> 2] | 0;
  if ($3 >>> 0 < (HEAP32[$shend >> 2] | 0) >>> 0) {
   HEAP32[$rpos >> 2] = $3 + 1;
   $c$addr$1$ph = HEAPU8[$3 >> 0] | 0;
  } else $c$addr$1$ph = ___shgetc($f) | 0;
  if (($c$addr$1$ph | 0) == 48) {
   $6 = 0;
   $7 = 0;
   while (1) {
    $8 = _i64Add($6 | 0, $7 | 0, -1, -1) | 0;
    $9 = tempRet0;
    $10 = HEAP32[$rpos >> 2] | 0;
    if ($10 >>> 0 < (HEAP32[$shend >> 2] | 0) >>> 0) {
     HEAP32[$rpos >> 2] = $10 + 1;
     $c$addr$1$be = HEAPU8[$10 >> 0] | 0;
    } else $c$addr$1$be = ___shgetc($f) | 0;
    if (($c$addr$1$be | 0) == 48) {
     $6 = $8;
     $7 = $9;
    } else {
     $101 = $8;
     $102 = $9;
     $c$addr$2 = $c$addr$1$be;
     $gotdig$2 = 1;
     $gotrad$0 = 1;
     break;
    }
   }
  } else {
   $101 = 0;
   $102 = 0;
   $c$addr$2 = $c$addr$1$ph;
   $gotdig$2 = $gotdig$0;
   $gotrad$0 = 1;
  }
 }
 HEAP32[$x >> 2] = 0;
 $sub37338 = $c$addr$2 + -48 | 0;
 $cmp40340 = ($c$addr$2 | 0) == 46;
 L20 : do if ($cmp40340 | $sub37338 >>> 0 < 10) {
  $arrayidx77 = $x + 496 | 0;
  $103 = $101;
  $104 = $102;
  $14 = 0;
  $15 = 0;
  $c$addr$3348 = $c$addr$2;
  $cmp40350 = $cmp40340;
  $gotdig$3344 = $gotdig$2;
  $gotrad$1345 = $gotrad$0;
  $j$0347 = 0;
  $k$0346 = 0;
  $lnz$0343 = 0;
  $sub37349 = $sub37338;
  L22 : while (1) {
   do if ($cmp40350) if (!$gotrad$1345) {
    $105 = $14;
    $106 = $15;
    $107 = $14;
    $108 = $15;
    $gotdig$4 = $gotdig$3344;
    $gotrad$2 = 1;
    $j$2 = $j$0347;
    $k$2 = $k$0346;
    $lnz$2 = $lnz$0343;
   } else break L22; else {
    $16 = _i64Add($14 | 0, $15 | 0, 1, 0) | 0;
    $17 = tempRet0;
    $cmp51 = ($c$addr$3348 | 0) != 48;
    if (($k$0346 | 0) >= 125) {
     if (!$cmp51) {
      $105 = $103;
      $106 = $104;
      $107 = $16;
      $108 = $17;
      $gotdig$4 = $gotdig$3344;
      $gotrad$2 = $gotrad$1345;
      $j$2 = $j$0347;
      $k$2 = $k$0346;
      $lnz$2 = $lnz$0343;
      break;
     }
     HEAP32[$arrayidx77 >> 2] = HEAP32[$arrayidx77 >> 2] | 1;
     $105 = $103;
     $106 = $104;
     $107 = $16;
     $108 = $17;
     $gotdig$4 = $gotdig$3344;
     $gotrad$2 = $gotrad$1345;
     $j$2 = $j$0347;
     $k$2 = $k$0346;
     $lnz$2 = $lnz$0343;
     break;
    }
    $$pre = $x + ($k$0346 << 2) | 0;
    if (!$j$0347) $sub63$sink = $sub37349; else $sub63$sink = $c$addr$3348 + -48 + ((HEAP32[$$pre >> 2] | 0) * 10 | 0) | 0;
    HEAP32[$$pre >> 2] = $sub63$sink;
    $inc66 = $j$0347 + 1 | 0;
    $cmp67 = ($inc66 | 0) == 9;
    $105 = $103;
    $106 = $104;
    $107 = $16;
    $108 = $17;
    $gotdig$4 = 1;
    $gotrad$2 = $gotrad$1345;
    $j$2 = $cmp67 ? 0 : $inc66;
    $k$2 = ($cmp67 & 1) + $k$0346 | 0;
    $lnz$2 = $cmp51 ? $16 : $lnz$0343;
   } while (0);
   $20 = HEAP32[$rpos >> 2] | 0;
   if ($20 >>> 0 < (HEAP32[$shend >> 2] | 0) >>> 0) {
    HEAP32[$rpos >> 2] = $20 + 1;
    $c$addr$3$be = HEAPU8[$20 >> 0] | 0;
   } else $c$addr$3$be = ___shgetc($f) | 0;
   $sub37349 = $c$addr$3$be + -48 | 0;
   $cmp40350 = ($c$addr$3$be | 0) == 46;
   if (!($cmp40350 | $sub37349 >>> 0 < 10)) {
    $25 = $107;
    $26 = $105;
    $28 = $108;
    $29 = $106;
    $c$addr$3$lcssa = $c$addr$3$be;
    $gotdig$3$lcssa = $gotdig$4;
    $gotrad$1$lcssa = $gotrad$2;
    $j$0$lcssa = $j$2;
    $k$0$lcssa = $k$2;
    $lnz$0$lcssa = $lnz$2;
    label = 29;
    break L20;
   } else {
    $103 = $105;
    $104 = $106;
    $14 = $107;
    $15 = $108;
    $c$addr$3348 = $c$addr$3$be;
    $gotdig$3344 = $gotdig$4;
    $gotrad$1345 = $gotrad$2;
    $j$0347 = $j$2;
    $k$0346 = $k$2;
    $lnz$0343 = $lnz$2;
   }
  }
  $109 = $14;
  $110 = $15;
  $111 = $103;
  $112 = $104;
  $j$0298 = $j$0347;
  $k$0302 = $k$0346;
  $lnz$0308 = $lnz$0343;
  $tobool98273275 = ($gotdig$3344 | 0) != 0;
  label = 37;
 } else {
  $25 = 0;
  $26 = $101;
  $28 = 0;
  $29 = $102;
  $c$addr$3$lcssa = $c$addr$2;
  $gotdig$3$lcssa = $gotdig$2;
  $gotrad$1$lcssa = $gotrad$0;
  $j$0$lcssa = 0;
  $k$0$lcssa = 0;
  $lnz$0$lcssa = 0;
  label = 29;
 } while (0);
 do if ((label | 0) == 29) {
  $tobool95 = ($gotrad$1$lcssa | 0) == 0;
  $24 = $tobool95 ? $25 : $26;
  $27 = $tobool95 ? $28 : $29;
  $tobool98 = ($gotdig$3$lcssa | 0) != 0;
  if (!($tobool98 & ($c$addr$3$lcssa | 32 | 0) == 101)) if (($c$addr$3$lcssa | 0) > -1) {
   $109 = $25;
   $110 = $28;
   $111 = $24;
   $112 = $27;
   $j$0298 = $j$0$lcssa;
   $k$0302 = $k$0$lcssa;
   $lnz$0308 = $lnz$0$lcssa;
   $tobool98273275 = $tobool98;
   label = 37;
   break;
  } else {
   $113 = $25;
   $114 = $28;
   $115 = $24;
   $116 = $27;
   $j$0297 = $j$0$lcssa;
   $k$0301 = $k$0$lcssa;
   $lnz$0307 = $lnz$0$lcssa;
   $tobool98272 = $tobool98;
   label = 39;
   break;
  }
  $30 = _scanexp($f, $pok) | 0;
  $31 = tempRet0;
  if (($30 | 0) == 0 & ($31 | 0) == -2147483648) {
   if (!$pok) {
    ___shlim($f, 0);
    $retval$1 = 0.0;
    break;
   }
   if (!(HEAP32[$shend >> 2] | 0)) {
    $37 = 0;
    $38 = 0;
   } else {
    HEAP32[$rpos >> 2] = (HEAP32[$rpos >> 2] | 0) + -1;
    $37 = 0;
    $38 = 0;
   }
  } else {
   $37 = $30;
   $38 = $31;
  }
  $39 = _i64Add($37 | 0, $38 | 0, $24 | 0, $27 | 0) | 0;
  $45 = $39;
  $46 = $25;
  $48 = tempRet0;
  $49 = $28;
  $j$0296 = $j$0$lcssa;
  $k$0300 = $k$0$lcssa;
  $lnz$0306 = $lnz$0$lcssa;
  label = 41;
 } while (0);
 if ((label | 0) == 37) if (!(HEAP32[$shend >> 2] | 0)) {
  $113 = $109;
  $114 = $110;
  $115 = $111;
  $116 = $112;
  $j$0297 = $j$0298;
  $k$0301 = $k$0302;
  $lnz$0307 = $lnz$0308;
  $tobool98272 = $tobool98273275;
  label = 39;
 } else {
  HEAP32[$rpos >> 2] = (HEAP32[$rpos >> 2] | 0) + -1;
  if ($tobool98273275) {
   $45 = $111;
   $46 = $109;
   $48 = $112;
   $49 = $110;
   $j$0296 = $j$0298;
   $k$0300 = $k$0302;
   $lnz$0306 = $lnz$0308;
   label = 41;
  } else label = 40;
 }
 if ((label | 0) == 39) if ($tobool98272) {
  $45 = $115;
  $46 = $113;
  $48 = $116;
  $49 = $114;
  $j$0296 = $j$0297;
  $k$0300 = $k$0301;
  $lnz$0306 = $lnz$0307;
  label = 41;
 } else label = 40;
 do if ((label | 0) == 40) {
  $call135 = ___errno_location() | 0;
  HEAP32[$call135 >> 2] = 22;
  ___shlim($f, 0);
  $retval$1 = 0.0;
 } else if ((label | 0) == 41) {
  $43 = HEAP32[$x >> 2] | 0;
  if (!$43) {
   $retval$1 = +($sign | 0) * 0.0;
   break;
  }
  if ((($49 | 0) < 0 | ($49 | 0) == 0 & $46 >>> 0 < 10) & (($45 | 0) == ($46 | 0) & ($48 | 0) == ($49 | 0))) if (($bits | 0) > 30 | ($43 >>> $bits | 0) == 0) {
   $retval$1 = +($sign | 0) * +($43 >>> 0);
   break;
  }
  $div = ($emin | 0) / -2 | 0;
  $57 = (($div | 0) < 0) << 31 >> 31;
  if (($48 | 0) > ($57 | 0) | ($48 | 0) == ($57 | 0) & $45 >>> 0 > $div >>> 0) {
   $call165 = ___errno_location() | 0;
   HEAP32[$call165 >> 2] = 34;
   $retval$1 = +($sign | 0) * 1797693134862315708145274.0e284 * 1797693134862315708145274.0e284;
   break;
  }
  $sub170 = $emin + -106 | 0;
  $64 = (($sub170 | 0) < 0) << 31 >> 31;
  if (($48 | 0) < ($64 | 0) | ($48 | 0) == ($64 | 0) & $45 >>> 0 < $sub170 >>> 0) {
   $call175 = ___errno_location() | 0;
   HEAP32[$call175 >> 2] = 34;
   $retval$1 = +($sign | 0) * 2.2250738585072014e-308 * 2.2250738585072014e-308;
   break;
  }
  if (!$j$0296) $k$3 = $k$0300; else {
   if (($j$0296 | 0) < 9) {
    $arrayidx186 = $x + ($k$0300 << 2) | 0;
    $j$3336 = $j$0296;
    $mul187337 = HEAP32[$arrayidx186 >> 2] | 0;
    do {
     $mul187337 = $mul187337 * 10 | 0;
     $j$3336 = $j$3336 + 1 | 0;
    } while (($j$3336 | 0) != 9);
    HEAP32[$arrayidx186 >> 2] = $mul187337;
   }
   $k$3 = $k$0300 + 1 | 0;
  }
  if (($lnz$0306 | 0) < 9) if (($lnz$0306 | 0) <= ($45 | 0) & ($45 | 0) < 18) {
   $70 = HEAP32[$x >> 2] | 0;
   if (($45 | 0) == 9) {
    $retval$1 = +($sign | 0) * +($70 >>> 0);
    break;
   }
   if (($45 | 0) < 9) {
    $retval$1 = +($sign | 0) * +($70 >>> 0) / +(HEAP32[2636 + (8 - $45 << 2) >> 2] | 0);
    break;
   }
   $sub225 = $bits + 27 + (Math_imul($45, -3) | 0) | 0;
   if (($sub225 | 0) > 30 | ($70 >>> $sub225 | 0) == 0) {
    $retval$1 = +($sign | 0) * +($70 >>> 0) * +(HEAP32[2636 + ($45 + -10 << 2) >> 2] | 0);
    break;
   }
  }
  $rem = ($45 | 0) % 9 | 0;
  if (!$rem) {
   $a$2$ph288 = 0;
   $e2$0$ph = 0;
   $rp$2$ph286 = $45;
   $z$1$ph287 = $k$3;
  } else {
   $cond254 = ($45 | 0) > -1 ? $rem : $rem + 9 | 0;
   $73 = HEAP32[2636 + (8 - $cond254 << 2) >> 2] | 0;
   if (!$k$3) {
    $a$0$lcssa380 = 0;
    $rp$0$lcssa379 = $45;
    $z$0 = 0;
   } else {
    $div267 = 1e9 / ($73 | 0) | 0;
    $a$0329 = 0;
    $carry$0331 = 0;
    $k$4330 = 0;
    $rp$0328 = $45;
    do {
     $arrayidx261 = $x + ($k$4330 << 2) | 0;
     $74 = HEAP32[$arrayidx261 >> 2] | 0;
     $add265 = (($74 >>> 0) / ($73 >>> 0) | 0) + $carry$0331 | 0;
     HEAP32[$arrayidx261 >> 2] = $add265;
     $carry$0331 = Math_imul($div267, ($74 >>> 0) % ($73 >>> 0) | 0) | 0;
     $or$cond261 = ($k$4330 | 0) == ($a$0329 | 0) & ($add265 | 0) == 0;
     $rp$0328 = $or$cond261 ? $rp$0328 + -9 | 0 : $rp$0328;
     $a$0329 = $or$cond261 ? $a$0329 + 1 & 127 : $a$0329;
     $k$4330 = $k$4330 + 1 | 0;
    } while (($k$4330 | 0) != ($k$3 | 0));
    if (!$carry$0331) {
     $a$0$lcssa380 = $a$0329;
     $rp$0$lcssa379 = $rp$0328;
     $z$0 = $k$3;
    } else {
     HEAP32[$x + ($k$3 << 2) >> 2] = $carry$0331;
     $a$0$lcssa380 = $a$0329;
     $rp$0$lcssa379 = $rp$0328;
     $z$0 = $k$3 + 1 | 0;
    }
   }
   $a$2$ph288 = $a$0$lcssa380;
   $e2$0$ph = 0;
   $rp$2$ph286 = 9 - $cond254 + $rp$0$lcssa379 | 0;
   $z$1$ph287 = $z$0;
  }
  L101 : while (1) {
   $cmp289 = ($rp$2$ph286 | 0) < 18;
   $cmp292 = ($rp$2$ph286 | 0) == 18;
   $arrayidx294 = $x + ($a$2$ph288 << 2) | 0;
   $e2$0 = $e2$0$ph;
   $z$1 = $z$1$ph287;
   while (1) {
    if (!$cmp289) {
     if (!$cmp292) {
      $a$4$ph = $a$2$ph288;
      $e2$1$ph = $e2$0;
      $rp$4$ph285 = $rp$2$ph286;
      $z$6$ph = $z$1;
      break L101;
     }
     if ((HEAP32[$arrayidx294 >> 2] | 0) >>> 0 >= 9007199) {
      $a$4$ph = $a$2$ph288;
      $e2$1$ph = $e2$0;
      $rp$4$ph285 = 18;
      $z$6$ph = $z$1;
      break L101;
     }
    }
    $carry299$0 = 0;
    $k$5$in = $z$1 + 127 | 0;
    $z$2 = $z$1;
    while (1) {
     $k$5 = $k$5$in & 127;
     $arrayidx306 = $x + ($k$5 << 2) | 0;
     $77 = _bitshift64Shl(HEAP32[$arrayidx306 >> 2] | 0, 0, 29) | 0;
     $79 = _i64Add($77 | 0, tempRet0 | 0, $carry299$0 | 0, 0) | 0;
     $80 = tempRet0;
     if ($80 >>> 0 > 0 | ($80 | 0) == 0 & $79 >>> 0 > 1e9) {
      $86 = ___udivdi3($79 | 0, $80 | 0, 1e9, 0) | 0;
      $88 = ___uremdi3($79 | 0, $80 | 0, 1e9, 0) | 0;
      $add309$sink$off0 = $88;
      $carry299$1 = $86;
     } else {
      $add309$sink$off0 = $79;
      $carry299$1 = 0;
     }
     HEAP32[$arrayidx306 >> 2] = $add309$sink$off0;
     $cmp327 = ($k$5 | 0) == ($a$2$ph288 | 0);
     $z$2 = ($add309$sink$off0 | 0) == 0 & ((($k$5 | 0) != ($z$2 + 127 & 127 | 0) | $cmp327) ^ 1) ? $k$5 : $z$2;
     if ($cmp327) break; else {
      $carry299$0 = $carry299$1;
      $k$5$in = $k$5 + -1 | 0;
     }
    }
    $e2$0 = $e2$0 + -29 | 0;
    if ($carry299$1 | 0) break; else $z$1 = $z$2;
   }
   $and349 = $a$2$ph288 + 127 & 127;
   $and354 = $z$2 + 127 & 127;
   $arrayidx358 = $x + (($z$2 + 126 & 127) << 2) | 0;
   if (($and349 | 0) == ($z$2 | 0)) {
    HEAP32[$arrayidx358 >> 2] = HEAP32[$arrayidx358 >> 2] | HEAP32[$x + ($and354 << 2) >> 2];
    $z$4 = $and354;
   } else $z$4 = $z$2;
   HEAP32[$x + ($and349 << 2) >> 2] = $carry299$1;
   $a$2$ph288 = $and349;
   $e2$0$ph = $e2$0;
   $rp$2$ph286 = $rp$2$ph286 + 9 | 0;
   $z$1$ph287 = $z$4;
  }
  L119 : while (1) {
   $and439 = $z$6$ph + 1 & 127;
   $arrayidx449 = $x + (($z$6$ph + 127 & 127) << 2) | 0;
   $a$4$ph386 = $a$4$ph;
   $e2$1$ph385 = $e2$1$ph;
   $rp$4$ph = $rp$4$ph285;
   while (1) {
    $cmp396 = ($rp$4$ph | 0) == 18;
    $$264 = ($rp$4$ph | 0) > 27 ? 9 : 1;
    $a$4 = $a$4$ph386;
    $e2$1 = $e2$1$ph385;
    while (1) {
     $i$0319 = 0;
     while (1) {
      $and372 = $i$0319 + $a$4 & 127;
      if (($and372 | 0) == ($z$6$ph | 0)) {
       $i$1 = 2;
       label = 88;
       break;
      }
      $92 = HEAP32[$x + ($and372 << 2) >> 2] | 0;
      $93 = HEAP32[2668 + ($i$0319 << 2) >> 2] | 0;
      if ($92 >>> 0 < $93 >>> 0) {
       $i$1 = 2;
       label = 88;
       break;
      }
      if ($92 >>> 0 > $93 >>> 0) break;
      $inc391 = $i$0319 + 1 | 0;
      if (($inc391 | 0) < 2) $i$0319 = $inc391; else {
       $i$1 = $inc391;
       label = 88;
       break;
      }
     }
     if ((label | 0) == 88) {
      label = 0;
      if ($cmp396 & ($i$1 | 0) == 2) {
       $i$4318 = 0;
       $y$0317 = 0.0;
       $z$9316 = $z$6$ph;
       break L119;
      }
     }
     $add404 = $$264 + $e2$1 | 0;
     if (($a$4 | 0) == ($z$6$ph | 0)) {
      $a$4 = $z$6$ph;
      $e2$1 = $add404;
     } else break;
    }
    $sub413 = (1 << $$264) + -1 | 0;
    $shr419 = 1e9 >>> $$264;
    $a$5322 = $a$4;
    $carry365$0324 = 0;
    $k$6323 = $a$4;
    $rp$5321 = $rp$4$ph;
    do {
     $arrayidx411 = $x + ($k$6323 << 2) | 0;
     $94 = HEAP32[$arrayidx411 >> 2] | 0;
     $add417 = ($94 >>> $$264) + $carry365$0324 | 0;
     HEAP32[$arrayidx411 >> 2] = $add417;
     $carry365$0324 = Math_imul($94 & $sub413, $shr419) | 0;
     $or$cond265 = ($k$6323 | 0) == ($a$5322 | 0) & ($add417 | 0) == 0;
     $rp$5321 = $or$cond265 ? $rp$5321 + -9 | 0 : $rp$5321;
     $a$5322 = $or$cond265 ? $a$5322 + 1 & 127 : $a$5322;
     $k$6323 = $k$6323 + 1 & 127;
    } while (($k$6323 | 0) != ($z$6$ph | 0));
    if (!$carry365$0324) {
     $a$4$ph386 = $a$5322;
     $e2$1$ph385 = $add404;
     $rp$4$ph = $rp$5321;
     continue;
    }
    if (($and439 | 0) != ($a$5322 | 0)) break;
    HEAP32[$arrayidx449 >> 2] = HEAP32[$arrayidx449 >> 2] | 1;
    $a$4$ph386 = $a$5322;
    $e2$1$ph385 = $add404;
    $rp$4$ph = $rp$5321;
   }
   HEAP32[$x + ($z$6$ph << 2) >> 2] = $carry365$0324;
   $a$4$ph = $a$5322;
   $e2$1$ph = $add404;
   $rp$4$ph285 = $rp$5321;
   $z$6$ph = $and439;
  }
  while (1) {
   $and463 = $i$4318 + $a$4 & 127;
   $and468 = $z$9316 + 1 & 127;
   if (($and463 | 0) == ($z$9316 | 0)) {
    HEAP32[$x + ($and468 + -1 << 2) >> 2] = 0;
    $z$10 = $and468;
   } else $z$10 = $z$9316;
   $y$0317 = $y$0317 * 1.0e9 + +((HEAP32[$x + ($and463 << 2) >> 2] | 0) >>> 0);
   $i$4318 = $i$4318 + 1 | 0;
   if (($i$4318 | 0) == 2) break; else $z$9316 = $z$10;
  }
  $conv481 = +($sign | 0);
  $mul482 = $conv481 * $y$0317;
  $add483 = $e2$1 + 53 | 0;
  $sub484 = $add483 - $emin | 0;
  $cmp485 = ($sub484 | 0) < ($bits | 0);
  $bits$addr$0 = $cmp485 ? (($sub484 | 0) > 0 ? $sub484 : 0) : $bits;
  if (($bits$addr$0 | 0) < 53) {
   $call501 = +_copysignl(+_scalbn(1.0, 105 - $bits$addr$0 | 0), $mul482);
   $call504 = +_fmodl($mul482, +_scalbn(1.0, 53 - $bits$addr$0 | 0));
   $bias$0 = $call501;
   $frac$0 = $call504;
   $y$1 = $call501 + ($mul482 - $call504);
  } else {
   $bias$0 = 0.0;
   $frac$0 = 0.0;
   $y$1 = $mul482;
  }
  $and509 = $a$4 + 2 & 127;
  if (($and509 | 0) == ($z$10 | 0)) $frac$3 = $frac$0; else {
   $98 = HEAP32[$x + ($and509 << 2) >> 2] | 0;
   do if ($98 >>> 0 < 5e8) {
    if (!$98) if (($a$4 + 3 & 127 | 0) == ($z$10 | 0)) {
     $frac$1 = $frac$0;
     break;
    }
    $frac$1 = $conv481 * .25 + $frac$0;
   } else {
    if (($98 | 0) != 5e8) {
     $frac$1 = $conv481 * .75 + $frac$0;
     break;
    }
    if (($a$4 + 3 & 127 | 0) == ($z$10 | 0)) {
     $frac$1 = $conv481 * .5 + $frac$0;
     break;
    } else {
     $frac$1 = $conv481 * .75 + $frac$0;
     break;
    }
   } while (0);
   if ((53 - $bits$addr$0 | 0) > 1) if (+_fmodl($frac$1, 1.0) != 0.0) $frac$3 = $frac$1; else $frac$3 = $frac$1 + 1.0; else $frac$3 = $frac$1;
  }
  $sub570 = $y$1 + $frac$3 - $bias$0;
  do if (($add483 & 2147483647 | 0) > (-2 - $sum | 0)) {
   $cmp578 = !(+Math_abs(+$sub570) >= 9007199254740992.0);
   $e2$3 = (($cmp578 ^ 1) & 1) + $e2$1 | 0;
   $y$2 = $cmp578 ? $sub570 : $sub570 * .5;
   if (($e2$3 + 50 | 0) <= ($sub1 | 0)) if (!($frac$3 != 0.0 & ($cmp485 & (($bits$addr$0 | 0) != ($sub484 | 0) | $cmp578)))) {
    $e2$4 = $e2$3;
    $y$3 = $y$2;
    break;
   }
   $call600 = ___errno_location() | 0;
   HEAP32[$call600 >> 2] = 34;
   $e2$4 = $e2$3;
   $y$3 = $y$2;
  } else {
   $e2$4 = $e2$1;
   $y$3 = $sub570;
  } while (0);
  $retval$1 = +_scalbnl($y$3, $e2$4);
 } while (0);
 STACKTOP = sp;
 return +$retval$1;
}

function __ZN10__cxxabiv112_GLOBAL__N_121parse_unresolved_nameINS0_2DbEEEPKcS4_S4_RT_($first, $last, $db) {
 $first = $first | 0;
 $last = $last | 0;
 $db = $db | 0;
 var $$pre = 0, $$pre$phi437Z2D = 0, $10 = 0, $11 = 0, $12 = 0, $15 = 0, $16 = 0, $18 = 0, $21 = 0, $22 = 0, $24 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $33 = 0, $34 = 0, $36 = 0, $39 = 0, $42 = 0, $43 = 0, $44 = 0, $48 = 0, $49 = 0, $50 = 0, $53 = 0, $54 = 0, $56 = 0, $60 = 0, $62 = 0, $65 = 0, $66 = 0, $68 = 0, $7 = 0, $72 = 0, $73 = 0, $74 = 0, $77 = 0, $78 = 0, $80 = 0, $__end_$i244 = 0, $__end_$i271 = 0, $__end_$i281 = 0, $__end_$i318 = 0, $__end_$i322$pre$phiZZ2D = 0, $__i$0$i$i$i = 0, $__i$0$i$i$i222 = 0, $__i$0$i$i$i295 = 0, $__i$0$i$i$i336 = 0, $__i$0$i$i$i383 = 0, $__size_$i$i$i$i$i187 = 0, $__size_$i$i$i$i$i348 = 0, $__size_$i3$i$i$i192 = 0, $__size_$i3$i$i$i353 = 0, $add$ptr$i158 = 0, $add$ptr$i163 = 0, $add$ptr$i176 = 0, $add$ptr$i201 = 0, $add$ptr$i214 = 0, $add$ptr$i250 = 0, $add$ptr$i274 = 0, $add$ptr$i287 = 0, $add$ptr$i328 = 0, $add$ptr$i362 = 0, $add$ptr$i375 = 0, $add$ptr34 = 0, $args = 0, $arrayidx30 = 0, $call = 0, $call136 = 0, $call139 = 0, $call163 = 0, $call199 = 0, $call220 = 0, $call253 = 0, $call35 = 0, $call40 = 0, $call67 = 0, $call94 = 0, $cmp4 = 0, $global$0$off0 = 0, $incdec$ptr = 0, $incdec$ptr$i$i$i = 0, $incdec$ptr$i$i$i166 = 0, $incdec$ptr$i$i$i179 = 0, $incdec$ptr$i$i$i204 = 0, $incdec$ptr$i$i$i217 = 0, $incdec$ptr$i$i$i253 = 0, $incdec$ptr$i$i$i277 = 0, $incdec$ptr$i$i$i290 = 0, $incdec$ptr$i$i$i331 = 0, $incdec$ptr$i$i$i365 = 0, $incdec$ptr$i$i$i378 = 0, $incdec$ptr252 = 0, $ref$tmp = 0, $retval$6 = 0, $sub$ptr$lhs$cast = 0, $t$0 = 0, $t$1 = 0, $t$1$ph = 0, $t$2 = 0, $t$3 = 0, $tobool$i$i$i$i$i = 0, $tobool$i$i$i$i$i188 = 0, $tobool$i$i$i$i$i235 = 0, $tobool$i$i$i$i$i261 = 0, $tobool$i$i$i$i$i308 = 0, $tobool$i$i$i$i$i349 = 0, $tobool$i$i$i$i$i396 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 $args = sp + 12 | 0;
 $ref$tmp = sp;
 $sub$ptr$lhs$cast = $last;
 L1 : do if (($sub$ptr$lhs$cast - $first | 0) > 2) {
  if ((HEAP8[$first >> 0] | 0) == 103) {
   $cmp4 = (HEAP8[$first + 1 >> 0] | 0) == 115;
   $global$0$off0 = $cmp4;
   $t$0 = $cmp4 ? $first + 2 | 0 : $first;
  } else {
   $global$0$off0 = 0;
   $t$0 = $first;
  }
  $call = __ZN10__cxxabiv112_GLOBAL__N_126parse_base_unresolved_nameINS0_2DbEEEPKcS4_S4_RT_($t$0, $last, $db) | 0;
  if (($call | 0) != ($t$0 | 0)) {
   if (!$global$0$off0) {
    $retval$6 = $call;
    break;
   }
   $3 = HEAP32[$db + 4 >> 2] | 0;
   if ((HEAP32[$db >> 2] | 0) == ($3 | 0)) {
    $retval$6 = $first;
    break;
   }
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKc($3 + -24 | 0, 0, 14959) | 0;
   $retval$6 = $call;
   break;
  }
  if (($sub$ptr$lhs$cast - $t$0 | 0) > 2) if ((HEAP8[$t$0 >> 0] | 0) == 115) if ((HEAP8[$t$0 + 1 >> 0] | 0) == 114) {
   $arrayidx30 = $t$0 + 2 | 0;
   if ((HEAP8[$arrayidx30 >> 0] | 0) == 78) {
    $add$ptr34 = $t$0 + 3 | 0;
    $call35 = __ZN10__cxxabiv112_GLOBAL__N_121parse_unresolved_typeINS0_2DbEEEPKcS4_S4_RT_($add$ptr34, $last, $db) | 0;
    if (($call35 | 0) == ($add$ptr34 | 0) | ($call35 | 0) == ($last | 0)) {
     $retval$6 = $first;
     break;
    }
    $call40 = __ZN10__cxxabiv112_GLOBAL__N_119parse_template_argsINS0_2DbEEEPKcS4_S4_RT_($call35, $last, $db) | 0;
    $$pre = $db + 4 | 0;
    do if (($call40 | 0) == ($call35 | 0)) {
     $$pre$phi437Z2D = $db;
     $t$1$ph = $call35;
    } else {
     $7 = HEAP32[$$pre >> 2] | 0;
     if ((($7 - (HEAP32[$db >> 2] | 0) | 0) / 24 | 0) >>> 0 < 2) {
      $retval$6 = $first;
      break L1;
     }
     __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($args, $7 + -24 | 0);
     $10 = HEAP32[$$pre >> 2] | 0;
     $add$ptr$i158 = $10 + -24 | 0;
     $11 = $10;
     while (1) {
      if (($11 | 0) == ($add$ptr$i158 | 0)) break;
      $incdec$ptr$i$i$i = $11 + -24 | 0;
      HEAP32[$$pre >> 2] = $incdec$ptr$i$i$i;
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($incdec$ptr$i$i$i);
      $11 = HEAP32[$$pre >> 2] | 0;
     }
     $12 = HEAP8[$args + 11 >> 0] | 0;
     $tobool$i$i$i$i$i = $12 << 24 >> 24 < 0;
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($10 + -48 | 0, $tobool$i$i$i$i$i ? HEAP32[$args >> 2] | 0 : $args, $tobool$i$i$i$i$i ? HEAP32[$args + 4 >> 2] | 0 : $12 & 255) | 0;
     if (($call40 | 0) != ($last | 0)) {
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($args);
      $$pre$phi437Z2D = $db;
      $t$1$ph = $call40;
      break;
     }
     $15 = HEAP32[$$pre >> 2] | 0;
     $add$ptr$i163 = $15 + -24 | 0;
     $16 = $15;
     while (1) {
      if (($16 | 0) == ($add$ptr$i163 | 0)) break;
      $incdec$ptr$i$i$i166 = $16 + -24 | 0;
      HEAP32[$$pre >> 2] = $incdec$ptr$i$i$i166;
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($incdec$ptr$i$i$i166);
      $16 = HEAP32[$$pre >> 2] | 0;
     }
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($args);
     $retval$6 = $first;
     break L1;
    } while (0);
    $__size_$i$i$i$i$i187 = $ref$tmp + 11 | 0;
    $__size_$i3$i$i$i192 = $ref$tmp + 4 | 0;
    $t$1 = $t$1$ph;
    while (1) {
     if ((HEAP8[$t$1 >> 0] | 0) == 69) break;
     $call67 = __ZN10__cxxabiv112_GLOBAL__N_132parse_unresolved_qualifier_levelINS0_2DbEEEPKcS4_S4_RT_($t$1, $last, $db) | 0;
     if (($call67 | 0) == ($t$1 | 0) | ($call67 | 0) == ($last | 0)) {
      $retval$6 = $first;
      break L1;
     }
     $18 = HEAP32[$$pre >> 2] | 0;
     if ((($18 - (HEAP32[$$pre$phi437Z2D >> 2] | 0) | 0) / 24 | 0) >>> 0 < 2) {
      $retval$6 = $first;
      break L1;
     }
     __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($args, $18 + -24 | 0);
     $21 = HEAP32[$$pre >> 2] | 0;
     $add$ptr$i176 = $21 + -24 | 0;
     $22 = $21;
     while (1) {
      if (($22 | 0) == ($add$ptr$i176 | 0)) break;
      $incdec$ptr$i$i$i179 = $22 + -24 | 0;
      HEAP32[$$pre >> 2] = $incdec$ptr$i$i$i179;
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($incdec$ptr$i$i$i179);
      $22 = HEAP32[$$pre >> 2] | 0;
     }
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKc($args, 0, 14959) | 0;
     HEAP32[$ref$tmp >> 2] = HEAP32[$args >> 2];
     HEAP32[$ref$tmp + 4 >> 2] = HEAP32[$args + 4 >> 2];
     HEAP32[$ref$tmp + 8 >> 2] = HEAP32[$args + 8 >> 2];
     $__i$0$i$i$i = 0;
     while (1) {
      if (($__i$0$i$i$i | 0) == 3) break;
      HEAP32[$args + ($__i$0$i$i$i << 2) >> 2] = 0;
      $__i$0$i$i$i = $__i$0$i$i$i + 1 | 0;
     }
     $24 = HEAP8[$__size_$i$i$i$i$i187 >> 0] | 0;
     $tobool$i$i$i$i$i188 = $24 << 24 >> 24 < 0;
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj((HEAP32[$$pre >> 2] | 0) + -24 | 0, $tobool$i$i$i$i$i188 ? HEAP32[$ref$tmp >> 2] | 0 : $ref$tmp, $tobool$i$i$i$i$i188 ? HEAP32[$__size_$i3$i$i$i192 >> 2] | 0 : $24 & 255) | 0;
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($ref$tmp);
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($args);
     $t$1 = $call67;
    }
    $incdec$ptr = $t$1 + 1 | 0;
    $call94 = __ZN10__cxxabiv112_GLOBAL__N_126parse_base_unresolved_nameINS0_2DbEEEPKcS4_S4_RT_($incdec$ptr, $last, $db) | 0;
    if (($call94 | 0) == ($incdec$ptr | 0)) {
     $28 = HEAP32[$$pre >> 2] | 0;
     if ((HEAP32[$db >> 2] | 0) == ($28 | 0)) {
      $retval$6 = $first;
      break;
     }
     $add$ptr$i201 = $28 + -24 | 0;
     $29 = $28;
     while (1) {
      if (($29 | 0) == ($add$ptr$i201 | 0)) {
       $retval$6 = $first;
       break L1;
      }
      $incdec$ptr$i$i$i204 = $29 + -24 | 0;
      HEAP32[$$pre >> 2] = $incdec$ptr$i$i$i204;
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($incdec$ptr$i$i$i204);
      $29 = HEAP32[$$pre >> 2] | 0;
     }
    }
    $30 = HEAP32[$$pre >> 2] | 0;
    if ((($30 - (HEAP32[$$pre$phi437Z2D >> 2] | 0) | 0) / 24 | 0) >>> 0 < 2) {
     $retval$6 = $first;
     break;
    }
    __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($args, $30 + -24 | 0);
    $33 = HEAP32[$$pre >> 2] | 0;
    $add$ptr$i214 = $33 + -24 | 0;
    $34 = $33;
    while (1) {
     if (($34 | 0) == ($add$ptr$i214 | 0)) break;
     $incdec$ptr$i$i$i217 = $34 + -24 | 0;
     HEAP32[$$pre >> 2] = $incdec$ptr$i$i$i217;
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($incdec$ptr$i$i$i217);
     $34 = HEAP32[$$pre >> 2] | 0;
    }
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKc($args, 0, 14959) | 0;
    HEAP32[$ref$tmp >> 2] = HEAP32[$args >> 2];
    HEAP32[$ref$tmp + 4 >> 2] = HEAP32[$args + 4 >> 2];
    HEAP32[$ref$tmp + 8 >> 2] = HEAP32[$args + 8 >> 2];
    $__i$0$i$i$i222 = 0;
    while (1) {
     if (($__i$0$i$i$i222 | 0) == 3) break;
     HEAP32[$args + ($__i$0$i$i$i222 << 2) >> 2] = 0;
     $__i$0$i$i$i222 = $__i$0$i$i$i222 + 1 | 0;
    }
    $36 = HEAP8[$ref$tmp + 11 >> 0] | 0;
    $tobool$i$i$i$i$i235 = $36 << 24 >> 24 < 0;
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj((HEAP32[$$pre >> 2] | 0) + -24 | 0, $tobool$i$i$i$i$i235 ? HEAP32[$ref$tmp >> 2] | 0 : $ref$tmp, $tobool$i$i$i$i$i235 ? HEAP32[$ref$tmp + 4 >> 2] | 0 : $36 & 255) | 0;
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($ref$tmp);
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($args);
    $retval$6 = $call94;
    break;
   }
   $call136 = __ZN10__cxxabiv112_GLOBAL__N_121parse_unresolved_typeINS0_2DbEEEPKcS4_S4_RT_($arrayidx30, $last, $db) | 0;
   if (($call136 | 0) != ($arrayidx30 | 0)) {
    $call139 = __ZN10__cxxabiv112_GLOBAL__N_119parse_template_argsINS0_2DbEEEPKcS4_S4_RT_($call136, $last, $db) | 0;
    if (($call139 | 0) == ($call136 | 0)) $t$2 = $call136; else {
     $__end_$i244 = $db + 4 | 0;
     $39 = HEAP32[$__end_$i244 >> 2] | 0;
     if ((($39 - (HEAP32[$db >> 2] | 0) | 0) / 24 | 0) >>> 0 < 2) {
      $retval$6 = $first;
      break;
     }
     __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($args, $39 + -24 | 0);
     $42 = HEAP32[$__end_$i244 >> 2] | 0;
     $add$ptr$i250 = $42 + -24 | 0;
     $43 = $42;
     while (1) {
      if (($43 | 0) == ($add$ptr$i250 | 0)) break;
      $incdec$ptr$i$i$i253 = $43 + -24 | 0;
      HEAP32[$__end_$i244 >> 2] = $incdec$ptr$i$i$i253;
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($incdec$ptr$i$i$i253);
      $43 = HEAP32[$__end_$i244 >> 2] | 0;
     }
     $44 = HEAP8[$args + 11 >> 0] | 0;
     $tobool$i$i$i$i$i261 = $44 << 24 >> 24 < 0;
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($42 + -48 | 0, $tobool$i$i$i$i$i261 ? HEAP32[$args >> 2] | 0 : $args, $tobool$i$i$i$i$i261 ? HEAP32[$args + 4 >> 2] | 0 : $44 & 255) | 0;
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($args);
     $t$2 = $call139;
    }
    $call163 = __ZN10__cxxabiv112_GLOBAL__N_126parse_base_unresolved_nameINS0_2DbEEEPKcS4_S4_RT_($t$2, $last, $db) | 0;
    if (($call163 | 0) == ($t$2 | 0)) {
     $__end_$i271 = $db + 4 | 0;
     $48 = HEAP32[$__end_$i271 >> 2] | 0;
     if ((HEAP32[$db >> 2] | 0) == ($48 | 0)) {
      $retval$6 = $first;
      break;
     }
     $add$ptr$i274 = $48 + -24 | 0;
     $49 = $48;
     while (1) {
      if (($49 | 0) == ($add$ptr$i274 | 0)) {
       $retval$6 = $first;
       break L1;
      }
      $incdec$ptr$i$i$i277 = $49 + -24 | 0;
      HEAP32[$__end_$i271 >> 2] = $incdec$ptr$i$i$i277;
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($incdec$ptr$i$i$i277);
      $49 = HEAP32[$__end_$i271 >> 2] | 0;
     }
    }
    $__end_$i281 = $db + 4 | 0;
    $50 = HEAP32[$__end_$i281 >> 2] | 0;
    if ((($50 - (HEAP32[$db >> 2] | 0) | 0) / 24 | 0) >>> 0 < 2) {
     $retval$6 = $first;
     break;
    }
    __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($args, $50 + -24 | 0);
    $53 = HEAP32[$__end_$i281 >> 2] | 0;
    $add$ptr$i287 = $53 + -24 | 0;
    $54 = $53;
    while (1) {
     if (($54 | 0) == ($add$ptr$i287 | 0)) break;
     $incdec$ptr$i$i$i290 = $54 + -24 | 0;
     HEAP32[$__end_$i281 >> 2] = $incdec$ptr$i$i$i290;
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($incdec$ptr$i$i$i290);
     $54 = HEAP32[$__end_$i281 >> 2] | 0;
    }
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKc($args, 0, 14959) | 0;
    HEAP32[$ref$tmp >> 2] = HEAP32[$args >> 2];
    HEAP32[$ref$tmp + 4 >> 2] = HEAP32[$args + 4 >> 2];
    HEAP32[$ref$tmp + 8 >> 2] = HEAP32[$args + 8 >> 2];
    $__i$0$i$i$i295 = 0;
    while (1) {
     if (($__i$0$i$i$i295 | 0) == 3) break;
     HEAP32[$args + ($__i$0$i$i$i295 << 2) >> 2] = 0;
     $__i$0$i$i$i295 = $__i$0$i$i$i295 + 1 | 0;
    }
    $56 = HEAP8[$ref$tmp + 11 >> 0] | 0;
    $tobool$i$i$i$i$i308 = $56 << 24 >> 24 < 0;
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj((HEAP32[$__end_$i281 >> 2] | 0) + -24 | 0, $tobool$i$i$i$i$i308 ? HEAP32[$ref$tmp >> 2] | 0 : $ref$tmp, $tobool$i$i$i$i$i308 ? HEAP32[$ref$tmp + 4 >> 2] | 0 : $56 & 255) | 0;
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($ref$tmp);
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($args);
    $retval$6 = $call163;
    break;
   }
   $call199 = __ZN10__cxxabiv112_GLOBAL__N_132parse_unresolved_qualifier_levelINS0_2DbEEEPKcS4_S4_RT_($arrayidx30, $last, $db) | 0;
   if (($call199 | 0) == ($arrayidx30 | 0) | ($call199 | 0) == ($last | 0)) $retval$6 = $first; else {
    if ($global$0$off0) {
     $__end_$i318 = $db + 4 | 0;
     $60 = HEAP32[$__end_$i318 >> 2] | 0;
     if ((HEAP32[$db >> 2] | 0) == ($60 | 0)) {
      $retval$6 = $first;
      break;
     }
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKc($60 + -24 | 0, 0, 14959) | 0;
     $__end_$i322$pre$phiZZ2D = $__end_$i318;
    } else $__end_$i322$pre$phiZZ2D = $db + 4 | 0;
    $__size_$i$i$i$i$i348 = $ref$tmp + 11 | 0;
    $__size_$i3$i$i$i353 = $ref$tmp + 4 | 0;
    $t$3 = $call199;
    while (1) {
     if ((HEAP8[$t$3 >> 0] | 0) == 69) break;
     $call220 = __ZN10__cxxabiv112_GLOBAL__N_132parse_unresolved_qualifier_levelINS0_2DbEEEPKcS4_S4_RT_($t$3, $last, $db) | 0;
     if (($call220 | 0) == ($t$3 | 0) | ($call220 | 0) == ($last | 0)) {
      $retval$6 = $first;
      break L1;
     }
     $62 = HEAP32[$__end_$i322$pre$phiZZ2D >> 2] | 0;
     if ((($62 - (HEAP32[$db >> 2] | 0) | 0) / 24 | 0) >>> 0 < 2) {
      $retval$6 = $first;
      break L1;
     }
     __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($args, $62 + -24 | 0);
     $65 = HEAP32[$__end_$i322$pre$phiZZ2D >> 2] | 0;
     $add$ptr$i328 = $65 + -24 | 0;
     $66 = $65;
     while (1) {
      if (($66 | 0) == ($add$ptr$i328 | 0)) break;
      $incdec$ptr$i$i$i331 = $66 + -24 | 0;
      HEAP32[$__end_$i322$pre$phiZZ2D >> 2] = $incdec$ptr$i$i$i331;
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($incdec$ptr$i$i$i331);
      $66 = HEAP32[$__end_$i322$pre$phiZZ2D >> 2] | 0;
     }
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKc($args, 0, 14959) | 0;
     HEAP32[$ref$tmp >> 2] = HEAP32[$args >> 2];
     HEAP32[$ref$tmp + 4 >> 2] = HEAP32[$args + 4 >> 2];
     HEAP32[$ref$tmp + 8 >> 2] = HEAP32[$args + 8 >> 2];
     $__i$0$i$i$i336 = 0;
     while (1) {
      if (($__i$0$i$i$i336 | 0) == 3) break;
      HEAP32[$args + ($__i$0$i$i$i336 << 2) >> 2] = 0;
      $__i$0$i$i$i336 = $__i$0$i$i$i336 + 1 | 0;
     }
     $68 = HEAP8[$__size_$i$i$i$i$i348 >> 0] | 0;
     $tobool$i$i$i$i$i349 = $68 << 24 >> 24 < 0;
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj((HEAP32[$__end_$i322$pre$phiZZ2D >> 2] | 0) + -24 | 0, $tobool$i$i$i$i$i349 ? HEAP32[$ref$tmp >> 2] | 0 : $ref$tmp, $tobool$i$i$i$i$i349 ? HEAP32[$__size_$i3$i$i$i353 >> 2] | 0 : $68 & 255) | 0;
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($ref$tmp);
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($args);
     $t$3 = $call220;
    }
    $incdec$ptr252 = $t$3 + 1 | 0;
    $call253 = __ZN10__cxxabiv112_GLOBAL__N_126parse_base_unresolved_nameINS0_2DbEEEPKcS4_S4_RT_($incdec$ptr252, $last, $db) | 0;
    if (($call253 | 0) == ($incdec$ptr252 | 0)) {
     $72 = HEAP32[$__end_$i322$pre$phiZZ2D >> 2] | 0;
     if ((HEAP32[$db >> 2] | 0) == ($72 | 0)) {
      $retval$6 = $first;
      break;
     }
     $add$ptr$i362 = $72 + -24 | 0;
     $73 = $72;
     while (1) {
      if (($73 | 0) == ($add$ptr$i362 | 0)) {
       $retval$6 = $first;
       break L1;
      }
      $incdec$ptr$i$i$i365 = $73 + -24 | 0;
      HEAP32[$__end_$i322$pre$phiZZ2D >> 2] = $incdec$ptr$i$i$i365;
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($incdec$ptr$i$i$i365);
      $73 = HEAP32[$__end_$i322$pre$phiZZ2D >> 2] | 0;
     }
    }
    $74 = HEAP32[$__end_$i322$pre$phiZZ2D >> 2] | 0;
    if ((($74 - (HEAP32[$db >> 2] | 0) | 0) / 24 | 0) >>> 0 < 2) $retval$6 = $first; else {
     __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($args, $74 + -24 | 0);
     $77 = HEAP32[$__end_$i322$pre$phiZZ2D >> 2] | 0;
     $add$ptr$i375 = $77 + -24 | 0;
     $78 = $77;
     while (1) {
      if (($78 | 0) == ($add$ptr$i375 | 0)) break;
      $incdec$ptr$i$i$i378 = $78 + -24 | 0;
      HEAP32[$__end_$i322$pre$phiZZ2D >> 2] = $incdec$ptr$i$i$i378;
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($incdec$ptr$i$i$i378);
      $78 = HEAP32[$__end_$i322$pre$phiZZ2D >> 2] | 0;
     }
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKc($args, 0, 14959) | 0;
     HEAP32[$ref$tmp >> 2] = HEAP32[$args >> 2];
     HEAP32[$ref$tmp + 4 >> 2] = HEAP32[$args + 4 >> 2];
     HEAP32[$ref$tmp + 8 >> 2] = HEAP32[$args + 8 >> 2];
     $__i$0$i$i$i383 = 0;
     while (1) {
      if (($__i$0$i$i$i383 | 0) == 3) break;
      HEAP32[$args + ($__i$0$i$i$i383 << 2) >> 2] = 0;
      $__i$0$i$i$i383 = $__i$0$i$i$i383 + 1 | 0;
     }
     $80 = HEAP8[$ref$tmp + 11 >> 0] | 0;
     $tobool$i$i$i$i$i396 = $80 << 24 >> 24 < 0;
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj((HEAP32[$__end_$i322$pre$phiZZ2D >> 2] | 0) + -24 | 0, $tobool$i$i$i$i$i396 ? HEAP32[$ref$tmp >> 2] | 0 : $ref$tmp, $tobool$i$i$i$i$i396 ? HEAP32[$ref$tmp + 4 >> 2] | 0 : $80 & 255) | 0;
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($ref$tmp);
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($args);
     $retval$6 = $call253;
    }
   }
  } else $retval$6 = $first; else $retval$6 = $first; else $retval$6 = $first;
 } else $retval$6 = $first; while (0);
 STACKTOP = sp;
 return $retval$6 | 0;
}

function _arDetectMarker($arHandle, $dataPtr) {
 $arHandle = $arHandle | 0;
 $dataPtr = $dataPtr | 0;
 var $$add = 0, $$pre = 0, $1 = 0, $109 = 0, $110 = 0, $111 = 0, $115 = 0, $123 = 0, $124 = 0, $2 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $40 = 0, $42 = 0, $49 = 0, $50 = 0, $7 = 0, $78 = 0, $85 = 0, $87 = 0.0, $88 = 0, $95 = 0.0, $add = 0, $arImageProcInfo = 0, $arImageProcMode212 = 0, $arLabelingMode137 = 0, $arLabelingThresh200 = 0, $arLabelingThreshAutoBracketOver = 0, $arLabelingThreshAutoBracketUnder = 0, $arLabelingThreshAutoInterval187 = 0, $arLabelingThreshAutoIntervalTTL = 0, $arLabelingThreshMode = 0, $arMarkerExtractionMode = 0, $arParamLT230 = 0, $arPatternDetectionMode326 = 0, $arPixelFormat223 = 0, $area = 0, $arraydecay214 = 0, $arraydecay235 = 0, $arrayidx277 = 0, $arrayidx297 = 0, $arrayidx683 = 0, $arrayidx695$le = 0, $arrayidx771 = 0, $arrayidx792 = 0, $call129 = 0, $call140 = 0, $cdir$0 = 0, $cdir$1 = 0, $cdir$2 = 0, $cf = 0, $cfMatrix = 0, $cfMatrix532 = 0, $cfPatt = 0, $cid$0 = 0, $cid$1 = 0, $cmp149 = 0, $cmp614 = 0, $conv = 0, $conv262 = 0.0, $conv754 = 0.0, $count = 0, $diff$0 = 0.0, $diff$1 = 0.0, $diffmin$0 = 0.0, $diffmin$1 = 0.0, $diffmin$2 = 0.0, $dir = 0, $dirMatrix = 0, $dirPatt = 0, $div = 0.0, $div315 = 0.0, $div755 = 0.0, $history_num = 0, $i$0 = 0, $i$1 = 0, $i$2 = 0, $i$3 = 0, $i$4 = 0, $idMatrix = 0, $idPatt = 0, $inc656 = 0, $inc67 = 0, $inc829 = 0, $j$0 = 0, $j$1 = 0, $j$2 = 0, $j$3 = 0, $j$4 = 0, $j$5 = 0, $j$6 = 0, $k$0 = 0, $k$1 = 0, $labelInfo211 = 0, $marker2_num215 = 0, $marker748 = 0, $marker_num = 0, $marker_nums = 0, $matrixCodeType237 = 0, $pattHandle227 = 0, $pattRatio232 = 0, $rem = 0, $rem561 = 0, $ret159$0 = 0, $retval$4 = 0, $rlenmin$0 = 0.0, $rlenmin$1 = 0.0, $storemerge = 0, $sub = 0, $sub105 = 0, $sub112$sink = 0, $sub278 = 0.0, $sub298 = 0.0, $sub379 = 0.0, $sub408 = 0.0, $sub564 = 0.0, $sub593 = 0.0, $sub625 = 0, $sub772 = 0.0, $sub793 = 0.0, $thresholds = 0, $vararg_buffer = 0, $vararg_buffer6 = 0, $vararg_buffer9 = 0, $xsize209 = 0, $ysize210 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(64);
 $vararg_buffer9 = sp + 32 | 0;
 $vararg_buffer6 = sp + 24 | 0;
 $vararg_buffer = sp;
 $thresholds = sp + 52 | 0;
 $marker_nums = sp + 40 | 0;
 $marker_num = $arHandle + 44 | 0;
 HEAP32[$marker_num >> 2] = 0;
 $arLabelingThreshMode = $arHandle + 7062388 | 0;
 $arLabelingMode137 = $arHandle + 12 | 0;
 $ysize210 = $arHandle + 40 | 0;
 $arPatternDetectionMode326 = $arHandle + 24 | 0;
 $arLabelingThresh200 = $arHandle + 16 | 0;
 $pattHandle227 = $arHandle + 7062384 | 0;
 $matrixCodeType237 = $arHandle + 7062424 | 0;
 $arLabelingThreshAutoIntervalTTL = $arHandle + 7062396 | 0;
 $xsize209 = $arHandle + 36 | 0;
 $labelInfo211 = $arHandle + 4834144 | 0;
 $marker2_num215 = $arHandle + 15408 | 0;
 $arraydecay235 = $arHandle + 48 | 0;
 $arPixelFormat223 = $arHandle + 4 | 0;
 $arraydecay214 = $arHandle + 15416 | 0;
 $arImageProcMode212 = $arHandle + 20 | 0;
 $arParamLT230 = $arHandle + 32 | 0;
 $arLabelingThreshAutoInterval187 = $arHandle + 7062392 | 0;
 $pattRatio232 = $arHandle + 7062416 | 0;
 do if ((HEAP32[$arLabelingThreshMode >> 2] | 0) == 4) {
  $1 = HEAP32[$arLabelingThreshAutoIntervalTTL >> 2] | 0;
  if (($1 | 0) > 0) {
   HEAP32[$arLabelingThreshAutoIntervalTTL >> 2] = $1 + -1;
   label = 30;
   break;
  }
  $2 = HEAP32[$arLabelingThresh200 >> 2] | 0;
  $arLabelingThreshAutoBracketOver = $arHandle + 7062400 | 0;
  $add = (HEAP32[$arLabelingThreshAutoBracketOver >> 2] | 0) + $2 | 0;
  $$add = ($add | 0) < 255 ? $add : 255;
  HEAP32[$thresholds >> 2] = $$add;
  $arLabelingThreshAutoBracketUnder = $arHandle + 7062404 | 0;
  $sub = $2 - (HEAP32[$arLabelingThreshAutoBracketUnder >> 2] | 0) | 0;
  $storemerge = ($sub | 0) > 0 ? $sub : 0;
  HEAP32[$thresholds + 4 >> 2] = $storemerge;
  HEAP32[$thresholds + 8 >> 2] = $2;
  $i$0 = 0;
  while (1) {
   $7 = HEAP32[$arHandle >> 2] | 0;
   if (($i$0 | 0) >= 3) break;
   if ((_arLabeling($dataPtr, HEAP32[$xsize209 >> 2] | 0, HEAP32[$ysize210 >> 2] | 0, HEAP32[$arPixelFormat223 >> 2] | 0, $7, HEAP32[$arLabelingMode137 >> 2] | 0, HEAP32[$thresholds + ($i$0 << 2) >> 2] | 0, HEAP32[$arImageProcMode212 >> 2] | 0, $labelInfo211, 0) | 0) < 0) {
    label = 27;
    break;
   }
   if ((_arDetectMarker2(HEAP32[$xsize209 >> 2] | 0, HEAP32[$ysize210 >> 2] | 0, $labelInfo211, HEAP32[$arImageProcMode212 >> 2] | 0, 1e6, 70, 1.0, $arraydecay214, $marker2_num215) | 0) < 0) {
    label = 27;
    break;
   }
   if ((_arGetMarkerInfo($dataPtr, HEAP32[$xsize209 >> 2] | 0, HEAP32[$ysize210 >> 2] | 0, HEAP32[$arPixelFormat223 >> 2] | 0, $arraydecay214, HEAP32[$marker2_num215 >> 2] | 0, HEAP32[$pattHandle227 >> 2] | 0, HEAP32[$arImageProcMode212 >> 2] | 0, HEAP32[$arPatternDetectionMode326 >> 2] | 0, (HEAP32[$arParamLT230 >> 2] | 0) + 184 | 0, +HEAPF64[$pattRatio232 >> 3], $arraydecay235, $marker_num, HEAP32[$matrixCodeType237 >> 2] | 0) | 0) < 0) {
    label = 27;
    break;
   }
   HEAP32[$marker_nums + ($i$0 << 2) >> 2] = HEAP32[$marker_num >> 2];
   $i$0 = $i$0 + 1 | 0;
  }
  if ((label | 0) == 27) {
   $retval$4 = -1;
   break;
  }
  $28 = HEAP32[$marker_nums >> 2] | 0;
  $29 = HEAP32[$marker_nums + 8 >> 2] | 0;
  $30 = HEAP32[$marker_nums + 4 >> 2] | 0;
  if (($7 | 0) == 1) {
   HEAP32[$vararg_buffer >> 2] = $storemerge;
   HEAP32[$vararg_buffer + 4 >> 2] = $30;
   HEAP32[$vararg_buffer + 8 >> 2] = $2;
   HEAP32[$vararg_buffer + 12 >> 2] = $29;
   HEAP32[$vararg_buffer + 16 >> 2] = $$add;
   HEAP32[$vararg_buffer + 20 >> 2] = $28;
   _arLog(3, 3505, $vararg_buffer);
  }
  if (($28 | 0) > ($29 | 0) | ($30 | 0) > ($29 | 0)) {
   $35 = HEAP32[$thresholds + ((($28 | 0) < ($30 | 0) & 1) << 2) >> 2] | 0;
   HEAP32[$arLabelingThresh200 >> 2] = $35;
   $sub105 = $35 - $2 | 0;
   if (($sub105 | 0) > 0) {
    HEAP32[$arLabelingThreshAutoBracketOver >> 2] = $sub105;
    $sub112$sink = 1;
   } else {
    HEAP32[$arLabelingThreshAutoBracketOver >> 2] = 1;
    $sub112$sink = 0 - $sub105 | 0;
   }
   HEAP32[$arLabelingThreshAutoBracketUnder >> 2] = $sub112$sink;
   if ((HEAP32[$arHandle >> 2] | 0) == 1) {
    HEAP32[$vararg_buffer6 >> 2] = $35;
    _arLog(3, 3581, $vararg_buffer6);
    HEAP32[$arLabelingThreshAutoIntervalTTL >> 2] = HEAP32[$arLabelingThreshAutoInterval187 >> 2];
    label = 30;
    break;
   } else {
    HEAP32[$arLabelingThreshAutoIntervalTTL >> 2] = HEAP32[$arLabelingThreshAutoInterval187 >> 2];
    label = 30;
    break;
   }
  }
  $31 = HEAP32[$arLabelingThreshAutoBracketOver >> 2] | 0;
  $32 = HEAP32[$arLabelingThreshAutoBracketUnder >> 2] | 0;
  $inc67 = $31 + 1 | 0;
  if (($31 | 0) < ($32 | 0)) {
   HEAP32[$arLabelingThreshAutoBracketOver >> 2] = $inc67;
   $33 = $inc67;
  } else {
   if (($31 | 0) > ($32 | 0)) $123 = $31; else {
    HEAP32[$arLabelingThreshAutoBracketOver >> 2] = $inc67;
    $123 = $inc67;
   }
   HEAP32[$arLabelingThreshAutoBracketUnder >> 2] = $32 + 1;
   $33 = $123;
  }
  if (($33 + $2 | 0) > 254) {
   HEAP32[$arLabelingThreshAutoBracketOver >> 2] = 1;
   $34 = 1;
  } else $34 = $33;
  if (($2 | 0) <= ($34 | 0)) HEAP32[$arLabelingThreshAutoBracketUnder >> 2] = 1;
  HEAP32[$arLabelingThreshAutoIntervalTTL >> 2] = HEAP32[$arLabelingThreshAutoInterval187 >> 2];
  label = 48;
 } else label = 30; while (0);
 L41 : do if ((label | 0) == 30) {
  $40 = HEAP32[$arLabelingThreshMode >> 2] | 0;
  $arImageProcInfo = $arHandle + 7062408 | 0;
  if (($40 | 0) == 3) {
   $call129 = _arImageProcLumaHistAndBoxFilterWithBias(HEAP32[$arImageProcInfo >> 2] | 0, $dataPtr, 9, -7) | 0;
   if (($call129 | 0) < 0) {
    $retval$4 = $call129;
    break;
   }
   $42 = HEAP32[$arImageProcInfo >> 2] | 0;
   $call140 = _arLabeling(HEAP32[$42 >> 2] | 0, HEAP32[$42 + 8 >> 2] | 0, HEAP32[$42 + 12 >> 2] | 0, 5, HEAP32[$arHandle >> 2] | 0, HEAP32[$arLabelingMode137 >> 2] | 0, 0, 0, $labelInfo211, HEAP32[$42 + 4 >> 2] | 0) | 0;
   if (($call140 | 0) < 0) {
    $retval$4 = $call140;
    break;
   }
  } else {
   $cmp149 = ($40 | 0) == 1;
   do if (($40 + -1 | 0) >>> 0 < 2) {
    $49 = HEAP32[$arLabelingThreshAutoIntervalTTL >> 2] | 0;
    if (($49 | 0) > 0) {
     HEAP32[$arLabelingThreshAutoIntervalTTL >> 2] = $49 + -1;
     break;
    }
    $50 = HEAP32[$arImageProcInfo >> 2] | 0;
    if ($cmp149) $ret159$0 = _arImageProcLumaHistAndCDFAndMedian($50, $dataPtr, $thresholds) | 0; else $ret159$0 = _arImageProcLumaHistAndOtsu($50, $dataPtr, $thresholds) | 0;
    if (($ret159$0 | 0) < 0) {
     $retval$4 = $ret159$0;
     break L41;
    }
    if ((HEAP32[$arHandle >> 2] | 0) == 1) {
     $conv = HEAPU8[$thresholds >> 0] | 0;
     if ((HEAP32[$arLabelingThresh200 >> 2] | 0) != ($conv | 0)) {
      HEAP32[$vararg_buffer9 >> 2] = (HEAP32[$arLabelingThreshMode >> 2] | 0) == 1 ? 3633 : 3640;
      HEAP32[$vararg_buffer9 + 4 >> 2] = $conv;
      _arLog(3, 3645, $vararg_buffer9);
     }
    }
    HEAP32[$arLabelingThresh200 >> 2] = HEAPU8[$thresholds >> 0];
    HEAP32[$arLabelingThreshAutoIntervalTTL >> 2] = HEAP32[$arLabelingThreshAutoInterval187 >> 2];
   } while (0);
   if ((_arLabeling($dataPtr, HEAP32[$xsize209 >> 2] | 0, HEAP32[$ysize210 >> 2] | 0, HEAP32[$arPixelFormat223 >> 2] | 0, HEAP32[$arHandle >> 2] | 0, HEAP32[$arLabelingMode137 >> 2] | 0, HEAP32[$arLabelingThresh200 >> 2] | 0, HEAP32[$arImageProcMode212 >> 2] | 0, $labelInfo211, 0) | 0) < 0) {
    $retval$4 = -1;
    break;
   }
  }
  if ((_arDetectMarker2(HEAP32[$xsize209 >> 2] | 0, HEAP32[$ysize210 >> 2] | 0, $labelInfo211, HEAP32[$arImageProcMode212 >> 2] | 0, 1e6, 70, 1.0, $arraydecay214, $marker2_num215) | 0) < 0) $retval$4 = -1; else if ((_arGetMarkerInfo($dataPtr, HEAP32[$xsize209 >> 2] | 0, HEAP32[$ysize210 >> 2] | 0, HEAP32[$arPixelFormat223 >> 2] | 0, $arraydecay214, HEAP32[$marker2_num215 >> 2] | 0, HEAP32[$pattHandle227 >> 2] | 0, HEAP32[$arImageProcMode212 >> 2] | 0, HEAP32[$arPatternDetectionMode326 >> 2] | 0, (HEAP32[$arParamLT230 >> 2] | 0) + 184 | 0, +HEAPF64[$pattRatio232 >> 3], $arraydecay235, $marker_num, HEAP32[$matrixCodeType237 >> 2] | 0) | 0) < 0) $retval$4 = -1; else label = 48;
 } while (0);
 L66 : do if ((label | 0) == 48) {
  $arMarkerExtractionMode = $arHandle + 28 | 0;
  if ((HEAP32[$arMarkerExtractionMode >> 2] | 0) == 1) {
   _confidenceCutoff($arHandle);
   $retval$4 = 0;
   break;
  }
  $history_num = $arHandle + 4818296 | 0;
  $$pre = HEAP32[$history_num >> 2] | 0;
  $i$1 = 0;
  while (1) {
   if (($i$1 | 0) >= ($$pre | 0)) break;
   $78 = HEAP32[$marker_num >> 2] | 0;
   $area = $arHandle + 4818304 + ($i$1 * 264 | 0) | 0;
   $arrayidx277 = $arHandle + 4818304 + ($i$1 * 264 | 0) + 56 | 0;
   $arrayidx297 = $arHandle + 4818304 + ($i$1 * 264 | 0) + 64 | 0;
   $cid$0 = -1;
   $j$0 = 0;
   $rlenmin$0 = .5;
   while (1) {
    if (($j$0 | 0) >= ($78 | 0)) break;
    $conv262 = +(HEAP32[$arHandle + 48 + ($j$0 << 8) >> 2] | 0);
    $div = +(HEAP32[$area >> 2] | 0) / $conv262;
    if ($div < .7 | $div > 1.43) {
     $cid$1 = $cid$0;
     $rlenmin$1 = $rlenmin$0;
    } else {
     $sub278 = +HEAPF64[$arHandle + 48 + ($j$0 << 8) + 56 >> 3] - +HEAPF64[$arrayidx277 >> 3];
     $sub298 = +HEAPF64[$arHandle + 48 + ($j$0 << 8) + 64 >> 3] - +HEAPF64[$arrayidx297 >> 3];
     $div315 = ($sub278 * $sub278 + $sub298 * $sub298) / $conv262;
     if ($div315 < $rlenmin$0) {
      $cid$1 = $j$0;
      $rlenmin$1 = $div315;
     } else {
      $cid$1 = $cid$0;
      $rlenmin$1 = $rlenmin$0;
     }
    }
    $cid$0 = $cid$1;
    $j$0 = $j$0 + 1 | 0;
    $rlenmin$0 = $rlenmin$1;
   }
   L82 : do if (($cid$0 | 0) > -1) {
    $85 = HEAP32[$arPatternDetectionMode326 >> 2] | 0;
    $idPatt = $arHandle + 48 + ($cid$0 << 8) + 8 | 0;
    $cfPatt = $arHandle + 48 + ($cid$0 << 8) + 40 | 0;
    $dirMatrix = $arHandle + 48 + ($cid$0 << 8) + 24 | 0;
    $dirPatt = $arHandle + 48 + ($cid$0 << 8) + 20 | 0;
    $idMatrix = $arHandle + 48 + ($cid$0 << 8) + 12 | 0;
    $cfMatrix = $arHandle + 48 + ($cid$0 << 8) + 48 | 0;
    switch ($85 | 0) {
    case 0:
    case 1:
    case 2:
     break;
    case 4:
    case 3:
     {
      $95 = +HEAPF64[$arHandle + 4818304 + ($i$1 * 264 | 0) + 40 >> 3];
      $cfMatrix532 = $arHandle + 4818304 + ($i$1 * 264 | 0) + 48 | 0;
      if (!(+HEAPF64[$cfPatt >> 3] < $95)) if (!(+HEAPF64[$cfMatrix >> 3] < +HEAPF64[$cfMatrix532 >> 3])) break L82;
      HEAPF64[$cfPatt >> 3] = $95;
      HEAP32[$idPatt >> 2] = HEAP32[$arHandle + 4818304 + ($i$1 * 264 | 0) + 8 >> 2];
      HEAPF64[$cfMatrix >> 3] = +HEAPF64[$cfMatrix532 >> 3];
      HEAP32[$idMatrix >> 2] = HEAP32[$arHandle + 4818304 + ($i$1 * 264 | 0) + 12 >> 2];
      $cdir$2 = -1;
      $diffmin$2 = 1.0e8;
      $j$2 = 0;
      while (1) {
       if (($j$2 | 0) == 4) break; else {
        $diff$1 = 0.0;
        $k$1 = 0;
       }
       while (1) {
        if (($k$1 | 0) == 4) break;
        $rem561 = ($k$1 + $j$2 | 0) % 4 | 0;
        $sub564 = +HEAPF64[$arHandle + 4818304 + ($i$1 * 264 | 0) + 168 + ($k$1 << 4) >> 3] - +HEAPF64[$arHandle + 48 + ($cid$0 << 8) + 168 + ($rem561 << 4) >> 3];
        $sub593 = +HEAPF64[$arHandle + 4818304 + ($i$1 * 264 | 0) + 168 + ($k$1 << 4) + 8 >> 3] - +HEAPF64[$arHandle + 48 + ($cid$0 << 8) + 168 + ($rem561 << 4) + 8 >> 3];
        $diff$1 = $diff$1 + ($sub564 * $sub564 + $sub593 * $sub593);
        $k$1 = $k$1 + 1 | 0;
       }
       $cmp614 = $diff$1 < $diffmin$2;
       $cdir$2 = $cmp614 ? $j$2 : $cdir$2;
       $diffmin$2 = $cmp614 ? $diff$1 : $diffmin$2;
       $j$2 = $j$2 + 1 | 0;
      }
      $sub625 = 4 - $cdir$2 | 0;
      HEAP32[$dirPatt >> 2] = ($sub625 + (HEAP32[$arHandle + 4818304 + ($i$1 * 264 | 0) + 20 >> 2] | 0) | 0) % 4 | 0;
      HEAP32[$dirMatrix >> 2] = ($sub625 + (HEAP32[$arHandle + 4818304 + ($i$1 * 264 | 0) + 24 >> 2] | 0) | 0) % 4 | 0;
      break L82;
      break;
     }
    default:
     {
      $retval$4 = -1;
      break L66;
     }
    }
    $cf = $arHandle + 48 + ($cid$0 << 8) + 32 | 0;
    $87 = +HEAPF64[$arHandle + 4818304 + ($i$1 * 264 | 0) + 32 >> 3];
    if (+HEAPF64[$cf >> 3] < $87) {
     HEAPF64[$cf >> 3] = $87;
     $88 = HEAP32[$arHandle + 4818304 + ($i$1 * 264 | 0) + 4 >> 2] | 0;
     HEAP32[$arHandle + 48 + ($cid$0 << 8) + 4 >> 2] = $88;
     $dir = $arHandle + 4818304 + ($i$1 * 264 | 0) + 16 | 0;
     $cdir$0 = -1;
     $diffmin$0 = 1.0e8;
     $j$1 = 0;
     while (1) {
      if (($j$1 | 0) == 4) break; else {
       $diff$0 = 0.0;
       $k$0 = 0;
      }
      while (1) {
       if (($k$0 | 0) == 4) break;
       $rem = ($k$0 + $j$1 | 0) % 4 | 0;
       $sub379 = +HEAPF64[$arHandle + 4818304 + ($i$1 * 264 | 0) + 168 + ($k$0 << 4) >> 3] - +HEAPF64[$arHandle + 48 + ($cid$0 << 8) + 168 + ($rem << 4) >> 3];
       $sub408 = +HEAPF64[$arHandle + 4818304 + ($i$1 * 264 | 0) + 168 + ($k$0 << 4) + 8 >> 3] - +HEAPF64[$arHandle + 48 + ($cid$0 << 8) + 168 + ($rem << 4) + 8 >> 3];
       $diff$0 = $diff$0 + ($sub379 * $sub379 + $sub408 * $sub408);
       $k$0 = $k$0 + 1 | 0;
      }
      if ($diff$0 < $diffmin$0) {
       $cdir$1 = (4 - $j$1 + (HEAP32[$dir >> 2] | 0) | 0) % 4 | 0;
       $diffmin$1 = $diff$0;
      } else {
       $cdir$1 = $cdir$0;
       $diffmin$1 = $diffmin$0;
      }
      $cdir$0 = $cdir$1;
      $diffmin$0 = $diffmin$1;
      $j$1 = $j$1 + 1 | 0;
     }
     HEAP32[$arHandle + 48 + ($cid$0 << 8) + 16 >> 2] = $cdir$0;
     if ($85 >>> 0 < 2) {
      HEAP32[$idPatt >> 2] = $88;
      HEAPF64[$cfPatt >> 3] = $87;
      HEAP32[$dirPatt >> 2] = $cdir$0;
      break;
     } else {
      HEAP32[$idMatrix >> 2] = $88;
      HEAPF64[$cfMatrix >> 3] = $87;
      HEAP32[$dirMatrix >> 2] = $cdir$0;
      break;
     }
    }
   } while (0);
   $i$1 = $i$1 + 1 | 0;
  }
  _confidenceCutoff($arHandle);
  $i$2 = 0;
  $j$3 = 0;
  while (1) {
   if (($i$2 | 0) >= (HEAP32[$history_num >> 2] | 0)) break;
   $count = $arHandle + 4818304 + ($i$2 * 264 | 0) + 256 | 0;
   $inc656 = (HEAP32[$count >> 2] | 0) + 1 | 0;
   HEAP32[$count >> 2] = $inc656;
   if (($inc656 | 0) < 4) {
    if (($i$2 | 0) != ($j$3 | 0)) _memcpy($arHandle + 4818304 + ($j$3 * 264 | 0) | 0, $arHandle + 4818304 + ($i$2 * 264 | 0) | 0, 264) | 0;
    $j$4 = $j$3 + 1 | 0;
   } else $j$4 = $j$3;
   $i$2 = $i$2 + 1 | 0;
   $j$3 = $j$4;
  }
  HEAP32[$history_num >> 2] = $j$3;
  $i$3 = 0;
  while (1) {
   $109 = HEAP32[$marker_num >> 2] | 0;
   if (($i$3 | 0) >= ($109 | 0)) break;
   $arrayidx683 = $arHandle + 48 + ($i$3 << 8) | 0;
   $110 = HEAP32[$arHandle + 48 + ($i$3 << 8) + 4 >> 2] | 0;
   if (($110 | 0) >= 0) {
    $111 = HEAP32[$history_num >> 2] | 0;
    $j$5 = 0;
    while (1) {
     if (($j$5 | 0) >= ($111 | 0)) break;
     if ((HEAP32[$arHandle + 4818304 + ($j$5 * 264 | 0) + 4 >> 2] | 0) == ($110 | 0)) break;
     $j$5 = $j$5 + 1 | 0;
    }
    $arrayidx695$le = $arHandle + 4818304 + ($j$5 * 264 | 0) | 0;
    if (($j$5 | 0) == ($111 | 0)) {
     if (($111 | 0) == 60) break;
     HEAP32[$history_num >> 2] = $111 + 1;
    }
    _memcpy($arrayidx695$le | 0, $arrayidx683 | 0, 256) | 0;
    HEAP32[$arHandle + 4818304 + ($j$5 * 264 | 0) + 256 >> 2] = 1;
   }
   $i$3 = $i$3 + 1 | 0;
  }
  if ((HEAP32[$arMarkerExtractionMode >> 2] | 0) == 2) $retval$4 = 0; else {
   $115 = $109;
   $i$4 = 0;
   while (1) {
    if (($i$4 | 0) >= (HEAP32[$history_num >> 2] | 0)) {
     $retval$4 = 0;
     break L66;
    }
    $marker748 = $arHandle + 4818304 + ($i$4 * 264 | 0) | 0;
    $arrayidx771 = $arHandle + 4818304 + ($i$4 * 264 | 0) + 56 | 0;
    $arrayidx792 = $arHandle + 4818304 + ($i$4 * 264 | 0) + 64 | 0;
    $j$6 = 0;
    while (1) {
     if (($j$6 | 0) >= ($115 | 0)) break;
     $conv754 = +(HEAP32[$arHandle + 48 + ($j$6 << 8) >> 2] | 0);
     $div755 = +(HEAP32[$marker748 >> 2] | 0) / $conv754;
     if (!($div755 < .7 | $div755 > 1.43)) {
      $sub772 = +HEAPF64[$arHandle + 48 + ($j$6 << 8) + 56 >> 3] - +HEAPF64[$arrayidx771 >> 3];
      $sub793 = +HEAPF64[$arHandle + 48 + ($j$6 << 8) + 64 >> 3] - +HEAPF64[$arrayidx792 >> 3];
      if (($sub772 * $sub772 + $sub793 * $sub793) / $conv754 < .5) break;
     }
     $j$6 = $j$6 + 1 | 0;
    }
    if (($j$6 | 0) == ($115 | 0)) {
     _memcpy($arHandle + 48 + ($115 << 8) | 0, $marker748 | 0, 256) | 0;
     $inc829 = (HEAP32[$marker_num >> 2] | 0) + 1 | 0;
     HEAP32[$marker_num >> 2] = $inc829;
     $124 = $inc829;
    } else $124 = $115;
    $115 = $124;
    $i$4 = $i$4 + 1 | 0;
   }
  }
 } while (0);
 STACKTOP = sp;
 return $retval$4 | 0;
}

function _printf_core($f, $fmt, $ap, $nl_arg, $nl_type) {
 $f = $f | 0;
 $fmt = $fmt | 0;
 $ap = $ap | 0;
 $nl_arg = $nl_arg | 0;
 $nl_type = $nl_type | 0;
 var $$lcssa199 = 0, $$pre248 = 0, $$pre249 = 0, $0 = 0, $1 = 0, $10 = 0, $101 = 0, $104 = 0, $105 = 0, $107 = 0, $109 = 0, $11 = 0, $112 = 0, $114 = 0, $115 = 0, $116 = 0, $12 = 0, $121 = 0, $122 = 0, $125 = 0, $127 = 0, $128 = 0, $137 = 0, $144 = 0, $145 = 0, $147 = 0, $149 = 0, $150 = 0, $2 = 0, $27 = 0, $28 = 0, $3 = 0, $30 = 0, $37 = 0, $4 = 0, $46 = 0, $47 = 0, $49 = 0, $51 = 0, $53 = 0, $58 = 0, $59 = 0, $64 = 0, $7 = 0, $75 = 0, $85 = 0, $89 = 0, $91 = 0, $94 = 0, $95 = 0, $99 = 0, $a$0 = 0, $a$1 = 0, $a$2 = 0, $add$ptr = 0, $add$ptr139 = 0, $add$ptr206 = 0, $add$ptr341 = 0, $add323 = 0, $add396 = 0, $add442 = 0, $and220 = 0, $arg = 0, $argpos$0 = 0, $arrayidx119 = 0, $arrayidx31 = 0, $arrayidx371 = 0, $arrayidx68 = 0, $buf = 0, $call = 0, $call104 = 0, $call160 = 0, $call345 = 0, $call357 = 0, $call385 = 0, $call412 = 0, $cmp185 = 0, $cmp37 = 0, $cmp97 = 0, $cnt$0 = 0, $cnt$1 = 0, $cond149 = 0, $conv175 = 0, $conv208 = 0, $fl$0$lcssa = 0, $fl$0219 = 0, $fl$1 = 0, $fl$1$and220 = 0, $fl$3 = 0, $fl$4 = 0, $fl$6 = 0, $i$0$lcssa = 0, $i$0$lcssa256 = 0, $i$0229 = 0, $i$1238 = 0, $i$2210 = 0, $i$3207 = 0, $incdec$ptr = 0, $incdec$ptr171 = 0, $incdec$ptr23 = 0, $incdec$ptr62 = 0, $isdigittmp = 0, $isdigittmp187 = 0, $isdigittmp189 = 0, $l$0 = 0, $l$1228 = 0, $l$2 = 0, $l10n$0 = 0, $l10n$1 = 0, $l10n$2 = 0, $l10n$3 = 0, $mb = 0, $or = 0, $or$cond = 0, $or$cond193 = 0, $p$0 = 0, $p$1 = 0, $p$2 = 0, $p$4253 = 0, $p$5 = 0, $pl$0 = 0, $pl$1 = 0, $pl$2 = 0, $prefix$0 = 0, $prefix$1 = 0, $prefix$2 = 0, $retval$0 = 0, $s = 0, $shl = 0, $st$0 = 0, $storemerge = 0, $storemerge186218 = 0, $storemerge191 = 0, $sub$ptr$lhs$cast318 = 0, $sub$ptr$sub = 0, $sub$ptr$sub269 = 0, $sub$ptr$sub434 = 0, $sub$ptr$sub434$p$5 = 0, $sub49216 = 0, $sub49220 = 0, $t$0 = 0, $t$1 = 0, $tobool25 = 0, $tobool358 = 0, $w$0 = 0, $w$1 = 0, $w$2 = 0, $wc = 0, $ws$0230 = 0, $ws$1239 = 0, $z$0$lcssa = 0, $z$0212 = 0, $z$2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(64);
 $s = sp + 16 | 0;
 $arg = sp;
 $buf = sp + 24 | 0;
 $wc = sp + 8 | 0;
 $mb = sp + 20 | 0;
 HEAP32[$s >> 2] = $fmt;
 $tobool25 = ($f | 0) != 0;
 $add$ptr206 = $buf + 40 | 0;
 $sub$ptr$lhs$cast318 = $add$ptr206;
 $add$ptr341 = $buf + 39 | 0;
 $arrayidx371 = $wc + 4 | 0;
 $1 = $fmt;
 $cnt$0 = 0;
 $l$0 = 0;
 $l10n$0 = 0;
 L1 : while (1) {
  do if (($cnt$0 | 0) > -1) if (($l$0 | 0) > (2147483647 - $cnt$0 | 0)) {
   $call = ___errno_location() | 0;
   HEAP32[$call >> 2] = 75;
   $cnt$1 = -1;
   break;
  } else {
   $cnt$1 = $l$0 + $cnt$0 | 0;
   break;
  } else $cnt$1 = $cnt$0; while (0);
  $0 = HEAP8[$1 >> 0] | 0;
  if (!($0 << 24 >> 24)) {
   label = 87;
   break;
  } else {
   $2 = $0;
   $3 = $1;
  }
  L9 : while (1) {
   switch ($2 << 24 >> 24) {
   case 37:
    {
     $4 = $3;
     $z$0212 = $3;
     label = 9;
     break L9;
     break;
    }
   case 0:
    {
     $7 = $3;
     $z$0$lcssa = $3;
     break L9;
     break;
    }
   default:
    {}
   }
   $incdec$ptr = $3 + 1 | 0;
   HEAP32[$s >> 2] = $incdec$ptr;
   $2 = HEAP8[$incdec$ptr >> 0] | 0;
   $3 = $incdec$ptr;
  }
  L12 : do if ((label | 0) == 9) while (1) {
   label = 0;
   if ((HEAP8[$4 + 1 >> 0] | 0) != 37) {
    $7 = $4;
    $z$0$lcssa = $z$0212;
    break L12;
   }
   $incdec$ptr23 = $z$0212 + 1 | 0;
   $add$ptr = $4 + 2 | 0;
   HEAP32[$s >> 2] = $add$ptr;
   if ((HEAP8[$add$ptr >> 0] | 0) == 37) {
    $4 = $add$ptr;
    $z$0212 = $incdec$ptr23;
    label = 9;
   } else {
    $7 = $add$ptr;
    $z$0$lcssa = $incdec$ptr23;
    break;
   }
  } while (0);
  $sub$ptr$sub = $z$0$lcssa - $1 | 0;
  if ($tobool25) _out($f, $1, $sub$ptr$sub);
  if ($sub$ptr$sub | 0) {
   $1 = $7;
   $cnt$0 = $cnt$1;
   $l$0 = $sub$ptr$sub;
   continue;
  }
  $arrayidx31 = $7 + 1 | 0;
  $isdigittmp = (HEAP8[$arrayidx31 >> 0] | 0) + -48 | 0;
  if ($isdigittmp >>> 0 < 10) {
   $cmp37 = (HEAP8[$7 + 2 >> 0] | 0) == 36;
   $argpos$0 = $cmp37 ? $isdigittmp : -1;
   $l10n$1 = $cmp37 ? 1 : $l10n$0;
   $storemerge = $cmp37 ? $7 + 3 | 0 : $arrayidx31;
  } else {
   $argpos$0 = -1;
   $l10n$1 = $l10n$0;
   $storemerge = $arrayidx31;
  }
  HEAP32[$s >> 2] = $storemerge;
  $10 = HEAP8[$storemerge >> 0] | 0;
  $sub49216 = ($10 << 24 >> 24) + -32 | 0;
  L24 : do if ($sub49216 >>> 0 < 32) {
   $149 = $10;
   $fl$0219 = 0;
   $storemerge186218 = $storemerge;
   $sub49220 = $sub49216;
   while (1) {
    $shl = 1 << $sub49220;
    if (!($shl & 75913)) {
     $$lcssa199 = $149;
     $12 = $storemerge186218;
     $fl$0$lcssa = $fl$0219;
     break L24;
    }
    $or = $shl | $fl$0219;
    $incdec$ptr62 = $storemerge186218 + 1 | 0;
    HEAP32[$s >> 2] = $incdec$ptr62;
    $11 = HEAP8[$incdec$ptr62 >> 0] | 0;
    $sub49220 = ($11 << 24 >> 24) + -32 | 0;
    if ($sub49220 >>> 0 >= 32) {
     $$lcssa199 = $11;
     $12 = $incdec$ptr62;
     $fl$0$lcssa = $or;
     break;
    } else {
     $149 = $11;
     $fl$0219 = $or;
     $storemerge186218 = $incdec$ptr62;
    }
   }
  } else {
   $$lcssa199 = $10;
   $12 = $storemerge;
   $fl$0$lcssa = 0;
  } while (0);
  if ($$lcssa199 << 24 >> 24 == 42) {
   $arrayidx68 = $12 + 1 | 0;
   $isdigittmp189 = (HEAP8[$arrayidx68 >> 0] | 0) + -48 | 0;
   if ($isdigittmp189 >>> 0 < 10) if ((HEAP8[$12 + 2 >> 0] | 0) == 36) {
    HEAP32[$nl_type + ($isdigittmp189 << 2) >> 2] = 10;
    $l10n$2 = 1;
    $storemerge191 = $12 + 3 | 0;
    $w$0 = HEAP32[$nl_arg + ((HEAP8[$arrayidx68 >> 0] | 0) + -48 << 3) >> 2] | 0;
   } else label = 23; else label = 23;
   if ((label | 0) == 23) {
    label = 0;
    if ($l10n$1 | 0) {
     $retval$0 = -1;
     break;
    }
    if ($tobool25) {
     $27 = (HEAP32[$ap >> 2] | 0) + (4 - 1) & ~(4 - 1);
     $28 = HEAP32[$27 >> 2] | 0;
     HEAP32[$ap >> 2] = $27 + 4;
     $l10n$2 = 0;
     $storemerge191 = $arrayidx68;
     $w$0 = $28;
    } else {
     $l10n$2 = 0;
     $storemerge191 = $arrayidx68;
     $w$0 = 0;
    }
   }
   HEAP32[$s >> 2] = $storemerge191;
   $cmp97 = ($w$0 | 0) < 0;
   $30 = $storemerge191;
   $fl$1 = $cmp97 ? $fl$0$lcssa | 8192 : $fl$0$lcssa;
   $l10n$3 = $l10n$2;
   $w$1 = $cmp97 ? 0 - $w$0 | 0 : $w$0;
  } else {
   $call104 = _getint($s) | 0;
   if (($call104 | 0) < 0) {
    $retval$0 = -1;
    break;
   }
   $30 = HEAP32[$s >> 2] | 0;
   $fl$1 = $fl$0$lcssa;
   $l10n$3 = $l10n$1;
   $w$1 = $call104;
  }
  do if ((HEAP8[$30 >> 0] | 0) == 46) {
   if ((HEAP8[$30 + 1 >> 0] | 0) != 42) {
    HEAP32[$s >> 2] = $30 + 1;
    $call160 = _getint($s) | 0;
    $$pre248 = HEAP32[$s >> 2] | 0;
    $p$0 = $call160;
    break;
   }
   $arrayidx119 = $30 + 2 | 0;
   $isdigittmp187 = (HEAP8[$arrayidx119 >> 0] | 0) + -48 | 0;
   if ($isdigittmp187 >>> 0 < 10) if ((HEAP8[$30 + 3 >> 0] | 0) == 36) {
    HEAP32[$nl_type + ($isdigittmp187 << 2) >> 2] = 10;
    $37 = HEAP32[$nl_arg + ((HEAP8[$arrayidx119 >> 0] | 0) + -48 << 3) >> 2] | 0;
    $add$ptr139 = $30 + 4 | 0;
    HEAP32[$s >> 2] = $add$ptr139;
    $$pre248 = $add$ptr139;
    $p$0 = $37;
    break;
   }
   if ($l10n$3 | 0) {
    $retval$0 = -1;
    break L1;
   }
   if ($tobool25) {
    $46 = (HEAP32[$ap >> 2] | 0) + (4 - 1) & ~(4 - 1);
    $47 = HEAP32[$46 >> 2] | 0;
    HEAP32[$ap >> 2] = $46 + 4;
    $cond149 = $47;
   } else $cond149 = 0;
   HEAP32[$s >> 2] = $arrayidx119;
   $$pre248 = $arrayidx119;
   $p$0 = $cond149;
  } else {
   $$pre248 = $30;
   $p$0 = -1;
  } while (0);
  $49 = $$pre248;
  $st$0 = 0;
  while (1) {
   if (((HEAP8[$49 >> 0] | 0) + -65 | 0) >>> 0 > 57) {
    $retval$0 = -1;
    break L1;
   }
   $incdec$ptr171 = $49 + 1 | 0;
   HEAP32[$s >> 2] = $incdec$ptr171;
   $51 = HEAP8[(HEAP8[$49 >> 0] | 0) + -65 + (11793 + ($st$0 * 58 | 0)) >> 0] | 0;
   $conv175 = $51 & 255;
   if (($conv175 + -1 | 0) >>> 0 < 8) {
    $49 = $incdec$ptr171;
    $st$0 = $conv175;
   } else break;
  }
  if (!($51 << 24 >> 24)) {
   $retval$0 = -1;
   break;
  }
  $cmp185 = ($argpos$0 | 0) > -1;
  do if ($51 << 24 >> 24 == 19) if ($cmp185) {
   $retval$0 = -1;
   break L1;
  } else label = 49; else {
   if ($cmp185) {
    HEAP32[$nl_type + ($argpos$0 << 2) >> 2] = $conv175;
    $53 = $nl_arg + ($argpos$0 << 3) | 0;
    $58 = HEAP32[$53 + 4 >> 2] | 0;
    $59 = $arg;
    HEAP32[$59 >> 2] = HEAP32[$53 >> 2];
    HEAP32[$59 + 4 >> 2] = $58;
    label = 49;
    break;
   }
   if (!$tobool25) {
    $retval$0 = 0;
    break L1;
   }
   _pop_arg($arg, $conv175, $ap);
  } while (0);
  if ((label | 0) == 49) {
   label = 0;
   if (!$tobool25) {
    $1 = $incdec$ptr171;
    $cnt$0 = $cnt$1;
    $l$0 = 0;
    $l10n$0 = $l10n$3;
    continue;
   }
  }
  $conv208 = HEAP8[$49 >> 0] | 0;
  $t$0 = ($st$0 | 0) != 0 & ($conv208 & 15 | 0) == 3 ? $conv208 & -33 : $conv208;
  $and220 = $fl$1 & -65537;
  $fl$1$and220 = ($fl$1 & 8192 | 0) == 0 ? $fl$1 : $and220;
  L71 : do switch ($t$0 | 0) {
  case 110:
   {
    switch (($st$0 & 255) << 24 >> 24) {
    case 0:
     {
      HEAP32[HEAP32[$arg >> 2] >> 2] = $cnt$1;
      $1 = $incdec$ptr171;
      $cnt$0 = $cnt$1;
      $l$0 = 0;
      $l10n$0 = $l10n$3;
      continue L1;
      break;
     }
    case 1:
     {
      HEAP32[HEAP32[$arg >> 2] >> 2] = $cnt$1;
      $1 = $incdec$ptr171;
      $cnt$0 = $cnt$1;
      $l$0 = 0;
      $l10n$0 = $l10n$3;
      continue L1;
      break;
     }
    case 2:
     {
      $75 = HEAP32[$arg >> 2] | 0;
      HEAP32[$75 >> 2] = $cnt$1;
      HEAP32[$75 + 4 >> 2] = (($cnt$1 | 0) < 0) << 31 >> 31;
      $1 = $incdec$ptr171;
      $cnt$0 = $cnt$1;
      $l$0 = 0;
      $l10n$0 = $l10n$3;
      continue L1;
      break;
     }
    case 3:
     {
      HEAP16[HEAP32[$arg >> 2] >> 1] = $cnt$1;
      $1 = $incdec$ptr171;
      $cnt$0 = $cnt$1;
      $l$0 = 0;
      $l10n$0 = $l10n$3;
      continue L1;
      break;
     }
    case 4:
     {
      HEAP8[HEAP32[$arg >> 2] >> 0] = $cnt$1;
      $1 = $incdec$ptr171;
      $cnt$0 = $cnt$1;
      $l$0 = 0;
      $l10n$0 = $l10n$3;
      continue L1;
      break;
     }
    case 6:
     {
      HEAP32[HEAP32[$arg >> 2] >> 2] = $cnt$1;
      $1 = $incdec$ptr171;
      $cnt$0 = $cnt$1;
      $l$0 = 0;
      $l10n$0 = $l10n$3;
      continue L1;
      break;
     }
    case 7:
     {
      $85 = HEAP32[$arg >> 2] | 0;
      HEAP32[$85 >> 2] = $cnt$1;
      HEAP32[$85 + 4 >> 2] = (($cnt$1 | 0) < 0) << 31 >> 31;
      $1 = $incdec$ptr171;
      $cnt$0 = $cnt$1;
      $l$0 = 0;
      $l10n$0 = $l10n$3;
      continue L1;
      break;
     }
    default:
     {
      $1 = $incdec$ptr171;
      $cnt$0 = $cnt$1;
      $l$0 = 0;
      $l10n$0 = $l10n$3;
      continue L1;
     }
    }
    break;
   }
  case 112:
   {
    $fl$3 = $fl$1$and220 | 8;
    $p$1 = $p$0 >>> 0 > 8 ? $p$0 : 8;
    $t$1 = 120;
    label = 61;
    break;
   }
  case 88:
  case 120:
   {
    $fl$3 = $fl$1$and220;
    $p$1 = $p$0;
    $t$1 = $t$0;
    label = 61;
    break;
   }
  case 111:
   {
    $99 = $arg;
    $101 = HEAP32[$99 >> 2] | 0;
    $104 = HEAP32[$99 + 4 >> 2] | 0;
    $105 = _fmt_o($101, $104, $add$ptr206) | 0;
    $sub$ptr$sub269 = $sub$ptr$lhs$cast318 - $105 | 0;
    $125 = $101;
    $127 = $104;
    $a$0 = $105;
    $fl$4 = $fl$1$and220;
    $p$2 = ($fl$1$and220 & 8 | 0) == 0 | ($p$0 | 0) > ($sub$ptr$sub269 | 0) ? $p$0 : $sub$ptr$sub269 + 1 | 0;
    $pl$1 = 0;
    $prefix$1 = 12257;
    label = 67;
    break;
   }
  case 105:
  case 100:
   {
    $107 = $arg;
    $109 = HEAP32[$107 >> 2] | 0;
    $112 = HEAP32[$107 + 4 >> 2] | 0;
    if (($112 | 0) < 0) {
     $114 = _i64Subtract(0, 0, $109 | 0, $112 | 0) | 0;
     $115 = tempRet0;
     $116 = $arg;
     HEAP32[$116 >> 2] = $114;
     HEAP32[$116 + 4 >> 2] = $115;
     $121 = $114;
     $122 = $115;
     $pl$0 = 1;
     $prefix$0 = 12257;
     label = 66;
     break L71;
    } else {
     $121 = $109;
     $122 = $112;
     $pl$0 = ($fl$1$and220 & 2049 | 0) != 0 & 1;
     $prefix$0 = ($fl$1$and220 & 2048 | 0) == 0 ? (($fl$1$and220 & 1 | 0) == 0 ? 12257 : 12259) : 12258;
     label = 66;
     break L71;
    }
    break;
   }
  case 117:
   {
    $64 = $arg;
    $121 = HEAP32[$64 >> 2] | 0;
    $122 = HEAP32[$64 + 4 >> 2] | 0;
    $pl$0 = 0;
    $prefix$0 = 12257;
    label = 66;
    break;
   }
  case 99:
   {
    HEAP8[$add$ptr341 >> 0] = HEAP32[$arg >> 2];
    $a$2 = $add$ptr341;
    $fl$6 = $and220;
    $p$5 = 1;
    $pl$2 = 0;
    $prefix$2 = 12257;
    $z$2 = $add$ptr206;
    break;
   }
  case 109:
   {
    $call345 = ___errno_location() | 0;
    $a$1 = _strerror(HEAP32[$call345 >> 2] | 0) | 0;
    label = 71;
    break;
   }
  case 115:
   {
    $137 = HEAP32[$arg >> 2] | 0;
    $a$1 = $137 | 0 ? $137 : 12267;
    label = 71;
    break;
   }
  case 67:
   {
    HEAP32[$wc >> 2] = HEAP32[$arg >> 2];
    HEAP32[$arrayidx371 >> 2] = 0;
    HEAP32[$arg >> 2] = $wc;
    $150 = $wc;
    $p$4253 = -1;
    label = 75;
    break;
   }
  case 83:
   {
    $$pre249 = HEAP32[$arg >> 2] | 0;
    if (!$p$0) {
     _pad_684($f, 32, $w$1, 0, $fl$1$and220);
     $i$0$lcssa256 = 0;
     label = 84;
    } else {
     $150 = $$pre249;
     $p$4253 = $p$0;
     label = 75;
    }
    break;
   }
  case 65:
  case 71:
  case 70:
  case 69:
  case 97:
  case 103:
  case 102:
  case 101:
   {
    $1 = $incdec$ptr171;
    $cnt$0 = $cnt$1;
    $l$0 = _fmt_fp($f, +HEAPF64[$arg >> 3], $w$1, $p$0, $fl$1$and220, $t$0) | 0;
    $l10n$0 = $l10n$3;
    continue L1;
    break;
   }
  default:
   {
    $a$2 = $1;
    $fl$6 = $fl$1$and220;
    $p$5 = $p$0;
    $pl$2 = 0;
    $prefix$2 = 12257;
    $z$2 = $add$ptr206;
   }
  } while (0);
  L95 : do if ((label | 0) == 61) {
   label = 0;
   $89 = $arg;
   $91 = HEAP32[$89 >> 2] | 0;
   $94 = HEAP32[$89 + 4 >> 2] | 0;
   $95 = _fmt_x($91, $94, $add$ptr206, $t$1 & 32) | 0;
   $or$cond193 = ($fl$3 & 8 | 0) == 0 | ($91 | 0) == 0 & ($94 | 0) == 0;
   $125 = $91;
   $127 = $94;
   $a$0 = $95;
   $fl$4 = $fl$3;
   $p$2 = $p$1;
   $pl$1 = $or$cond193 ? 0 : 2;
   $prefix$1 = $or$cond193 ? 12257 : 12257 + ($t$1 >> 4) | 0;
   label = 67;
  } else if ((label | 0) == 66) {
   label = 0;
   $125 = $121;
   $127 = $122;
   $a$0 = _fmt_u($121, $122, $add$ptr206) | 0;
   $fl$4 = $fl$1$and220;
   $p$2 = $p$0;
   $pl$1 = $pl$0;
   $prefix$1 = $prefix$0;
   label = 67;
  } else if ((label | 0) == 71) {
   label = 0;
   $call357 = _memchr($a$1, 0, $p$0) | 0;
   $tobool358 = ($call357 | 0) == 0;
   $a$2 = $a$1;
   $fl$6 = $and220;
   $p$5 = $tobool358 ? $p$0 : $call357 - $a$1 | 0;
   $pl$2 = 0;
   $prefix$2 = 12257;
   $z$2 = $tobool358 ? $a$1 + $p$0 | 0 : $call357;
  } else if ((label | 0) == 75) {
   label = 0;
   $i$0229 = 0;
   $l$1228 = 0;
   $ws$0230 = $150;
   while (1) {
    $144 = HEAP32[$ws$0230 >> 2] | 0;
    if (!$144) {
     $i$0$lcssa = $i$0229;
     $l$2 = $l$1228;
     break;
    }
    $call385 = _wctomb($mb, $144) | 0;
    if (($call385 | 0) < 0 | $call385 >>> 0 > ($p$4253 - $i$0229 | 0) >>> 0) {
     $i$0$lcssa = $i$0229;
     $l$2 = $call385;
     break;
    }
    $add396 = $call385 + $i$0229 | 0;
    if ($p$4253 >>> 0 > $add396 >>> 0) {
     $i$0229 = $add396;
     $l$1228 = $call385;
     $ws$0230 = $ws$0230 + 4 | 0;
    } else {
     $i$0$lcssa = $add396;
     $l$2 = $call385;
     break;
    }
   }
   if (($l$2 | 0) < 0) {
    $retval$0 = -1;
    break L1;
   }
   _pad_684($f, 32, $w$1, $i$0$lcssa, $fl$1$and220);
   if (!$i$0$lcssa) {
    $i$0$lcssa256 = 0;
    label = 84;
   } else {
    $i$1238 = 0;
    $ws$1239 = $150;
    while (1) {
     $145 = HEAP32[$ws$1239 >> 2] | 0;
     if (!$145) {
      $i$0$lcssa256 = $i$0$lcssa;
      label = 84;
      break L95;
     }
     $call412 = _wctomb($mb, $145) | 0;
     $i$1238 = $call412 + $i$1238 | 0;
     if (($i$1238 | 0) > ($i$0$lcssa | 0)) {
      $i$0$lcssa256 = $i$0$lcssa;
      label = 84;
      break L95;
     }
     _out($f, $mb, $call412);
     if ($i$1238 >>> 0 >= $i$0$lcssa >>> 0) {
      $i$0$lcssa256 = $i$0$lcssa;
      label = 84;
      break;
     } else $ws$1239 = $ws$1239 + 4 | 0;
    }
   }
  } while (0);
  if ((label | 0) == 67) {
   label = 0;
   $128 = ($125 | 0) != 0 | ($127 | 0) != 0;
   $or$cond = ($p$2 | 0) != 0 | $128;
   $add323 = (($128 ^ 1) & 1) + ($sub$ptr$lhs$cast318 - $a$0) | 0;
   $a$2 = $or$cond ? $a$0 : $add$ptr206;
   $fl$6 = ($p$2 | 0) > -1 ? $fl$4 & -65537 : $fl$4;
   $p$5 = $or$cond ? (($p$2 | 0) > ($add323 | 0) ? $p$2 : $add323) : $p$2;
   $pl$2 = $pl$1;
   $prefix$2 = $prefix$1;
   $z$2 = $add$ptr206;
  } else if ((label | 0) == 84) {
   label = 0;
   _pad_684($f, 32, $w$1, $i$0$lcssa256, $fl$1$and220 ^ 8192);
   $1 = $incdec$ptr171;
   $cnt$0 = $cnt$1;
   $l$0 = ($w$1 | 0) > ($i$0$lcssa256 | 0) ? $w$1 : $i$0$lcssa256;
   $l10n$0 = $l10n$3;
   continue;
  }
  $sub$ptr$sub434 = $z$2 - $a$2 | 0;
  $sub$ptr$sub434$p$5 = ($p$5 | 0) < ($sub$ptr$sub434 | 0) ? $sub$ptr$sub434 : $p$5;
  $add442 = $sub$ptr$sub434$p$5 + $pl$2 | 0;
  $w$2 = ($w$1 | 0) < ($add442 | 0) ? $add442 : $w$1;
  _pad_684($f, 32, $w$2, $add442, $fl$6);
  _out($f, $prefix$2, $pl$2);
  _pad_684($f, 48, $w$2, $add442, $fl$6 ^ 65536);
  _pad_684($f, 48, $sub$ptr$sub434$p$5, $sub$ptr$sub434, 0);
  _out($f, $a$2, $sub$ptr$sub434);
  _pad_684($f, 32, $w$2, $add442, $fl$6 ^ 8192);
  $1 = $incdec$ptr171;
  $cnt$0 = $cnt$1;
  $l$0 = $w$2;
  $l10n$0 = $l10n$3;
 }
 L114 : do if ((label | 0) == 87) if (!$f) if (!$l10n$0) $retval$0 = 0; else {
  $i$2210 = 1;
  while (1) {
   $147 = HEAP32[$nl_type + ($i$2210 << 2) >> 2] | 0;
   if (!$147) {
    $i$3207 = $i$2210;
    break;
   }
   _pop_arg($nl_arg + ($i$2210 << 3) | 0, $147, $ap);
   $i$2210 = $i$2210 + 1 | 0;
   if (($i$2210 | 0) >= 10) {
    $retval$0 = 1;
    break L114;
   }
  }
  while (1) {
   if (HEAP32[$nl_type + ($i$3207 << 2) >> 2] | 0) {
    $retval$0 = -1;
    break L114;
   }
   $i$3207 = $i$3207 + 1 | 0;
   if (($i$3207 | 0) >= 10) {
    $retval$0 = 1;
    break;
   }
  }
 } else $retval$0 = $cnt$1; while (0);
 STACKTOP = sp;
 return $retval$0 | 0;
}

function __ZN10__cxxabiv112_GLOBAL__N_114parse_encodingINS0_2DbEEEPKcS4_S4_RT_($first, $last, $db) {
 $first = $first | 0;
 $last = $last | 0;
 $db = $db | 0;
 var $20 = 0, $22 = 0, $24 = 0, $25 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $32 = 0, $34 = 0, $35 = 0, $38 = 0, $4 = 0, $41 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $49 = 0, $50 = 0, $51 = 0, $53 = 0, $56 = 0, $57 = 0, $64 = 0, $7 = 0, $8 = 0, $__end_$i281 = 0, $__i$0$i$i = 0, $__i$0$i$i$i$i = 0, $__i$0$i$i220 = 0, $__i$0$i$i284 = 0, $__size_$i$i$i$i$i156 = 0, $__size_$i$i$i170 = 0, $__size_$i1$i$i$i$i = 0, $__size_$i3$i$i$i161 = 0, $__size_$i3$i$i172 = 0, $add$ptr$i153 = 0, $add$ptr$i194 = 0, $call105 = 0, $call55 = 0, $call9 = 0, $cleanup$dest$slot$4 = 0, $cleanup$dest$slot$6 = 0, $cond$i$i$i236 = 0, $cond$i$i$i245 = 0, $cond$i$i1$i = 0, $cond$i$i266 = 0, $cond$i$i275 = 0, $encoding_depth = 0, $first$addr$1 = 0, $first$addr$2 = 0, $first$addr$5 = 0, $first$addr$6 = 0, $first32 = 0, $first67 = 0, $first_arg$0$off0$ph = 0, $first_arg$3$off0$ph = 0, $incdec$ptr$i$i$i = 0, $incdec$ptr$i$i$i197 = 0, $k$0 = 0, $k132$0 = 0, $ref$tmp$i$i$i$i = 0, $ret1 = 0, $ret2 = 0, $retval$11 = 0, $sb = 0, $sb2 = 0, $second = 0, $su = 0, $sub$ptr$div$i = 0, $sub$ptr$div$i182 = 0, $sub334$in = 0, $sub49337$in = 0, $t$0 = 0, $t$1 = 0, $t$1$ph = 0, $t$3 = 0, $tag_templates = 0, $tobool$i$i$i$i = 0, $tobool$i$i$i$i$i = 0, $tobool$i$i$i$i$i135 = 0, $tobool$i$i$i$i$i157 = 0, $tobool$i$i$i270 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(64);
 $ref$tmp$i$i$i$i = sp + 48 | 0;
 $su = sp + 40 | 0;
 $sb = sp + 32 | 0;
 $sb2 = sp + 24 | 0;
 $ret2 = sp + 12 | 0;
 $ret1 = sp;
 if (($first | 0) == ($last | 0)) {
  $first$addr$6 = $first;
  label = 88;
 } else {
  $encoding_depth = $db + 56 | 0;
  __ZN10__cxxabiv112_GLOBAL__N_110save_valueIjEC2ERj($su, $encoding_depth);
  HEAP32[$encoding_depth >> 2] = (HEAP32[$encoding_depth >> 2] | 0) + 1;
  $tag_templates = $db + 61 | 0;
  __ZN10__cxxabiv112_GLOBAL__N_110save_valueIbEC2ERb($sb, $tag_templates);
  if ((HEAP32[$encoding_depth >> 2] | 0) >>> 0 > 1) HEAP8[$tag_templates >> 0] = 1;
  L6 : do switch (HEAP8[$first >> 0] | 0) {
  case 84:
  case 71:
   {
    $cleanup$dest$slot$6 = 1;
    $first$addr$5 = __ZN10__cxxabiv112_GLOBAL__N_118parse_special_nameINS0_2DbEEEPKcS4_S4_RT_($first, $last, $db) | 0;
    break;
   }
  default:
   {
    $call9 = __ZN10__cxxabiv112_GLOBAL__N_110parse_nameINS0_2DbEEEPKcS4_S4_RT_($first, $last, $db) | 0;
    $3 = HEAP32[$db + 48 >> 2] | 0;
    $4 = HEAP32[$db + 52 >> 2] | 0;
    L8 : do if (($call9 | 0) == ($first | 0)) $first$addr$2 = $first; else if (($call9 | 0) == ($last | 0)) $first$addr$2 = $last; else {
     switch (HEAP8[$call9 >> 0] | 0) {
     case 46:
     case 69:
      {
       $first$addr$2 = $call9;
       break L8;
       break;
      }
     default:
      {}
     }
     __ZN10__cxxabiv112_GLOBAL__N_110save_valueIbEC2ERb($sb2, $tag_templates);
     HEAP8[$tag_templates >> 0] = 0;
     HEAP32[$ret2 >> 2] = 0;
     HEAP32[$ret2 + 4 >> 2] = 0;
     HEAP32[$ret2 + 8 >> 2] = 0;
     $__i$0$i$i284 = 0;
     while (1) {
      if (($__i$0$i$i284 | 0) == 3) break;
      HEAP32[$ret2 + ($__i$0$i$i284 << 2) >> 2] = 0;
      $__i$0$i$i284 = $__i$0$i$i284 + 1 | 0;
     }
     $__end_$i281 = $db + 4 | 0;
     $7 = HEAP32[$__end_$i281 >> 2] | 0;
     L16 : do if ((HEAP32[$db >> 2] | 0) == ($7 | 0)) {
      $cleanup$dest$slot$4 = 0;
      $first$addr$1 = $first;
     } else {
      $first32 = $7 + -24 | 0;
      $8 = HEAP8[$first32 + 11 >> 0] | 0;
      $tobool$i$i$i270 = $8 << 24 >> 24 < 0;
      if ($tobool$i$i$i270) $cond$i$i275 = HEAP32[$7 + -20 >> 2] | 0; else $cond$i$i275 = $8 & 255;
      if (!$cond$i$i275) {
       $cleanup$dest$slot$4 = 0;
       $first$addr$1 = $first;
      } else {
       if (!(HEAP8[$db + 60 >> 0] | 0)) {
        if ($tobool$i$i$i270) {
         $cond$i$i1$i = HEAP32[$first32 >> 2] | 0;
         $cond$i$i266 = HEAP32[$7 + -20 >> 2] | 0;
        } else {
         $cond$i$i1$i = $first32;
         $cond$i$i266 = $8 & 255;
        }
        if ((HEAP8[$cond$i$i1$i + $cond$i$i266 + -1 >> 0] | 0) == 62) {
         if ($tobool$i$i$i270) {
          $cond$i$i$i245 = HEAP32[$first32 >> 2] | 0;
          $sub334$in = HEAP32[$7 + -20 >> 2] | 0;
         } else {
          $cond$i$i$i245 = $first32;
          $sub334$in = $8 & 255;
         }
         if ((HEAP8[$cond$i$i$i245 + ($sub334$in + -2) >> 0] | 0) == 45) {
          $32 = $7;
          $t$0 = $call9;
         } else {
          if ($tobool$i$i$i270) {
           $cond$i$i$i236 = HEAP32[$first32 >> 2] | 0;
           $sub49337$in = HEAP32[$7 + -20 >> 2] | 0;
          } else {
           $cond$i$i$i236 = $first32;
           $sub49337$in = $8 & 255;
          }
          if ((HEAP8[$cond$i$i$i236 + ($sub49337$in + -2) >> 0] | 0) == 62) {
           $32 = $7;
           $t$0 = $call9;
          } else {
           $call55 = __ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($call9, $last, $db) | 0;
           if (($call55 | 0) == ($call9 | 0)) {
            $cleanup$dest$slot$4 = 0;
            $first$addr$1 = $first;
            break;
           }
           $20 = HEAP32[$__end_$i281 >> 2] | 0;
           $22 = $20;
           if ((($20 - (HEAP32[$db >> 2] | 0) | 0) / 24 | 0) >>> 0 < 2) {
            $cleanup$dest$slot$4 = 0;
            $first$addr$1 = $first;
            break;
           }
           $first67 = $22 + -24 | 0;
           HEAP32[$ret1 >> 2] = HEAP32[$first67 >> 2];
           HEAP32[$ret1 + 4 >> 2] = HEAP32[$first67 + 4 >> 2];
           HEAP32[$ret1 + 8 >> 2] = HEAP32[$first67 + 8 >> 2];
           $__i$0$i$i220 = 0;
           while (1) {
            if (($__i$0$i$i220 | 0) == 3) break;
            HEAP32[$first67 + ($__i$0$i$i220 << 2) >> 2] = 0;
            $__i$0$i$i220 = $__i$0$i$i220 + 1 | 0;
           }
           $second = $22 + -12 | 0;
           $__size_$i1$i$i$i$i = $ret2 + 11 | 0;
           if ((HEAP8[$__size_$i1$i$i$i$i >> 0] | 0) < 0) {
            $24 = HEAP32[$ret2 >> 2] | 0;
            HEAP8[$ref$tmp$i$i$i$i >> 0] = 0;
            __ZNSt3__211char_traitsIcE6assignERcRKc($24, $ref$tmp$i$i$i$i);
            HEAP32[$ret2 + 4 >> 2] = 0;
           } else {
            HEAP8[$ref$tmp$i$i$i$i >> 0] = 0;
            __ZNSt3__211char_traitsIcE6assignERcRKc($ret2, $ref$tmp$i$i$i$i);
            HEAP8[$__size_$i1$i$i$i$i >> 0] = 0;
           }
           __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE7reserveEj($ret2);
           HEAP32[$ret2 >> 2] = HEAP32[$second >> 2];
           HEAP32[$ret2 + 4 >> 2] = HEAP32[$second + 4 >> 2];
           HEAP32[$ret2 + 8 >> 2] = HEAP32[$second + 8 >> 2];
           $__i$0$i$i$i$i = 0;
           while (1) {
            if (($__i$0$i$i$i$i | 0) == 3) break;
            HEAP32[$second + ($__i$0$i$i$i$i << 2) >> 2] = 0;
            $__i$0$i$i$i$i = $__i$0$i$i$i$i + 1 | 0;
           }
           $25 = HEAP8[$__size_$i1$i$i$i$i >> 0] | 0;
           if (!(($25 << 24 >> 24 < 0 ? HEAP32[$ret2 + 4 >> 2] | 0 : $25 & 255) | 0)) __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE9push_backEc($ret1, 32);
           $27 = HEAP32[$__end_$i281 >> 2] | 0;
           $add$ptr$i194 = $27 + -24 | 0;
           $28 = $27;
           while (1) {
            if (($28 | 0) == ($add$ptr$i194 | 0)) break;
            $incdec$ptr$i$i$i197 = $28 + -24 | 0;
            HEAP32[$__end_$i281 >> 2] = $incdec$ptr$i$i$i197;
            __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($incdec$ptr$i$i$i197);
            $28 = HEAP32[$__end_$i281 >> 2] | 0;
           }
           $29 = HEAP8[$ret1 + 11 >> 0] | 0;
           $tobool$i$i$i$i = $29 << 24 >> 24 < 0;
           __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKcj($27 + -48 | 0, 0, $tobool$i$i$i$i ? HEAP32[$ret1 >> 2] | 0 : $ret1, $tobool$i$i$i$i ? HEAP32[$ret1 + 4 >> 2] | 0 : $29 & 255) | 0;
           __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($ret1);
           $32 = HEAP32[$__end_$i281 >> 2] | 0;
           $t$0 = $call55;
          }
         }
        } else {
         $32 = $7;
         $t$0 = $call9;
        }
       } else {
        $32 = $7;
        $t$0 = $call9;
       }
       __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE9push_backEc($32 + -24 | 0, 40);
       if (($t$0 | 0) == ($last | 0)) label = 49; else if ((HEAP8[$t$0 >> 0] | 0) == 118) {
        $56 = HEAP32[$db >> 2] | 0;
        $57 = HEAP32[$__end_$i281 >> 2] | 0;
        $t$3 = $t$0 + 1 | 0;
       } else label = 49;
       do if ((label | 0) == 49) {
        $__size_$i$i$i170 = $ref$tmp$i$i$i$i + 11 | 0;
        $__size_$i3$i$i172 = $ref$tmp$i$i$i$i + 4 | 0;
        $__size_$i$i$i$i$i156 = $ret1 + 11 | 0;
        $__size_$i3$i$i$i161 = $ret1 + 4 | 0;
        $first_arg$0$off0$ph = 1;
        $t$1$ph = $t$0;
        L67 : while (1) {
         $34 = HEAP32[$__end_$i281 >> 2] | 0;
         $35 = HEAP32[$db >> 2] | 0;
         $t$1 = $t$1$ph;
         while (1) {
          $sub$ptr$div$i182 = ($34 - $35 | 0) / 24 | 0;
          $call105 = __ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($t$1, $last, $db) | 0;
          $34 = HEAP32[$__end_$i281 >> 2] | 0;
          $35 = HEAP32[$db >> 2] | 0;
          $sub$ptr$div$i = ($34 - $35 | 0) / 24 | 0;
          if (($call105 | 0) == ($t$1 | 0)) {
           label = 72;
           break L67;
          }
          if ($sub$ptr$div$i >>> 0 > $sub$ptr$div$i182 >>> 0) break; else $t$1 = $call105;
         }
         HEAP32[$ref$tmp$i$i$i$i >> 2] = 0;
         HEAP32[$ref$tmp$i$i$i$i + 4 >> 2] = 0;
         HEAP32[$ref$tmp$i$i$i$i + 8 >> 2] = 0;
         $__i$0$i$i = 0;
         while (1) {
          if (($__i$0$i$i | 0) == 3) {
           $k$0 = $sub$ptr$div$i182;
           break;
          }
          HEAP32[$ref$tmp$i$i$i$i + ($__i$0$i$i << 2) >> 2] = 0;
          $__i$0$i$i = $__i$0$i$i + 1 | 0;
         }
         while (1) {
          if ($k$0 >>> 0 >= $sub$ptr$div$i >>> 0) {
           $k132$0 = $sub$ptr$div$i182;
           break;
          }
          $38 = HEAP8[$__size_$i$i$i170 >> 0] | 0;
          if (($38 << 24 >> 24 < 0 ? HEAP32[$__size_$i3$i$i172 >> 2] | 0 : $38 & 255) | 0) __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($ref$tmp$i$i$i$i, 15109) | 0;
          __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($ret1, (HEAP32[$db >> 2] | 0) + ($k$0 * 24 | 0) | 0);
          $41 = HEAP8[$__size_$i$i$i$i$i156 >> 0] | 0;
          $tobool$i$i$i$i$i157 = $41 << 24 >> 24 < 0;
          __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($ref$tmp$i$i$i$i, $tobool$i$i$i$i$i157 ? HEAP32[$ret1 >> 2] | 0 : $ret1, $tobool$i$i$i$i$i157 ? HEAP32[$__size_$i3$i$i$i161 >> 2] | 0 : $41 & 255) | 0;
          __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($ret1);
          $k$0 = $k$0 + 1 | 0;
         }
         while (1) {
          if ($k132$0 >>> 0 >= $sub$ptr$div$i >>> 0) break;
          $46 = HEAP32[$__end_$i281 >> 2] | 0;
          $add$ptr$i153 = $46 + -24 | 0;
          $47 = $46;
          while (1) {
           if (($47 | 0) == ($add$ptr$i153 | 0)) break;
           $incdec$ptr$i$i$i = $47 + -24 | 0;
           HEAP32[$__end_$i281 >> 2] = $incdec$ptr$i$i$i;
           __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($incdec$ptr$i$i$i);
           $47 = HEAP32[$__end_$i281 >> 2] | 0;
          }
          $k132$0 = $k132$0 + 1 | 0;
         }
         $44 = HEAP8[$__size_$i$i$i170 >> 0] | 0;
         $45 = HEAP32[$__size_$i3$i$i172 >> 2] | 0;
         if (!(($44 << 24 >> 24 < 0 ? $45 : $44 & 255) | 0)) $first_arg$3$off0$ph = $first_arg$0$off0$ph; else {
          $49 = HEAP32[$__end_$i281 >> 2] | 0;
          if ((HEAP32[$db >> 2] | 0) == ($49 | 0)) {
           label = 84;
           break;
          }
          if ($first_arg$0$off0$ph) {
           $50 = $49;
           $51 = $44;
           $53 = $45;
          } else {
           __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($49 + -24 | 0, 15109) | 0;
           $50 = HEAP32[$__end_$i281 >> 2] | 0;
           $51 = HEAP8[$__size_$i$i$i170 >> 0] | 0;
           $53 = HEAP32[$__size_$i3$i$i172 >> 2] | 0;
          }
          $tobool$i$i$i$i$i135 = $51 << 24 >> 24 < 0;
          __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($50 + -24 | 0, $tobool$i$i$i$i$i135 ? HEAP32[$ref$tmp$i$i$i$i >> 2] | 0 : $ref$tmp$i$i$i$i, $tobool$i$i$i$i$i135 ? $53 : $51 & 255) | 0;
          $first_arg$3$off0$ph = 0;
         }
         __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($ref$tmp$i$i$i$i);
         $first_arg$0$off0$ph = $first_arg$3$off0$ph;
         $t$1$ph = $call105;
        }
        if ((label | 0) == 72) {
         $56 = $35;
         $57 = $34;
         $t$3 = $t$1;
         break;
        } else if ((label | 0) == 84) {
         __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($ref$tmp$i$i$i$i);
         $cleanup$dest$slot$4 = 0;
         $first$addr$1 = $first;
         break L16;
        }
       } while (0);
       if (($56 | 0) == ($57 | 0)) {
        $cleanup$dest$slot$4 = 0;
        $first$addr$1 = $first;
       } else {
        __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE9push_backEc($57 + -24 | 0, 41);
        if ($3 & 1 | 0) __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc((HEAP32[$__end_$i281 >> 2] | 0) + -24 | 0, 14832) | 0;
        if ($3 & 2 | 0) __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc((HEAP32[$__end_$i281 >> 2] | 0) + -24 | 0, 14839) | 0;
        if ($3 & 4 | 0) __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc((HEAP32[$__end_$i281 >> 2] | 0) + -24 | 0, 14849) | 0;
        switch ($4 | 0) {
        case 1:
         {
          __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc((HEAP32[$__end_$i281 >> 2] | 0) + -24 | 0, 16313) | 0;
          break;
         }
        case 2:
         {
          __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc((HEAP32[$__end_$i281 >> 2] | 0) + -24 | 0, 16316) | 0;
          break;
         }
        default:
         {}
        }
        $64 = HEAP8[$ret2 + 11 >> 0] | 0;
        $tobool$i$i$i$i$i = $64 << 24 >> 24 < 0;
        __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj((HEAP32[$__end_$i281 >> 2] | 0) + -24 | 0, $tobool$i$i$i$i$i ? HEAP32[$ret2 >> 2] | 0 : $ret2, $tobool$i$i$i$i$i ? HEAP32[$ret2 + 4 >> 2] | 0 : $64 & 255) | 0;
        $cleanup$dest$slot$4 = 1;
        $first$addr$1 = $t$3;
       }
      }
     } while (0);
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($ret2);
     __ZN10__cxxabiv112_GLOBAL__N_110save_valueIbED2Ev($sb2);
     if ($cleanup$dest$slot$4) $first$addr$2 = $first$addr$1; else {
      $cleanup$dest$slot$6 = 0;
      $first$addr$5 = $first$addr$1;
      break L6;
     }
    } while (0);
    $cleanup$dest$slot$6 = 1;
    $first$addr$5 = $first$addr$2;
   }
  } while (0);
  __ZN10__cxxabiv112_GLOBAL__N_110save_valueIbED2Ev($sb);
  __ZN10__cxxabiv112_GLOBAL__N_110save_valueIjED2Ev($su);
  if ($cleanup$dest$slot$6) {
   $first$addr$6 = $first$addr$5;
   label = 88;
  } else $retval$11 = $first;
 }
 if ((label | 0) == 88) $retval$11 = $first$addr$6;
 STACKTOP = sp;
 return $retval$11 | 0;
}

function __ZN10__cxxabiv112_GLOBAL__N_114parse_new_exprINS0_2DbEEEPKcS4_S4_RT_($first, $last, $db) {
 $first = $first | 0;
 $last = $last | 0;
 $db = $db | 0;
 var $0 = 0, $11 = 0, $12 = 0, $13 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $26 = 0, $29 = 0, $3 = 0, $32 = 0, $5 = 0, $9 = 0, $__begin_$i100$pre$phiZZ2D = 0, $__end_$i = 0, $__end_$i101$phi$trans$insert = 0, $__end_$i101$pre$phiZZ2D = 0, $__i$0$i$i = 0, $__i$0$i$i$i = 0, $__i$0$i$i$i$i = 0, $__i$0$i$i$i$i140 = 0, $__i$0$i$i$i184 = 0, $__i$0$i$i114 = 0, $__i$0$i$i156 = 0, $__i$0$i$i205 = 0, $__size_$i1$i$i$i$i = 0, $__size_$i1$i$i$i$i129 = 0, $add$ptr$first = 0, $add$ptr$i106 = 0, $add$ptr$i148 = 0, $add$ptr$i99 = 0, $add$ptr20 = 0, $agg$tmp = 0, $call = 0, $call64 = 0, $cleanup$dest$slot$3 = 0, $cleanup$dest$slot$4 = 0, $cmp19 = 0, $cmp26 = 0, $cmp28 = 0, $cmp4 = 0, $expr_list = 0, $first$addr$0 = 0, $first$addr$1 = 0, $has_expr_list$0$off0 = 0, $has_init$0$off0231 = 0, $incdec$ptr = 0, $incdec$ptr$i$i$i = 0, $incdec$ptr$i$i$i109 = 0, $incdec$ptr$i$i$i151 = 0, $init_list = 0, $parsed_gs$0$off0 = 0, $ref$tmp = 0, $ref$tmp$i$i$i$i126 = 0, $ref$tmp176 = 0, $ref$tmp208 = 0, $retval$16 = 0, $sub$ptr$lhs$cast = 0, $t$0 = 0, $t$1 = 0, $t$3 = 0, $t$4230 = 0, $tobool$i$i$i$i$i168 = 0, $tobool$i$i$i$i$i174 = 0, $tobool$i$i$i$i$i195 = 0, label = 0, sp = 0, $t$3$looptemp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(112);
 $ref$tmp$i$i$i$i126 = sp + 88 | 0;
 $init_list = sp + 76 | 0;
 $ref$tmp = sp + 64 | 0;
 $expr_list = sp + 40 | 0;
 $ref$tmp176 = sp + 16 | 0;
 $ref$tmp208 = sp;
 $agg$tmp = sp + 52 | 0;
 $sub$ptr$lhs$cast = $last;
 L1 : do if (($sub$ptr$lhs$cast - $first | 0) > 3) {
  $0 = HEAP8[$first >> 0] | 0;
  if ($0 << 24 >> 24 == 103) {
   $cmp4 = (HEAP8[$first + 1 >> 0] | 0) == 115;
   $add$ptr$first = $cmp4 ? $first + 2 | 0 : $first;
   $2 = HEAP8[$add$ptr$first >> 0] | 0;
   $parsed_gs$0$off0 = $cmp4;
   $t$0 = $add$ptr$first;
  } else {
   $2 = $0;
   $parsed_gs$0$off0 = 0;
   $t$0 = $first;
  }
  if ($2 << 24 >> 24 == 110) {
   $3 = HEAP8[$t$0 + 1 >> 0] | 0;
   $cmp19 = $3 << 24 >> 24 == 97;
   switch ($3 << 24 >> 24) {
   case 97:
   case 119:
    break;
   default:
    {
     $retval$16 = $first;
     break L1;
    }
   }
   $add$ptr20 = $t$0 + 2 | 0;
   L8 : do if (($add$ptr20 | 0) != ($last | 0)) {
    $has_expr_list$0$off0 = 0;
    $t$1 = $add$ptr20;
    while (1) {
     if ((HEAP8[$t$1 >> 0] | 0) == 95) break;
     $call = __ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($t$1, $last, $db) | 0;
     $cmp26 = ($call | 0) == ($t$1 | 0);
     $cmp28 = ($call | 0) == ($last | 0);
     if ($cmp26 | $cmp28) break L8; else {
      $has_expr_list$0$off0 = $has_expr_list$0$off0 | ($cmp26 | $cmp28) ^ 1;
      $t$1 = $call;
     }
    }
    $incdec$ptr = $t$1 + 1 | 0;
    $call64 = __ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($incdec$ptr, $last, $db) | 0;
    if (!(($call64 | 0) == ($incdec$ptr | 0) | ($call64 | 0) == ($last | 0))) {
     $5 = HEAP8[$call64 >> 0] | 0;
     L14 : do if (($sub$ptr$lhs$cast - $call64 | 0) > 2 & $5 << 24 >> 24 == 112) {
      if ((HEAP8[$call64 + 1 >> 0] | 0) != 105) break L8;
      $t$3 = $call64 + 2 | 0;
      while (1) {
       if ((HEAP8[$t$3 >> 0] | 0) == 69) {
        $has_init$0$off0231 = 1;
        $t$4230 = $t$3;
        break L14;
       }
       $t$3$looptemp = $t$3;
       $t$3 = __ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($t$3, $last, $db) | 0;
       if (($t$3 | 0) == ($t$3$looptemp | 0) | ($t$3 | 0) == ($last | 0)) break L8;
      }
     } else if ($5 << 24 >> 24 == 69) {
      $has_init$0$off0231 = 0;
      $t$4230 = $call64;
     } else break L8; while (0);
     HEAP32[$init_list >> 2] = 0;
     HEAP32[$init_list + 4 >> 2] = 0;
     HEAP32[$init_list + 8 >> 2] = 0;
     $__i$0$i$i = 0;
     while (1) {
      if (($__i$0$i$i | 0) == 3) break;
      HEAP32[$init_list + ($__i$0$i$i << 2) >> 2] = 0;
      $__i$0$i$i = $__i$0$i$i + 1 | 0;
     }
     L26 : do if ($has_init$0$off0231) {
      $__end_$i = $db + 4 | 0;
      $9 = HEAP32[$__end_$i >> 2] | 0;
      if ((HEAP32[$db >> 2] | 0) == ($9 | 0)) {
       $cleanup$dest$slot$4 = 1;
       $first$addr$1 = $first;
      } else {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($ref$tmp, $9 + -24 | 0);
       $__size_$i1$i$i$i$i = $init_list + 11 | 0;
       if ((HEAP8[$__size_$i1$i$i$i$i >> 0] | 0) < 0) {
        $11 = HEAP32[$init_list >> 2] | 0;
        HEAP8[$ref$tmp$i$i$i$i126 >> 0] = 0;
        __ZNSt3__211char_traitsIcE6assignERcRKc($11, $ref$tmp$i$i$i$i126);
        HEAP32[$init_list + 4 >> 2] = 0;
       } else {
        HEAP8[$ref$tmp$i$i$i$i126 >> 0] = 0;
        __ZNSt3__211char_traitsIcE6assignERcRKc($init_list, $ref$tmp$i$i$i$i126);
        HEAP8[$__size_$i1$i$i$i$i >> 0] = 0;
       }
       __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE7reserveEj($init_list);
       HEAP32[$init_list >> 2] = HEAP32[$ref$tmp >> 2];
       HEAP32[$init_list + 4 >> 2] = HEAP32[$ref$tmp + 4 >> 2];
       HEAP32[$init_list + 8 >> 2] = HEAP32[$ref$tmp + 8 >> 2];
       $__i$0$i$i$i$i = 0;
       while (1) {
        if (($__i$0$i$i$i$i | 0) == 3) break;
        HEAP32[$ref$tmp + ($__i$0$i$i$i$i << 2) >> 2] = 0;
        $__i$0$i$i$i$i = $__i$0$i$i$i$i + 1 | 0;
       }
       __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($ref$tmp);
       $12 = HEAP32[$__end_$i >> 2] | 0;
       $add$ptr$i99 = $12 + -24 | 0;
       $13 = $12;
       while (1) {
        if (($13 | 0) == ($add$ptr$i99 | 0)) {
         $15 = $add$ptr$i99;
         $__begin_$i100$pre$phiZZ2D = $db;
         $__end_$i101$pre$phiZZ2D = $__end_$i;
         label = 31;
         break L26;
        }
        $incdec$ptr$i$i$i = $13 + -24 | 0;
        HEAP32[$__end_$i >> 2] = $incdec$ptr$i$i$i;
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($incdec$ptr$i$i$i);
        $13 = HEAP32[$__end_$i >> 2] | 0;
       }
      }
     } else {
      $__end_$i101$phi$trans$insert = $db + 4 | 0;
      $15 = HEAP32[$__end_$i101$phi$trans$insert >> 2] | 0;
      $__begin_$i100$pre$phiZZ2D = $db;
      $__end_$i101$pre$phiZZ2D = $__end_$i101$phi$trans$insert;
      label = 31;
     } while (0);
     if ((label | 0) == 31) if ((HEAP32[$__begin_$i100$pre$phiZZ2D >> 2] | 0) == ($15 | 0)) {
      $cleanup$dest$slot$4 = 1;
      $first$addr$1 = $first;
     } else {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($ref$tmp, $15 + -24 | 0);
      $16 = HEAP32[$__end_$i101$pre$phiZZ2D >> 2] | 0;
      $add$ptr$i106 = $16 + -24 | 0;
      $17 = $16;
      while (1) {
       if (($17 | 0) == ($add$ptr$i106 | 0)) break;
       $incdec$ptr$i$i$i109 = $17 + -24 | 0;
       HEAP32[$__end_$i101$pre$phiZZ2D >> 2] = $incdec$ptr$i$i$i109;
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($incdec$ptr$i$i$i109);
       $17 = HEAP32[$__end_$i101$pre$phiZZ2D >> 2] | 0;
      }
      HEAP32[$expr_list >> 2] = 0;
      HEAP32[$expr_list + 4 >> 2] = 0;
      HEAP32[$expr_list + 8 >> 2] = 0;
      $__i$0$i$i114 = 0;
      while (1) {
       if (($__i$0$i$i114 | 0) == 3) break;
       HEAP32[$expr_list + ($__i$0$i$i114 << 2) >> 2] = 0;
       $__i$0$i$i114 = $__i$0$i$i114 + 1 | 0;
      }
      L52 : do if ($has_expr_list$0$off0) if ((HEAP32[$__begin_$i100$pre$phiZZ2D >> 2] | 0) == ($add$ptr$i106 | 0)) {
       $cleanup$dest$slot$3 = 1;
       $first$addr$0 = $first;
      } else {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($ref$tmp176, $16 + -48 | 0);
       $__size_$i1$i$i$i$i129 = $expr_list + 11 | 0;
       if ((HEAP8[$__size_$i1$i$i$i$i129 >> 0] | 0) < 0) {
        $20 = HEAP32[$expr_list >> 2] | 0;
        HEAP8[$ref$tmp$i$i$i$i126 >> 0] = 0;
        __ZNSt3__211char_traitsIcE6assignERcRKc($20, $ref$tmp$i$i$i$i126);
        HEAP32[$expr_list + 4 >> 2] = 0;
       } else {
        HEAP8[$ref$tmp$i$i$i$i126 >> 0] = 0;
        __ZNSt3__211char_traitsIcE6assignERcRKc($expr_list, $ref$tmp$i$i$i$i126);
        HEAP8[$__size_$i1$i$i$i$i129 >> 0] = 0;
       }
       __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE7reserveEj($expr_list);
       HEAP32[$expr_list >> 2] = HEAP32[$ref$tmp176 >> 2];
       HEAP32[$expr_list + 4 >> 2] = HEAP32[$ref$tmp176 + 4 >> 2];
       HEAP32[$expr_list + 8 >> 2] = HEAP32[$ref$tmp176 + 8 >> 2];
       $__i$0$i$i$i$i140 = 0;
       while (1) {
        if (($__i$0$i$i$i$i140 | 0) == 3) break;
        HEAP32[$ref$tmp176 + ($__i$0$i$i$i$i140 << 2) >> 2] = 0;
        $__i$0$i$i$i$i140 = $__i$0$i$i$i$i140 + 1 | 0;
       }
       __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($ref$tmp176);
       $21 = HEAP32[$__end_$i101$pre$phiZZ2D >> 2] | 0;
       $add$ptr$i148 = $21 + -24 | 0;
       $22 = $21;
       while (1) {
        if (($22 | 0) == ($add$ptr$i148 | 0)) {
         label = 49;
         break L52;
        }
        $incdec$ptr$i$i$i151 = $22 + -24 | 0;
        HEAP32[$__end_$i101$pre$phiZZ2D >> 2] = $incdec$ptr$i$i$i151;
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($incdec$ptr$i$i$i151);
        $22 = HEAP32[$__end_$i101$pre$phiZZ2D >> 2] | 0;
       }
      } else label = 49; while (0);
      if ((label | 0) == 49) {
       HEAP32[$ref$tmp$i$i$i$i126 >> 2] = 0;
       HEAP32[$ref$tmp$i$i$i$i126 + 4 >> 2] = 0;
       HEAP32[$ref$tmp$i$i$i$i126 + 8 >> 2] = 0;
       $__i$0$i$i156 = 0;
       while (1) {
        if (($__i$0$i$i156 | 0) == 3) break;
        HEAP32[$ref$tmp$i$i$i$i126 + ($__i$0$i$i156 << 2) >> 2] = 0;
        $__i$0$i$i156 = $__i$0$i$i156 + 1 | 0;
       }
       if ($parsed_gs$0$off0) __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6assignEPKc($ref$tmp$i$i$i$i126, 14959);
       if ($cmp19) __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($ref$tmp$i$i$i$i126, 15169) | 0; else __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($ref$tmp$i$i$i$i126, 14919) | 0;
       if ($has_expr_list$0$off0) {
        __ZNSt3__2plIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEENS_12basic_stringIT_T0_T1_EEPKS8_RKSB_($ref$tmp208, 14887, $expr_list);
        __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($ref$tmp208, 15173) | 0;
        HEAP32[$ref$tmp176 >> 2] = HEAP32[$ref$tmp208 >> 2];
        HEAP32[$ref$tmp176 + 4 >> 2] = HEAP32[$ref$tmp208 + 4 >> 2];
        HEAP32[$ref$tmp176 + 8 >> 2] = HEAP32[$ref$tmp208 + 8 >> 2];
        $__i$0$i$i$i = 0;
        while (1) {
         if (($__i$0$i$i$i | 0) == 3) break;
         HEAP32[$ref$tmp208 + ($__i$0$i$i$i << 2) >> 2] = 0;
         $__i$0$i$i$i = $__i$0$i$i$i + 1 | 0;
        }
        $23 = HEAP8[$ref$tmp176 + 11 >> 0] | 0;
        $tobool$i$i$i$i$i168 = $23 << 24 >> 24 < 0;
        __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($ref$tmp$i$i$i$i126, $tobool$i$i$i$i$i168 ? HEAP32[$ref$tmp176 >> 2] | 0 : $ref$tmp176, $tobool$i$i$i$i$i168 ? HEAP32[$ref$tmp176 + 4 >> 2] | 0 : $23 & 255) | 0;
        __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($ref$tmp176);
        __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($ref$tmp208);
       }
       $26 = HEAP8[$ref$tmp + 11 >> 0] | 0;
       $tobool$i$i$i$i$i174 = $26 << 24 >> 24 < 0;
       __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($ref$tmp$i$i$i$i126, $tobool$i$i$i$i$i174 ? HEAP32[$ref$tmp >> 2] | 0 : $ref$tmp, $tobool$i$i$i$i$i174 ? HEAP32[$ref$tmp + 4 >> 2] | 0 : $26 & 255) | 0;
       if ($has_init$0$off0231) {
        __ZNSt3__2plIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEENS_12basic_stringIT_T0_T1_EEPKS8_RKSB_($ref$tmp208, 14882, $init_list);
        __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($ref$tmp208, 14885) | 0;
        HEAP32[$ref$tmp176 >> 2] = HEAP32[$ref$tmp208 >> 2];
        HEAP32[$ref$tmp176 + 4 >> 2] = HEAP32[$ref$tmp208 + 4 >> 2];
        HEAP32[$ref$tmp176 + 8 >> 2] = HEAP32[$ref$tmp208 + 8 >> 2];
        $__i$0$i$i$i184 = 0;
        while (1) {
         if (($__i$0$i$i$i184 | 0) == 3) break;
         HEAP32[$ref$tmp208 + ($__i$0$i$i$i184 << 2) >> 2] = 0;
         $__i$0$i$i$i184 = $__i$0$i$i$i184 + 1 | 0;
        }
        $29 = HEAP8[$ref$tmp176 + 11 >> 0] | 0;
        $tobool$i$i$i$i$i195 = $29 << 24 >> 24 < 0;
        __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($ref$tmp$i$i$i$i126, $tobool$i$i$i$i$i195 ? HEAP32[$ref$tmp176 >> 2] | 0 : $ref$tmp176, $tobool$i$i$i$i$i195 ? HEAP32[$ref$tmp176 + 4 >> 2] | 0 : $29 & 255) | 0;
        __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($ref$tmp176);
        __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($ref$tmp208);
       };
       HEAP32[$agg$tmp >> 2] = HEAP32[$ref$tmp$i$i$i$i126 >> 2];
       HEAP32[$agg$tmp + 4 >> 2] = HEAP32[$ref$tmp$i$i$i$i126 + 4 >> 2];
       HEAP32[$agg$tmp + 8 >> 2] = HEAP32[$ref$tmp$i$i$i$i126 + 8 >> 2];
       $__i$0$i$i205 = 0;
       while (1) {
        if (($__i$0$i$i205 | 0) == 3) break;
        HEAP32[$ref$tmp$i$i$i$i126 + ($__i$0$i$i205 << 2) >> 2] = 0;
        $__i$0$i$i205 = $__i$0$i$i205 + 1 | 0;
       }
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ENSt3__212basic_stringIcNS2_11char_traitsIcEENS0_12malloc_allocIcEEEE($ref$tmp176, $agg$tmp);
       $32 = HEAP32[$__end_$i101$pre$phiZZ2D >> 2] | 0;
       if ($32 >>> 0 < (HEAP32[$db + 8 >> 2] | 0) >>> 0) {
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($32, $ref$tmp176);
        HEAP32[$__end_$i101$pre$phiZZ2D >> 2] = (HEAP32[$__end_$i101$pre$phiZZ2D >> 2] | 0) + 24;
       } else __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIS3_EEvOT_($db, $ref$tmp176);
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($ref$tmp176);
       __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($agg$tmp);
       __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($ref$tmp$i$i$i$i126);
       $cleanup$dest$slot$3 = 0;
       $first$addr$0 = $t$4230 + 1 | 0;
      }
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($expr_list);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($ref$tmp);
      $cleanup$dest$slot$4 = $cleanup$dest$slot$3;
      $first$addr$1 = $first$addr$0;
     }
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($init_list);
     if (!$cleanup$dest$slot$4) {
      $retval$16 = $first$addr$1;
      break L1;
     }
    }
   } while (0);
   $retval$16 = $first;
  } else $retval$16 = $first;
 } else $retval$16 = $first; while (0);
 STACKTOP = sp;
 return $retval$16 | 0;
}

function _arGetTransMatMultiSquare2($handle, $marker_info, $marker_num, $config, $robustFlag) {
 $handle = $handle | 0;
 $marker_info = $marker_info | 0;
 $marker_num = $marker_num | 0;
 $config = $config | 0;
 $robustFlag = $robustFlag | 0;
 var $$sink = 0, $0 = 0, $1 = 0, $10 = 0, $12 = 0, $15 = 0, $19 = 0, $29 = 0.0, $33 = 0, $34 = 0, $35 = 0, $39 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $5 = 0.0, $65 = 0, $83 = 0, $85 = 0, $9 = 0, $arraydecay353 = 0, $arraydecay409 = 0, $arrayidx101 = 0, $call156 = 0, $call163 = 0, $call354 = 0.0, $call362 = 0.0, $call371 = 0.0, $call380 = 0.0, $call407 = 0.0, $call413 = 0.0, $call441 = 0.0, $call447 = 0.0, $call475 = 0.0, $call481 = 0.0, $call509 = 0.0, $call515 = 0.0, $call543 = 0.0, $call549 = 0.0, $cfMatrixCutoff = 0, $cfPattCutoff = 0, $cmp116 = 0, $cmp414 = 0, $cutoffPhase = 0, $cutoffPhase623 = 0, $err$0 = 0.0, $err$1 = 0.0, $err$2 = 0.0, $err$3 = 0.0, $err$4 = 0.0, $err$5 = 0.0, $err$6 = 0.0, $globalID46 = 0, $i$0 = 0, $i$1 = 0, $i$2 = 0, $i$3 = 0, $i$4 = 0, $i$5 = 0, $i$6 = 0, $i$7 = 0, $i$8 = 0, $i$9 = 0, $j$0 = 0, $j$1 = 0, $j$10 = 0, $j$2 = 0, $j$3 = 0, $j$4 = 0, $j$5 = 0, $j$6 = 0, $j$7 = 0, $j$8 = 0, $j$9 = 0, $k$0 = 0, $k$1 = 0, $k$2 = 0, $k$3 = 0, $k$4 = 0, $marker_num1 = 0, $max$0 = 0, $max$1 = 0, $max$2 = 0, $maxArea$0 = 0, $maxArea$1 = 0, $maxArea$2 = 0, $mul = 0, $mul182 = 0, $mul252 = 0, $patt_id = 0, $prevF = 0, $rem = 0, $rem196 = 0, $rem214 = 0, $rem232 = 0, $retval$0 = 0.0, $retval$0$ph = 0.0, $tobool = 0, $trans1 = 0, $trans2 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $visible = 0, $vnum$0 = 0, $vnum$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 208 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(208);
 $vararg_buffer1 = sp + 200 | 0;
 $vararg_buffer = sp + 192 | 0;
 $trans1 = sp + 96 | 0;
 $trans2 = sp;
 $marker_num1 = $config + 4 | 0;
 $0 = HEAP32[$marker_num1 >> 2] | 0;
 $cfPattCutoff = $config + 112 | 0;
 $cfMatrixCutoff = $config + 120 | 0;
 $i$0 = 0;
 while (1) {
  if (($i$0 | 0) >= ($0 | 0)) break;
  $1 = HEAP32[$config >> 2] | 0;
  $visible = $1 + ($i$0 * 320 | 0) + 304 | 0;
  $patt_id = $1 + ($i$0 * 320 | 0) | 0;
  if (!(HEAP32[$1 + ($i$0 * 320 | 0) + 4 >> 2] | 0)) {
   $j$0 = 0;
   $k$0 = -1;
   while (1) {
    if (($j$0 | 0) >= ($marker_num | 0)) break;
    if ((HEAP32[$marker_info + ($j$0 << 8) + 8 >> 2] | 0) == (HEAP32[$patt_id >> 2] | 0)) {
     $5 = +HEAPF64[$marker_info + ($j$0 << 8) + 40 >> 3];
     if ($5 < +HEAPF64[$cfPattCutoff >> 3]) $k$1 = $k$0; else if (($k$0 | 0) == -1) $k$1 = $j$0; else if (+HEAPF64[$marker_info + ($k$0 << 8) + 40 >> 3] < $5) $k$1 = $j$0; else $k$1 = $k$0;
    } else $k$1 = $k$0;
    $j$0 = $j$0 + 1 | 0;
    $k$0 = $k$1;
   }
   HEAP32[$visible >> 2] = $k$0;
   if (($k$0 | 0) > -1) HEAP32[$marker_info + ($k$0 << 8) + 16 >> 2] = HEAP32[$marker_info + ($k$0 << 8) + 20 >> 2];
  } else {
   $globalID46 = $1 + ($i$0 * 320 | 0) + 312 | 0;
   $j$1 = 0;
   $k$2 = -1;
   while (1) {
    if (($j$1 | 0) >= ($marker_num | 0)) break;
    $9 = HEAP32[$marker_info + ($j$1 << 8) + 12 >> 2] | 0;
    if (!$9) {
     $10 = $marker_info + ($j$1 << 8) + 248 | 0;
     $12 = HEAP32[$10 >> 2] | 0;
     $15 = HEAP32[$10 + 4 >> 2] | 0;
     if (($12 | 0) == 0 & ($15 | 0) == 0) label = 19; else {
      $19 = $globalID46;
      if (($12 | 0) == (HEAP32[$19 >> 2] | 0) ? ($15 | 0) == (HEAP32[$19 + 4 >> 2] | 0) : 0) label = 20; else $k$3 = $k$2;
     }
    } else label = 19;
    if ((label | 0) == 19) {
     label = 0;
     if (($9 | 0) == (HEAP32[$patt_id >> 2] | 0)) label = 20; else $k$3 = $k$2;
    }
    if ((label | 0) == 20) {
     label = 0;
     $29 = +HEAPF64[$marker_info + ($j$1 << 8) + 48 >> 3];
     if ($29 < +HEAPF64[$cfMatrixCutoff >> 3]) $k$3 = $k$2; else if (($k$2 | 0) == -1) $k$3 = $j$1; else if (+HEAPF64[$marker_info + ($k$2 << 8) + 48 >> 3] < $29) $k$3 = $j$1; else $k$3 = $k$2;
    }
    $j$1 = $j$1 + 1 | 0;
    $k$2 = $k$3;
   }
   HEAP32[$visible >> 2] = $k$2;
   if (($k$2 | 0) > -1) HEAP32[$marker_info + ($k$2 << 8) + 16 >> 2] = HEAP32[$marker_info + ($k$2 << 8) + 24 >> 2];
  }
  $i$0 = $i$0 + 1 | 0;
 }
 $33 = $0;
 $i$1 = 0;
 $max$0 = 0;
 $maxArea$0 = 0;
 $vnum$0 = 0;
 while (1) {
  $cmp116 = ($vnum$0 | 0) == 0;
  if (($i$1 | 0) >= ($33 | 0)) break;
  $34 = HEAP32[$config >> 2] | 0;
  $35 = HEAP32[$34 + ($i$1 * 320 | 0) + 304 >> 2] | 0;
  do if (($35 | 0) < 0) {
   $max$2 = $max$0;
   $maxArea$2 = $maxArea$0;
   $vnum$1 = $vnum$0;
  } else {
   $arrayidx101 = $marker_info + ($35 << 8) | 0;
   if (+_arGetTransMatSquare($handle, $arrayidx101, +HEAPF64[$34 + ($i$1 * 320 | 0) + 8 >> 3], $trans2) > 4.0) {
    HEAP32[(HEAP32[$config >> 2] | 0) + ($i$1 * 320 | 0) + 304 >> 2] = -1;
    $cutoffPhase = $marker_info + ($35 << 8) + 236 | 0;
    if (HEAP32[$cutoffPhase >> 2] | 0) {
     $max$2 = $max$0;
     $maxArea$2 = $maxArea$0;
     $vnum$1 = $vnum$0;
     break;
    }
    HEAP32[$cutoffPhase >> 2] = 7;
    $max$2 = $max$0;
    $maxArea$2 = $maxArea$0;
    $vnum$1 = $vnum$0;
    break;
   }
   $39 = HEAP32[$arrayidx101 >> 2] | 0;
   L44 : do if ($cmp116 | ($maxArea$0 | 0) < ($39 | 0)) {
    $j$2 = 0;
    while (1) {
     if (($j$2 | 0) == 3) {
      $max$1 = $i$1;
      $maxArea$1 = $39;
      break L44;
     } else $k$4 = 0;
     while (1) {
      if (($k$4 | 0) == 4) break;
      HEAPF64[$trans1 + ($j$2 << 5) + ($k$4 << 3) >> 3] = +HEAPF64[$trans2 + ($j$2 << 5) + ($k$4 << 3) >> 3];
      $k$4 = $k$4 + 1 | 0;
     }
     $j$2 = $j$2 + 1 | 0;
    }
   } else {
    $max$1 = $max$0;
    $maxArea$1 = $maxArea$0;
   } while (0);
   $max$2 = $max$1;
   $maxArea$2 = $maxArea$1;
   $vnum$1 = $vnum$0 + 1 | 0;
  } while (0);
  $33 = HEAP32[$marker_num1 >> 2] | 0;
  $i$1 = $i$1 + 1 | 0;
  $max$0 = $max$2;
  $maxArea$0 = $maxArea$2;
  $vnum$0 = $vnum$1;
 }
 $prevF = $config + 104 | 0;
 L54 : do if ($cmp116) {
  $$sink = 0;
  $retval$0$ph = -1.0;
  label = 101;
 } else if (($vnum$0 | 0) < (HEAP32[$config + 128 >> 2] | 0)) {
  $$sink = 0;
  $retval$0$ph = -1.0;
  label = 101;
 } else {
  _arUtilMatMul($trans1, (HEAP32[$config >> 2] | 0) + ($max$0 * 320 | 0) + 112 | 0, $trans2) | 0;
  $mul = $vnum$0 << 2;
  $call156 = _malloc($vnum$0 << 6) | 0;
  if (!$call156) {
   _arLog(3, 4823, $vararg_buffer);
   _exit(1);
  }
  $call163 = _malloc($vnum$0 * 96 | 0) | 0;
  if (!$call163) {
   _arLog(3, 4823, $vararg_buffer1);
   _exit(1);
  }
  $43 = HEAP32[$marker_num1 >> 2] | 0;
  $i$2 = 0;
  $j$3 = 0;
  while (1) {
   if (($i$2 | 0) >= ($43 | 0)) break;
   $44 = HEAP32[$config >> 2] | 0;
   $45 = HEAP32[$44 + ($i$2 * 320 | 0) + 304 >> 2] | 0;
   if (($45 | 0) < 0) $j$4 = $j$3; else {
    $46 = HEAP32[$marker_info + ($45 << 8) + 16 >> 2] | 0;
    $rem = (4 - $46 | 0) % 4 | 0;
    $mul182 = $j$3 << 3;
    HEAPF64[$call156 + ($mul182 << 3) >> 3] = +HEAPF64[$marker_info + ($45 << 8) + 168 + ($rem << 4) >> 3];
    HEAPF64[$call156 + (($mul182 | 1) << 3) >> 3] = +HEAPF64[$marker_info + ($45 << 8) + 168 + ($rem << 4) + 8 >> 3];
    $rem196 = (5 - $46 | 0) % 4 | 0;
    HEAPF64[$call156 + (($mul182 | 2) << 3) >> 3] = +HEAPF64[$marker_info + ($45 << 8) + 168 + ($rem196 << 4) >> 3];
    HEAPF64[$call156 + (($mul182 | 3) << 3) >> 3] = +HEAPF64[$marker_info + ($45 << 8) + 168 + ($rem196 << 4) + 8 >> 3];
    $rem214 = (6 - $46 | 0) % 4 | 0;
    HEAPF64[$call156 + (($mul182 | 4) << 3) >> 3] = +HEAPF64[$marker_info + ($45 << 8) + 168 + ($rem214 << 4) >> 3];
    HEAPF64[$call156 + (($mul182 | 5) << 3) >> 3] = +HEAPF64[$marker_info + ($45 << 8) + 168 + ($rem214 << 4) + 8 >> 3];
    $rem232 = (7 - $46 | 0) % 4 | 0;
    HEAPF64[$call156 + (($mul182 | 6) << 3) >> 3] = +HEAPF64[$marker_info + ($45 << 8) + 168 + ($rem232 << 4) >> 3];
    HEAPF64[$call156 + (($mul182 | 7) << 3) >> 3] = +HEAPF64[$marker_info + ($45 << 8) + 168 + ($rem232 << 4) + 8 >> 3];
    $mul252 = $j$3 * 12 | 0;
    HEAPF64[$call163 + ($mul252 << 3) >> 3] = +HEAPF64[$44 + ($i$2 * 320 | 0) + 208 >> 3];
    HEAPF64[$call163 + (($mul252 | 1) << 3) >> 3] = +HEAPF64[$44 + ($i$2 * 320 | 0) + 216 >> 3];
    HEAPF64[$call163 + (($mul252 | 2) << 3) >> 3] = +HEAPF64[$44 + ($i$2 * 320 | 0) + 224 >> 3];
    HEAPF64[$call163 + (($mul252 | 3) << 3) >> 3] = +HEAPF64[$44 + ($i$2 * 320 | 0) + 232 >> 3];
    HEAPF64[$call163 + ($mul252 + 4 << 3) >> 3] = +HEAPF64[$44 + ($i$2 * 320 | 0) + 240 >> 3];
    HEAPF64[$call163 + ($mul252 + 5 << 3) >> 3] = +HEAPF64[$44 + ($i$2 * 320 | 0) + 248 >> 3];
    HEAPF64[$call163 + ($mul252 + 6 << 3) >> 3] = +HEAPF64[$44 + ($i$2 * 320 | 0) + 256 >> 3];
    HEAPF64[$call163 + ($mul252 + 7 << 3) >> 3] = +HEAPF64[$44 + ($i$2 * 320 | 0) + 264 >> 3];
    HEAPF64[$call163 + ($mul252 + 8 << 3) >> 3] = +HEAPF64[$44 + ($i$2 * 320 | 0) + 272 >> 3];
    HEAPF64[$call163 + ($mul252 + 9 << 3) >> 3] = +HEAPF64[$44 + ($i$2 * 320 | 0) + 280 >> 3];
    $65 = HEAP32[$config >> 2] | 0;
    HEAPF64[$call163 + ($mul252 + 10 << 3) >> 3] = +HEAPF64[$65 + ($i$2 * 320 | 0) + 288 >> 3];
    HEAPF64[$call163 + ($mul252 + 11 << 3) >> 3] = +HEAPF64[$65 + ($i$2 * 320 | 0) + 296 >> 3];
    $j$4 = $j$3 + 1 | 0;
   }
   $i$2 = $i$2 + 1 | 0;
   $j$3 = $j$4;
  }
  $tobool = ($robustFlag | 0) != 0;
  if (!(HEAP32[$prevF >> 2] | 0)) {
   $arraydecay353 = $config + 8 | 0;
   $call354 = +_arGetTransMat($handle, $trans2, $call156, $call163, $mul, $arraydecay353);
   if ($tobool & $call354 >= 20.0) {
    _icpSetInlierProbability(HEAP32[$handle >> 2] | 0, .8) | 0;
    $call362 = +_arGetTransMatRobust($handle, $trans2, $call156, $call163, $mul, $arraydecay353);
    if (!($call362 >= 20.0)) $err$0 = $call362; else {
     _icpSetInlierProbability(HEAP32[$handle >> 2] | 0, .6) | 0;
     $call371 = +_arGetTransMatRobust($handle, $trans2, $call156, $call163, $mul, $arraydecay353);
     if (!($call371 >= 20.0)) $err$0 = $call371; else {
      _icpSetInlierProbability(HEAP32[$handle >> 2] | 0, .4) | 0;
      $call380 = +_arGetTransMatRobust($handle, $trans2, $call156, $call163, $mul, $arraydecay353);
      if (!($call380 >= 20.0)) $err$0 = $call380; else {
       _icpSetInlierProbability(HEAP32[$handle >> 2] | 0, 0.0) | 0;
       $err$0 = +_arGetTransMatRobust($handle, $trans2, $call156, $call163, $mul, $arraydecay353);
      }
     }
    }
   } else $err$0 = $call354;
   _free($call163);
   _free($call156);
   $err$6 = $err$0;
  } else {
   $call407 = +_arGetTransMat($handle, $trans2, $call156, $call163, $mul, $trans1);
   $arraydecay409 = $config + 8 | 0;
   $call413 = +_arGetTransMat($handle, $arraydecay409, $call156, $call163, $mul, $arraydecay409);
   $cmp414 = $call407 < $call413;
   L79 : do if ($tobool) {
    L81 : do if ($cmp414) {
     $j$5 = 0;
     while (1) {
      if (($j$5 | 0) == 3) {
       $err$1 = $call407;
       break L81;
      } else $i$3 = 0;
      while (1) {
       if (($i$3 | 0) == 4) break;
       HEAPF64[$config + 8 + ($j$5 << 5) + ($i$3 << 3) >> 3] = +HEAPF64[$trans1 + ($j$5 << 5) + ($i$3 << 3) >> 3];
       $i$3 = $i$3 + 1 | 0;
      }
      $j$5 = $j$5 + 1 | 0;
     }
    } else $err$1 = $call413; while (0);
    if (!($err$1 >= 20.0)) $err$5 = $err$1; else {
     _icpSetInlierProbability(HEAP32[$handle >> 2] | 0, .8) | 0;
     $call441 = +_arGetTransMatRobust($handle, $trans2, $call156, $call163, $mul, $trans1);
     $call447 = +_arGetTransMatRobust($handle, $arraydecay409, $call156, $call163, $mul, $arraydecay409);
     L90 : do if ($call441 < $call447) {
      $j$6 = 0;
      while (1) {
       if (($j$6 | 0) == 3) {
        $err$2 = $call441;
        break L90;
       } else $i$4 = 0;
       while (1) {
        if (($i$4 | 0) == 4) break;
        HEAPF64[$config + 8 + ($j$6 << 5) + ($i$4 << 3) >> 3] = +HEAPF64[$trans1 + ($j$6 << 5) + ($i$4 << 3) >> 3];
        $i$4 = $i$4 + 1 | 0;
       }
       $j$6 = $j$6 + 1 | 0;
      }
     } else $err$2 = $call447; while (0);
     if (!($err$2 >= 20.0)) $err$5 = $err$2; else {
      _icpSetInlierProbability(HEAP32[$handle >> 2] | 0, .6) | 0;
      $call475 = +_arGetTransMatRobust($handle, $trans2, $call156, $call163, $mul, $trans1);
      $call481 = +_arGetTransMatRobust($handle, $arraydecay409, $call156, $call163, $mul, $arraydecay409);
      L99 : do if ($call475 < $call481) {
       $j$7 = 0;
       while (1) {
        if (($j$7 | 0) == 3) {
         $err$3 = $call475;
         break L99;
        } else $i$5 = 0;
        while (1) {
         if (($i$5 | 0) == 4) break;
         HEAPF64[$config + 8 + ($j$7 << 5) + ($i$5 << 3) >> 3] = +HEAPF64[$trans1 + ($j$7 << 5) + ($i$5 << 3) >> 3];
         $i$5 = $i$5 + 1 | 0;
        }
        $j$7 = $j$7 + 1 | 0;
       }
      } else $err$3 = $call481; while (0);
      if (!($err$3 >= 20.0)) $err$5 = $err$3; else {
       _icpSetInlierProbability(HEAP32[$handle >> 2] | 0, .4) | 0;
       $call509 = +_arGetTransMatRobust($handle, $trans2, $call156, $call163, $mul, $trans1);
       $call515 = +_arGetTransMatRobust($handle, $arraydecay409, $call156, $call163, $mul, $arraydecay409);
       L108 : do if ($call509 < $call515) {
        $j$8 = 0;
        while (1) {
         if (($j$8 | 0) == 3) {
          $err$4 = $call509;
          break L108;
         } else $i$6 = 0;
         while (1) {
          if (($i$6 | 0) == 4) break;
          HEAPF64[$config + 8 + ($j$8 << 5) + ($i$6 << 3) >> 3] = +HEAPF64[$trans1 + ($j$8 << 5) + ($i$6 << 3) >> 3];
          $i$6 = $i$6 + 1 | 0;
         }
         $j$8 = $j$8 + 1 | 0;
        }
       } else $err$4 = $call515; while (0);
       if (!($err$4 >= 20.0)) $err$5 = $err$4; else {
        _icpSetInlierProbability(HEAP32[$handle >> 2] | 0, 0.0) | 0;
        $call543 = +_arGetTransMatRobust($handle, $trans2, $call156, $call163, $mul, $trans1);
        $call549 = +_arGetTransMatRobust($handle, $arraydecay409, $call156, $call163, $mul, $arraydecay409);
        if ($call543 < $call549) {
         $j$9 = 0;
         while (1) {
          if (($j$9 | 0) == 3) {
           $err$5 = $call543;
           break L79;
          } else $i$7 = 0;
          while (1) {
           if (($i$7 | 0) == 4) break;
           HEAPF64[$config + 8 + ($j$9 << 5) + ($i$7 << 3) >> 3] = +HEAPF64[$trans1 + ($j$9 << 5) + ($i$7 << 3) >> 3];
           $i$7 = $i$7 + 1 | 0;
          }
          $j$9 = $j$9 + 1 | 0;
         }
        } else $err$5 = $call549;
       }
      }
     }
    }
   } else if ($cmp414) {
    $j$10 = 0;
    while (1) {
     if (($j$10 | 0) == 3) {
      $err$5 = $call407;
      break L79;
     } else $i$8 = 0;
     while (1) {
      if (($i$8 | 0) == 4) break;
      HEAPF64[$config + 8 + ($j$10 << 5) + ($i$8 << 3) >> 3] = +HEAPF64[$trans1 + ($j$10 << 5) + ($i$8 << 3) >> 3];
      $i$8 = $i$8 + 1 | 0;
     }
     $j$10 = $j$10 + 1 | 0;
    }
   } else $err$5 = $call413; while (0);
   _free($call163);
   _free($call156);
   $err$6 = $err$5;
  }
  if ($err$6 < 20.0) {
   $$sink = 1;
   $retval$0$ph = $err$6;
   label = 101;
  } else {
   HEAP32[$prevF >> 2] = 0;
   $83 = HEAP32[$marker_num1 >> 2] | 0;
   $i$9 = 0;
   while (1) {
    if (($i$9 | 0) >= ($83 | 0)) {
     $retval$0 = $err$6;
     break L54;
    }
    $85 = HEAP32[(HEAP32[$config >> 2] | 0) + ($i$9 * 320 | 0) + 304 >> 2] | 0;
    if (($85 | 0) >= 0) {
     $cutoffPhase623 = $marker_info + ($85 << 8) + 236 | 0;
     if (!(HEAP32[$cutoffPhase623 >> 2] | 0)) HEAP32[$cutoffPhase623 >> 2] = 8;
    }
    $i$9 = $i$9 + 1 | 0;
   }
  }
 } while (0);
 if ((label | 0) == 101) {
  HEAP32[$prevF >> 2] = $$sink;
  $retval$0 = $retval$0$ph;
 }
 STACKTOP = sp;
 return +$retval$0;
}

function __ZN10__cxxabiv112_GLOBAL__N_116parse_array_typeINS0_2DbEEEPKcS4_S4_RT_($first, $last, $db) {
 $first = $first | 0;
 $last = $last | 0;
 $db = $db | 0;
 var $1 = 0, $11 = 0, $12 = 0, $16 = 0, $20 = 0, $23 = 0, $24 = 0, $25 = 0, $27 = 0, $28 = 0, $3 = 0, $30 = 0, $33 = 0, $35 = 0, $4 = 0, $__end_$i = 0, $__end_$i116 = 0, $__end_$i76 = 0, $__first$addr$0$i$i = 0, $__i$0$i$i$i = 0, $__i$0$i$i$i$i = 0, $__i$0$i$i$i$i190 = 0, $__i$0$i$i$i105 = 0, $__i$0$i$i$i143 = 0, $__i$0$i$i$i153 = 0, $__i$0$i$i$i167 = 0, $__p$0$i$i = 0, $__p$0$ph$i$i = 0, $__size_$i1$i$i$i$i = 0, $__size_$i1$i$i$i$i179 = 0, $add$ptr = 0, $add$ptr$i120 = 0, $add$ptr43 = 0, $add$ptr7 = 0, $and$i$i$i$i = 0, $call = 0, $call$i = 0, $call$i$i$i = 0, $call$i126 = 0, $call$i80 = 0, $call102 = 0, $call37 = 0, $call44 = 0, $call92 = 0, $cmp3$i = 0, $cmp3$i136 = 0, $cmp3$i90 = 0, $first126 = 0, $incdec$ptr = 0, $incdec$ptr$i$i$i = 0, $ref$tmp$i$i$i$i176 = 0, $ref$tmp141 = 0, $ref$tmp142 = 0, $ref$tmp143 = 0, $ref$tmp66 = 0, $ref$tmp67 = 0, $ref$tmp68 = 0, $retval$7 = 0, $second130 = 0, $second158 = 0, $second65 = 0, $sub$ptr$sub$i$i$i$i = 0, $tobool$i$i$i$i = 0, $tobool$i$i$i$i$i162 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(112);
 $ref$tmp$i$i$i$i176 = sp + 96 | 0;
 $ref$tmp66 = sp + 72 | 0;
 $ref$tmp67 = sp + 48 | 0;
 $ref$tmp68 = sp + 36 | 0;
 $ref$tmp141 = sp + 24 | 0;
 $ref$tmp142 = sp + 12 | 0;
 $ref$tmp143 = sp;
 do if (($first | 0) == ($last | 0)) $retval$7 = $first; else if ((HEAP8[$first >> 0] | 0) == 65) {
  $add$ptr = $first + 1 | 0;
  if (($add$ptr | 0) == ($last | 0)) $retval$7 = $first; else {
   $1 = HEAP8[$add$ptr >> 0] | 0;
   if ($1 << 24 >> 24 == 95) {
    $add$ptr7 = $first + 2 | 0;
    $call = __ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($add$ptr7, $last, $db) | 0;
    if (($call | 0) == ($add$ptr7 | 0)) {
     $retval$7 = $first;
     break;
    }
    $__end_$i = $db + 4 | 0;
    $3 = HEAP32[$__end_$i >> 2] | 0;
    if ((HEAP32[$db >> 2] | 0) == ($3 | 0)) {
     $retval$7 = $first;
     break;
    }
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEC2ERKS7_jjRKS6_($ref$tmp$i$i$i$i176, $3 + -12 | 0, 2);
    $call$i = __ZNSt3__211char_traitsIcE6lengthEPKc(14879) | 0;
    $4 = HEAP8[$ref$tmp$i$i$i$i176 + 11 >> 0] | 0;
    if (($call$i | 0) == (($4 << 24 >> 24 < 0 ? HEAP32[$ref$tmp$i$i$i$i176 + 4 >> 2] | 0 : $4 & 255) | 0)) {
     $cmp3$i = (__ZNKSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE7compareEjjPKcj($ref$tmp$i$i$i$i176, 14879, $call$i) | 0) == 0;
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($ref$tmp$i$i$i$i176);
     if ($cmp3$i) __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE5eraseEjj((HEAP32[$__end_$i >> 2] | 0) + -12 | 0);
    } else __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($ref$tmp$i$i$i$i176);
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKc((HEAP32[$__end_$i >> 2] | 0) + -12 | 0, 0, 16320) | 0;
    $retval$7 = $call;
    break;
   }
   if (($1 + -49 & 255) < 9) {
    $call37 = __ZN10__cxxabiv112_GLOBAL__N_112parse_numberEPKcS2_($add$ptr, $last) | 0;
    if (($call37 | 0) == ($last | 0)) {
     $retval$7 = $first;
     break;
    }
    if ((HEAP8[$call37 >> 0] | 0) != 95) {
     $retval$7 = $first;
     break;
    }
    $add$ptr43 = $call37 + 1 | 0;
    $call44 = __ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($add$ptr43, $last, $db) | 0;
    if (($call44 | 0) == ($add$ptr43 | 0)) {
     $retval$7 = $first;
     break;
    }
    $__end_$i76 = $db + 4 | 0;
    $11 = HEAP32[$__end_$i76 >> 2] | 0;
    if ((HEAP32[$db >> 2] | 0) == ($11 | 0)) {
     $retval$7 = $first;
     break;
    }
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEC2ERKS7_jjRKS6_($ref$tmp$i$i$i$i176, $11 + -12 | 0, 2);
    $call$i80 = __ZNSt3__211char_traitsIcE6lengthEPKc(14879) | 0;
    $12 = HEAP8[$ref$tmp$i$i$i$i176 + 11 >> 0] | 0;
    if (($call$i80 | 0) == (($12 << 24 >> 24 < 0 ? HEAP32[$ref$tmp$i$i$i$i176 + 4 >> 2] | 0 : $12 & 255) | 0)) {
     $cmp3$i90 = (__ZNKSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE7compareEjjPKcj($ref$tmp$i$i$i$i176, 14879, $call$i80) | 0) == 0;
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($ref$tmp$i$i$i$i176);
     if ($cmp3$i90) __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE5eraseEjj((HEAP32[$__end_$i76 >> 2] | 0) + -12 | 0);
    } else __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($ref$tmp$i$i$i$i176);
    $second65 = (HEAP32[$__end_$i76 >> 2] | 0) + -12 | 0;
    HEAP32[$ref$tmp68 >> 2] = 0;
    HEAP32[$ref$tmp68 + 4 >> 2] = 0;
    HEAP32[$ref$tmp68 + 8 >> 2] = 0;
    $sub$ptr$sub$i$i$i$i = $call37 - $add$ptr | 0;
    if ($sub$ptr$sub$i$i$i$i >>> 0 > 4294967279) __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($ref$tmp68);
    if ($sub$ptr$sub$i$i$i$i >>> 0 < 11) {
     HEAP8[$ref$tmp68 + 11 >> 0] = $sub$ptr$sub$i$i$i$i;
     $__p$0$ph$i$i = $ref$tmp68;
    } else {
     $and$i$i$i$i = $sub$ptr$sub$i$i$i$i + 16 & -16;
     $call$i$i$i = __ZN10__cxxabiv112_GLOBAL__N_112malloc_allocIcE8allocateEj($and$i$i$i$i) | 0;
     HEAP32[$ref$tmp68 >> 2] = $call$i$i$i;
     HEAP32[$ref$tmp68 + 8 >> 2] = $and$i$i$i$i | -2147483648;
     HEAP32[$ref$tmp68 + 4 >> 2] = $sub$ptr$sub$i$i$i$i;
     $__p$0$ph$i$i = $call$i$i$i;
    }
    $__first$addr$0$i$i = $add$ptr;
    $__p$0$i$i = $__p$0$ph$i$i;
    while (1) {
     if (($__first$addr$0$i$i | 0) == ($call37 | 0)) break;
     __ZNSt3__211char_traitsIcE6assignERcRKc($__p$0$i$i, $__first$addr$0$i$i);
     $__first$addr$0$i$i = $__first$addr$0$i$i + 1 | 0;
     $__p$0$i$i = $__p$0$i$i + 1 | 0;
    }
    HEAP8[$ref$tmp$i$i$i$i176 >> 0] = 0;
    __ZNSt3__211char_traitsIcE6assignERcRKc($__p$0$ph$i$i + $sub$ptr$sub$i$i$i$i | 0, $ref$tmp$i$i$i$i176);
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKc($ref$tmp68, 0, 14879) | 0;
    HEAP32[$ref$tmp67 >> 2] = HEAP32[$ref$tmp68 >> 2];
    HEAP32[$ref$tmp67 + 4 >> 2] = HEAP32[$ref$tmp68 + 4 >> 2];
    HEAP32[$ref$tmp67 + 8 >> 2] = HEAP32[$ref$tmp68 + 8 >> 2];
    $__i$0$i$i$i = 0;
    while (1) {
     if (($__i$0$i$i$i | 0) == 3) break;
     HEAP32[$ref$tmp68 + ($__i$0$i$i$i << 2) >> 2] = 0;
     $__i$0$i$i$i = $__i$0$i$i$i + 1 | 0;
    }
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($ref$tmp67, 14934) | 0;
    HEAP32[$ref$tmp66 >> 2] = HEAP32[$ref$tmp67 >> 2];
    HEAP32[$ref$tmp66 + 4 >> 2] = HEAP32[$ref$tmp67 + 4 >> 2];
    HEAP32[$ref$tmp66 + 8 >> 2] = HEAP32[$ref$tmp67 + 8 >> 2];
    $__i$0$i$i$i105 = 0;
    while (1) {
     if (($__i$0$i$i$i105 | 0) == 3) break;
     HEAP32[$ref$tmp67 + ($__i$0$i$i$i105 << 2) >> 2] = 0;
     $__i$0$i$i$i105 = $__i$0$i$i$i105 + 1 | 0;
    }
    $16 = HEAP8[$ref$tmp66 + 11 >> 0] | 0;
    $tobool$i$i$i$i = $16 << 24 >> 24 < 0;
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKcj($second65, 0, $tobool$i$i$i$i ? HEAP32[$ref$tmp66 >> 2] | 0 : $ref$tmp66, $tobool$i$i$i$i ? HEAP32[$ref$tmp66 + 4 >> 2] | 0 : $16 & 255) | 0;
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($ref$tmp66);
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($ref$tmp67);
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($ref$tmp68);
    $retval$7 = $call44;
    break;
   }
   $call92 = __ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($add$ptr, $last, $db) | 0;
   if (($call92 | 0) == ($add$ptr | 0) | ($call92 | 0) == ($last | 0)) $retval$7 = $first; else if ((HEAP8[$call92 >> 0] | 0) == 95) {
    $incdec$ptr = $call92 + 1 | 0;
    $call102 = __ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($incdec$ptr, $last, $db) | 0;
    if (($call102 | 0) == ($incdec$ptr | 0)) $retval$7 = $first; else {
     $__end_$i116 = $db + 4 | 0;
     $20 = HEAP32[$__end_$i116 >> 2] | 0;
     if ((($20 - (HEAP32[$db >> 2] | 0) | 0) / 24 | 0) >>> 0 < 2) $retval$7 = $first; else {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($ref$tmp66, $20 + -24 | 0);
      $23 = HEAP32[$__end_$i116 >> 2] | 0;
      $add$ptr$i120 = $23 + -24 | 0;
      $24 = $23;
      while (1) {
       if (($24 | 0) == ($add$ptr$i120 | 0)) break;
       $incdec$ptr$i$i$i = $24 + -24 | 0;
       HEAP32[$__end_$i116 >> 2] = $incdec$ptr$i$i$i;
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($incdec$ptr$i$i$i);
       $24 = HEAP32[$__end_$i116 >> 2] | 0;
      }
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($ref$tmp67, $23 + -48 | 0);
      $25 = HEAP32[$__end_$i116 >> 2] | 0;
      $first126 = $25 + -24 | 0;
      $__size_$i1$i$i$i$i = $first126 + 11 | 0;
      if ((HEAP8[$__size_$i1$i$i$i$i >> 0] | 0) < 0) {
       $27 = HEAP32[$first126 >> 2] | 0;
       HEAP8[$ref$tmp$i$i$i$i176 >> 0] = 0;
       __ZNSt3__211char_traitsIcE6assignERcRKc($27, $ref$tmp$i$i$i$i176);
       HEAP32[$25 + -20 >> 2] = 0;
      } else {
       HEAP8[$ref$tmp$i$i$i$i176 >> 0] = 0;
       __ZNSt3__211char_traitsIcE6assignERcRKc($first126, $ref$tmp$i$i$i$i176);
       HEAP8[$__size_$i1$i$i$i$i >> 0] = 0;
      }
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE7reserveEj($first126);
      HEAP32[$first126 >> 2] = HEAP32[$ref$tmp66 >> 2];
      HEAP32[$first126 + 4 >> 2] = HEAP32[$ref$tmp66 + 4 >> 2];
      HEAP32[$first126 + 8 >> 2] = HEAP32[$ref$tmp66 + 8 >> 2];
      $__i$0$i$i$i$i = 0;
      while (1) {
       if (($__i$0$i$i$i$i | 0) == 3) break;
       HEAP32[$ref$tmp66 + ($__i$0$i$i$i$i << 2) >> 2] = 0;
       $__i$0$i$i$i$i = $__i$0$i$i$i$i + 1 | 0;
      }
      $second130 = $ref$tmp66 + 12 | 0;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEC2ERKS7_jjRKS6_($ref$tmp$i$i$i$i176, $second130, 2);
      $call$i126 = __ZNSt3__211char_traitsIcE6lengthEPKc(14879) | 0;
      $28 = HEAP8[$ref$tmp$i$i$i$i176 + 11 >> 0] | 0;
      if (($call$i126 | 0) == (($28 << 24 >> 24 < 0 ? HEAP32[$ref$tmp$i$i$i$i176 + 4 >> 2] | 0 : $28 & 255) | 0)) {
       $cmp3$i136 = (__ZNKSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE7compareEjjPKcj($ref$tmp$i$i$i$i176, 14879, $call$i126) | 0) == 0;
       __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($ref$tmp$i$i$i$i176);
       if ($cmp3$i136) __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE5eraseEjj($second130);
      } else __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($ref$tmp$i$i$i$i176);
      __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($ref$tmp143, $ref$tmp67);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKc($ref$tmp143, 0, 14879) | 0;
      HEAP32[$ref$tmp142 >> 2] = HEAP32[$ref$tmp143 >> 2];
      HEAP32[$ref$tmp142 + 4 >> 2] = HEAP32[$ref$tmp143 + 4 >> 2];
      HEAP32[$ref$tmp142 + 8 >> 2] = HEAP32[$ref$tmp143 + 8 >> 2];
      $__i$0$i$i$i143 = 0;
      while (1) {
       if (($__i$0$i$i$i143 | 0) == 3) break;
       HEAP32[$ref$tmp143 + ($__i$0$i$i$i143 << 2) >> 2] = 0;
       $__i$0$i$i$i143 = $__i$0$i$i$i143 + 1 | 0;
      }
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($ref$tmp142, 14934) | 0;
      HEAP32[$ref$tmp141 >> 2] = HEAP32[$ref$tmp142 >> 2];
      HEAP32[$ref$tmp141 + 4 >> 2] = HEAP32[$ref$tmp142 + 4 >> 2];
      HEAP32[$ref$tmp141 + 8 >> 2] = HEAP32[$ref$tmp142 + 8 >> 2];
      $__i$0$i$i$i153 = 0;
      while (1) {
       if (($__i$0$i$i$i153 | 0) == 3) break;
       HEAP32[$ref$tmp142 + ($__i$0$i$i$i153 << 2) >> 2] = 0;
       $__i$0$i$i$i153 = $__i$0$i$i$i153 + 1 | 0;
      }
      $30 = HEAP8[$second130 + 11 >> 0] | 0;
      $tobool$i$i$i$i$i162 = $30 << 24 >> 24 < 0;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($ref$tmp141, $tobool$i$i$i$i$i162 ? HEAP32[$second130 >> 2] | 0 : $second130, $tobool$i$i$i$i$i162 ? HEAP32[$ref$tmp66 + 16 >> 2] | 0 : $30 & 255) | 0;
      HEAP32[$ref$tmp68 >> 2] = HEAP32[$ref$tmp141 >> 2];
      HEAP32[$ref$tmp68 + 4 >> 2] = HEAP32[$ref$tmp141 + 4 >> 2];
      HEAP32[$ref$tmp68 + 8 >> 2] = HEAP32[$ref$tmp141 + 8 >> 2];
      $__i$0$i$i$i167 = 0;
      while (1) {
       if (($__i$0$i$i$i167 | 0) == 3) break;
       HEAP32[$ref$tmp141 + ($__i$0$i$i$i167 << 2) >> 2] = 0;
       $__i$0$i$i$i167 = $__i$0$i$i$i167 + 1 | 0;
      }
      $33 = HEAP32[$__end_$i116 >> 2] | 0;
      $second158 = $33 + -12 | 0;
      $__size_$i1$i$i$i$i179 = $second158 + 11 | 0;
      if ((HEAP8[$__size_$i1$i$i$i$i179 >> 0] | 0) < 0) {
       $35 = HEAP32[$second158 >> 2] | 0;
       HEAP8[$ref$tmp$i$i$i$i176 >> 0] = 0;
       __ZNSt3__211char_traitsIcE6assignERcRKc($35, $ref$tmp$i$i$i$i176);
       HEAP32[$33 + -8 >> 2] = 0;
      } else {
       HEAP8[$ref$tmp$i$i$i$i176 >> 0] = 0;
       __ZNSt3__211char_traitsIcE6assignERcRKc($second158, $ref$tmp$i$i$i$i176);
       HEAP8[$__size_$i1$i$i$i$i179 >> 0] = 0;
      }
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE7reserveEj($second158);
      HEAP32[$second158 >> 2] = HEAP32[$ref$tmp68 >> 2];
      HEAP32[$second158 + 4 >> 2] = HEAP32[$ref$tmp68 + 4 >> 2];
      HEAP32[$second158 + 8 >> 2] = HEAP32[$ref$tmp68 + 8 >> 2];
      $__i$0$i$i$i$i190 = 0;
      while (1) {
       if (($__i$0$i$i$i$i190 | 0) == 3) break;
       HEAP32[$ref$tmp68 + ($__i$0$i$i$i$i190 << 2) >> 2] = 0;
       $__i$0$i$i$i$i190 = $__i$0$i$i$i$i190 + 1 | 0;
      }
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($ref$tmp68);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($ref$tmp141);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($ref$tmp142);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($ref$tmp143);
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($ref$tmp67);
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($ref$tmp66);
      $retval$7 = $call102;
     }
    }
   } else $retval$7 = $first;
  }
 } else $retval$7 = $first; while (0);
 STACKTOP = sp;
 return $retval$7 | 0;
}

function _arLabelingSubEWI3CA5551($image, $xsize, $ysize, $labelingThresh, $labelInfo) {
 $image = $image | 0;
 $xsize = $xsize | 0;
 $ysize = $ysize | 0;
 $labelingThresh = $labelingThresh | 0;
 $labelInfo = $labelInfo | 0;
 var $$sink = 0, $0 = 0, $10 = 0, $11 = 0, $12 = 0, $15 = 0, $16 = 0, $20 = 0, $21 = 0, $22 = 0, $25 = 0, $26 = 0, $38 = 0, $39 = 0, $4 = 0, $44 = 0, $46 = 0, $5 = 0, $55 = 0, $57 = 0, $59 = 0, $61 = 0, $9 = 0, $add = 0, $add$ptr145 = 0, $add283 = 0, $add288$sink = 0, $arraydecay = 0, $arrayidx134 = 0, $arrayidx137 = 0, $arrayidx140 = 0, $arrayidx201 = 0, $arrayidx204 = 0, $arrayidx207 = 0, $arrayidx215 = 0, $arrayidx218 = 0, $arrayidx221 = 0, $arrayidx224 = 0, $arrayidx246 = 0, $arrayidx249 = 0, $arrayidx252 = 0, $arrayidx255 = 0, $arrayidx275 = 0, $arrayidx278 = 0, $arrayidx281 = 0, $arrayidx339 = 0, $arrayidx396 = 0, $arrayidx404 = 0, $arrayidx412 = 0, $arrayidx416 = 0, $arrayidx432 = 0, $arrayidx448 = 0, $arrayidx464 = 0, $arrayidx485 = 0, $arrayidx489 = 0, $arrayidx495 = 0, $arrayidx55 = 0, $arrayidx64 = 0, $arrayidx67 = 0, $arrayidx70 = 0, $arrayidx87 = 0, $cmp81 = 0, $cond = 0, $conv = 0, $conv43 = 0, $div = 0, $div1 = 0, $dpnt$0 = 0, $dpnt$1 = 0, $i$0 = 0, $i$1 = 0, $i$2 = 0, $i$3 = 0, $i$4 = 0, $i$5 = 0, $i$6 = 0, $inc292 = 0, $j$0 = 0, $j$1 = 0, $j$2 = 0, $k$0 = 0, $k$1 = 0, $k$2 = 0, $k$3 = 0, $label_num337 = 0, $mul = 0, $mul213 = 0, $mul244 = 0, $mul25 = 0, $mul302 = 0, $mul372 = 0, $mul393 = 0, $mul402 = 0, $mul414 = 0, $mul487 = 0, $pnt$0 = 0, $pnt$1 = 0, $pnt1$0 = 0, $pnt1$1 = 0, $pnt2$0 = 0, $pnt2$1 = 0, $pnt2$2 = 0, $pnt2$3 = 0, $retval$0 = 0, $sub = 0, $sub360 = 0, $sub392 = 0, $sub54 = 0, $sub86 = 0, $sub9 = 0, $sub90 = 0, $vararg_buffer = 0, $wk$0 = 0, $wk$1 = 0, $wk$2 = 0, $wk$3 = 0, $wk$4 = 0, $wk_max$0 = 0, $wk_max$1 = 0, $wk_max$2 = 0, $wk_max$3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $vararg_buffer = sp;
 $div = ($xsize | 0) / 2 | 0;
 $div1 = ($ysize | 0) / 2 | 0;
 $0 = HEAP32[$labelInfo >> 2] | 0;
 $sub = $div1 + -1 | 0;
 $i$0 = 0;
 $pnt1$0 = $0;
 $pnt2$0 = $0 + ((Math_imul($sub, $div) | 0) << 1) | 0;
 while (1) {
  if (($i$0 | 0) >= ($div | 0)) break;
  HEAP16[$pnt2$0 >> 1] = 0;
  HEAP16[$pnt1$0 >> 1] = 0;
  $i$0 = $i$0 + 1 | 0;
  $pnt1$0 = $pnt1$0 + 2 | 0;
  $pnt2$0 = $pnt2$0 + 2 | 0;
 }
 $mul = $labelingThresh * 3 | 0;
 $sub9 = $div + -1 | 0;
 $i$1 = 0;
 $pnt1$1 = $0;
 $pnt2$1 = $0 + ($sub9 << 1) | 0;
 while (1) {
  if (($i$1 | 0) >= ($div1 | 0)) break;
  HEAP16[$pnt2$1 >> 1] = 0;
  HEAP16[$pnt1$1 >> 1] = 0;
  $i$1 = $i$1 + 1 | 0;
  $pnt1$1 = $pnt1$1 + ($div << 1) | 0;
  $pnt2$1 = $pnt2$1 + ($div << 1) | 0;
 }
 $arraydecay = $labelInfo + 1179664 | 0;
 $add = $div + 1 | 0;
 $mul25 = $xsize << 1;
 $sub54 = 0 - $div | 0;
 $dpnt$0 = (HEAP32[$labelInfo + 4 >> 2] | 0) + $add | 0;
 $j$0 = 1;
 $pnt$0 = $image + (($xsize << 2) + 4) | 0;
 $pnt2$2 = $0 + ($add << 1) | 0;
 $wk_max$0 = 0;
 L9 : while (1) {
  if (($j$0 | 0) < ($sub | 0)) {
   $dpnt$1 = $dpnt$0;
   $i$2 = 1;
   $pnt$1 = $pnt$0;
   $pnt2$3 = $pnt2$2;
   $wk_max$1 = $wk_max$0;
  } else {
   label = 56;
   break;
  }
  while (1) {
   if (($i$2 | 0) >= ($sub9 | 0)) break;
   $conv = HEAPU8[$pnt$1 >> 0] | 0;
   $conv43 = HEAPU8[$pnt$1 + 1 >> 0] | 0;
   do if ((($conv & 248) + 12 + ($conv << 5 & 224) + ($conv43 >>> 3 & 24) + ($conv43 << 2 & 248) | 0) > ($mul | 0)) {
    HEAP8[$dpnt$1 >> 0] = -1;
    $arrayidx55 = $pnt2$3 + ($sub54 << 1) | 0;
    $4 = HEAP16[$arrayidx55 >> 1] | 0;
    if ($4 << 16 >> 16 > 0) {
     HEAP16[$pnt2$3 >> 1] = $4;
     $5 = ($4 << 16 >> 16) * 7 | 0;
     $arrayidx64 = $labelInfo + 1310736 + ($5 + -7 << 2) | 0;
     HEAP32[$arrayidx64 >> 2] = (HEAP32[$arrayidx64 >> 2] | 0) + 1;
     $arrayidx67 = $labelInfo + 1310736 + ($5 + -6 << 2) | 0;
     HEAP32[$arrayidx67 >> 2] = (HEAP32[$arrayidx67 >> 2] | 0) + $i$2;
     $arrayidx70 = $labelInfo + 1310736 + ($5 + -5 << 2) | 0;
     HEAP32[$arrayidx70 >> 2] = (HEAP32[$arrayidx70 >> 2] | 0) + $j$0;
     HEAP32[$labelInfo + 1310736 + ($5 + -1 << 2) >> 2] = $j$0;
     $wk_max$3 = $wk_max$1;
     break;
    }
    $9 = HEAP16[$arrayidx55 + 2 >> 1] | 0;
    $10 = HEAP16[$arrayidx55 + -2 >> 1] | 0;
    $cmp81 = $10 << 16 >> 16 > 0;
    $sub90 = ($10 << 16 >> 16) + -1 | 0;
    $add$ptr145 = $pnt2$3 + -2 | 0;
    if ($9 << 16 >> 16 <= 0) {
     if ($cmp81) {
      HEAP16[$pnt2$3 >> 1] = $10;
      $mul244 = $sub90 * 7 | 0;
      $arrayidx246 = $labelInfo + 1310736 + ($mul244 << 2) | 0;
      HEAP32[$arrayidx246 >> 2] = (HEAP32[$arrayidx246 >> 2] | 0) + 1;
      $arrayidx249 = $labelInfo + 1310736 + ($mul244 + 1 << 2) | 0;
      HEAP32[$arrayidx249 >> 2] = (HEAP32[$arrayidx249 >> 2] | 0) + $i$2;
      $arrayidx252 = $labelInfo + 1310736 + ($mul244 + 2 << 2) | 0;
      HEAP32[$arrayidx252 >> 2] = (HEAP32[$arrayidx252 >> 2] | 0) + $j$0;
      $arrayidx255 = $labelInfo + 1310736 + ($mul244 + 4 << 2) | 0;
      if ((HEAP32[$arrayidx255 >> 2] | 0) < ($i$2 | 0)) HEAP32[$arrayidx255 >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($mul244 + 6 << 2) >> 2] = $j$0;
      $wk_max$3 = $wk_max$1;
      break;
     }
     $38 = HEAP16[$add$ptr145 >> 1] | 0;
     if ($38 << 16 >> 16 > 0) {
      HEAP16[$pnt2$3 >> 1] = $38;
      $39 = ($38 << 16 >> 16) * 7 | 0;
      $arrayidx275 = $labelInfo + 1310736 + ($39 + -7 << 2) | 0;
      HEAP32[$arrayidx275 >> 2] = (HEAP32[$arrayidx275 >> 2] | 0) + 1;
      $arrayidx278 = $labelInfo + 1310736 + ($39 + -6 << 2) | 0;
      HEAP32[$arrayidx278 >> 2] = (HEAP32[$arrayidx278 >> 2] | 0) + $i$2;
      $arrayidx281 = $labelInfo + 1310736 + ($39 + -5 << 2) | 0;
      HEAP32[$arrayidx281 >> 2] = (HEAP32[$arrayidx281 >> 2] | 0) + $j$0;
      $add283 = $39 + -3 | 0;
      if ((HEAP32[$labelInfo + 1310736 + ($add283 << 2) >> 2] | 0) < ($i$2 | 0)) {
       $$sink = $i$2;
       $add288$sink = $add283;
       $wk_max$2 = $wk_max$1;
      } else {
       $wk_max$3 = $wk_max$1;
       break;
      }
     } else {
      $inc292 = $wk_max$1 + 1 | 0;
      if (($wk_max$1 | 0) > 32767) {
       label = 50;
       break L9;
      }
      HEAP16[$pnt2$3 >> 1] = $inc292;
      HEAP32[$labelInfo + 1179664 + ($wk_max$1 << 2) >> 2] = $inc292 << 16 >> 16;
      $mul302 = $wk_max$1 * 7 | 0;
      HEAP32[$labelInfo + 1310736 + ($mul302 << 2) >> 2] = 1;
      HEAP32[$labelInfo + 1310736 + ($mul302 + 1 << 2) >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($mul302 + 2 << 2) >> 2] = $j$0;
      HEAP32[$labelInfo + 1310736 + ($mul302 + 3 << 2) >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($mul302 + 4 << 2) >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($mul302 + 5 << 2) >> 2] = $j$0;
      $$sink = $j$0;
      $add288$sink = $mul302 + 6 | 0;
      $wk_max$2 = $inc292;
     }
     HEAP32[$labelInfo + 1310736 + ($add288$sink << 2) >> 2] = $$sink;
     $wk_max$3 = $wk_max$2;
     break;
    }
    $sub86 = ($9 << 16 >> 16) + -1 | 0;
    $arrayidx87 = $labelInfo + 1179664 + ($sub86 << 2) | 0;
    if ($cmp81) {
     $11 = HEAP32[$arrayidx87 >> 2] | 0;
     $12 = HEAP32[$labelInfo + 1179664 + ($sub90 << 2) >> 2] | 0;
     L35 : do if (($11 | 0) > ($12 | 0)) {
      HEAP16[$pnt2$3 >> 1] = $12;
      $k$0 = 0;
      $wk$0 = $arraydecay;
      while (1) {
       if (($k$0 | 0) >= ($wk_max$1 | 0)) {
        $15 = $12;
        break L35;
       }
       if ((HEAP32[$wk$0 >> 2] | 0) == ($11 | 0)) HEAP32[$wk$0 >> 2] = $12;
       $k$0 = $k$0 + 1 | 0;
       $wk$0 = $wk$0 + 4 | 0;
      }
     } else {
      HEAP16[$pnt2$3 >> 1] = $11;
      if (($11 | 0) < ($12 | 0)) {
       $k$1 = 0;
       $wk$1 = $arraydecay;
       while (1) {
        if (($k$1 | 0) >= ($wk_max$1 | 0)) {
         $15 = $11;
         break L35;
        }
        if ((HEAP32[$wk$1 >> 2] | 0) == ($12 | 0)) HEAP32[$wk$1 >> 2] = $11;
        $k$1 = $k$1 + 1 | 0;
        $wk$1 = $wk$1 + 4 | 0;
       }
      } else $15 = $11;
     } while (0);
     $16 = ($15 << 16 >> 16) * 7 | 0;
     $arrayidx134 = $labelInfo + 1310736 + ($16 + -7 << 2) | 0;
     HEAP32[$arrayidx134 >> 2] = (HEAP32[$arrayidx134 >> 2] | 0) + 1;
     $arrayidx137 = $labelInfo + 1310736 + ($16 + -6 << 2) | 0;
     HEAP32[$arrayidx137 >> 2] = (HEAP32[$arrayidx137 >> 2] | 0) + $i$2;
     $arrayidx140 = $labelInfo + 1310736 + ($16 + -5 << 2) | 0;
     HEAP32[$arrayidx140 >> 2] = (HEAP32[$arrayidx140 >> 2] | 0) + $j$0;
     HEAP32[$labelInfo + 1310736 + ($16 + -1 << 2) >> 2] = $j$0;
     $wk_max$3 = $wk_max$1;
     break;
    }
    $20 = HEAP16[$add$ptr145 >> 1] | 0;
    if ($20 << 16 >> 16 <= 0) {
     HEAP16[$pnt2$3 >> 1] = $9;
     $mul213 = $sub86 * 7 | 0;
     $arrayidx215 = $labelInfo + 1310736 + ($mul213 << 2) | 0;
     HEAP32[$arrayidx215 >> 2] = (HEAP32[$arrayidx215 >> 2] | 0) + 1;
     $arrayidx218 = $labelInfo + 1310736 + ($mul213 + 1 << 2) | 0;
     HEAP32[$arrayidx218 >> 2] = (HEAP32[$arrayidx218 >> 2] | 0) + $i$2;
     $arrayidx221 = $labelInfo + 1310736 + ($mul213 + 2 << 2) | 0;
     HEAP32[$arrayidx221 >> 2] = (HEAP32[$arrayidx221 >> 2] | 0) + $j$0;
     $arrayidx224 = $labelInfo + 1310736 + ($mul213 + 3 << 2) | 0;
     if ((HEAP32[$arrayidx224 >> 2] | 0) > ($i$2 | 0)) HEAP32[$arrayidx224 >> 2] = $i$2;
     HEAP32[$labelInfo + 1310736 + ($mul213 + 6 << 2) >> 2] = $j$0;
     $wk_max$3 = $wk_max$1;
     break;
    }
    $21 = HEAP32[$arrayidx87 >> 2] | 0;
    $22 = HEAP32[$labelInfo + 1179664 + (($20 << 16 >> 16) + -1 << 2) >> 2] | 0;
    L58 : do if (($21 | 0) > ($22 | 0)) {
     HEAP16[$pnt2$3 >> 1] = $22;
     $k$2 = 0;
     $wk$2 = $arraydecay;
     while (1) {
      if (($k$2 | 0) >= ($wk_max$1 | 0)) {
       $25 = $22;
       break L58;
      }
      if ((HEAP32[$wk$2 >> 2] | 0) == ($21 | 0)) HEAP32[$wk$2 >> 2] = $22;
      $k$2 = $k$2 + 1 | 0;
      $wk$2 = $wk$2 + 4 | 0;
     }
    } else {
     HEAP16[$pnt2$3 >> 1] = $21;
     if (($21 | 0) < ($22 | 0)) {
      $k$3 = 0;
      $wk$3 = $arraydecay;
      while (1) {
       if (($k$3 | 0) >= ($wk_max$1 | 0)) {
        $25 = $21;
        break L58;
       }
       if ((HEAP32[$wk$3 >> 2] | 0) == ($22 | 0)) HEAP32[$wk$3 >> 2] = $21;
       $k$3 = $k$3 + 1 | 0;
       $wk$3 = $wk$3 + 4 | 0;
      }
     } else $25 = $21;
    } while (0);
    $26 = ($25 << 16 >> 16) * 7 | 0;
    $arrayidx201 = $labelInfo + 1310736 + ($26 + -7 << 2) | 0;
    HEAP32[$arrayidx201 >> 2] = (HEAP32[$arrayidx201 >> 2] | 0) + 1;
    $arrayidx204 = $labelInfo + 1310736 + ($26 + -6 << 2) | 0;
    HEAP32[$arrayidx204 >> 2] = (HEAP32[$arrayidx204 >> 2] | 0) + $i$2;
    $arrayidx207 = $labelInfo + 1310736 + ($26 + -5 << 2) | 0;
    HEAP32[$arrayidx207 >> 2] = (HEAP32[$arrayidx207 >> 2] | 0) + $j$0;
    $wk_max$3 = $wk_max$1;
   } else {
    HEAP16[$pnt2$3 >> 1] = 0;
    HEAP8[$dpnt$1 >> 0] = 0;
    $wk_max$3 = $wk_max$1;
   } while (0);
   $dpnt$1 = $dpnt$1 + 1 | 0;
   $i$2 = $i$2 + 1 | 0;
   $pnt$1 = $pnt$1 + 4 | 0;
   $pnt2$3 = $pnt2$3 + 2 | 0;
   $wk_max$1 = $wk_max$3;
  }
  $dpnt$0 = $dpnt$1 + 2 | 0;
  $j$0 = $j$0 + 1 | 0;
  $pnt$0 = $pnt$1 + $mul25 + 8 | 0;
  $pnt2$2 = $pnt2$3 + 4 | 0;
  $wk_max$0 = $wk_max$1;
 }
 L77 : do if ((label | 0) == 50) {
  _arLog(3, 3256, $vararg_buffer);
  $retval$0 = -1;
 } else if ((label | 0) == 56) {
  $arrayidx339 = $labelInfo + 12 | 0;
  $i$3 = 1;
  $j$1 = 1;
  $wk$4 = $arraydecay;
  while (1) {
   if (($i$3 | 0) > ($wk_max$0 | 0)) break;
   $44 = HEAP32[$wk$4 >> 2] | 0;
   if (($44 | 0) == ($i$3 | 0)) {
    $cond = $j$1;
    $j$2 = $j$1 + 1 | 0;
   } else {
    $cond = HEAP32[$labelInfo + 1179664 + ($44 + -1 << 2) >> 2] | 0;
    $j$2 = $j$1;
   }
   HEAP32[$wk$4 >> 2] = $cond;
   $i$3 = $i$3 + 1 | 0;
   $j$1 = $j$2;
   $wk$4 = $wk$4 + 4 | 0;
  }
  $label_num337 = $labelInfo + 8 | 0;
  $sub360 = $j$1 + -1 | 0;
  HEAP32[$label_num337 >> 2] = $sub360;
  if (!$sub360) $retval$0 = 0; else {
   _memset($arrayidx339 | 0, 0, $sub360 << 2 | 0) | 0;
   _memset($labelInfo + 655376 | 0, 0, $sub360 << 4 | 0) | 0;
   $46 = $sub360;
   $i$4 = 0;
   while (1) {
    if (($i$4 | 0) >= ($46 | 0)) {
     $i$5 = 0;
     break;
    }
    $mul372 = $i$4 << 2;
    HEAP32[$labelInfo + 131084 + ($mul372 << 2) >> 2] = $div;
    HEAP32[$labelInfo + 131084 + (($mul372 | 1) << 2) >> 2] = 0;
    HEAP32[$labelInfo + 131084 + (($mul372 | 2) << 2) >> 2] = $div1;
    HEAP32[$labelInfo + 131084 + (($mul372 | 3) << 2) >> 2] = 0;
    $46 = HEAP32[$label_num337 >> 2] | 0;
    $i$4 = $i$4 + 1 | 0;
   }
   while (1) {
    if (($i$5 | 0) >= ($wk_max$0 | 0)) {
     $i$6 = 0;
     break;
    }
    $sub392 = (HEAP32[$labelInfo + 1179664 + ($i$5 << 2) >> 2] | 0) + -1 | 0;
    $mul393 = $i$5 * 7 | 0;
    $arrayidx396 = $labelInfo + 12 + ($sub392 << 2) | 0;
    HEAP32[$arrayidx396 >> 2] = (HEAP32[$arrayidx396 >> 2] | 0) + (HEAP32[$labelInfo + 1310736 + ($mul393 << 2) >> 2] | 0);
    $mul402 = $sub392 << 1;
    $arrayidx404 = $labelInfo + 655376 + ($mul402 << 3) | 0;
    HEAPF64[$arrayidx404 >> 3] = +HEAPF64[$arrayidx404 >> 3] + +(HEAP32[$labelInfo + 1310736 + ($mul393 + 1 << 2) >> 2] | 0);
    $arrayidx412 = $labelInfo + 655376 + (($mul402 | 1) << 3) | 0;
    HEAPF64[$arrayidx412 >> 3] = +HEAPF64[$arrayidx412 >> 3] + +(HEAP32[$labelInfo + 1310736 + ($mul393 + 2 << 2) >> 2] | 0);
    $mul414 = $sub392 << 2;
    $arrayidx416 = $labelInfo + 131084 + ($mul414 << 2) | 0;
    $55 = HEAP32[$labelInfo + 1310736 + ($mul393 + 3 << 2) >> 2] | 0;
    if ((HEAP32[$arrayidx416 >> 2] | 0) > ($55 | 0)) HEAP32[$arrayidx416 >> 2] = $55;
    $arrayidx432 = $labelInfo + 131084 + (($mul414 | 1) << 2) | 0;
    $57 = HEAP32[$labelInfo + 1310736 + ($mul393 + 4 << 2) >> 2] | 0;
    if ((HEAP32[$arrayidx432 >> 2] | 0) < ($57 | 0)) HEAP32[$arrayidx432 >> 2] = $57;
    $arrayidx448 = $labelInfo + 131084 + (($mul414 | 2) << 2) | 0;
    $59 = HEAP32[$labelInfo + 1310736 + ($mul393 + 5 << 2) >> 2] | 0;
    if ((HEAP32[$arrayidx448 >> 2] | 0) > ($59 | 0)) HEAP32[$arrayidx448 >> 2] = $59;
    $arrayidx464 = $labelInfo + 131084 + (($mul414 | 3) << 2) | 0;
    $61 = HEAP32[$labelInfo + 1310736 + ($mul393 + 6 << 2) >> 2] | 0;
    if ((HEAP32[$arrayidx464 >> 2] | 0) < ($61 | 0)) HEAP32[$arrayidx464 >> 2] = $61;
    $i$5 = $i$5 + 1 | 0;
   }
   while (1) {
    if (($i$6 | 0) >= (HEAP32[$label_num337 >> 2] | 0)) {
     $retval$0 = 0;
     break L77;
    }
    $arrayidx485 = $labelInfo + 12 + ($i$6 << 2) | 0;
    $mul487 = $i$6 << 1;
    $arrayidx489 = $labelInfo + 655376 + ($mul487 << 3) | 0;
    HEAPF64[$arrayidx489 >> 3] = +HEAPF64[$arrayidx489 >> 3] / +(HEAP32[$arrayidx485 >> 2] | 0);
    $arrayidx495 = $labelInfo + 655376 + (($mul487 | 1) << 3) | 0;
    HEAPF64[$arrayidx495 >> 3] = +HEAPF64[$arrayidx495 >> 3] / +(HEAP32[$arrayidx485 >> 2] | 0);
    $i$6 = $i$6 + 1 | 0;
   }
  }
 } while (0);
 STACKTOP = sp;
 return $retval$0 | 0;
}
function _arLabelingSubEBI3CA5551($image, $xsize, $ysize, $labelingThresh, $labelInfo) {
 $image = $image | 0;
 $xsize = $xsize | 0;
 $ysize = $ysize | 0;
 $labelingThresh = $labelingThresh | 0;
 $labelInfo = $labelInfo | 0;
 var $$sink = 0, $0 = 0, $10 = 0, $11 = 0, $12 = 0, $15 = 0, $16 = 0, $20 = 0, $21 = 0, $22 = 0, $25 = 0, $26 = 0, $38 = 0, $39 = 0, $4 = 0, $44 = 0, $46 = 0, $5 = 0, $55 = 0, $57 = 0, $59 = 0, $61 = 0, $9 = 0, $add = 0, $add$ptr145 = 0, $add283 = 0, $add288$sink = 0, $arraydecay = 0, $arrayidx134 = 0, $arrayidx137 = 0, $arrayidx140 = 0, $arrayidx201 = 0, $arrayidx204 = 0, $arrayidx207 = 0, $arrayidx215 = 0, $arrayidx218 = 0, $arrayidx221 = 0, $arrayidx224 = 0, $arrayidx246 = 0, $arrayidx249 = 0, $arrayidx252 = 0, $arrayidx255 = 0, $arrayidx275 = 0, $arrayidx278 = 0, $arrayidx281 = 0, $arrayidx339 = 0, $arrayidx396 = 0, $arrayidx404 = 0, $arrayidx412 = 0, $arrayidx416 = 0, $arrayidx432 = 0, $arrayidx448 = 0, $arrayidx464 = 0, $arrayidx485 = 0, $arrayidx489 = 0, $arrayidx495 = 0, $arrayidx55 = 0, $arrayidx64 = 0, $arrayidx67 = 0, $arrayidx70 = 0, $arrayidx87 = 0, $cmp81 = 0, $cond = 0, $conv = 0, $conv43 = 0, $div = 0, $div1 = 0, $dpnt$0 = 0, $dpnt$1 = 0, $i$0 = 0, $i$1 = 0, $i$2 = 0, $i$3 = 0, $i$4 = 0, $i$5 = 0, $i$6 = 0, $inc292 = 0, $j$0 = 0, $j$1 = 0, $j$2 = 0, $k$0 = 0, $k$1 = 0, $k$2 = 0, $k$3 = 0, $label_num337 = 0, $mul = 0, $mul213 = 0, $mul244 = 0, $mul25 = 0, $mul302 = 0, $mul372 = 0, $mul393 = 0, $mul402 = 0, $mul414 = 0, $mul487 = 0, $pnt$0 = 0, $pnt$1 = 0, $pnt1$0 = 0, $pnt1$1 = 0, $pnt2$0 = 0, $pnt2$1 = 0, $pnt2$2 = 0, $pnt2$3 = 0, $retval$0 = 0, $sub = 0, $sub360 = 0, $sub392 = 0, $sub54 = 0, $sub86 = 0, $sub9 = 0, $sub90 = 0, $vararg_buffer = 0, $wk$0 = 0, $wk$1 = 0, $wk$2 = 0, $wk$3 = 0, $wk$4 = 0, $wk_max$0 = 0, $wk_max$1 = 0, $wk_max$2 = 0, $wk_max$3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $vararg_buffer = sp;
 $div = ($xsize | 0) / 2 | 0;
 $div1 = ($ysize | 0) / 2 | 0;
 $0 = HEAP32[$labelInfo >> 2] | 0;
 $sub = $div1 + -1 | 0;
 $i$0 = 0;
 $pnt1$0 = $0;
 $pnt2$0 = $0 + ((Math_imul($sub, $div) | 0) << 1) | 0;
 while (1) {
  if (($i$0 | 0) >= ($div | 0)) break;
  HEAP16[$pnt2$0 >> 1] = 0;
  HEAP16[$pnt1$0 >> 1] = 0;
  $i$0 = $i$0 + 1 | 0;
  $pnt1$0 = $pnt1$0 + 2 | 0;
  $pnt2$0 = $pnt2$0 + 2 | 0;
 }
 $mul = $labelingThresh * 3 | 0;
 $sub9 = $div + -1 | 0;
 $i$1 = 0;
 $pnt1$1 = $0;
 $pnt2$1 = $0 + ($sub9 << 1) | 0;
 while (1) {
  if (($i$1 | 0) >= ($div1 | 0)) break;
  HEAP16[$pnt2$1 >> 1] = 0;
  HEAP16[$pnt1$1 >> 1] = 0;
  $i$1 = $i$1 + 1 | 0;
  $pnt1$1 = $pnt1$1 + ($div << 1) | 0;
  $pnt2$1 = $pnt2$1 + ($div << 1) | 0;
 }
 $arraydecay = $labelInfo + 1179664 | 0;
 $add = $div + 1 | 0;
 $mul25 = $xsize << 1;
 $sub54 = 0 - $div | 0;
 $dpnt$0 = (HEAP32[$labelInfo + 4 >> 2] | 0) + $add | 0;
 $j$0 = 1;
 $pnt$0 = $image + (($xsize << 2) + 4) | 0;
 $pnt2$2 = $0 + ($add << 1) | 0;
 $wk_max$0 = 0;
 L9 : while (1) {
  if (($j$0 | 0) < ($sub | 0)) {
   $dpnt$1 = $dpnt$0;
   $i$2 = 1;
   $pnt$1 = $pnt$0;
   $pnt2$3 = $pnt2$2;
   $wk_max$1 = $wk_max$0;
  } else {
   label = 56;
   break;
  }
  while (1) {
   if (($i$2 | 0) >= ($sub9 | 0)) break;
   $conv = HEAPU8[$pnt$1 >> 0] | 0;
   $conv43 = HEAPU8[$pnt$1 + 1 >> 0] | 0;
   do if ((($conv & 248) + 12 + ($conv << 5 & 224) + ($conv43 >>> 3 & 24) + ($conv43 << 2 & 248) | 0) > ($mul | 0)) {
    HEAP16[$pnt2$3 >> 1] = 0;
    HEAP8[$dpnt$1 >> 0] = 0;
    $wk_max$3 = $wk_max$1;
   } else {
    HEAP8[$dpnt$1 >> 0] = -1;
    $arrayidx55 = $pnt2$3 + ($sub54 << 1) | 0;
    $4 = HEAP16[$arrayidx55 >> 1] | 0;
    if ($4 << 16 >> 16 > 0) {
     HEAP16[$pnt2$3 >> 1] = $4;
     $5 = ($4 << 16 >> 16) * 7 | 0;
     $arrayidx64 = $labelInfo + 1310736 + ($5 + -7 << 2) | 0;
     HEAP32[$arrayidx64 >> 2] = (HEAP32[$arrayidx64 >> 2] | 0) + 1;
     $arrayidx67 = $labelInfo + 1310736 + ($5 + -6 << 2) | 0;
     HEAP32[$arrayidx67 >> 2] = (HEAP32[$arrayidx67 >> 2] | 0) + $i$2;
     $arrayidx70 = $labelInfo + 1310736 + ($5 + -5 << 2) | 0;
     HEAP32[$arrayidx70 >> 2] = (HEAP32[$arrayidx70 >> 2] | 0) + $j$0;
     HEAP32[$labelInfo + 1310736 + ($5 + -1 << 2) >> 2] = $j$0;
     $wk_max$3 = $wk_max$1;
     break;
    }
    $9 = HEAP16[$arrayidx55 + 2 >> 1] | 0;
    $10 = HEAP16[$arrayidx55 + -2 >> 1] | 0;
    $cmp81 = $10 << 16 >> 16 > 0;
    $sub90 = ($10 << 16 >> 16) + -1 | 0;
    $add$ptr145 = $pnt2$3 + -2 | 0;
    if ($9 << 16 >> 16 <= 0) {
     if ($cmp81) {
      HEAP16[$pnt2$3 >> 1] = $10;
      $mul244 = $sub90 * 7 | 0;
      $arrayidx246 = $labelInfo + 1310736 + ($mul244 << 2) | 0;
      HEAP32[$arrayidx246 >> 2] = (HEAP32[$arrayidx246 >> 2] | 0) + 1;
      $arrayidx249 = $labelInfo + 1310736 + ($mul244 + 1 << 2) | 0;
      HEAP32[$arrayidx249 >> 2] = (HEAP32[$arrayidx249 >> 2] | 0) + $i$2;
      $arrayidx252 = $labelInfo + 1310736 + ($mul244 + 2 << 2) | 0;
      HEAP32[$arrayidx252 >> 2] = (HEAP32[$arrayidx252 >> 2] | 0) + $j$0;
      $arrayidx255 = $labelInfo + 1310736 + ($mul244 + 4 << 2) | 0;
      if ((HEAP32[$arrayidx255 >> 2] | 0) < ($i$2 | 0)) HEAP32[$arrayidx255 >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($mul244 + 6 << 2) >> 2] = $j$0;
      $wk_max$3 = $wk_max$1;
      break;
     }
     $38 = HEAP16[$add$ptr145 >> 1] | 0;
     if ($38 << 16 >> 16 > 0) {
      HEAP16[$pnt2$3 >> 1] = $38;
      $39 = ($38 << 16 >> 16) * 7 | 0;
      $arrayidx275 = $labelInfo + 1310736 + ($39 + -7 << 2) | 0;
      HEAP32[$arrayidx275 >> 2] = (HEAP32[$arrayidx275 >> 2] | 0) + 1;
      $arrayidx278 = $labelInfo + 1310736 + ($39 + -6 << 2) | 0;
      HEAP32[$arrayidx278 >> 2] = (HEAP32[$arrayidx278 >> 2] | 0) + $i$2;
      $arrayidx281 = $labelInfo + 1310736 + ($39 + -5 << 2) | 0;
      HEAP32[$arrayidx281 >> 2] = (HEAP32[$arrayidx281 >> 2] | 0) + $j$0;
      $add283 = $39 + -3 | 0;
      if ((HEAP32[$labelInfo + 1310736 + ($add283 << 2) >> 2] | 0) < ($i$2 | 0)) {
       $$sink = $i$2;
       $add288$sink = $add283;
       $wk_max$2 = $wk_max$1;
      } else {
       $wk_max$3 = $wk_max$1;
       break;
      }
     } else {
      $inc292 = $wk_max$1 + 1 | 0;
      if (($wk_max$1 | 0) > 32767) {
       label = 50;
       break L9;
      }
      HEAP16[$pnt2$3 >> 1] = $inc292;
      HEAP32[$labelInfo + 1179664 + ($wk_max$1 << 2) >> 2] = $inc292 << 16 >> 16;
      $mul302 = $wk_max$1 * 7 | 0;
      HEAP32[$labelInfo + 1310736 + ($mul302 << 2) >> 2] = 1;
      HEAP32[$labelInfo + 1310736 + ($mul302 + 1 << 2) >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($mul302 + 2 << 2) >> 2] = $j$0;
      HEAP32[$labelInfo + 1310736 + ($mul302 + 3 << 2) >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($mul302 + 4 << 2) >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($mul302 + 5 << 2) >> 2] = $j$0;
      $$sink = $j$0;
      $add288$sink = $mul302 + 6 | 0;
      $wk_max$2 = $inc292;
     }
     HEAP32[$labelInfo + 1310736 + ($add288$sink << 2) >> 2] = $$sink;
     $wk_max$3 = $wk_max$2;
     break;
    }
    $sub86 = ($9 << 16 >> 16) + -1 | 0;
    $arrayidx87 = $labelInfo + 1179664 + ($sub86 << 2) | 0;
    if ($cmp81) {
     $11 = HEAP32[$arrayidx87 >> 2] | 0;
     $12 = HEAP32[$labelInfo + 1179664 + ($sub90 << 2) >> 2] | 0;
     L36 : do if (($11 | 0) > ($12 | 0)) {
      HEAP16[$pnt2$3 >> 1] = $12;
      $k$0 = 0;
      $wk$0 = $arraydecay;
      while (1) {
       if (($k$0 | 0) >= ($wk_max$1 | 0)) {
        $15 = $12;
        break L36;
       }
       if ((HEAP32[$wk$0 >> 2] | 0) == ($11 | 0)) HEAP32[$wk$0 >> 2] = $12;
       $k$0 = $k$0 + 1 | 0;
       $wk$0 = $wk$0 + 4 | 0;
      }
     } else {
      HEAP16[$pnt2$3 >> 1] = $11;
      if (($11 | 0) < ($12 | 0)) {
       $k$1 = 0;
       $wk$1 = $arraydecay;
       while (1) {
        if (($k$1 | 0) >= ($wk_max$1 | 0)) {
         $15 = $11;
         break L36;
        }
        if ((HEAP32[$wk$1 >> 2] | 0) == ($12 | 0)) HEAP32[$wk$1 >> 2] = $11;
        $k$1 = $k$1 + 1 | 0;
        $wk$1 = $wk$1 + 4 | 0;
       }
      } else $15 = $11;
     } while (0);
     $16 = ($15 << 16 >> 16) * 7 | 0;
     $arrayidx134 = $labelInfo + 1310736 + ($16 + -7 << 2) | 0;
     HEAP32[$arrayidx134 >> 2] = (HEAP32[$arrayidx134 >> 2] | 0) + 1;
     $arrayidx137 = $labelInfo + 1310736 + ($16 + -6 << 2) | 0;
     HEAP32[$arrayidx137 >> 2] = (HEAP32[$arrayidx137 >> 2] | 0) + $i$2;
     $arrayidx140 = $labelInfo + 1310736 + ($16 + -5 << 2) | 0;
     HEAP32[$arrayidx140 >> 2] = (HEAP32[$arrayidx140 >> 2] | 0) + $j$0;
     HEAP32[$labelInfo + 1310736 + ($16 + -1 << 2) >> 2] = $j$0;
     $wk_max$3 = $wk_max$1;
     break;
    }
    $20 = HEAP16[$add$ptr145 >> 1] | 0;
    if ($20 << 16 >> 16 <= 0) {
     HEAP16[$pnt2$3 >> 1] = $9;
     $mul213 = $sub86 * 7 | 0;
     $arrayidx215 = $labelInfo + 1310736 + ($mul213 << 2) | 0;
     HEAP32[$arrayidx215 >> 2] = (HEAP32[$arrayidx215 >> 2] | 0) + 1;
     $arrayidx218 = $labelInfo + 1310736 + ($mul213 + 1 << 2) | 0;
     HEAP32[$arrayidx218 >> 2] = (HEAP32[$arrayidx218 >> 2] | 0) + $i$2;
     $arrayidx221 = $labelInfo + 1310736 + ($mul213 + 2 << 2) | 0;
     HEAP32[$arrayidx221 >> 2] = (HEAP32[$arrayidx221 >> 2] | 0) + $j$0;
     $arrayidx224 = $labelInfo + 1310736 + ($mul213 + 3 << 2) | 0;
     if ((HEAP32[$arrayidx224 >> 2] | 0) > ($i$2 | 0)) HEAP32[$arrayidx224 >> 2] = $i$2;
     HEAP32[$labelInfo + 1310736 + ($mul213 + 6 << 2) >> 2] = $j$0;
     $wk_max$3 = $wk_max$1;
     break;
    }
    $21 = HEAP32[$arrayidx87 >> 2] | 0;
    $22 = HEAP32[$labelInfo + 1179664 + (($20 << 16 >> 16) + -1 << 2) >> 2] | 0;
    L59 : do if (($21 | 0) > ($22 | 0)) {
     HEAP16[$pnt2$3 >> 1] = $22;
     $k$2 = 0;
     $wk$2 = $arraydecay;
     while (1) {
      if (($k$2 | 0) >= ($wk_max$1 | 0)) {
       $25 = $22;
       break L59;
      }
      if ((HEAP32[$wk$2 >> 2] | 0) == ($21 | 0)) HEAP32[$wk$2 >> 2] = $22;
      $k$2 = $k$2 + 1 | 0;
      $wk$2 = $wk$2 + 4 | 0;
     }
    } else {
     HEAP16[$pnt2$3 >> 1] = $21;
     if (($21 | 0) < ($22 | 0)) {
      $k$3 = 0;
      $wk$3 = $arraydecay;
      while (1) {
       if (($k$3 | 0) >= ($wk_max$1 | 0)) {
        $25 = $21;
        break L59;
       }
       if ((HEAP32[$wk$3 >> 2] | 0) == ($22 | 0)) HEAP32[$wk$3 >> 2] = $21;
       $k$3 = $k$3 + 1 | 0;
       $wk$3 = $wk$3 + 4 | 0;
      }
     } else $25 = $21;
    } while (0);
    $26 = ($25 << 16 >> 16) * 7 | 0;
    $arrayidx201 = $labelInfo + 1310736 + ($26 + -7 << 2) | 0;
    HEAP32[$arrayidx201 >> 2] = (HEAP32[$arrayidx201 >> 2] | 0) + 1;
    $arrayidx204 = $labelInfo + 1310736 + ($26 + -6 << 2) | 0;
    HEAP32[$arrayidx204 >> 2] = (HEAP32[$arrayidx204 >> 2] | 0) + $i$2;
    $arrayidx207 = $labelInfo + 1310736 + ($26 + -5 << 2) | 0;
    HEAP32[$arrayidx207 >> 2] = (HEAP32[$arrayidx207 >> 2] | 0) + $j$0;
    $wk_max$3 = $wk_max$1;
   } while (0);
   $dpnt$1 = $dpnt$1 + 1 | 0;
   $i$2 = $i$2 + 1 | 0;
   $pnt$1 = $pnt$1 + 4 | 0;
   $pnt2$3 = $pnt2$3 + 2 | 0;
   $wk_max$1 = $wk_max$3;
  }
  $dpnt$0 = $dpnt$1 + 2 | 0;
  $j$0 = $j$0 + 1 | 0;
  $pnt$0 = $pnt$1 + $mul25 + 8 | 0;
  $pnt2$2 = $pnt2$3 + 4 | 0;
  $wk_max$0 = $wk_max$1;
 }
 L77 : do if ((label | 0) == 50) {
  _arLog(3, 3256, $vararg_buffer);
  $retval$0 = -1;
 } else if ((label | 0) == 56) {
  $arrayidx339 = $labelInfo + 12 | 0;
  $i$3 = 1;
  $j$1 = 1;
  $wk$4 = $arraydecay;
  while (1) {
   if (($i$3 | 0) > ($wk_max$0 | 0)) break;
   $44 = HEAP32[$wk$4 >> 2] | 0;
   if (($44 | 0) == ($i$3 | 0)) {
    $cond = $j$1;
    $j$2 = $j$1 + 1 | 0;
   } else {
    $cond = HEAP32[$labelInfo + 1179664 + ($44 + -1 << 2) >> 2] | 0;
    $j$2 = $j$1;
   }
   HEAP32[$wk$4 >> 2] = $cond;
   $i$3 = $i$3 + 1 | 0;
   $j$1 = $j$2;
   $wk$4 = $wk$4 + 4 | 0;
  }
  $label_num337 = $labelInfo + 8 | 0;
  $sub360 = $j$1 + -1 | 0;
  HEAP32[$label_num337 >> 2] = $sub360;
  if (!$sub360) $retval$0 = 0; else {
   _memset($arrayidx339 | 0, 0, $sub360 << 2 | 0) | 0;
   _memset($labelInfo + 655376 | 0, 0, $sub360 << 4 | 0) | 0;
   $46 = $sub360;
   $i$4 = 0;
   while (1) {
    if (($i$4 | 0) >= ($46 | 0)) {
     $i$5 = 0;
     break;
    }
    $mul372 = $i$4 << 2;
    HEAP32[$labelInfo + 131084 + ($mul372 << 2) >> 2] = $div;
    HEAP32[$labelInfo + 131084 + (($mul372 | 1) << 2) >> 2] = 0;
    HEAP32[$labelInfo + 131084 + (($mul372 | 2) << 2) >> 2] = $div1;
    HEAP32[$labelInfo + 131084 + (($mul372 | 3) << 2) >> 2] = 0;
    $46 = HEAP32[$label_num337 >> 2] | 0;
    $i$4 = $i$4 + 1 | 0;
   }
   while (1) {
    if (($i$5 | 0) >= ($wk_max$0 | 0)) {
     $i$6 = 0;
     break;
    }
    $sub392 = (HEAP32[$labelInfo + 1179664 + ($i$5 << 2) >> 2] | 0) + -1 | 0;
    $mul393 = $i$5 * 7 | 0;
    $arrayidx396 = $labelInfo + 12 + ($sub392 << 2) | 0;
    HEAP32[$arrayidx396 >> 2] = (HEAP32[$arrayidx396 >> 2] | 0) + (HEAP32[$labelInfo + 1310736 + ($mul393 << 2) >> 2] | 0);
    $mul402 = $sub392 << 1;
    $arrayidx404 = $labelInfo + 655376 + ($mul402 << 3) | 0;
    HEAPF64[$arrayidx404 >> 3] = +HEAPF64[$arrayidx404 >> 3] + +(HEAP32[$labelInfo + 1310736 + ($mul393 + 1 << 2) >> 2] | 0);
    $arrayidx412 = $labelInfo + 655376 + (($mul402 | 1) << 3) | 0;
    HEAPF64[$arrayidx412 >> 3] = +HEAPF64[$arrayidx412 >> 3] + +(HEAP32[$labelInfo + 1310736 + ($mul393 + 2 << 2) >> 2] | 0);
    $mul414 = $sub392 << 2;
    $arrayidx416 = $labelInfo + 131084 + ($mul414 << 2) | 0;
    $55 = HEAP32[$labelInfo + 1310736 + ($mul393 + 3 << 2) >> 2] | 0;
    if ((HEAP32[$arrayidx416 >> 2] | 0) > ($55 | 0)) HEAP32[$arrayidx416 >> 2] = $55;
    $arrayidx432 = $labelInfo + 131084 + (($mul414 | 1) << 2) | 0;
    $57 = HEAP32[$labelInfo + 1310736 + ($mul393 + 4 << 2) >> 2] | 0;
    if ((HEAP32[$arrayidx432 >> 2] | 0) < ($57 | 0)) HEAP32[$arrayidx432 >> 2] = $57;
    $arrayidx448 = $labelInfo + 131084 + (($mul414 | 2) << 2) | 0;
    $59 = HEAP32[$labelInfo + 1310736 + ($mul393 + 5 << 2) >> 2] | 0;
    if ((HEAP32[$arrayidx448 >> 2] | 0) > ($59 | 0)) HEAP32[$arrayidx448 >> 2] = $59;
    $arrayidx464 = $labelInfo + 131084 + (($mul414 | 3) << 2) | 0;
    $61 = HEAP32[$labelInfo + 1310736 + ($mul393 + 6 << 2) >> 2] | 0;
    if ((HEAP32[$arrayidx464 >> 2] | 0) < ($61 | 0)) HEAP32[$arrayidx464 >> 2] = $61;
    $i$5 = $i$5 + 1 | 0;
   }
   while (1) {
    if (($i$6 | 0) >= (HEAP32[$label_num337 >> 2] | 0)) {
     $retval$0 = 0;
     break L77;
    }
    $arrayidx485 = $labelInfo + 12 + ($i$6 << 2) | 0;
    $mul487 = $i$6 << 1;
    $arrayidx489 = $labelInfo + 655376 + ($mul487 << 3) | 0;
    HEAPF64[$arrayidx489 >> 3] = +HEAPF64[$arrayidx489 >> 3] / +(HEAP32[$arrayidx485 >> 2] | 0);
    $arrayidx495 = $labelInfo + 655376 + (($mul487 | 1) << 3) | 0;
    HEAPF64[$arrayidx495 >> 3] = +HEAPF64[$arrayidx495 >> 3] / +(HEAP32[$arrayidx485 >> 2] | 0);
    $i$6 = $i$6 + 1 | 0;
   }
  }
 } while (0);
 STACKTOP = sp;
 return $retval$0 | 0;
}

function _arLabelingSubEWI3C565($image, $xsize, $ysize, $labelingThresh, $labelInfo) {
 $image = $image | 0;
 $xsize = $xsize | 0;
 $ysize = $ysize | 0;
 $labelingThresh = $labelingThresh | 0;
 $labelInfo = $labelInfo | 0;
 var $$sink = 0, $0 = 0, $10 = 0, $11 = 0, $12 = 0, $15 = 0, $16 = 0, $20 = 0, $21 = 0, $22 = 0, $25 = 0, $26 = 0, $38 = 0, $39 = 0, $4 = 0, $44 = 0, $46 = 0, $5 = 0, $55 = 0, $57 = 0, $59 = 0, $61 = 0, $9 = 0, $add = 0, $add$ptr145 = 0, $add283 = 0, $add288$sink = 0, $arraydecay = 0, $arrayidx134 = 0, $arrayidx137 = 0, $arrayidx140 = 0, $arrayidx201 = 0, $arrayidx204 = 0, $arrayidx207 = 0, $arrayidx215 = 0, $arrayidx218 = 0, $arrayidx221 = 0, $arrayidx224 = 0, $arrayidx246 = 0, $arrayidx249 = 0, $arrayidx252 = 0, $arrayidx255 = 0, $arrayidx275 = 0, $arrayidx278 = 0, $arrayidx281 = 0, $arrayidx339 = 0, $arrayidx396 = 0, $arrayidx404 = 0, $arrayidx412 = 0, $arrayidx416 = 0, $arrayidx432 = 0, $arrayidx448 = 0, $arrayidx464 = 0, $arrayidx485 = 0, $arrayidx489 = 0, $arrayidx495 = 0, $arrayidx55 = 0, $arrayidx64 = 0, $arrayidx67 = 0, $arrayidx70 = 0, $arrayidx87 = 0, $cmp81 = 0, $cond = 0, $conv = 0, $conv43 = 0, $div = 0, $div1 = 0, $dpnt$0 = 0, $dpnt$1 = 0, $i$0 = 0, $i$1 = 0, $i$2 = 0, $i$3 = 0, $i$4 = 0, $i$5 = 0, $i$6 = 0, $inc292 = 0, $j$0 = 0, $j$1 = 0, $j$2 = 0, $k$0 = 0, $k$1 = 0, $k$2 = 0, $k$3 = 0, $label_num337 = 0, $mul = 0, $mul213 = 0, $mul244 = 0, $mul25 = 0, $mul302 = 0, $mul372 = 0, $mul393 = 0, $mul402 = 0, $mul414 = 0, $mul487 = 0, $pnt$0 = 0, $pnt$1 = 0, $pnt1$0 = 0, $pnt1$1 = 0, $pnt2$0 = 0, $pnt2$1 = 0, $pnt2$2 = 0, $pnt2$3 = 0, $retval$0 = 0, $sub = 0, $sub360 = 0, $sub392 = 0, $sub54 = 0, $sub86 = 0, $sub9 = 0, $sub90 = 0, $vararg_buffer = 0, $wk$0 = 0, $wk$1 = 0, $wk$2 = 0, $wk$3 = 0, $wk$4 = 0, $wk_max$0 = 0, $wk_max$1 = 0, $wk_max$2 = 0, $wk_max$3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $vararg_buffer = sp;
 $div = ($xsize | 0) / 2 | 0;
 $div1 = ($ysize | 0) / 2 | 0;
 $0 = HEAP32[$labelInfo >> 2] | 0;
 $sub = $div1 + -1 | 0;
 $i$0 = 0;
 $pnt1$0 = $0;
 $pnt2$0 = $0 + ((Math_imul($sub, $div) | 0) << 1) | 0;
 while (1) {
  if (($i$0 | 0) >= ($div | 0)) break;
  HEAP16[$pnt2$0 >> 1] = 0;
  HEAP16[$pnt1$0 >> 1] = 0;
  $i$0 = $i$0 + 1 | 0;
  $pnt1$0 = $pnt1$0 + 2 | 0;
  $pnt2$0 = $pnt2$0 + 2 | 0;
 }
 $mul = $labelingThresh * 3 | 0;
 $sub9 = $div + -1 | 0;
 $i$1 = 0;
 $pnt1$1 = $0;
 $pnt2$1 = $0 + ($sub9 << 1) | 0;
 while (1) {
  if (($i$1 | 0) >= ($div1 | 0)) break;
  HEAP16[$pnt2$1 >> 1] = 0;
  HEAP16[$pnt1$1 >> 1] = 0;
  $i$1 = $i$1 + 1 | 0;
  $pnt1$1 = $pnt1$1 + ($div << 1) | 0;
  $pnt2$1 = $pnt2$1 + ($div << 1) | 0;
 }
 $arraydecay = $labelInfo + 1179664 | 0;
 $add = $div + 1 | 0;
 $mul25 = $xsize << 1;
 $sub54 = 0 - $div | 0;
 $dpnt$0 = (HEAP32[$labelInfo + 4 >> 2] | 0) + $add | 0;
 $j$0 = 1;
 $pnt$0 = $image + (($xsize << 2) + 4) | 0;
 $pnt2$2 = $0 + ($add << 1) | 0;
 $wk_max$0 = 0;
 L9 : while (1) {
  if (($j$0 | 0) < ($sub | 0)) {
   $dpnt$1 = $dpnt$0;
   $i$2 = 1;
   $pnt$1 = $pnt$0;
   $pnt2$3 = $pnt2$2;
   $wk_max$1 = $wk_max$0;
  } else {
   label = 56;
   break;
  }
  while (1) {
   if (($i$2 | 0) >= ($sub9 | 0)) break;
   $conv = HEAPU8[$pnt$1 >> 0] | 0;
   $conv43 = HEAPU8[$pnt$1 + 1 >> 0] | 0;
   do if ((($conv & 248) + 10 + ($conv << 5 & 224) + ($conv43 >>> 3 & 28) + ($conv43 << 3 & 248) | 0) > ($mul | 0)) {
    HEAP8[$dpnt$1 >> 0] = -1;
    $arrayidx55 = $pnt2$3 + ($sub54 << 1) | 0;
    $4 = HEAP16[$arrayidx55 >> 1] | 0;
    if ($4 << 16 >> 16 > 0) {
     HEAP16[$pnt2$3 >> 1] = $4;
     $5 = ($4 << 16 >> 16) * 7 | 0;
     $arrayidx64 = $labelInfo + 1310736 + ($5 + -7 << 2) | 0;
     HEAP32[$arrayidx64 >> 2] = (HEAP32[$arrayidx64 >> 2] | 0) + 1;
     $arrayidx67 = $labelInfo + 1310736 + ($5 + -6 << 2) | 0;
     HEAP32[$arrayidx67 >> 2] = (HEAP32[$arrayidx67 >> 2] | 0) + $i$2;
     $arrayidx70 = $labelInfo + 1310736 + ($5 + -5 << 2) | 0;
     HEAP32[$arrayidx70 >> 2] = (HEAP32[$arrayidx70 >> 2] | 0) + $j$0;
     HEAP32[$labelInfo + 1310736 + ($5 + -1 << 2) >> 2] = $j$0;
     $wk_max$3 = $wk_max$1;
     break;
    }
    $9 = HEAP16[$arrayidx55 + 2 >> 1] | 0;
    $10 = HEAP16[$arrayidx55 + -2 >> 1] | 0;
    $cmp81 = $10 << 16 >> 16 > 0;
    $sub90 = ($10 << 16 >> 16) + -1 | 0;
    $add$ptr145 = $pnt2$3 + -2 | 0;
    if ($9 << 16 >> 16 <= 0) {
     if ($cmp81) {
      HEAP16[$pnt2$3 >> 1] = $10;
      $mul244 = $sub90 * 7 | 0;
      $arrayidx246 = $labelInfo + 1310736 + ($mul244 << 2) | 0;
      HEAP32[$arrayidx246 >> 2] = (HEAP32[$arrayidx246 >> 2] | 0) + 1;
      $arrayidx249 = $labelInfo + 1310736 + ($mul244 + 1 << 2) | 0;
      HEAP32[$arrayidx249 >> 2] = (HEAP32[$arrayidx249 >> 2] | 0) + $i$2;
      $arrayidx252 = $labelInfo + 1310736 + ($mul244 + 2 << 2) | 0;
      HEAP32[$arrayidx252 >> 2] = (HEAP32[$arrayidx252 >> 2] | 0) + $j$0;
      $arrayidx255 = $labelInfo + 1310736 + ($mul244 + 4 << 2) | 0;
      if ((HEAP32[$arrayidx255 >> 2] | 0) < ($i$2 | 0)) HEAP32[$arrayidx255 >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($mul244 + 6 << 2) >> 2] = $j$0;
      $wk_max$3 = $wk_max$1;
      break;
     }
     $38 = HEAP16[$add$ptr145 >> 1] | 0;
     if ($38 << 16 >> 16 > 0) {
      HEAP16[$pnt2$3 >> 1] = $38;
      $39 = ($38 << 16 >> 16) * 7 | 0;
      $arrayidx275 = $labelInfo + 1310736 + ($39 + -7 << 2) | 0;
      HEAP32[$arrayidx275 >> 2] = (HEAP32[$arrayidx275 >> 2] | 0) + 1;
      $arrayidx278 = $labelInfo + 1310736 + ($39 + -6 << 2) | 0;
      HEAP32[$arrayidx278 >> 2] = (HEAP32[$arrayidx278 >> 2] | 0) + $i$2;
      $arrayidx281 = $labelInfo + 1310736 + ($39 + -5 << 2) | 0;
      HEAP32[$arrayidx281 >> 2] = (HEAP32[$arrayidx281 >> 2] | 0) + $j$0;
      $add283 = $39 + -3 | 0;
      if ((HEAP32[$labelInfo + 1310736 + ($add283 << 2) >> 2] | 0) < ($i$2 | 0)) {
       $$sink = $i$2;
       $add288$sink = $add283;
       $wk_max$2 = $wk_max$1;
      } else {
       $wk_max$3 = $wk_max$1;
       break;
      }
     } else {
      $inc292 = $wk_max$1 + 1 | 0;
      if (($wk_max$1 | 0) > 32767) {
       label = 50;
       break L9;
      }
      HEAP16[$pnt2$3 >> 1] = $inc292;
      HEAP32[$labelInfo + 1179664 + ($wk_max$1 << 2) >> 2] = $inc292 << 16 >> 16;
      $mul302 = $wk_max$1 * 7 | 0;
      HEAP32[$labelInfo + 1310736 + ($mul302 << 2) >> 2] = 1;
      HEAP32[$labelInfo + 1310736 + ($mul302 + 1 << 2) >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($mul302 + 2 << 2) >> 2] = $j$0;
      HEAP32[$labelInfo + 1310736 + ($mul302 + 3 << 2) >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($mul302 + 4 << 2) >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($mul302 + 5 << 2) >> 2] = $j$0;
      $$sink = $j$0;
      $add288$sink = $mul302 + 6 | 0;
      $wk_max$2 = $inc292;
     }
     HEAP32[$labelInfo + 1310736 + ($add288$sink << 2) >> 2] = $$sink;
     $wk_max$3 = $wk_max$2;
     break;
    }
    $sub86 = ($9 << 16 >> 16) + -1 | 0;
    $arrayidx87 = $labelInfo + 1179664 + ($sub86 << 2) | 0;
    if ($cmp81) {
     $11 = HEAP32[$arrayidx87 >> 2] | 0;
     $12 = HEAP32[$labelInfo + 1179664 + ($sub90 << 2) >> 2] | 0;
     L35 : do if (($11 | 0) > ($12 | 0)) {
      HEAP16[$pnt2$3 >> 1] = $12;
      $k$0 = 0;
      $wk$0 = $arraydecay;
      while (1) {
       if (($k$0 | 0) >= ($wk_max$1 | 0)) {
        $15 = $12;
        break L35;
       }
       if ((HEAP32[$wk$0 >> 2] | 0) == ($11 | 0)) HEAP32[$wk$0 >> 2] = $12;
       $k$0 = $k$0 + 1 | 0;
       $wk$0 = $wk$0 + 4 | 0;
      }
     } else {
      HEAP16[$pnt2$3 >> 1] = $11;
      if (($11 | 0) < ($12 | 0)) {
       $k$1 = 0;
       $wk$1 = $arraydecay;
       while (1) {
        if (($k$1 | 0) >= ($wk_max$1 | 0)) {
         $15 = $11;
         break L35;
        }
        if ((HEAP32[$wk$1 >> 2] | 0) == ($12 | 0)) HEAP32[$wk$1 >> 2] = $11;
        $k$1 = $k$1 + 1 | 0;
        $wk$1 = $wk$1 + 4 | 0;
       }
      } else $15 = $11;
     } while (0);
     $16 = ($15 << 16 >> 16) * 7 | 0;
     $arrayidx134 = $labelInfo + 1310736 + ($16 + -7 << 2) | 0;
     HEAP32[$arrayidx134 >> 2] = (HEAP32[$arrayidx134 >> 2] | 0) + 1;
     $arrayidx137 = $labelInfo + 1310736 + ($16 + -6 << 2) | 0;
     HEAP32[$arrayidx137 >> 2] = (HEAP32[$arrayidx137 >> 2] | 0) + $i$2;
     $arrayidx140 = $labelInfo + 1310736 + ($16 + -5 << 2) | 0;
     HEAP32[$arrayidx140 >> 2] = (HEAP32[$arrayidx140 >> 2] | 0) + $j$0;
     HEAP32[$labelInfo + 1310736 + ($16 + -1 << 2) >> 2] = $j$0;
     $wk_max$3 = $wk_max$1;
     break;
    }
    $20 = HEAP16[$add$ptr145 >> 1] | 0;
    if ($20 << 16 >> 16 <= 0) {
     HEAP16[$pnt2$3 >> 1] = $9;
     $mul213 = $sub86 * 7 | 0;
     $arrayidx215 = $labelInfo + 1310736 + ($mul213 << 2) | 0;
     HEAP32[$arrayidx215 >> 2] = (HEAP32[$arrayidx215 >> 2] | 0) + 1;
     $arrayidx218 = $labelInfo + 1310736 + ($mul213 + 1 << 2) | 0;
     HEAP32[$arrayidx218 >> 2] = (HEAP32[$arrayidx218 >> 2] | 0) + $i$2;
     $arrayidx221 = $labelInfo + 1310736 + ($mul213 + 2 << 2) | 0;
     HEAP32[$arrayidx221 >> 2] = (HEAP32[$arrayidx221 >> 2] | 0) + $j$0;
     $arrayidx224 = $labelInfo + 1310736 + ($mul213 + 3 << 2) | 0;
     if ((HEAP32[$arrayidx224 >> 2] | 0) > ($i$2 | 0)) HEAP32[$arrayidx224 >> 2] = $i$2;
     HEAP32[$labelInfo + 1310736 + ($mul213 + 6 << 2) >> 2] = $j$0;
     $wk_max$3 = $wk_max$1;
     break;
    }
    $21 = HEAP32[$arrayidx87 >> 2] | 0;
    $22 = HEAP32[$labelInfo + 1179664 + (($20 << 16 >> 16) + -1 << 2) >> 2] | 0;
    L58 : do if (($21 | 0) > ($22 | 0)) {
     HEAP16[$pnt2$3 >> 1] = $22;
     $k$2 = 0;
     $wk$2 = $arraydecay;
     while (1) {
      if (($k$2 | 0) >= ($wk_max$1 | 0)) {
       $25 = $22;
       break L58;
      }
      if ((HEAP32[$wk$2 >> 2] | 0) == ($21 | 0)) HEAP32[$wk$2 >> 2] = $22;
      $k$2 = $k$2 + 1 | 0;
      $wk$2 = $wk$2 + 4 | 0;
     }
    } else {
     HEAP16[$pnt2$3 >> 1] = $21;
     if (($21 | 0) < ($22 | 0)) {
      $k$3 = 0;
      $wk$3 = $arraydecay;
      while (1) {
       if (($k$3 | 0) >= ($wk_max$1 | 0)) {
        $25 = $21;
        break L58;
       }
       if ((HEAP32[$wk$3 >> 2] | 0) == ($22 | 0)) HEAP32[$wk$3 >> 2] = $21;
       $k$3 = $k$3 + 1 | 0;
       $wk$3 = $wk$3 + 4 | 0;
      }
     } else $25 = $21;
    } while (0);
    $26 = ($25 << 16 >> 16) * 7 | 0;
    $arrayidx201 = $labelInfo + 1310736 + ($26 + -7 << 2) | 0;
    HEAP32[$arrayidx201 >> 2] = (HEAP32[$arrayidx201 >> 2] | 0) + 1;
    $arrayidx204 = $labelInfo + 1310736 + ($26 + -6 << 2) | 0;
    HEAP32[$arrayidx204 >> 2] = (HEAP32[$arrayidx204 >> 2] | 0) + $i$2;
    $arrayidx207 = $labelInfo + 1310736 + ($26 + -5 << 2) | 0;
    HEAP32[$arrayidx207 >> 2] = (HEAP32[$arrayidx207 >> 2] | 0) + $j$0;
    $wk_max$3 = $wk_max$1;
   } else {
    HEAP16[$pnt2$3 >> 1] = 0;
    HEAP8[$dpnt$1 >> 0] = 0;
    $wk_max$3 = $wk_max$1;
   } while (0);
   $dpnt$1 = $dpnt$1 + 1 | 0;
   $i$2 = $i$2 + 1 | 0;
   $pnt$1 = $pnt$1 + 4 | 0;
   $pnt2$3 = $pnt2$3 + 2 | 0;
   $wk_max$1 = $wk_max$3;
  }
  $dpnt$0 = $dpnt$1 + 2 | 0;
  $j$0 = $j$0 + 1 | 0;
  $pnt$0 = $pnt$1 + $mul25 + 8 | 0;
  $pnt2$2 = $pnt2$3 + 4 | 0;
  $wk_max$0 = $wk_max$1;
 }
 L77 : do if ((label | 0) == 50) {
  _arLog(3, 3256, $vararg_buffer);
  $retval$0 = -1;
 } else if ((label | 0) == 56) {
  $arrayidx339 = $labelInfo + 12 | 0;
  $i$3 = 1;
  $j$1 = 1;
  $wk$4 = $arraydecay;
  while (1) {
   if (($i$3 | 0) > ($wk_max$0 | 0)) break;
   $44 = HEAP32[$wk$4 >> 2] | 0;
   if (($44 | 0) == ($i$3 | 0)) {
    $cond = $j$1;
    $j$2 = $j$1 + 1 | 0;
   } else {
    $cond = HEAP32[$labelInfo + 1179664 + ($44 + -1 << 2) >> 2] | 0;
    $j$2 = $j$1;
   }
   HEAP32[$wk$4 >> 2] = $cond;
   $i$3 = $i$3 + 1 | 0;
   $j$1 = $j$2;
   $wk$4 = $wk$4 + 4 | 0;
  }
  $label_num337 = $labelInfo + 8 | 0;
  $sub360 = $j$1 + -1 | 0;
  HEAP32[$label_num337 >> 2] = $sub360;
  if (!$sub360) $retval$0 = 0; else {
   _memset($arrayidx339 | 0, 0, $sub360 << 2 | 0) | 0;
   _memset($labelInfo + 655376 | 0, 0, $sub360 << 4 | 0) | 0;
   $46 = $sub360;
   $i$4 = 0;
   while (1) {
    if (($i$4 | 0) >= ($46 | 0)) {
     $i$5 = 0;
     break;
    }
    $mul372 = $i$4 << 2;
    HEAP32[$labelInfo + 131084 + ($mul372 << 2) >> 2] = $div;
    HEAP32[$labelInfo + 131084 + (($mul372 | 1) << 2) >> 2] = 0;
    HEAP32[$labelInfo + 131084 + (($mul372 | 2) << 2) >> 2] = $div1;
    HEAP32[$labelInfo + 131084 + (($mul372 | 3) << 2) >> 2] = 0;
    $46 = HEAP32[$label_num337 >> 2] | 0;
    $i$4 = $i$4 + 1 | 0;
   }
   while (1) {
    if (($i$5 | 0) >= ($wk_max$0 | 0)) {
     $i$6 = 0;
     break;
    }
    $sub392 = (HEAP32[$labelInfo + 1179664 + ($i$5 << 2) >> 2] | 0) + -1 | 0;
    $mul393 = $i$5 * 7 | 0;
    $arrayidx396 = $labelInfo + 12 + ($sub392 << 2) | 0;
    HEAP32[$arrayidx396 >> 2] = (HEAP32[$arrayidx396 >> 2] | 0) + (HEAP32[$labelInfo + 1310736 + ($mul393 << 2) >> 2] | 0);
    $mul402 = $sub392 << 1;
    $arrayidx404 = $labelInfo + 655376 + ($mul402 << 3) | 0;
    HEAPF64[$arrayidx404 >> 3] = +HEAPF64[$arrayidx404 >> 3] + +(HEAP32[$labelInfo + 1310736 + ($mul393 + 1 << 2) >> 2] | 0);
    $arrayidx412 = $labelInfo + 655376 + (($mul402 | 1) << 3) | 0;
    HEAPF64[$arrayidx412 >> 3] = +HEAPF64[$arrayidx412 >> 3] + +(HEAP32[$labelInfo + 1310736 + ($mul393 + 2 << 2) >> 2] | 0);
    $mul414 = $sub392 << 2;
    $arrayidx416 = $labelInfo + 131084 + ($mul414 << 2) | 0;
    $55 = HEAP32[$labelInfo + 1310736 + ($mul393 + 3 << 2) >> 2] | 0;
    if ((HEAP32[$arrayidx416 >> 2] | 0) > ($55 | 0)) HEAP32[$arrayidx416 >> 2] = $55;
    $arrayidx432 = $labelInfo + 131084 + (($mul414 | 1) << 2) | 0;
    $57 = HEAP32[$labelInfo + 1310736 + ($mul393 + 4 << 2) >> 2] | 0;
    if ((HEAP32[$arrayidx432 >> 2] | 0) < ($57 | 0)) HEAP32[$arrayidx432 >> 2] = $57;
    $arrayidx448 = $labelInfo + 131084 + (($mul414 | 2) << 2) | 0;
    $59 = HEAP32[$labelInfo + 1310736 + ($mul393 + 5 << 2) >> 2] | 0;
    if ((HEAP32[$arrayidx448 >> 2] | 0) > ($59 | 0)) HEAP32[$arrayidx448 >> 2] = $59;
    $arrayidx464 = $labelInfo + 131084 + (($mul414 | 3) << 2) | 0;
    $61 = HEAP32[$labelInfo + 1310736 + ($mul393 + 6 << 2) >> 2] | 0;
    if ((HEAP32[$arrayidx464 >> 2] | 0) < ($61 | 0)) HEAP32[$arrayidx464 >> 2] = $61;
    $i$5 = $i$5 + 1 | 0;
   }
   while (1) {
    if (($i$6 | 0) >= (HEAP32[$label_num337 >> 2] | 0)) {
     $retval$0 = 0;
     break L77;
    }
    $arrayidx485 = $labelInfo + 12 + ($i$6 << 2) | 0;
    $mul487 = $i$6 << 1;
    $arrayidx489 = $labelInfo + 655376 + ($mul487 << 3) | 0;
    HEAPF64[$arrayidx489 >> 3] = +HEAPF64[$arrayidx489 >> 3] / +(HEAP32[$arrayidx485 >> 2] | 0);
    $arrayidx495 = $labelInfo + 655376 + (($mul487 | 1) << 3) | 0;
    HEAPF64[$arrayidx495 >> 3] = +HEAPF64[$arrayidx495 >> 3] / +(HEAP32[$arrayidx485 >> 2] | 0);
    $i$6 = $i$6 + 1 | 0;
   }
  }
 } while (0);
 STACKTOP = sp;
 return $retval$0 | 0;
}

function _arLabelingSubEBI3C565($image, $xsize, $ysize, $labelingThresh, $labelInfo) {
 $image = $image | 0;
 $xsize = $xsize | 0;
 $ysize = $ysize | 0;
 $labelingThresh = $labelingThresh | 0;
 $labelInfo = $labelInfo | 0;
 var $$sink = 0, $0 = 0, $10 = 0, $11 = 0, $12 = 0, $15 = 0, $16 = 0, $20 = 0, $21 = 0, $22 = 0, $25 = 0, $26 = 0, $38 = 0, $39 = 0, $4 = 0, $44 = 0, $46 = 0, $5 = 0, $55 = 0, $57 = 0, $59 = 0, $61 = 0, $9 = 0, $add = 0, $add$ptr145 = 0, $add283 = 0, $add288$sink = 0, $arraydecay = 0, $arrayidx134 = 0, $arrayidx137 = 0, $arrayidx140 = 0, $arrayidx201 = 0, $arrayidx204 = 0, $arrayidx207 = 0, $arrayidx215 = 0, $arrayidx218 = 0, $arrayidx221 = 0, $arrayidx224 = 0, $arrayidx246 = 0, $arrayidx249 = 0, $arrayidx252 = 0, $arrayidx255 = 0, $arrayidx275 = 0, $arrayidx278 = 0, $arrayidx281 = 0, $arrayidx339 = 0, $arrayidx396 = 0, $arrayidx404 = 0, $arrayidx412 = 0, $arrayidx416 = 0, $arrayidx432 = 0, $arrayidx448 = 0, $arrayidx464 = 0, $arrayidx485 = 0, $arrayidx489 = 0, $arrayidx495 = 0, $arrayidx55 = 0, $arrayidx64 = 0, $arrayidx67 = 0, $arrayidx70 = 0, $arrayidx87 = 0, $cmp81 = 0, $cond = 0, $conv = 0, $conv43 = 0, $div = 0, $div1 = 0, $dpnt$0 = 0, $dpnt$1 = 0, $i$0 = 0, $i$1 = 0, $i$2 = 0, $i$3 = 0, $i$4 = 0, $i$5 = 0, $i$6 = 0, $inc292 = 0, $j$0 = 0, $j$1 = 0, $j$2 = 0, $k$0 = 0, $k$1 = 0, $k$2 = 0, $k$3 = 0, $label_num337 = 0, $mul = 0, $mul213 = 0, $mul244 = 0, $mul25 = 0, $mul302 = 0, $mul372 = 0, $mul393 = 0, $mul402 = 0, $mul414 = 0, $mul487 = 0, $pnt$0 = 0, $pnt$1 = 0, $pnt1$0 = 0, $pnt1$1 = 0, $pnt2$0 = 0, $pnt2$1 = 0, $pnt2$2 = 0, $pnt2$3 = 0, $retval$0 = 0, $sub = 0, $sub360 = 0, $sub392 = 0, $sub54 = 0, $sub86 = 0, $sub9 = 0, $sub90 = 0, $vararg_buffer = 0, $wk$0 = 0, $wk$1 = 0, $wk$2 = 0, $wk$3 = 0, $wk$4 = 0, $wk_max$0 = 0, $wk_max$1 = 0, $wk_max$2 = 0, $wk_max$3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $vararg_buffer = sp;
 $div = ($xsize | 0) / 2 | 0;
 $div1 = ($ysize | 0) / 2 | 0;
 $0 = HEAP32[$labelInfo >> 2] | 0;
 $sub = $div1 + -1 | 0;
 $i$0 = 0;
 $pnt1$0 = $0;
 $pnt2$0 = $0 + ((Math_imul($sub, $div) | 0) << 1) | 0;
 while (1) {
  if (($i$0 | 0) >= ($div | 0)) break;
  HEAP16[$pnt2$0 >> 1] = 0;
  HEAP16[$pnt1$0 >> 1] = 0;
  $i$0 = $i$0 + 1 | 0;
  $pnt1$0 = $pnt1$0 + 2 | 0;
  $pnt2$0 = $pnt2$0 + 2 | 0;
 }
 $mul = $labelingThresh * 3 | 0;
 $sub9 = $div + -1 | 0;
 $i$1 = 0;
 $pnt1$1 = $0;
 $pnt2$1 = $0 + ($sub9 << 1) | 0;
 while (1) {
  if (($i$1 | 0) >= ($div1 | 0)) break;
  HEAP16[$pnt2$1 >> 1] = 0;
  HEAP16[$pnt1$1 >> 1] = 0;
  $i$1 = $i$1 + 1 | 0;
  $pnt1$1 = $pnt1$1 + ($div << 1) | 0;
  $pnt2$1 = $pnt2$1 + ($div << 1) | 0;
 }
 $arraydecay = $labelInfo + 1179664 | 0;
 $add = $div + 1 | 0;
 $mul25 = $xsize << 1;
 $sub54 = 0 - $div | 0;
 $dpnt$0 = (HEAP32[$labelInfo + 4 >> 2] | 0) + $add | 0;
 $j$0 = 1;
 $pnt$0 = $image + (($xsize << 2) + 4) | 0;
 $pnt2$2 = $0 + ($add << 1) | 0;
 $wk_max$0 = 0;
 L9 : while (1) {
  if (($j$0 | 0) < ($sub | 0)) {
   $dpnt$1 = $dpnt$0;
   $i$2 = 1;
   $pnt$1 = $pnt$0;
   $pnt2$3 = $pnt2$2;
   $wk_max$1 = $wk_max$0;
  } else {
   label = 56;
   break;
  }
  while (1) {
   if (($i$2 | 0) >= ($sub9 | 0)) break;
   $conv = HEAPU8[$pnt$1 >> 0] | 0;
   $conv43 = HEAPU8[$pnt$1 + 1 >> 0] | 0;
   do if ((($conv & 248) + 10 + ($conv << 5 & 224) + ($conv43 >>> 3 & 28) + ($conv43 << 3 & 248) | 0) > ($mul | 0)) {
    HEAP16[$pnt2$3 >> 1] = 0;
    HEAP8[$dpnt$1 >> 0] = 0;
    $wk_max$3 = $wk_max$1;
   } else {
    HEAP8[$dpnt$1 >> 0] = -1;
    $arrayidx55 = $pnt2$3 + ($sub54 << 1) | 0;
    $4 = HEAP16[$arrayidx55 >> 1] | 0;
    if ($4 << 16 >> 16 > 0) {
     HEAP16[$pnt2$3 >> 1] = $4;
     $5 = ($4 << 16 >> 16) * 7 | 0;
     $arrayidx64 = $labelInfo + 1310736 + ($5 + -7 << 2) | 0;
     HEAP32[$arrayidx64 >> 2] = (HEAP32[$arrayidx64 >> 2] | 0) + 1;
     $arrayidx67 = $labelInfo + 1310736 + ($5 + -6 << 2) | 0;
     HEAP32[$arrayidx67 >> 2] = (HEAP32[$arrayidx67 >> 2] | 0) + $i$2;
     $arrayidx70 = $labelInfo + 1310736 + ($5 + -5 << 2) | 0;
     HEAP32[$arrayidx70 >> 2] = (HEAP32[$arrayidx70 >> 2] | 0) + $j$0;
     HEAP32[$labelInfo + 1310736 + ($5 + -1 << 2) >> 2] = $j$0;
     $wk_max$3 = $wk_max$1;
     break;
    }
    $9 = HEAP16[$arrayidx55 + 2 >> 1] | 0;
    $10 = HEAP16[$arrayidx55 + -2 >> 1] | 0;
    $cmp81 = $10 << 16 >> 16 > 0;
    $sub90 = ($10 << 16 >> 16) + -1 | 0;
    $add$ptr145 = $pnt2$3 + -2 | 0;
    if ($9 << 16 >> 16 <= 0) {
     if ($cmp81) {
      HEAP16[$pnt2$3 >> 1] = $10;
      $mul244 = $sub90 * 7 | 0;
      $arrayidx246 = $labelInfo + 1310736 + ($mul244 << 2) | 0;
      HEAP32[$arrayidx246 >> 2] = (HEAP32[$arrayidx246 >> 2] | 0) + 1;
      $arrayidx249 = $labelInfo + 1310736 + ($mul244 + 1 << 2) | 0;
      HEAP32[$arrayidx249 >> 2] = (HEAP32[$arrayidx249 >> 2] | 0) + $i$2;
      $arrayidx252 = $labelInfo + 1310736 + ($mul244 + 2 << 2) | 0;
      HEAP32[$arrayidx252 >> 2] = (HEAP32[$arrayidx252 >> 2] | 0) + $j$0;
      $arrayidx255 = $labelInfo + 1310736 + ($mul244 + 4 << 2) | 0;
      if ((HEAP32[$arrayidx255 >> 2] | 0) < ($i$2 | 0)) HEAP32[$arrayidx255 >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($mul244 + 6 << 2) >> 2] = $j$0;
      $wk_max$3 = $wk_max$1;
      break;
     }
     $38 = HEAP16[$add$ptr145 >> 1] | 0;
     if ($38 << 16 >> 16 > 0) {
      HEAP16[$pnt2$3 >> 1] = $38;
      $39 = ($38 << 16 >> 16) * 7 | 0;
      $arrayidx275 = $labelInfo + 1310736 + ($39 + -7 << 2) | 0;
      HEAP32[$arrayidx275 >> 2] = (HEAP32[$arrayidx275 >> 2] | 0) + 1;
      $arrayidx278 = $labelInfo + 1310736 + ($39 + -6 << 2) | 0;
      HEAP32[$arrayidx278 >> 2] = (HEAP32[$arrayidx278 >> 2] | 0) + $i$2;
      $arrayidx281 = $labelInfo + 1310736 + ($39 + -5 << 2) | 0;
      HEAP32[$arrayidx281 >> 2] = (HEAP32[$arrayidx281 >> 2] | 0) + $j$0;
      $add283 = $39 + -3 | 0;
      if ((HEAP32[$labelInfo + 1310736 + ($add283 << 2) >> 2] | 0) < ($i$2 | 0)) {
       $$sink = $i$2;
       $add288$sink = $add283;
       $wk_max$2 = $wk_max$1;
      } else {
       $wk_max$3 = $wk_max$1;
       break;
      }
     } else {
      $inc292 = $wk_max$1 + 1 | 0;
      if (($wk_max$1 | 0) > 32767) {
       label = 50;
       break L9;
      }
      HEAP16[$pnt2$3 >> 1] = $inc292;
      HEAP32[$labelInfo + 1179664 + ($wk_max$1 << 2) >> 2] = $inc292 << 16 >> 16;
      $mul302 = $wk_max$1 * 7 | 0;
      HEAP32[$labelInfo + 1310736 + ($mul302 << 2) >> 2] = 1;
      HEAP32[$labelInfo + 1310736 + ($mul302 + 1 << 2) >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($mul302 + 2 << 2) >> 2] = $j$0;
      HEAP32[$labelInfo + 1310736 + ($mul302 + 3 << 2) >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($mul302 + 4 << 2) >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($mul302 + 5 << 2) >> 2] = $j$0;
      $$sink = $j$0;
      $add288$sink = $mul302 + 6 | 0;
      $wk_max$2 = $inc292;
     }
     HEAP32[$labelInfo + 1310736 + ($add288$sink << 2) >> 2] = $$sink;
     $wk_max$3 = $wk_max$2;
     break;
    }
    $sub86 = ($9 << 16 >> 16) + -1 | 0;
    $arrayidx87 = $labelInfo + 1179664 + ($sub86 << 2) | 0;
    if ($cmp81) {
     $11 = HEAP32[$arrayidx87 >> 2] | 0;
     $12 = HEAP32[$labelInfo + 1179664 + ($sub90 << 2) >> 2] | 0;
     L36 : do if (($11 | 0) > ($12 | 0)) {
      HEAP16[$pnt2$3 >> 1] = $12;
      $k$0 = 0;
      $wk$0 = $arraydecay;
      while (1) {
       if (($k$0 | 0) >= ($wk_max$1 | 0)) {
        $15 = $12;
        break L36;
       }
       if ((HEAP32[$wk$0 >> 2] | 0) == ($11 | 0)) HEAP32[$wk$0 >> 2] = $12;
       $k$0 = $k$0 + 1 | 0;
       $wk$0 = $wk$0 + 4 | 0;
      }
     } else {
      HEAP16[$pnt2$3 >> 1] = $11;
      if (($11 | 0) < ($12 | 0)) {
       $k$1 = 0;
       $wk$1 = $arraydecay;
       while (1) {
        if (($k$1 | 0) >= ($wk_max$1 | 0)) {
         $15 = $11;
         break L36;
        }
        if ((HEAP32[$wk$1 >> 2] | 0) == ($12 | 0)) HEAP32[$wk$1 >> 2] = $11;
        $k$1 = $k$1 + 1 | 0;
        $wk$1 = $wk$1 + 4 | 0;
       }
      } else $15 = $11;
     } while (0);
     $16 = ($15 << 16 >> 16) * 7 | 0;
     $arrayidx134 = $labelInfo + 1310736 + ($16 + -7 << 2) | 0;
     HEAP32[$arrayidx134 >> 2] = (HEAP32[$arrayidx134 >> 2] | 0) + 1;
     $arrayidx137 = $labelInfo + 1310736 + ($16 + -6 << 2) | 0;
     HEAP32[$arrayidx137 >> 2] = (HEAP32[$arrayidx137 >> 2] | 0) + $i$2;
     $arrayidx140 = $labelInfo + 1310736 + ($16 + -5 << 2) | 0;
     HEAP32[$arrayidx140 >> 2] = (HEAP32[$arrayidx140 >> 2] | 0) + $j$0;
     HEAP32[$labelInfo + 1310736 + ($16 + -1 << 2) >> 2] = $j$0;
     $wk_max$3 = $wk_max$1;
     break;
    }
    $20 = HEAP16[$add$ptr145 >> 1] | 0;
    if ($20 << 16 >> 16 <= 0) {
     HEAP16[$pnt2$3 >> 1] = $9;
     $mul213 = $sub86 * 7 | 0;
     $arrayidx215 = $labelInfo + 1310736 + ($mul213 << 2) | 0;
     HEAP32[$arrayidx215 >> 2] = (HEAP32[$arrayidx215 >> 2] | 0) + 1;
     $arrayidx218 = $labelInfo + 1310736 + ($mul213 + 1 << 2) | 0;
     HEAP32[$arrayidx218 >> 2] = (HEAP32[$arrayidx218 >> 2] | 0) + $i$2;
     $arrayidx221 = $labelInfo + 1310736 + ($mul213 + 2 << 2) | 0;
     HEAP32[$arrayidx221 >> 2] = (HEAP32[$arrayidx221 >> 2] | 0) + $j$0;
     $arrayidx224 = $labelInfo + 1310736 + ($mul213 + 3 << 2) | 0;
     if ((HEAP32[$arrayidx224 >> 2] | 0) > ($i$2 | 0)) HEAP32[$arrayidx224 >> 2] = $i$2;
     HEAP32[$labelInfo + 1310736 + ($mul213 + 6 << 2) >> 2] = $j$0;
     $wk_max$3 = $wk_max$1;
     break;
    }
    $21 = HEAP32[$arrayidx87 >> 2] | 0;
    $22 = HEAP32[$labelInfo + 1179664 + (($20 << 16 >> 16) + -1 << 2) >> 2] | 0;
    L59 : do if (($21 | 0) > ($22 | 0)) {
     HEAP16[$pnt2$3 >> 1] = $22;
     $k$2 = 0;
     $wk$2 = $arraydecay;
     while (1) {
      if (($k$2 | 0) >= ($wk_max$1 | 0)) {
       $25 = $22;
       break L59;
      }
      if ((HEAP32[$wk$2 >> 2] | 0) == ($21 | 0)) HEAP32[$wk$2 >> 2] = $22;
      $k$2 = $k$2 + 1 | 0;
      $wk$2 = $wk$2 + 4 | 0;
     }
    } else {
     HEAP16[$pnt2$3 >> 1] = $21;
     if (($21 | 0) < ($22 | 0)) {
      $k$3 = 0;
      $wk$3 = $arraydecay;
      while (1) {
       if (($k$3 | 0) >= ($wk_max$1 | 0)) {
        $25 = $21;
        break L59;
       }
       if ((HEAP32[$wk$3 >> 2] | 0) == ($22 | 0)) HEAP32[$wk$3 >> 2] = $21;
       $k$3 = $k$3 + 1 | 0;
       $wk$3 = $wk$3 + 4 | 0;
      }
     } else $25 = $21;
    } while (0);
    $26 = ($25 << 16 >> 16) * 7 | 0;
    $arrayidx201 = $labelInfo + 1310736 + ($26 + -7 << 2) | 0;
    HEAP32[$arrayidx201 >> 2] = (HEAP32[$arrayidx201 >> 2] | 0) + 1;
    $arrayidx204 = $labelInfo + 1310736 + ($26 + -6 << 2) | 0;
    HEAP32[$arrayidx204 >> 2] = (HEAP32[$arrayidx204 >> 2] | 0) + $i$2;
    $arrayidx207 = $labelInfo + 1310736 + ($26 + -5 << 2) | 0;
    HEAP32[$arrayidx207 >> 2] = (HEAP32[$arrayidx207 >> 2] | 0) + $j$0;
    $wk_max$3 = $wk_max$1;
   } while (0);
   $dpnt$1 = $dpnt$1 + 1 | 0;
   $i$2 = $i$2 + 1 | 0;
   $pnt$1 = $pnt$1 + 4 | 0;
   $pnt2$3 = $pnt2$3 + 2 | 0;
   $wk_max$1 = $wk_max$3;
  }
  $dpnt$0 = $dpnt$1 + 2 | 0;
  $j$0 = $j$0 + 1 | 0;
  $pnt$0 = $pnt$1 + $mul25 + 8 | 0;
  $pnt2$2 = $pnt2$3 + 4 | 0;
  $wk_max$0 = $wk_max$1;
 }
 L77 : do if ((label | 0) == 50) {
  _arLog(3, 3256, $vararg_buffer);
  $retval$0 = -1;
 } else if ((label | 0) == 56) {
  $arrayidx339 = $labelInfo + 12 | 0;
  $i$3 = 1;
  $j$1 = 1;
  $wk$4 = $arraydecay;
  while (1) {
   if (($i$3 | 0) > ($wk_max$0 | 0)) break;
   $44 = HEAP32[$wk$4 >> 2] | 0;
   if (($44 | 0) == ($i$3 | 0)) {
    $cond = $j$1;
    $j$2 = $j$1 + 1 | 0;
   } else {
    $cond = HEAP32[$labelInfo + 1179664 + ($44 + -1 << 2) >> 2] | 0;
    $j$2 = $j$1;
   }
   HEAP32[$wk$4 >> 2] = $cond;
   $i$3 = $i$3 + 1 | 0;
   $j$1 = $j$2;
   $wk$4 = $wk$4 + 4 | 0;
  }
  $label_num337 = $labelInfo + 8 | 0;
  $sub360 = $j$1 + -1 | 0;
  HEAP32[$label_num337 >> 2] = $sub360;
  if (!$sub360) $retval$0 = 0; else {
   _memset($arrayidx339 | 0, 0, $sub360 << 2 | 0) | 0;
   _memset($labelInfo + 655376 | 0, 0, $sub360 << 4 | 0) | 0;
   $46 = $sub360;
   $i$4 = 0;
   while (1) {
    if (($i$4 | 0) >= ($46 | 0)) {
     $i$5 = 0;
     break;
    }
    $mul372 = $i$4 << 2;
    HEAP32[$labelInfo + 131084 + ($mul372 << 2) >> 2] = $div;
    HEAP32[$labelInfo + 131084 + (($mul372 | 1) << 2) >> 2] = 0;
    HEAP32[$labelInfo + 131084 + (($mul372 | 2) << 2) >> 2] = $div1;
    HEAP32[$labelInfo + 131084 + (($mul372 | 3) << 2) >> 2] = 0;
    $46 = HEAP32[$label_num337 >> 2] | 0;
    $i$4 = $i$4 + 1 | 0;
   }
   while (1) {
    if (($i$5 | 0) >= ($wk_max$0 | 0)) {
     $i$6 = 0;
     break;
    }
    $sub392 = (HEAP32[$labelInfo + 1179664 + ($i$5 << 2) >> 2] | 0) + -1 | 0;
    $mul393 = $i$5 * 7 | 0;
    $arrayidx396 = $labelInfo + 12 + ($sub392 << 2) | 0;
    HEAP32[$arrayidx396 >> 2] = (HEAP32[$arrayidx396 >> 2] | 0) + (HEAP32[$labelInfo + 1310736 + ($mul393 << 2) >> 2] | 0);
    $mul402 = $sub392 << 1;
    $arrayidx404 = $labelInfo + 655376 + ($mul402 << 3) | 0;
    HEAPF64[$arrayidx404 >> 3] = +HEAPF64[$arrayidx404 >> 3] + +(HEAP32[$labelInfo + 1310736 + ($mul393 + 1 << 2) >> 2] | 0);
    $arrayidx412 = $labelInfo + 655376 + (($mul402 | 1) << 3) | 0;
    HEAPF64[$arrayidx412 >> 3] = +HEAPF64[$arrayidx412 >> 3] + +(HEAP32[$labelInfo + 1310736 + ($mul393 + 2 << 2) >> 2] | 0);
    $mul414 = $sub392 << 2;
    $arrayidx416 = $labelInfo + 131084 + ($mul414 << 2) | 0;
    $55 = HEAP32[$labelInfo + 1310736 + ($mul393 + 3 << 2) >> 2] | 0;
    if ((HEAP32[$arrayidx416 >> 2] | 0) > ($55 | 0)) HEAP32[$arrayidx416 >> 2] = $55;
    $arrayidx432 = $labelInfo + 131084 + (($mul414 | 1) << 2) | 0;
    $57 = HEAP32[$labelInfo + 1310736 + ($mul393 + 4 << 2) >> 2] | 0;
    if ((HEAP32[$arrayidx432 >> 2] | 0) < ($57 | 0)) HEAP32[$arrayidx432 >> 2] = $57;
    $arrayidx448 = $labelInfo + 131084 + (($mul414 | 2) << 2) | 0;
    $59 = HEAP32[$labelInfo + 1310736 + ($mul393 + 5 << 2) >> 2] | 0;
    if ((HEAP32[$arrayidx448 >> 2] | 0) > ($59 | 0)) HEAP32[$arrayidx448 >> 2] = $59;
    $arrayidx464 = $labelInfo + 131084 + (($mul414 | 3) << 2) | 0;
    $61 = HEAP32[$labelInfo + 1310736 + ($mul393 + 6 << 2) >> 2] | 0;
    if ((HEAP32[$arrayidx464 >> 2] | 0) < ($61 | 0)) HEAP32[$arrayidx464 >> 2] = $61;
    $i$5 = $i$5 + 1 | 0;
   }
   while (1) {
    if (($i$6 | 0) >= (HEAP32[$label_num337 >> 2] | 0)) {
     $retval$0 = 0;
     break L77;
    }
    $arrayidx485 = $labelInfo + 12 + ($i$6 << 2) | 0;
    $mul487 = $i$6 << 1;
    $arrayidx489 = $labelInfo + 655376 + ($mul487 << 3) | 0;
    HEAPF64[$arrayidx489 >> 3] = +HEAPF64[$arrayidx489 >> 3] / +(HEAP32[$arrayidx485 >> 2] | 0);
    $arrayidx495 = $labelInfo + 655376 + (($mul487 | 1) << 3) | 0;
    HEAPF64[$arrayidx495 >> 3] = +HEAPF64[$arrayidx495 >> 3] / +(HEAP32[$arrayidx485 >> 2] | 0);
    $i$6 = $i$6 + 1 | 0;
   }
  }
 } while (0);
 STACKTOP = sp;
 return $retval$0 | 0;
}

function _arLabelingSubEWI3CA4444($image, $xsize, $ysize, $labelingThresh, $labelInfo) {
 $image = $image | 0;
 $xsize = $xsize | 0;
 $ysize = $ysize | 0;
 $labelingThresh = $labelingThresh | 0;
 $labelInfo = $labelInfo | 0;
 var $$sink = 0, $0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $16 = 0, $17 = 0, $21 = 0, $22 = 0, $23 = 0, $26 = 0, $27 = 0, $39 = 0, $40 = 0, $45 = 0, $47 = 0, $5 = 0, $56 = 0, $58 = 0, $6 = 0, $60 = 0, $62 = 0, $add = 0, $add$ptr140 = 0, $add278 = 0, $add283$sink = 0, $arraydecay = 0, $arrayidx129 = 0, $arrayidx132 = 0, $arrayidx135 = 0, $arrayidx196 = 0, $arrayidx199 = 0, $arrayidx202 = 0, $arrayidx210 = 0, $arrayidx213 = 0, $arrayidx216 = 0, $arrayidx219 = 0, $arrayidx241 = 0, $arrayidx244 = 0, $arrayidx247 = 0, $arrayidx250 = 0, $arrayidx270 = 0, $arrayidx273 = 0, $arrayidx276 = 0, $arrayidx334 = 0, $arrayidx391 = 0, $arrayidx399 = 0, $arrayidx407 = 0, $arrayidx411 = 0, $arrayidx427 = 0, $arrayidx443 = 0, $arrayidx459 = 0, $arrayidx480 = 0, $arrayidx484 = 0, $arrayidx490 = 0, $arrayidx50 = 0, $arrayidx59 = 0, $arrayidx62 = 0, $arrayidx65 = 0, $arrayidx82 = 0, $cmp76 = 0, $cond = 0, $conv = 0, $div = 0, $div1 = 0, $dpnt$0 = 0, $dpnt$1 = 0, $i$0 = 0, $i$1 = 0, $i$2 = 0, $i$3 = 0, $i$4 = 0, $i$5 = 0, $i$6 = 0, $inc287 = 0, $j$0 = 0, $j$1 = 0, $j$2 = 0, $k$0 = 0, $k$1 = 0, $k$2 = 0, $k$3 = 0, $label_num332 = 0, $mul = 0, $mul208 = 0, $mul239 = 0, $mul25 = 0, $mul297 = 0, $mul367 = 0, $mul388 = 0, $mul397 = 0, $mul409 = 0, $mul482 = 0, $pnt$0 = 0, $pnt$1 = 0, $pnt1$0 = 0, $pnt1$1 = 0, $pnt2$0 = 0, $pnt2$1 = 0, $pnt2$2 = 0, $pnt2$3 = 0, $retval$0 = 0, $sub = 0, $sub355 = 0, $sub387 = 0, $sub49 = 0, $sub81 = 0, $sub85 = 0, $sub9 = 0, $vararg_buffer = 0, $wk$0 = 0, $wk$1 = 0, $wk$2 = 0, $wk$3 = 0, $wk$4 = 0, $wk_max$0 = 0, $wk_max$1 = 0, $wk_max$2 = 0, $wk_max$3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $vararg_buffer = sp;
 $div = ($xsize | 0) / 2 | 0;
 $div1 = ($ysize | 0) / 2 | 0;
 $0 = HEAP32[$labelInfo >> 2] | 0;
 $sub = $div1 + -1 | 0;
 $i$0 = 0;
 $pnt1$0 = $0;
 $pnt2$0 = $0 + ((Math_imul($sub, $div) | 0) << 1) | 0;
 while (1) {
  if (($i$0 | 0) >= ($div | 0)) break;
  HEAP16[$pnt2$0 >> 1] = 0;
  HEAP16[$pnt1$0 >> 1] = 0;
  $i$0 = $i$0 + 1 | 0;
  $pnt1$0 = $pnt1$0 + 2 | 0;
  $pnt2$0 = $pnt2$0 + 2 | 0;
 }
 $mul = $labelingThresh * 3 | 0;
 $sub9 = $div + -1 | 0;
 $i$1 = 0;
 $pnt1$1 = $0;
 $pnt2$1 = $0 + ($sub9 << 1) | 0;
 while (1) {
  if (($i$1 | 0) >= ($div1 | 0)) break;
  HEAP16[$pnt2$1 >> 1] = 0;
  HEAP16[$pnt1$1 >> 1] = 0;
  $i$1 = $i$1 + 1 | 0;
  $pnt1$1 = $pnt1$1 + ($div << 1) | 0;
  $pnt2$1 = $pnt2$1 + ($div << 1) | 0;
 }
 $arraydecay = $labelInfo + 1179664 | 0;
 $add = $div + 1 | 0;
 $mul25 = $xsize << 1;
 $sub49 = 0 - $div | 0;
 $dpnt$0 = (HEAP32[$labelInfo + 4 >> 2] | 0) + $add | 0;
 $j$0 = 1;
 $pnt$0 = $image + (($xsize << 2) + 4) | 0;
 $pnt2$2 = $0 + ($add << 1) | 0;
 $wk_max$0 = 0;
 L9 : while (1) {
  if (($j$0 | 0) < ($sub | 0)) {
   $dpnt$1 = $dpnt$0;
   $i$2 = 1;
   $pnt$1 = $pnt$0;
   $pnt2$3 = $pnt2$2;
   $wk_max$1 = $wk_max$0;
  } else {
   label = 56;
   break;
  }
  while (1) {
   if (($i$2 | 0) >= ($sub9 | 0)) break;
   $conv = HEAPU8[$pnt$1 >> 0] | 0;
   do if ((($conv & 240) + 24 + ($conv << 4 & 240) + (HEAP8[$pnt$1 + 1 >> 0] & -16 & 255) | 0) > ($mul | 0)) {
    HEAP8[$dpnt$1 >> 0] = -1;
    $arrayidx50 = $pnt2$3 + ($sub49 << 1) | 0;
    $5 = HEAP16[$arrayidx50 >> 1] | 0;
    if ($5 << 16 >> 16 > 0) {
     HEAP16[$pnt2$3 >> 1] = $5;
     $6 = ($5 << 16 >> 16) * 7 | 0;
     $arrayidx59 = $labelInfo + 1310736 + ($6 + -7 << 2) | 0;
     HEAP32[$arrayidx59 >> 2] = (HEAP32[$arrayidx59 >> 2] | 0) + 1;
     $arrayidx62 = $labelInfo + 1310736 + ($6 + -6 << 2) | 0;
     HEAP32[$arrayidx62 >> 2] = (HEAP32[$arrayidx62 >> 2] | 0) + $i$2;
     $arrayidx65 = $labelInfo + 1310736 + ($6 + -5 << 2) | 0;
     HEAP32[$arrayidx65 >> 2] = (HEAP32[$arrayidx65 >> 2] | 0) + $j$0;
     HEAP32[$labelInfo + 1310736 + ($6 + -1 << 2) >> 2] = $j$0;
     $wk_max$3 = $wk_max$1;
     break;
    }
    $10 = HEAP16[$arrayidx50 + 2 >> 1] | 0;
    $11 = HEAP16[$arrayidx50 + -2 >> 1] | 0;
    $cmp76 = $11 << 16 >> 16 > 0;
    $sub85 = ($11 << 16 >> 16) + -1 | 0;
    $add$ptr140 = $pnt2$3 + -2 | 0;
    if ($10 << 16 >> 16 <= 0) {
     if ($cmp76) {
      HEAP16[$pnt2$3 >> 1] = $11;
      $mul239 = $sub85 * 7 | 0;
      $arrayidx241 = $labelInfo + 1310736 + ($mul239 << 2) | 0;
      HEAP32[$arrayidx241 >> 2] = (HEAP32[$arrayidx241 >> 2] | 0) + 1;
      $arrayidx244 = $labelInfo + 1310736 + ($mul239 + 1 << 2) | 0;
      HEAP32[$arrayidx244 >> 2] = (HEAP32[$arrayidx244 >> 2] | 0) + $i$2;
      $arrayidx247 = $labelInfo + 1310736 + ($mul239 + 2 << 2) | 0;
      HEAP32[$arrayidx247 >> 2] = (HEAP32[$arrayidx247 >> 2] | 0) + $j$0;
      $arrayidx250 = $labelInfo + 1310736 + ($mul239 + 4 << 2) | 0;
      if ((HEAP32[$arrayidx250 >> 2] | 0) < ($i$2 | 0)) HEAP32[$arrayidx250 >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($mul239 + 6 << 2) >> 2] = $j$0;
      $wk_max$3 = $wk_max$1;
      break;
     }
     $39 = HEAP16[$add$ptr140 >> 1] | 0;
     if ($39 << 16 >> 16 > 0) {
      HEAP16[$pnt2$3 >> 1] = $39;
      $40 = ($39 << 16 >> 16) * 7 | 0;
      $arrayidx270 = $labelInfo + 1310736 + ($40 + -7 << 2) | 0;
      HEAP32[$arrayidx270 >> 2] = (HEAP32[$arrayidx270 >> 2] | 0) + 1;
      $arrayidx273 = $labelInfo + 1310736 + ($40 + -6 << 2) | 0;
      HEAP32[$arrayidx273 >> 2] = (HEAP32[$arrayidx273 >> 2] | 0) + $i$2;
      $arrayidx276 = $labelInfo + 1310736 + ($40 + -5 << 2) | 0;
      HEAP32[$arrayidx276 >> 2] = (HEAP32[$arrayidx276 >> 2] | 0) + $j$0;
      $add278 = $40 + -3 | 0;
      if ((HEAP32[$labelInfo + 1310736 + ($add278 << 2) >> 2] | 0) < ($i$2 | 0)) {
       $$sink = $i$2;
       $add283$sink = $add278;
       $wk_max$2 = $wk_max$1;
      } else {
       $wk_max$3 = $wk_max$1;
       break;
      }
     } else {
      $inc287 = $wk_max$1 + 1 | 0;
      if (($wk_max$1 | 0) > 32767) {
       label = 50;
       break L9;
      }
      HEAP16[$pnt2$3 >> 1] = $inc287;
      HEAP32[$labelInfo + 1179664 + ($wk_max$1 << 2) >> 2] = $inc287 << 16 >> 16;
      $mul297 = $wk_max$1 * 7 | 0;
      HEAP32[$labelInfo + 1310736 + ($mul297 << 2) >> 2] = 1;
      HEAP32[$labelInfo + 1310736 + ($mul297 + 1 << 2) >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($mul297 + 2 << 2) >> 2] = $j$0;
      HEAP32[$labelInfo + 1310736 + ($mul297 + 3 << 2) >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($mul297 + 4 << 2) >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($mul297 + 5 << 2) >> 2] = $j$0;
      $$sink = $j$0;
      $add283$sink = $mul297 + 6 | 0;
      $wk_max$2 = $inc287;
     }
     HEAP32[$labelInfo + 1310736 + ($add283$sink << 2) >> 2] = $$sink;
     $wk_max$3 = $wk_max$2;
     break;
    }
    $sub81 = ($10 << 16 >> 16) + -1 | 0;
    $arrayidx82 = $labelInfo + 1179664 + ($sub81 << 2) | 0;
    if ($cmp76) {
     $12 = HEAP32[$arrayidx82 >> 2] | 0;
     $13 = HEAP32[$labelInfo + 1179664 + ($sub85 << 2) >> 2] | 0;
     L35 : do if (($12 | 0) > ($13 | 0)) {
      HEAP16[$pnt2$3 >> 1] = $13;
      $k$0 = 0;
      $wk$0 = $arraydecay;
      while (1) {
       if (($k$0 | 0) >= ($wk_max$1 | 0)) {
        $16 = $13;
        break L35;
       }
       if ((HEAP32[$wk$0 >> 2] | 0) == ($12 | 0)) HEAP32[$wk$0 >> 2] = $13;
       $k$0 = $k$0 + 1 | 0;
       $wk$0 = $wk$0 + 4 | 0;
      }
     } else {
      HEAP16[$pnt2$3 >> 1] = $12;
      if (($12 | 0) < ($13 | 0)) {
       $k$1 = 0;
       $wk$1 = $arraydecay;
       while (1) {
        if (($k$1 | 0) >= ($wk_max$1 | 0)) {
         $16 = $12;
         break L35;
        }
        if ((HEAP32[$wk$1 >> 2] | 0) == ($13 | 0)) HEAP32[$wk$1 >> 2] = $12;
        $k$1 = $k$1 + 1 | 0;
        $wk$1 = $wk$1 + 4 | 0;
       }
      } else $16 = $12;
     } while (0);
     $17 = ($16 << 16 >> 16) * 7 | 0;
     $arrayidx129 = $labelInfo + 1310736 + ($17 + -7 << 2) | 0;
     HEAP32[$arrayidx129 >> 2] = (HEAP32[$arrayidx129 >> 2] | 0) + 1;
     $arrayidx132 = $labelInfo + 1310736 + ($17 + -6 << 2) | 0;
     HEAP32[$arrayidx132 >> 2] = (HEAP32[$arrayidx132 >> 2] | 0) + $i$2;
     $arrayidx135 = $labelInfo + 1310736 + ($17 + -5 << 2) | 0;
     HEAP32[$arrayidx135 >> 2] = (HEAP32[$arrayidx135 >> 2] | 0) + $j$0;
     HEAP32[$labelInfo + 1310736 + ($17 + -1 << 2) >> 2] = $j$0;
     $wk_max$3 = $wk_max$1;
     break;
    }
    $21 = HEAP16[$add$ptr140 >> 1] | 0;
    if ($21 << 16 >> 16 <= 0) {
     HEAP16[$pnt2$3 >> 1] = $10;
     $mul208 = $sub81 * 7 | 0;
     $arrayidx210 = $labelInfo + 1310736 + ($mul208 << 2) | 0;
     HEAP32[$arrayidx210 >> 2] = (HEAP32[$arrayidx210 >> 2] | 0) + 1;
     $arrayidx213 = $labelInfo + 1310736 + ($mul208 + 1 << 2) | 0;
     HEAP32[$arrayidx213 >> 2] = (HEAP32[$arrayidx213 >> 2] | 0) + $i$2;
     $arrayidx216 = $labelInfo + 1310736 + ($mul208 + 2 << 2) | 0;
     HEAP32[$arrayidx216 >> 2] = (HEAP32[$arrayidx216 >> 2] | 0) + $j$0;
     $arrayidx219 = $labelInfo + 1310736 + ($mul208 + 3 << 2) | 0;
     if ((HEAP32[$arrayidx219 >> 2] | 0) > ($i$2 | 0)) HEAP32[$arrayidx219 >> 2] = $i$2;
     HEAP32[$labelInfo + 1310736 + ($mul208 + 6 << 2) >> 2] = $j$0;
     $wk_max$3 = $wk_max$1;
     break;
    }
    $22 = HEAP32[$arrayidx82 >> 2] | 0;
    $23 = HEAP32[$labelInfo + 1179664 + (($21 << 16 >> 16) + -1 << 2) >> 2] | 0;
    L58 : do if (($22 | 0) > ($23 | 0)) {
     HEAP16[$pnt2$3 >> 1] = $23;
     $k$2 = 0;
     $wk$2 = $arraydecay;
     while (1) {
      if (($k$2 | 0) >= ($wk_max$1 | 0)) {
       $26 = $23;
       break L58;
      }
      if ((HEAP32[$wk$2 >> 2] | 0) == ($22 | 0)) HEAP32[$wk$2 >> 2] = $23;
      $k$2 = $k$2 + 1 | 0;
      $wk$2 = $wk$2 + 4 | 0;
     }
    } else {
     HEAP16[$pnt2$3 >> 1] = $22;
     if (($22 | 0) < ($23 | 0)) {
      $k$3 = 0;
      $wk$3 = $arraydecay;
      while (1) {
       if (($k$3 | 0) >= ($wk_max$1 | 0)) {
        $26 = $22;
        break L58;
       }
       if ((HEAP32[$wk$3 >> 2] | 0) == ($23 | 0)) HEAP32[$wk$3 >> 2] = $22;
       $k$3 = $k$3 + 1 | 0;
       $wk$3 = $wk$3 + 4 | 0;
      }
     } else $26 = $22;
    } while (0);
    $27 = ($26 << 16 >> 16) * 7 | 0;
    $arrayidx196 = $labelInfo + 1310736 + ($27 + -7 << 2) | 0;
    HEAP32[$arrayidx196 >> 2] = (HEAP32[$arrayidx196 >> 2] | 0) + 1;
    $arrayidx199 = $labelInfo + 1310736 + ($27 + -6 << 2) | 0;
    HEAP32[$arrayidx199 >> 2] = (HEAP32[$arrayidx199 >> 2] | 0) + $i$2;
    $arrayidx202 = $labelInfo + 1310736 + ($27 + -5 << 2) | 0;
    HEAP32[$arrayidx202 >> 2] = (HEAP32[$arrayidx202 >> 2] | 0) + $j$0;
    $wk_max$3 = $wk_max$1;
   } else {
    HEAP16[$pnt2$3 >> 1] = 0;
    HEAP8[$dpnt$1 >> 0] = 0;
    $wk_max$3 = $wk_max$1;
   } while (0);
   $dpnt$1 = $dpnt$1 + 1 | 0;
   $i$2 = $i$2 + 1 | 0;
   $pnt$1 = $pnt$1 + 4 | 0;
   $pnt2$3 = $pnt2$3 + 2 | 0;
   $wk_max$1 = $wk_max$3;
  }
  $dpnt$0 = $dpnt$1 + 2 | 0;
  $j$0 = $j$0 + 1 | 0;
  $pnt$0 = $pnt$1 + $mul25 + 8 | 0;
  $pnt2$2 = $pnt2$3 + 4 | 0;
  $wk_max$0 = $wk_max$1;
 }
 L77 : do if ((label | 0) == 50) {
  _arLog(3, 3256, $vararg_buffer);
  $retval$0 = -1;
 } else if ((label | 0) == 56) {
  $arrayidx334 = $labelInfo + 12 | 0;
  $i$3 = 1;
  $j$1 = 1;
  $wk$4 = $arraydecay;
  while (1) {
   if (($i$3 | 0) > ($wk_max$0 | 0)) break;
   $45 = HEAP32[$wk$4 >> 2] | 0;
   if (($45 | 0) == ($i$3 | 0)) {
    $cond = $j$1;
    $j$2 = $j$1 + 1 | 0;
   } else {
    $cond = HEAP32[$labelInfo + 1179664 + ($45 + -1 << 2) >> 2] | 0;
    $j$2 = $j$1;
   }
   HEAP32[$wk$4 >> 2] = $cond;
   $i$3 = $i$3 + 1 | 0;
   $j$1 = $j$2;
   $wk$4 = $wk$4 + 4 | 0;
  }
  $label_num332 = $labelInfo + 8 | 0;
  $sub355 = $j$1 + -1 | 0;
  HEAP32[$label_num332 >> 2] = $sub355;
  if (!$sub355) $retval$0 = 0; else {
   _memset($arrayidx334 | 0, 0, $sub355 << 2 | 0) | 0;
   _memset($labelInfo + 655376 | 0, 0, $sub355 << 4 | 0) | 0;
   $47 = $sub355;
   $i$4 = 0;
   while (1) {
    if (($i$4 | 0) >= ($47 | 0)) {
     $i$5 = 0;
     break;
    }
    $mul367 = $i$4 << 2;
    HEAP32[$labelInfo + 131084 + ($mul367 << 2) >> 2] = $div;
    HEAP32[$labelInfo + 131084 + (($mul367 | 1) << 2) >> 2] = 0;
    HEAP32[$labelInfo + 131084 + (($mul367 | 2) << 2) >> 2] = $div1;
    HEAP32[$labelInfo + 131084 + (($mul367 | 3) << 2) >> 2] = 0;
    $47 = HEAP32[$label_num332 >> 2] | 0;
    $i$4 = $i$4 + 1 | 0;
   }
   while (1) {
    if (($i$5 | 0) >= ($wk_max$0 | 0)) {
     $i$6 = 0;
     break;
    }
    $sub387 = (HEAP32[$labelInfo + 1179664 + ($i$5 << 2) >> 2] | 0) + -1 | 0;
    $mul388 = $i$5 * 7 | 0;
    $arrayidx391 = $labelInfo + 12 + ($sub387 << 2) | 0;
    HEAP32[$arrayidx391 >> 2] = (HEAP32[$arrayidx391 >> 2] | 0) + (HEAP32[$labelInfo + 1310736 + ($mul388 << 2) >> 2] | 0);
    $mul397 = $sub387 << 1;
    $arrayidx399 = $labelInfo + 655376 + ($mul397 << 3) | 0;
    HEAPF64[$arrayidx399 >> 3] = +HEAPF64[$arrayidx399 >> 3] + +(HEAP32[$labelInfo + 1310736 + ($mul388 + 1 << 2) >> 2] | 0);
    $arrayidx407 = $labelInfo + 655376 + (($mul397 | 1) << 3) | 0;
    HEAPF64[$arrayidx407 >> 3] = +HEAPF64[$arrayidx407 >> 3] + +(HEAP32[$labelInfo + 1310736 + ($mul388 + 2 << 2) >> 2] | 0);
    $mul409 = $sub387 << 2;
    $arrayidx411 = $labelInfo + 131084 + ($mul409 << 2) | 0;
    $56 = HEAP32[$labelInfo + 1310736 + ($mul388 + 3 << 2) >> 2] | 0;
    if ((HEAP32[$arrayidx411 >> 2] | 0) > ($56 | 0)) HEAP32[$arrayidx411 >> 2] = $56;
    $arrayidx427 = $labelInfo + 131084 + (($mul409 | 1) << 2) | 0;
    $58 = HEAP32[$labelInfo + 1310736 + ($mul388 + 4 << 2) >> 2] | 0;
    if ((HEAP32[$arrayidx427 >> 2] | 0) < ($58 | 0)) HEAP32[$arrayidx427 >> 2] = $58;
    $arrayidx443 = $labelInfo + 131084 + (($mul409 | 2) << 2) | 0;
    $60 = HEAP32[$labelInfo + 1310736 + ($mul388 + 5 << 2) >> 2] | 0;
    if ((HEAP32[$arrayidx443 >> 2] | 0) > ($60 | 0)) HEAP32[$arrayidx443 >> 2] = $60;
    $arrayidx459 = $labelInfo + 131084 + (($mul409 | 3) << 2) | 0;
    $62 = HEAP32[$labelInfo + 1310736 + ($mul388 + 6 << 2) >> 2] | 0;
    if ((HEAP32[$arrayidx459 >> 2] | 0) < ($62 | 0)) HEAP32[$arrayidx459 >> 2] = $62;
    $i$5 = $i$5 + 1 | 0;
   }
   while (1) {
    if (($i$6 | 0) >= (HEAP32[$label_num332 >> 2] | 0)) {
     $retval$0 = 0;
     break L77;
    }
    $arrayidx480 = $labelInfo + 12 + ($i$6 << 2) | 0;
    $mul482 = $i$6 << 1;
    $arrayidx484 = $labelInfo + 655376 + ($mul482 << 3) | 0;
    HEAPF64[$arrayidx484 >> 3] = +HEAPF64[$arrayidx484 >> 3] / +(HEAP32[$arrayidx480 >> 2] | 0);
    $arrayidx490 = $labelInfo + 655376 + (($mul482 | 1) << 3) | 0;
    HEAPF64[$arrayidx490 >> 3] = +HEAPF64[$arrayidx490 >> 3] / +(HEAP32[$arrayidx480 >> 2] | 0);
    $i$6 = $i$6 + 1 | 0;
   }
  }
 } while (0);
 STACKTOP = sp;
 return $retval$0 | 0;
}

function _arLabelingSubEBI3CA4444($image, $xsize, $ysize, $labelingThresh, $labelInfo) {
 $image = $image | 0;
 $xsize = $xsize | 0;
 $ysize = $ysize | 0;
 $labelingThresh = $labelingThresh | 0;
 $labelInfo = $labelInfo | 0;
 var $$sink = 0, $0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $16 = 0, $17 = 0, $21 = 0, $22 = 0, $23 = 0, $26 = 0, $27 = 0, $39 = 0, $40 = 0, $45 = 0, $47 = 0, $5 = 0, $56 = 0, $58 = 0, $6 = 0, $60 = 0, $62 = 0, $add = 0, $add$ptr140 = 0, $add278 = 0, $add283$sink = 0, $arraydecay = 0, $arrayidx129 = 0, $arrayidx132 = 0, $arrayidx135 = 0, $arrayidx196 = 0, $arrayidx199 = 0, $arrayidx202 = 0, $arrayidx210 = 0, $arrayidx213 = 0, $arrayidx216 = 0, $arrayidx219 = 0, $arrayidx241 = 0, $arrayidx244 = 0, $arrayidx247 = 0, $arrayidx250 = 0, $arrayidx270 = 0, $arrayidx273 = 0, $arrayidx276 = 0, $arrayidx334 = 0, $arrayidx391 = 0, $arrayidx399 = 0, $arrayidx407 = 0, $arrayidx411 = 0, $arrayidx427 = 0, $arrayidx443 = 0, $arrayidx459 = 0, $arrayidx480 = 0, $arrayidx484 = 0, $arrayidx490 = 0, $arrayidx50 = 0, $arrayidx59 = 0, $arrayidx62 = 0, $arrayidx65 = 0, $arrayidx82 = 0, $cmp76 = 0, $cond = 0, $conv = 0, $div = 0, $div1 = 0, $dpnt$0 = 0, $dpnt$1 = 0, $i$0 = 0, $i$1 = 0, $i$2 = 0, $i$3 = 0, $i$4 = 0, $i$5 = 0, $i$6 = 0, $inc287 = 0, $j$0 = 0, $j$1 = 0, $j$2 = 0, $k$0 = 0, $k$1 = 0, $k$2 = 0, $k$3 = 0, $label_num332 = 0, $mul = 0, $mul208 = 0, $mul239 = 0, $mul25 = 0, $mul297 = 0, $mul367 = 0, $mul388 = 0, $mul397 = 0, $mul409 = 0, $mul482 = 0, $pnt$0 = 0, $pnt$1 = 0, $pnt1$0 = 0, $pnt1$1 = 0, $pnt2$0 = 0, $pnt2$1 = 0, $pnt2$2 = 0, $pnt2$3 = 0, $retval$0 = 0, $sub = 0, $sub355 = 0, $sub387 = 0, $sub49 = 0, $sub81 = 0, $sub85 = 0, $sub9 = 0, $vararg_buffer = 0, $wk$0 = 0, $wk$1 = 0, $wk$2 = 0, $wk$3 = 0, $wk$4 = 0, $wk_max$0 = 0, $wk_max$1 = 0, $wk_max$2 = 0, $wk_max$3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $vararg_buffer = sp;
 $div = ($xsize | 0) / 2 | 0;
 $div1 = ($ysize | 0) / 2 | 0;
 $0 = HEAP32[$labelInfo >> 2] | 0;
 $sub = $div1 + -1 | 0;
 $i$0 = 0;
 $pnt1$0 = $0;
 $pnt2$0 = $0 + ((Math_imul($sub, $div) | 0) << 1) | 0;
 while (1) {
  if (($i$0 | 0) >= ($div | 0)) break;
  HEAP16[$pnt2$0 >> 1] = 0;
  HEAP16[$pnt1$0 >> 1] = 0;
  $i$0 = $i$0 + 1 | 0;
  $pnt1$0 = $pnt1$0 + 2 | 0;
  $pnt2$0 = $pnt2$0 + 2 | 0;
 }
 $mul = $labelingThresh * 3 | 0;
 $sub9 = $div + -1 | 0;
 $i$1 = 0;
 $pnt1$1 = $0;
 $pnt2$1 = $0 + ($sub9 << 1) | 0;
 while (1) {
  if (($i$1 | 0) >= ($div1 | 0)) break;
  HEAP16[$pnt2$1 >> 1] = 0;
  HEAP16[$pnt1$1 >> 1] = 0;
  $i$1 = $i$1 + 1 | 0;
  $pnt1$1 = $pnt1$1 + ($div << 1) | 0;
  $pnt2$1 = $pnt2$1 + ($div << 1) | 0;
 }
 $arraydecay = $labelInfo + 1179664 | 0;
 $add = $div + 1 | 0;
 $mul25 = $xsize << 1;
 $sub49 = 0 - $div | 0;
 $dpnt$0 = (HEAP32[$labelInfo + 4 >> 2] | 0) + $add | 0;
 $j$0 = 1;
 $pnt$0 = $image + (($xsize << 2) + 4) | 0;
 $pnt2$2 = $0 + ($add << 1) | 0;
 $wk_max$0 = 0;
 L9 : while (1) {
  if (($j$0 | 0) < ($sub | 0)) {
   $dpnt$1 = $dpnt$0;
   $i$2 = 1;
   $pnt$1 = $pnt$0;
   $pnt2$3 = $pnt2$2;
   $wk_max$1 = $wk_max$0;
  } else {
   label = 56;
   break;
  }
  while (1) {
   if (($i$2 | 0) >= ($sub9 | 0)) break;
   $conv = HEAPU8[$pnt$1 >> 0] | 0;
   do if ((($conv & 240) + 24 + ($conv << 4 & 240) + (HEAP8[$pnt$1 + 1 >> 0] & -16 & 255) | 0) > ($mul | 0)) {
    HEAP16[$pnt2$3 >> 1] = 0;
    HEAP8[$dpnt$1 >> 0] = 0;
    $wk_max$3 = $wk_max$1;
   } else {
    HEAP8[$dpnt$1 >> 0] = -1;
    $arrayidx50 = $pnt2$3 + ($sub49 << 1) | 0;
    $5 = HEAP16[$arrayidx50 >> 1] | 0;
    if ($5 << 16 >> 16 > 0) {
     HEAP16[$pnt2$3 >> 1] = $5;
     $6 = ($5 << 16 >> 16) * 7 | 0;
     $arrayidx59 = $labelInfo + 1310736 + ($6 + -7 << 2) | 0;
     HEAP32[$arrayidx59 >> 2] = (HEAP32[$arrayidx59 >> 2] | 0) + 1;
     $arrayidx62 = $labelInfo + 1310736 + ($6 + -6 << 2) | 0;
     HEAP32[$arrayidx62 >> 2] = (HEAP32[$arrayidx62 >> 2] | 0) + $i$2;
     $arrayidx65 = $labelInfo + 1310736 + ($6 + -5 << 2) | 0;
     HEAP32[$arrayidx65 >> 2] = (HEAP32[$arrayidx65 >> 2] | 0) + $j$0;
     HEAP32[$labelInfo + 1310736 + ($6 + -1 << 2) >> 2] = $j$0;
     $wk_max$3 = $wk_max$1;
     break;
    }
    $10 = HEAP16[$arrayidx50 + 2 >> 1] | 0;
    $11 = HEAP16[$arrayidx50 + -2 >> 1] | 0;
    $cmp76 = $11 << 16 >> 16 > 0;
    $sub85 = ($11 << 16 >> 16) + -1 | 0;
    $add$ptr140 = $pnt2$3 + -2 | 0;
    if ($10 << 16 >> 16 <= 0) {
     if ($cmp76) {
      HEAP16[$pnt2$3 >> 1] = $11;
      $mul239 = $sub85 * 7 | 0;
      $arrayidx241 = $labelInfo + 1310736 + ($mul239 << 2) | 0;
      HEAP32[$arrayidx241 >> 2] = (HEAP32[$arrayidx241 >> 2] | 0) + 1;
      $arrayidx244 = $labelInfo + 1310736 + ($mul239 + 1 << 2) | 0;
      HEAP32[$arrayidx244 >> 2] = (HEAP32[$arrayidx244 >> 2] | 0) + $i$2;
      $arrayidx247 = $labelInfo + 1310736 + ($mul239 + 2 << 2) | 0;
      HEAP32[$arrayidx247 >> 2] = (HEAP32[$arrayidx247 >> 2] | 0) + $j$0;
      $arrayidx250 = $labelInfo + 1310736 + ($mul239 + 4 << 2) | 0;
      if ((HEAP32[$arrayidx250 >> 2] | 0) < ($i$2 | 0)) HEAP32[$arrayidx250 >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($mul239 + 6 << 2) >> 2] = $j$0;
      $wk_max$3 = $wk_max$1;
      break;
     }
     $39 = HEAP16[$add$ptr140 >> 1] | 0;
     if ($39 << 16 >> 16 > 0) {
      HEAP16[$pnt2$3 >> 1] = $39;
      $40 = ($39 << 16 >> 16) * 7 | 0;
      $arrayidx270 = $labelInfo + 1310736 + ($40 + -7 << 2) | 0;
      HEAP32[$arrayidx270 >> 2] = (HEAP32[$arrayidx270 >> 2] | 0) + 1;
      $arrayidx273 = $labelInfo + 1310736 + ($40 + -6 << 2) | 0;
      HEAP32[$arrayidx273 >> 2] = (HEAP32[$arrayidx273 >> 2] | 0) + $i$2;
      $arrayidx276 = $labelInfo + 1310736 + ($40 + -5 << 2) | 0;
      HEAP32[$arrayidx276 >> 2] = (HEAP32[$arrayidx276 >> 2] | 0) + $j$0;
      $add278 = $40 + -3 | 0;
      if ((HEAP32[$labelInfo + 1310736 + ($add278 << 2) >> 2] | 0) < ($i$2 | 0)) {
       $$sink = $i$2;
       $add283$sink = $add278;
       $wk_max$2 = $wk_max$1;
      } else {
       $wk_max$3 = $wk_max$1;
       break;
      }
     } else {
      $inc287 = $wk_max$1 + 1 | 0;
      if (($wk_max$1 | 0) > 32767) {
       label = 50;
       break L9;
      }
      HEAP16[$pnt2$3 >> 1] = $inc287;
      HEAP32[$labelInfo + 1179664 + ($wk_max$1 << 2) >> 2] = $inc287 << 16 >> 16;
      $mul297 = $wk_max$1 * 7 | 0;
      HEAP32[$labelInfo + 1310736 + ($mul297 << 2) >> 2] = 1;
      HEAP32[$labelInfo + 1310736 + ($mul297 + 1 << 2) >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($mul297 + 2 << 2) >> 2] = $j$0;
      HEAP32[$labelInfo + 1310736 + ($mul297 + 3 << 2) >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($mul297 + 4 << 2) >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($mul297 + 5 << 2) >> 2] = $j$0;
      $$sink = $j$0;
      $add283$sink = $mul297 + 6 | 0;
      $wk_max$2 = $inc287;
     }
     HEAP32[$labelInfo + 1310736 + ($add283$sink << 2) >> 2] = $$sink;
     $wk_max$3 = $wk_max$2;
     break;
    }
    $sub81 = ($10 << 16 >> 16) + -1 | 0;
    $arrayidx82 = $labelInfo + 1179664 + ($sub81 << 2) | 0;
    if ($cmp76) {
     $12 = HEAP32[$arrayidx82 >> 2] | 0;
     $13 = HEAP32[$labelInfo + 1179664 + ($sub85 << 2) >> 2] | 0;
     L36 : do if (($12 | 0) > ($13 | 0)) {
      HEAP16[$pnt2$3 >> 1] = $13;
      $k$0 = 0;
      $wk$0 = $arraydecay;
      while (1) {
       if (($k$0 | 0) >= ($wk_max$1 | 0)) {
        $16 = $13;
        break L36;
       }
       if ((HEAP32[$wk$0 >> 2] | 0) == ($12 | 0)) HEAP32[$wk$0 >> 2] = $13;
       $k$0 = $k$0 + 1 | 0;
       $wk$0 = $wk$0 + 4 | 0;
      }
     } else {
      HEAP16[$pnt2$3 >> 1] = $12;
      if (($12 | 0) < ($13 | 0)) {
       $k$1 = 0;
       $wk$1 = $arraydecay;
       while (1) {
        if (($k$1 | 0) >= ($wk_max$1 | 0)) {
         $16 = $12;
         break L36;
        }
        if ((HEAP32[$wk$1 >> 2] | 0) == ($13 | 0)) HEAP32[$wk$1 >> 2] = $12;
        $k$1 = $k$1 + 1 | 0;
        $wk$1 = $wk$1 + 4 | 0;
       }
      } else $16 = $12;
     } while (0);
     $17 = ($16 << 16 >> 16) * 7 | 0;
     $arrayidx129 = $labelInfo + 1310736 + ($17 + -7 << 2) | 0;
     HEAP32[$arrayidx129 >> 2] = (HEAP32[$arrayidx129 >> 2] | 0) + 1;
     $arrayidx132 = $labelInfo + 1310736 + ($17 + -6 << 2) | 0;
     HEAP32[$arrayidx132 >> 2] = (HEAP32[$arrayidx132 >> 2] | 0) + $i$2;
     $arrayidx135 = $labelInfo + 1310736 + ($17 + -5 << 2) | 0;
     HEAP32[$arrayidx135 >> 2] = (HEAP32[$arrayidx135 >> 2] | 0) + $j$0;
     HEAP32[$labelInfo + 1310736 + ($17 + -1 << 2) >> 2] = $j$0;
     $wk_max$3 = $wk_max$1;
     break;
    }
    $21 = HEAP16[$add$ptr140 >> 1] | 0;
    if ($21 << 16 >> 16 <= 0) {
     HEAP16[$pnt2$3 >> 1] = $10;
     $mul208 = $sub81 * 7 | 0;
     $arrayidx210 = $labelInfo + 1310736 + ($mul208 << 2) | 0;
     HEAP32[$arrayidx210 >> 2] = (HEAP32[$arrayidx210 >> 2] | 0) + 1;
     $arrayidx213 = $labelInfo + 1310736 + ($mul208 + 1 << 2) | 0;
     HEAP32[$arrayidx213 >> 2] = (HEAP32[$arrayidx213 >> 2] | 0) + $i$2;
     $arrayidx216 = $labelInfo + 1310736 + ($mul208 + 2 << 2) | 0;
     HEAP32[$arrayidx216 >> 2] = (HEAP32[$arrayidx216 >> 2] | 0) + $j$0;
     $arrayidx219 = $labelInfo + 1310736 + ($mul208 + 3 << 2) | 0;
     if ((HEAP32[$arrayidx219 >> 2] | 0) > ($i$2 | 0)) HEAP32[$arrayidx219 >> 2] = $i$2;
     HEAP32[$labelInfo + 1310736 + ($mul208 + 6 << 2) >> 2] = $j$0;
     $wk_max$3 = $wk_max$1;
     break;
    }
    $22 = HEAP32[$arrayidx82 >> 2] | 0;
    $23 = HEAP32[$labelInfo + 1179664 + (($21 << 16 >> 16) + -1 << 2) >> 2] | 0;
    L59 : do if (($22 | 0) > ($23 | 0)) {
     HEAP16[$pnt2$3 >> 1] = $23;
     $k$2 = 0;
     $wk$2 = $arraydecay;
     while (1) {
      if (($k$2 | 0) >= ($wk_max$1 | 0)) {
       $26 = $23;
       break L59;
      }
      if ((HEAP32[$wk$2 >> 2] | 0) == ($22 | 0)) HEAP32[$wk$2 >> 2] = $23;
      $k$2 = $k$2 + 1 | 0;
      $wk$2 = $wk$2 + 4 | 0;
     }
    } else {
     HEAP16[$pnt2$3 >> 1] = $22;
     if (($22 | 0) < ($23 | 0)) {
      $k$3 = 0;
      $wk$3 = $arraydecay;
      while (1) {
       if (($k$3 | 0) >= ($wk_max$1 | 0)) {
        $26 = $22;
        break L59;
       }
       if ((HEAP32[$wk$3 >> 2] | 0) == ($23 | 0)) HEAP32[$wk$3 >> 2] = $22;
       $k$3 = $k$3 + 1 | 0;
       $wk$3 = $wk$3 + 4 | 0;
      }
     } else $26 = $22;
    } while (0);
    $27 = ($26 << 16 >> 16) * 7 | 0;
    $arrayidx196 = $labelInfo + 1310736 + ($27 + -7 << 2) | 0;
    HEAP32[$arrayidx196 >> 2] = (HEAP32[$arrayidx196 >> 2] | 0) + 1;
    $arrayidx199 = $labelInfo + 1310736 + ($27 + -6 << 2) | 0;
    HEAP32[$arrayidx199 >> 2] = (HEAP32[$arrayidx199 >> 2] | 0) + $i$2;
    $arrayidx202 = $labelInfo + 1310736 + ($27 + -5 << 2) | 0;
    HEAP32[$arrayidx202 >> 2] = (HEAP32[$arrayidx202 >> 2] | 0) + $j$0;
    $wk_max$3 = $wk_max$1;
   } while (0);
   $dpnt$1 = $dpnt$1 + 1 | 0;
   $i$2 = $i$2 + 1 | 0;
   $pnt$1 = $pnt$1 + 4 | 0;
   $pnt2$3 = $pnt2$3 + 2 | 0;
   $wk_max$1 = $wk_max$3;
  }
  $dpnt$0 = $dpnt$1 + 2 | 0;
  $j$0 = $j$0 + 1 | 0;
  $pnt$0 = $pnt$1 + $mul25 + 8 | 0;
  $pnt2$2 = $pnt2$3 + 4 | 0;
  $wk_max$0 = $wk_max$1;
 }
 L77 : do if ((label | 0) == 50) {
  _arLog(3, 3256, $vararg_buffer);
  $retval$0 = -1;
 } else if ((label | 0) == 56) {
  $arrayidx334 = $labelInfo + 12 | 0;
  $i$3 = 1;
  $j$1 = 1;
  $wk$4 = $arraydecay;
  while (1) {
   if (($i$3 | 0) > ($wk_max$0 | 0)) break;
   $45 = HEAP32[$wk$4 >> 2] | 0;
   if (($45 | 0) == ($i$3 | 0)) {
    $cond = $j$1;
    $j$2 = $j$1 + 1 | 0;
   } else {
    $cond = HEAP32[$labelInfo + 1179664 + ($45 + -1 << 2) >> 2] | 0;
    $j$2 = $j$1;
   }
   HEAP32[$wk$4 >> 2] = $cond;
   $i$3 = $i$3 + 1 | 0;
   $j$1 = $j$2;
   $wk$4 = $wk$4 + 4 | 0;
  }
  $label_num332 = $labelInfo + 8 | 0;
  $sub355 = $j$1 + -1 | 0;
  HEAP32[$label_num332 >> 2] = $sub355;
  if (!$sub355) $retval$0 = 0; else {
   _memset($arrayidx334 | 0, 0, $sub355 << 2 | 0) | 0;
   _memset($labelInfo + 655376 | 0, 0, $sub355 << 4 | 0) | 0;
   $47 = $sub355;
   $i$4 = 0;
   while (1) {
    if (($i$4 | 0) >= ($47 | 0)) {
     $i$5 = 0;
     break;
    }
    $mul367 = $i$4 << 2;
    HEAP32[$labelInfo + 131084 + ($mul367 << 2) >> 2] = $div;
    HEAP32[$labelInfo + 131084 + (($mul367 | 1) << 2) >> 2] = 0;
    HEAP32[$labelInfo + 131084 + (($mul367 | 2) << 2) >> 2] = $div1;
    HEAP32[$labelInfo + 131084 + (($mul367 | 3) << 2) >> 2] = 0;
    $47 = HEAP32[$label_num332 >> 2] | 0;
    $i$4 = $i$4 + 1 | 0;
   }
   while (1) {
    if (($i$5 | 0) >= ($wk_max$0 | 0)) {
     $i$6 = 0;
     break;
    }
    $sub387 = (HEAP32[$labelInfo + 1179664 + ($i$5 << 2) >> 2] | 0) + -1 | 0;
    $mul388 = $i$5 * 7 | 0;
    $arrayidx391 = $labelInfo + 12 + ($sub387 << 2) | 0;
    HEAP32[$arrayidx391 >> 2] = (HEAP32[$arrayidx391 >> 2] | 0) + (HEAP32[$labelInfo + 1310736 + ($mul388 << 2) >> 2] | 0);
    $mul397 = $sub387 << 1;
    $arrayidx399 = $labelInfo + 655376 + ($mul397 << 3) | 0;
    HEAPF64[$arrayidx399 >> 3] = +HEAPF64[$arrayidx399 >> 3] + +(HEAP32[$labelInfo + 1310736 + ($mul388 + 1 << 2) >> 2] | 0);
    $arrayidx407 = $labelInfo + 655376 + (($mul397 | 1) << 3) | 0;
    HEAPF64[$arrayidx407 >> 3] = +HEAPF64[$arrayidx407 >> 3] + +(HEAP32[$labelInfo + 1310736 + ($mul388 + 2 << 2) >> 2] | 0);
    $mul409 = $sub387 << 2;
    $arrayidx411 = $labelInfo + 131084 + ($mul409 << 2) | 0;
    $56 = HEAP32[$labelInfo + 1310736 + ($mul388 + 3 << 2) >> 2] | 0;
    if ((HEAP32[$arrayidx411 >> 2] | 0) > ($56 | 0)) HEAP32[$arrayidx411 >> 2] = $56;
    $arrayidx427 = $labelInfo + 131084 + (($mul409 | 1) << 2) | 0;
    $58 = HEAP32[$labelInfo + 1310736 + ($mul388 + 4 << 2) >> 2] | 0;
    if ((HEAP32[$arrayidx427 >> 2] | 0) < ($58 | 0)) HEAP32[$arrayidx427 >> 2] = $58;
    $arrayidx443 = $labelInfo + 131084 + (($mul409 | 2) << 2) | 0;
    $60 = HEAP32[$labelInfo + 1310736 + ($mul388 + 5 << 2) >> 2] | 0;
    if ((HEAP32[$arrayidx443 >> 2] | 0) > ($60 | 0)) HEAP32[$arrayidx443 >> 2] = $60;
    $arrayidx459 = $labelInfo + 131084 + (($mul409 | 3) << 2) | 0;
    $62 = HEAP32[$labelInfo + 1310736 + ($mul388 + 6 << 2) >> 2] | 0;
    if ((HEAP32[$arrayidx459 >> 2] | 0) < ($62 | 0)) HEAP32[$arrayidx459 >> 2] = $62;
    $i$5 = $i$5 + 1 | 0;
   }
   while (1) {
    if (($i$6 | 0) >= (HEAP32[$label_num332 >> 2] | 0)) {
     $retval$0 = 0;
     break L77;
    }
    $arrayidx480 = $labelInfo + 12 + ($i$6 << 2) | 0;
    $mul482 = $i$6 << 1;
    $arrayidx484 = $labelInfo + 655376 + ($mul482 << 3) | 0;
    HEAPF64[$arrayidx484 >> 3] = +HEAPF64[$arrayidx484 >> 3] / +(HEAP32[$arrayidx480 >> 2] | 0);
    $arrayidx490 = $labelInfo + 655376 + (($mul482 | 1) << 3) | 0;
    HEAPF64[$arrayidx490 >> 3] = +HEAPF64[$arrayidx490 >> 3] / +(HEAP32[$arrayidx480 >> 2] | 0);
    $i$6 = $i$6 + 1 | 0;
   }
  }
 } while (0);
 STACKTOP = sp;
 return $retval$0 | 0;
}

function __ZN10__cxxabiv112_GLOBAL__N_123parse_unnamed_type_nameINS0_2DbEEEPKcS4_S4_RT_($first, $last, $db) {
 $first = $first | 0;
 $last = $last | 0;
 $db = $db | 0;
 var $12 = 0, $13 = 0, $14 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $24 = 0, $25 = 0, $26 = 0, $29 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $39 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $5 = 0, $55 = 0, $56 = 0, $6 = 0, $__end_$i = 0, $__end_$i130 = 0, $__i$0$i$i$i$i = 0, $__p$0$i$i = 0, $__p$0$i$i126 = 0, $__size_$i$i$i$i = 0, $__size_$i3$i$i = 0, $add$ptr = 0, $add$ptr$i = 0, $add$ptr$i101 = 0, $add$ptr$i141 = 0, $add$ptr$i152 = 0, $add$ptr$i170 = 0, $add$ptr$i200 = 0, $add$ptr$i208 = 0, $add$ptr$i227 = 0, $agg$tmp = 0, $agg$tmp164 = 0, $agg$tmp164$byval_copy = 0, $agg$tmp35 = 0, $and$i$i$i$i = 0, $and$i$i$i$i119 = 0, $call$i = 0, $call$i$i$i = 0, $call$i$i$i120 = 0, $call$i109 = 0, $call55 = 0, $call79 = 0, $cond$i$i225 = 0, $first163 = 0, $incdec$ptr$i$i$i = 0, $incdec$ptr$i$i$i104 = 0, $incdec$ptr$i$i$i144 = 0, $incdec$ptr$i$i$i155 = 0, $incdec$ptr$i$i$i173 = 0, $incdec$ptr$i$i$i203 = 0, $incdec$ptr$i$i$i211 = 0, $incdec$ptr$i$i$i230 = 0, $incdec$ptr139 = 0, $ref$tmp = 0, $ref$tmp88 = 0, $retval$7 = 0, $t0$0 = 0, $t043$0 = 0, $t043$2 = 0, $t043$3 = 0, $t1$0 = 0, $t1$0$lcssa = 0, $t1149$0 = 0, $t1149$0$lcssa = 0, $tobool$i$i$i$i = 0, $tobool$i$i$i$i188 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(80);
 $agg$tmp164$byval_copy = sp + 68 | 0;
 $ref$tmp = sp + 16 | 0;
 $agg$tmp = sp + 56 | 0;
 $agg$tmp35 = sp + 44 | 0;
 $ref$tmp88 = sp;
 $agg$tmp164 = sp + 40 | 0;
 L1 : do if (($last - $first | 0) > 2) if ((HEAP8[$first >> 0] | 0) == 85) {
  $add$ptr = $first + 2 | 0;
  switch (HEAP8[$first + 1 >> 0] | 0) {
  case 116:
   {
    HEAP32[$agg$tmp >> 2] = 0;
    HEAP32[$agg$tmp + 4 >> 2] = 0;
    HEAP32[$agg$tmp + 8 >> 2] = 0;
    $call$i = __ZNSt3__211char_traitsIcE6lengthEPKc(15688) | 0;
    if ($call$i >>> 0 > 4294967279) __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($agg$tmp);
    if ($call$i >>> 0 < 11) {
     HEAP8[$agg$tmp + 11 >> 0] = $call$i;
     $__p$0$i$i = $agg$tmp;
    } else {
     $and$i$i$i$i = $call$i + 16 & -16;
     $call$i$i$i = __ZN10__cxxabiv112_GLOBAL__N_112malloc_allocIcE8allocateEj($and$i$i$i$i) | 0;
     HEAP32[$agg$tmp >> 2] = $call$i$i$i;
     HEAP32[$agg$tmp + 8 >> 2] = $and$i$i$i$i | -2147483648;
     HEAP32[$agg$tmp + 4 >> 2] = $call$i;
     $__p$0$i$i = $call$i$i$i;
    }
    __ZNSt3__211char_traitsIcE4copyEPcPKcj($__p$0$i$i, 15688, $call$i) | 0;
    HEAP8[$agg$tmp164$byval_copy >> 0] = 0;
    __ZNSt3__211char_traitsIcE6assignERcRKc($__p$0$i$i + $call$i | 0, $agg$tmp164$byval_copy);
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ENSt3__212basic_stringIcNS2_11char_traitsIcEENS0_12malloc_allocIcEEEE($ref$tmp, $agg$tmp);
    $__end_$i = $db + 4 | 0;
    $2 = HEAP32[$__end_$i >> 2] | 0;
    if ($2 >>> 0 < (HEAP32[$db + 8 >> 2] | 0) >>> 0) {
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($2, $ref$tmp);
     HEAP32[$__end_$i >> 2] = (HEAP32[$__end_$i >> 2] | 0) + 24;
    } else __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIS3_EEvOT_($db, $ref$tmp);
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($ref$tmp);
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($agg$tmp);
    if (($add$ptr | 0) == ($last | 0)) {
     $5 = HEAP32[$__end_$i >> 2] | 0;
     $add$ptr$i = $5 + -24 | 0;
     $6 = $5;
     while (1) {
      if (($6 | 0) == ($add$ptr$i | 0)) {
       $retval$7 = $first;
       break L1;
      }
      $incdec$ptr$i$i$i = $6 + -24 | 0;
      HEAP32[$__end_$i >> 2] = $incdec$ptr$i$i$i;
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($incdec$ptr$i$i$i);
      $6 = HEAP32[$__end_$i >> 2] | 0;
     }
    }
    if (((HEAP8[$add$ptr >> 0] | 0) + -48 | 0) >>> 0 < 10) {
     $t1$0 = $first + 3 | 0;
     while (1) {
      if (($t1$0 | 0) == ($last | 0)) {
       $t1$0$lcssa = $last;
       break;
      }
      if (((HEAP8[$t1$0 >> 0] | 0) + -48 | 0) >>> 0 >= 10) {
       $t1$0$lcssa = $t1$0;
       break;
      }
      $t1$0 = $t1$0 + 1 | 0;
     }
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE23__append_forward_unsafeIPKcEERS7_T_SC_((HEAP32[$__end_$i >> 2] | 0) + -24 | 0, $add$ptr, $t1$0$lcssa);
     $t0$0 = $t1$0$lcssa;
    } else $t0$0 = $add$ptr;
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE9push_backEc((HEAP32[$__end_$i >> 2] | 0) + -24 | 0, 39);
    if (($t0$0 | 0) != ($last | 0)) if ((HEAP8[$t0$0 >> 0] | 0) == 95) {
     $retval$7 = $t0$0 + 1 | 0;
     break L1;
    }
    $12 = HEAP32[$__end_$i >> 2] | 0;
    $add$ptr$i101 = $12 + -24 | 0;
    $13 = $12;
    while (1) {
     if (($13 | 0) == ($add$ptr$i101 | 0)) {
      $retval$7 = $first;
      break L1;
     }
     $incdec$ptr$i$i$i104 = $13 + -24 | 0;
     HEAP32[$__end_$i >> 2] = $incdec$ptr$i$i$i104;
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($incdec$ptr$i$i$i104);
     $13 = HEAP32[$__end_$i >> 2] | 0;
    }
    break;
   }
  case 108:
   break;
  default:
   {
    $retval$7 = $first;
    break L1;
   }
  }
  HEAP32[$agg$tmp35 >> 2] = 0;
  HEAP32[$agg$tmp35 + 4 >> 2] = 0;
  HEAP32[$agg$tmp35 + 8 >> 2] = 0;
  $call$i109 = __ZNSt3__211char_traitsIcE6lengthEPKc(15697) | 0;
  if ($call$i109 >>> 0 > 4294967279) __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($agg$tmp35);
  if ($call$i109 >>> 0 < 11) {
   HEAP8[$agg$tmp35 + 11 >> 0] = $call$i109;
   $__p$0$i$i126 = $agg$tmp35;
  } else {
   $and$i$i$i$i119 = $call$i109 + 16 & -16;
   $call$i$i$i120 = __ZN10__cxxabiv112_GLOBAL__N_112malloc_allocIcE8allocateEj($and$i$i$i$i119) | 0;
   HEAP32[$agg$tmp35 >> 2] = $call$i$i$i120;
   HEAP32[$agg$tmp35 + 8 >> 2] = $and$i$i$i$i119 | -2147483648;
   HEAP32[$agg$tmp35 + 4 >> 2] = $call$i109;
   $__p$0$i$i126 = $call$i$i$i120;
  }
  __ZNSt3__211char_traitsIcE4copyEPcPKcj($__p$0$i$i126, 15697, $call$i109) | 0;
  HEAP8[$agg$tmp164$byval_copy >> 0] = 0;
  __ZNSt3__211char_traitsIcE6assignERcRKc($__p$0$i$i126 + $call$i109 | 0, $agg$tmp164$byval_copy);
  __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ENSt3__212basic_stringIcNS2_11char_traitsIcEENS0_12malloc_allocIcEEEE($ref$tmp, $agg$tmp35);
  $__end_$i130 = $db + 4 | 0;
  $14 = HEAP32[$__end_$i130 >> 2] | 0;
  if ($14 >>> 0 < (HEAP32[$db + 8 >> 2] | 0) >>> 0) {
   __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($14, $ref$tmp);
   HEAP32[$__end_$i130 >> 2] = (HEAP32[$__end_$i130 >> 2] | 0) + 24;
  } else __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIS3_EEvOT_($db, $ref$tmp);
  __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($ref$tmp);
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($agg$tmp35);
  do if ((HEAP8[$add$ptr >> 0] | 0) == 118) {
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE9push_backEc((HEAP32[$__end_$i130 >> 2] | 0) + -24 | 0, 41);
   $t043$2 = $first + 3 | 0;
  } else {
   $call55 = __ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($add$ptr, $last, $db) | 0;
   if (($call55 | 0) == ($add$ptr | 0)) {
    $19 = HEAP32[$__end_$i130 >> 2] | 0;
    $add$ptr$i141 = $19 + -24 | 0;
    $20 = $19;
    while (1) {
     if (($20 | 0) == ($add$ptr$i141 | 0)) {
      $retval$7 = $first;
      break L1;
     }
     $incdec$ptr$i$i$i144 = $20 + -24 | 0;
     HEAP32[$__end_$i130 >> 2] = $incdec$ptr$i$i$i144;
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($incdec$ptr$i$i$i144);
     $20 = HEAP32[$__end_$i130 >> 2] | 0;
    }
   }
   $21 = HEAP32[$__end_$i130 >> 2] | 0;
   if ((($21 - (HEAP32[$db >> 2] | 0) | 0) / 24 | 0) >>> 0 < 2) {
    $retval$7 = $first;
    break L1;
   }
   __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($ref$tmp, $21 + -24 | 0);
   $24 = HEAP32[$__end_$i130 >> 2] | 0;
   $add$ptr$i152 = $24 + -24 | 0;
   $25 = $24;
   while (1) {
    if (($25 | 0) == ($add$ptr$i152 | 0)) break;
    $incdec$ptr$i$i$i155 = $25 + -24 | 0;
    HEAP32[$__end_$i130 >> 2] = $incdec$ptr$i$i$i155;
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($incdec$ptr$i$i$i155);
    $25 = HEAP32[$__end_$i130 >> 2] | 0;
   }
   $__size_$i$i$i$i = $ref$tmp + 11 | 0;
   $26 = HEAP8[$__size_$i$i$i$i >> 0] | 0;
   $tobool$i$i$i$i = $26 << 24 >> 24 < 0;
   $__size_$i3$i$i = $ref$tmp + 4 | 0;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($24 + -48 | 0, $tobool$i$i$i$i ? HEAP32[$ref$tmp >> 2] | 0 : $ref$tmp, $tobool$i$i$i$i ? HEAP32[$__size_$i3$i$i >> 2] | 0 : $26 & 255) | 0;
   $t043$0 = $call55;
   while (1) {
    $call79 = __ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($t043$0, $last, $db) | 0;
    if (($call79 | 0) == ($t043$0 | 0)) {
     label = 60;
     break;
    }
    $29 = HEAP32[$__end_$i130 >> 2] | 0;
    if ((($29 - (HEAP32[$db >> 2] | 0) | 0) / 24 | 0) >>> 0 < 2) {
     label = 85;
     break;
    }
    __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($ref$tmp88, $29 + -24 | 0);
    if ((HEAP8[$__size_$i$i$i$i >> 0] | 0) < 0) {
     $33 = HEAP32[$ref$tmp >> 2] | 0;
     HEAP8[$agg$tmp164$byval_copy >> 0] = 0;
     __ZNSt3__211char_traitsIcE6assignERcRKc($33, $agg$tmp164$byval_copy);
     HEAP32[$__size_$i3$i$i >> 2] = 0;
    } else {
     HEAP8[$agg$tmp164$byval_copy >> 0] = 0;
     __ZNSt3__211char_traitsIcE6assignERcRKc($ref$tmp, $agg$tmp164$byval_copy);
     HEAP8[$__size_$i$i$i$i >> 0] = 0;
    }
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE7reserveEj($ref$tmp);
    HEAP32[$ref$tmp >> 2] = HEAP32[$ref$tmp88 >> 2];
    HEAP32[$ref$tmp + 4 >> 2] = HEAP32[$ref$tmp88 + 4 >> 2];
    HEAP32[$ref$tmp + 8 >> 2] = HEAP32[$ref$tmp88 + 8 >> 2];
    $__i$0$i$i$i$i = 0;
    while (1) {
     if (($__i$0$i$i$i$i | 0) == 3) break;
     HEAP32[$ref$tmp88 + ($__i$0$i$i$i$i << 2) >> 2] = 0;
     $__i$0$i$i$i$i = $__i$0$i$i$i$i + 1 | 0;
    }
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($ref$tmp88);
    $34 = HEAP32[$__end_$i130 >> 2] | 0;
    $add$ptr$i170 = $34 + -24 | 0;
    $35 = $34;
    while (1) {
     if (($35 | 0) == ($add$ptr$i170 | 0)) break;
     $incdec$ptr$i$i$i173 = $35 + -24 | 0;
     HEAP32[$__end_$i130 >> 2] = $incdec$ptr$i$i$i173;
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($incdec$ptr$i$i$i173);
     $35 = HEAP32[$__end_$i130 >> 2] | 0;
    }
    $36 = HEAP8[$__size_$i$i$i$i >> 0] | 0;
    if (!(($36 << 24 >> 24 < 0 ? HEAP32[$__size_$i3$i$i >> 2] | 0 : $36 & 255) | 0)) {
     $t043$0 = $call79;
     continue;
    }
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($34 + -48 | 0, 15109) | 0;
    $39 = HEAP8[$__size_$i$i$i$i >> 0] | 0;
    $tobool$i$i$i$i188 = $39 << 24 >> 24 < 0;
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj((HEAP32[$__end_$i130 >> 2] | 0) + -24 | 0, $tobool$i$i$i$i188 ? HEAP32[$ref$tmp >> 2] | 0 : $ref$tmp, $tobool$i$i$i$i188 ? HEAP32[$__size_$i3$i$i >> 2] | 0 : $39 & 255) | 0;
    $t043$0 = $call79;
   }
   if ((label | 0) == 60) {
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc((HEAP32[$__end_$i130 >> 2] | 0) + -24 | 0, 14885) | 0;
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($ref$tmp);
    $t043$2 = $t043$0;
    break;
   } else if ((label | 0) == 85) {
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($ref$tmp);
    $retval$7 = $first;
    break L1;
   }
  } while (0);
  if (($t043$2 | 0) != ($last | 0)) if ((HEAP8[$t043$2 >> 0] | 0) == 69) {
   $incdec$ptr139 = $t043$2 + 1 | 0;
   if (($incdec$ptr139 | 0) == ($last | 0)) {
    $46 = HEAP32[$__end_$i130 >> 2] | 0;
    $add$ptr$i208 = $46 + -24 | 0;
    $47 = $46;
    while (1) {
     if (($47 | 0) == ($add$ptr$i208 | 0)) {
      $retval$7 = $first;
      break L1;
     }
     $incdec$ptr$i$i$i211 = $47 + -24 | 0;
     HEAP32[$__end_$i130 >> 2] = $incdec$ptr$i$i$i211;
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($incdec$ptr$i$i$i211);
     $47 = HEAP32[$__end_$i130 >> 2] | 0;
    }
   }
   if (((HEAP8[$incdec$ptr139 >> 0] | 0) + -48 | 0) >>> 0 < 10) {
    $t1149$0 = $t043$2 + 2 | 0;
    while (1) {
     if (($t1149$0 | 0) == ($last | 0)) {
      $t1149$0$lcssa = $last;
      break;
     }
     if (((HEAP8[$t1149$0 >> 0] | 0) + -48 | 0) >>> 0 >= 10) {
      $t1149$0$lcssa = $t1149$0;
      break;
     }
     $t1149$0 = $t1149$0 + 1 | 0;
    }
    $first163 = (HEAP32[$__end_$i130 >> 2] | 0) + -24 | 0;
    if ((HEAP8[$first163 + 11 >> 0] | 0) < 0) $cond$i$i225 = HEAP32[$first163 >> 2] | 0; else $cond$i$i225 = $first163;
    HEAP32[$agg$tmp164 >> 2] = $cond$i$i225 + 7;
    HEAP32[$agg$tmp164$byval_copy >> 2] = HEAP32[$agg$tmp164 >> 2];
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertIPKcEENS_9enable_ifIXaasr21__is_forward_iteratorIT_EE5valuesr38__libcpp_string_gets_noexcept_iteratorISC_EE5valueENS_11__wrap_iterIPcEEE4typeENSD_ISA_EESC_SC_($first163, $agg$tmp164$byval_copy, $incdec$ptr139, $t1149$0$lcssa) | 0;
    $t043$3 = $t1149$0$lcssa;
   } else $t043$3 = $incdec$ptr139;
   if (($t043$3 | 0) != ($last | 0)) if ((HEAP8[$t043$3 >> 0] | 0) == 95) {
    $retval$7 = $t043$3 + 1 | 0;
    break;
   }
   $55 = HEAP32[$__end_$i130 >> 2] | 0;
   $add$ptr$i227 = $55 + -24 | 0;
   $56 = $55;
   while (1) {
    if (($56 | 0) == ($add$ptr$i227 | 0)) {
     $retval$7 = $first;
     break L1;
    }
    $incdec$ptr$i$i$i230 = $56 + -24 | 0;
    HEAP32[$__end_$i130 >> 2] = $incdec$ptr$i$i$i230;
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($incdec$ptr$i$i$i230);
    $56 = HEAP32[$__end_$i130 >> 2] | 0;
   }
  }
  $44 = HEAP32[$__end_$i130 >> 2] | 0;
  $add$ptr$i200 = $44 + -24 | 0;
  $45 = $44;
  while (1) {
   if (($45 | 0) == ($add$ptr$i200 | 0)) {
    $retval$7 = $first;
    break L1;
   }
   $incdec$ptr$i$i$i203 = $45 + -24 | 0;
   HEAP32[$__end_$i130 >> 2] = $incdec$ptr$i$i$i203;
   __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($incdec$ptr$i$i$i203);
   $45 = HEAP32[$__end_$i130 >> 2] | 0;
  }
 } else $retval$7 = $first; else $retval$7 = $first; while (0);
 STACKTOP = sp;
 return $retval$7 | 0;
}

function _arLabelingSubEWI3C($image, $xsize, $ysize, $labelingThresh, $labelInfo) {
 $image = $image | 0;
 $xsize = $xsize | 0;
 $ysize = $ysize | 0;
 $labelingThresh = $labelingThresh | 0;
 $labelInfo = $labelInfo | 0;
 var $$sink = 0, $0 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $17 = 0, $18 = 0, $22 = 0, $23 = 0, $24 = 0, $27 = 0, $28 = 0, $40 = 0, $41 = 0, $46 = 0, $48 = 0, $57 = 0, $59 = 0, $6 = 0, $61 = 0, $63 = 0, $7 = 0, $add = 0, $add$ptr137 = 0, $add275 = 0, $add280$sink = 0, $arraydecay = 0, $arrayidx126 = 0, $arrayidx129 = 0, $arrayidx132 = 0, $arrayidx193 = 0, $arrayidx196 = 0, $arrayidx199 = 0, $arrayidx207 = 0, $arrayidx210 = 0, $arrayidx213 = 0, $arrayidx216 = 0, $arrayidx238 = 0, $arrayidx241 = 0, $arrayidx244 = 0, $arrayidx247 = 0, $arrayidx267 = 0, $arrayidx270 = 0, $arrayidx273 = 0, $arrayidx331 = 0, $arrayidx388 = 0, $arrayidx396 = 0, $arrayidx404 = 0, $arrayidx408 = 0, $arrayidx424 = 0, $arrayidx440 = 0, $arrayidx456 = 0, $arrayidx47 = 0, $arrayidx477 = 0, $arrayidx481 = 0, $arrayidx487 = 0, $arrayidx56 = 0, $arrayidx59 = 0, $arrayidx62 = 0, $arrayidx79 = 0, $cmp73 = 0, $cond = 0, $div = 0, $div1 = 0, $dpnt$0 = 0, $dpnt$1 = 0, $i$0 = 0, $i$1 = 0, $i$2 = 0, $i$3 = 0, $i$4 = 0, $i$5 = 0, $i$6 = 0, $inc284 = 0, $j$0 = 0, $j$1 = 0, $j$2 = 0, $k$0 = 0, $k$1 = 0, $k$2 = 0, $k$3 = 0, $label_num329 = 0, $mul = 0, $mul205 = 0, $mul236 = 0, $mul294 = 0, $mul321 = 0, $mul364 = 0, $mul385 = 0, $mul394 = 0, $mul406 = 0, $mul479 = 0, $pnt$0 = 0, $pnt$1 = 0, $pnt1$0 = 0, $pnt1$1 = 0, $pnt2$0 = 0, $pnt2$1 = 0, $pnt2$2 = 0, $pnt2$3 = 0, $retval$0 = 0, $sub = 0, $sub352 = 0, $sub384 = 0, $sub46 = 0, $sub78 = 0, $sub82 = 0, $sub9 = 0, $vararg_buffer = 0, $wk$0 = 0, $wk$1 = 0, $wk$2 = 0, $wk$3 = 0, $wk$4 = 0, $wk_max$0 = 0, $wk_max$1 = 0, $wk_max$2 = 0, $wk_max$3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $vararg_buffer = sp;
 $div = ($xsize | 0) / 2 | 0;
 $div1 = ($ysize | 0) / 2 | 0;
 $0 = HEAP32[$labelInfo >> 2] | 0;
 $sub = $div1 + -1 | 0;
 $i$0 = 0;
 $pnt1$0 = $0;
 $pnt2$0 = $0 + ((Math_imul($sub, $div) | 0) << 1) | 0;
 while (1) {
  if (($i$0 | 0) >= ($div | 0)) break;
  HEAP16[$pnt2$0 >> 1] = 0;
  HEAP16[$pnt1$0 >> 1] = 0;
  $i$0 = $i$0 + 1 | 0;
  $pnt1$0 = $pnt1$0 + 2 | 0;
  $pnt2$0 = $pnt2$0 + 2 | 0;
 }
 $mul = $labelingThresh * 3 | 0;
 $sub9 = $div + -1 | 0;
 $i$1 = 0;
 $pnt1$1 = $0;
 $pnt2$1 = $0 + ($sub9 << 1) | 0;
 while (1) {
  if (($i$1 | 0) >= ($div1 | 0)) break;
  HEAP16[$pnt2$1 >> 1] = 0;
  HEAP16[$pnt1$1 >> 1] = 0;
  $i$1 = $i$1 + 1 | 0;
  $pnt1$1 = $pnt1$1 + ($div << 1) | 0;
  $pnt2$1 = $pnt2$1 + ($div << 1) | 0;
 }
 $arraydecay = $labelInfo + 1179664 | 0;
 $add = $div + 1 | 0;
 $sub46 = 0 - $div | 0;
 $mul321 = $xsize * 3 | 0;
 $dpnt$0 = (HEAP32[$labelInfo + 4 >> 2] | 0) + $add | 0;
 $j$0 = 1;
 $pnt$0 = $image + (($xsize * 6 | 0) + 6) | 0;
 $pnt2$2 = $0 + ($add << 1) | 0;
 $wk_max$0 = 0;
 L9 : while (1) {
  if (($j$0 | 0) < ($sub | 0)) {
   $dpnt$1 = $dpnt$0;
   $i$2 = 1;
   $pnt$1 = $pnt$0;
   $pnt2$3 = $pnt2$2;
   $wk_max$1 = $wk_max$0;
  } else {
   label = 56;
   break;
  }
  while (1) {
   if (($i$2 | 0) >= ($sub9 | 0)) break;
   do if (((HEAPU8[$pnt$1 + 1 >> 0] | 0) + (HEAPU8[$pnt$1 >> 0] | 0) + (HEAPU8[$pnt$1 + 2 >> 0] | 0) | 0) > ($mul | 0)) {
    HEAP8[$dpnt$1 >> 0] = -1;
    $arrayidx47 = $pnt2$3 + ($sub46 << 1) | 0;
    $6 = HEAP16[$arrayidx47 >> 1] | 0;
    if ($6 << 16 >> 16 > 0) {
     HEAP16[$pnt2$3 >> 1] = $6;
     $7 = ($6 << 16 >> 16) * 7 | 0;
     $arrayidx56 = $labelInfo + 1310736 + ($7 + -7 << 2) | 0;
     HEAP32[$arrayidx56 >> 2] = (HEAP32[$arrayidx56 >> 2] | 0) + 1;
     $arrayidx59 = $labelInfo + 1310736 + ($7 + -6 << 2) | 0;
     HEAP32[$arrayidx59 >> 2] = (HEAP32[$arrayidx59 >> 2] | 0) + $i$2;
     $arrayidx62 = $labelInfo + 1310736 + ($7 + -5 << 2) | 0;
     HEAP32[$arrayidx62 >> 2] = (HEAP32[$arrayidx62 >> 2] | 0) + $j$0;
     HEAP32[$labelInfo + 1310736 + ($7 + -1 << 2) >> 2] = $j$0;
     $wk_max$3 = $wk_max$1;
     break;
    }
    $11 = HEAP16[$arrayidx47 + 2 >> 1] | 0;
    $12 = HEAP16[$arrayidx47 + -2 >> 1] | 0;
    $cmp73 = $12 << 16 >> 16 > 0;
    $add$ptr137 = $pnt2$3 + -2 | 0;
    $sub82 = ($12 << 16 >> 16) + -1 | 0;
    if ($11 << 16 >> 16 <= 0) {
     if ($cmp73) {
      HEAP16[$pnt2$3 >> 1] = $12;
      $mul236 = $sub82 * 7 | 0;
      $arrayidx238 = $labelInfo + 1310736 + ($mul236 << 2) | 0;
      HEAP32[$arrayidx238 >> 2] = (HEAP32[$arrayidx238 >> 2] | 0) + 1;
      $arrayidx241 = $labelInfo + 1310736 + ($mul236 + 1 << 2) | 0;
      HEAP32[$arrayidx241 >> 2] = (HEAP32[$arrayidx241 >> 2] | 0) + $i$2;
      $arrayidx244 = $labelInfo + 1310736 + ($mul236 + 2 << 2) | 0;
      HEAP32[$arrayidx244 >> 2] = (HEAP32[$arrayidx244 >> 2] | 0) + $j$0;
      $arrayidx247 = $labelInfo + 1310736 + ($mul236 + 4 << 2) | 0;
      if ((HEAP32[$arrayidx247 >> 2] | 0) < ($i$2 | 0)) HEAP32[$arrayidx247 >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($mul236 + 6 << 2) >> 2] = $j$0;
      $wk_max$3 = $wk_max$1;
      break;
     }
     $40 = HEAP16[$add$ptr137 >> 1] | 0;
     if ($40 << 16 >> 16 > 0) {
      HEAP16[$pnt2$3 >> 1] = $40;
      $41 = ($40 << 16 >> 16) * 7 | 0;
      $arrayidx267 = $labelInfo + 1310736 + ($41 + -7 << 2) | 0;
      HEAP32[$arrayidx267 >> 2] = (HEAP32[$arrayidx267 >> 2] | 0) + 1;
      $arrayidx270 = $labelInfo + 1310736 + ($41 + -6 << 2) | 0;
      HEAP32[$arrayidx270 >> 2] = (HEAP32[$arrayidx270 >> 2] | 0) + $i$2;
      $arrayidx273 = $labelInfo + 1310736 + ($41 + -5 << 2) | 0;
      HEAP32[$arrayidx273 >> 2] = (HEAP32[$arrayidx273 >> 2] | 0) + $j$0;
      $add275 = $41 + -3 | 0;
      if ((HEAP32[$labelInfo + 1310736 + ($add275 << 2) >> 2] | 0) < ($i$2 | 0)) {
       $$sink = $i$2;
       $add280$sink = $add275;
       $wk_max$2 = $wk_max$1;
      } else {
       $wk_max$3 = $wk_max$1;
       break;
      }
     } else {
      $inc284 = $wk_max$1 + 1 | 0;
      if (($wk_max$1 | 0) > 32767) {
       label = 50;
       break L9;
      }
      HEAP16[$pnt2$3 >> 1] = $inc284;
      HEAP32[$labelInfo + 1179664 + ($wk_max$1 << 2) >> 2] = $inc284 << 16 >> 16;
      $mul294 = $wk_max$1 * 7 | 0;
      HEAP32[$labelInfo + 1310736 + ($mul294 << 2) >> 2] = 1;
      HEAP32[$labelInfo + 1310736 + ($mul294 + 1 << 2) >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($mul294 + 2 << 2) >> 2] = $j$0;
      HEAP32[$labelInfo + 1310736 + ($mul294 + 3 << 2) >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($mul294 + 4 << 2) >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($mul294 + 5 << 2) >> 2] = $j$0;
      $$sink = $j$0;
      $add280$sink = $mul294 + 6 | 0;
      $wk_max$2 = $inc284;
     }
     HEAP32[$labelInfo + 1310736 + ($add280$sink << 2) >> 2] = $$sink;
     $wk_max$3 = $wk_max$2;
     break;
    }
    $sub78 = ($11 << 16 >> 16) + -1 | 0;
    $arrayidx79 = $labelInfo + 1179664 + ($sub78 << 2) | 0;
    if ($cmp73) {
     $13 = HEAP32[$arrayidx79 >> 2] | 0;
     $14 = HEAP32[$labelInfo + 1179664 + ($sub82 << 2) >> 2] | 0;
     L35 : do if (($13 | 0) > ($14 | 0)) {
      HEAP16[$pnt2$3 >> 1] = $14;
      $k$0 = 0;
      $wk$0 = $arraydecay;
      while (1) {
       if (($k$0 | 0) >= ($wk_max$1 | 0)) {
        $17 = $14;
        break L35;
       }
       if ((HEAP32[$wk$0 >> 2] | 0) == ($13 | 0)) HEAP32[$wk$0 >> 2] = $14;
       $k$0 = $k$0 + 1 | 0;
       $wk$0 = $wk$0 + 4 | 0;
      }
     } else {
      HEAP16[$pnt2$3 >> 1] = $13;
      if (($13 | 0) < ($14 | 0)) {
       $k$1 = 0;
       $wk$1 = $arraydecay;
       while (1) {
        if (($k$1 | 0) >= ($wk_max$1 | 0)) {
         $17 = $13;
         break L35;
        }
        if ((HEAP32[$wk$1 >> 2] | 0) == ($14 | 0)) HEAP32[$wk$1 >> 2] = $13;
        $k$1 = $k$1 + 1 | 0;
        $wk$1 = $wk$1 + 4 | 0;
       }
      } else $17 = $13;
     } while (0);
     $18 = ($17 << 16 >> 16) * 7 | 0;
     $arrayidx126 = $labelInfo + 1310736 + ($18 + -7 << 2) | 0;
     HEAP32[$arrayidx126 >> 2] = (HEAP32[$arrayidx126 >> 2] | 0) + 1;
     $arrayidx129 = $labelInfo + 1310736 + ($18 + -6 << 2) | 0;
     HEAP32[$arrayidx129 >> 2] = (HEAP32[$arrayidx129 >> 2] | 0) + $i$2;
     $arrayidx132 = $labelInfo + 1310736 + ($18 + -5 << 2) | 0;
     HEAP32[$arrayidx132 >> 2] = (HEAP32[$arrayidx132 >> 2] | 0) + $j$0;
     HEAP32[$labelInfo + 1310736 + ($18 + -1 << 2) >> 2] = $j$0;
     $wk_max$3 = $wk_max$1;
     break;
    }
    $22 = HEAP16[$add$ptr137 >> 1] | 0;
    if ($22 << 16 >> 16 <= 0) {
     HEAP16[$pnt2$3 >> 1] = $11;
     $mul205 = $sub78 * 7 | 0;
     $arrayidx207 = $labelInfo + 1310736 + ($mul205 << 2) | 0;
     HEAP32[$arrayidx207 >> 2] = (HEAP32[$arrayidx207 >> 2] | 0) + 1;
     $arrayidx210 = $labelInfo + 1310736 + ($mul205 + 1 << 2) | 0;
     HEAP32[$arrayidx210 >> 2] = (HEAP32[$arrayidx210 >> 2] | 0) + $i$2;
     $arrayidx213 = $labelInfo + 1310736 + ($mul205 + 2 << 2) | 0;
     HEAP32[$arrayidx213 >> 2] = (HEAP32[$arrayidx213 >> 2] | 0) + $j$0;
     $arrayidx216 = $labelInfo + 1310736 + ($mul205 + 3 << 2) | 0;
     if ((HEAP32[$arrayidx216 >> 2] | 0) > ($i$2 | 0)) HEAP32[$arrayidx216 >> 2] = $i$2;
     HEAP32[$labelInfo + 1310736 + ($mul205 + 6 << 2) >> 2] = $j$0;
     $wk_max$3 = $wk_max$1;
     break;
    }
    $23 = HEAP32[$arrayidx79 >> 2] | 0;
    $24 = HEAP32[$labelInfo + 1179664 + (($22 << 16 >> 16) + -1 << 2) >> 2] | 0;
    L58 : do if (($23 | 0) > ($24 | 0)) {
     HEAP16[$pnt2$3 >> 1] = $24;
     $k$2 = 0;
     $wk$2 = $arraydecay;
     while (1) {
      if (($k$2 | 0) >= ($wk_max$1 | 0)) {
       $27 = $24;
       break L58;
      }
      if ((HEAP32[$wk$2 >> 2] | 0) == ($23 | 0)) HEAP32[$wk$2 >> 2] = $24;
      $k$2 = $k$2 + 1 | 0;
      $wk$2 = $wk$2 + 4 | 0;
     }
    } else {
     HEAP16[$pnt2$3 >> 1] = $23;
     if (($23 | 0) < ($24 | 0)) {
      $k$3 = 0;
      $wk$3 = $arraydecay;
      while (1) {
       if (($k$3 | 0) >= ($wk_max$1 | 0)) {
        $27 = $23;
        break L58;
       }
       if ((HEAP32[$wk$3 >> 2] | 0) == ($24 | 0)) HEAP32[$wk$3 >> 2] = $23;
       $k$3 = $k$3 + 1 | 0;
       $wk$3 = $wk$3 + 4 | 0;
      }
     } else $27 = $23;
    } while (0);
    $28 = ($27 << 16 >> 16) * 7 | 0;
    $arrayidx193 = $labelInfo + 1310736 + ($28 + -7 << 2) | 0;
    HEAP32[$arrayidx193 >> 2] = (HEAP32[$arrayidx193 >> 2] | 0) + 1;
    $arrayidx196 = $labelInfo + 1310736 + ($28 + -6 << 2) | 0;
    HEAP32[$arrayidx196 >> 2] = (HEAP32[$arrayidx196 >> 2] | 0) + $i$2;
    $arrayidx199 = $labelInfo + 1310736 + ($28 + -5 << 2) | 0;
    HEAP32[$arrayidx199 >> 2] = (HEAP32[$arrayidx199 >> 2] | 0) + $j$0;
    $wk_max$3 = $wk_max$1;
   } else {
    HEAP16[$pnt2$3 >> 1] = 0;
    HEAP8[$dpnt$1 >> 0] = 0;
    $wk_max$3 = $wk_max$1;
   } while (0);
   $dpnt$1 = $dpnt$1 + 1 | 0;
   $i$2 = $i$2 + 1 | 0;
   $pnt$1 = $pnt$1 + 6 | 0;
   $pnt2$3 = $pnt2$3 + 2 | 0;
   $wk_max$1 = $wk_max$3;
  }
  $dpnt$0 = $dpnt$1 + 2 | 0;
  $j$0 = $j$0 + 1 | 0;
  $pnt$0 = $pnt$1 + $mul321 + 12 | 0;
  $pnt2$2 = $pnt2$3 + 4 | 0;
  $wk_max$0 = $wk_max$1;
 }
 L77 : do if ((label | 0) == 50) {
  _arLog(3, 3256, $vararg_buffer);
  $retval$0 = -1;
 } else if ((label | 0) == 56) {
  $arrayidx331 = $labelInfo + 12 | 0;
  $i$3 = 1;
  $j$1 = 1;
  $wk$4 = $arraydecay;
  while (1) {
   if (($i$3 | 0) > ($wk_max$0 | 0)) break;
   $46 = HEAP32[$wk$4 >> 2] | 0;
   if (($46 | 0) == ($i$3 | 0)) {
    $cond = $j$1;
    $j$2 = $j$1 + 1 | 0;
   } else {
    $cond = HEAP32[$labelInfo + 1179664 + ($46 + -1 << 2) >> 2] | 0;
    $j$2 = $j$1;
   }
   HEAP32[$wk$4 >> 2] = $cond;
   $i$3 = $i$3 + 1 | 0;
   $j$1 = $j$2;
   $wk$4 = $wk$4 + 4 | 0;
  }
  $label_num329 = $labelInfo + 8 | 0;
  $sub352 = $j$1 + -1 | 0;
  HEAP32[$label_num329 >> 2] = $sub352;
  if (!$sub352) $retval$0 = 0; else {
   _memset($arrayidx331 | 0, 0, $sub352 << 2 | 0) | 0;
   _memset($labelInfo + 655376 | 0, 0, $sub352 << 4 | 0) | 0;
   $48 = $sub352;
   $i$4 = 0;
   while (1) {
    if (($i$4 | 0) >= ($48 | 0)) {
     $i$5 = 0;
     break;
    }
    $mul364 = $i$4 << 2;
    HEAP32[$labelInfo + 131084 + ($mul364 << 2) >> 2] = $div;
    HEAP32[$labelInfo + 131084 + (($mul364 | 1) << 2) >> 2] = 0;
    HEAP32[$labelInfo + 131084 + (($mul364 | 2) << 2) >> 2] = $div1;
    HEAP32[$labelInfo + 131084 + (($mul364 | 3) << 2) >> 2] = 0;
    $48 = HEAP32[$label_num329 >> 2] | 0;
    $i$4 = $i$4 + 1 | 0;
   }
   while (1) {
    if (($i$5 | 0) >= ($wk_max$0 | 0)) {
     $i$6 = 0;
     break;
    }
    $sub384 = (HEAP32[$labelInfo + 1179664 + ($i$5 << 2) >> 2] | 0) + -1 | 0;
    $mul385 = $i$5 * 7 | 0;
    $arrayidx388 = $labelInfo + 12 + ($sub384 << 2) | 0;
    HEAP32[$arrayidx388 >> 2] = (HEAP32[$arrayidx388 >> 2] | 0) + (HEAP32[$labelInfo + 1310736 + ($mul385 << 2) >> 2] | 0);
    $mul394 = $sub384 << 1;
    $arrayidx396 = $labelInfo + 655376 + ($mul394 << 3) | 0;
    HEAPF64[$arrayidx396 >> 3] = +HEAPF64[$arrayidx396 >> 3] + +(HEAP32[$labelInfo + 1310736 + ($mul385 + 1 << 2) >> 2] | 0);
    $arrayidx404 = $labelInfo + 655376 + (($mul394 | 1) << 3) | 0;
    HEAPF64[$arrayidx404 >> 3] = +HEAPF64[$arrayidx404 >> 3] + +(HEAP32[$labelInfo + 1310736 + ($mul385 + 2 << 2) >> 2] | 0);
    $mul406 = $sub384 << 2;
    $arrayidx408 = $labelInfo + 131084 + ($mul406 << 2) | 0;
    $57 = HEAP32[$labelInfo + 1310736 + ($mul385 + 3 << 2) >> 2] | 0;
    if ((HEAP32[$arrayidx408 >> 2] | 0) > ($57 | 0)) HEAP32[$arrayidx408 >> 2] = $57;
    $arrayidx424 = $labelInfo + 131084 + (($mul406 | 1) << 2) | 0;
    $59 = HEAP32[$labelInfo + 1310736 + ($mul385 + 4 << 2) >> 2] | 0;
    if ((HEAP32[$arrayidx424 >> 2] | 0) < ($59 | 0)) HEAP32[$arrayidx424 >> 2] = $59;
    $arrayidx440 = $labelInfo + 131084 + (($mul406 | 2) << 2) | 0;
    $61 = HEAP32[$labelInfo + 1310736 + ($mul385 + 5 << 2) >> 2] | 0;
    if ((HEAP32[$arrayidx440 >> 2] | 0) > ($61 | 0)) HEAP32[$arrayidx440 >> 2] = $61;
    $arrayidx456 = $labelInfo + 131084 + (($mul406 | 3) << 2) | 0;
    $63 = HEAP32[$labelInfo + 1310736 + ($mul385 + 6 << 2) >> 2] | 0;
    if ((HEAP32[$arrayidx456 >> 2] | 0) < ($63 | 0)) HEAP32[$arrayidx456 >> 2] = $63;
    $i$5 = $i$5 + 1 | 0;
   }
   while (1) {
    if (($i$6 | 0) >= (HEAP32[$label_num329 >> 2] | 0)) {
     $retval$0 = 0;
     break L77;
    }
    $arrayidx477 = $labelInfo + 12 + ($i$6 << 2) | 0;
    $mul479 = $i$6 << 1;
    $arrayidx481 = $labelInfo + 655376 + ($mul479 << 3) | 0;
    HEAPF64[$arrayidx481 >> 3] = +HEAPF64[$arrayidx481 >> 3] / +(HEAP32[$arrayidx477 >> 2] | 0);
    $arrayidx487 = $labelInfo + 655376 + (($mul479 | 1) << 3) | 0;
    HEAPF64[$arrayidx487 >> 3] = +HEAPF64[$arrayidx487 >> 3] / +(HEAP32[$arrayidx477 >> 2] | 0);
    $i$6 = $i$6 + 1 | 0;
   }
  }
 } while (0);
 STACKTOP = sp;
 return $retval$0 | 0;
}

function _arLabelingSubEBI3C($image, $xsize, $ysize, $labelingThresh, $labelInfo) {
 $image = $image | 0;
 $xsize = $xsize | 0;
 $ysize = $ysize | 0;
 $labelingThresh = $labelingThresh | 0;
 $labelInfo = $labelInfo | 0;
 var $$sink = 0, $0 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $17 = 0, $18 = 0, $22 = 0, $23 = 0, $24 = 0, $27 = 0, $28 = 0, $40 = 0, $41 = 0, $46 = 0, $48 = 0, $57 = 0, $59 = 0, $6 = 0, $61 = 0, $63 = 0, $7 = 0, $add = 0, $add$ptr137 = 0, $add275 = 0, $add280$sink = 0, $arraydecay = 0, $arrayidx126 = 0, $arrayidx129 = 0, $arrayidx132 = 0, $arrayidx193 = 0, $arrayidx196 = 0, $arrayidx199 = 0, $arrayidx207 = 0, $arrayidx210 = 0, $arrayidx213 = 0, $arrayidx216 = 0, $arrayidx238 = 0, $arrayidx241 = 0, $arrayidx244 = 0, $arrayidx247 = 0, $arrayidx267 = 0, $arrayidx270 = 0, $arrayidx273 = 0, $arrayidx331 = 0, $arrayidx388 = 0, $arrayidx396 = 0, $arrayidx404 = 0, $arrayidx408 = 0, $arrayidx424 = 0, $arrayidx440 = 0, $arrayidx456 = 0, $arrayidx47 = 0, $arrayidx477 = 0, $arrayidx481 = 0, $arrayidx487 = 0, $arrayidx56 = 0, $arrayidx59 = 0, $arrayidx62 = 0, $arrayidx79 = 0, $cmp73 = 0, $cond = 0, $div = 0, $div1 = 0, $dpnt$0 = 0, $dpnt$1 = 0, $i$0 = 0, $i$1 = 0, $i$2 = 0, $i$3 = 0, $i$4 = 0, $i$5 = 0, $i$6 = 0, $inc284 = 0, $j$0 = 0, $j$1 = 0, $j$2 = 0, $k$0 = 0, $k$1 = 0, $k$2 = 0, $k$3 = 0, $label_num329 = 0, $mul = 0, $mul205 = 0, $mul236 = 0, $mul294 = 0, $mul321 = 0, $mul364 = 0, $mul385 = 0, $mul394 = 0, $mul406 = 0, $mul479 = 0, $pnt$0 = 0, $pnt$1 = 0, $pnt1$0 = 0, $pnt1$1 = 0, $pnt2$0 = 0, $pnt2$1 = 0, $pnt2$2 = 0, $pnt2$3 = 0, $retval$0 = 0, $sub = 0, $sub352 = 0, $sub384 = 0, $sub46 = 0, $sub78 = 0, $sub82 = 0, $sub9 = 0, $vararg_buffer = 0, $wk$0 = 0, $wk$1 = 0, $wk$2 = 0, $wk$3 = 0, $wk$4 = 0, $wk_max$0 = 0, $wk_max$1 = 0, $wk_max$2 = 0, $wk_max$3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $vararg_buffer = sp;
 $div = ($xsize | 0) / 2 | 0;
 $div1 = ($ysize | 0) / 2 | 0;
 $0 = HEAP32[$labelInfo >> 2] | 0;
 $sub = $div1 + -1 | 0;
 $i$0 = 0;
 $pnt1$0 = $0;
 $pnt2$0 = $0 + ((Math_imul($sub, $div) | 0) << 1) | 0;
 while (1) {
  if (($i$0 | 0) >= ($div | 0)) break;
  HEAP16[$pnt2$0 >> 1] = 0;
  HEAP16[$pnt1$0 >> 1] = 0;
  $i$0 = $i$0 + 1 | 0;
  $pnt1$0 = $pnt1$0 + 2 | 0;
  $pnt2$0 = $pnt2$0 + 2 | 0;
 }
 $mul = $labelingThresh * 3 | 0;
 $sub9 = $div + -1 | 0;
 $i$1 = 0;
 $pnt1$1 = $0;
 $pnt2$1 = $0 + ($sub9 << 1) | 0;
 while (1) {
  if (($i$1 | 0) >= ($div1 | 0)) break;
  HEAP16[$pnt2$1 >> 1] = 0;
  HEAP16[$pnt1$1 >> 1] = 0;
  $i$1 = $i$1 + 1 | 0;
  $pnt1$1 = $pnt1$1 + ($div << 1) | 0;
  $pnt2$1 = $pnt2$1 + ($div << 1) | 0;
 }
 $arraydecay = $labelInfo + 1179664 | 0;
 $add = $div + 1 | 0;
 $sub46 = 0 - $div | 0;
 $mul321 = $xsize * 3 | 0;
 $dpnt$0 = (HEAP32[$labelInfo + 4 >> 2] | 0) + $add | 0;
 $j$0 = 1;
 $pnt$0 = $image + (($xsize * 6 | 0) + 6) | 0;
 $pnt2$2 = $0 + ($add << 1) | 0;
 $wk_max$0 = 0;
 L9 : while (1) {
  if (($j$0 | 0) < ($sub | 0)) {
   $dpnt$1 = $dpnt$0;
   $i$2 = 1;
   $pnt$1 = $pnt$0;
   $pnt2$3 = $pnt2$2;
   $wk_max$1 = $wk_max$0;
  } else {
   label = 56;
   break;
  }
  while (1) {
   if (($i$2 | 0) >= ($sub9 | 0)) break;
   do if (((HEAPU8[$pnt$1 + 1 >> 0] | 0) + (HEAPU8[$pnt$1 >> 0] | 0) + (HEAPU8[$pnt$1 + 2 >> 0] | 0) | 0) > ($mul | 0)) {
    HEAP16[$pnt2$3 >> 1] = 0;
    HEAP8[$dpnt$1 >> 0] = 0;
    $wk_max$3 = $wk_max$1;
   } else {
    HEAP8[$dpnt$1 >> 0] = -1;
    $arrayidx47 = $pnt2$3 + ($sub46 << 1) | 0;
    $6 = HEAP16[$arrayidx47 >> 1] | 0;
    if ($6 << 16 >> 16 > 0) {
     HEAP16[$pnt2$3 >> 1] = $6;
     $7 = ($6 << 16 >> 16) * 7 | 0;
     $arrayidx56 = $labelInfo + 1310736 + ($7 + -7 << 2) | 0;
     HEAP32[$arrayidx56 >> 2] = (HEAP32[$arrayidx56 >> 2] | 0) + 1;
     $arrayidx59 = $labelInfo + 1310736 + ($7 + -6 << 2) | 0;
     HEAP32[$arrayidx59 >> 2] = (HEAP32[$arrayidx59 >> 2] | 0) + $i$2;
     $arrayidx62 = $labelInfo + 1310736 + ($7 + -5 << 2) | 0;
     HEAP32[$arrayidx62 >> 2] = (HEAP32[$arrayidx62 >> 2] | 0) + $j$0;
     HEAP32[$labelInfo + 1310736 + ($7 + -1 << 2) >> 2] = $j$0;
     $wk_max$3 = $wk_max$1;
     break;
    }
    $11 = HEAP16[$arrayidx47 + 2 >> 1] | 0;
    $12 = HEAP16[$arrayidx47 + -2 >> 1] | 0;
    $cmp73 = $12 << 16 >> 16 > 0;
    $add$ptr137 = $pnt2$3 + -2 | 0;
    $sub82 = ($12 << 16 >> 16) + -1 | 0;
    if ($11 << 16 >> 16 <= 0) {
     if ($cmp73) {
      HEAP16[$pnt2$3 >> 1] = $12;
      $mul236 = $sub82 * 7 | 0;
      $arrayidx238 = $labelInfo + 1310736 + ($mul236 << 2) | 0;
      HEAP32[$arrayidx238 >> 2] = (HEAP32[$arrayidx238 >> 2] | 0) + 1;
      $arrayidx241 = $labelInfo + 1310736 + ($mul236 + 1 << 2) | 0;
      HEAP32[$arrayidx241 >> 2] = (HEAP32[$arrayidx241 >> 2] | 0) + $i$2;
      $arrayidx244 = $labelInfo + 1310736 + ($mul236 + 2 << 2) | 0;
      HEAP32[$arrayidx244 >> 2] = (HEAP32[$arrayidx244 >> 2] | 0) + $j$0;
      $arrayidx247 = $labelInfo + 1310736 + ($mul236 + 4 << 2) | 0;
      if ((HEAP32[$arrayidx247 >> 2] | 0) < ($i$2 | 0)) HEAP32[$arrayidx247 >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($mul236 + 6 << 2) >> 2] = $j$0;
      $wk_max$3 = $wk_max$1;
      break;
     }
     $40 = HEAP16[$add$ptr137 >> 1] | 0;
     if ($40 << 16 >> 16 > 0) {
      HEAP16[$pnt2$3 >> 1] = $40;
      $41 = ($40 << 16 >> 16) * 7 | 0;
      $arrayidx267 = $labelInfo + 1310736 + ($41 + -7 << 2) | 0;
      HEAP32[$arrayidx267 >> 2] = (HEAP32[$arrayidx267 >> 2] | 0) + 1;
      $arrayidx270 = $labelInfo + 1310736 + ($41 + -6 << 2) | 0;
      HEAP32[$arrayidx270 >> 2] = (HEAP32[$arrayidx270 >> 2] | 0) + $i$2;
      $arrayidx273 = $labelInfo + 1310736 + ($41 + -5 << 2) | 0;
      HEAP32[$arrayidx273 >> 2] = (HEAP32[$arrayidx273 >> 2] | 0) + $j$0;
      $add275 = $41 + -3 | 0;
      if ((HEAP32[$labelInfo + 1310736 + ($add275 << 2) >> 2] | 0) < ($i$2 | 0)) {
       $$sink = $i$2;
       $add280$sink = $add275;
       $wk_max$2 = $wk_max$1;
      } else {
       $wk_max$3 = $wk_max$1;
       break;
      }
     } else {
      $inc284 = $wk_max$1 + 1 | 0;
      if (($wk_max$1 | 0) > 32767) {
       label = 50;
       break L9;
      }
      HEAP16[$pnt2$3 >> 1] = $inc284;
      HEAP32[$labelInfo + 1179664 + ($wk_max$1 << 2) >> 2] = $inc284 << 16 >> 16;
      $mul294 = $wk_max$1 * 7 | 0;
      HEAP32[$labelInfo + 1310736 + ($mul294 << 2) >> 2] = 1;
      HEAP32[$labelInfo + 1310736 + ($mul294 + 1 << 2) >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($mul294 + 2 << 2) >> 2] = $j$0;
      HEAP32[$labelInfo + 1310736 + ($mul294 + 3 << 2) >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($mul294 + 4 << 2) >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($mul294 + 5 << 2) >> 2] = $j$0;
      $$sink = $j$0;
      $add280$sink = $mul294 + 6 | 0;
      $wk_max$2 = $inc284;
     }
     HEAP32[$labelInfo + 1310736 + ($add280$sink << 2) >> 2] = $$sink;
     $wk_max$3 = $wk_max$2;
     break;
    }
    $sub78 = ($11 << 16 >> 16) + -1 | 0;
    $arrayidx79 = $labelInfo + 1179664 + ($sub78 << 2) | 0;
    if ($cmp73) {
     $13 = HEAP32[$arrayidx79 >> 2] | 0;
     $14 = HEAP32[$labelInfo + 1179664 + ($sub82 << 2) >> 2] | 0;
     L36 : do if (($13 | 0) > ($14 | 0)) {
      HEAP16[$pnt2$3 >> 1] = $14;
      $k$0 = 0;
      $wk$0 = $arraydecay;
      while (1) {
       if (($k$0 | 0) >= ($wk_max$1 | 0)) {
        $17 = $14;
        break L36;
       }
       if ((HEAP32[$wk$0 >> 2] | 0) == ($13 | 0)) HEAP32[$wk$0 >> 2] = $14;
       $k$0 = $k$0 + 1 | 0;
       $wk$0 = $wk$0 + 4 | 0;
      }
     } else {
      HEAP16[$pnt2$3 >> 1] = $13;
      if (($13 | 0) < ($14 | 0)) {
       $k$1 = 0;
       $wk$1 = $arraydecay;
       while (1) {
        if (($k$1 | 0) >= ($wk_max$1 | 0)) {
         $17 = $13;
         break L36;
        }
        if ((HEAP32[$wk$1 >> 2] | 0) == ($14 | 0)) HEAP32[$wk$1 >> 2] = $13;
        $k$1 = $k$1 + 1 | 0;
        $wk$1 = $wk$1 + 4 | 0;
       }
      } else $17 = $13;
     } while (0);
     $18 = ($17 << 16 >> 16) * 7 | 0;
     $arrayidx126 = $labelInfo + 1310736 + ($18 + -7 << 2) | 0;
     HEAP32[$arrayidx126 >> 2] = (HEAP32[$arrayidx126 >> 2] | 0) + 1;
     $arrayidx129 = $labelInfo + 1310736 + ($18 + -6 << 2) | 0;
     HEAP32[$arrayidx129 >> 2] = (HEAP32[$arrayidx129 >> 2] | 0) + $i$2;
     $arrayidx132 = $labelInfo + 1310736 + ($18 + -5 << 2) | 0;
     HEAP32[$arrayidx132 >> 2] = (HEAP32[$arrayidx132 >> 2] | 0) + $j$0;
     HEAP32[$labelInfo + 1310736 + ($18 + -1 << 2) >> 2] = $j$0;
     $wk_max$3 = $wk_max$1;
     break;
    }
    $22 = HEAP16[$add$ptr137 >> 1] | 0;
    if ($22 << 16 >> 16 <= 0) {
     HEAP16[$pnt2$3 >> 1] = $11;
     $mul205 = $sub78 * 7 | 0;
     $arrayidx207 = $labelInfo + 1310736 + ($mul205 << 2) | 0;
     HEAP32[$arrayidx207 >> 2] = (HEAP32[$arrayidx207 >> 2] | 0) + 1;
     $arrayidx210 = $labelInfo + 1310736 + ($mul205 + 1 << 2) | 0;
     HEAP32[$arrayidx210 >> 2] = (HEAP32[$arrayidx210 >> 2] | 0) + $i$2;
     $arrayidx213 = $labelInfo + 1310736 + ($mul205 + 2 << 2) | 0;
     HEAP32[$arrayidx213 >> 2] = (HEAP32[$arrayidx213 >> 2] | 0) + $j$0;
     $arrayidx216 = $labelInfo + 1310736 + ($mul205 + 3 << 2) | 0;
     if ((HEAP32[$arrayidx216 >> 2] | 0) > ($i$2 | 0)) HEAP32[$arrayidx216 >> 2] = $i$2;
     HEAP32[$labelInfo + 1310736 + ($mul205 + 6 << 2) >> 2] = $j$0;
     $wk_max$3 = $wk_max$1;
     break;
    }
    $23 = HEAP32[$arrayidx79 >> 2] | 0;
    $24 = HEAP32[$labelInfo + 1179664 + (($22 << 16 >> 16) + -1 << 2) >> 2] | 0;
    L59 : do if (($23 | 0) > ($24 | 0)) {
     HEAP16[$pnt2$3 >> 1] = $24;
     $k$2 = 0;
     $wk$2 = $arraydecay;
     while (1) {
      if (($k$2 | 0) >= ($wk_max$1 | 0)) {
       $27 = $24;
       break L59;
      }
      if ((HEAP32[$wk$2 >> 2] | 0) == ($23 | 0)) HEAP32[$wk$2 >> 2] = $24;
      $k$2 = $k$2 + 1 | 0;
      $wk$2 = $wk$2 + 4 | 0;
     }
    } else {
     HEAP16[$pnt2$3 >> 1] = $23;
     if (($23 | 0) < ($24 | 0)) {
      $k$3 = 0;
      $wk$3 = $arraydecay;
      while (1) {
       if (($k$3 | 0) >= ($wk_max$1 | 0)) {
        $27 = $23;
        break L59;
       }
       if ((HEAP32[$wk$3 >> 2] | 0) == ($24 | 0)) HEAP32[$wk$3 >> 2] = $23;
       $k$3 = $k$3 + 1 | 0;
       $wk$3 = $wk$3 + 4 | 0;
      }
     } else $27 = $23;
    } while (0);
    $28 = ($27 << 16 >> 16) * 7 | 0;
    $arrayidx193 = $labelInfo + 1310736 + ($28 + -7 << 2) | 0;
    HEAP32[$arrayidx193 >> 2] = (HEAP32[$arrayidx193 >> 2] | 0) + 1;
    $arrayidx196 = $labelInfo + 1310736 + ($28 + -6 << 2) | 0;
    HEAP32[$arrayidx196 >> 2] = (HEAP32[$arrayidx196 >> 2] | 0) + $i$2;
    $arrayidx199 = $labelInfo + 1310736 + ($28 + -5 << 2) | 0;
    HEAP32[$arrayidx199 >> 2] = (HEAP32[$arrayidx199 >> 2] | 0) + $j$0;
    $wk_max$3 = $wk_max$1;
   } while (0);
   $dpnt$1 = $dpnt$1 + 1 | 0;
   $i$2 = $i$2 + 1 | 0;
   $pnt$1 = $pnt$1 + 6 | 0;
   $pnt2$3 = $pnt2$3 + 2 | 0;
   $wk_max$1 = $wk_max$3;
  }
  $dpnt$0 = $dpnt$1 + 2 | 0;
  $j$0 = $j$0 + 1 | 0;
  $pnt$0 = $pnt$1 + $mul321 + 12 | 0;
  $pnt2$2 = $pnt2$3 + 4 | 0;
  $wk_max$0 = $wk_max$1;
 }
 L77 : do if ((label | 0) == 50) {
  _arLog(3, 3256, $vararg_buffer);
  $retval$0 = -1;
 } else if ((label | 0) == 56) {
  $arrayidx331 = $labelInfo + 12 | 0;
  $i$3 = 1;
  $j$1 = 1;
  $wk$4 = $arraydecay;
  while (1) {
   if (($i$3 | 0) > ($wk_max$0 | 0)) break;
   $46 = HEAP32[$wk$4 >> 2] | 0;
   if (($46 | 0) == ($i$3 | 0)) {
    $cond = $j$1;
    $j$2 = $j$1 + 1 | 0;
   } else {
    $cond = HEAP32[$labelInfo + 1179664 + ($46 + -1 << 2) >> 2] | 0;
    $j$2 = $j$1;
   }
   HEAP32[$wk$4 >> 2] = $cond;
   $i$3 = $i$3 + 1 | 0;
   $j$1 = $j$2;
   $wk$4 = $wk$4 + 4 | 0;
  }
  $label_num329 = $labelInfo + 8 | 0;
  $sub352 = $j$1 + -1 | 0;
  HEAP32[$label_num329 >> 2] = $sub352;
  if (!$sub352) $retval$0 = 0; else {
   _memset($arrayidx331 | 0, 0, $sub352 << 2 | 0) | 0;
   _memset($labelInfo + 655376 | 0, 0, $sub352 << 4 | 0) | 0;
   $48 = $sub352;
   $i$4 = 0;
   while (1) {
    if (($i$4 | 0) >= ($48 | 0)) {
     $i$5 = 0;
     break;
    }
    $mul364 = $i$4 << 2;
    HEAP32[$labelInfo + 131084 + ($mul364 << 2) >> 2] = $div;
    HEAP32[$labelInfo + 131084 + (($mul364 | 1) << 2) >> 2] = 0;
    HEAP32[$labelInfo + 131084 + (($mul364 | 2) << 2) >> 2] = $div1;
    HEAP32[$labelInfo + 131084 + (($mul364 | 3) << 2) >> 2] = 0;
    $48 = HEAP32[$label_num329 >> 2] | 0;
    $i$4 = $i$4 + 1 | 0;
   }
   while (1) {
    if (($i$5 | 0) >= ($wk_max$0 | 0)) {
     $i$6 = 0;
     break;
    }
    $sub384 = (HEAP32[$labelInfo + 1179664 + ($i$5 << 2) >> 2] | 0) + -1 | 0;
    $mul385 = $i$5 * 7 | 0;
    $arrayidx388 = $labelInfo + 12 + ($sub384 << 2) | 0;
    HEAP32[$arrayidx388 >> 2] = (HEAP32[$arrayidx388 >> 2] | 0) + (HEAP32[$labelInfo + 1310736 + ($mul385 << 2) >> 2] | 0);
    $mul394 = $sub384 << 1;
    $arrayidx396 = $labelInfo + 655376 + ($mul394 << 3) | 0;
    HEAPF64[$arrayidx396 >> 3] = +HEAPF64[$arrayidx396 >> 3] + +(HEAP32[$labelInfo + 1310736 + ($mul385 + 1 << 2) >> 2] | 0);
    $arrayidx404 = $labelInfo + 655376 + (($mul394 | 1) << 3) | 0;
    HEAPF64[$arrayidx404 >> 3] = +HEAPF64[$arrayidx404 >> 3] + +(HEAP32[$labelInfo + 1310736 + ($mul385 + 2 << 2) >> 2] | 0);
    $mul406 = $sub384 << 2;
    $arrayidx408 = $labelInfo + 131084 + ($mul406 << 2) | 0;
    $57 = HEAP32[$labelInfo + 1310736 + ($mul385 + 3 << 2) >> 2] | 0;
    if ((HEAP32[$arrayidx408 >> 2] | 0) > ($57 | 0)) HEAP32[$arrayidx408 >> 2] = $57;
    $arrayidx424 = $labelInfo + 131084 + (($mul406 | 1) << 2) | 0;
    $59 = HEAP32[$labelInfo + 1310736 + ($mul385 + 4 << 2) >> 2] | 0;
    if ((HEAP32[$arrayidx424 >> 2] | 0) < ($59 | 0)) HEAP32[$arrayidx424 >> 2] = $59;
    $arrayidx440 = $labelInfo + 131084 + (($mul406 | 2) << 2) | 0;
    $61 = HEAP32[$labelInfo + 1310736 + ($mul385 + 5 << 2) >> 2] | 0;
    if ((HEAP32[$arrayidx440 >> 2] | 0) > ($61 | 0)) HEAP32[$arrayidx440 >> 2] = $61;
    $arrayidx456 = $labelInfo + 131084 + (($mul406 | 3) << 2) | 0;
    $63 = HEAP32[$labelInfo + 1310736 + ($mul385 + 6 << 2) >> 2] | 0;
    if ((HEAP32[$arrayidx456 >> 2] | 0) < ($63 | 0)) HEAP32[$arrayidx456 >> 2] = $63;
    $i$5 = $i$5 + 1 | 0;
   }
   while (1) {
    if (($i$6 | 0) >= (HEAP32[$label_num329 >> 2] | 0)) {
     $retval$0 = 0;
     break L77;
    }
    $arrayidx477 = $labelInfo + 12 + ($i$6 << 2) | 0;
    $mul479 = $i$6 << 1;
    $arrayidx481 = $labelInfo + 655376 + ($mul479 << 3) | 0;
    HEAPF64[$arrayidx481 >> 3] = +HEAPF64[$arrayidx481 >> 3] / +(HEAP32[$arrayidx477 >> 2] | 0);
    $arrayidx487 = $labelInfo + 655376 + (($mul479 | 1) << 3) | 0;
    HEAPF64[$arrayidx487 >> 3] = +HEAPF64[$arrayidx487 >> 3] / +(HEAP32[$arrayidx477 >> 2] | 0);
    $i$6 = $i$6 + 1 | 0;
   }
  }
 } while (0);
 STACKTOP = sp;
 return $retval$0 | 0;
}

function _arLabelingSubEWIA3C($image, $xsize, $ysize, $labelingThresh, $labelInfo) {
 $image = $image | 0;
 $xsize = $xsize | 0;
 $ysize = $ysize | 0;
 $labelingThresh = $labelingThresh | 0;
 $labelInfo = $labelInfo | 0;
 var $$sink = 0, $0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $16 = 0, $17 = 0, $21 = 0, $22 = 0, $23 = 0, $26 = 0, $27 = 0, $39 = 0, $40 = 0, $45 = 0, $47 = 0, $5 = 0, $56 = 0, $58 = 0, $6 = 0, $60 = 0, $62 = 0, $add = 0, $add$ptr137 = 0, $add275 = 0, $add280$sink = 0, $arraydecay = 0, $arrayidx126 = 0, $arrayidx129 = 0, $arrayidx132 = 0, $arrayidx193 = 0, $arrayidx196 = 0, $arrayidx199 = 0, $arrayidx207 = 0, $arrayidx210 = 0, $arrayidx213 = 0, $arrayidx216 = 0, $arrayidx238 = 0, $arrayidx241 = 0, $arrayidx244 = 0, $arrayidx247 = 0, $arrayidx267 = 0, $arrayidx270 = 0, $arrayidx273 = 0, $arrayidx331 = 0, $arrayidx388 = 0, $arrayidx396 = 0, $arrayidx404 = 0, $arrayidx408 = 0, $arrayidx424 = 0, $arrayidx440 = 0, $arrayidx456 = 0, $arrayidx47 = 0, $arrayidx477 = 0, $arrayidx481 = 0, $arrayidx487 = 0, $arrayidx56 = 0, $arrayidx59 = 0, $arrayidx62 = 0, $arrayidx79 = 0, $cmp73 = 0, $cond = 0, $div = 0, $div1 = 0, $dpnt$0 = 0, $dpnt$1 = 0, $i$0 = 0, $i$1 = 0, $i$2 = 0, $i$3 = 0, $i$4 = 0, $i$5 = 0, $i$6 = 0, $inc284 = 0, $j$0 = 0, $j$1 = 0, $j$2 = 0, $k$0 = 0, $k$1 = 0, $k$2 = 0, $k$3 = 0, $label_num329 = 0, $mul = 0, $mul205 = 0, $mul236 = 0, $mul294 = 0, $mul321 = 0, $mul364 = 0, $mul385 = 0, $mul394 = 0, $mul406 = 0, $mul479 = 0, $pnt$0 = 0, $pnt$1 = 0, $pnt1$0 = 0, $pnt1$1 = 0, $pnt2$0 = 0, $pnt2$1 = 0, $pnt2$2 = 0, $pnt2$3 = 0, $retval$0 = 0, $sub = 0, $sub352 = 0, $sub384 = 0, $sub46 = 0, $sub78 = 0, $sub82 = 0, $sub9 = 0, $vararg_buffer = 0, $wk$0 = 0, $wk$1 = 0, $wk$2 = 0, $wk$3 = 0, $wk$4 = 0, $wk_max$0 = 0, $wk_max$1 = 0, $wk_max$2 = 0, $wk_max$3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $vararg_buffer = sp;
 $div = ($xsize | 0) / 2 | 0;
 $div1 = ($ysize | 0) / 2 | 0;
 $0 = HEAP32[$labelInfo >> 2] | 0;
 $sub = $div1 + -1 | 0;
 $i$0 = 0;
 $pnt1$0 = $0;
 $pnt2$0 = $0 + ((Math_imul($sub, $div) | 0) << 1) | 0;
 while (1) {
  if (($i$0 | 0) >= ($div | 0)) break;
  HEAP16[$pnt2$0 >> 1] = 0;
  HEAP16[$pnt1$0 >> 1] = 0;
  $i$0 = $i$0 + 1 | 0;
  $pnt1$0 = $pnt1$0 + 2 | 0;
  $pnt2$0 = $pnt2$0 + 2 | 0;
 }
 $mul = $labelingThresh * 3 | 0;
 $sub9 = $div + -1 | 0;
 $i$1 = 0;
 $pnt1$1 = $0;
 $pnt2$1 = $0 + ($sub9 << 1) | 0;
 while (1) {
  if (($i$1 | 0) >= ($div1 | 0)) break;
  HEAP16[$pnt2$1 >> 1] = 0;
  HEAP16[$pnt1$1 >> 1] = 0;
  $i$1 = $i$1 + 1 | 0;
  $pnt1$1 = $pnt1$1 + ($div << 1) | 0;
  $pnt2$1 = $pnt2$1 + ($div << 1) | 0;
 }
 $arraydecay = $labelInfo + 1179664 | 0;
 $add = $div + 1 | 0;
 $sub46 = 0 - $div | 0;
 $mul321 = $xsize << 2;
 $dpnt$0 = (HEAP32[$labelInfo + 4 >> 2] | 0) + $add | 0;
 $j$0 = 1;
 $pnt$0 = $image + (($xsize << 3) + 8) | 0;
 $pnt2$2 = $0 + ($add << 1) | 0;
 $wk_max$0 = 0;
 L9 : while (1) {
  if (($j$0 | 0) < ($sub | 0)) {
   $dpnt$1 = $dpnt$0;
   $i$2 = 1;
   $pnt$1 = $pnt$0;
   $pnt2$3 = $pnt2$2;
   $wk_max$1 = $wk_max$0;
  } else {
   label = 56;
   break;
  }
  while (1) {
   if (($i$2 | 0) >= ($sub9 | 0)) break;
   do if (((HEAPU8[$pnt$1 + 2 >> 0] | 0) + (HEAPU8[$pnt$1 + 1 >> 0] | 0) + (HEAPU8[$pnt$1 + 3 >> 0] | 0) | 0) > ($mul | 0)) {
    HEAP8[$dpnt$1 >> 0] = -1;
    $arrayidx47 = $pnt2$3 + ($sub46 << 1) | 0;
    $5 = HEAP16[$arrayidx47 >> 1] | 0;
    if ($5 << 16 >> 16 > 0) {
     HEAP16[$pnt2$3 >> 1] = $5;
     $6 = ($5 << 16 >> 16) * 7 | 0;
     $arrayidx56 = $labelInfo + 1310736 + ($6 + -7 << 2) | 0;
     HEAP32[$arrayidx56 >> 2] = (HEAP32[$arrayidx56 >> 2] | 0) + 1;
     $arrayidx59 = $labelInfo + 1310736 + ($6 + -6 << 2) | 0;
     HEAP32[$arrayidx59 >> 2] = (HEAP32[$arrayidx59 >> 2] | 0) + $i$2;
     $arrayidx62 = $labelInfo + 1310736 + ($6 + -5 << 2) | 0;
     HEAP32[$arrayidx62 >> 2] = (HEAP32[$arrayidx62 >> 2] | 0) + $j$0;
     HEAP32[$labelInfo + 1310736 + ($6 + -1 << 2) >> 2] = $j$0;
     $wk_max$3 = $wk_max$1;
     break;
    }
    $10 = HEAP16[$arrayidx47 + 2 >> 1] | 0;
    $11 = HEAP16[$arrayidx47 + -2 >> 1] | 0;
    $cmp73 = $11 << 16 >> 16 > 0;
    $add$ptr137 = $pnt2$3 + -2 | 0;
    $sub82 = ($11 << 16 >> 16) + -1 | 0;
    if ($10 << 16 >> 16 <= 0) {
     if ($cmp73) {
      HEAP16[$pnt2$3 >> 1] = $11;
      $mul236 = $sub82 * 7 | 0;
      $arrayidx238 = $labelInfo + 1310736 + ($mul236 << 2) | 0;
      HEAP32[$arrayidx238 >> 2] = (HEAP32[$arrayidx238 >> 2] | 0) + 1;
      $arrayidx241 = $labelInfo + 1310736 + ($mul236 + 1 << 2) | 0;
      HEAP32[$arrayidx241 >> 2] = (HEAP32[$arrayidx241 >> 2] | 0) + $i$2;
      $arrayidx244 = $labelInfo + 1310736 + ($mul236 + 2 << 2) | 0;
      HEAP32[$arrayidx244 >> 2] = (HEAP32[$arrayidx244 >> 2] | 0) + $j$0;
      $arrayidx247 = $labelInfo + 1310736 + ($mul236 + 4 << 2) | 0;
      if ((HEAP32[$arrayidx247 >> 2] | 0) < ($i$2 | 0)) HEAP32[$arrayidx247 >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($mul236 + 6 << 2) >> 2] = $j$0;
      $wk_max$3 = $wk_max$1;
      break;
     }
     $39 = HEAP16[$add$ptr137 >> 1] | 0;
     if ($39 << 16 >> 16 > 0) {
      HEAP16[$pnt2$3 >> 1] = $39;
      $40 = ($39 << 16 >> 16) * 7 | 0;
      $arrayidx267 = $labelInfo + 1310736 + ($40 + -7 << 2) | 0;
      HEAP32[$arrayidx267 >> 2] = (HEAP32[$arrayidx267 >> 2] | 0) + 1;
      $arrayidx270 = $labelInfo + 1310736 + ($40 + -6 << 2) | 0;
      HEAP32[$arrayidx270 >> 2] = (HEAP32[$arrayidx270 >> 2] | 0) + $i$2;
      $arrayidx273 = $labelInfo + 1310736 + ($40 + -5 << 2) | 0;
      HEAP32[$arrayidx273 >> 2] = (HEAP32[$arrayidx273 >> 2] | 0) + $j$0;
      $add275 = $40 + -3 | 0;
      if ((HEAP32[$labelInfo + 1310736 + ($add275 << 2) >> 2] | 0) < ($i$2 | 0)) {
       $$sink = $i$2;
       $add280$sink = $add275;
       $wk_max$2 = $wk_max$1;
      } else {
       $wk_max$3 = $wk_max$1;
       break;
      }
     } else {
      $inc284 = $wk_max$1 + 1 | 0;
      if (($wk_max$1 | 0) > 32767) {
       label = 50;
       break L9;
      }
      HEAP16[$pnt2$3 >> 1] = $inc284;
      HEAP32[$labelInfo + 1179664 + ($wk_max$1 << 2) >> 2] = $inc284 << 16 >> 16;
      $mul294 = $wk_max$1 * 7 | 0;
      HEAP32[$labelInfo + 1310736 + ($mul294 << 2) >> 2] = 1;
      HEAP32[$labelInfo + 1310736 + ($mul294 + 1 << 2) >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($mul294 + 2 << 2) >> 2] = $j$0;
      HEAP32[$labelInfo + 1310736 + ($mul294 + 3 << 2) >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($mul294 + 4 << 2) >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($mul294 + 5 << 2) >> 2] = $j$0;
      $$sink = $j$0;
      $add280$sink = $mul294 + 6 | 0;
      $wk_max$2 = $inc284;
     }
     HEAP32[$labelInfo + 1310736 + ($add280$sink << 2) >> 2] = $$sink;
     $wk_max$3 = $wk_max$2;
     break;
    }
    $sub78 = ($10 << 16 >> 16) + -1 | 0;
    $arrayidx79 = $labelInfo + 1179664 + ($sub78 << 2) | 0;
    if ($cmp73) {
     $12 = HEAP32[$arrayidx79 >> 2] | 0;
     $13 = HEAP32[$labelInfo + 1179664 + ($sub82 << 2) >> 2] | 0;
     L35 : do if (($12 | 0) > ($13 | 0)) {
      HEAP16[$pnt2$3 >> 1] = $13;
      $k$0 = 0;
      $wk$0 = $arraydecay;
      while (1) {
       if (($k$0 | 0) >= ($wk_max$1 | 0)) {
        $16 = $13;
        break L35;
       }
       if ((HEAP32[$wk$0 >> 2] | 0) == ($12 | 0)) HEAP32[$wk$0 >> 2] = $13;
       $k$0 = $k$0 + 1 | 0;
       $wk$0 = $wk$0 + 4 | 0;
      }
     } else {
      HEAP16[$pnt2$3 >> 1] = $12;
      if (($12 | 0) < ($13 | 0)) {
       $k$1 = 0;
       $wk$1 = $arraydecay;
       while (1) {
        if (($k$1 | 0) >= ($wk_max$1 | 0)) {
         $16 = $12;
         break L35;
        }
        if ((HEAP32[$wk$1 >> 2] | 0) == ($13 | 0)) HEAP32[$wk$1 >> 2] = $12;
        $k$1 = $k$1 + 1 | 0;
        $wk$1 = $wk$1 + 4 | 0;
       }
      } else $16 = $12;
     } while (0);
     $17 = ($16 << 16 >> 16) * 7 | 0;
     $arrayidx126 = $labelInfo + 1310736 + ($17 + -7 << 2) | 0;
     HEAP32[$arrayidx126 >> 2] = (HEAP32[$arrayidx126 >> 2] | 0) + 1;
     $arrayidx129 = $labelInfo + 1310736 + ($17 + -6 << 2) | 0;
     HEAP32[$arrayidx129 >> 2] = (HEAP32[$arrayidx129 >> 2] | 0) + $i$2;
     $arrayidx132 = $labelInfo + 1310736 + ($17 + -5 << 2) | 0;
     HEAP32[$arrayidx132 >> 2] = (HEAP32[$arrayidx132 >> 2] | 0) + $j$0;
     HEAP32[$labelInfo + 1310736 + ($17 + -1 << 2) >> 2] = $j$0;
     $wk_max$3 = $wk_max$1;
     break;
    }
    $21 = HEAP16[$add$ptr137 >> 1] | 0;
    if ($21 << 16 >> 16 <= 0) {
     HEAP16[$pnt2$3 >> 1] = $10;
     $mul205 = $sub78 * 7 | 0;
     $arrayidx207 = $labelInfo + 1310736 + ($mul205 << 2) | 0;
     HEAP32[$arrayidx207 >> 2] = (HEAP32[$arrayidx207 >> 2] | 0) + 1;
     $arrayidx210 = $labelInfo + 1310736 + ($mul205 + 1 << 2) | 0;
     HEAP32[$arrayidx210 >> 2] = (HEAP32[$arrayidx210 >> 2] | 0) + $i$2;
     $arrayidx213 = $labelInfo + 1310736 + ($mul205 + 2 << 2) | 0;
     HEAP32[$arrayidx213 >> 2] = (HEAP32[$arrayidx213 >> 2] | 0) + $j$0;
     $arrayidx216 = $labelInfo + 1310736 + ($mul205 + 3 << 2) | 0;
     if ((HEAP32[$arrayidx216 >> 2] | 0) > ($i$2 | 0)) HEAP32[$arrayidx216 >> 2] = $i$2;
     HEAP32[$labelInfo + 1310736 + ($mul205 + 6 << 2) >> 2] = $j$0;
     $wk_max$3 = $wk_max$1;
     break;
    }
    $22 = HEAP32[$arrayidx79 >> 2] | 0;
    $23 = HEAP32[$labelInfo + 1179664 + (($21 << 16 >> 16) + -1 << 2) >> 2] | 0;
    L58 : do if (($22 | 0) > ($23 | 0)) {
     HEAP16[$pnt2$3 >> 1] = $23;
     $k$2 = 0;
     $wk$2 = $arraydecay;
     while (1) {
      if (($k$2 | 0) >= ($wk_max$1 | 0)) {
       $26 = $23;
       break L58;
      }
      if ((HEAP32[$wk$2 >> 2] | 0) == ($22 | 0)) HEAP32[$wk$2 >> 2] = $23;
      $k$2 = $k$2 + 1 | 0;
      $wk$2 = $wk$2 + 4 | 0;
     }
    } else {
     HEAP16[$pnt2$3 >> 1] = $22;
     if (($22 | 0) < ($23 | 0)) {
      $k$3 = 0;
      $wk$3 = $arraydecay;
      while (1) {
       if (($k$3 | 0) >= ($wk_max$1 | 0)) {
        $26 = $22;
        break L58;
       }
       if ((HEAP32[$wk$3 >> 2] | 0) == ($23 | 0)) HEAP32[$wk$3 >> 2] = $22;
       $k$3 = $k$3 + 1 | 0;
       $wk$3 = $wk$3 + 4 | 0;
      }
     } else $26 = $22;
    } while (0);
    $27 = ($26 << 16 >> 16) * 7 | 0;
    $arrayidx193 = $labelInfo + 1310736 + ($27 + -7 << 2) | 0;
    HEAP32[$arrayidx193 >> 2] = (HEAP32[$arrayidx193 >> 2] | 0) + 1;
    $arrayidx196 = $labelInfo + 1310736 + ($27 + -6 << 2) | 0;
    HEAP32[$arrayidx196 >> 2] = (HEAP32[$arrayidx196 >> 2] | 0) + $i$2;
    $arrayidx199 = $labelInfo + 1310736 + ($27 + -5 << 2) | 0;
    HEAP32[$arrayidx199 >> 2] = (HEAP32[$arrayidx199 >> 2] | 0) + $j$0;
    $wk_max$3 = $wk_max$1;
   } else {
    HEAP16[$pnt2$3 >> 1] = 0;
    HEAP8[$dpnt$1 >> 0] = 0;
    $wk_max$3 = $wk_max$1;
   } while (0);
   $dpnt$1 = $dpnt$1 + 1 | 0;
   $i$2 = $i$2 + 1 | 0;
   $pnt$1 = $pnt$1 + 8 | 0;
   $pnt2$3 = $pnt2$3 + 2 | 0;
   $wk_max$1 = $wk_max$3;
  }
  $dpnt$0 = $dpnt$1 + 2 | 0;
  $j$0 = $j$0 + 1 | 0;
  $pnt$0 = $pnt$1 + $mul321 + 16 | 0;
  $pnt2$2 = $pnt2$3 + 4 | 0;
  $wk_max$0 = $wk_max$1;
 }
 L77 : do if ((label | 0) == 50) {
  _arLog(3, 3256, $vararg_buffer);
  $retval$0 = -1;
 } else if ((label | 0) == 56) {
  $arrayidx331 = $labelInfo + 12 | 0;
  $i$3 = 1;
  $j$1 = 1;
  $wk$4 = $arraydecay;
  while (1) {
   if (($i$3 | 0) > ($wk_max$0 | 0)) break;
   $45 = HEAP32[$wk$4 >> 2] | 0;
   if (($45 | 0) == ($i$3 | 0)) {
    $cond = $j$1;
    $j$2 = $j$1 + 1 | 0;
   } else {
    $cond = HEAP32[$labelInfo + 1179664 + ($45 + -1 << 2) >> 2] | 0;
    $j$2 = $j$1;
   }
   HEAP32[$wk$4 >> 2] = $cond;
   $i$3 = $i$3 + 1 | 0;
   $j$1 = $j$2;
   $wk$4 = $wk$4 + 4 | 0;
  }
  $label_num329 = $labelInfo + 8 | 0;
  $sub352 = $j$1 + -1 | 0;
  HEAP32[$label_num329 >> 2] = $sub352;
  if (!$sub352) $retval$0 = 0; else {
   _memset($arrayidx331 | 0, 0, $sub352 << 2 | 0) | 0;
   _memset($labelInfo + 655376 | 0, 0, $sub352 << 4 | 0) | 0;
   $47 = $sub352;
   $i$4 = 0;
   while (1) {
    if (($i$4 | 0) >= ($47 | 0)) {
     $i$5 = 0;
     break;
    }
    $mul364 = $i$4 << 2;
    HEAP32[$labelInfo + 131084 + ($mul364 << 2) >> 2] = $div;
    HEAP32[$labelInfo + 131084 + (($mul364 | 1) << 2) >> 2] = 0;
    HEAP32[$labelInfo + 131084 + (($mul364 | 2) << 2) >> 2] = $div1;
    HEAP32[$labelInfo + 131084 + (($mul364 | 3) << 2) >> 2] = 0;
    $47 = HEAP32[$label_num329 >> 2] | 0;
    $i$4 = $i$4 + 1 | 0;
   }
   while (1) {
    if (($i$5 | 0) >= ($wk_max$0 | 0)) {
     $i$6 = 0;
     break;
    }
    $sub384 = (HEAP32[$labelInfo + 1179664 + ($i$5 << 2) >> 2] | 0) + -1 | 0;
    $mul385 = $i$5 * 7 | 0;
    $arrayidx388 = $labelInfo + 12 + ($sub384 << 2) | 0;
    HEAP32[$arrayidx388 >> 2] = (HEAP32[$arrayidx388 >> 2] | 0) + (HEAP32[$labelInfo + 1310736 + ($mul385 << 2) >> 2] | 0);
    $mul394 = $sub384 << 1;
    $arrayidx396 = $labelInfo + 655376 + ($mul394 << 3) | 0;
    HEAPF64[$arrayidx396 >> 3] = +HEAPF64[$arrayidx396 >> 3] + +(HEAP32[$labelInfo + 1310736 + ($mul385 + 1 << 2) >> 2] | 0);
    $arrayidx404 = $labelInfo + 655376 + (($mul394 | 1) << 3) | 0;
    HEAPF64[$arrayidx404 >> 3] = +HEAPF64[$arrayidx404 >> 3] + +(HEAP32[$labelInfo + 1310736 + ($mul385 + 2 << 2) >> 2] | 0);
    $mul406 = $sub384 << 2;
    $arrayidx408 = $labelInfo + 131084 + ($mul406 << 2) | 0;
    $56 = HEAP32[$labelInfo + 1310736 + ($mul385 + 3 << 2) >> 2] | 0;
    if ((HEAP32[$arrayidx408 >> 2] | 0) > ($56 | 0)) HEAP32[$arrayidx408 >> 2] = $56;
    $arrayidx424 = $labelInfo + 131084 + (($mul406 | 1) << 2) | 0;
    $58 = HEAP32[$labelInfo + 1310736 + ($mul385 + 4 << 2) >> 2] | 0;
    if ((HEAP32[$arrayidx424 >> 2] | 0) < ($58 | 0)) HEAP32[$arrayidx424 >> 2] = $58;
    $arrayidx440 = $labelInfo + 131084 + (($mul406 | 2) << 2) | 0;
    $60 = HEAP32[$labelInfo + 1310736 + ($mul385 + 5 << 2) >> 2] | 0;
    if ((HEAP32[$arrayidx440 >> 2] | 0) > ($60 | 0)) HEAP32[$arrayidx440 >> 2] = $60;
    $arrayidx456 = $labelInfo + 131084 + (($mul406 | 3) << 2) | 0;
    $62 = HEAP32[$labelInfo + 1310736 + ($mul385 + 6 << 2) >> 2] | 0;
    if ((HEAP32[$arrayidx456 >> 2] | 0) < ($62 | 0)) HEAP32[$arrayidx456 >> 2] = $62;
    $i$5 = $i$5 + 1 | 0;
   }
   while (1) {
    if (($i$6 | 0) >= (HEAP32[$label_num329 >> 2] | 0)) {
     $retval$0 = 0;
     break L77;
    }
    $arrayidx477 = $labelInfo + 12 + ($i$6 << 2) | 0;
    $mul479 = $i$6 << 1;
    $arrayidx481 = $labelInfo + 655376 + ($mul479 << 3) | 0;
    HEAPF64[$arrayidx481 >> 3] = +HEAPF64[$arrayidx481 >> 3] / +(HEAP32[$arrayidx477 >> 2] | 0);
    $arrayidx487 = $labelInfo + 655376 + (($mul479 | 1) << 3) | 0;
    HEAPF64[$arrayidx487 >> 3] = +HEAPF64[$arrayidx487 >> 3] / +(HEAP32[$arrayidx477 >> 2] | 0);
    $i$6 = $i$6 + 1 | 0;
   }
  }
 } while (0);
 STACKTOP = sp;
 return $retval$0 | 0;
}

function _arLabelingSubEBIA3C($image, $xsize, $ysize, $labelingThresh, $labelInfo) {
 $image = $image | 0;
 $xsize = $xsize | 0;
 $ysize = $ysize | 0;
 $labelingThresh = $labelingThresh | 0;
 $labelInfo = $labelInfo | 0;
 var $$sink = 0, $0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $16 = 0, $17 = 0, $21 = 0, $22 = 0, $23 = 0, $26 = 0, $27 = 0, $39 = 0, $40 = 0, $45 = 0, $47 = 0, $5 = 0, $56 = 0, $58 = 0, $6 = 0, $60 = 0, $62 = 0, $add = 0, $add$ptr137 = 0, $add275 = 0, $add280$sink = 0, $arraydecay = 0, $arrayidx126 = 0, $arrayidx129 = 0, $arrayidx132 = 0, $arrayidx193 = 0, $arrayidx196 = 0, $arrayidx199 = 0, $arrayidx207 = 0, $arrayidx210 = 0, $arrayidx213 = 0, $arrayidx216 = 0, $arrayidx238 = 0, $arrayidx241 = 0, $arrayidx244 = 0, $arrayidx247 = 0, $arrayidx267 = 0, $arrayidx270 = 0, $arrayidx273 = 0, $arrayidx331 = 0, $arrayidx388 = 0, $arrayidx396 = 0, $arrayidx404 = 0, $arrayidx408 = 0, $arrayidx424 = 0, $arrayidx440 = 0, $arrayidx456 = 0, $arrayidx47 = 0, $arrayidx477 = 0, $arrayidx481 = 0, $arrayidx487 = 0, $arrayidx56 = 0, $arrayidx59 = 0, $arrayidx62 = 0, $arrayidx79 = 0, $cmp73 = 0, $cond = 0, $div = 0, $div1 = 0, $dpnt$0 = 0, $dpnt$1 = 0, $i$0 = 0, $i$1 = 0, $i$2 = 0, $i$3 = 0, $i$4 = 0, $i$5 = 0, $i$6 = 0, $inc284 = 0, $j$0 = 0, $j$1 = 0, $j$2 = 0, $k$0 = 0, $k$1 = 0, $k$2 = 0, $k$3 = 0, $label_num329 = 0, $mul = 0, $mul205 = 0, $mul236 = 0, $mul294 = 0, $mul321 = 0, $mul364 = 0, $mul385 = 0, $mul394 = 0, $mul406 = 0, $mul479 = 0, $pnt$0 = 0, $pnt$1 = 0, $pnt1$0 = 0, $pnt1$1 = 0, $pnt2$0 = 0, $pnt2$1 = 0, $pnt2$2 = 0, $pnt2$3 = 0, $retval$0 = 0, $sub = 0, $sub352 = 0, $sub384 = 0, $sub46 = 0, $sub78 = 0, $sub82 = 0, $sub9 = 0, $vararg_buffer = 0, $wk$0 = 0, $wk$1 = 0, $wk$2 = 0, $wk$3 = 0, $wk$4 = 0, $wk_max$0 = 0, $wk_max$1 = 0, $wk_max$2 = 0, $wk_max$3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $vararg_buffer = sp;
 $div = ($xsize | 0) / 2 | 0;
 $div1 = ($ysize | 0) / 2 | 0;
 $0 = HEAP32[$labelInfo >> 2] | 0;
 $sub = $div1 + -1 | 0;
 $i$0 = 0;
 $pnt1$0 = $0;
 $pnt2$0 = $0 + ((Math_imul($sub, $div) | 0) << 1) | 0;
 while (1) {
  if (($i$0 | 0) >= ($div | 0)) break;
  HEAP16[$pnt2$0 >> 1] = 0;
  HEAP16[$pnt1$0 >> 1] = 0;
  $i$0 = $i$0 + 1 | 0;
  $pnt1$0 = $pnt1$0 + 2 | 0;
  $pnt2$0 = $pnt2$0 + 2 | 0;
 }
 $mul = $labelingThresh * 3 | 0;
 $sub9 = $div + -1 | 0;
 $i$1 = 0;
 $pnt1$1 = $0;
 $pnt2$1 = $0 + ($sub9 << 1) | 0;
 while (1) {
  if (($i$1 | 0) >= ($div1 | 0)) break;
  HEAP16[$pnt2$1 >> 1] = 0;
  HEAP16[$pnt1$1 >> 1] = 0;
  $i$1 = $i$1 + 1 | 0;
  $pnt1$1 = $pnt1$1 + ($div << 1) | 0;
  $pnt2$1 = $pnt2$1 + ($div << 1) | 0;
 }
 $arraydecay = $labelInfo + 1179664 | 0;
 $add = $div + 1 | 0;
 $sub46 = 0 - $div | 0;
 $mul321 = $xsize << 2;
 $dpnt$0 = (HEAP32[$labelInfo + 4 >> 2] | 0) + $add | 0;
 $j$0 = 1;
 $pnt$0 = $image + (($xsize << 3) + 8) | 0;
 $pnt2$2 = $0 + ($add << 1) | 0;
 $wk_max$0 = 0;
 L9 : while (1) {
  if (($j$0 | 0) < ($sub | 0)) {
   $dpnt$1 = $dpnt$0;
   $i$2 = 1;
   $pnt$1 = $pnt$0;
   $pnt2$3 = $pnt2$2;
   $wk_max$1 = $wk_max$0;
  } else {
   label = 56;
   break;
  }
  while (1) {
   if (($i$2 | 0) >= ($sub9 | 0)) break;
   do if (((HEAPU8[$pnt$1 + 2 >> 0] | 0) + (HEAPU8[$pnt$1 + 1 >> 0] | 0) + (HEAPU8[$pnt$1 + 3 >> 0] | 0) | 0) > ($mul | 0)) {
    HEAP16[$pnt2$3 >> 1] = 0;
    HEAP8[$dpnt$1 >> 0] = 0;
    $wk_max$3 = $wk_max$1;
   } else {
    HEAP8[$dpnt$1 >> 0] = -1;
    $arrayidx47 = $pnt2$3 + ($sub46 << 1) | 0;
    $5 = HEAP16[$arrayidx47 >> 1] | 0;
    if ($5 << 16 >> 16 > 0) {
     HEAP16[$pnt2$3 >> 1] = $5;
     $6 = ($5 << 16 >> 16) * 7 | 0;
     $arrayidx56 = $labelInfo + 1310736 + ($6 + -7 << 2) | 0;
     HEAP32[$arrayidx56 >> 2] = (HEAP32[$arrayidx56 >> 2] | 0) + 1;
     $arrayidx59 = $labelInfo + 1310736 + ($6 + -6 << 2) | 0;
     HEAP32[$arrayidx59 >> 2] = (HEAP32[$arrayidx59 >> 2] | 0) + $i$2;
     $arrayidx62 = $labelInfo + 1310736 + ($6 + -5 << 2) | 0;
     HEAP32[$arrayidx62 >> 2] = (HEAP32[$arrayidx62 >> 2] | 0) + $j$0;
     HEAP32[$labelInfo + 1310736 + ($6 + -1 << 2) >> 2] = $j$0;
     $wk_max$3 = $wk_max$1;
     break;
    }
    $10 = HEAP16[$arrayidx47 + 2 >> 1] | 0;
    $11 = HEAP16[$arrayidx47 + -2 >> 1] | 0;
    $cmp73 = $11 << 16 >> 16 > 0;
    $add$ptr137 = $pnt2$3 + -2 | 0;
    $sub82 = ($11 << 16 >> 16) + -1 | 0;
    if ($10 << 16 >> 16 <= 0) {
     if ($cmp73) {
      HEAP16[$pnt2$3 >> 1] = $11;
      $mul236 = $sub82 * 7 | 0;
      $arrayidx238 = $labelInfo + 1310736 + ($mul236 << 2) | 0;
      HEAP32[$arrayidx238 >> 2] = (HEAP32[$arrayidx238 >> 2] | 0) + 1;
      $arrayidx241 = $labelInfo + 1310736 + ($mul236 + 1 << 2) | 0;
      HEAP32[$arrayidx241 >> 2] = (HEAP32[$arrayidx241 >> 2] | 0) + $i$2;
      $arrayidx244 = $labelInfo + 1310736 + ($mul236 + 2 << 2) | 0;
      HEAP32[$arrayidx244 >> 2] = (HEAP32[$arrayidx244 >> 2] | 0) + $j$0;
      $arrayidx247 = $labelInfo + 1310736 + ($mul236 + 4 << 2) | 0;
      if ((HEAP32[$arrayidx247 >> 2] | 0) < ($i$2 | 0)) HEAP32[$arrayidx247 >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($mul236 + 6 << 2) >> 2] = $j$0;
      $wk_max$3 = $wk_max$1;
      break;
     }
     $39 = HEAP16[$add$ptr137 >> 1] | 0;
     if ($39 << 16 >> 16 > 0) {
      HEAP16[$pnt2$3 >> 1] = $39;
      $40 = ($39 << 16 >> 16) * 7 | 0;
      $arrayidx267 = $labelInfo + 1310736 + ($40 + -7 << 2) | 0;
      HEAP32[$arrayidx267 >> 2] = (HEAP32[$arrayidx267 >> 2] | 0) + 1;
      $arrayidx270 = $labelInfo + 1310736 + ($40 + -6 << 2) | 0;
      HEAP32[$arrayidx270 >> 2] = (HEAP32[$arrayidx270 >> 2] | 0) + $i$2;
      $arrayidx273 = $labelInfo + 1310736 + ($40 + -5 << 2) | 0;
      HEAP32[$arrayidx273 >> 2] = (HEAP32[$arrayidx273 >> 2] | 0) + $j$0;
      $add275 = $40 + -3 | 0;
      if ((HEAP32[$labelInfo + 1310736 + ($add275 << 2) >> 2] | 0) < ($i$2 | 0)) {
       $$sink = $i$2;
       $add280$sink = $add275;
       $wk_max$2 = $wk_max$1;
      } else {
       $wk_max$3 = $wk_max$1;
       break;
      }
     } else {
      $inc284 = $wk_max$1 + 1 | 0;
      if (($wk_max$1 | 0) > 32767) {
       label = 50;
       break L9;
      }
      HEAP16[$pnt2$3 >> 1] = $inc284;
      HEAP32[$labelInfo + 1179664 + ($wk_max$1 << 2) >> 2] = $inc284 << 16 >> 16;
      $mul294 = $wk_max$1 * 7 | 0;
      HEAP32[$labelInfo + 1310736 + ($mul294 << 2) >> 2] = 1;
      HEAP32[$labelInfo + 1310736 + ($mul294 + 1 << 2) >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($mul294 + 2 << 2) >> 2] = $j$0;
      HEAP32[$labelInfo + 1310736 + ($mul294 + 3 << 2) >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($mul294 + 4 << 2) >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($mul294 + 5 << 2) >> 2] = $j$0;
      $$sink = $j$0;
      $add280$sink = $mul294 + 6 | 0;
      $wk_max$2 = $inc284;
     }
     HEAP32[$labelInfo + 1310736 + ($add280$sink << 2) >> 2] = $$sink;
     $wk_max$3 = $wk_max$2;
     break;
    }
    $sub78 = ($10 << 16 >> 16) + -1 | 0;
    $arrayidx79 = $labelInfo + 1179664 + ($sub78 << 2) | 0;
    if ($cmp73) {
     $12 = HEAP32[$arrayidx79 >> 2] | 0;
     $13 = HEAP32[$labelInfo + 1179664 + ($sub82 << 2) >> 2] | 0;
     L36 : do if (($12 | 0) > ($13 | 0)) {
      HEAP16[$pnt2$3 >> 1] = $13;
      $k$0 = 0;
      $wk$0 = $arraydecay;
      while (1) {
       if (($k$0 | 0) >= ($wk_max$1 | 0)) {
        $16 = $13;
        break L36;
       }
       if ((HEAP32[$wk$0 >> 2] | 0) == ($12 | 0)) HEAP32[$wk$0 >> 2] = $13;
       $k$0 = $k$0 + 1 | 0;
       $wk$0 = $wk$0 + 4 | 0;
      }
     } else {
      HEAP16[$pnt2$3 >> 1] = $12;
      if (($12 | 0) < ($13 | 0)) {
       $k$1 = 0;
       $wk$1 = $arraydecay;
       while (1) {
        if (($k$1 | 0) >= ($wk_max$1 | 0)) {
         $16 = $12;
         break L36;
        }
        if ((HEAP32[$wk$1 >> 2] | 0) == ($13 | 0)) HEAP32[$wk$1 >> 2] = $12;
        $k$1 = $k$1 + 1 | 0;
        $wk$1 = $wk$1 + 4 | 0;
       }
      } else $16 = $12;
     } while (0);
     $17 = ($16 << 16 >> 16) * 7 | 0;
     $arrayidx126 = $labelInfo + 1310736 + ($17 + -7 << 2) | 0;
     HEAP32[$arrayidx126 >> 2] = (HEAP32[$arrayidx126 >> 2] | 0) + 1;
     $arrayidx129 = $labelInfo + 1310736 + ($17 + -6 << 2) | 0;
     HEAP32[$arrayidx129 >> 2] = (HEAP32[$arrayidx129 >> 2] | 0) + $i$2;
     $arrayidx132 = $labelInfo + 1310736 + ($17 + -5 << 2) | 0;
     HEAP32[$arrayidx132 >> 2] = (HEAP32[$arrayidx132 >> 2] | 0) + $j$0;
     HEAP32[$labelInfo + 1310736 + ($17 + -1 << 2) >> 2] = $j$0;
     $wk_max$3 = $wk_max$1;
     break;
    }
    $21 = HEAP16[$add$ptr137 >> 1] | 0;
    if ($21 << 16 >> 16 <= 0) {
     HEAP16[$pnt2$3 >> 1] = $10;
     $mul205 = $sub78 * 7 | 0;
     $arrayidx207 = $labelInfo + 1310736 + ($mul205 << 2) | 0;
     HEAP32[$arrayidx207 >> 2] = (HEAP32[$arrayidx207 >> 2] | 0) + 1;
     $arrayidx210 = $labelInfo + 1310736 + ($mul205 + 1 << 2) | 0;
     HEAP32[$arrayidx210 >> 2] = (HEAP32[$arrayidx210 >> 2] | 0) + $i$2;
     $arrayidx213 = $labelInfo + 1310736 + ($mul205 + 2 << 2) | 0;
     HEAP32[$arrayidx213 >> 2] = (HEAP32[$arrayidx213 >> 2] | 0) + $j$0;
     $arrayidx216 = $labelInfo + 1310736 + ($mul205 + 3 << 2) | 0;
     if ((HEAP32[$arrayidx216 >> 2] | 0) > ($i$2 | 0)) HEAP32[$arrayidx216 >> 2] = $i$2;
     HEAP32[$labelInfo + 1310736 + ($mul205 + 6 << 2) >> 2] = $j$0;
     $wk_max$3 = $wk_max$1;
     break;
    }
    $22 = HEAP32[$arrayidx79 >> 2] | 0;
    $23 = HEAP32[$labelInfo + 1179664 + (($21 << 16 >> 16) + -1 << 2) >> 2] | 0;
    L59 : do if (($22 | 0) > ($23 | 0)) {
     HEAP16[$pnt2$3 >> 1] = $23;
     $k$2 = 0;
     $wk$2 = $arraydecay;
     while (1) {
      if (($k$2 | 0) >= ($wk_max$1 | 0)) {
       $26 = $23;
       break L59;
      }
      if ((HEAP32[$wk$2 >> 2] | 0) == ($22 | 0)) HEAP32[$wk$2 >> 2] = $23;
      $k$2 = $k$2 + 1 | 0;
      $wk$2 = $wk$2 + 4 | 0;
     }
    } else {
     HEAP16[$pnt2$3 >> 1] = $22;
     if (($22 | 0) < ($23 | 0)) {
      $k$3 = 0;
      $wk$3 = $arraydecay;
      while (1) {
       if (($k$3 | 0) >= ($wk_max$1 | 0)) {
        $26 = $22;
        break L59;
       }
       if ((HEAP32[$wk$3 >> 2] | 0) == ($23 | 0)) HEAP32[$wk$3 >> 2] = $22;
       $k$3 = $k$3 + 1 | 0;
       $wk$3 = $wk$3 + 4 | 0;
      }
     } else $26 = $22;
    } while (0);
    $27 = ($26 << 16 >> 16) * 7 | 0;
    $arrayidx193 = $labelInfo + 1310736 + ($27 + -7 << 2) | 0;
    HEAP32[$arrayidx193 >> 2] = (HEAP32[$arrayidx193 >> 2] | 0) + 1;
    $arrayidx196 = $labelInfo + 1310736 + ($27 + -6 << 2) | 0;
    HEAP32[$arrayidx196 >> 2] = (HEAP32[$arrayidx196 >> 2] | 0) + $i$2;
    $arrayidx199 = $labelInfo + 1310736 + ($27 + -5 << 2) | 0;
    HEAP32[$arrayidx199 >> 2] = (HEAP32[$arrayidx199 >> 2] | 0) + $j$0;
    $wk_max$3 = $wk_max$1;
   } while (0);
   $dpnt$1 = $dpnt$1 + 1 | 0;
   $i$2 = $i$2 + 1 | 0;
   $pnt$1 = $pnt$1 + 8 | 0;
   $pnt2$3 = $pnt2$3 + 2 | 0;
   $wk_max$1 = $wk_max$3;
  }
  $dpnt$0 = $dpnt$1 + 2 | 0;
  $j$0 = $j$0 + 1 | 0;
  $pnt$0 = $pnt$1 + $mul321 + 16 | 0;
  $pnt2$2 = $pnt2$3 + 4 | 0;
  $wk_max$0 = $wk_max$1;
 }
 L77 : do if ((label | 0) == 50) {
  _arLog(3, 3256, $vararg_buffer);
  $retval$0 = -1;
 } else if ((label | 0) == 56) {
  $arrayidx331 = $labelInfo + 12 | 0;
  $i$3 = 1;
  $j$1 = 1;
  $wk$4 = $arraydecay;
  while (1) {
   if (($i$3 | 0) > ($wk_max$0 | 0)) break;
   $45 = HEAP32[$wk$4 >> 2] | 0;
   if (($45 | 0) == ($i$3 | 0)) {
    $cond = $j$1;
    $j$2 = $j$1 + 1 | 0;
   } else {
    $cond = HEAP32[$labelInfo + 1179664 + ($45 + -1 << 2) >> 2] | 0;
    $j$2 = $j$1;
   }
   HEAP32[$wk$4 >> 2] = $cond;
   $i$3 = $i$3 + 1 | 0;
   $j$1 = $j$2;
   $wk$4 = $wk$4 + 4 | 0;
  }
  $label_num329 = $labelInfo + 8 | 0;
  $sub352 = $j$1 + -1 | 0;
  HEAP32[$label_num329 >> 2] = $sub352;
  if (!$sub352) $retval$0 = 0; else {
   _memset($arrayidx331 | 0, 0, $sub352 << 2 | 0) | 0;
   _memset($labelInfo + 655376 | 0, 0, $sub352 << 4 | 0) | 0;
   $47 = $sub352;
   $i$4 = 0;
   while (1) {
    if (($i$4 | 0) >= ($47 | 0)) {
     $i$5 = 0;
     break;
    }
    $mul364 = $i$4 << 2;
    HEAP32[$labelInfo + 131084 + ($mul364 << 2) >> 2] = $div;
    HEAP32[$labelInfo + 131084 + (($mul364 | 1) << 2) >> 2] = 0;
    HEAP32[$labelInfo + 131084 + (($mul364 | 2) << 2) >> 2] = $div1;
    HEAP32[$labelInfo + 131084 + (($mul364 | 3) << 2) >> 2] = 0;
    $47 = HEAP32[$label_num329 >> 2] | 0;
    $i$4 = $i$4 + 1 | 0;
   }
   while (1) {
    if (($i$5 | 0) >= ($wk_max$0 | 0)) {
     $i$6 = 0;
     break;
    }
    $sub384 = (HEAP32[$labelInfo + 1179664 + ($i$5 << 2) >> 2] | 0) + -1 | 0;
    $mul385 = $i$5 * 7 | 0;
    $arrayidx388 = $labelInfo + 12 + ($sub384 << 2) | 0;
    HEAP32[$arrayidx388 >> 2] = (HEAP32[$arrayidx388 >> 2] | 0) + (HEAP32[$labelInfo + 1310736 + ($mul385 << 2) >> 2] | 0);
    $mul394 = $sub384 << 1;
    $arrayidx396 = $labelInfo + 655376 + ($mul394 << 3) | 0;
    HEAPF64[$arrayidx396 >> 3] = +HEAPF64[$arrayidx396 >> 3] + +(HEAP32[$labelInfo + 1310736 + ($mul385 + 1 << 2) >> 2] | 0);
    $arrayidx404 = $labelInfo + 655376 + (($mul394 | 1) << 3) | 0;
    HEAPF64[$arrayidx404 >> 3] = +HEAPF64[$arrayidx404 >> 3] + +(HEAP32[$labelInfo + 1310736 + ($mul385 + 2 << 2) >> 2] | 0);
    $mul406 = $sub384 << 2;
    $arrayidx408 = $labelInfo + 131084 + ($mul406 << 2) | 0;
    $56 = HEAP32[$labelInfo + 1310736 + ($mul385 + 3 << 2) >> 2] | 0;
    if ((HEAP32[$arrayidx408 >> 2] | 0) > ($56 | 0)) HEAP32[$arrayidx408 >> 2] = $56;
    $arrayidx424 = $labelInfo + 131084 + (($mul406 | 1) << 2) | 0;
    $58 = HEAP32[$labelInfo + 1310736 + ($mul385 + 4 << 2) >> 2] | 0;
    if ((HEAP32[$arrayidx424 >> 2] | 0) < ($58 | 0)) HEAP32[$arrayidx424 >> 2] = $58;
    $arrayidx440 = $labelInfo + 131084 + (($mul406 | 2) << 2) | 0;
    $60 = HEAP32[$labelInfo + 1310736 + ($mul385 + 5 << 2) >> 2] | 0;
    if ((HEAP32[$arrayidx440 >> 2] | 0) > ($60 | 0)) HEAP32[$arrayidx440 >> 2] = $60;
    $arrayidx456 = $labelInfo + 131084 + (($mul406 | 3) << 2) | 0;
    $62 = HEAP32[$labelInfo + 1310736 + ($mul385 + 6 << 2) >> 2] | 0;
    if ((HEAP32[$arrayidx456 >> 2] | 0) < ($62 | 0)) HEAP32[$arrayidx456 >> 2] = $62;
    $i$5 = $i$5 + 1 | 0;
   }
   while (1) {
    if (($i$6 | 0) >= (HEAP32[$label_num329 >> 2] | 0)) {
     $retval$0 = 0;
     break L77;
    }
    $arrayidx477 = $labelInfo + 12 + ($i$6 << 2) | 0;
    $mul479 = $i$6 << 1;
    $arrayidx481 = $labelInfo + 655376 + ($mul479 << 3) | 0;
    HEAPF64[$arrayidx481 >> 3] = +HEAPF64[$arrayidx481 >> 3] / +(HEAP32[$arrayidx477 >> 2] | 0);
    $arrayidx487 = $labelInfo + 655376 + (($mul479 | 1) << 3) | 0;
    HEAPF64[$arrayidx487 >> 3] = +HEAPF64[$arrayidx487 >> 3] / +(HEAP32[$arrayidx477 >> 2] | 0);
    $i$6 = $i$6 + 1 | 0;
   }
  }
 } while (0);
 STACKTOP = sp;
 return $retval$0 | 0;
}

function _arLabelingSubEWI3CA($image, $xsize, $ysize, $labelingThresh, $labelInfo) {
 $image = $image | 0;
 $xsize = $xsize | 0;
 $ysize = $ysize | 0;
 $labelingThresh = $labelingThresh | 0;
 $labelInfo = $labelInfo | 0;
 var $$sink = 0, $0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $16 = 0, $17 = 0, $21 = 0, $22 = 0, $23 = 0, $26 = 0, $27 = 0, $39 = 0, $40 = 0, $45 = 0, $47 = 0, $5 = 0, $56 = 0, $58 = 0, $6 = 0, $60 = 0, $62 = 0, $add = 0, $add$ptr137 = 0, $add275 = 0, $add280$sink = 0, $arraydecay = 0, $arrayidx126 = 0, $arrayidx129 = 0, $arrayidx132 = 0, $arrayidx193 = 0, $arrayidx196 = 0, $arrayidx199 = 0, $arrayidx207 = 0, $arrayidx210 = 0, $arrayidx213 = 0, $arrayidx216 = 0, $arrayidx238 = 0, $arrayidx241 = 0, $arrayidx244 = 0, $arrayidx247 = 0, $arrayidx267 = 0, $arrayidx270 = 0, $arrayidx273 = 0, $arrayidx331 = 0, $arrayidx388 = 0, $arrayidx396 = 0, $arrayidx404 = 0, $arrayidx408 = 0, $arrayidx424 = 0, $arrayidx440 = 0, $arrayidx456 = 0, $arrayidx47 = 0, $arrayidx477 = 0, $arrayidx481 = 0, $arrayidx487 = 0, $arrayidx56 = 0, $arrayidx59 = 0, $arrayidx62 = 0, $arrayidx79 = 0, $cmp73 = 0, $cond = 0, $div = 0, $div1 = 0, $dpnt$0 = 0, $dpnt$1 = 0, $i$0 = 0, $i$1 = 0, $i$2 = 0, $i$3 = 0, $i$4 = 0, $i$5 = 0, $i$6 = 0, $inc284 = 0, $j$0 = 0, $j$1 = 0, $j$2 = 0, $k$0 = 0, $k$1 = 0, $k$2 = 0, $k$3 = 0, $label_num329 = 0, $mul = 0, $mul205 = 0, $mul236 = 0, $mul294 = 0, $mul321 = 0, $mul364 = 0, $mul385 = 0, $mul394 = 0, $mul406 = 0, $mul479 = 0, $pnt$0 = 0, $pnt$1 = 0, $pnt1$0 = 0, $pnt1$1 = 0, $pnt2$0 = 0, $pnt2$1 = 0, $pnt2$2 = 0, $pnt2$3 = 0, $retval$0 = 0, $sub = 0, $sub352 = 0, $sub384 = 0, $sub46 = 0, $sub78 = 0, $sub82 = 0, $sub9 = 0, $vararg_buffer = 0, $wk$0 = 0, $wk$1 = 0, $wk$2 = 0, $wk$3 = 0, $wk$4 = 0, $wk_max$0 = 0, $wk_max$1 = 0, $wk_max$2 = 0, $wk_max$3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $vararg_buffer = sp;
 $div = ($xsize | 0) / 2 | 0;
 $div1 = ($ysize | 0) / 2 | 0;
 $0 = HEAP32[$labelInfo >> 2] | 0;
 $sub = $div1 + -1 | 0;
 $i$0 = 0;
 $pnt1$0 = $0;
 $pnt2$0 = $0 + ((Math_imul($sub, $div) | 0) << 1) | 0;
 while (1) {
  if (($i$0 | 0) >= ($div | 0)) break;
  HEAP16[$pnt2$0 >> 1] = 0;
  HEAP16[$pnt1$0 >> 1] = 0;
  $i$0 = $i$0 + 1 | 0;
  $pnt1$0 = $pnt1$0 + 2 | 0;
  $pnt2$0 = $pnt2$0 + 2 | 0;
 }
 $mul = $labelingThresh * 3 | 0;
 $sub9 = $div + -1 | 0;
 $i$1 = 0;
 $pnt1$1 = $0;
 $pnt2$1 = $0 + ($sub9 << 1) | 0;
 while (1) {
  if (($i$1 | 0) >= ($div1 | 0)) break;
  HEAP16[$pnt2$1 >> 1] = 0;
  HEAP16[$pnt1$1 >> 1] = 0;
  $i$1 = $i$1 + 1 | 0;
  $pnt1$1 = $pnt1$1 + ($div << 1) | 0;
  $pnt2$1 = $pnt2$1 + ($div << 1) | 0;
 }
 $arraydecay = $labelInfo + 1179664 | 0;
 $add = $div + 1 | 0;
 $sub46 = 0 - $div | 0;
 $mul321 = $xsize << 2;
 $dpnt$0 = (HEAP32[$labelInfo + 4 >> 2] | 0) + $add | 0;
 $j$0 = 1;
 $pnt$0 = $image + (($xsize << 3) + 8) | 0;
 $pnt2$2 = $0 + ($add << 1) | 0;
 $wk_max$0 = 0;
 L9 : while (1) {
  if (($j$0 | 0) < ($sub | 0)) {
   $dpnt$1 = $dpnt$0;
   $i$2 = 1;
   $pnt$1 = $pnt$0;
   $pnt2$3 = $pnt2$2;
   $wk_max$1 = $wk_max$0;
  } else {
   label = 56;
   break;
  }
  while (1) {
   if (($i$2 | 0) >= ($sub9 | 0)) break;
   do if (((HEAPU8[$pnt$1 + 1 >> 0] | 0) + (HEAPU8[$pnt$1 >> 0] | 0) + (HEAPU8[$pnt$1 + 2 >> 0] | 0) | 0) > ($mul | 0)) {
    HEAP8[$dpnt$1 >> 0] = -1;
    $arrayidx47 = $pnt2$3 + ($sub46 << 1) | 0;
    $5 = HEAP16[$arrayidx47 >> 1] | 0;
    if ($5 << 16 >> 16 > 0) {
     HEAP16[$pnt2$3 >> 1] = $5;
     $6 = ($5 << 16 >> 16) * 7 | 0;
     $arrayidx56 = $labelInfo + 1310736 + ($6 + -7 << 2) | 0;
     HEAP32[$arrayidx56 >> 2] = (HEAP32[$arrayidx56 >> 2] | 0) + 1;
     $arrayidx59 = $labelInfo + 1310736 + ($6 + -6 << 2) | 0;
     HEAP32[$arrayidx59 >> 2] = (HEAP32[$arrayidx59 >> 2] | 0) + $i$2;
     $arrayidx62 = $labelInfo + 1310736 + ($6 + -5 << 2) | 0;
     HEAP32[$arrayidx62 >> 2] = (HEAP32[$arrayidx62 >> 2] | 0) + $j$0;
     HEAP32[$labelInfo + 1310736 + ($6 + -1 << 2) >> 2] = $j$0;
     $wk_max$3 = $wk_max$1;
     break;
    }
    $10 = HEAP16[$arrayidx47 + 2 >> 1] | 0;
    $11 = HEAP16[$arrayidx47 + -2 >> 1] | 0;
    $cmp73 = $11 << 16 >> 16 > 0;
    $add$ptr137 = $pnt2$3 + -2 | 0;
    $sub82 = ($11 << 16 >> 16) + -1 | 0;
    if ($10 << 16 >> 16 <= 0) {
     if ($cmp73) {
      HEAP16[$pnt2$3 >> 1] = $11;
      $mul236 = $sub82 * 7 | 0;
      $arrayidx238 = $labelInfo + 1310736 + ($mul236 << 2) | 0;
      HEAP32[$arrayidx238 >> 2] = (HEAP32[$arrayidx238 >> 2] | 0) + 1;
      $arrayidx241 = $labelInfo + 1310736 + ($mul236 + 1 << 2) | 0;
      HEAP32[$arrayidx241 >> 2] = (HEAP32[$arrayidx241 >> 2] | 0) + $i$2;
      $arrayidx244 = $labelInfo + 1310736 + ($mul236 + 2 << 2) | 0;
      HEAP32[$arrayidx244 >> 2] = (HEAP32[$arrayidx244 >> 2] | 0) + $j$0;
      $arrayidx247 = $labelInfo + 1310736 + ($mul236 + 4 << 2) | 0;
      if ((HEAP32[$arrayidx247 >> 2] | 0) < ($i$2 | 0)) HEAP32[$arrayidx247 >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($mul236 + 6 << 2) >> 2] = $j$0;
      $wk_max$3 = $wk_max$1;
      break;
     }
     $39 = HEAP16[$add$ptr137 >> 1] | 0;
     if ($39 << 16 >> 16 > 0) {
      HEAP16[$pnt2$3 >> 1] = $39;
      $40 = ($39 << 16 >> 16) * 7 | 0;
      $arrayidx267 = $labelInfo + 1310736 + ($40 + -7 << 2) | 0;
      HEAP32[$arrayidx267 >> 2] = (HEAP32[$arrayidx267 >> 2] | 0) + 1;
      $arrayidx270 = $labelInfo + 1310736 + ($40 + -6 << 2) | 0;
      HEAP32[$arrayidx270 >> 2] = (HEAP32[$arrayidx270 >> 2] | 0) + $i$2;
      $arrayidx273 = $labelInfo + 1310736 + ($40 + -5 << 2) | 0;
      HEAP32[$arrayidx273 >> 2] = (HEAP32[$arrayidx273 >> 2] | 0) + $j$0;
      $add275 = $40 + -3 | 0;
      if ((HEAP32[$labelInfo + 1310736 + ($add275 << 2) >> 2] | 0) < ($i$2 | 0)) {
       $$sink = $i$2;
       $add280$sink = $add275;
       $wk_max$2 = $wk_max$1;
      } else {
       $wk_max$3 = $wk_max$1;
       break;
      }
     } else {
      $inc284 = $wk_max$1 + 1 | 0;
      if (($wk_max$1 | 0) > 32767) {
       label = 50;
       break L9;
      }
      HEAP16[$pnt2$3 >> 1] = $inc284;
      HEAP32[$labelInfo + 1179664 + ($wk_max$1 << 2) >> 2] = $inc284 << 16 >> 16;
      $mul294 = $wk_max$1 * 7 | 0;
      HEAP32[$labelInfo + 1310736 + ($mul294 << 2) >> 2] = 1;
      HEAP32[$labelInfo + 1310736 + ($mul294 + 1 << 2) >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($mul294 + 2 << 2) >> 2] = $j$0;
      HEAP32[$labelInfo + 1310736 + ($mul294 + 3 << 2) >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($mul294 + 4 << 2) >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($mul294 + 5 << 2) >> 2] = $j$0;
      $$sink = $j$0;
      $add280$sink = $mul294 + 6 | 0;
      $wk_max$2 = $inc284;
     }
     HEAP32[$labelInfo + 1310736 + ($add280$sink << 2) >> 2] = $$sink;
     $wk_max$3 = $wk_max$2;
     break;
    }
    $sub78 = ($10 << 16 >> 16) + -1 | 0;
    $arrayidx79 = $labelInfo + 1179664 + ($sub78 << 2) | 0;
    if ($cmp73) {
     $12 = HEAP32[$arrayidx79 >> 2] | 0;
     $13 = HEAP32[$labelInfo + 1179664 + ($sub82 << 2) >> 2] | 0;
     L35 : do if (($12 | 0) > ($13 | 0)) {
      HEAP16[$pnt2$3 >> 1] = $13;
      $k$0 = 0;
      $wk$0 = $arraydecay;
      while (1) {
       if (($k$0 | 0) >= ($wk_max$1 | 0)) {
        $16 = $13;
        break L35;
       }
       if ((HEAP32[$wk$0 >> 2] | 0) == ($12 | 0)) HEAP32[$wk$0 >> 2] = $13;
       $k$0 = $k$0 + 1 | 0;
       $wk$0 = $wk$0 + 4 | 0;
      }
     } else {
      HEAP16[$pnt2$3 >> 1] = $12;
      if (($12 | 0) < ($13 | 0)) {
       $k$1 = 0;
       $wk$1 = $arraydecay;
       while (1) {
        if (($k$1 | 0) >= ($wk_max$1 | 0)) {
         $16 = $12;
         break L35;
        }
        if ((HEAP32[$wk$1 >> 2] | 0) == ($13 | 0)) HEAP32[$wk$1 >> 2] = $12;
        $k$1 = $k$1 + 1 | 0;
        $wk$1 = $wk$1 + 4 | 0;
       }
      } else $16 = $12;
     } while (0);
     $17 = ($16 << 16 >> 16) * 7 | 0;
     $arrayidx126 = $labelInfo + 1310736 + ($17 + -7 << 2) | 0;
     HEAP32[$arrayidx126 >> 2] = (HEAP32[$arrayidx126 >> 2] | 0) + 1;
     $arrayidx129 = $labelInfo + 1310736 + ($17 + -6 << 2) | 0;
     HEAP32[$arrayidx129 >> 2] = (HEAP32[$arrayidx129 >> 2] | 0) + $i$2;
     $arrayidx132 = $labelInfo + 1310736 + ($17 + -5 << 2) | 0;
     HEAP32[$arrayidx132 >> 2] = (HEAP32[$arrayidx132 >> 2] | 0) + $j$0;
     HEAP32[$labelInfo + 1310736 + ($17 + -1 << 2) >> 2] = $j$0;
     $wk_max$3 = $wk_max$1;
     break;
    }
    $21 = HEAP16[$add$ptr137 >> 1] | 0;
    if ($21 << 16 >> 16 <= 0) {
     HEAP16[$pnt2$3 >> 1] = $10;
     $mul205 = $sub78 * 7 | 0;
     $arrayidx207 = $labelInfo + 1310736 + ($mul205 << 2) | 0;
     HEAP32[$arrayidx207 >> 2] = (HEAP32[$arrayidx207 >> 2] | 0) + 1;
     $arrayidx210 = $labelInfo + 1310736 + ($mul205 + 1 << 2) | 0;
     HEAP32[$arrayidx210 >> 2] = (HEAP32[$arrayidx210 >> 2] | 0) + $i$2;
     $arrayidx213 = $labelInfo + 1310736 + ($mul205 + 2 << 2) | 0;
     HEAP32[$arrayidx213 >> 2] = (HEAP32[$arrayidx213 >> 2] | 0) + $j$0;
     $arrayidx216 = $labelInfo + 1310736 + ($mul205 + 3 << 2) | 0;
     if ((HEAP32[$arrayidx216 >> 2] | 0) > ($i$2 | 0)) HEAP32[$arrayidx216 >> 2] = $i$2;
     HEAP32[$labelInfo + 1310736 + ($mul205 + 6 << 2) >> 2] = $j$0;
     $wk_max$3 = $wk_max$1;
     break;
    }
    $22 = HEAP32[$arrayidx79 >> 2] | 0;
    $23 = HEAP32[$labelInfo + 1179664 + (($21 << 16 >> 16) + -1 << 2) >> 2] | 0;
    L58 : do if (($22 | 0) > ($23 | 0)) {
     HEAP16[$pnt2$3 >> 1] = $23;
     $k$2 = 0;
     $wk$2 = $arraydecay;
     while (1) {
      if (($k$2 | 0) >= ($wk_max$1 | 0)) {
       $26 = $23;
       break L58;
      }
      if ((HEAP32[$wk$2 >> 2] | 0) == ($22 | 0)) HEAP32[$wk$2 >> 2] = $23;
      $k$2 = $k$2 + 1 | 0;
      $wk$2 = $wk$2 + 4 | 0;
     }
    } else {
     HEAP16[$pnt2$3 >> 1] = $22;
     if (($22 | 0) < ($23 | 0)) {
      $k$3 = 0;
      $wk$3 = $arraydecay;
      while (1) {
       if (($k$3 | 0) >= ($wk_max$1 | 0)) {
        $26 = $22;
        break L58;
       }
       if ((HEAP32[$wk$3 >> 2] | 0) == ($23 | 0)) HEAP32[$wk$3 >> 2] = $22;
       $k$3 = $k$3 + 1 | 0;
       $wk$3 = $wk$3 + 4 | 0;
      }
     } else $26 = $22;
    } while (0);
    $27 = ($26 << 16 >> 16) * 7 | 0;
    $arrayidx193 = $labelInfo + 1310736 + ($27 + -7 << 2) | 0;
    HEAP32[$arrayidx193 >> 2] = (HEAP32[$arrayidx193 >> 2] | 0) + 1;
    $arrayidx196 = $labelInfo + 1310736 + ($27 + -6 << 2) | 0;
    HEAP32[$arrayidx196 >> 2] = (HEAP32[$arrayidx196 >> 2] | 0) + $i$2;
    $arrayidx199 = $labelInfo + 1310736 + ($27 + -5 << 2) | 0;
    HEAP32[$arrayidx199 >> 2] = (HEAP32[$arrayidx199 >> 2] | 0) + $j$0;
    $wk_max$3 = $wk_max$1;
   } else {
    HEAP16[$pnt2$3 >> 1] = 0;
    HEAP8[$dpnt$1 >> 0] = 0;
    $wk_max$3 = $wk_max$1;
   } while (0);
   $dpnt$1 = $dpnt$1 + 1 | 0;
   $i$2 = $i$2 + 1 | 0;
   $pnt$1 = $pnt$1 + 8 | 0;
   $pnt2$3 = $pnt2$3 + 2 | 0;
   $wk_max$1 = $wk_max$3;
  }
  $dpnt$0 = $dpnt$1 + 2 | 0;
  $j$0 = $j$0 + 1 | 0;
  $pnt$0 = $pnt$1 + $mul321 + 16 | 0;
  $pnt2$2 = $pnt2$3 + 4 | 0;
  $wk_max$0 = $wk_max$1;
 }
 L77 : do if ((label | 0) == 50) {
  _arLog(3, 3256, $vararg_buffer);
  $retval$0 = -1;
 } else if ((label | 0) == 56) {
  $arrayidx331 = $labelInfo + 12 | 0;
  $i$3 = 1;
  $j$1 = 1;
  $wk$4 = $arraydecay;
  while (1) {
   if (($i$3 | 0) > ($wk_max$0 | 0)) break;
   $45 = HEAP32[$wk$4 >> 2] | 0;
   if (($45 | 0) == ($i$3 | 0)) {
    $cond = $j$1;
    $j$2 = $j$1 + 1 | 0;
   } else {
    $cond = HEAP32[$labelInfo + 1179664 + ($45 + -1 << 2) >> 2] | 0;
    $j$2 = $j$1;
   }
   HEAP32[$wk$4 >> 2] = $cond;
   $i$3 = $i$3 + 1 | 0;
   $j$1 = $j$2;
   $wk$4 = $wk$4 + 4 | 0;
  }
  $label_num329 = $labelInfo + 8 | 0;
  $sub352 = $j$1 + -1 | 0;
  HEAP32[$label_num329 >> 2] = $sub352;
  if (!$sub352) $retval$0 = 0; else {
   _memset($arrayidx331 | 0, 0, $sub352 << 2 | 0) | 0;
   _memset($labelInfo + 655376 | 0, 0, $sub352 << 4 | 0) | 0;
   $47 = $sub352;
   $i$4 = 0;
   while (1) {
    if (($i$4 | 0) >= ($47 | 0)) {
     $i$5 = 0;
     break;
    }
    $mul364 = $i$4 << 2;
    HEAP32[$labelInfo + 131084 + ($mul364 << 2) >> 2] = $div;
    HEAP32[$labelInfo + 131084 + (($mul364 | 1) << 2) >> 2] = 0;
    HEAP32[$labelInfo + 131084 + (($mul364 | 2) << 2) >> 2] = $div1;
    HEAP32[$labelInfo + 131084 + (($mul364 | 3) << 2) >> 2] = 0;
    $47 = HEAP32[$label_num329 >> 2] | 0;
    $i$4 = $i$4 + 1 | 0;
   }
   while (1) {
    if (($i$5 | 0) >= ($wk_max$0 | 0)) {
     $i$6 = 0;
     break;
    }
    $sub384 = (HEAP32[$labelInfo + 1179664 + ($i$5 << 2) >> 2] | 0) + -1 | 0;
    $mul385 = $i$5 * 7 | 0;
    $arrayidx388 = $labelInfo + 12 + ($sub384 << 2) | 0;
    HEAP32[$arrayidx388 >> 2] = (HEAP32[$arrayidx388 >> 2] | 0) + (HEAP32[$labelInfo + 1310736 + ($mul385 << 2) >> 2] | 0);
    $mul394 = $sub384 << 1;
    $arrayidx396 = $labelInfo + 655376 + ($mul394 << 3) | 0;
    HEAPF64[$arrayidx396 >> 3] = +HEAPF64[$arrayidx396 >> 3] + +(HEAP32[$labelInfo + 1310736 + ($mul385 + 1 << 2) >> 2] | 0);
    $arrayidx404 = $labelInfo + 655376 + (($mul394 | 1) << 3) | 0;
    HEAPF64[$arrayidx404 >> 3] = +HEAPF64[$arrayidx404 >> 3] + +(HEAP32[$labelInfo + 1310736 + ($mul385 + 2 << 2) >> 2] | 0);
    $mul406 = $sub384 << 2;
    $arrayidx408 = $labelInfo + 131084 + ($mul406 << 2) | 0;
    $56 = HEAP32[$labelInfo + 1310736 + ($mul385 + 3 << 2) >> 2] | 0;
    if ((HEAP32[$arrayidx408 >> 2] | 0) > ($56 | 0)) HEAP32[$arrayidx408 >> 2] = $56;
    $arrayidx424 = $labelInfo + 131084 + (($mul406 | 1) << 2) | 0;
    $58 = HEAP32[$labelInfo + 1310736 + ($mul385 + 4 << 2) >> 2] | 0;
    if ((HEAP32[$arrayidx424 >> 2] | 0) < ($58 | 0)) HEAP32[$arrayidx424 >> 2] = $58;
    $arrayidx440 = $labelInfo + 131084 + (($mul406 | 2) << 2) | 0;
    $60 = HEAP32[$labelInfo + 1310736 + ($mul385 + 5 << 2) >> 2] | 0;
    if ((HEAP32[$arrayidx440 >> 2] | 0) > ($60 | 0)) HEAP32[$arrayidx440 >> 2] = $60;
    $arrayidx456 = $labelInfo + 131084 + (($mul406 | 3) << 2) | 0;
    $62 = HEAP32[$labelInfo + 1310736 + ($mul385 + 6 << 2) >> 2] | 0;
    if ((HEAP32[$arrayidx456 >> 2] | 0) < ($62 | 0)) HEAP32[$arrayidx456 >> 2] = $62;
    $i$5 = $i$5 + 1 | 0;
   }
   while (1) {
    if (($i$6 | 0) >= (HEAP32[$label_num329 >> 2] | 0)) {
     $retval$0 = 0;
     break L77;
    }
    $arrayidx477 = $labelInfo + 12 + ($i$6 << 2) | 0;
    $mul479 = $i$6 << 1;
    $arrayidx481 = $labelInfo + 655376 + ($mul479 << 3) | 0;
    HEAPF64[$arrayidx481 >> 3] = +HEAPF64[$arrayidx481 >> 3] / +(HEAP32[$arrayidx477 >> 2] | 0);
    $arrayidx487 = $labelInfo + 655376 + (($mul479 | 1) << 3) | 0;
    HEAPF64[$arrayidx487 >> 3] = +HEAPF64[$arrayidx487 >> 3] / +(HEAP32[$arrayidx477 >> 2] | 0);
    $i$6 = $i$6 + 1 | 0;
   }
  }
 } while (0);
 STACKTOP = sp;
 return $retval$0 | 0;
}

function _arLabelingSubEBI3CA($image, $xsize, $ysize, $labelingThresh, $labelInfo) {
 $image = $image | 0;
 $xsize = $xsize | 0;
 $ysize = $ysize | 0;
 $labelingThresh = $labelingThresh | 0;
 $labelInfo = $labelInfo | 0;
 var $$sink = 0, $0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $16 = 0, $17 = 0, $21 = 0, $22 = 0, $23 = 0, $26 = 0, $27 = 0, $39 = 0, $40 = 0, $45 = 0, $47 = 0, $5 = 0, $56 = 0, $58 = 0, $6 = 0, $60 = 0, $62 = 0, $add = 0, $add$ptr137 = 0, $add275 = 0, $add280$sink = 0, $arraydecay = 0, $arrayidx126 = 0, $arrayidx129 = 0, $arrayidx132 = 0, $arrayidx193 = 0, $arrayidx196 = 0, $arrayidx199 = 0, $arrayidx207 = 0, $arrayidx210 = 0, $arrayidx213 = 0, $arrayidx216 = 0, $arrayidx238 = 0, $arrayidx241 = 0, $arrayidx244 = 0, $arrayidx247 = 0, $arrayidx267 = 0, $arrayidx270 = 0, $arrayidx273 = 0, $arrayidx331 = 0, $arrayidx388 = 0, $arrayidx396 = 0, $arrayidx404 = 0, $arrayidx408 = 0, $arrayidx424 = 0, $arrayidx440 = 0, $arrayidx456 = 0, $arrayidx47 = 0, $arrayidx477 = 0, $arrayidx481 = 0, $arrayidx487 = 0, $arrayidx56 = 0, $arrayidx59 = 0, $arrayidx62 = 0, $arrayidx79 = 0, $cmp73 = 0, $cond = 0, $div = 0, $div1 = 0, $dpnt$0 = 0, $dpnt$1 = 0, $i$0 = 0, $i$1 = 0, $i$2 = 0, $i$3 = 0, $i$4 = 0, $i$5 = 0, $i$6 = 0, $inc284 = 0, $j$0 = 0, $j$1 = 0, $j$2 = 0, $k$0 = 0, $k$1 = 0, $k$2 = 0, $k$3 = 0, $label_num329 = 0, $mul = 0, $mul205 = 0, $mul236 = 0, $mul294 = 0, $mul321 = 0, $mul364 = 0, $mul385 = 0, $mul394 = 0, $mul406 = 0, $mul479 = 0, $pnt$0 = 0, $pnt$1 = 0, $pnt1$0 = 0, $pnt1$1 = 0, $pnt2$0 = 0, $pnt2$1 = 0, $pnt2$2 = 0, $pnt2$3 = 0, $retval$0 = 0, $sub = 0, $sub352 = 0, $sub384 = 0, $sub46 = 0, $sub78 = 0, $sub82 = 0, $sub9 = 0, $vararg_buffer = 0, $wk$0 = 0, $wk$1 = 0, $wk$2 = 0, $wk$3 = 0, $wk$4 = 0, $wk_max$0 = 0, $wk_max$1 = 0, $wk_max$2 = 0, $wk_max$3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $vararg_buffer = sp;
 $div = ($xsize | 0) / 2 | 0;
 $div1 = ($ysize | 0) / 2 | 0;
 $0 = HEAP32[$labelInfo >> 2] | 0;
 $sub = $div1 + -1 | 0;
 $i$0 = 0;
 $pnt1$0 = $0;
 $pnt2$0 = $0 + ((Math_imul($sub, $div) | 0) << 1) | 0;
 while (1) {
  if (($i$0 | 0) >= ($div | 0)) break;
  HEAP16[$pnt2$0 >> 1] = 0;
  HEAP16[$pnt1$0 >> 1] = 0;
  $i$0 = $i$0 + 1 | 0;
  $pnt1$0 = $pnt1$0 + 2 | 0;
  $pnt2$0 = $pnt2$0 + 2 | 0;
 }
 $mul = $labelingThresh * 3 | 0;
 $sub9 = $div + -1 | 0;
 $i$1 = 0;
 $pnt1$1 = $0;
 $pnt2$1 = $0 + ($sub9 << 1) | 0;
 while (1) {
  if (($i$1 | 0) >= ($div1 | 0)) break;
  HEAP16[$pnt2$1 >> 1] = 0;
  HEAP16[$pnt1$1 >> 1] = 0;
  $i$1 = $i$1 + 1 | 0;
  $pnt1$1 = $pnt1$1 + ($div << 1) | 0;
  $pnt2$1 = $pnt2$1 + ($div << 1) | 0;
 }
 $arraydecay = $labelInfo + 1179664 | 0;
 $add = $div + 1 | 0;
 $sub46 = 0 - $div | 0;
 $mul321 = $xsize << 2;
 $dpnt$0 = (HEAP32[$labelInfo + 4 >> 2] | 0) + $add | 0;
 $j$0 = 1;
 $pnt$0 = $image + (($xsize << 3) + 8) | 0;
 $pnt2$2 = $0 + ($add << 1) | 0;
 $wk_max$0 = 0;
 L9 : while (1) {
  if (($j$0 | 0) < ($sub | 0)) {
   $dpnt$1 = $dpnt$0;
   $i$2 = 1;
   $pnt$1 = $pnt$0;
   $pnt2$3 = $pnt2$2;
   $wk_max$1 = $wk_max$0;
  } else {
   label = 56;
   break;
  }
  while (1) {
   if (($i$2 | 0) >= ($sub9 | 0)) break;
   do if (((HEAPU8[$pnt$1 + 1 >> 0] | 0) + (HEAPU8[$pnt$1 >> 0] | 0) + (HEAPU8[$pnt$1 + 2 >> 0] | 0) | 0) > ($mul | 0)) {
    HEAP16[$pnt2$3 >> 1] = 0;
    HEAP8[$dpnt$1 >> 0] = 0;
    $wk_max$3 = $wk_max$1;
   } else {
    HEAP8[$dpnt$1 >> 0] = -1;
    $arrayidx47 = $pnt2$3 + ($sub46 << 1) | 0;
    $5 = HEAP16[$arrayidx47 >> 1] | 0;
    if ($5 << 16 >> 16 > 0) {
     HEAP16[$pnt2$3 >> 1] = $5;
     $6 = ($5 << 16 >> 16) * 7 | 0;
     $arrayidx56 = $labelInfo + 1310736 + ($6 + -7 << 2) | 0;
     HEAP32[$arrayidx56 >> 2] = (HEAP32[$arrayidx56 >> 2] | 0) + 1;
     $arrayidx59 = $labelInfo + 1310736 + ($6 + -6 << 2) | 0;
     HEAP32[$arrayidx59 >> 2] = (HEAP32[$arrayidx59 >> 2] | 0) + $i$2;
     $arrayidx62 = $labelInfo + 1310736 + ($6 + -5 << 2) | 0;
     HEAP32[$arrayidx62 >> 2] = (HEAP32[$arrayidx62 >> 2] | 0) + $j$0;
     HEAP32[$labelInfo + 1310736 + ($6 + -1 << 2) >> 2] = $j$0;
     $wk_max$3 = $wk_max$1;
     break;
    }
    $10 = HEAP16[$arrayidx47 + 2 >> 1] | 0;
    $11 = HEAP16[$arrayidx47 + -2 >> 1] | 0;
    $cmp73 = $11 << 16 >> 16 > 0;
    $add$ptr137 = $pnt2$3 + -2 | 0;
    $sub82 = ($11 << 16 >> 16) + -1 | 0;
    if ($10 << 16 >> 16 <= 0) {
     if ($cmp73) {
      HEAP16[$pnt2$3 >> 1] = $11;
      $mul236 = $sub82 * 7 | 0;
      $arrayidx238 = $labelInfo + 1310736 + ($mul236 << 2) | 0;
      HEAP32[$arrayidx238 >> 2] = (HEAP32[$arrayidx238 >> 2] | 0) + 1;
      $arrayidx241 = $labelInfo + 1310736 + ($mul236 + 1 << 2) | 0;
      HEAP32[$arrayidx241 >> 2] = (HEAP32[$arrayidx241 >> 2] | 0) + $i$2;
      $arrayidx244 = $labelInfo + 1310736 + ($mul236 + 2 << 2) | 0;
      HEAP32[$arrayidx244 >> 2] = (HEAP32[$arrayidx244 >> 2] | 0) + $j$0;
      $arrayidx247 = $labelInfo + 1310736 + ($mul236 + 4 << 2) | 0;
      if ((HEAP32[$arrayidx247 >> 2] | 0) < ($i$2 | 0)) HEAP32[$arrayidx247 >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($mul236 + 6 << 2) >> 2] = $j$0;
      $wk_max$3 = $wk_max$1;
      break;
     }
     $39 = HEAP16[$add$ptr137 >> 1] | 0;
     if ($39 << 16 >> 16 > 0) {
      HEAP16[$pnt2$3 >> 1] = $39;
      $40 = ($39 << 16 >> 16) * 7 | 0;
      $arrayidx267 = $labelInfo + 1310736 + ($40 + -7 << 2) | 0;
      HEAP32[$arrayidx267 >> 2] = (HEAP32[$arrayidx267 >> 2] | 0) + 1;
      $arrayidx270 = $labelInfo + 1310736 + ($40 + -6 << 2) | 0;
      HEAP32[$arrayidx270 >> 2] = (HEAP32[$arrayidx270 >> 2] | 0) + $i$2;
      $arrayidx273 = $labelInfo + 1310736 + ($40 + -5 << 2) | 0;
      HEAP32[$arrayidx273 >> 2] = (HEAP32[$arrayidx273 >> 2] | 0) + $j$0;
      $add275 = $40 + -3 | 0;
      if ((HEAP32[$labelInfo + 1310736 + ($add275 << 2) >> 2] | 0) < ($i$2 | 0)) {
       $$sink = $i$2;
       $add280$sink = $add275;
       $wk_max$2 = $wk_max$1;
      } else {
       $wk_max$3 = $wk_max$1;
       break;
      }
     } else {
      $inc284 = $wk_max$1 + 1 | 0;
      if (($wk_max$1 | 0) > 32767) {
       label = 50;
       break L9;
      }
      HEAP16[$pnt2$3 >> 1] = $inc284;
      HEAP32[$labelInfo + 1179664 + ($wk_max$1 << 2) >> 2] = $inc284 << 16 >> 16;
      $mul294 = $wk_max$1 * 7 | 0;
      HEAP32[$labelInfo + 1310736 + ($mul294 << 2) >> 2] = 1;
      HEAP32[$labelInfo + 1310736 + ($mul294 + 1 << 2) >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($mul294 + 2 << 2) >> 2] = $j$0;
      HEAP32[$labelInfo + 1310736 + ($mul294 + 3 << 2) >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($mul294 + 4 << 2) >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($mul294 + 5 << 2) >> 2] = $j$0;
      $$sink = $j$0;
      $add280$sink = $mul294 + 6 | 0;
      $wk_max$2 = $inc284;
     }
     HEAP32[$labelInfo + 1310736 + ($add280$sink << 2) >> 2] = $$sink;
     $wk_max$3 = $wk_max$2;
     break;
    }
    $sub78 = ($10 << 16 >> 16) + -1 | 0;
    $arrayidx79 = $labelInfo + 1179664 + ($sub78 << 2) | 0;
    if ($cmp73) {
     $12 = HEAP32[$arrayidx79 >> 2] | 0;
     $13 = HEAP32[$labelInfo + 1179664 + ($sub82 << 2) >> 2] | 0;
     L36 : do if (($12 | 0) > ($13 | 0)) {
      HEAP16[$pnt2$3 >> 1] = $13;
      $k$0 = 0;
      $wk$0 = $arraydecay;
      while (1) {
       if (($k$0 | 0) >= ($wk_max$1 | 0)) {
        $16 = $13;
        break L36;
       }
       if ((HEAP32[$wk$0 >> 2] | 0) == ($12 | 0)) HEAP32[$wk$0 >> 2] = $13;
       $k$0 = $k$0 + 1 | 0;
       $wk$0 = $wk$0 + 4 | 0;
      }
     } else {
      HEAP16[$pnt2$3 >> 1] = $12;
      if (($12 | 0) < ($13 | 0)) {
       $k$1 = 0;
       $wk$1 = $arraydecay;
       while (1) {
        if (($k$1 | 0) >= ($wk_max$1 | 0)) {
         $16 = $12;
         break L36;
        }
        if ((HEAP32[$wk$1 >> 2] | 0) == ($13 | 0)) HEAP32[$wk$1 >> 2] = $12;
        $k$1 = $k$1 + 1 | 0;
        $wk$1 = $wk$1 + 4 | 0;
       }
      } else $16 = $12;
     } while (0);
     $17 = ($16 << 16 >> 16) * 7 | 0;
     $arrayidx126 = $labelInfo + 1310736 + ($17 + -7 << 2) | 0;
     HEAP32[$arrayidx126 >> 2] = (HEAP32[$arrayidx126 >> 2] | 0) + 1;
     $arrayidx129 = $labelInfo + 1310736 + ($17 + -6 << 2) | 0;
     HEAP32[$arrayidx129 >> 2] = (HEAP32[$arrayidx129 >> 2] | 0) + $i$2;
     $arrayidx132 = $labelInfo + 1310736 + ($17 + -5 << 2) | 0;
     HEAP32[$arrayidx132 >> 2] = (HEAP32[$arrayidx132 >> 2] | 0) + $j$0;
     HEAP32[$labelInfo + 1310736 + ($17 + -1 << 2) >> 2] = $j$0;
     $wk_max$3 = $wk_max$1;
     break;
    }
    $21 = HEAP16[$add$ptr137 >> 1] | 0;
    if ($21 << 16 >> 16 <= 0) {
     HEAP16[$pnt2$3 >> 1] = $10;
     $mul205 = $sub78 * 7 | 0;
     $arrayidx207 = $labelInfo + 1310736 + ($mul205 << 2) | 0;
     HEAP32[$arrayidx207 >> 2] = (HEAP32[$arrayidx207 >> 2] | 0) + 1;
     $arrayidx210 = $labelInfo + 1310736 + ($mul205 + 1 << 2) | 0;
     HEAP32[$arrayidx210 >> 2] = (HEAP32[$arrayidx210 >> 2] | 0) + $i$2;
     $arrayidx213 = $labelInfo + 1310736 + ($mul205 + 2 << 2) | 0;
     HEAP32[$arrayidx213 >> 2] = (HEAP32[$arrayidx213 >> 2] | 0) + $j$0;
     $arrayidx216 = $labelInfo + 1310736 + ($mul205 + 3 << 2) | 0;
     if ((HEAP32[$arrayidx216 >> 2] | 0) > ($i$2 | 0)) HEAP32[$arrayidx216 >> 2] = $i$2;
     HEAP32[$labelInfo + 1310736 + ($mul205 + 6 << 2) >> 2] = $j$0;
     $wk_max$3 = $wk_max$1;
     break;
    }
    $22 = HEAP32[$arrayidx79 >> 2] | 0;
    $23 = HEAP32[$labelInfo + 1179664 + (($21 << 16 >> 16) + -1 << 2) >> 2] | 0;
    L59 : do if (($22 | 0) > ($23 | 0)) {
     HEAP16[$pnt2$3 >> 1] = $23;
     $k$2 = 0;
     $wk$2 = $arraydecay;
     while (1) {
      if (($k$2 | 0) >= ($wk_max$1 | 0)) {
       $26 = $23;
       break L59;
      }
      if ((HEAP32[$wk$2 >> 2] | 0) == ($22 | 0)) HEAP32[$wk$2 >> 2] = $23;
      $k$2 = $k$2 + 1 | 0;
      $wk$2 = $wk$2 + 4 | 0;
     }
    } else {
     HEAP16[$pnt2$3 >> 1] = $22;
     if (($22 | 0) < ($23 | 0)) {
      $k$3 = 0;
      $wk$3 = $arraydecay;
      while (1) {
       if (($k$3 | 0) >= ($wk_max$1 | 0)) {
        $26 = $22;
        break L59;
       }
       if ((HEAP32[$wk$3 >> 2] | 0) == ($23 | 0)) HEAP32[$wk$3 >> 2] = $22;
       $k$3 = $k$3 + 1 | 0;
       $wk$3 = $wk$3 + 4 | 0;
      }
     } else $26 = $22;
    } while (0);
    $27 = ($26 << 16 >> 16) * 7 | 0;
    $arrayidx193 = $labelInfo + 1310736 + ($27 + -7 << 2) | 0;
    HEAP32[$arrayidx193 >> 2] = (HEAP32[$arrayidx193 >> 2] | 0) + 1;
    $arrayidx196 = $labelInfo + 1310736 + ($27 + -6 << 2) | 0;
    HEAP32[$arrayidx196 >> 2] = (HEAP32[$arrayidx196 >> 2] | 0) + $i$2;
    $arrayidx199 = $labelInfo + 1310736 + ($27 + -5 << 2) | 0;
    HEAP32[$arrayidx199 >> 2] = (HEAP32[$arrayidx199 >> 2] | 0) + $j$0;
    $wk_max$3 = $wk_max$1;
   } while (0);
   $dpnt$1 = $dpnt$1 + 1 | 0;
   $i$2 = $i$2 + 1 | 0;
   $pnt$1 = $pnt$1 + 8 | 0;
   $pnt2$3 = $pnt2$3 + 2 | 0;
   $wk_max$1 = $wk_max$3;
  }
  $dpnt$0 = $dpnt$1 + 2 | 0;
  $j$0 = $j$0 + 1 | 0;
  $pnt$0 = $pnt$1 + $mul321 + 16 | 0;
  $pnt2$2 = $pnt2$3 + 4 | 0;
  $wk_max$0 = $wk_max$1;
 }
 L77 : do if ((label | 0) == 50) {
  _arLog(3, 3256, $vararg_buffer);
  $retval$0 = -1;
 } else if ((label | 0) == 56) {
  $arrayidx331 = $labelInfo + 12 | 0;
  $i$3 = 1;
  $j$1 = 1;
  $wk$4 = $arraydecay;
  while (1) {
   if (($i$3 | 0) > ($wk_max$0 | 0)) break;
   $45 = HEAP32[$wk$4 >> 2] | 0;
   if (($45 | 0) == ($i$3 | 0)) {
    $cond = $j$1;
    $j$2 = $j$1 + 1 | 0;
   } else {
    $cond = HEAP32[$labelInfo + 1179664 + ($45 + -1 << 2) >> 2] | 0;
    $j$2 = $j$1;
   }
   HEAP32[$wk$4 >> 2] = $cond;
   $i$3 = $i$3 + 1 | 0;
   $j$1 = $j$2;
   $wk$4 = $wk$4 + 4 | 0;
  }
  $label_num329 = $labelInfo + 8 | 0;
  $sub352 = $j$1 + -1 | 0;
  HEAP32[$label_num329 >> 2] = $sub352;
  if (!$sub352) $retval$0 = 0; else {
   _memset($arrayidx331 | 0, 0, $sub352 << 2 | 0) | 0;
   _memset($labelInfo + 655376 | 0, 0, $sub352 << 4 | 0) | 0;
   $47 = $sub352;
   $i$4 = 0;
   while (1) {
    if (($i$4 | 0) >= ($47 | 0)) {
     $i$5 = 0;
     break;
    }
    $mul364 = $i$4 << 2;
    HEAP32[$labelInfo + 131084 + ($mul364 << 2) >> 2] = $div;
    HEAP32[$labelInfo + 131084 + (($mul364 | 1) << 2) >> 2] = 0;
    HEAP32[$labelInfo + 131084 + (($mul364 | 2) << 2) >> 2] = $div1;
    HEAP32[$labelInfo + 131084 + (($mul364 | 3) << 2) >> 2] = 0;
    $47 = HEAP32[$label_num329 >> 2] | 0;
    $i$4 = $i$4 + 1 | 0;
   }
   while (1) {
    if (($i$5 | 0) >= ($wk_max$0 | 0)) {
     $i$6 = 0;
     break;
    }
    $sub384 = (HEAP32[$labelInfo + 1179664 + ($i$5 << 2) >> 2] | 0) + -1 | 0;
    $mul385 = $i$5 * 7 | 0;
    $arrayidx388 = $labelInfo + 12 + ($sub384 << 2) | 0;
    HEAP32[$arrayidx388 >> 2] = (HEAP32[$arrayidx388 >> 2] | 0) + (HEAP32[$labelInfo + 1310736 + ($mul385 << 2) >> 2] | 0);
    $mul394 = $sub384 << 1;
    $arrayidx396 = $labelInfo + 655376 + ($mul394 << 3) | 0;
    HEAPF64[$arrayidx396 >> 3] = +HEAPF64[$arrayidx396 >> 3] + +(HEAP32[$labelInfo + 1310736 + ($mul385 + 1 << 2) >> 2] | 0);
    $arrayidx404 = $labelInfo + 655376 + (($mul394 | 1) << 3) | 0;
    HEAPF64[$arrayidx404 >> 3] = +HEAPF64[$arrayidx404 >> 3] + +(HEAP32[$labelInfo + 1310736 + ($mul385 + 2 << 2) >> 2] | 0);
    $mul406 = $sub384 << 2;
    $arrayidx408 = $labelInfo + 131084 + ($mul406 << 2) | 0;
    $56 = HEAP32[$labelInfo + 1310736 + ($mul385 + 3 << 2) >> 2] | 0;
    if ((HEAP32[$arrayidx408 >> 2] | 0) > ($56 | 0)) HEAP32[$arrayidx408 >> 2] = $56;
    $arrayidx424 = $labelInfo + 131084 + (($mul406 | 1) << 2) | 0;
    $58 = HEAP32[$labelInfo + 1310736 + ($mul385 + 4 << 2) >> 2] | 0;
    if ((HEAP32[$arrayidx424 >> 2] | 0) < ($58 | 0)) HEAP32[$arrayidx424 >> 2] = $58;
    $arrayidx440 = $labelInfo + 131084 + (($mul406 | 2) << 2) | 0;
    $60 = HEAP32[$labelInfo + 1310736 + ($mul385 + 5 << 2) >> 2] | 0;
    if ((HEAP32[$arrayidx440 >> 2] | 0) > ($60 | 0)) HEAP32[$arrayidx440 >> 2] = $60;
    $arrayidx456 = $labelInfo + 131084 + (($mul406 | 3) << 2) | 0;
    $62 = HEAP32[$labelInfo + 1310736 + ($mul385 + 6 << 2) >> 2] | 0;
    if ((HEAP32[$arrayidx456 >> 2] | 0) < ($62 | 0)) HEAP32[$arrayidx456 >> 2] = $62;
    $i$5 = $i$5 + 1 | 0;
   }
   while (1) {
    if (($i$6 | 0) >= (HEAP32[$label_num329 >> 2] | 0)) {
     $retval$0 = 0;
     break L77;
    }
    $arrayidx477 = $labelInfo + 12 + ($i$6 << 2) | 0;
    $mul479 = $i$6 << 1;
    $arrayidx481 = $labelInfo + 655376 + ($mul479 << 3) | 0;
    HEAPF64[$arrayidx481 >> 3] = +HEAPF64[$arrayidx481 >> 3] / +(HEAP32[$arrayidx477 >> 2] | 0);
    $arrayidx487 = $labelInfo + 655376 + (($mul479 | 1) << 3) | 0;
    HEAPF64[$arrayidx487 >> 3] = +HEAPF64[$arrayidx487 >> 3] / +(HEAP32[$arrayidx477 >> 2] | 0);
    $i$6 = $i$6 + 1 | 0;
   }
  }
 } while (0);
 STACKTOP = sp;
 return $retval$0 | 0;
}

function _arLabelingSubEWR3CA5551($image, $xsize, $ysize, $labelingThresh, $labelInfo) {
 $image = $image | 0;
 $xsize = $xsize | 0;
 $ysize = $ysize | 0;
 $labelingThresh = $labelingThresh | 0;
 $labelInfo = $labelInfo | 0;
 var $$sink = 0, $0 = 0, $10 = 0, $11 = 0, $12 = 0, $15 = 0, $16 = 0, $20 = 0, $21 = 0, $22 = 0, $25 = 0, $26 = 0, $38 = 0, $39 = 0, $4 = 0, $44 = 0, $46 = 0, $5 = 0, $55 = 0, $57 = 0, $59 = 0, $61 = 0, $9 = 0, $add = 0, $add$ptr143 = 0, $add281 = 0, $add286$sink = 0, $arraydecay = 0, $arrayidx132 = 0, $arrayidx135 = 0, $arrayidx138 = 0, $arrayidx199 = 0, $arrayidx202 = 0, $arrayidx205 = 0, $arrayidx213 = 0, $arrayidx216 = 0, $arrayidx219 = 0, $arrayidx222 = 0, $arrayidx244 = 0, $arrayidx247 = 0, $arrayidx250 = 0, $arrayidx253 = 0, $arrayidx273 = 0, $arrayidx276 = 0, $arrayidx279 = 0, $arrayidx335 = 0, $arrayidx392 = 0, $arrayidx400 = 0, $arrayidx408 = 0, $arrayidx412 = 0, $arrayidx428 = 0, $arrayidx444 = 0, $arrayidx460 = 0, $arrayidx481 = 0, $arrayidx485 = 0, $arrayidx490 = 0, $arrayidx53 = 0, $arrayidx62 = 0, $arrayidx65 = 0, $arrayidx68 = 0, $arrayidx85 = 0, $cmp79 = 0, $cond = 0, $conv = 0, $conv41 = 0, $dpnt$0 = 0, $dpnt$1 = 0, $i$0 = 0, $i$1 = 0, $i$2 = 0, $i$3 = 0, $i$4 = 0, $i$5 = 0, $i$6 = 0, $inc290 = 0, $j$0 = 0, $j$1 = 0, $j$2 = 0, $k$0 = 0, $k$1 = 0, $k$2 = 0, $k$3 = 0, $label_num333 = 0, $mul = 0, $mul211 = 0, $mul242 = 0, $mul300 = 0, $mul368 = 0, $mul389 = 0, $mul398 = 0, $mul410 = 0, $mul483 = 0, $pnt$0 = 0, $pnt$1 = 0, $pnt1$0 = 0, $pnt1$1 = 0, $pnt2$0 = 0, $pnt2$1 = 0, $pnt2$2 = 0, $pnt2$3 = 0, $retval$0 = 0, $sub = 0, $sub356 = 0, $sub388 = 0, $sub52 = 0, $sub8 = 0, $sub84 = 0, $sub88 = 0, $vararg_buffer = 0, $wk$0 = 0, $wk$1 = 0, $wk$2 = 0, $wk$3 = 0, $wk$4 = 0, $wk_max$0 = 0, $wk_max$1 = 0, $wk_max$2 = 0, $wk_max$3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $vararg_buffer = sp;
 $0 = HEAP32[$labelInfo >> 2] | 0;
 $sub = $ysize + -1 | 0;
 $i$0 = 0;
 $pnt1$0 = $0;
 $pnt2$0 = $0 + ((Math_imul($sub, $xsize) | 0) << 1) | 0;
 while (1) {
  if (($i$0 | 0) >= ($xsize | 0)) break;
  HEAP16[$pnt2$0 >> 1] = 0;
  HEAP16[$pnt1$0 >> 1] = 0;
  $i$0 = $i$0 + 1 | 0;
  $pnt1$0 = $pnt1$0 + 2 | 0;
  $pnt2$0 = $pnt2$0 + 2 | 0;
 }
 $mul = $labelingThresh * 3 | 0;
 $sub8 = $xsize + -1 | 0;
 $i$1 = 0;
 $pnt1$1 = $0;
 $pnt2$1 = $0 + ($sub8 << 1) | 0;
 while (1) {
  if (($i$1 | 0) >= ($ysize | 0)) break;
  HEAP16[$pnt2$1 >> 1] = 0;
  HEAP16[$pnt1$1 >> 1] = 0;
  $i$1 = $i$1 + 1 | 0;
  $pnt1$1 = $pnt1$1 + ($xsize << 1) | 0;
  $pnt2$1 = $pnt2$1 + ($xsize << 1) | 0;
 }
 $arraydecay = $labelInfo + 1179664 | 0;
 $add = $xsize + 1 | 0;
 $sub52 = 0 - $xsize | 0;
 $dpnt$0 = (HEAP32[$labelInfo + 4 >> 2] | 0) + $add | 0;
 $j$0 = 1;
 $pnt$0 = $image + ($add << 1) | 0;
 $pnt2$2 = $0 + ($add << 1) | 0;
 $wk_max$0 = 0;
 L9 : while (1) {
  if (($j$0 | 0) < ($sub | 0)) {
   $dpnt$1 = $dpnt$0;
   $i$2 = 1;
   $pnt$1 = $pnt$0;
   $pnt2$3 = $pnt2$2;
   $wk_max$1 = $wk_max$0;
  } else {
   label = 56;
   break;
  }
  while (1) {
   if (($i$2 | 0) >= ($sub8 | 0)) break;
   $conv = HEAPU8[$pnt$1 >> 0] | 0;
   $conv41 = HEAPU8[$pnt$1 + 1 >> 0] | 0;
   do if ((($conv & 248) + 12 + ($conv << 5 & 224) + ($conv41 >>> 3 & 24) + ($conv41 << 2 & 248) | 0) > ($mul | 0)) {
    HEAP8[$dpnt$1 >> 0] = -1;
    $arrayidx53 = $pnt2$3 + ($sub52 << 1) | 0;
    $4 = HEAP16[$arrayidx53 >> 1] | 0;
    if ($4 << 16 >> 16 > 0) {
     HEAP16[$pnt2$3 >> 1] = $4;
     $5 = ($4 << 16 >> 16) * 7 | 0;
     $arrayidx62 = $labelInfo + 1310736 + ($5 + -7 << 2) | 0;
     HEAP32[$arrayidx62 >> 2] = (HEAP32[$arrayidx62 >> 2] | 0) + 1;
     $arrayidx65 = $labelInfo + 1310736 + ($5 + -6 << 2) | 0;
     HEAP32[$arrayidx65 >> 2] = (HEAP32[$arrayidx65 >> 2] | 0) + $i$2;
     $arrayidx68 = $labelInfo + 1310736 + ($5 + -5 << 2) | 0;
     HEAP32[$arrayidx68 >> 2] = (HEAP32[$arrayidx68 >> 2] | 0) + $j$0;
     HEAP32[$labelInfo + 1310736 + ($5 + -1 << 2) >> 2] = $j$0;
     $wk_max$3 = $wk_max$1;
     break;
    }
    $9 = HEAP16[$arrayidx53 + 2 >> 1] | 0;
    $10 = HEAP16[$arrayidx53 + -2 >> 1] | 0;
    $cmp79 = $10 << 16 >> 16 > 0;
    $add$ptr143 = $pnt2$3 + -2 | 0;
    $sub88 = ($10 << 16 >> 16) + -1 | 0;
    if ($9 << 16 >> 16 <= 0) {
     if ($cmp79) {
      HEAP16[$pnt2$3 >> 1] = $10;
      $mul242 = $sub88 * 7 | 0;
      $arrayidx244 = $labelInfo + 1310736 + ($mul242 << 2) | 0;
      HEAP32[$arrayidx244 >> 2] = (HEAP32[$arrayidx244 >> 2] | 0) + 1;
      $arrayidx247 = $labelInfo + 1310736 + ($mul242 + 1 << 2) | 0;
      HEAP32[$arrayidx247 >> 2] = (HEAP32[$arrayidx247 >> 2] | 0) + $i$2;
      $arrayidx250 = $labelInfo + 1310736 + ($mul242 + 2 << 2) | 0;
      HEAP32[$arrayidx250 >> 2] = (HEAP32[$arrayidx250 >> 2] | 0) + $j$0;
      $arrayidx253 = $labelInfo + 1310736 + ($mul242 + 4 << 2) | 0;
      if ((HEAP32[$arrayidx253 >> 2] | 0) < ($i$2 | 0)) HEAP32[$arrayidx253 >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($mul242 + 6 << 2) >> 2] = $j$0;
      $wk_max$3 = $wk_max$1;
      break;
     }
     $38 = HEAP16[$add$ptr143 >> 1] | 0;
     if ($38 << 16 >> 16 > 0) {
      HEAP16[$pnt2$3 >> 1] = $38;
      $39 = ($38 << 16 >> 16) * 7 | 0;
      $arrayidx273 = $labelInfo + 1310736 + ($39 + -7 << 2) | 0;
      HEAP32[$arrayidx273 >> 2] = (HEAP32[$arrayidx273 >> 2] | 0) + 1;
      $arrayidx276 = $labelInfo + 1310736 + ($39 + -6 << 2) | 0;
      HEAP32[$arrayidx276 >> 2] = (HEAP32[$arrayidx276 >> 2] | 0) + $i$2;
      $arrayidx279 = $labelInfo + 1310736 + ($39 + -5 << 2) | 0;
      HEAP32[$arrayidx279 >> 2] = (HEAP32[$arrayidx279 >> 2] | 0) + $j$0;
      $add281 = $39 + -3 | 0;
      if ((HEAP32[$labelInfo + 1310736 + ($add281 << 2) >> 2] | 0) < ($i$2 | 0)) {
       $$sink = $i$2;
       $add286$sink = $add281;
       $wk_max$2 = $wk_max$1;
      } else {
       $wk_max$3 = $wk_max$1;
       break;
      }
     } else {
      $inc290 = $wk_max$1 + 1 | 0;
      if (($wk_max$1 | 0) > 32767) {
       label = 50;
       break L9;
      }
      HEAP16[$pnt2$3 >> 1] = $inc290;
      HEAP32[$labelInfo + 1179664 + ($wk_max$1 << 2) >> 2] = $inc290 << 16 >> 16;
      $mul300 = $wk_max$1 * 7 | 0;
      HEAP32[$labelInfo + 1310736 + ($mul300 << 2) >> 2] = 1;
      HEAP32[$labelInfo + 1310736 + ($mul300 + 1 << 2) >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($mul300 + 2 << 2) >> 2] = $j$0;
      HEAP32[$labelInfo + 1310736 + ($mul300 + 3 << 2) >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($mul300 + 4 << 2) >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($mul300 + 5 << 2) >> 2] = $j$0;
      $$sink = $j$0;
      $add286$sink = $mul300 + 6 | 0;
      $wk_max$2 = $inc290;
     }
     HEAP32[$labelInfo + 1310736 + ($add286$sink << 2) >> 2] = $$sink;
     $wk_max$3 = $wk_max$2;
     break;
    }
    $sub84 = ($9 << 16 >> 16) + -1 | 0;
    $arrayidx85 = $labelInfo + 1179664 + ($sub84 << 2) | 0;
    if ($cmp79) {
     $11 = HEAP32[$arrayidx85 >> 2] | 0;
     $12 = HEAP32[$labelInfo + 1179664 + ($sub88 << 2) >> 2] | 0;
     L35 : do if (($11 | 0) > ($12 | 0)) {
      HEAP16[$pnt2$3 >> 1] = $12;
      $k$0 = 0;
      $wk$0 = $arraydecay;
      while (1) {
       if (($k$0 | 0) >= ($wk_max$1 | 0)) {
        $15 = $12;
        break L35;
       }
       if ((HEAP32[$wk$0 >> 2] | 0) == ($11 | 0)) HEAP32[$wk$0 >> 2] = $12;
       $k$0 = $k$0 + 1 | 0;
       $wk$0 = $wk$0 + 4 | 0;
      }
     } else {
      HEAP16[$pnt2$3 >> 1] = $11;
      if (($11 | 0) < ($12 | 0)) {
       $k$1 = 0;
       $wk$1 = $arraydecay;
       while (1) {
        if (($k$1 | 0) >= ($wk_max$1 | 0)) {
         $15 = $11;
         break L35;
        }
        if ((HEAP32[$wk$1 >> 2] | 0) == ($12 | 0)) HEAP32[$wk$1 >> 2] = $11;
        $k$1 = $k$1 + 1 | 0;
        $wk$1 = $wk$1 + 4 | 0;
       }
      } else $15 = $11;
     } while (0);
     $16 = ($15 << 16 >> 16) * 7 | 0;
     $arrayidx132 = $labelInfo + 1310736 + ($16 + -7 << 2) | 0;
     HEAP32[$arrayidx132 >> 2] = (HEAP32[$arrayidx132 >> 2] | 0) + 1;
     $arrayidx135 = $labelInfo + 1310736 + ($16 + -6 << 2) | 0;
     HEAP32[$arrayidx135 >> 2] = (HEAP32[$arrayidx135 >> 2] | 0) + $i$2;
     $arrayidx138 = $labelInfo + 1310736 + ($16 + -5 << 2) | 0;
     HEAP32[$arrayidx138 >> 2] = (HEAP32[$arrayidx138 >> 2] | 0) + $j$0;
     HEAP32[$labelInfo + 1310736 + ($16 + -1 << 2) >> 2] = $j$0;
     $wk_max$3 = $wk_max$1;
     break;
    }
    $20 = HEAP16[$add$ptr143 >> 1] | 0;
    if ($20 << 16 >> 16 <= 0) {
     HEAP16[$pnt2$3 >> 1] = $9;
     $mul211 = $sub84 * 7 | 0;
     $arrayidx213 = $labelInfo + 1310736 + ($mul211 << 2) | 0;
     HEAP32[$arrayidx213 >> 2] = (HEAP32[$arrayidx213 >> 2] | 0) + 1;
     $arrayidx216 = $labelInfo + 1310736 + ($mul211 + 1 << 2) | 0;
     HEAP32[$arrayidx216 >> 2] = (HEAP32[$arrayidx216 >> 2] | 0) + $i$2;
     $arrayidx219 = $labelInfo + 1310736 + ($mul211 + 2 << 2) | 0;
     HEAP32[$arrayidx219 >> 2] = (HEAP32[$arrayidx219 >> 2] | 0) + $j$0;
     $arrayidx222 = $labelInfo + 1310736 + ($mul211 + 3 << 2) | 0;
     if ((HEAP32[$arrayidx222 >> 2] | 0) > ($i$2 | 0)) HEAP32[$arrayidx222 >> 2] = $i$2;
     HEAP32[$labelInfo + 1310736 + ($mul211 + 6 << 2) >> 2] = $j$0;
     $wk_max$3 = $wk_max$1;
     break;
    }
    $21 = HEAP32[$arrayidx85 >> 2] | 0;
    $22 = HEAP32[$labelInfo + 1179664 + (($20 << 16 >> 16) + -1 << 2) >> 2] | 0;
    L58 : do if (($21 | 0) > ($22 | 0)) {
     HEAP16[$pnt2$3 >> 1] = $22;
     $k$2 = 0;
     $wk$2 = $arraydecay;
     while (1) {
      if (($k$2 | 0) >= ($wk_max$1 | 0)) {
       $25 = $22;
       break L58;
      }
      if ((HEAP32[$wk$2 >> 2] | 0) == ($21 | 0)) HEAP32[$wk$2 >> 2] = $22;
      $k$2 = $k$2 + 1 | 0;
      $wk$2 = $wk$2 + 4 | 0;
     }
    } else {
     HEAP16[$pnt2$3 >> 1] = $21;
     if (($21 | 0) < ($22 | 0)) {
      $k$3 = 0;
      $wk$3 = $arraydecay;
      while (1) {
       if (($k$3 | 0) >= ($wk_max$1 | 0)) {
        $25 = $21;
        break L58;
       }
       if ((HEAP32[$wk$3 >> 2] | 0) == ($22 | 0)) HEAP32[$wk$3 >> 2] = $21;
       $k$3 = $k$3 + 1 | 0;
       $wk$3 = $wk$3 + 4 | 0;
      }
     } else $25 = $21;
    } while (0);
    $26 = ($25 << 16 >> 16) * 7 | 0;
    $arrayidx199 = $labelInfo + 1310736 + ($26 + -7 << 2) | 0;
    HEAP32[$arrayidx199 >> 2] = (HEAP32[$arrayidx199 >> 2] | 0) + 1;
    $arrayidx202 = $labelInfo + 1310736 + ($26 + -6 << 2) | 0;
    HEAP32[$arrayidx202 >> 2] = (HEAP32[$arrayidx202 >> 2] | 0) + $i$2;
    $arrayidx205 = $labelInfo + 1310736 + ($26 + -5 << 2) | 0;
    HEAP32[$arrayidx205 >> 2] = (HEAP32[$arrayidx205 >> 2] | 0) + $j$0;
    $wk_max$3 = $wk_max$1;
   } else {
    HEAP16[$pnt2$3 >> 1] = 0;
    HEAP8[$dpnt$1 >> 0] = 0;
    $wk_max$3 = $wk_max$1;
   } while (0);
   $dpnt$1 = $dpnt$1 + 1 | 0;
   $i$2 = $i$2 + 1 | 0;
   $pnt$1 = $pnt$1 + 2 | 0;
   $pnt2$3 = $pnt2$3 + 2 | 0;
   $wk_max$1 = $wk_max$3;
  }
  $dpnt$0 = $dpnt$1 + 2 | 0;
  $j$0 = $j$0 + 1 | 0;
  $pnt$0 = $pnt$1 + 4 | 0;
  $pnt2$2 = $pnt2$3 + 4 | 0;
  $wk_max$0 = $wk_max$1;
 }
 L77 : do if ((label | 0) == 50) {
  _arLog(3, 3256, $vararg_buffer);
  $retval$0 = -1;
 } else if ((label | 0) == 56) {
  $arrayidx335 = $labelInfo + 12 | 0;
  $i$3 = 1;
  $j$1 = 1;
  $wk$4 = $arraydecay;
  while (1) {
   if (($i$3 | 0) > ($wk_max$0 | 0)) break;
   $44 = HEAP32[$wk$4 >> 2] | 0;
   if (($44 | 0) == ($i$3 | 0)) {
    $cond = $j$1;
    $j$2 = $j$1 + 1 | 0;
   } else {
    $cond = HEAP32[$labelInfo + 1179664 + ($44 + -1 << 2) >> 2] | 0;
    $j$2 = $j$1;
   }
   HEAP32[$wk$4 >> 2] = $cond;
   $i$3 = $i$3 + 1 | 0;
   $j$1 = $j$2;
   $wk$4 = $wk$4 + 4 | 0;
  }
  $label_num333 = $labelInfo + 8 | 0;
  $sub356 = $j$1 + -1 | 0;
  HEAP32[$label_num333 >> 2] = $sub356;
  if (!$sub356) $retval$0 = 0; else {
   _memset($arrayidx335 | 0, 0, $sub356 << 2 | 0) | 0;
   _memset($labelInfo + 655376 | 0, 0, $sub356 << 4 | 0) | 0;
   $46 = $sub356;
   $i$4 = 0;
   while (1) {
    if (($i$4 | 0) >= ($46 | 0)) {
     $i$5 = 0;
     break;
    }
    $mul368 = $i$4 << 2;
    HEAP32[$labelInfo + 131084 + ($mul368 << 2) >> 2] = $xsize;
    HEAP32[$labelInfo + 131084 + (($mul368 | 1) << 2) >> 2] = 0;
    HEAP32[$labelInfo + 131084 + (($mul368 | 2) << 2) >> 2] = $ysize;
    HEAP32[$labelInfo + 131084 + (($mul368 | 3) << 2) >> 2] = 0;
    $46 = HEAP32[$label_num333 >> 2] | 0;
    $i$4 = $i$4 + 1 | 0;
   }
   while (1) {
    if (($i$5 | 0) >= ($wk_max$0 | 0)) {
     $i$6 = 0;
     break;
    }
    $sub388 = (HEAP32[$labelInfo + 1179664 + ($i$5 << 2) >> 2] | 0) + -1 | 0;
    $mul389 = $i$5 * 7 | 0;
    $arrayidx392 = $labelInfo + 12 + ($sub388 << 2) | 0;
    HEAP32[$arrayidx392 >> 2] = (HEAP32[$arrayidx392 >> 2] | 0) + (HEAP32[$labelInfo + 1310736 + ($mul389 << 2) >> 2] | 0);
    $mul398 = $sub388 << 1;
    $arrayidx400 = $labelInfo + 655376 + ($mul398 << 3) | 0;
    HEAPF64[$arrayidx400 >> 3] = +HEAPF64[$arrayidx400 >> 3] + +(HEAP32[$labelInfo + 1310736 + ($mul389 + 1 << 2) >> 2] | 0);
    $arrayidx408 = $labelInfo + 655376 + (($mul398 | 1) << 3) | 0;
    HEAPF64[$arrayidx408 >> 3] = +HEAPF64[$arrayidx408 >> 3] + +(HEAP32[$labelInfo + 1310736 + ($mul389 + 2 << 2) >> 2] | 0);
    $mul410 = $sub388 << 2;
    $arrayidx412 = $labelInfo + 131084 + ($mul410 << 2) | 0;
    $55 = HEAP32[$labelInfo + 1310736 + ($mul389 + 3 << 2) >> 2] | 0;
    if ((HEAP32[$arrayidx412 >> 2] | 0) > ($55 | 0)) HEAP32[$arrayidx412 >> 2] = $55;
    $arrayidx428 = $labelInfo + 131084 + (($mul410 | 1) << 2) | 0;
    $57 = HEAP32[$labelInfo + 1310736 + ($mul389 + 4 << 2) >> 2] | 0;
    if ((HEAP32[$arrayidx428 >> 2] | 0) < ($57 | 0)) HEAP32[$arrayidx428 >> 2] = $57;
    $arrayidx444 = $labelInfo + 131084 + (($mul410 | 2) << 2) | 0;
    $59 = HEAP32[$labelInfo + 1310736 + ($mul389 + 5 << 2) >> 2] | 0;
    if ((HEAP32[$arrayidx444 >> 2] | 0) > ($59 | 0)) HEAP32[$arrayidx444 >> 2] = $59;
    $arrayidx460 = $labelInfo + 131084 + (($mul410 | 3) << 2) | 0;
    $61 = HEAP32[$labelInfo + 1310736 + ($mul389 + 6 << 2) >> 2] | 0;
    if ((HEAP32[$arrayidx460 >> 2] | 0) < ($61 | 0)) HEAP32[$arrayidx460 >> 2] = $61;
    $i$5 = $i$5 + 1 | 0;
   }
   while (1) {
    if (($i$6 | 0) >= (HEAP32[$label_num333 >> 2] | 0)) {
     $retval$0 = 0;
     break L77;
    }
    $arrayidx481 = $labelInfo + 12 + ($i$6 << 2) | 0;
    $mul483 = $i$6 << 1;
    $arrayidx485 = $labelInfo + 655376 + ($mul483 << 3) | 0;
    HEAPF64[$arrayidx485 >> 3] = +HEAPF64[$arrayidx485 >> 3] / +(HEAP32[$arrayidx481 >> 2] | 0);
    $arrayidx490 = $labelInfo + 655376 + (($mul483 | 1) << 3) | 0;
    HEAPF64[$arrayidx490 >> 3] = +HEAPF64[$arrayidx490 >> 3] / +(HEAP32[$arrayidx481 >> 2] | 0);
    $i$6 = $i$6 + 1 | 0;
   }
  }
 } while (0);
 STACKTOP = sp;
 return $retval$0 | 0;
}

function _arLabelingSubEBR3CA5551($image, $xsize, $ysize, $labelingThresh, $labelInfo) {
 $image = $image | 0;
 $xsize = $xsize | 0;
 $ysize = $ysize | 0;
 $labelingThresh = $labelingThresh | 0;
 $labelInfo = $labelInfo | 0;
 var $$sink = 0, $0 = 0, $10 = 0, $11 = 0, $12 = 0, $15 = 0, $16 = 0, $20 = 0, $21 = 0, $22 = 0, $25 = 0, $26 = 0, $38 = 0, $39 = 0, $4 = 0, $44 = 0, $46 = 0, $5 = 0, $55 = 0, $57 = 0, $59 = 0, $61 = 0, $9 = 0, $add = 0, $add$ptr143 = 0, $add281 = 0, $add286$sink = 0, $arraydecay = 0, $arrayidx132 = 0, $arrayidx135 = 0, $arrayidx138 = 0, $arrayidx199 = 0, $arrayidx202 = 0, $arrayidx205 = 0, $arrayidx213 = 0, $arrayidx216 = 0, $arrayidx219 = 0, $arrayidx222 = 0, $arrayidx244 = 0, $arrayidx247 = 0, $arrayidx250 = 0, $arrayidx253 = 0, $arrayidx273 = 0, $arrayidx276 = 0, $arrayidx279 = 0, $arrayidx335 = 0, $arrayidx392 = 0, $arrayidx400 = 0, $arrayidx408 = 0, $arrayidx412 = 0, $arrayidx428 = 0, $arrayidx444 = 0, $arrayidx460 = 0, $arrayidx481 = 0, $arrayidx485 = 0, $arrayidx490 = 0, $arrayidx53 = 0, $arrayidx62 = 0, $arrayidx65 = 0, $arrayidx68 = 0, $arrayidx85 = 0, $cmp79 = 0, $cond = 0, $conv = 0, $conv41 = 0, $dpnt$0 = 0, $dpnt$1 = 0, $i$0 = 0, $i$1 = 0, $i$2 = 0, $i$3 = 0, $i$4 = 0, $i$5 = 0, $i$6 = 0, $inc290 = 0, $j$0 = 0, $j$1 = 0, $j$2 = 0, $k$0 = 0, $k$1 = 0, $k$2 = 0, $k$3 = 0, $label_num333 = 0, $mul = 0, $mul211 = 0, $mul242 = 0, $mul300 = 0, $mul368 = 0, $mul389 = 0, $mul398 = 0, $mul410 = 0, $mul483 = 0, $pnt$0 = 0, $pnt$1 = 0, $pnt1$0 = 0, $pnt1$1 = 0, $pnt2$0 = 0, $pnt2$1 = 0, $pnt2$2 = 0, $pnt2$3 = 0, $retval$0 = 0, $sub = 0, $sub356 = 0, $sub388 = 0, $sub52 = 0, $sub8 = 0, $sub84 = 0, $sub88 = 0, $vararg_buffer = 0, $wk$0 = 0, $wk$1 = 0, $wk$2 = 0, $wk$3 = 0, $wk$4 = 0, $wk_max$0 = 0, $wk_max$1 = 0, $wk_max$2 = 0, $wk_max$3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $vararg_buffer = sp;
 $0 = HEAP32[$labelInfo >> 2] | 0;
 $sub = $ysize + -1 | 0;
 $i$0 = 0;
 $pnt1$0 = $0;
 $pnt2$0 = $0 + ((Math_imul($sub, $xsize) | 0) << 1) | 0;
 while (1) {
  if (($i$0 | 0) >= ($xsize | 0)) break;
  HEAP16[$pnt2$0 >> 1] = 0;
  HEAP16[$pnt1$0 >> 1] = 0;
  $i$0 = $i$0 + 1 | 0;
  $pnt1$0 = $pnt1$0 + 2 | 0;
  $pnt2$0 = $pnt2$0 + 2 | 0;
 }
 $mul = $labelingThresh * 3 | 0;
 $sub8 = $xsize + -1 | 0;
 $i$1 = 0;
 $pnt1$1 = $0;
 $pnt2$1 = $0 + ($sub8 << 1) | 0;
 while (1) {
  if (($i$1 | 0) >= ($ysize | 0)) break;
  HEAP16[$pnt2$1 >> 1] = 0;
  HEAP16[$pnt1$1 >> 1] = 0;
  $i$1 = $i$1 + 1 | 0;
  $pnt1$1 = $pnt1$1 + ($xsize << 1) | 0;
  $pnt2$1 = $pnt2$1 + ($xsize << 1) | 0;
 }
 $arraydecay = $labelInfo + 1179664 | 0;
 $add = $xsize + 1 | 0;
 $sub52 = 0 - $xsize | 0;
 $dpnt$0 = (HEAP32[$labelInfo + 4 >> 2] | 0) + $add | 0;
 $j$0 = 1;
 $pnt$0 = $image + ($add << 1) | 0;
 $pnt2$2 = $0 + ($add << 1) | 0;
 $wk_max$0 = 0;
 L9 : while (1) {
  if (($j$0 | 0) < ($sub | 0)) {
   $dpnt$1 = $dpnt$0;
   $i$2 = 1;
   $pnt$1 = $pnt$0;
   $pnt2$3 = $pnt2$2;
   $wk_max$1 = $wk_max$0;
  } else {
   label = 56;
   break;
  }
  while (1) {
   if (($i$2 | 0) >= ($sub8 | 0)) break;
   $conv = HEAPU8[$pnt$1 >> 0] | 0;
   $conv41 = HEAPU8[$pnt$1 + 1 >> 0] | 0;
   do if ((($conv & 248) + 12 + ($conv << 5 & 224) + ($conv41 >>> 3 & 24) + ($conv41 << 2 & 248) | 0) > ($mul | 0)) {
    HEAP16[$pnt2$3 >> 1] = 0;
    HEAP8[$dpnt$1 >> 0] = 0;
    $wk_max$3 = $wk_max$1;
   } else {
    HEAP8[$dpnt$1 >> 0] = -1;
    $arrayidx53 = $pnt2$3 + ($sub52 << 1) | 0;
    $4 = HEAP16[$arrayidx53 >> 1] | 0;
    if ($4 << 16 >> 16 > 0) {
     HEAP16[$pnt2$3 >> 1] = $4;
     $5 = ($4 << 16 >> 16) * 7 | 0;
     $arrayidx62 = $labelInfo + 1310736 + ($5 + -7 << 2) | 0;
     HEAP32[$arrayidx62 >> 2] = (HEAP32[$arrayidx62 >> 2] | 0) + 1;
     $arrayidx65 = $labelInfo + 1310736 + ($5 + -6 << 2) | 0;
     HEAP32[$arrayidx65 >> 2] = (HEAP32[$arrayidx65 >> 2] | 0) + $i$2;
     $arrayidx68 = $labelInfo + 1310736 + ($5 + -5 << 2) | 0;
     HEAP32[$arrayidx68 >> 2] = (HEAP32[$arrayidx68 >> 2] | 0) + $j$0;
     HEAP32[$labelInfo + 1310736 + ($5 + -1 << 2) >> 2] = $j$0;
     $wk_max$3 = $wk_max$1;
     break;
    }
    $9 = HEAP16[$arrayidx53 + 2 >> 1] | 0;
    $10 = HEAP16[$arrayidx53 + -2 >> 1] | 0;
    $cmp79 = $10 << 16 >> 16 > 0;
    $add$ptr143 = $pnt2$3 + -2 | 0;
    $sub88 = ($10 << 16 >> 16) + -1 | 0;
    if ($9 << 16 >> 16 <= 0) {
     if ($cmp79) {
      HEAP16[$pnt2$3 >> 1] = $10;
      $mul242 = $sub88 * 7 | 0;
      $arrayidx244 = $labelInfo + 1310736 + ($mul242 << 2) | 0;
      HEAP32[$arrayidx244 >> 2] = (HEAP32[$arrayidx244 >> 2] | 0) + 1;
      $arrayidx247 = $labelInfo + 1310736 + ($mul242 + 1 << 2) | 0;
      HEAP32[$arrayidx247 >> 2] = (HEAP32[$arrayidx247 >> 2] | 0) + $i$2;
      $arrayidx250 = $labelInfo + 1310736 + ($mul242 + 2 << 2) | 0;
      HEAP32[$arrayidx250 >> 2] = (HEAP32[$arrayidx250 >> 2] | 0) + $j$0;
      $arrayidx253 = $labelInfo + 1310736 + ($mul242 + 4 << 2) | 0;
      if ((HEAP32[$arrayidx253 >> 2] | 0) < ($i$2 | 0)) HEAP32[$arrayidx253 >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($mul242 + 6 << 2) >> 2] = $j$0;
      $wk_max$3 = $wk_max$1;
      break;
     }
     $38 = HEAP16[$add$ptr143 >> 1] | 0;
     if ($38 << 16 >> 16 > 0) {
      HEAP16[$pnt2$3 >> 1] = $38;
      $39 = ($38 << 16 >> 16) * 7 | 0;
      $arrayidx273 = $labelInfo + 1310736 + ($39 + -7 << 2) | 0;
      HEAP32[$arrayidx273 >> 2] = (HEAP32[$arrayidx273 >> 2] | 0) + 1;
      $arrayidx276 = $labelInfo + 1310736 + ($39 + -6 << 2) | 0;
      HEAP32[$arrayidx276 >> 2] = (HEAP32[$arrayidx276 >> 2] | 0) + $i$2;
      $arrayidx279 = $labelInfo + 1310736 + ($39 + -5 << 2) | 0;
      HEAP32[$arrayidx279 >> 2] = (HEAP32[$arrayidx279 >> 2] | 0) + $j$0;
      $add281 = $39 + -3 | 0;
      if ((HEAP32[$labelInfo + 1310736 + ($add281 << 2) >> 2] | 0) < ($i$2 | 0)) {
       $$sink = $i$2;
       $add286$sink = $add281;
       $wk_max$2 = $wk_max$1;
      } else {
       $wk_max$3 = $wk_max$1;
       break;
      }
     } else {
      $inc290 = $wk_max$1 + 1 | 0;
      if (($wk_max$1 | 0) > 32767) {
       label = 50;
       break L9;
      }
      HEAP16[$pnt2$3 >> 1] = $inc290;
      HEAP32[$labelInfo + 1179664 + ($wk_max$1 << 2) >> 2] = $inc290 << 16 >> 16;
      $mul300 = $wk_max$1 * 7 | 0;
      HEAP32[$labelInfo + 1310736 + ($mul300 << 2) >> 2] = 1;
      HEAP32[$labelInfo + 1310736 + ($mul300 + 1 << 2) >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($mul300 + 2 << 2) >> 2] = $j$0;
      HEAP32[$labelInfo + 1310736 + ($mul300 + 3 << 2) >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($mul300 + 4 << 2) >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($mul300 + 5 << 2) >> 2] = $j$0;
      $$sink = $j$0;
      $add286$sink = $mul300 + 6 | 0;
      $wk_max$2 = $inc290;
     }
     HEAP32[$labelInfo + 1310736 + ($add286$sink << 2) >> 2] = $$sink;
     $wk_max$3 = $wk_max$2;
     break;
    }
    $sub84 = ($9 << 16 >> 16) + -1 | 0;
    $arrayidx85 = $labelInfo + 1179664 + ($sub84 << 2) | 0;
    if ($cmp79) {
     $11 = HEAP32[$arrayidx85 >> 2] | 0;
     $12 = HEAP32[$labelInfo + 1179664 + ($sub88 << 2) >> 2] | 0;
     L36 : do if (($11 | 0) > ($12 | 0)) {
      HEAP16[$pnt2$3 >> 1] = $12;
      $k$0 = 0;
      $wk$0 = $arraydecay;
      while (1) {
       if (($k$0 | 0) >= ($wk_max$1 | 0)) {
        $15 = $12;
        break L36;
       }
       if ((HEAP32[$wk$0 >> 2] | 0) == ($11 | 0)) HEAP32[$wk$0 >> 2] = $12;
       $k$0 = $k$0 + 1 | 0;
       $wk$0 = $wk$0 + 4 | 0;
      }
     } else {
      HEAP16[$pnt2$3 >> 1] = $11;
      if (($11 | 0) < ($12 | 0)) {
       $k$1 = 0;
       $wk$1 = $arraydecay;
       while (1) {
        if (($k$1 | 0) >= ($wk_max$1 | 0)) {
         $15 = $11;
         break L36;
        }
        if ((HEAP32[$wk$1 >> 2] | 0) == ($12 | 0)) HEAP32[$wk$1 >> 2] = $11;
        $k$1 = $k$1 + 1 | 0;
        $wk$1 = $wk$1 + 4 | 0;
       }
      } else $15 = $11;
     } while (0);
     $16 = ($15 << 16 >> 16) * 7 | 0;
     $arrayidx132 = $labelInfo + 1310736 + ($16 + -7 << 2) | 0;
     HEAP32[$arrayidx132 >> 2] = (HEAP32[$arrayidx132 >> 2] | 0) + 1;
     $arrayidx135 = $labelInfo + 1310736 + ($16 + -6 << 2) | 0;
     HEAP32[$arrayidx135 >> 2] = (HEAP32[$arrayidx135 >> 2] | 0) + $i$2;
     $arrayidx138 = $labelInfo + 1310736 + ($16 + -5 << 2) | 0;
     HEAP32[$arrayidx138 >> 2] = (HEAP32[$arrayidx138 >> 2] | 0) + $j$0;
     HEAP32[$labelInfo + 1310736 + ($16 + -1 << 2) >> 2] = $j$0;
     $wk_max$3 = $wk_max$1;
     break;
    }
    $20 = HEAP16[$add$ptr143 >> 1] | 0;
    if ($20 << 16 >> 16 <= 0) {
     HEAP16[$pnt2$3 >> 1] = $9;
     $mul211 = $sub84 * 7 | 0;
     $arrayidx213 = $labelInfo + 1310736 + ($mul211 << 2) | 0;
     HEAP32[$arrayidx213 >> 2] = (HEAP32[$arrayidx213 >> 2] | 0) + 1;
     $arrayidx216 = $labelInfo + 1310736 + ($mul211 + 1 << 2) | 0;
     HEAP32[$arrayidx216 >> 2] = (HEAP32[$arrayidx216 >> 2] | 0) + $i$2;
     $arrayidx219 = $labelInfo + 1310736 + ($mul211 + 2 << 2) | 0;
     HEAP32[$arrayidx219 >> 2] = (HEAP32[$arrayidx219 >> 2] | 0) + $j$0;
     $arrayidx222 = $labelInfo + 1310736 + ($mul211 + 3 << 2) | 0;
     if ((HEAP32[$arrayidx222 >> 2] | 0) > ($i$2 | 0)) HEAP32[$arrayidx222 >> 2] = $i$2;
     HEAP32[$labelInfo + 1310736 + ($mul211 + 6 << 2) >> 2] = $j$0;
     $wk_max$3 = $wk_max$1;
     break;
    }
    $21 = HEAP32[$arrayidx85 >> 2] | 0;
    $22 = HEAP32[$labelInfo + 1179664 + (($20 << 16 >> 16) + -1 << 2) >> 2] | 0;
    L59 : do if (($21 | 0) > ($22 | 0)) {
     HEAP16[$pnt2$3 >> 1] = $22;
     $k$2 = 0;
     $wk$2 = $arraydecay;
     while (1) {
      if (($k$2 | 0) >= ($wk_max$1 | 0)) {
       $25 = $22;
       break L59;
      }
      if ((HEAP32[$wk$2 >> 2] | 0) == ($21 | 0)) HEAP32[$wk$2 >> 2] = $22;
      $k$2 = $k$2 + 1 | 0;
      $wk$2 = $wk$2 + 4 | 0;
     }
    } else {
     HEAP16[$pnt2$3 >> 1] = $21;
     if (($21 | 0) < ($22 | 0)) {
      $k$3 = 0;
      $wk$3 = $arraydecay;
      while (1) {
       if (($k$3 | 0) >= ($wk_max$1 | 0)) {
        $25 = $21;
        break L59;
       }
       if ((HEAP32[$wk$3 >> 2] | 0) == ($22 | 0)) HEAP32[$wk$3 >> 2] = $21;
       $k$3 = $k$3 + 1 | 0;
       $wk$3 = $wk$3 + 4 | 0;
      }
     } else $25 = $21;
    } while (0);
    $26 = ($25 << 16 >> 16) * 7 | 0;
    $arrayidx199 = $labelInfo + 1310736 + ($26 + -7 << 2) | 0;
    HEAP32[$arrayidx199 >> 2] = (HEAP32[$arrayidx199 >> 2] | 0) + 1;
    $arrayidx202 = $labelInfo + 1310736 + ($26 + -6 << 2) | 0;
    HEAP32[$arrayidx202 >> 2] = (HEAP32[$arrayidx202 >> 2] | 0) + $i$2;
    $arrayidx205 = $labelInfo + 1310736 + ($26 + -5 << 2) | 0;
    HEAP32[$arrayidx205 >> 2] = (HEAP32[$arrayidx205 >> 2] | 0) + $j$0;
    $wk_max$3 = $wk_max$1;
   } while (0);
   $dpnt$1 = $dpnt$1 + 1 | 0;
   $i$2 = $i$2 + 1 | 0;
   $pnt$1 = $pnt$1 + 2 | 0;
   $pnt2$3 = $pnt2$3 + 2 | 0;
   $wk_max$1 = $wk_max$3;
  }
  $dpnt$0 = $dpnt$1 + 2 | 0;
  $j$0 = $j$0 + 1 | 0;
  $pnt$0 = $pnt$1 + 4 | 0;
  $pnt2$2 = $pnt2$3 + 4 | 0;
  $wk_max$0 = $wk_max$1;
 }
 L77 : do if ((label | 0) == 50) {
  _arLog(3, 3256, $vararg_buffer);
  $retval$0 = -1;
 } else if ((label | 0) == 56) {
  $arrayidx335 = $labelInfo + 12 | 0;
  $i$3 = 1;
  $j$1 = 1;
  $wk$4 = $arraydecay;
  while (1) {
   if (($i$3 | 0) > ($wk_max$0 | 0)) break;
   $44 = HEAP32[$wk$4 >> 2] | 0;
   if (($44 | 0) == ($i$3 | 0)) {
    $cond = $j$1;
    $j$2 = $j$1 + 1 | 0;
   } else {
    $cond = HEAP32[$labelInfo + 1179664 + ($44 + -1 << 2) >> 2] | 0;
    $j$2 = $j$1;
   }
   HEAP32[$wk$4 >> 2] = $cond;
   $i$3 = $i$3 + 1 | 0;
   $j$1 = $j$2;
   $wk$4 = $wk$4 + 4 | 0;
  }
  $label_num333 = $labelInfo + 8 | 0;
  $sub356 = $j$1 + -1 | 0;
  HEAP32[$label_num333 >> 2] = $sub356;
  if (!$sub356) $retval$0 = 0; else {
   _memset($arrayidx335 | 0, 0, $sub356 << 2 | 0) | 0;
   _memset($labelInfo + 655376 | 0, 0, $sub356 << 4 | 0) | 0;
   $46 = $sub356;
   $i$4 = 0;
   while (1) {
    if (($i$4 | 0) >= ($46 | 0)) {
     $i$5 = 0;
     break;
    }
    $mul368 = $i$4 << 2;
    HEAP32[$labelInfo + 131084 + ($mul368 << 2) >> 2] = $xsize;
    HEAP32[$labelInfo + 131084 + (($mul368 | 1) << 2) >> 2] = 0;
    HEAP32[$labelInfo + 131084 + (($mul368 | 2) << 2) >> 2] = $ysize;
    HEAP32[$labelInfo + 131084 + (($mul368 | 3) << 2) >> 2] = 0;
    $46 = HEAP32[$label_num333 >> 2] | 0;
    $i$4 = $i$4 + 1 | 0;
   }
   while (1) {
    if (($i$5 | 0) >= ($wk_max$0 | 0)) {
     $i$6 = 0;
     break;
    }
    $sub388 = (HEAP32[$labelInfo + 1179664 + ($i$5 << 2) >> 2] | 0) + -1 | 0;
    $mul389 = $i$5 * 7 | 0;
    $arrayidx392 = $labelInfo + 12 + ($sub388 << 2) | 0;
    HEAP32[$arrayidx392 >> 2] = (HEAP32[$arrayidx392 >> 2] | 0) + (HEAP32[$labelInfo + 1310736 + ($mul389 << 2) >> 2] | 0);
    $mul398 = $sub388 << 1;
    $arrayidx400 = $labelInfo + 655376 + ($mul398 << 3) | 0;
    HEAPF64[$arrayidx400 >> 3] = +HEAPF64[$arrayidx400 >> 3] + +(HEAP32[$labelInfo + 1310736 + ($mul389 + 1 << 2) >> 2] | 0);
    $arrayidx408 = $labelInfo + 655376 + (($mul398 | 1) << 3) | 0;
    HEAPF64[$arrayidx408 >> 3] = +HEAPF64[$arrayidx408 >> 3] + +(HEAP32[$labelInfo + 1310736 + ($mul389 + 2 << 2) >> 2] | 0);
    $mul410 = $sub388 << 2;
    $arrayidx412 = $labelInfo + 131084 + ($mul410 << 2) | 0;
    $55 = HEAP32[$labelInfo + 1310736 + ($mul389 + 3 << 2) >> 2] | 0;
    if ((HEAP32[$arrayidx412 >> 2] | 0) > ($55 | 0)) HEAP32[$arrayidx412 >> 2] = $55;
    $arrayidx428 = $labelInfo + 131084 + (($mul410 | 1) << 2) | 0;
    $57 = HEAP32[$labelInfo + 1310736 + ($mul389 + 4 << 2) >> 2] | 0;
    if ((HEAP32[$arrayidx428 >> 2] | 0) < ($57 | 0)) HEAP32[$arrayidx428 >> 2] = $57;
    $arrayidx444 = $labelInfo + 131084 + (($mul410 | 2) << 2) | 0;
    $59 = HEAP32[$labelInfo + 1310736 + ($mul389 + 5 << 2) >> 2] | 0;
    if ((HEAP32[$arrayidx444 >> 2] | 0) > ($59 | 0)) HEAP32[$arrayidx444 >> 2] = $59;
    $arrayidx460 = $labelInfo + 131084 + (($mul410 | 3) << 2) | 0;
    $61 = HEAP32[$labelInfo + 1310736 + ($mul389 + 6 << 2) >> 2] | 0;
    if ((HEAP32[$arrayidx460 >> 2] | 0) < ($61 | 0)) HEAP32[$arrayidx460 >> 2] = $61;
    $i$5 = $i$5 + 1 | 0;
   }
   while (1) {
    if (($i$6 | 0) >= (HEAP32[$label_num333 >> 2] | 0)) {
     $retval$0 = 0;
     break L77;
    }
    $arrayidx481 = $labelInfo + 12 + ($i$6 << 2) | 0;
    $mul483 = $i$6 << 1;
    $arrayidx485 = $labelInfo + 655376 + ($mul483 << 3) | 0;
    HEAPF64[$arrayidx485 >> 3] = +HEAPF64[$arrayidx485 >> 3] / +(HEAP32[$arrayidx481 >> 2] | 0);
    $arrayidx490 = $labelInfo + 655376 + (($mul483 | 1) << 3) | 0;
    HEAPF64[$arrayidx490 >> 3] = +HEAPF64[$arrayidx490 >> 3] / +(HEAP32[$arrayidx481 >> 2] | 0);
    $i$6 = $i$6 + 1 | 0;
   }
  }
 } while (0);
 STACKTOP = sp;
 return $retval$0 | 0;
}

function _arLabelingSubEWR3C565($image, $xsize, $ysize, $labelingThresh, $labelInfo) {
 $image = $image | 0;
 $xsize = $xsize | 0;
 $ysize = $ysize | 0;
 $labelingThresh = $labelingThresh | 0;
 $labelInfo = $labelInfo | 0;
 var $$sink = 0, $0 = 0, $10 = 0, $11 = 0, $12 = 0, $15 = 0, $16 = 0, $20 = 0, $21 = 0, $22 = 0, $25 = 0, $26 = 0, $38 = 0, $39 = 0, $4 = 0, $44 = 0, $46 = 0, $5 = 0, $55 = 0, $57 = 0, $59 = 0, $61 = 0, $9 = 0, $add = 0, $add$ptr143 = 0, $add281 = 0, $add286$sink = 0, $arraydecay = 0, $arrayidx132 = 0, $arrayidx135 = 0, $arrayidx138 = 0, $arrayidx199 = 0, $arrayidx202 = 0, $arrayidx205 = 0, $arrayidx213 = 0, $arrayidx216 = 0, $arrayidx219 = 0, $arrayidx222 = 0, $arrayidx244 = 0, $arrayidx247 = 0, $arrayidx250 = 0, $arrayidx253 = 0, $arrayidx273 = 0, $arrayidx276 = 0, $arrayidx279 = 0, $arrayidx335 = 0, $arrayidx392 = 0, $arrayidx400 = 0, $arrayidx408 = 0, $arrayidx412 = 0, $arrayidx428 = 0, $arrayidx444 = 0, $arrayidx460 = 0, $arrayidx481 = 0, $arrayidx485 = 0, $arrayidx490 = 0, $arrayidx53 = 0, $arrayidx62 = 0, $arrayidx65 = 0, $arrayidx68 = 0, $arrayidx85 = 0, $cmp79 = 0, $cond = 0, $conv = 0, $conv41 = 0, $dpnt$0 = 0, $dpnt$1 = 0, $i$0 = 0, $i$1 = 0, $i$2 = 0, $i$3 = 0, $i$4 = 0, $i$5 = 0, $i$6 = 0, $inc290 = 0, $j$0 = 0, $j$1 = 0, $j$2 = 0, $k$0 = 0, $k$1 = 0, $k$2 = 0, $k$3 = 0, $label_num333 = 0, $mul = 0, $mul211 = 0, $mul242 = 0, $mul300 = 0, $mul368 = 0, $mul389 = 0, $mul398 = 0, $mul410 = 0, $mul483 = 0, $pnt$0 = 0, $pnt$1 = 0, $pnt1$0 = 0, $pnt1$1 = 0, $pnt2$0 = 0, $pnt2$1 = 0, $pnt2$2 = 0, $pnt2$3 = 0, $retval$0 = 0, $sub = 0, $sub356 = 0, $sub388 = 0, $sub52 = 0, $sub8 = 0, $sub84 = 0, $sub88 = 0, $vararg_buffer = 0, $wk$0 = 0, $wk$1 = 0, $wk$2 = 0, $wk$3 = 0, $wk$4 = 0, $wk_max$0 = 0, $wk_max$1 = 0, $wk_max$2 = 0, $wk_max$3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $vararg_buffer = sp;
 $0 = HEAP32[$labelInfo >> 2] | 0;
 $sub = $ysize + -1 | 0;
 $i$0 = 0;
 $pnt1$0 = $0;
 $pnt2$0 = $0 + ((Math_imul($sub, $xsize) | 0) << 1) | 0;
 while (1) {
  if (($i$0 | 0) >= ($xsize | 0)) break;
  HEAP16[$pnt2$0 >> 1] = 0;
  HEAP16[$pnt1$0 >> 1] = 0;
  $i$0 = $i$0 + 1 | 0;
  $pnt1$0 = $pnt1$0 + 2 | 0;
  $pnt2$0 = $pnt2$0 + 2 | 0;
 }
 $mul = $labelingThresh * 3 | 0;
 $sub8 = $xsize + -1 | 0;
 $i$1 = 0;
 $pnt1$1 = $0;
 $pnt2$1 = $0 + ($sub8 << 1) | 0;
 while (1) {
  if (($i$1 | 0) >= ($ysize | 0)) break;
  HEAP16[$pnt2$1 >> 1] = 0;
  HEAP16[$pnt1$1 >> 1] = 0;
  $i$1 = $i$1 + 1 | 0;
  $pnt1$1 = $pnt1$1 + ($xsize << 1) | 0;
  $pnt2$1 = $pnt2$1 + ($xsize << 1) | 0;
 }
 $arraydecay = $labelInfo + 1179664 | 0;
 $add = $xsize + 1 | 0;
 $sub52 = 0 - $xsize | 0;
 $dpnt$0 = (HEAP32[$labelInfo + 4 >> 2] | 0) + $add | 0;
 $j$0 = 1;
 $pnt$0 = $image + ($add << 1) | 0;
 $pnt2$2 = $0 + ($add << 1) | 0;
 $wk_max$0 = 0;
 L9 : while (1) {
  if (($j$0 | 0) < ($sub | 0)) {
   $dpnt$1 = $dpnt$0;
   $i$2 = 1;
   $pnt$1 = $pnt$0;
   $pnt2$3 = $pnt2$2;
   $wk_max$1 = $wk_max$0;
  } else {
   label = 56;
   break;
  }
  while (1) {
   if (($i$2 | 0) >= ($sub8 | 0)) break;
   $conv = HEAPU8[$pnt$1 >> 0] | 0;
   $conv41 = HEAPU8[$pnt$1 + 1 >> 0] | 0;
   do if ((($conv & 248) + 10 + ($conv << 5 & 224) + ($conv41 >>> 3 & 28) + ($conv41 << 3 & 248) | 0) > ($mul | 0)) {
    HEAP8[$dpnt$1 >> 0] = -1;
    $arrayidx53 = $pnt2$3 + ($sub52 << 1) | 0;
    $4 = HEAP16[$arrayidx53 >> 1] | 0;
    if ($4 << 16 >> 16 > 0) {
     HEAP16[$pnt2$3 >> 1] = $4;
     $5 = ($4 << 16 >> 16) * 7 | 0;
     $arrayidx62 = $labelInfo + 1310736 + ($5 + -7 << 2) | 0;
     HEAP32[$arrayidx62 >> 2] = (HEAP32[$arrayidx62 >> 2] | 0) + 1;
     $arrayidx65 = $labelInfo + 1310736 + ($5 + -6 << 2) | 0;
     HEAP32[$arrayidx65 >> 2] = (HEAP32[$arrayidx65 >> 2] | 0) + $i$2;
     $arrayidx68 = $labelInfo + 1310736 + ($5 + -5 << 2) | 0;
     HEAP32[$arrayidx68 >> 2] = (HEAP32[$arrayidx68 >> 2] | 0) + $j$0;
     HEAP32[$labelInfo + 1310736 + ($5 + -1 << 2) >> 2] = $j$0;
     $wk_max$3 = $wk_max$1;
     break;
    }
    $9 = HEAP16[$arrayidx53 + 2 >> 1] | 0;
    $10 = HEAP16[$arrayidx53 + -2 >> 1] | 0;
    $cmp79 = $10 << 16 >> 16 > 0;
    $add$ptr143 = $pnt2$3 + -2 | 0;
    $sub88 = ($10 << 16 >> 16) + -1 | 0;
    if ($9 << 16 >> 16 <= 0) {
     if ($cmp79) {
      HEAP16[$pnt2$3 >> 1] = $10;
      $mul242 = $sub88 * 7 | 0;
      $arrayidx244 = $labelInfo + 1310736 + ($mul242 << 2) | 0;
      HEAP32[$arrayidx244 >> 2] = (HEAP32[$arrayidx244 >> 2] | 0) + 1;
      $arrayidx247 = $labelInfo + 1310736 + ($mul242 + 1 << 2) | 0;
      HEAP32[$arrayidx247 >> 2] = (HEAP32[$arrayidx247 >> 2] | 0) + $i$2;
      $arrayidx250 = $labelInfo + 1310736 + ($mul242 + 2 << 2) | 0;
      HEAP32[$arrayidx250 >> 2] = (HEAP32[$arrayidx250 >> 2] | 0) + $j$0;
      $arrayidx253 = $labelInfo + 1310736 + ($mul242 + 4 << 2) | 0;
      if ((HEAP32[$arrayidx253 >> 2] | 0) < ($i$2 | 0)) HEAP32[$arrayidx253 >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($mul242 + 6 << 2) >> 2] = $j$0;
      $wk_max$3 = $wk_max$1;
      break;
     }
     $38 = HEAP16[$add$ptr143 >> 1] | 0;
     if ($38 << 16 >> 16 > 0) {
      HEAP16[$pnt2$3 >> 1] = $38;
      $39 = ($38 << 16 >> 16) * 7 | 0;
      $arrayidx273 = $labelInfo + 1310736 + ($39 + -7 << 2) | 0;
      HEAP32[$arrayidx273 >> 2] = (HEAP32[$arrayidx273 >> 2] | 0) + 1;
      $arrayidx276 = $labelInfo + 1310736 + ($39 + -6 << 2) | 0;
      HEAP32[$arrayidx276 >> 2] = (HEAP32[$arrayidx276 >> 2] | 0) + $i$2;
      $arrayidx279 = $labelInfo + 1310736 + ($39 + -5 << 2) | 0;
      HEAP32[$arrayidx279 >> 2] = (HEAP32[$arrayidx279 >> 2] | 0) + $j$0;
      $add281 = $39 + -3 | 0;
      if ((HEAP32[$labelInfo + 1310736 + ($add281 << 2) >> 2] | 0) < ($i$2 | 0)) {
       $$sink = $i$2;
       $add286$sink = $add281;
       $wk_max$2 = $wk_max$1;
      } else {
       $wk_max$3 = $wk_max$1;
       break;
      }
     } else {
      $inc290 = $wk_max$1 + 1 | 0;
      if (($wk_max$1 | 0) > 32767) {
       label = 50;
       break L9;
      }
      HEAP16[$pnt2$3 >> 1] = $inc290;
      HEAP32[$labelInfo + 1179664 + ($wk_max$1 << 2) >> 2] = $inc290 << 16 >> 16;
      $mul300 = $wk_max$1 * 7 | 0;
      HEAP32[$labelInfo + 1310736 + ($mul300 << 2) >> 2] = 1;
      HEAP32[$labelInfo + 1310736 + ($mul300 + 1 << 2) >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($mul300 + 2 << 2) >> 2] = $j$0;
      HEAP32[$labelInfo + 1310736 + ($mul300 + 3 << 2) >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($mul300 + 4 << 2) >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($mul300 + 5 << 2) >> 2] = $j$0;
      $$sink = $j$0;
      $add286$sink = $mul300 + 6 | 0;
      $wk_max$2 = $inc290;
     }
     HEAP32[$labelInfo + 1310736 + ($add286$sink << 2) >> 2] = $$sink;
     $wk_max$3 = $wk_max$2;
     break;
    }
    $sub84 = ($9 << 16 >> 16) + -1 | 0;
    $arrayidx85 = $labelInfo + 1179664 + ($sub84 << 2) | 0;
    if ($cmp79) {
     $11 = HEAP32[$arrayidx85 >> 2] | 0;
     $12 = HEAP32[$labelInfo + 1179664 + ($sub88 << 2) >> 2] | 0;
     L35 : do if (($11 | 0) > ($12 | 0)) {
      HEAP16[$pnt2$3 >> 1] = $12;
      $k$0 = 0;
      $wk$0 = $arraydecay;
      while (1) {
       if (($k$0 | 0) >= ($wk_max$1 | 0)) {
        $15 = $12;
        break L35;
       }
       if ((HEAP32[$wk$0 >> 2] | 0) == ($11 | 0)) HEAP32[$wk$0 >> 2] = $12;
       $k$0 = $k$0 + 1 | 0;
       $wk$0 = $wk$0 + 4 | 0;
      }
     } else {
      HEAP16[$pnt2$3 >> 1] = $11;
      if (($11 | 0) < ($12 | 0)) {
       $k$1 = 0;
       $wk$1 = $arraydecay;
       while (1) {
        if (($k$1 | 0) >= ($wk_max$1 | 0)) {
         $15 = $11;
         break L35;
        }
        if ((HEAP32[$wk$1 >> 2] | 0) == ($12 | 0)) HEAP32[$wk$1 >> 2] = $11;
        $k$1 = $k$1 + 1 | 0;
        $wk$1 = $wk$1 + 4 | 0;
       }
      } else $15 = $11;
     } while (0);
     $16 = ($15 << 16 >> 16) * 7 | 0;
     $arrayidx132 = $labelInfo + 1310736 + ($16 + -7 << 2) | 0;
     HEAP32[$arrayidx132 >> 2] = (HEAP32[$arrayidx132 >> 2] | 0) + 1;
     $arrayidx135 = $labelInfo + 1310736 + ($16 + -6 << 2) | 0;
     HEAP32[$arrayidx135 >> 2] = (HEAP32[$arrayidx135 >> 2] | 0) + $i$2;
     $arrayidx138 = $labelInfo + 1310736 + ($16 + -5 << 2) | 0;
     HEAP32[$arrayidx138 >> 2] = (HEAP32[$arrayidx138 >> 2] | 0) + $j$0;
     HEAP32[$labelInfo + 1310736 + ($16 + -1 << 2) >> 2] = $j$0;
     $wk_max$3 = $wk_max$1;
     break;
    }
    $20 = HEAP16[$add$ptr143 >> 1] | 0;
    if ($20 << 16 >> 16 <= 0) {
     HEAP16[$pnt2$3 >> 1] = $9;
     $mul211 = $sub84 * 7 | 0;
     $arrayidx213 = $labelInfo + 1310736 + ($mul211 << 2) | 0;
     HEAP32[$arrayidx213 >> 2] = (HEAP32[$arrayidx213 >> 2] | 0) + 1;
     $arrayidx216 = $labelInfo + 1310736 + ($mul211 + 1 << 2) | 0;
     HEAP32[$arrayidx216 >> 2] = (HEAP32[$arrayidx216 >> 2] | 0) + $i$2;
     $arrayidx219 = $labelInfo + 1310736 + ($mul211 + 2 << 2) | 0;
     HEAP32[$arrayidx219 >> 2] = (HEAP32[$arrayidx219 >> 2] | 0) + $j$0;
     $arrayidx222 = $labelInfo + 1310736 + ($mul211 + 3 << 2) | 0;
     if ((HEAP32[$arrayidx222 >> 2] | 0) > ($i$2 | 0)) HEAP32[$arrayidx222 >> 2] = $i$2;
     HEAP32[$labelInfo + 1310736 + ($mul211 + 6 << 2) >> 2] = $j$0;
     $wk_max$3 = $wk_max$1;
     break;
    }
    $21 = HEAP32[$arrayidx85 >> 2] | 0;
    $22 = HEAP32[$labelInfo + 1179664 + (($20 << 16 >> 16) + -1 << 2) >> 2] | 0;
    L58 : do if (($21 | 0) > ($22 | 0)) {
     HEAP16[$pnt2$3 >> 1] = $22;
     $k$2 = 0;
     $wk$2 = $arraydecay;
     while (1) {
      if (($k$2 | 0) >= ($wk_max$1 | 0)) {
       $25 = $22;
       break L58;
      }
      if ((HEAP32[$wk$2 >> 2] | 0) == ($21 | 0)) HEAP32[$wk$2 >> 2] = $22;
      $k$2 = $k$2 + 1 | 0;
      $wk$2 = $wk$2 + 4 | 0;
     }
    } else {
     HEAP16[$pnt2$3 >> 1] = $21;
     if (($21 | 0) < ($22 | 0)) {
      $k$3 = 0;
      $wk$3 = $arraydecay;
      while (1) {
       if (($k$3 | 0) >= ($wk_max$1 | 0)) {
        $25 = $21;
        break L58;
       }
       if ((HEAP32[$wk$3 >> 2] | 0) == ($22 | 0)) HEAP32[$wk$3 >> 2] = $21;
       $k$3 = $k$3 + 1 | 0;
       $wk$3 = $wk$3 + 4 | 0;
      }
     } else $25 = $21;
    } while (0);
    $26 = ($25 << 16 >> 16) * 7 | 0;
    $arrayidx199 = $labelInfo + 1310736 + ($26 + -7 << 2) | 0;
    HEAP32[$arrayidx199 >> 2] = (HEAP32[$arrayidx199 >> 2] | 0) + 1;
    $arrayidx202 = $labelInfo + 1310736 + ($26 + -6 << 2) | 0;
    HEAP32[$arrayidx202 >> 2] = (HEAP32[$arrayidx202 >> 2] | 0) + $i$2;
    $arrayidx205 = $labelInfo + 1310736 + ($26 + -5 << 2) | 0;
    HEAP32[$arrayidx205 >> 2] = (HEAP32[$arrayidx205 >> 2] | 0) + $j$0;
    $wk_max$3 = $wk_max$1;
   } else {
    HEAP16[$pnt2$3 >> 1] = 0;
    HEAP8[$dpnt$1 >> 0] = 0;
    $wk_max$3 = $wk_max$1;
   } while (0);
   $dpnt$1 = $dpnt$1 + 1 | 0;
   $i$2 = $i$2 + 1 | 0;
   $pnt$1 = $pnt$1 + 2 | 0;
   $pnt2$3 = $pnt2$3 + 2 | 0;
   $wk_max$1 = $wk_max$3;
  }
  $dpnt$0 = $dpnt$1 + 2 | 0;
  $j$0 = $j$0 + 1 | 0;
  $pnt$0 = $pnt$1 + 4 | 0;
  $pnt2$2 = $pnt2$3 + 4 | 0;
  $wk_max$0 = $wk_max$1;
 }
 L77 : do if ((label | 0) == 50) {
  _arLog(3, 3256, $vararg_buffer);
  $retval$0 = -1;
 } else if ((label | 0) == 56) {
  $arrayidx335 = $labelInfo + 12 | 0;
  $i$3 = 1;
  $j$1 = 1;
  $wk$4 = $arraydecay;
  while (1) {
   if (($i$3 | 0) > ($wk_max$0 | 0)) break;
   $44 = HEAP32[$wk$4 >> 2] | 0;
   if (($44 | 0) == ($i$3 | 0)) {
    $cond = $j$1;
    $j$2 = $j$1 + 1 | 0;
   } else {
    $cond = HEAP32[$labelInfo + 1179664 + ($44 + -1 << 2) >> 2] | 0;
    $j$2 = $j$1;
   }
   HEAP32[$wk$4 >> 2] = $cond;
   $i$3 = $i$3 + 1 | 0;
   $j$1 = $j$2;
   $wk$4 = $wk$4 + 4 | 0;
  }
  $label_num333 = $labelInfo + 8 | 0;
  $sub356 = $j$1 + -1 | 0;
  HEAP32[$label_num333 >> 2] = $sub356;
  if (!$sub356) $retval$0 = 0; else {
   _memset($arrayidx335 | 0, 0, $sub356 << 2 | 0) | 0;
   _memset($labelInfo + 655376 | 0, 0, $sub356 << 4 | 0) | 0;
   $46 = $sub356;
   $i$4 = 0;
   while (1) {
    if (($i$4 | 0) >= ($46 | 0)) {
     $i$5 = 0;
     break;
    }
    $mul368 = $i$4 << 2;
    HEAP32[$labelInfo + 131084 + ($mul368 << 2) >> 2] = $xsize;
    HEAP32[$labelInfo + 131084 + (($mul368 | 1) << 2) >> 2] = 0;
    HEAP32[$labelInfo + 131084 + (($mul368 | 2) << 2) >> 2] = $ysize;
    HEAP32[$labelInfo + 131084 + (($mul368 | 3) << 2) >> 2] = 0;
    $46 = HEAP32[$label_num333 >> 2] | 0;
    $i$4 = $i$4 + 1 | 0;
   }
   while (1) {
    if (($i$5 | 0) >= ($wk_max$0 | 0)) {
     $i$6 = 0;
     break;
    }
    $sub388 = (HEAP32[$labelInfo + 1179664 + ($i$5 << 2) >> 2] | 0) + -1 | 0;
    $mul389 = $i$5 * 7 | 0;
    $arrayidx392 = $labelInfo + 12 + ($sub388 << 2) | 0;
    HEAP32[$arrayidx392 >> 2] = (HEAP32[$arrayidx392 >> 2] | 0) + (HEAP32[$labelInfo + 1310736 + ($mul389 << 2) >> 2] | 0);
    $mul398 = $sub388 << 1;
    $arrayidx400 = $labelInfo + 655376 + ($mul398 << 3) | 0;
    HEAPF64[$arrayidx400 >> 3] = +HEAPF64[$arrayidx400 >> 3] + +(HEAP32[$labelInfo + 1310736 + ($mul389 + 1 << 2) >> 2] | 0);
    $arrayidx408 = $labelInfo + 655376 + (($mul398 | 1) << 3) | 0;
    HEAPF64[$arrayidx408 >> 3] = +HEAPF64[$arrayidx408 >> 3] + +(HEAP32[$labelInfo + 1310736 + ($mul389 + 2 << 2) >> 2] | 0);
    $mul410 = $sub388 << 2;
    $arrayidx412 = $labelInfo + 131084 + ($mul410 << 2) | 0;
    $55 = HEAP32[$labelInfo + 1310736 + ($mul389 + 3 << 2) >> 2] | 0;
    if ((HEAP32[$arrayidx412 >> 2] | 0) > ($55 | 0)) HEAP32[$arrayidx412 >> 2] = $55;
    $arrayidx428 = $labelInfo + 131084 + (($mul410 | 1) << 2) | 0;
    $57 = HEAP32[$labelInfo + 1310736 + ($mul389 + 4 << 2) >> 2] | 0;
    if ((HEAP32[$arrayidx428 >> 2] | 0) < ($57 | 0)) HEAP32[$arrayidx428 >> 2] = $57;
    $arrayidx444 = $labelInfo + 131084 + (($mul410 | 2) << 2) | 0;
    $59 = HEAP32[$labelInfo + 1310736 + ($mul389 + 5 << 2) >> 2] | 0;
    if ((HEAP32[$arrayidx444 >> 2] | 0) > ($59 | 0)) HEAP32[$arrayidx444 >> 2] = $59;
    $arrayidx460 = $labelInfo + 131084 + (($mul410 | 3) << 2) | 0;
    $61 = HEAP32[$labelInfo + 1310736 + ($mul389 + 6 << 2) >> 2] | 0;
    if ((HEAP32[$arrayidx460 >> 2] | 0) < ($61 | 0)) HEAP32[$arrayidx460 >> 2] = $61;
    $i$5 = $i$5 + 1 | 0;
   }
   while (1) {
    if (($i$6 | 0) >= (HEAP32[$label_num333 >> 2] | 0)) {
     $retval$0 = 0;
     break L77;
    }
    $arrayidx481 = $labelInfo + 12 + ($i$6 << 2) | 0;
    $mul483 = $i$6 << 1;
    $arrayidx485 = $labelInfo + 655376 + ($mul483 << 3) | 0;
    HEAPF64[$arrayidx485 >> 3] = +HEAPF64[$arrayidx485 >> 3] / +(HEAP32[$arrayidx481 >> 2] | 0);
    $arrayidx490 = $labelInfo + 655376 + (($mul483 | 1) << 3) | 0;
    HEAPF64[$arrayidx490 >> 3] = +HEAPF64[$arrayidx490 >> 3] / +(HEAP32[$arrayidx481 >> 2] | 0);
    $i$6 = $i$6 + 1 | 0;
   }
  }
 } while (0);
 STACKTOP = sp;
 return $retval$0 | 0;
}

function _arLabelingSubEBR3C565($image, $xsize, $ysize, $labelingThresh, $labelInfo) {
 $image = $image | 0;
 $xsize = $xsize | 0;
 $ysize = $ysize | 0;
 $labelingThresh = $labelingThresh | 0;
 $labelInfo = $labelInfo | 0;
 var $$sink = 0, $0 = 0, $10 = 0, $11 = 0, $12 = 0, $15 = 0, $16 = 0, $20 = 0, $21 = 0, $22 = 0, $25 = 0, $26 = 0, $38 = 0, $39 = 0, $4 = 0, $44 = 0, $46 = 0, $5 = 0, $55 = 0, $57 = 0, $59 = 0, $61 = 0, $9 = 0, $add = 0, $add$ptr143 = 0, $add281 = 0, $add286$sink = 0, $arraydecay = 0, $arrayidx132 = 0, $arrayidx135 = 0, $arrayidx138 = 0, $arrayidx199 = 0, $arrayidx202 = 0, $arrayidx205 = 0, $arrayidx213 = 0, $arrayidx216 = 0, $arrayidx219 = 0, $arrayidx222 = 0, $arrayidx244 = 0, $arrayidx247 = 0, $arrayidx250 = 0, $arrayidx253 = 0, $arrayidx273 = 0, $arrayidx276 = 0, $arrayidx279 = 0, $arrayidx335 = 0, $arrayidx392 = 0, $arrayidx400 = 0, $arrayidx408 = 0, $arrayidx412 = 0, $arrayidx428 = 0, $arrayidx444 = 0, $arrayidx460 = 0, $arrayidx481 = 0, $arrayidx485 = 0, $arrayidx490 = 0, $arrayidx53 = 0, $arrayidx62 = 0, $arrayidx65 = 0, $arrayidx68 = 0, $arrayidx85 = 0, $cmp79 = 0, $cond = 0, $conv = 0, $conv41 = 0, $dpnt$0 = 0, $dpnt$1 = 0, $i$0 = 0, $i$1 = 0, $i$2 = 0, $i$3 = 0, $i$4 = 0, $i$5 = 0, $i$6 = 0, $inc290 = 0, $j$0 = 0, $j$1 = 0, $j$2 = 0, $k$0 = 0, $k$1 = 0, $k$2 = 0, $k$3 = 0, $label_num333 = 0, $mul = 0, $mul211 = 0, $mul242 = 0, $mul300 = 0, $mul368 = 0, $mul389 = 0, $mul398 = 0, $mul410 = 0, $mul483 = 0, $pnt$0 = 0, $pnt$1 = 0, $pnt1$0 = 0, $pnt1$1 = 0, $pnt2$0 = 0, $pnt2$1 = 0, $pnt2$2 = 0, $pnt2$3 = 0, $retval$0 = 0, $sub = 0, $sub356 = 0, $sub388 = 0, $sub52 = 0, $sub8 = 0, $sub84 = 0, $sub88 = 0, $vararg_buffer = 0, $wk$0 = 0, $wk$1 = 0, $wk$2 = 0, $wk$3 = 0, $wk$4 = 0, $wk_max$0 = 0, $wk_max$1 = 0, $wk_max$2 = 0, $wk_max$3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $vararg_buffer = sp;
 $0 = HEAP32[$labelInfo >> 2] | 0;
 $sub = $ysize + -1 | 0;
 $i$0 = 0;
 $pnt1$0 = $0;
 $pnt2$0 = $0 + ((Math_imul($sub, $xsize) | 0) << 1) | 0;
 while (1) {
  if (($i$0 | 0) >= ($xsize | 0)) break;
  HEAP16[$pnt2$0 >> 1] = 0;
  HEAP16[$pnt1$0 >> 1] = 0;
  $i$0 = $i$0 + 1 | 0;
  $pnt1$0 = $pnt1$0 + 2 | 0;
  $pnt2$0 = $pnt2$0 + 2 | 0;
 }
 $mul = $labelingThresh * 3 | 0;
 $sub8 = $xsize + -1 | 0;
 $i$1 = 0;
 $pnt1$1 = $0;
 $pnt2$1 = $0 + ($sub8 << 1) | 0;
 while (1) {
  if (($i$1 | 0) >= ($ysize | 0)) break;
  HEAP16[$pnt2$1 >> 1] = 0;
  HEAP16[$pnt1$1 >> 1] = 0;
  $i$1 = $i$1 + 1 | 0;
  $pnt1$1 = $pnt1$1 + ($xsize << 1) | 0;
  $pnt2$1 = $pnt2$1 + ($xsize << 1) | 0;
 }
 $arraydecay = $labelInfo + 1179664 | 0;
 $add = $xsize + 1 | 0;
 $sub52 = 0 - $xsize | 0;
 $dpnt$0 = (HEAP32[$labelInfo + 4 >> 2] | 0) + $add | 0;
 $j$0 = 1;
 $pnt$0 = $image + ($add << 1) | 0;
 $pnt2$2 = $0 + ($add << 1) | 0;
 $wk_max$0 = 0;
 L9 : while (1) {
  if (($j$0 | 0) < ($sub | 0)) {
   $dpnt$1 = $dpnt$0;
   $i$2 = 1;
   $pnt$1 = $pnt$0;
   $pnt2$3 = $pnt2$2;
   $wk_max$1 = $wk_max$0;
  } else {
   label = 56;
   break;
  }
  while (1) {
   if (($i$2 | 0) >= ($sub8 | 0)) break;
   $conv = HEAPU8[$pnt$1 >> 0] | 0;
   $conv41 = HEAPU8[$pnt$1 + 1 >> 0] | 0;
   do if ((($conv & 248) + 10 + ($conv << 5 & 224) + ($conv41 >>> 3 & 28) + ($conv41 << 3 & 248) | 0) > ($mul | 0)) {
    HEAP16[$pnt2$3 >> 1] = 0;
    HEAP8[$dpnt$1 >> 0] = 0;
    $wk_max$3 = $wk_max$1;
   } else {
    HEAP8[$dpnt$1 >> 0] = -1;
    $arrayidx53 = $pnt2$3 + ($sub52 << 1) | 0;
    $4 = HEAP16[$arrayidx53 >> 1] | 0;
    if ($4 << 16 >> 16 > 0) {
     HEAP16[$pnt2$3 >> 1] = $4;
     $5 = ($4 << 16 >> 16) * 7 | 0;
     $arrayidx62 = $labelInfo + 1310736 + ($5 + -7 << 2) | 0;
     HEAP32[$arrayidx62 >> 2] = (HEAP32[$arrayidx62 >> 2] | 0) + 1;
     $arrayidx65 = $labelInfo + 1310736 + ($5 + -6 << 2) | 0;
     HEAP32[$arrayidx65 >> 2] = (HEAP32[$arrayidx65 >> 2] | 0) + $i$2;
     $arrayidx68 = $labelInfo + 1310736 + ($5 + -5 << 2) | 0;
     HEAP32[$arrayidx68 >> 2] = (HEAP32[$arrayidx68 >> 2] | 0) + $j$0;
     HEAP32[$labelInfo + 1310736 + ($5 + -1 << 2) >> 2] = $j$0;
     $wk_max$3 = $wk_max$1;
     break;
    }
    $9 = HEAP16[$arrayidx53 + 2 >> 1] | 0;
    $10 = HEAP16[$arrayidx53 + -2 >> 1] | 0;
    $cmp79 = $10 << 16 >> 16 > 0;
    $add$ptr143 = $pnt2$3 + -2 | 0;
    $sub88 = ($10 << 16 >> 16) + -1 | 0;
    if ($9 << 16 >> 16 <= 0) {
     if ($cmp79) {
      HEAP16[$pnt2$3 >> 1] = $10;
      $mul242 = $sub88 * 7 | 0;
      $arrayidx244 = $labelInfo + 1310736 + ($mul242 << 2) | 0;
      HEAP32[$arrayidx244 >> 2] = (HEAP32[$arrayidx244 >> 2] | 0) + 1;
      $arrayidx247 = $labelInfo + 1310736 + ($mul242 + 1 << 2) | 0;
      HEAP32[$arrayidx247 >> 2] = (HEAP32[$arrayidx247 >> 2] | 0) + $i$2;
      $arrayidx250 = $labelInfo + 1310736 + ($mul242 + 2 << 2) | 0;
      HEAP32[$arrayidx250 >> 2] = (HEAP32[$arrayidx250 >> 2] | 0) + $j$0;
      $arrayidx253 = $labelInfo + 1310736 + ($mul242 + 4 << 2) | 0;
      if ((HEAP32[$arrayidx253 >> 2] | 0) < ($i$2 | 0)) HEAP32[$arrayidx253 >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($mul242 + 6 << 2) >> 2] = $j$0;
      $wk_max$3 = $wk_max$1;
      break;
     }
     $38 = HEAP16[$add$ptr143 >> 1] | 0;
     if ($38 << 16 >> 16 > 0) {
      HEAP16[$pnt2$3 >> 1] = $38;
      $39 = ($38 << 16 >> 16) * 7 | 0;
      $arrayidx273 = $labelInfo + 1310736 + ($39 + -7 << 2) | 0;
      HEAP32[$arrayidx273 >> 2] = (HEAP32[$arrayidx273 >> 2] | 0) + 1;
      $arrayidx276 = $labelInfo + 1310736 + ($39 + -6 << 2) | 0;
      HEAP32[$arrayidx276 >> 2] = (HEAP32[$arrayidx276 >> 2] | 0) + $i$2;
      $arrayidx279 = $labelInfo + 1310736 + ($39 + -5 << 2) | 0;
      HEAP32[$arrayidx279 >> 2] = (HEAP32[$arrayidx279 >> 2] | 0) + $j$0;
      $add281 = $39 + -3 | 0;
      if ((HEAP32[$labelInfo + 1310736 + ($add281 << 2) >> 2] | 0) < ($i$2 | 0)) {
       $$sink = $i$2;
       $add286$sink = $add281;
       $wk_max$2 = $wk_max$1;
      } else {
       $wk_max$3 = $wk_max$1;
       break;
      }
     } else {
      $inc290 = $wk_max$1 + 1 | 0;
      if (($wk_max$1 | 0) > 32767) {
       label = 50;
       break L9;
      }
      HEAP16[$pnt2$3 >> 1] = $inc290;
      HEAP32[$labelInfo + 1179664 + ($wk_max$1 << 2) >> 2] = $inc290 << 16 >> 16;
      $mul300 = $wk_max$1 * 7 | 0;
      HEAP32[$labelInfo + 1310736 + ($mul300 << 2) >> 2] = 1;
      HEAP32[$labelInfo + 1310736 + ($mul300 + 1 << 2) >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($mul300 + 2 << 2) >> 2] = $j$0;
      HEAP32[$labelInfo + 1310736 + ($mul300 + 3 << 2) >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($mul300 + 4 << 2) >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($mul300 + 5 << 2) >> 2] = $j$0;
      $$sink = $j$0;
      $add286$sink = $mul300 + 6 | 0;
      $wk_max$2 = $inc290;
     }
     HEAP32[$labelInfo + 1310736 + ($add286$sink << 2) >> 2] = $$sink;
     $wk_max$3 = $wk_max$2;
     break;
    }
    $sub84 = ($9 << 16 >> 16) + -1 | 0;
    $arrayidx85 = $labelInfo + 1179664 + ($sub84 << 2) | 0;
    if ($cmp79) {
     $11 = HEAP32[$arrayidx85 >> 2] | 0;
     $12 = HEAP32[$labelInfo + 1179664 + ($sub88 << 2) >> 2] | 0;
     L36 : do if (($11 | 0) > ($12 | 0)) {
      HEAP16[$pnt2$3 >> 1] = $12;
      $k$0 = 0;
      $wk$0 = $arraydecay;
      while (1) {
       if (($k$0 | 0) >= ($wk_max$1 | 0)) {
        $15 = $12;
        break L36;
       }
       if ((HEAP32[$wk$0 >> 2] | 0) == ($11 | 0)) HEAP32[$wk$0 >> 2] = $12;
       $k$0 = $k$0 + 1 | 0;
       $wk$0 = $wk$0 + 4 | 0;
      }
     } else {
      HEAP16[$pnt2$3 >> 1] = $11;
      if (($11 | 0) < ($12 | 0)) {
       $k$1 = 0;
       $wk$1 = $arraydecay;
       while (1) {
        if (($k$1 | 0) >= ($wk_max$1 | 0)) {
         $15 = $11;
         break L36;
        }
        if ((HEAP32[$wk$1 >> 2] | 0) == ($12 | 0)) HEAP32[$wk$1 >> 2] = $11;
        $k$1 = $k$1 + 1 | 0;
        $wk$1 = $wk$1 + 4 | 0;
       }
      } else $15 = $11;
     } while (0);
     $16 = ($15 << 16 >> 16) * 7 | 0;
     $arrayidx132 = $labelInfo + 1310736 + ($16 + -7 << 2) | 0;
     HEAP32[$arrayidx132 >> 2] = (HEAP32[$arrayidx132 >> 2] | 0) + 1;
     $arrayidx135 = $labelInfo + 1310736 + ($16 + -6 << 2) | 0;
     HEAP32[$arrayidx135 >> 2] = (HEAP32[$arrayidx135 >> 2] | 0) + $i$2;
     $arrayidx138 = $labelInfo + 1310736 + ($16 + -5 << 2) | 0;
     HEAP32[$arrayidx138 >> 2] = (HEAP32[$arrayidx138 >> 2] | 0) + $j$0;
     HEAP32[$labelInfo + 1310736 + ($16 + -1 << 2) >> 2] = $j$0;
     $wk_max$3 = $wk_max$1;
     break;
    }
    $20 = HEAP16[$add$ptr143 >> 1] | 0;
    if ($20 << 16 >> 16 <= 0) {
     HEAP16[$pnt2$3 >> 1] = $9;
     $mul211 = $sub84 * 7 | 0;
     $arrayidx213 = $labelInfo + 1310736 + ($mul211 << 2) | 0;
     HEAP32[$arrayidx213 >> 2] = (HEAP32[$arrayidx213 >> 2] | 0) + 1;
     $arrayidx216 = $labelInfo + 1310736 + ($mul211 + 1 << 2) | 0;
     HEAP32[$arrayidx216 >> 2] = (HEAP32[$arrayidx216 >> 2] | 0) + $i$2;
     $arrayidx219 = $labelInfo + 1310736 + ($mul211 + 2 << 2) | 0;
     HEAP32[$arrayidx219 >> 2] = (HEAP32[$arrayidx219 >> 2] | 0) + $j$0;
     $arrayidx222 = $labelInfo + 1310736 + ($mul211 + 3 << 2) | 0;
     if ((HEAP32[$arrayidx222 >> 2] | 0) > ($i$2 | 0)) HEAP32[$arrayidx222 >> 2] = $i$2;
     HEAP32[$labelInfo + 1310736 + ($mul211 + 6 << 2) >> 2] = $j$0;
     $wk_max$3 = $wk_max$1;
     break;
    }
    $21 = HEAP32[$arrayidx85 >> 2] | 0;
    $22 = HEAP32[$labelInfo + 1179664 + (($20 << 16 >> 16) + -1 << 2) >> 2] | 0;
    L59 : do if (($21 | 0) > ($22 | 0)) {
     HEAP16[$pnt2$3 >> 1] = $22;
     $k$2 = 0;
     $wk$2 = $arraydecay;
     while (1) {
      if (($k$2 | 0) >= ($wk_max$1 | 0)) {
       $25 = $22;
       break L59;
      }
      if ((HEAP32[$wk$2 >> 2] | 0) == ($21 | 0)) HEAP32[$wk$2 >> 2] = $22;
      $k$2 = $k$2 + 1 | 0;
      $wk$2 = $wk$2 + 4 | 0;
     }
    } else {
     HEAP16[$pnt2$3 >> 1] = $21;
     if (($21 | 0) < ($22 | 0)) {
      $k$3 = 0;
      $wk$3 = $arraydecay;
      while (1) {
       if (($k$3 | 0) >= ($wk_max$1 | 0)) {
        $25 = $21;
        break L59;
       }
       if ((HEAP32[$wk$3 >> 2] | 0) == ($22 | 0)) HEAP32[$wk$3 >> 2] = $21;
       $k$3 = $k$3 + 1 | 0;
       $wk$3 = $wk$3 + 4 | 0;
      }
     } else $25 = $21;
    } while (0);
    $26 = ($25 << 16 >> 16) * 7 | 0;
    $arrayidx199 = $labelInfo + 1310736 + ($26 + -7 << 2) | 0;
    HEAP32[$arrayidx199 >> 2] = (HEAP32[$arrayidx199 >> 2] | 0) + 1;
    $arrayidx202 = $labelInfo + 1310736 + ($26 + -6 << 2) | 0;
    HEAP32[$arrayidx202 >> 2] = (HEAP32[$arrayidx202 >> 2] | 0) + $i$2;
    $arrayidx205 = $labelInfo + 1310736 + ($26 + -5 << 2) | 0;
    HEAP32[$arrayidx205 >> 2] = (HEAP32[$arrayidx205 >> 2] | 0) + $j$0;
    $wk_max$3 = $wk_max$1;
   } while (0);
   $dpnt$1 = $dpnt$1 + 1 | 0;
   $i$2 = $i$2 + 1 | 0;
   $pnt$1 = $pnt$1 + 2 | 0;
   $pnt2$3 = $pnt2$3 + 2 | 0;
   $wk_max$1 = $wk_max$3;
  }
  $dpnt$0 = $dpnt$1 + 2 | 0;
  $j$0 = $j$0 + 1 | 0;
  $pnt$0 = $pnt$1 + 4 | 0;
  $pnt2$2 = $pnt2$3 + 4 | 0;
  $wk_max$0 = $wk_max$1;
 }
 L77 : do if ((label | 0) == 50) {
  _arLog(3, 3256, $vararg_buffer);
  $retval$0 = -1;
 } else if ((label | 0) == 56) {
  $arrayidx335 = $labelInfo + 12 | 0;
  $i$3 = 1;
  $j$1 = 1;
  $wk$4 = $arraydecay;
  while (1) {
   if (($i$3 | 0) > ($wk_max$0 | 0)) break;
   $44 = HEAP32[$wk$4 >> 2] | 0;
   if (($44 | 0) == ($i$3 | 0)) {
    $cond = $j$1;
    $j$2 = $j$1 + 1 | 0;
   } else {
    $cond = HEAP32[$labelInfo + 1179664 + ($44 + -1 << 2) >> 2] | 0;
    $j$2 = $j$1;
   }
   HEAP32[$wk$4 >> 2] = $cond;
   $i$3 = $i$3 + 1 | 0;
   $j$1 = $j$2;
   $wk$4 = $wk$4 + 4 | 0;
  }
  $label_num333 = $labelInfo + 8 | 0;
  $sub356 = $j$1 + -1 | 0;
  HEAP32[$label_num333 >> 2] = $sub356;
  if (!$sub356) $retval$0 = 0; else {
   _memset($arrayidx335 | 0, 0, $sub356 << 2 | 0) | 0;
   _memset($labelInfo + 655376 | 0, 0, $sub356 << 4 | 0) | 0;
   $46 = $sub356;
   $i$4 = 0;
   while (1) {
    if (($i$4 | 0) >= ($46 | 0)) {
     $i$5 = 0;
     break;
    }
    $mul368 = $i$4 << 2;
    HEAP32[$labelInfo + 131084 + ($mul368 << 2) >> 2] = $xsize;
    HEAP32[$labelInfo + 131084 + (($mul368 | 1) << 2) >> 2] = 0;
    HEAP32[$labelInfo + 131084 + (($mul368 | 2) << 2) >> 2] = $ysize;
    HEAP32[$labelInfo + 131084 + (($mul368 | 3) << 2) >> 2] = 0;
    $46 = HEAP32[$label_num333 >> 2] | 0;
    $i$4 = $i$4 + 1 | 0;
   }
   while (1) {
    if (($i$5 | 0) >= ($wk_max$0 | 0)) {
     $i$6 = 0;
     break;
    }
    $sub388 = (HEAP32[$labelInfo + 1179664 + ($i$5 << 2) >> 2] | 0) + -1 | 0;
    $mul389 = $i$5 * 7 | 0;
    $arrayidx392 = $labelInfo + 12 + ($sub388 << 2) | 0;
    HEAP32[$arrayidx392 >> 2] = (HEAP32[$arrayidx392 >> 2] | 0) + (HEAP32[$labelInfo + 1310736 + ($mul389 << 2) >> 2] | 0);
    $mul398 = $sub388 << 1;
    $arrayidx400 = $labelInfo + 655376 + ($mul398 << 3) | 0;
    HEAPF64[$arrayidx400 >> 3] = +HEAPF64[$arrayidx400 >> 3] + +(HEAP32[$labelInfo + 1310736 + ($mul389 + 1 << 2) >> 2] | 0);
    $arrayidx408 = $labelInfo + 655376 + (($mul398 | 1) << 3) | 0;
    HEAPF64[$arrayidx408 >> 3] = +HEAPF64[$arrayidx408 >> 3] + +(HEAP32[$labelInfo + 1310736 + ($mul389 + 2 << 2) >> 2] | 0);
    $mul410 = $sub388 << 2;
    $arrayidx412 = $labelInfo + 131084 + ($mul410 << 2) | 0;
    $55 = HEAP32[$labelInfo + 1310736 + ($mul389 + 3 << 2) >> 2] | 0;
    if ((HEAP32[$arrayidx412 >> 2] | 0) > ($55 | 0)) HEAP32[$arrayidx412 >> 2] = $55;
    $arrayidx428 = $labelInfo + 131084 + (($mul410 | 1) << 2) | 0;
    $57 = HEAP32[$labelInfo + 1310736 + ($mul389 + 4 << 2) >> 2] | 0;
    if ((HEAP32[$arrayidx428 >> 2] | 0) < ($57 | 0)) HEAP32[$arrayidx428 >> 2] = $57;
    $arrayidx444 = $labelInfo + 131084 + (($mul410 | 2) << 2) | 0;
    $59 = HEAP32[$labelInfo + 1310736 + ($mul389 + 5 << 2) >> 2] | 0;
    if ((HEAP32[$arrayidx444 >> 2] | 0) > ($59 | 0)) HEAP32[$arrayidx444 >> 2] = $59;
    $arrayidx460 = $labelInfo + 131084 + (($mul410 | 3) << 2) | 0;
    $61 = HEAP32[$labelInfo + 1310736 + ($mul389 + 6 << 2) >> 2] | 0;
    if ((HEAP32[$arrayidx460 >> 2] | 0) < ($61 | 0)) HEAP32[$arrayidx460 >> 2] = $61;
    $i$5 = $i$5 + 1 | 0;
   }
   while (1) {
    if (($i$6 | 0) >= (HEAP32[$label_num333 >> 2] | 0)) {
     $retval$0 = 0;
     break L77;
    }
    $arrayidx481 = $labelInfo + 12 + ($i$6 << 2) | 0;
    $mul483 = $i$6 << 1;
    $arrayidx485 = $labelInfo + 655376 + ($mul483 << 3) | 0;
    HEAPF64[$arrayidx485 >> 3] = +HEAPF64[$arrayidx485 >> 3] / +(HEAP32[$arrayidx481 >> 2] | 0);
    $arrayidx490 = $labelInfo + 655376 + (($mul483 | 1) << 3) | 0;
    HEAPF64[$arrayidx490 >> 3] = +HEAPF64[$arrayidx490 >> 3] / +(HEAP32[$arrayidx481 >> 2] | 0);
    $i$6 = $i$6 + 1 | 0;
   }
  }
 } while (0);
 STACKTOP = sp;
 return $retval$0 | 0;
}

function _arLabelingSubEWZ($image, $xsize, $ysize, $image_thresh, $labelInfo) {
 $image = $image | 0;
 $xsize = $xsize | 0;
 $ysize = $ysize | 0;
 $image_thresh = $image_thresh | 0;
 $labelInfo = $labelInfo | 0;
 var $$sink = 0, $0 = 0, $10 = 0, $11 = 0, $12 = 0, $15 = 0, $16 = 0, $20 = 0, $21 = 0, $22 = 0, $25 = 0, $26 = 0, $38 = 0, $39 = 0, $4 = 0, $44 = 0, $46 = 0, $5 = 0, $55 = 0, $57 = 0, $59 = 0, $61 = 0, $9 = 0, $add = 0, $add$ptr131 = 0, $add269 = 0, $add274$sink = 0, $arraydecay = 0, $arrayidx120 = 0, $arrayidx123 = 0, $arrayidx126 = 0, $arrayidx187 = 0, $arrayidx190 = 0, $arrayidx193 = 0, $arrayidx201 = 0, $arrayidx204 = 0, $arrayidx207 = 0, $arrayidx210 = 0, $arrayidx232 = 0, $arrayidx235 = 0, $arrayidx238 = 0, $arrayidx241 = 0, $arrayidx261 = 0, $arrayidx264 = 0, $arrayidx267 = 0, $arrayidx325 = 0, $arrayidx382 = 0, $arrayidx390 = 0, $arrayidx398 = 0, $arrayidx402 = 0, $arrayidx41 = 0, $arrayidx418 = 0, $arrayidx434 = 0, $arrayidx450 = 0, $arrayidx471 = 0, $arrayidx475 = 0, $arrayidx480 = 0, $arrayidx50 = 0, $arrayidx53 = 0, $arrayidx56 = 0, $arrayidx73 = 0, $cmp67 = 0, $cond = 0, $dpnt$0 = 0, $dpnt$1 = 0, $i$0 = 0, $i$1 = 0, $i$2 = 0, $i$3 = 0, $i$4 = 0, $i$5 = 0, $i$6 = 0, $inc278 = 0, $j$0 = 0, $j$1 = 0, $j$2 = 0, $k$0 = 0, $k$1 = 0, $k$2 = 0, $k$3 = 0, $label_num323 = 0, $mul199 = 0, $mul230 = 0, $mul288 = 0, $mul358 = 0, $mul379 = 0, $mul388 = 0, $mul400 = 0, $mul473 = 0, $pnt$0 = 0, $pnt$1 = 0, $pnt1$0 = 0, $pnt1$1 = 0, $pnt2$0 = 0, $pnt2$1 = 0, $pnt2$2 = 0, $pnt2$3 = 0, $pnt_thresh$0 = 0, $pnt_thresh$1 = 0, $retval$0 = 0, $sub = 0, $sub346 = 0, $sub378 = 0, $sub40 = 0, $sub7 = 0, $sub72 = 0, $sub76 = 0, $vararg_buffer = 0, $wk$0 = 0, $wk$1 = 0, $wk$2 = 0, $wk$3 = 0, $wk$4 = 0, $wk_max$0 = 0, $wk_max$1 = 0, $wk_max$2 = 0, $wk_max$3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $vararg_buffer = sp;
 $0 = HEAP32[$labelInfo >> 2] | 0;
 $sub = $ysize + -1 | 0;
 $i$0 = 0;
 $pnt1$0 = $0;
 $pnt2$0 = $0 + ((Math_imul($sub, $xsize) | 0) << 1) | 0;
 while (1) {
  if (($i$0 | 0) >= ($xsize | 0)) break;
  HEAP16[$pnt2$0 >> 1] = 0;
  HEAP16[$pnt1$0 >> 1] = 0;
  $i$0 = $i$0 + 1 | 0;
  $pnt1$0 = $pnt1$0 + 2 | 0;
  $pnt2$0 = $pnt2$0 + 2 | 0;
 }
 $sub7 = $xsize + -1 | 0;
 $i$1 = 0;
 $pnt1$1 = $0;
 $pnt2$1 = $0 + ($sub7 << 1) | 0;
 while (1) {
  if (($i$1 | 0) >= ($ysize | 0)) break;
  HEAP16[$pnt2$1 >> 1] = 0;
  HEAP16[$pnt1$1 >> 1] = 0;
  $i$1 = $i$1 + 1 | 0;
  $pnt1$1 = $pnt1$1 + ($xsize << 1) | 0;
  $pnt2$1 = $pnt2$1 + ($xsize << 1) | 0;
 }
 $arraydecay = $labelInfo + 1179664 | 0;
 $add = $xsize + 1 | 0;
 $sub40 = 0 - $xsize | 0;
 $dpnt$0 = (HEAP32[$labelInfo + 4 >> 2] | 0) + $add | 0;
 $j$0 = 1;
 $pnt$0 = $image + $add | 0;
 $pnt2$2 = $0 + ($add << 1) | 0;
 $pnt_thresh$0 = $image_thresh + $add | 0;
 $wk_max$0 = 0;
 L9 : while (1) {
  if (($j$0 | 0) < ($sub | 0)) {
   $dpnt$1 = $dpnt$0;
   $i$2 = 1;
   $pnt$1 = $pnt$0;
   $pnt2$3 = $pnt2$2;
   $pnt_thresh$1 = $pnt_thresh$0;
   $wk_max$1 = $wk_max$0;
  } else {
   label = 56;
   break;
  }
  while (1) {
   if (($i$2 | 0) >= ($sub7 | 0)) break;
   do if ((HEAPU8[$pnt$1 >> 0] | 0) > (HEAPU8[$pnt_thresh$1 >> 0] | 0)) {
    HEAP8[$dpnt$1 >> 0] = -1;
    $arrayidx41 = $pnt2$3 + ($sub40 << 1) | 0;
    $4 = HEAP16[$arrayidx41 >> 1] | 0;
    if ($4 << 16 >> 16 > 0) {
     HEAP16[$pnt2$3 >> 1] = $4;
     $5 = ($4 << 16 >> 16) * 7 | 0;
     $arrayidx50 = $labelInfo + 1310736 + ($5 + -7 << 2) | 0;
     HEAP32[$arrayidx50 >> 2] = (HEAP32[$arrayidx50 >> 2] | 0) + 1;
     $arrayidx53 = $labelInfo + 1310736 + ($5 + -6 << 2) | 0;
     HEAP32[$arrayidx53 >> 2] = (HEAP32[$arrayidx53 >> 2] | 0) + $i$2;
     $arrayidx56 = $labelInfo + 1310736 + ($5 + -5 << 2) | 0;
     HEAP32[$arrayidx56 >> 2] = (HEAP32[$arrayidx56 >> 2] | 0) + $j$0;
     HEAP32[$labelInfo + 1310736 + ($5 + -1 << 2) >> 2] = $j$0;
     $wk_max$3 = $wk_max$1;
     break;
    }
    $9 = HEAP16[$arrayidx41 + 2 >> 1] | 0;
    $10 = HEAP16[$arrayidx41 + -2 >> 1] | 0;
    $cmp67 = $10 << 16 >> 16 > 0;
    $sub76 = ($10 << 16 >> 16) + -1 | 0;
    $add$ptr131 = $pnt2$3 + -2 | 0;
    if ($9 << 16 >> 16 <= 0) {
     if ($cmp67) {
      HEAP16[$pnt2$3 >> 1] = $10;
      $mul230 = $sub76 * 7 | 0;
      $arrayidx232 = $labelInfo + 1310736 + ($mul230 << 2) | 0;
      HEAP32[$arrayidx232 >> 2] = (HEAP32[$arrayidx232 >> 2] | 0) + 1;
      $arrayidx235 = $labelInfo + 1310736 + ($mul230 + 1 << 2) | 0;
      HEAP32[$arrayidx235 >> 2] = (HEAP32[$arrayidx235 >> 2] | 0) + $i$2;
      $arrayidx238 = $labelInfo + 1310736 + ($mul230 + 2 << 2) | 0;
      HEAP32[$arrayidx238 >> 2] = (HEAP32[$arrayidx238 >> 2] | 0) + $j$0;
      $arrayidx241 = $labelInfo + 1310736 + ($mul230 + 4 << 2) | 0;
      if ((HEAP32[$arrayidx241 >> 2] | 0) < ($i$2 | 0)) HEAP32[$arrayidx241 >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($mul230 + 6 << 2) >> 2] = $j$0;
      $wk_max$3 = $wk_max$1;
      break;
     }
     $38 = HEAP16[$add$ptr131 >> 1] | 0;
     if ($38 << 16 >> 16 > 0) {
      HEAP16[$pnt2$3 >> 1] = $38;
      $39 = ($38 << 16 >> 16) * 7 | 0;
      $arrayidx261 = $labelInfo + 1310736 + ($39 + -7 << 2) | 0;
      HEAP32[$arrayidx261 >> 2] = (HEAP32[$arrayidx261 >> 2] | 0) + 1;
      $arrayidx264 = $labelInfo + 1310736 + ($39 + -6 << 2) | 0;
      HEAP32[$arrayidx264 >> 2] = (HEAP32[$arrayidx264 >> 2] | 0) + $i$2;
      $arrayidx267 = $labelInfo + 1310736 + ($39 + -5 << 2) | 0;
      HEAP32[$arrayidx267 >> 2] = (HEAP32[$arrayidx267 >> 2] | 0) + $j$0;
      $add269 = $39 + -3 | 0;
      if ((HEAP32[$labelInfo + 1310736 + ($add269 << 2) >> 2] | 0) < ($i$2 | 0)) {
       $$sink = $i$2;
       $add274$sink = $add269;
       $wk_max$2 = $wk_max$1;
      } else {
       $wk_max$3 = $wk_max$1;
       break;
      }
     } else {
      $inc278 = $wk_max$1 + 1 | 0;
      if (($wk_max$1 | 0) > 32767) {
       label = 50;
       break L9;
      }
      HEAP16[$pnt2$3 >> 1] = $inc278;
      HEAP32[$labelInfo + 1179664 + ($wk_max$1 << 2) >> 2] = $inc278 << 16 >> 16;
      $mul288 = $wk_max$1 * 7 | 0;
      HEAP32[$labelInfo + 1310736 + ($mul288 << 2) >> 2] = 1;
      HEAP32[$labelInfo + 1310736 + ($mul288 + 1 << 2) >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($mul288 + 2 << 2) >> 2] = $j$0;
      HEAP32[$labelInfo + 1310736 + ($mul288 + 3 << 2) >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($mul288 + 4 << 2) >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($mul288 + 5 << 2) >> 2] = $j$0;
      $$sink = $j$0;
      $add274$sink = $mul288 + 6 | 0;
      $wk_max$2 = $inc278;
     }
     HEAP32[$labelInfo + 1310736 + ($add274$sink << 2) >> 2] = $$sink;
     $wk_max$3 = $wk_max$2;
     break;
    }
    $sub72 = ($9 << 16 >> 16) + -1 | 0;
    $arrayidx73 = $labelInfo + 1179664 + ($sub72 << 2) | 0;
    if ($cmp67) {
     $11 = HEAP32[$arrayidx73 >> 2] | 0;
     $12 = HEAP32[$labelInfo + 1179664 + ($sub76 << 2) >> 2] | 0;
     L35 : do if (($11 | 0) > ($12 | 0)) {
      HEAP16[$pnt2$3 >> 1] = $12;
      $k$0 = 0;
      $wk$0 = $arraydecay;
      while (1) {
       if (($k$0 | 0) >= ($wk_max$1 | 0)) {
        $15 = $12;
        break L35;
       }
       if ((HEAP32[$wk$0 >> 2] | 0) == ($11 | 0)) HEAP32[$wk$0 >> 2] = $12;
       $k$0 = $k$0 + 1 | 0;
       $wk$0 = $wk$0 + 4 | 0;
      }
     } else {
      HEAP16[$pnt2$3 >> 1] = $11;
      if (($11 | 0) < ($12 | 0)) {
       $k$1 = 0;
       $wk$1 = $arraydecay;
       while (1) {
        if (($k$1 | 0) >= ($wk_max$1 | 0)) {
         $15 = $11;
         break L35;
        }
        if ((HEAP32[$wk$1 >> 2] | 0) == ($12 | 0)) HEAP32[$wk$1 >> 2] = $11;
        $k$1 = $k$1 + 1 | 0;
        $wk$1 = $wk$1 + 4 | 0;
       }
      } else $15 = $11;
     } while (0);
     $16 = ($15 << 16 >> 16) * 7 | 0;
     $arrayidx120 = $labelInfo + 1310736 + ($16 + -7 << 2) | 0;
     HEAP32[$arrayidx120 >> 2] = (HEAP32[$arrayidx120 >> 2] | 0) + 1;
     $arrayidx123 = $labelInfo + 1310736 + ($16 + -6 << 2) | 0;
     HEAP32[$arrayidx123 >> 2] = (HEAP32[$arrayidx123 >> 2] | 0) + $i$2;
     $arrayidx126 = $labelInfo + 1310736 + ($16 + -5 << 2) | 0;
     HEAP32[$arrayidx126 >> 2] = (HEAP32[$arrayidx126 >> 2] | 0) + $j$0;
     HEAP32[$labelInfo + 1310736 + ($16 + -1 << 2) >> 2] = $j$0;
     $wk_max$3 = $wk_max$1;
     break;
    }
    $20 = HEAP16[$add$ptr131 >> 1] | 0;
    if ($20 << 16 >> 16 <= 0) {
     HEAP16[$pnt2$3 >> 1] = $9;
     $mul199 = $sub72 * 7 | 0;
     $arrayidx201 = $labelInfo + 1310736 + ($mul199 << 2) | 0;
     HEAP32[$arrayidx201 >> 2] = (HEAP32[$arrayidx201 >> 2] | 0) + 1;
     $arrayidx204 = $labelInfo + 1310736 + ($mul199 + 1 << 2) | 0;
     HEAP32[$arrayidx204 >> 2] = (HEAP32[$arrayidx204 >> 2] | 0) + $i$2;
     $arrayidx207 = $labelInfo + 1310736 + ($mul199 + 2 << 2) | 0;
     HEAP32[$arrayidx207 >> 2] = (HEAP32[$arrayidx207 >> 2] | 0) + $j$0;
     $arrayidx210 = $labelInfo + 1310736 + ($mul199 + 3 << 2) | 0;
     if ((HEAP32[$arrayidx210 >> 2] | 0) > ($i$2 | 0)) HEAP32[$arrayidx210 >> 2] = $i$2;
     HEAP32[$labelInfo + 1310736 + ($mul199 + 6 << 2) >> 2] = $j$0;
     $wk_max$3 = $wk_max$1;
     break;
    }
    $21 = HEAP32[$arrayidx73 >> 2] | 0;
    $22 = HEAP32[$labelInfo + 1179664 + (($20 << 16 >> 16) + -1 << 2) >> 2] | 0;
    L58 : do if (($21 | 0) > ($22 | 0)) {
     HEAP16[$pnt2$3 >> 1] = $22;
     $k$2 = 0;
     $wk$2 = $arraydecay;
     while (1) {
      if (($k$2 | 0) >= ($wk_max$1 | 0)) {
       $25 = $22;
       break L58;
      }
      if ((HEAP32[$wk$2 >> 2] | 0) == ($21 | 0)) HEAP32[$wk$2 >> 2] = $22;
      $k$2 = $k$2 + 1 | 0;
      $wk$2 = $wk$2 + 4 | 0;
     }
    } else {
     HEAP16[$pnt2$3 >> 1] = $21;
     if (($21 | 0) < ($22 | 0)) {
      $k$3 = 0;
      $wk$3 = $arraydecay;
      while (1) {
       if (($k$3 | 0) >= ($wk_max$1 | 0)) {
        $25 = $21;
        break L58;
       }
       if ((HEAP32[$wk$3 >> 2] | 0) == ($22 | 0)) HEAP32[$wk$3 >> 2] = $21;
       $k$3 = $k$3 + 1 | 0;
       $wk$3 = $wk$3 + 4 | 0;
      }
     } else $25 = $21;
    } while (0);
    $26 = ($25 << 16 >> 16) * 7 | 0;
    $arrayidx187 = $labelInfo + 1310736 + ($26 + -7 << 2) | 0;
    HEAP32[$arrayidx187 >> 2] = (HEAP32[$arrayidx187 >> 2] | 0) + 1;
    $arrayidx190 = $labelInfo + 1310736 + ($26 + -6 << 2) | 0;
    HEAP32[$arrayidx190 >> 2] = (HEAP32[$arrayidx190 >> 2] | 0) + $i$2;
    $arrayidx193 = $labelInfo + 1310736 + ($26 + -5 << 2) | 0;
    HEAP32[$arrayidx193 >> 2] = (HEAP32[$arrayidx193 >> 2] | 0) + $j$0;
    $wk_max$3 = $wk_max$1;
   } else {
    HEAP16[$pnt2$3 >> 1] = 0;
    HEAP8[$dpnt$1 >> 0] = 0;
    $wk_max$3 = $wk_max$1;
   } while (0);
   $dpnt$1 = $dpnt$1 + 1 | 0;
   $i$2 = $i$2 + 1 | 0;
   $pnt$1 = $pnt$1 + 1 | 0;
   $pnt2$3 = $pnt2$3 + 2 | 0;
   $pnt_thresh$1 = $pnt_thresh$1 + 1 | 0;
   $wk_max$1 = $wk_max$3;
  }
  $dpnt$0 = $dpnt$1 + 2 | 0;
  $j$0 = $j$0 + 1 | 0;
  $pnt$0 = $pnt$1 + 2 | 0;
  $pnt2$2 = $pnt2$3 + 4 | 0;
  $pnt_thresh$0 = $pnt_thresh$1 + 2 | 0;
  $wk_max$0 = $wk_max$1;
 }
 L77 : do if ((label | 0) == 50) {
  _arLog(3, 3256, $vararg_buffer);
  $retval$0 = -1;
 } else if ((label | 0) == 56) {
  $arrayidx325 = $labelInfo + 12 | 0;
  $i$3 = 1;
  $j$1 = 1;
  $wk$4 = $arraydecay;
  while (1) {
   if (($i$3 | 0) > ($wk_max$0 | 0)) break;
   $44 = HEAP32[$wk$4 >> 2] | 0;
   if (($44 | 0) == ($i$3 | 0)) {
    $cond = $j$1;
    $j$2 = $j$1 + 1 | 0;
   } else {
    $cond = HEAP32[$labelInfo + 1179664 + ($44 + -1 << 2) >> 2] | 0;
    $j$2 = $j$1;
   }
   HEAP32[$wk$4 >> 2] = $cond;
   $i$3 = $i$3 + 1 | 0;
   $j$1 = $j$2;
   $wk$4 = $wk$4 + 4 | 0;
  }
  $label_num323 = $labelInfo + 8 | 0;
  $sub346 = $j$1 + -1 | 0;
  HEAP32[$label_num323 >> 2] = $sub346;
  if (!$sub346) $retval$0 = 0; else {
   _memset($arrayidx325 | 0, 0, $sub346 << 2 | 0) | 0;
   _memset($labelInfo + 655376 | 0, 0, $sub346 << 4 | 0) | 0;
   $46 = $sub346;
   $i$4 = 0;
   while (1) {
    if (($i$4 | 0) >= ($46 | 0)) {
     $i$5 = 0;
     break;
    }
    $mul358 = $i$4 << 2;
    HEAP32[$labelInfo + 131084 + ($mul358 << 2) >> 2] = $xsize;
    HEAP32[$labelInfo + 131084 + (($mul358 | 1) << 2) >> 2] = 0;
    HEAP32[$labelInfo + 131084 + (($mul358 | 2) << 2) >> 2] = $ysize;
    HEAP32[$labelInfo + 131084 + (($mul358 | 3) << 2) >> 2] = 0;
    $46 = HEAP32[$label_num323 >> 2] | 0;
    $i$4 = $i$4 + 1 | 0;
   }
   while (1) {
    if (($i$5 | 0) >= ($wk_max$0 | 0)) {
     $i$6 = 0;
     break;
    }
    $sub378 = (HEAP32[$labelInfo + 1179664 + ($i$5 << 2) >> 2] | 0) + -1 | 0;
    $mul379 = $i$5 * 7 | 0;
    $arrayidx382 = $labelInfo + 12 + ($sub378 << 2) | 0;
    HEAP32[$arrayidx382 >> 2] = (HEAP32[$arrayidx382 >> 2] | 0) + (HEAP32[$labelInfo + 1310736 + ($mul379 << 2) >> 2] | 0);
    $mul388 = $sub378 << 1;
    $arrayidx390 = $labelInfo + 655376 + ($mul388 << 3) | 0;
    HEAPF64[$arrayidx390 >> 3] = +HEAPF64[$arrayidx390 >> 3] + +(HEAP32[$labelInfo + 1310736 + ($mul379 + 1 << 2) >> 2] | 0);
    $arrayidx398 = $labelInfo + 655376 + (($mul388 | 1) << 3) | 0;
    HEAPF64[$arrayidx398 >> 3] = +HEAPF64[$arrayidx398 >> 3] + +(HEAP32[$labelInfo + 1310736 + ($mul379 + 2 << 2) >> 2] | 0);
    $mul400 = $sub378 << 2;
    $arrayidx402 = $labelInfo + 131084 + ($mul400 << 2) | 0;
    $55 = HEAP32[$labelInfo + 1310736 + ($mul379 + 3 << 2) >> 2] | 0;
    if ((HEAP32[$arrayidx402 >> 2] | 0) > ($55 | 0)) HEAP32[$arrayidx402 >> 2] = $55;
    $arrayidx418 = $labelInfo + 131084 + (($mul400 | 1) << 2) | 0;
    $57 = HEAP32[$labelInfo + 1310736 + ($mul379 + 4 << 2) >> 2] | 0;
    if ((HEAP32[$arrayidx418 >> 2] | 0) < ($57 | 0)) HEAP32[$arrayidx418 >> 2] = $57;
    $arrayidx434 = $labelInfo + 131084 + (($mul400 | 2) << 2) | 0;
    $59 = HEAP32[$labelInfo + 1310736 + ($mul379 + 5 << 2) >> 2] | 0;
    if ((HEAP32[$arrayidx434 >> 2] | 0) > ($59 | 0)) HEAP32[$arrayidx434 >> 2] = $59;
    $arrayidx450 = $labelInfo + 131084 + (($mul400 | 3) << 2) | 0;
    $61 = HEAP32[$labelInfo + 1310736 + ($mul379 + 6 << 2) >> 2] | 0;
    if ((HEAP32[$arrayidx450 >> 2] | 0) < ($61 | 0)) HEAP32[$arrayidx450 >> 2] = $61;
    $i$5 = $i$5 + 1 | 0;
   }
   while (1) {
    if (($i$6 | 0) >= (HEAP32[$label_num323 >> 2] | 0)) {
     $retval$0 = 0;
     break L77;
    }
    $arrayidx471 = $labelInfo + 12 + ($i$6 << 2) | 0;
    $mul473 = $i$6 << 1;
    $arrayidx475 = $labelInfo + 655376 + ($mul473 << 3) | 0;
    HEAPF64[$arrayidx475 >> 3] = +HEAPF64[$arrayidx475 >> 3] / +(HEAP32[$arrayidx471 >> 2] | 0);
    $arrayidx480 = $labelInfo + 655376 + (($mul473 | 1) << 3) | 0;
    HEAPF64[$arrayidx480 >> 3] = +HEAPF64[$arrayidx480 >> 3] / +(HEAP32[$arrayidx471 >> 2] | 0);
    $i$6 = $i$6 + 1 | 0;
   }
  }
 } while (0);
 STACKTOP = sp;
 return $retval$0 | 0;
}

function _arLabelingSubEBZ($image, $xsize, $ysize, $image_thresh, $labelInfo) {
 $image = $image | 0;
 $xsize = $xsize | 0;
 $ysize = $ysize | 0;
 $image_thresh = $image_thresh | 0;
 $labelInfo = $labelInfo | 0;
 var $$sink = 0, $0 = 0, $10 = 0, $11 = 0, $12 = 0, $15 = 0, $16 = 0, $20 = 0, $21 = 0, $22 = 0, $25 = 0, $26 = 0, $38 = 0, $39 = 0, $4 = 0, $44 = 0, $46 = 0, $5 = 0, $55 = 0, $57 = 0, $59 = 0, $61 = 0, $9 = 0, $add = 0, $add$ptr131 = 0, $add269 = 0, $add274$sink = 0, $arraydecay = 0, $arrayidx120 = 0, $arrayidx123 = 0, $arrayidx126 = 0, $arrayidx187 = 0, $arrayidx190 = 0, $arrayidx193 = 0, $arrayidx201 = 0, $arrayidx204 = 0, $arrayidx207 = 0, $arrayidx210 = 0, $arrayidx232 = 0, $arrayidx235 = 0, $arrayidx238 = 0, $arrayidx241 = 0, $arrayidx261 = 0, $arrayidx264 = 0, $arrayidx267 = 0, $arrayidx325 = 0, $arrayidx382 = 0, $arrayidx390 = 0, $arrayidx398 = 0, $arrayidx402 = 0, $arrayidx41 = 0, $arrayidx418 = 0, $arrayidx434 = 0, $arrayidx450 = 0, $arrayidx471 = 0, $arrayidx475 = 0, $arrayidx480 = 0, $arrayidx50 = 0, $arrayidx53 = 0, $arrayidx56 = 0, $arrayidx73 = 0, $cmp67 = 0, $cond = 0, $dpnt$0 = 0, $dpnt$1 = 0, $i$0 = 0, $i$1 = 0, $i$2 = 0, $i$3 = 0, $i$4 = 0, $i$5 = 0, $i$6 = 0, $inc278 = 0, $j$0 = 0, $j$1 = 0, $j$2 = 0, $k$0 = 0, $k$1 = 0, $k$2 = 0, $k$3 = 0, $label_num323 = 0, $mul199 = 0, $mul230 = 0, $mul288 = 0, $mul358 = 0, $mul379 = 0, $mul388 = 0, $mul400 = 0, $mul473 = 0, $pnt$0 = 0, $pnt$1 = 0, $pnt1$0 = 0, $pnt1$1 = 0, $pnt2$0 = 0, $pnt2$1 = 0, $pnt2$2 = 0, $pnt2$3 = 0, $pnt_thresh$0 = 0, $pnt_thresh$1 = 0, $retval$0 = 0, $sub = 0, $sub346 = 0, $sub378 = 0, $sub40 = 0, $sub7 = 0, $sub72 = 0, $sub76 = 0, $vararg_buffer = 0, $wk$0 = 0, $wk$1 = 0, $wk$2 = 0, $wk$3 = 0, $wk$4 = 0, $wk_max$0 = 0, $wk_max$1 = 0, $wk_max$2 = 0, $wk_max$3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $vararg_buffer = sp;
 $0 = HEAP32[$labelInfo >> 2] | 0;
 $sub = $ysize + -1 | 0;
 $i$0 = 0;
 $pnt1$0 = $0;
 $pnt2$0 = $0 + ((Math_imul($sub, $xsize) | 0) << 1) | 0;
 while (1) {
  if (($i$0 | 0) >= ($xsize | 0)) break;
  HEAP16[$pnt2$0 >> 1] = 0;
  HEAP16[$pnt1$0 >> 1] = 0;
  $i$0 = $i$0 + 1 | 0;
  $pnt1$0 = $pnt1$0 + 2 | 0;
  $pnt2$0 = $pnt2$0 + 2 | 0;
 }
 $sub7 = $xsize + -1 | 0;
 $i$1 = 0;
 $pnt1$1 = $0;
 $pnt2$1 = $0 + ($sub7 << 1) | 0;
 while (1) {
  if (($i$1 | 0) >= ($ysize | 0)) break;
  HEAP16[$pnt2$1 >> 1] = 0;
  HEAP16[$pnt1$1 >> 1] = 0;
  $i$1 = $i$1 + 1 | 0;
  $pnt1$1 = $pnt1$1 + ($xsize << 1) | 0;
  $pnt2$1 = $pnt2$1 + ($xsize << 1) | 0;
 }
 $arraydecay = $labelInfo + 1179664 | 0;
 $add = $xsize + 1 | 0;
 $sub40 = 0 - $xsize | 0;
 $dpnt$0 = (HEAP32[$labelInfo + 4 >> 2] | 0) + $add | 0;
 $j$0 = 1;
 $pnt$0 = $image + $add | 0;
 $pnt2$2 = $0 + ($add << 1) | 0;
 $pnt_thresh$0 = $image_thresh + $add | 0;
 $wk_max$0 = 0;
 L9 : while (1) {
  if (($j$0 | 0) < ($sub | 0)) {
   $dpnt$1 = $dpnt$0;
   $i$2 = 1;
   $pnt$1 = $pnt$0;
   $pnt2$3 = $pnt2$2;
   $pnt_thresh$1 = $pnt_thresh$0;
   $wk_max$1 = $wk_max$0;
  } else {
   label = 56;
   break;
  }
  while (1) {
   if (($i$2 | 0) >= ($sub7 | 0)) break;
   do if ((HEAPU8[$pnt$1 >> 0] | 0) > (HEAPU8[$pnt_thresh$1 >> 0] | 0)) {
    HEAP16[$pnt2$3 >> 1] = 0;
    HEAP8[$dpnt$1 >> 0] = 0;
    $wk_max$3 = $wk_max$1;
   } else {
    HEAP8[$dpnt$1 >> 0] = -1;
    $arrayidx41 = $pnt2$3 + ($sub40 << 1) | 0;
    $4 = HEAP16[$arrayidx41 >> 1] | 0;
    if ($4 << 16 >> 16 > 0) {
     HEAP16[$pnt2$3 >> 1] = $4;
     $5 = ($4 << 16 >> 16) * 7 | 0;
     $arrayidx50 = $labelInfo + 1310736 + ($5 + -7 << 2) | 0;
     HEAP32[$arrayidx50 >> 2] = (HEAP32[$arrayidx50 >> 2] | 0) + 1;
     $arrayidx53 = $labelInfo + 1310736 + ($5 + -6 << 2) | 0;
     HEAP32[$arrayidx53 >> 2] = (HEAP32[$arrayidx53 >> 2] | 0) + $i$2;
     $arrayidx56 = $labelInfo + 1310736 + ($5 + -5 << 2) | 0;
     HEAP32[$arrayidx56 >> 2] = (HEAP32[$arrayidx56 >> 2] | 0) + $j$0;
     HEAP32[$labelInfo + 1310736 + ($5 + -1 << 2) >> 2] = $j$0;
     $wk_max$3 = $wk_max$1;
     break;
    }
    $9 = HEAP16[$arrayidx41 + 2 >> 1] | 0;
    $10 = HEAP16[$arrayidx41 + -2 >> 1] | 0;
    $cmp67 = $10 << 16 >> 16 > 0;
    $sub76 = ($10 << 16 >> 16) + -1 | 0;
    $add$ptr131 = $pnt2$3 + -2 | 0;
    if ($9 << 16 >> 16 <= 0) {
     if ($cmp67) {
      HEAP16[$pnt2$3 >> 1] = $10;
      $mul230 = $sub76 * 7 | 0;
      $arrayidx232 = $labelInfo + 1310736 + ($mul230 << 2) | 0;
      HEAP32[$arrayidx232 >> 2] = (HEAP32[$arrayidx232 >> 2] | 0) + 1;
      $arrayidx235 = $labelInfo + 1310736 + ($mul230 + 1 << 2) | 0;
      HEAP32[$arrayidx235 >> 2] = (HEAP32[$arrayidx235 >> 2] | 0) + $i$2;
      $arrayidx238 = $labelInfo + 1310736 + ($mul230 + 2 << 2) | 0;
      HEAP32[$arrayidx238 >> 2] = (HEAP32[$arrayidx238 >> 2] | 0) + $j$0;
      $arrayidx241 = $labelInfo + 1310736 + ($mul230 + 4 << 2) | 0;
      if ((HEAP32[$arrayidx241 >> 2] | 0) < ($i$2 | 0)) HEAP32[$arrayidx241 >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($mul230 + 6 << 2) >> 2] = $j$0;
      $wk_max$3 = $wk_max$1;
      break;
     }
     $38 = HEAP16[$add$ptr131 >> 1] | 0;
     if ($38 << 16 >> 16 > 0) {
      HEAP16[$pnt2$3 >> 1] = $38;
      $39 = ($38 << 16 >> 16) * 7 | 0;
      $arrayidx261 = $labelInfo + 1310736 + ($39 + -7 << 2) | 0;
      HEAP32[$arrayidx261 >> 2] = (HEAP32[$arrayidx261 >> 2] | 0) + 1;
      $arrayidx264 = $labelInfo + 1310736 + ($39 + -6 << 2) | 0;
      HEAP32[$arrayidx264 >> 2] = (HEAP32[$arrayidx264 >> 2] | 0) + $i$2;
      $arrayidx267 = $labelInfo + 1310736 + ($39 + -5 << 2) | 0;
      HEAP32[$arrayidx267 >> 2] = (HEAP32[$arrayidx267 >> 2] | 0) + $j$0;
      $add269 = $39 + -3 | 0;
      if ((HEAP32[$labelInfo + 1310736 + ($add269 << 2) >> 2] | 0) < ($i$2 | 0)) {
       $$sink = $i$2;
       $add274$sink = $add269;
       $wk_max$2 = $wk_max$1;
      } else {
       $wk_max$3 = $wk_max$1;
       break;
      }
     } else {
      $inc278 = $wk_max$1 + 1 | 0;
      if (($wk_max$1 | 0) > 32767) {
       label = 50;
       break L9;
      }
      HEAP16[$pnt2$3 >> 1] = $inc278;
      HEAP32[$labelInfo + 1179664 + ($wk_max$1 << 2) >> 2] = $inc278 << 16 >> 16;
      $mul288 = $wk_max$1 * 7 | 0;
      HEAP32[$labelInfo + 1310736 + ($mul288 << 2) >> 2] = 1;
      HEAP32[$labelInfo + 1310736 + ($mul288 + 1 << 2) >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($mul288 + 2 << 2) >> 2] = $j$0;
      HEAP32[$labelInfo + 1310736 + ($mul288 + 3 << 2) >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($mul288 + 4 << 2) >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($mul288 + 5 << 2) >> 2] = $j$0;
      $$sink = $j$0;
      $add274$sink = $mul288 + 6 | 0;
      $wk_max$2 = $inc278;
     }
     HEAP32[$labelInfo + 1310736 + ($add274$sink << 2) >> 2] = $$sink;
     $wk_max$3 = $wk_max$2;
     break;
    }
    $sub72 = ($9 << 16 >> 16) + -1 | 0;
    $arrayidx73 = $labelInfo + 1179664 + ($sub72 << 2) | 0;
    if ($cmp67) {
     $11 = HEAP32[$arrayidx73 >> 2] | 0;
     $12 = HEAP32[$labelInfo + 1179664 + ($sub76 << 2) >> 2] | 0;
     L36 : do if (($11 | 0) > ($12 | 0)) {
      HEAP16[$pnt2$3 >> 1] = $12;
      $k$0 = 0;
      $wk$0 = $arraydecay;
      while (1) {
       if (($k$0 | 0) >= ($wk_max$1 | 0)) {
        $15 = $12;
        break L36;
       }
       if ((HEAP32[$wk$0 >> 2] | 0) == ($11 | 0)) HEAP32[$wk$0 >> 2] = $12;
       $k$0 = $k$0 + 1 | 0;
       $wk$0 = $wk$0 + 4 | 0;
      }
     } else {
      HEAP16[$pnt2$3 >> 1] = $11;
      if (($11 | 0) < ($12 | 0)) {
       $k$1 = 0;
       $wk$1 = $arraydecay;
       while (1) {
        if (($k$1 | 0) >= ($wk_max$1 | 0)) {
         $15 = $11;
         break L36;
        }
        if ((HEAP32[$wk$1 >> 2] | 0) == ($12 | 0)) HEAP32[$wk$1 >> 2] = $11;
        $k$1 = $k$1 + 1 | 0;
        $wk$1 = $wk$1 + 4 | 0;
       }
      } else $15 = $11;
     } while (0);
     $16 = ($15 << 16 >> 16) * 7 | 0;
     $arrayidx120 = $labelInfo + 1310736 + ($16 + -7 << 2) | 0;
     HEAP32[$arrayidx120 >> 2] = (HEAP32[$arrayidx120 >> 2] | 0) + 1;
     $arrayidx123 = $labelInfo + 1310736 + ($16 + -6 << 2) | 0;
     HEAP32[$arrayidx123 >> 2] = (HEAP32[$arrayidx123 >> 2] | 0) + $i$2;
     $arrayidx126 = $labelInfo + 1310736 + ($16 + -5 << 2) | 0;
     HEAP32[$arrayidx126 >> 2] = (HEAP32[$arrayidx126 >> 2] | 0) + $j$0;
     HEAP32[$labelInfo + 1310736 + ($16 + -1 << 2) >> 2] = $j$0;
     $wk_max$3 = $wk_max$1;
     break;
    }
    $20 = HEAP16[$add$ptr131 >> 1] | 0;
    if ($20 << 16 >> 16 <= 0) {
     HEAP16[$pnt2$3 >> 1] = $9;
     $mul199 = $sub72 * 7 | 0;
     $arrayidx201 = $labelInfo + 1310736 + ($mul199 << 2) | 0;
     HEAP32[$arrayidx201 >> 2] = (HEAP32[$arrayidx201 >> 2] | 0) + 1;
     $arrayidx204 = $labelInfo + 1310736 + ($mul199 + 1 << 2) | 0;
     HEAP32[$arrayidx204 >> 2] = (HEAP32[$arrayidx204 >> 2] | 0) + $i$2;
     $arrayidx207 = $labelInfo + 1310736 + ($mul199 + 2 << 2) | 0;
     HEAP32[$arrayidx207 >> 2] = (HEAP32[$arrayidx207 >> 2] | 0) + $j$0;
     $arrayidx210 = $labelInfo + 1310736 + ($mul199 + 3 << 2) | 0;
     if ((HEAP32[$arrayidx210 >> 2] | 0) > ($i$2 | 0)) HEAP32[$arrayidx210 >> 2] = $i$2;
     HEAP32[$labelInfo + 1310736 + ($mul199 + 6 << 2) >> 2] = $j$0;
     $wk_max$3 = $wk_max$1;
     break;
    }
    $21 = HEAP32[$arrayidx73 >> 2] | 0;
    $22 = HEAP32[$labelInfo + 1179664 + (($20 << 16 >> 16) + -1 << 2) >> 2] | 0;
    L59 : do if (($21 | 0) > ($22 | 0)) {
     HEAP16[$pnt2$3 >> 1] = $22;
     $k$2 = 0;
     $wk$2 = $arraydecay;
     while (1) {
      if (($k$2 | 0) >= ($wk_max$1 | 0)) {
       $25 = $22;
       break L59;
      }
      if ((HEAP32[$wk$2 >> 2] | 0) == ($21 | 0)) HEAP32[$wk$2 >> 2] = $22;
      $k$2 = $k$2 + 1 | 0;
      $wk$2 = $wk$2 + 4 | 0;
     }
    } else {
     HEAP16[$pnt2$3 >> 1] = $21;
     if (($21 | 0) < ($22 | 0)) {
      $k$3 = 0;
      $wk$3 = $arraydecay;
      while (1) {
       if (($k$3 | 0) >= ($wk_max$1 | 0)) {
        $25 = $21;
        break L59;
       }
       if ((HEAP32[$wk$3 >> 2] | 0) == ($22 | 0)) HEAP32[$wk$3 >> 2] = $21;
       $k$3 = $k$3 + 1 | 0;
       $wk$3 = $wk$3 + 4 | 0;
      }
     } else $25 = $21;
    } while (0);
    $26 = ($25 << 16 >> 16) * 7 | 0;
    $arrayidx187 = $labelInfo + 1310736 + ($26 + -7 << 2) | 0;
    HEAP32[$arrayidx187 >> 2] = (HEAP32[$arrayidx187 >> 2] | 0) + 1;
    $arrayidx190 = $labelInfo + 1310736 + ($26 + -6 << 2) | 0;
    HEAP32[$arrayidx190 >> 2] = (HEAP32[$arrayidx190 >> 2] | 0) + $i$2;
    $arrayidx193 = $labelInfo + 1310736 + ($26 + -5 << 2) | 0;
    HEAP32[$arrayidx193 >> 2] = (HEAP32[$arrayidx193 >> 2] | 0) + $j$0;
    $wk_max$3 = $wk_max$1;
   } while (0);
   $dpnt$1 = $dpnt$1 + 1 | 0;
   $i$2 = $i$2 + 1 | 0;
   $pnt$1 = $pnt$1 + 1 | 0;
   $pnt2$3 = $pnt2$3 + 2 | 0;
   $pnt_thresh$1 = $pnt_thresh$1 + 1 | 0;
   $wk_max$1 = $wk_max$3;
  }
  $dpnt$0 = $dpnt$1 + 2 | 0;
  $j$0 = $j$0 + 1 | 0;
  $pnt$0 = $pnt$1 + 2 | 0;
  $pnt2$2 = $pnt2$3 + 4 | 0;
  $pnt_thresh$0 = $pnt_thresh$1 + 2 | 0;
  $wk_max$0 = $wk_max$1;
 }
 L77 : do if ((label | 0) == 50) {
  _arLog(3, 3256, $vararg_buffer);
  $retval$0 = -1;
 } else if ((label | 0) == 56) {
  $arrayidx325 = $labelInfo + 12 | 0;
  $i$3 = 1;
  $j$1 = 1;
  $wk$4 = $arraydecay;
  while (1) {
   if (($i$3 | 0) > ($wk_max$0 | 0)) break;
   $44 = HEAP32[$wk$4 >> 2] | 0;
   if (($44 | 0) == ($i$3 | 0)) {
    $cond = $j$1;
    $j$2 = $j$1 + 1 | 0;
   } else {
    $cond = HEAP32[$labelInfo + 1179664 + ($44 + -1 << 2) >> 2] | 0;
    $j$2 = $j$1;
   }
   HEAP32[$wk$4 >> 2] = $cond;
   $i$3 = $i$3 + 1 | 0;
   $j$1 = $j$2;
   $wk$4 = $wk$4 + 4 | 0;
  }
  $label_num323 = $labelInfo + 8 | 0;
  $sub346 = $j$1 + -1 | 0;
  HEAP32[$label_num323 >> 2] = $sub346;
  if (!$sub346) $retval$0 = 0; else {
   _memset($arrayidx325 | 0, 0, $sub346 << 2 | 0) | 0;
   _memset($labelInfo + 655376 | 0, 0, $sub346 << 4 | 0) | 0;
   $46 = $sub346;
   $i$4 = 0;
   while (1) {
    if (($i$4 | 0) >= ($46 | 0)) {
     $i$5 = 0;
     break;
    }
    $mul358 = $i$4 << 2;
    HEAP32[$labelInfo + 131084 + ($mul358 << 2) >> 2] = $xsize;
    HEAP32[$labelInfo + 131084 + (($mul358 | 1) << 2) >> 2] = 0;
    HEAP32[$labelInfo + 131084 + (($mul358 | 2) << 2) >> 2] = $ysize;
    HEAP32[$labelInfo + 131084 + (($mul358 | 3) << 2) >> 2] = 0;
    $46 = HEAP32[$label_num323 >> 2] | 0;
    $i$4 = $i$4 + 1 | 0;
   }
   while (1) {
    if (($i$5 | 0) >= ($wk_max$0 | 0)) {
     $i$6 = 0;
     break;
    }
    $sub378 = (HEAP32[$labelInfo + 1179664 + ($i$5 << 2) >> 2] | 0) + -1 | 0;
    $mul379 = $i$5 * 7 | 0;
    $arrayidx382 = $labelInfo + 12 + ($sub378 << 2) | 0;
    HEAP32[$arrayidx382 >> 2] = (HEAP32[$arrayidx382 >> 2] | 0) + (HEAP32[$labelInfo + 1310736 + ($mul379 << 2) >> 2] | 0);
    $mul388 = $sub378 << 1;
    $arrayidx390 = $labelInfo + 655376 + ($mul388 << 3) | 0;
    HEAPF64[$arrayidx390 >> 3] = +HEAPF64[$arrayidx390 >> 3] + +(HEAP32[$labelInfo + 1310736 + ($mul379 + 1 << 2) >> 2] | 0);
    $arrayidx398 = $labelInfo + 655376 + (($mul388 | 1) << 3) | 0;
    HEAPF64[$arrayidx398 >> 3] = +HEAPF64[$arrayidx398 >> 3] + +(HEAP32[$labelInfo + 1310736 + ($mul379 + 2 << 2) >> 2] | 0);
    $mul400 = $sub378 << 2;
    $arrayidx402 = $labelInfo + 131084 + ($mul400 << 2) | 0;
    $55 = HEAP32[$labelInfo + 1310736 + ($mul379 + 3 << 2) >> 2] | 0;
    if ((HEAP32[$arrayidx402 >> 2] | 0) > ($55 | 0)) HEAP32[$arrayidx402 >> 2] = $55;
    $arrayidx418 = $labelInfo + 131084 + (($mul400 | 1) << 2) | 0;
    $57 = HEAP32[$labelInfo + 1310736 + ($mul379 + 4 << 2) >> 2] | 0;
    if ((HEAP32[$arrayidx418 >> 2] | 0) < ($57 | 0)) HEAP32[$arrayidx418 >> 2] = $57;
    $arrayidx434 = $labelInfo + 131084 + (($mul400 | 2) << 2) | 0;
    $59 = HEAP32[$labelInfo + 1310736 + ($mul379 + 5 << 2) >> 2] | 0;
    if ((HEAP32[$arrayidx434 >> 2] | 0) > ($59 | 0)) HEAP32[$arrayidx434 >> 2] = $59;
    $arrayidx450 = $labelInfo + 131084 + (($mul400 | 3) << 2) | 0;
    $61 = HEAP32[$labelInfo + 1310736 + ($mul379 + 6 << 2) >> 2] | 0;
    if ((HEAP32[$arrayidx450 >> 2] | 0) < ($61 | 0)) HEAP32[$arrayidx450 >> 2] = $61;
    $i$5 = $i$5 + 1 | 0;
   }
   while (1) {
    if (($i$6 | 0) >= (HEAP32[$label_num323 >> 2] | 0)) {
     $retval$0 = 0;
     break L77;
    }
    $arrayidx471 = $labelInfo + 12 + ($i$6 << 2) | 0;
    $mul473 = $i$6 << 1;
    $arrayidx475 = $labelInfo + 655376 + ($mul473 << 3) | 0;
    HEAPF64[$arrayidx475 >> 3] = +HEAPF64[$arrayidx475 >> 3] / +(HEAP32[$arrayidx471 >> 2] | 0);
    $arrayidx480 = $labelInfo + 655376 + (($mul473 | 1) << 3) | 0;
    HEAPF64[$arrayidx480 >> 3] = +HEAPF64[$arrayidx480 >> 3] / +(HEAP32[$arrayidx471 >> 2] | 0);
    $i$6 = $i$6 + 1 | 0;
   }
  }
 } while (0);
 STACKTOP = sp;
 return $retval$0 | 0;
}

function _arLabelingSubEWR3CA4444($image, $xsize, $ysize, $labelingThresh, $labelInfo) {
 $image = $image | 0;
 $xsize = $xsize | 0;
 $ysize = $ysize | 0;
 $labelingThresh = $labelingThresh | 0;
 $labelInfo = $labelInfo | 0;
 var $$sink = 0, $0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $16 = 0, $17 = 0, $21 = 0, $22 = 0, $23 = 0, $26 = 0, $27 = 0, $39 = 0, $40 = 0, $45 = 0, $47 = 0, $5 = 0, $56 = 0, $58 = 0, $6 = 0, $60 = 0, $62 = 0, $add = 0, $add$ptr138 = 0, $add276 = 0, $add281$sink = 0, $arraydecay = 0, $arrayidx127 = 0, $arrayidx130 = 0, $arrayidx133 = 0, $arrayidx194 = 0, $arrayidx197 = 0, $arrayidx200 = 0, $arrayidx208 = 0, $arrayidx211 = 0, $arrayidx214 = 0, $arrayidx217 = 0, $arrayidx239 = 0, $arrayidx242 = 0, $arrayidx245 = 0, $arrayidx248 = 0, $arrayidx268 = 0, $arrayidx271 = 0, $arrayidx274 = 0, $arrayidx330 = 0, $arrayidx387 = 0, $arrayidx395 = 0, $arrayidx403 = 0, $arrayidx407 = 0, $arrayidx423 = 0, $arrayidx439 = 0, $arrayidx455 = 0, $arrayidx476 = 0, $arrayidx48 = 0, $arrayidx480 = 0, $arrayidx485 = 0, $arrayidx57 = 0, $arrayidx60 = 0, $arrayidx63 = 0, $arrayidx80 = 0, $cmp74 = 0, $cond = 0, $conv = 0, $dpnt$0 = 0, $dpnt$1 = 0, $i$0 = 0, $i$1 = 0, $i$2 = 0, $i$3 = 0, $i$4 = 0, $i$5 = 0, $i$6 = 0, $inc285 = 0, $j$0 = 0, $j$1 = 0, $j$2 = 0, $k$0 = 0, $k$1 = 0, $k$2 = 0, $k$3 = 0, $label_num328 = 0, $mul = 0, $mul206 = 0, $mul237 = 0, $mul295 = 0, $mul363 = 0, $mul384 = 0, $mul393 = 0, $mul405 = 0, $mul478 = 0, $pnt$0 = 0, $pnt$1 = 0, $pnt1$0 = 0, $pnt1$1 = 0, $pnt2$0 = 0, $pnt2$1 = 0, $pnt2$2 = 0, $pnt2$3 = 0, $retval$0 = 0, $sub = 0, $sub351 = 0, $sub383 = 0, $sub47 = 0, $sub79 = 0, $sub8 = 0, $sub83 = 0, $vararg_buffer = 0, $wk$0 = 0, $wk$1 = 0, $wk$2 = 0, $wk$3 = 0, $wk$4 = 0, $wk_max$0 = 0, $wk_max$1 = 0, $wk_max$2 = 0, $wk_max$3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $vararg_buffer = sp;
 $0 = HEAP32[$labelInfo >> 2] | 0;
 $sub = $ysize + -1 | 0;
 $i$0 = 0;
 $pnt1$0 = $0;
 $pnt2$0 = $0 + ((Math_imul($sub, $xsize) | 0) << 1) | 0;
 while (1) {
  if (($i$0 | 0) >= ($xsize | 0)) break;
  HEAP16[$pnt2$0 >> 1] = 0;
  HEAP16[$pnt1$0 >> 1] = 0;
  $i$0 = $i$0 + 1 | 0;
  $pnt1$0 = $pnt1$0 + 2 | 0;
  $pnt2$0 = $pnt2$0 + 2 | 0;
 }
 $mul = $labelingThresh * 3 | 0;
 $sub8 = $xsize + -1 | 0;
 $i$1 = 0;
 $pnt1$1 = $0;
 $pnt2$1 = $0 + ($sub8 << 1) | 0;
 while (1) {
  if (($i$1 | 0) >= ($ysize | 0)) break;
  HEAP16[$pnt2$1 >> 1] = 0;
  HEAP16[$pnt1$1 >> 1] = 0;
  $i$1 = $i$1 + 1 | 0;
  $pnt1$1 = $pnt1$1 + ($xsize << 1) | 0;
  $pnt2$1 = $pnt2$1 + ($xsize << 1) | 0;
 }
 $arraydecay = $labelInfo + 1179664 | 0;
 $add = $xsize + 1 | 0;
 $sub47 = 0 - $xsize | 0;
 $dpnt$0 = (HEAP32[$labelInfo + 4 >> 2] | 0) + $add | 0;
 $j$0 = 1;
 $pnt$0 = $image + ($add << 1) | 0;
 $pnt2$2 = $0 + ($add << 1) | 0;
 $wk_max$0 = 0;
 L9 : while (1) {
  if (($j$0 | 0) < ($sub | 0)) {
   $dpnt$1 = $dpnt$0;
   $i$2 = 1;
   $pnt$1 = $pnt$0;
   $pnt2$3 = $pnt2$2;
   $wk_max$1 = $wk_max$0;
  } else {
   label = 56;
   break;
  }
  while (1) {
   if (($i$2 | 0) >= ($sub8 | 0)) break;
   $conv = HEAPU8[$pnt$1 >> 0] | 0;
   do if ((($conv & 240) + 24 + ($conv << 4 & 240) + (HEAP8[$pnt$1 + 1 >> 0] & -16 & 255) | 0) > ($mul | 0)) {
    HEAP8[$dpnt$1 >> 0] = -1;
    $arrayidx48 = $pnt2$3 + ($sub47 << 1) | 0;
    $5 = HEAP16[$arrayidx48 >> 1] | 0;
    if ($5 << 16 >> 16 > 0) {
     HEAP16[$pnt2$3 >> 1] = $5;
     $6 = ($5 << 16 >> 16) * 7 | 0;
     $arrayidx57 = $labelInfo + 1310736 + ($6 + -7 << 2) | 0;
     HEAP32[$arrayidx57 >> 2] = (HEAP32[$arrayidx57 >> 2] | 0) + 1;
     $arrayidx60 = $labelInfo + 1310736 + ($6 + -6 << 2) | 0;
     HEAP32[$arrayidx60 >> 2] = (HEAP32[$arrayidx60 >> 2] | 0) + $i$2;
     $arrayidx63 = $labelInfo + 1310736 + ($6 + -5 << 2) | 0;
     HEAP32[$arrayidx63 >> 2] = (HEAP32[$arrayidx63 >> 2] | 0) + $j$0;
     HEAP32[$labelInfo + 1310736 + ($6 + -1 << 2) >> 2] = $j$0;
     $wk_max$3 = $wk_max$1;
     break;
    }
    $10 = HEAP16[$arrayidx48 + 2 >> 1] | 0;
    $11 = HEAP16[$arrayidx48 + -2 >> 1] | 0;
    $cmp74 = $11 << 16 >> 16 > 0;
    $add$ptr138 = $pnt2$3 + -2 | 0;
    $sub83 = ($11 << 16 >> 16) + -1 | 0;
    if ($10 << 16 >> 16 <= 0) {
     if ($cmp74) {
      HEAP16[$pnt2$3 >> 1] = $11;
      $mul237 = $sub83 * 7 | 0;
      $arrayidx239 = $labelInfo + 1310736 + ($mul237 << 2) | 0;
      HEAP32[$arrayidx239 >> 2] = (HEAP32[$arrayidx239 >> 2] | 0) + 1;
      $arrayidx242 = $labelInfo + 1310736 + ($mul237 + 1 << 2) | 0;
      HEAP32[$arrayidx242 >> 2] = (HEAP32[$arrayidx242 >> 2] | 0) + $i$2;
      $arrayidx245 = $labelInfo + 1310736 + ($mul237 + 2 << 2) | 0;
      HEAP32[$arrayidx245 >> 2] = (HEAP32[$arrayidx245 >> 2] | 0) + $j$0;
      $arrayidx248 = $labelInfo + 1310736 + ($mul237 + 4 << 2) | 0;
      if ((HEAP32[$arrayidx248 >> 2] | 0) < ($i$2 | 0)) HEAP32[$arrayidx248 >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($mul237 + 6 << 2) >> 2] = $j$0;
      $wk_max$3 = $wk_max$1;
      break;
     }
     $39 = HEAP16[$add$ptr138 >> 1] | 0;
     if ($39 << 16 >> 16 > 0) {
      HEAP16[$pnt2$3 >> 1] = $39;
      $40 = ($39 << 16 >> 16) * 7 | 0;
      $arrayidx268 = $labelInfo + 1310736 + ($40 + -7 << 2) | 0;
      HEAP32[$arrayidx268 >> 2] = (HEAP32[$arrayidx268 >> 2] | 0) + 1;
      $arrayidx271 = $labelInfo + 1310736 + ($40 + -6 << 2) | 0;
      HEAP32[$arrayidx271 >> 2] = (HEAP32[$arrayidx271 >> 2] | 0) + $i$2;
      $arrayidx274 = $labelInfo + 1310736 + ($40 + -5 << 2) | 0;
      HEAP32[$arrayidx274 >> 2] = (HEAP32[$arrayidx274 >> 2] | 0) + $j$0;
      $add276 = $40 + -3 | 0;
      if ((HEAP32[$labelInfo + 1310736 + ($add276 << 2) >> 2] | 0) < ($i$2 | 0)) {
       $$sink = $i$2;
       $add281$sink = $add276;
       $wk_max$2 = $wk_max$1;
      } else {
       $wk_max$3 = $wk_max$1;
       break;
      }
     } else {
      $inc285 = $wk_max$1 + 1 | 0;
      if (($wk_max$1 | 0) > 32767) {
       label = 50;
       break L9;
      }
      HEAP16[$pnt2$3 >> 1] = $inc285;
      HEAP32[$labelInfo + 1179664 + ($wk_max$1 << 2) >> 2] = $inc285 << 16 >> 16;
      $mul295 = $wk_max$1 * 7 | 0;
      HEAP32[$labelInfo + 1310736 + ($mul295 << 2) >> 2] = 1;
      HEAP32[$labelInfo + 1310736 + ($mul295 + 1 << 2) >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($mul295 + 2 << 2) >> 2] = $j$0;
      HEAP32[$labelInfo + 1310736 + ($mul295 + 3 << 2) >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($mul295 + 4 << 2) >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($mul295 + 5 << 2) >> 2] = $j$0;
      $$sink = $j$0;
      $add281$sink = $mul295 + 6 | 0;
      $wk_max$2 = $inc285;
     }
     HEAP32[$labelInfo + 1310736 + ($add281$sink << 2) >> 2] = $$sink;
     $wk_max$3 = $wk_max$2;
     break;
    }
    $sub79 = ($10 << 16 >> 16) + -1 | 0;
    $arrayidx80 = $labelInfo + 1179664 + ($sub79 << 2) | 0;
    if ($cmp74) {
     $12 = HEAP32[$arrayidx80 >> 2] | 0;
     $13 = HEAP32[$labelInfo + 1179664 + ($sub83 << 2) >> 2] | 0;
     L35 : do if (($12 | 0) > ($13 | 0)) {
      HEAP16[$pnt2$3 >> 1] = $13;
      $k$0 = 0;
      $wk$0 = $arraydecay;
      while (1) {
       if (($k$0 | 0) >= ($wk_max$1 | 0)) {
        $16 = $13;
        break L35;
       }
       if ((HEAP32[$wk$0 >> 2] | 0) == ($12 | 0)) HEAP32[$wk$0 >> 2] = $13;
       $k$0 = $k$0 + 1 | 0;
       $wk$0 = $wk$0 + 4 | 0;
      }
     } else {
      HEAP16[$pnt2$3 >> 1] = $12;
      if (($12 | 0) < ($13 | 0)) {
       $k$1 = 0;
       $wk$1 = $arraydecay;
       while (1) {
        if (($k$1 | 0) >= ($wk_max$1 | 0)) {
         $16 = $12;
         break L35;
        }
        if ((HEAP32[$wk$1 >> 2] | 0) == ($13 | 0)) HEAP32[$wk$1 >> 2] = $12;
        $k$1 = $k$1 + 1 | 0;
        $wk$1 = $wk$1 + 4 | 0;
       }
      } else $16 = $12;
     } while (0);
     $17 = ($16 << 16 >> 16) * 7 | 0;
     $arrayidx127 = $labelInfo + 1310736 + ($17 + -7 << 2) | 0;
     HEAP32[$arrayidx127 >> 2] = (HEAP32[$arrayidx127 >> 2] | 0) + 1;
     $arrayidx130 = $labelInfo + 1310736 + ($17 + -6 << 2) | 0;
     HEAP32[$arrayidx130 >> 2] = (HEAP32[$arrayidx130 >> 2] | 0) + $i$2;
     $arrayidx133 = $labelInfo + 1310736 + ($17 + -5 << 2) | 0;
     HEAP32[$arrayidx133 >> 2] = (HEAP32[$arrayidx133 >> 2] | 0) + $j$0;
     HEAP32[$labelInfo + 1310736 + ($17 + -1 << 2) >> 2] = $j$0;
     $wk_max$3 = $wk_max$1;
     break;
    }
    $21 = HEAP16[$add$ptr138 >> 1] | 0;
    if ($21 << 16 >> 16 <= 0) {
     HEAP16[$pnt2$3 >> 1] = $10;
     $mul206 = $sub79 * 7 | 0;
     $arrayidx208 = $labelInfo + 1310736 + ($mul206 << 2) | 0;
     HEAP32[$arrayidx208 >> 2] = (HEAP32[$arrayidx208 >> 2] | 0) + 1;
     $arrayidx211 = $labelInfo + 1310736 + ($mul206 + 1 << 2) | 0;
     HEAP32[$arrayidx211 >> 2] = (HEAP32[$arrayidx211 >> 2] | 0) + $i$2;
     $arrayidx214 = $labelInfo + 1310736 + ($mul206 + 2 << 2) | 0;
     HEAP32[$arrayidx214 >> 2] = (HEAP32[$arrayidx214 >> 2] | 0) + $j$0;
     $arrayidx217 = $labelInfo + 1310736 + ($mul206 + 3 << 2) | 0;
     if ((HEAP32[$arrayidx217 >> 2] | 0) > ($i$2 | 0)) HEAP32[$arrayidx217 >> 2] = $i$2;
     HEAP32[$labelInfo + 1310736 + ($mul206 + 6 << 2) >> 2] = $j$0;
     $wk_max$3 = $wk_max$1;
     break;
    }
    $22 = HEAP32[$arrayidx80 >> 2] | 0;
    $23 = HEAP32[$labelInfo + 1179664 + (($21 << 16 >> 16) + -1 << 2) >> 2] | 0;
    L58 : do if (($22 | 0) > ($23 | 0)) {
     HEAP16[$pnt2$3 >> 1] = $23;
     $k$2 = 0;
     $wk$2 = $arraydecay;
     while (1) {
      if (($k$2 | 0) >= ($wk_max$1 | 0)) {
       $26 = $23;
       break L58;
      }
      if ((HEAP32[$wk$2 >> 2] | 0) == ($22 | 0)) HEAP32[$wk$2 >> 2] = $23;
      $k$2 = $k$2 + 1 | 0;
      $wk$2 = $wk$2 + 4 | 0;
     }
    } else {
     HEAP16[$pnt2$3 >> 1] = $22;
     if (($22 | 0) < ($23 | 0)) {
      $k$3 = 0;
      $wk$3 = $arraydecay;
      while (1) {
       if (($k$3 | 0) >= ($wk_max$1 | 0)) {
        $26 = $22;
        break L58;
       }
       if ((HEAP32[$wk$3 >> 2] | 0) == ($23 | 0)) HEAP32[$wk$3 >> 2] = $22;
       $k$3 = $k$3 + 1 | 0;
       $wk$3 = $wk$3 + 4 | 0;
      }
     } else $26 = $22;
    } while (0);
    $27 = ($26 << 16 >> 16) * 7 | 0;
    $arrayidx194 = $labelInfo + 1310736 + ($27 + -7 << 2) | 0;
    HEAP32[$arrayidx194 >> 2] = (HEAP32[$arrayidx194 >> 2] | 0) + 1;
    $arrayidx197 = $labelInfo + 1310736 + ($27 + -6 << 2) | 0;
    HEAP32[$arrayidx197 >> 2] = (HEAP32[$arrayidx197 >> 2] | 0) + $i$2;
    $arrayidx200 = $labelInfo + 1310736 + ($27 + -5 << 2) | 0;
    HEAP32[$arrayidx200 >> 2] = (HEAP32[$arrayidx200 >> 2] | 0) + $j$0;
    $wk_max$3 = $wk_max$1;
   } else {
    HEAP16[$pnt2$3 >> 1] = 0;
    HEAP8[$dpnt$1 >> 0] = 0;
    $wk_max$3 = $wk_max$1;
   } while (0);
   $dpnt$1 = $dpnt$1 + 1 | 0;
   $i$2 = $i$2 + 1 | 0;
   $pnt$1 = $pnt$1 + 2 | 0;
   $pnt2$3 = $pnt2$3 + 2 | 0;
   $wk_max$1 = $wk_max$3;
  }
  $dpnt$0 = $dpnt$1 + 2 | 0;
  $j$0 = $j$0 + 1 | 0;
  $pnt$0 = $pnt$1 + 4 | 0;
  $pnt2$2 = $pnt2$3 + 4 | 0;
  $wk_max$0 = $wk_max$1;
 }
 L77 : do if ((label | 0) == 50) {
  _arLog(3, 3256, $vararg_buffer);
  $retval$0 = -1;
 } else if ((label | 0) == 56) {
  $arrayidx330 = $labelInfo + 12 | 0;
  $i$3 = 1;
  $j$1 = 1;
  $wk$4 = $arraydecay;
  while (1) {
   if (($i$3 | 0) > ($wk_max$0 | 0)) break;
   $45 = HEAP32[$wk$4 >> 2] | 0;
   if (($45 | 0) == ($i$3 | 0)) {
    $cond = $j$1;
    $j$2 = $j$1 + 1 | 0;
   } else {
    $cond = HEAP32[$labelInfo + 1179664 + ($45 + -1 << 2) >> 2] | 0;
    $j$2 = $j$1;
   }
   HEAP32[$wk$4 >> 2] = $cond;
   $i$3 = $i$3 + 1 | 0;
   $j$1 = $j$2;
   $wk$4 = $wk$4 + 4 | 0;
  }
  $label_num328 = $labelInfo + 8 | 0;
  $sub351 = $j$1 + -1 | 0;
  HEAP32[$label_num328 >> 2] = $sub351;
  if (!$sub351) $retval$0 = 0; else {
   _memset($arrayidx330 | 0, 0, $sub351 << 2 | 0) | 0;
   _memset($labelInfo + 655376 | 0, 0, $sub351 << 4 | 0) | 0;
   $47 = $sub351;
   $i$4 = 0;
   while (1) {
    if (($i$4 | 0) >= ($47 | 0)) {
     $i$5 = 0;
     break;
    }
    $mul363 = $i$4 << 2;
    HEAP32[$labelInfo + 131084 + ($mul363 << 2) >> 2] = $xsize;
    HEAP32[$labelInfo + 131084 + (($mul363 | 1) << 2) >> 2] = 0;
    HEAP32[$labelInfo + 131084 + (($mul363 | 2) << 2) >> 2] = $ysize;
    HEAP32[$labelInfo + 131084 + (($mul363 | 3) << 2) >> 2] = 0;
    $47 = HEAP32[$label_num328 >> 2] | 0;
    $i$4 = $i$4 + 1 | 0;
   }
   while (1) {
    if (($i$5 | 0) >= ($wk_max$0 | 0)) {
     $i$6 = 0;
     break;
    }
    $sub383 = (HEAP32[$labelInfo + 1179664 + ($i$5 << 2) >> 2] | 0) + -1 | 0;
    $mul384 = $i$5 * 7 | 0;
    $arrayidx387 = $labelInfo + 12 + ($sub383 << 2) | 0;
    HEAP32[$arrayidx387 >> 2] = (HEAP32[$arrayidx387 >> 2] | 0) + (HEAP32[$labelInfo + 1310736 + ($mul384 << 2) >> 2] | 0);
    $mul393 = $sub383 << 1;
    $arrayidx395 = $labelInfo + 655376 + ($mul393 << 3) | 0;
    HEAPF64[$arrayidx395 >> 3] = +HEAPF64[$arrayidx395 >> 3] + +(HEAP32[$labelInfo + 1310736 + ($mul384 + 1 << 2) >> 2] | 0);
    $arrayidx403 = $labelInfo + 655376 + (($mul393 | 1) << 3) | 0;
    HEAPF64[$arrayidx403 >> 3] = +HEAPF64[$arrayidx403 >> 3] + +(HEAP32[$labelInfo + 1310736 + ($mul384 + 2 << 2) >> 2] | 0);
    $mul405 = $sub383 << 2;
    $arrayidx407 = $labelInfo + 131084 + ($mul405 << 2) | 0;
    $56 = HEAP32[$labelInfo + 1310736 + ($mul384 + 3 << 2) >> 2] | 0;
    if ((HEAP32[$arrayidx407 >> 2] | 0) > ($56 | 0)) HEAP32[$arrayidx407 >> 2] = $56;
    $arrayidx423 = $labelInfo + 131084 + (($mul405 | 1) << 2) | 0;
    $58 = HEAP32[$labelInfo + 1310736 + ($mul384 + 4 << 2) >> 2] | 0;
    if ((HEAP32[$arrayidx423 >> 2] | 0) < ($58 | 0)) HEAP32[$arrayidx423 >> 2] = $58;
    $arrayidx439 = $labelInfo + 131084 + (($mul405 | 2) << 2) | 0;
    $60 = HEAP32[$labelInfo + 1310736 + ($mul384 + 5 << 2) >> 2] | 0;
    if ((HEAP32[$arrayidx439 >> 2] | 0) > ($60 | 0)) HEAP32[$arrayidx439 >> 2] = $60;
    $arrayidx455 = $labelInfo + 131084 + (($mul405 | 3) << 2) | 0;
    $62 = HEAP32[$labelInfo + 1310736 + ($mul384 + 6 << 2) >> 2] | 0;
    if ((HEAP32[$arrayidx455 >> 2] | 0) < ($62 | 0)) HEAP32[$arrayidx455 >> 2] = $62;
    $i$5 = $i$5 + 1 | 0;
   }
   while (1) {
    if (($i$6 | 0) >= (HEAP32[$label_num328 >> 2] | 0)) {
     $retval$0 = 0;
     break L77;
    }
    $arrayidx476 = $labelInfo + 12 + ($i$6 << 2) | 0;
    $mul478 = $i$6 << 1;
    $arrayidx480 = $labelInfo + 655376 + ($mul478 << 3) | 0;
    HEAPF64[$arrayidx480 >> 3] = +HEAPF64[$arrayidx480 >> 3] / +(HEAP32[$arrayidx476 >> 2] | 0);
    $arrayidx485 = $labelInfo + 655376 + (($mul478 | 1) << 3) | 0;
    HEAPF64[$arrayidx485 >> 3] = +HEAPF64[$arrayidx485 >> 3] / +(HEAP32[$arrayidx476 >> 2] | 0);
    $i$6 = $i$6 + 1 | 0;
   }
  }
 } while (0);
 STACKTOP = sp;
 return $retval$0 | 0;
}

function _arLabelingSubEBR3CA4444($image, $xsize, $ysize, $labelingThresh, $labelInfo) {
 $image = $image | 0;
 $xsize = $xsize | 0;
 $ysize = $ysize | 0;
 $labelingThresh = $labelingThresh | 0;
 $labelInfo = $labelInfo | 0;
 var $$sink = 0, $0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $16 = 0, $17 = 0, $21 = 0, $22 = 0, $23 = 0, $26 = 0, $27 = 0, $39 = 0, $40 = 0, $45 = 0, $47 = 0, $5 = 0, $56 = 0, $58 = 0, $6 = 0, $60 = 0, $62 = 0, $add = 0, $add$ptr138 = 0, $add276 = 0, $add281$sink = 0, $arraydecay = 0, $arrayidx127 = 0, $arrayidx130 = 0, $arrayidx133 = 0, $arrayidx194 = 0, $arrayidx197 = 0, $arrayidx200 = 0, $arrayidx208 = 0, $arrayidx211 = 0, $arrayidx214 = 0, $arrayidx217 = 0, $arrayidx239 = 0, $arrayidx242 = 0, $arrayidx245 = 0, $arrayidx248 = 0, $arrayidx268 = 0, $arrayidx271 = 0, $arrayidx274 = 0, $arrayidx330 = 0, $arrayidx387 = 0, $arrayidx395 = 0, $arrayidx403 = 0, $arrayidx407 = 0, $arrayidx423 = 0, $arrayidx439 = 0, $arrayidx455 = 0, $arrayidx476 = 0, $arrayidx48 = 0, $arrayidx480 = 0, $arrayidx485 = 0, $arrayidx57 = 0, $arrayidx60 = 0, $arrayidx63 = 0, $arrayidx80 = 0, $cmp74 = 0, $cond = 0, $conv = 0, $dpnt$0 = 0, $dpnt$1 = 0, $i$0 = 0, $i$1 = 0, $i$2 = 0, $i$3 = 0, $i$4 = 0, $i$5 = 0, $i$6 = 0, $inc285 = 0, $j$0 = 0, $j$1 = 0, $j$2 = 0, $k$0 = 0, $k$1 = 0, $k$2 = 0, $k$3 = 0, $label_num328 = 0, $mul = 0, $mul206 = 0, $mul237 = 0, $mul295 = 0, $mul363 = 0, $mul384 = 0, $mul393 = 0, $mul405 = 0, $mul478 = 0, $pnt$0 = 0, $pnt$1 = 0, $pnt1$0 = 0, $pnt1$1 = 0, $pnt2$0 = 0, $pnt2$1 = 0, $pnt2$2 = 0, $pnt2$3 = 0, $retval$0 = 0, $sub = 0, $sub351 = 0, $sub383 = 0, $sub47 = 0, $sub79 = 0, $sub8 = 0, $sub83 = 0, $vararg_buffer = 0, $wk$0 = 0, $wk$1 = 0, $wk$2 = 0, $wk$3 = 0, $wk$4 = 0, $wk_max$0 = 0, $wk_max$1 = 0, $wk_max$2 = 0, $wk_max$3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $vararg_buffer = sp;
 $0 = HEAP32[$labelInfo >> 2] | 0;
 $sub = $ysize + -1 | 0;
 $i$0 = 0;
 $pnt1$0 = $0;
 $pnt2$0 = $0 + ((Math_imul($sub, $xsize) | 0) << 1) | 0;
 while (1) {
  if (($i$0 | 0) >= ($xsize | 0)) break;
  HEAP16[$pnt2$0 >> 1] = 0;
  HEAP16[$pnt1$0 >> 1] = 0;
  $i$0 = $i$0 + 1 | 0;
  $pnt1$0 = $pnt1$0 + 2 | 0;
  $pnt2$0 = $pnt2$0 + 2 | 0;
 }
 $mul = $labelingThresh * 3 | 0;
 $sub8 = $xsize + -1 | 0;
 $i$1 = 0;
 $pnt1$1 = $0;
 $pnt2$1 = $0 + ($sub8 << 1) | 0;
 while (1) {
  if (($i$1 | 0) >= ($ysize | 0)) break;
  HEAP16[$pnt2$1 >> 1] = 0;
  HEAP16[$pnt1$1 >> 1] = 0;
  $i$1 = $i$1 + 1 | 0;
  $pnt1$1 = $pnt1$1 + ($xsize << 1) | 0;
  $pnt2$1 = $pnt2$1 + ($xsize << 1) | 0;
 }
 $arraydecay = $labelInfo + 1179664 | 0;
 $add = $xsize + 1 | 0;
 $sub47 = 0 - $xsize | 0;
 $dpnt$0 = (HEAP32[$labelInfo + 4 >> 2] | 0) + $add | 0;
 $j$0 = 1;
 $pnt$0 = $image + ($add << 1) | 0;
 $pnt2$2 = $0 + ($add << 1) | 0;
 $wk_max$0 = 0;
 L9 : while (1) {
  if (($j$0 | 0) < ($sub | 0)) {
   $dpnt$1 = $dpnt$0;
   $i$2 = 1;
   $pnt$1 = $pnt$0;
   $pnt2$3 = $pnt2$2;
   $wk_max$1 = $wk_max$0;
  } else {
   label = 56;
   break;
  }
  while (1) {
   if (($i$2 | 0) >= ($sub8 | 0)) break;
   $conv = HEAPU8[$pnt$1 >> 0] | 0;
   do if ((($conv & 240) + 24 + ($conv << 4 & 240) + (HEAP8[$pnt$1 + 1 >> 0] & -16 & 255) | 0) > ($mul | 0)) {
    HEAP16[$pnt2$3 >> 1] = 0;
    HEAP8[$dpnt$1 >> 0] = 0;
    $wk_max$3 = $wk_max$1;
   } else {
    HEAP8[$dpnt$1 >> 0] = -1;
    $arrayidx48 = $pnt2$3 + ($sub47 << 1) | 0;
    $5 = HEAP16[$arrayidx48 >> 1] | 0;
    if ($5 << 16 >> 16 > 0) {
     HEAP16[$pnt2$3 >> 1] = $5;
     $6 = ($5 << 16 >> 16) * 7 | 0;
     $arrayidx57 = $labelInfo + 1310736 + ($6 + -7 << 2) | 0;
     HEAP32[$arrayidx57 >> 2] = (HEAP32[$arrayidx57 >> 2] | 0) + 1;
     $arrayidx60 = $labelInfo + 1310736 + ($6 + -6 << 2) | 0;
     HEAP32[$arrayidx60 >> 2] = (HEAP32[$arrayidx60 >> 2] | 0) + $i$2;
     $arrayidx63 = $labelInfo + 1310736 + ($6 + -5 << 2) | 0;
     HEAP32[$arrayidx63 >> 2] = (HEAP32[$arrayidx63 >> 2] | 0) + $j$0;
     HEAP32[$labelInfo + 1310736 + ($6 + -1 << 2) >> 2] = $j$0;
     $wk_max$3 = $wk_max$1;
     break;
    }
    $10 = HEAP16[$arrayidx48 + 2 >> 1] | 0;
    $11 = HEAP16[$arrayidx48 + -2 >> 1] | 0;
    $cmp74 = $11 << 16 >> 16 > 0;
    $add$ptr138 = $pnt2$3 + -2 | 0;
    $sub83 = ($11 << 16 >> 16) + -1 | 0;
    if ($10 << 16 >> 16 <= 0) {
     if ($cmp74) {
      HEAP16[$pnt2$3 >> 1] = $11;
      $mul237 = $sub83 * 7 | 0;
      $arrayidx239 = $labelInfo + 1310736 + ($mul237 << 2) | 0;
      HEAP32[$arrayidx239 >> 2] = (HEAP32[$arrayidx239 >> 2] | 0) + 1;
      $arrayidx242 = $labelInfo + 1310736 + ($mul237 + 1 << 2) | 0;
      HEAP32[$arrayidx242 >> 2] = (HEAP32[$arrayidx242 >> 2] | 0) + $i$2;
      $arrayidx245 = $labelInfo + 1310736 + ($mul237 + 2 << 2) | 0;
      HEAP32[$arrayidx245 >> 2] = (HEAP32[$arrayidx245 >> 2] | 0) + $j$0;
      $arrayidx248 = $labelInfo + 1310736 + ($mul237 + 4 << 2) | 0;
      if ((HEAP32[$arrayidx248 >> 2] | 0) < ($i$2 | 0)) HEAP32[$arrayidx248 >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($mul237 + 6 << 2) >> 2] = $j$0;
      $wk_max$3 = $wk_max$1;
      break;
     }
     $39 = HEAP16[$add$ptr138 >> 1] | 0;
     if ($39 << 16 >> 16 > 0) {
      HEAP16[$pnt2$3 >> 1] = $39;
      $40 = ($39 << 16 >> 16) * 7 | 0;
      $arrayidx268 = $labelInfo + 1310736 + ($40 + -7 << 2) | 0;
      HEAP32[$arrayidx268 >> 2] = (HEAP32[$arrayidx268 >> 2] | 0) + 1;
      $arrayidx271 = $labelInfo + 1310736 + ($40 + -6 << 2) | 0;
      HEAP32[$arrayidx271 >> 2] = (HEAP32[$arrayidx271 >> 2] | 0) + $i$2;
      $arrayidx274 = $labelInfo + 1310736 + ($40 + -5 << 2) | 0;
      HEAP32[$arrayidx274 >> 2] = (HEAP32[$arrayidx274 >> 2] | 0) + $j$0;
      $add276 = $40 + -3 | 0;
      if ((HEAP32[$labelInfo + 1310736 + ($add276 << 2) >> 2] | 0) < ($i$2 | 0)) {
       $$sink = $i$2;
       $add281$sink = $add276;
       $wk_max$2 = $wk_max$1;
      } else {
       $wk_max$3 = $wk_max$1;
       break;
      }
     } else {
      $inc285 = $wk_max$1 + 1 | 0;
      if (($wk_max$1 | 0) > 32767) {
       label = 50;
       break L9;
      }
      HEAP16[$pnt2$3 >> 1] = $inc285;
      HEAP32[$labelInfo + 1179664 + ($wk_max$1 << 2) >> 2] = $inc285 << 16 >> 16;
      $mul295 = $wk_max$1 * 7 | 0;
      HEAP32[$labelInfo + 1310736 + ($mul295 << 2) >> 2] = 1;
      HEAP32[$labelInfo + 1310736 + ($mul295 + 1 << 2) >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($mul295 + 2 << 2) >> 2] = $j$0;
      HEAP32[$labelInfo + 1310736 + ($mul295 + 3 << 2) >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($mul295 + 4 << 2) >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($mul295 + 5 << 2) >> 2] = $j$0;
      $$sink = $j$0;
      $add281$sink = $mul295 + 6 | 0;
      $wk_max$2 = $inc285;
     }
     HEAP32[$labelInfo + 1310736 + ($add281$sink << 2) >> 2] = $$sink;
     $wk_max$3 = $wk_max$2;
     break;
    }
    $sub79 = ($10 << 16 >> 16) + -1 | 0;
    $arrayidx80 = $labelInfo + 1179664 + ($sub79 << 2) | 0;
    if ($cmp74) {
     $12 = HEAP32[$arrayidx80 >> 2] | 0;
     $13 = HEAP32[$labelInfo + 1179664 + ($sub83 << 2) >> 2] | 0;
     L36 : do if (($12 | 0) > ($13 | 0)) {
      HEAP16[$pnt2$3 >> 1] = $13;
      $k$0 = 0;
      $wk$0 = $arraydecay;
      while (1) {
       if (($k$0 | 0) >= ($wk_max$1 | 0)) {
        $16 = $13;
        break L36;
       }
       if ((HEAP32[$wk$0 >> 2] | 0) == ($12 | 0)) HEAP32[$wk$0 >> 2] = $13;
       $k$0 = $k$0 + 1 | 0;
       $wk$0 = $wk$0 + 4 | 0;
      }
     } else {
      HEAP16[$pnt2$3 >> 1] = $12;
      if (($12 | 0) < ($13 | 0)) {
       $k$1 = 0;
       $wk$1 = $arraydecay;
       while (1) {
        if (($k$1 | 0) >= ($wk_max$1 | 0)) {
         $16 = $12;
         break L36;
        }
        if ((HEAP32[$wk$1 >> 2] | 0) == ($13 | 0)) HEAP32[$wk$1 >> 2] = $12;
        $k$1 = $k$1 + 1 | 0;
        $wk$1 = $wk$1 + 4 | 0;
       }
      } else $16 = $12;
     } while (0);
     $17 = ($16 << 16 >> 16) * 7 | 0;
     $arrayidx127 = $labelInfo + 1310736 + ($17 + -7 << 2) | 0;
     HEAP32[$arrayidx127 >> 2] = (HEAP32[$arrayidx127 >> 2] | 0) + 1;
     $arrayidx130 = $labelInfo + 1310736 + ($17 + -6 << 2) | 0;
     HEAP32[$arrayidx130 >> 2] = (HEAP32[$arrayidx130 >> 2] | 0) + $i$2;
     $arrayidx133 = $labelInfo + 1310736 + ($17 + -5 << 2) | 0;
     HEAP32[$arrayidx133 >> 2] = (HEAP32[$arrayidx133 >> 2] | 0) + $j$0;
     HEAP32[$labelInfo + 1310736 + ($17 + -1 << 2) >> 2] = $j$0;
     $wk_max$3 = $wk_max$1;
     break;
    }
    $21 = HEAP16[$add$ptr138 >> 1] | 0;
    if ($21 << 16 >> 16 <= 0) {
     HEAP16[$pnt2$3 >> 1] = $10;
     $mul206 = $sub79 * 7 | 0;
     $arrayidx208 = $labelInfo + 1310736 + ($mul206 << 2) | 0;
     HEAP32[$arrayidx208 >> 2] = (HEAP32[$arrayidx208 >> 2] | 0) + 1;
     $arrayidx211 = $labelInfo + 1310736 + ($mul206 + 1 << 2) | 0;
     HEAP32[$arrayidx211 >> 2] = (HEAP32[$arrayidx211 >> 2] | 0) + $i$2;
     $arrayidx214 = $labelInfo + 1310736 + ($mul206 + 2 << 2) | 0;
     HEAP32[$arrayidx214 >> 2] = (HEAP32[$arrayidx214 >> 2] | 0) + $j$0;
     $arrayidx217 = $labelInfo + 1310736 + ($mul206 + 3 << 2) | 0;
     if ((HEAP32[$arrayidx217 >> 2] | 0) > ($i$2 | 0)) HEAP32[$arrayidx217 >> 2] = $i$2;
     HEAP32[$labelInfo + 1310736 + ($mul206 + 6 << 2) >> 2] = $j$0;
     $wk_max$3 = $wk_max$1;
     break;
    }
    $22 = HEAP32[$arrayidx80 >> 2] | 0;
    $23 = HEAP32[$labelInfo + 1179664 + (($21 << 16 >> 16) + -1 << 2) >> 2] | 0;
    L59 : do if (($22 | 0) > ($23 | 0)) {
     HEAP16[$pnt2$3 >> 1] = $23;
     $k$2 = 0;
     $wk$2 = $arraydecay;
     while (1) {
      if (($k$2 | 0) >= ($wk_max$1 | 0)) {
       $26 = $23;
       break L59;
      }
      if ((HEAP32[$wk$2 >> 2] | 0) == ($22 | 0)) HEAP32[$wk$2 >> 2] = $23;
      $k$2 = $k$2 + 1 | 0;
      $wk$2 = $wk$2 + 4 | 0;
     }
    } else {
     HEAP16[$pnt2$3 >> 1] = $22;
     if (($22 | 0) < ($23 | 0)) {
      $k$3 = 0;
      $wk$3 = $arraydecay;
      while (1) {
       if (($k$3 | 0) >= ($wk_max$1 | 0)) {
        $26 = $22;
        break L59;
       }
       if ((HEAP32[$wk$3 >> 2] | 0) == ($23 | 0)) HEAP32[$wk$3 >> 2] = $22;
       $k$3 = $k$3 + 1 | 0;
       $wk$3 = $wk$3 + 4 | 0;
      }
     } else $26 = $22;
    } while (0);
    $27 = ($26 << 16 >> 16) * 7 | 0;
    $arrayidx194 = $labelInfo + 1310736 + ($27 + -7 << 2) | 0;
    HEAP32[$arrayidx194 >> 2] = (HEAP32[$arrayidx194 >> 2] | 0) + 1;
    $arrayidx197 = $labelInfo + 1310736 + ($27 + -6 << 2) | 0;
    HEAP32[$arrayidx197 >> 2] = (HEAP32[$arrayidx197 >> 2] | 0) + $i$2;
    $arrayidx200 = $labelInfo + 1310736 + ($27 + -5 << 2) | 0;
    HEAP32[$arrayidx200 >> 2] = (HEAP32[$arrayidx200 >> 2] | 0) + $j$0;
    $wk_max$3 = $wk_max$1;
   } while (0);
   $dpnt$1 = $dpnt$1 + 1 | 0;
   $i$2 = $i$2 + 1 | 0;
   $pnt$1 = $pnt$1 + 2 | 0;
   $pnt2$3 = $pnt2$3 + 2 | 0;
   $wk_max$1 = $wk_max$3;
  }
  $dpnt$0 = $dpnt$1 + 2 | 0;
  $j$0 = $j$0 + 1 | 0;
  $pnt$0 = $pnt$1 + 4 | 0;
  $pnt2$2 = $pnt2$3 + 4 | 0;
  $wk_max$0 = $wk_max$1;
 }
 L77 : do if ((label | 0) == 50) {
  _arLog(3, 3256, $vararg_buffer);
  $retval$0 = -1;
 } else if ((label | 0) == 56) {
  $arrayidx330 = $labelInfo + 12 | 0;
  $i$3 = 1;
  $j$1 = 1;
  $wk$4 = $arraydecay;
  while (1) {
   if (($i$3 | 0) > ($wk_max$0 | 0)) break;
   $45 = HEAP32[$wk$4 >> 2] | 0;
   if (($45 | 0) == ($i$3 | 0)) {
    $cond = $j$1;
    $j$2 = $j$1 + 1 | 0;
   } else {
    $cond = HEAP32[$labelInfo + 1179664 + ($45 + -1 << 2) >> 2] | 0;
    $j$2 = $j$1;
   }
   HEAP32[$wk$4 >> 2] = $cond;
   $i$3 = $i$3 + 1 | 0;
   $j$1 = $j$2;
   $wk$4 = $wk$4 + 4 | 0;
  }
  $label_num328 = $labelInfo + 8 | 0;
  $sub351 = $j$1 + -1 | 0;
  HEAP32[$label_num328 >> 2] = $sub351;
  if (!$sub351) $retval$0 = 0; else {
   _memset($arrayidx330 | 0, 0, $sub351 << 2 | 0) | 0;
   _memset($labelInfo + 655376 | 0, 0, $sub351 << 4 | 0) | 0;
   $47 = $sub351;
   $i$4 = 0;
   while (1) {
    if (($i$4 | 0) >= ($47 | 0)) {
     $i$5 = 0;
     break;
    }
    $mul363 = $i$4 << 2;
    HEAP32[$labelInfo + 131084 + ($mul363 << 2) >> 2] = $xsize;
    HEAP32[$labelInfo + 131084 + (($mul363 | 1) << 2) >> 2] = 0;
    HEAP32[$labelInfo + 131084 + (($mul363 | 2) << 2) >> 2] = $ysize;
    HEAP32[$labelInfo + 131084 + (($mul363 | 3) << 2) >> 2] = 0;
    $47 = HEAP32[$label_num328 >> 2] | 0;
    $i$4 = $i$4 + 1 | 0;
   }
   while (1) {
    if (($i$5 | 0) >= ($wk_max$0 | 0)) {
     $i$6 = 0;
     break;
    }
    $sub383 = (HEAP32[$labelInfo + 1179664 + ($i$5 << 2) >> 2] | 0) + -1 | 0;
    $mul384 = $i$5 * 7 | 0;
    $arrayidx387 = $labelInfo + 12 + ($sub383 << 2) | 0;
    HEAP32[$arrayidx387 >> 2] = (HEAP32[$arrayidx387 >> 2] | 0) + (HEAP32[$labelInfo + 1310736 + ($mul384 << 2) >> 2] | 0);
    $mul393 = $sub383 << 1;
    $arrayidx395 = $labelInfo + 655376 + ($mul393 << 3) | 0;
    HEAPF64[$arrayidx395 >> 3] = +HEAPF64[$arrayidx395 >> 3] + +(HEAP32[$labelInfo + 1310736 + ($mul384 + 1 << 2) >> 2] | 0);
    $arrayidx403 = $labelInfo + 655376 + (($mul393 | 1) << 3) | 0;
    HEAPF64[$arrayidx403 >> 3] = +HEAPF64[$arrayidx403 >> 3] + +(HEAP32[$labelInfo + 1310736 + ($mul384 + 2 << 2) >> 2] | 0);
    $mul405 = $sub383 << 2;
    $arrayidx407 = $labelInfo + 131084 + ($mul405 << 2) | 0;
    $56 = HEAP32[$labelInfo + 1310736 + ($mul384 + 3 << 2) >> 2] | 0;
    if ((HEAP32[$arrayidx407 >> 2] | 0) > ($56 | 0)) HEAP32[$arrayidx407 >> 2] = $56;
    $arrayidx423 = $labelInfo + 131084 + (($mul405 | 1) << 2) | 0;
    $58 = HEAP32[$labelInfo + 1310736 + ($mul384 + 4 << 2) >> 2] | 0;
    if ((HEAP32[$arrayidx423 >> 2] | 0) < ($58 | 0)) HEAP32[$arrayidx423 >> 2] = $58;
    $arrayidx439 = $labelInfo + 131084 + (($mul405 | 2) << 2) | 0;
    $60 = HEAP32[$labelInfo + 1310736 + ($mul384 + 5 << 2) >> 2] | 0;
    if ((HEAP32[$arrayidx439 >> 2] | 0) > ($60 | 0)) HEAP32[$arrayidx439 >> 2] = $60;
    $arrayidx455 = $labelInfo + 131084 + (($mul405 | 3) << 2) | 0;
    $62 = HEAP32[$labelInfo + 1310736 + ($mul384 + 6 << 2) >> 2] | 0;
    if ((HEAP32[$arrayidx455 >> 2] | 0) < ($62 | 0)) HEAP32[$arrayidx455 >> 2] = $62;
    $i$5 = $i$5 + 1 | 0;
   }
   while (1) {
    if (($i$6 | 0) >= (HEAP32[$label_num328 >> 2] | 0)) {
     $retval$0 = 0;
     break L77;
    }
    $arrayidx476 = $labelInfo + 12 + ($i$6 << 2) | 0;
    $mul478 = $i$6 << 1;
    $arrayidx480 = $labelInfo + 655376 + ($mul478 << 3) | 0;
    HEAPF64[$arrayidx480 >> 3] = +HEAPF64[$arrayidx480 >> 3] / +(HEAP32[$arrayidx476 >> 2] | 0);
    $arrayidx485 = $labelInfo + 655376 + (($mul478 | 1) << 3) | 0;
    HEAPF64[$arrayidx485 >> 3] = +HEAPF64[$arrayidx485 >> 3] / +(HEAP32[$arrayidx476 >> 2] | 0);
    $i$6 = $i$6 + 1 | 0;
   }
  }
 } while (0);
 STACKTOP = sp;
 return $retval$0 | 0;
}

function _arLabelingSubEWICY($image, $xsize, $ysize, $labelingThresh, $labelInfo) {
 $image = $image | 0;
 $xsize = $xsize | 0;
 $ysize = $ysize | 0;
 $labelingThresh = $labelingThresh | 0;
 $labelInfo = $labelInfo | 0;
 var $$sink = 0, $0 = 0, $10 = 0, $11 = 0, $14 = 0, $15 = 0, $19 = 0, $20 = 0, $21 = 0, $24 = 0, $25 = 0, $3 = 0, $37 = 0, $38 = 0, $4 = 0, $43 = 0, $45 = 0, $54 = 0, $56 = 0, $58 = 0, $60 = 0, $8 = 0, $9 = 0, $add = 0, $add$ptr130 = 0, $add268 = 0, $add273$sink = 0, $arraydecay = 0, $arrayidx119 = 0, $arrayidx122 = 0, $arrayidx125 = 0, $arrayidx186 = 0, $arrayidx189 = 0, $arrayidx192 = 0, $arrayidx200 = 0, $arrayidx203 = 0, $arrayidx206 = 0, $arrayidx209 = 0, $arrayidx231 = 0, $arrayidx234 = 0, $arrayidx237 = 0, $arrayidx240 = 0, $arrayidx260 = 0, $arrayidx263 = 0, $arrayidx266 = 0, $arrayidx324 = 0, $arrayidx381 = 0, $arrayidx389 = 0, $arrayidx397 = 0, $arrayidx40 = 0, $arrayidx401 = 0, $arrayidx417 = 0, $arrayidx433 = 0, $arrayidx449 = 0, $arrayidx470 = 0, $arrayidx474 = 0, $arrayidx480 = 0, $arrayidx49 = 0, $arrayidx52 = 0, $arrayidx55 = 0, $arrayidx72 = 0, $cmp66 = 0, $cond = 0, $div = 0, $div1 = 0, $dpnt$0 = 0, $dpnt$1 = 0, $i$0 = 0, $i$1 = 0, $i$2 = 0, $i$3 = 0, $i$4 = 0, $i$5 = 0, $i$6 = 0, $inc277 = 0, $j$0 = 0, $j$1 = 0, $j$2 = 0, $k$0 = 0, $k$1 = 0, $k$2 = 0, $k$3 = 0, $label_num322 = 0, $mul198 = 0, $mul229 = 0, $mul24 = 0, $mul287 = 0, $mul357 = 0, $mul378 = 0, $mul387 = 0, $mul399 = 0, $mul472 = 0, $pnt$0 = 0, $pnt$1 = 0, $pnt1$0 = 0, $pnt1$1 = 0, $pnt2$0 = 0, $pnt2$1 = 0, $pnt2$2 = 0, $pnt2$3 = 0, $retval$0 = 0, $sub = 0, $sub345 = 0, $sub377 = 0, $sub39 = 0, $sub71 = 0, $sub75 = 0, $sub8 = 0, $vararg_buffer = 0, $wk$0 = 0, $wk$1 = 0, $wk$2 = 0, $wk$3 = 0, $wk$4 = 0, $wk_max$0 = 0, $wk_max$1 = 0, $wk_max$2 = 0, $wk_max$3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $vararg_buffer = sp;
 $div = ($xsize | 0) / 2 | 0;
 $div1 = ($ysize | 0) / 2 | 0;
 $0 = HEAP32[$labelInfo >> 2] | 0;
 $sub = $div1 + -1 | 0;
 $i$0 = 0;
 $pnt1$0 = $0;
 $pnt2$0 = $0 + ((Math_imul($sub, $div) | 0) << 1) | 0;
 while (1) {
  if (($i$0 | 0) >= ($div | 0)) break;
  HEAP16[$pnt2$0 >> 1] = 0;
  HEAP16[$pnt1$0 >> 1] = 0;
  $i$0 = $i$0 + 1 | 0;
  $pnt1$0 = $pnt1$0 + 2 | 0;
  $pnt2$0 = $pnt2$0 + 2 | 0;
 }
 $sub8 = $div + -1 | 0;
 $i$1 = 0;
 $pnt1$1 = $0;
 $pnt2$1 = $0 + ($sub8 << 1) | 0;
 while (1) {
  if (($i$1 | 0) >= ($div1 | 0)) break;
  HEAP16[$pnt2$1 >> 1] = 0;
  HEAP16[$pnt1$1 >> 1] = 0;
  $i$1 = $i$1 + 1 | 0;
  $pnt1$1 = $pnt1$1 + ($div << 1) | 0;
  $pnt2$1 = $pnt2$1 + ($div << 1) | 0;
 }
 $arraydecay = $labelInfo + 1179664 | 0;
 $add = $div + 1 | 0;
 $mul24 = $xsize << 1;
 $sub39 = 0 - $div | 0;
 $dpnt$0 = (HEAP32[$labelInfo + 4 >> 2] | 0) + $add | 0;
 $j$0 = 1;
 $pnt$0 = $image + (($xsize << 2) + 4) | 0;
 $pnt2$2 = $0 + ($add << 1) | 0;
 $wk_max$0 = 0;
 L9 : while (1) {
  if (($j$0 | 0) < ($sub | 0)) {
   $dpnt$1 = $dpnt$0;
   $i$2 = 1;
   $pnt$1 = $pnt$0;
   $pnt2$3 = $pnt2$2;
   $wk_max$1 = $wk_max$0;
  } else {
   label = 56;
   break;
  }
  while (1) {
   if (($i$2 | 0) >= ($sub8 | 0)) break;
   do if ((HEAPU8[$pnt$1 + 1 >> 0] | 0 | 0) > ($labelingThresh | 0)) {
    HEAP8[$dpnt$1 >> 0] = -1;
    $arrayidx40 = $pnt2$3 + ($sub39 << 1) | 0;
    $3 = HEAP16[$arrayidx40 >> 1] | 0;
    if ($3 << 16 >> 16 > 0) {
     HEAP16[$pnt2$3 >> 1] = $3;
     $4 = ($3 << 16 >> 16) * 7 | 0;
     $arrayidx49 = $labelInfo + 1310736 + ($4 + -7 << 2) | 0;
     HEAP32[$arrayidx49 >> 2] = (HEAP32[$arrayidx49 >> 2] | 0) + 1;
     $arrayidx52 = $labelInfo + 1310736 + ($4 + -6 << 2) | 0;
     HEAP32[$arrayidx52 >> 2] = (HEAP32[$arrayidx52 >> 2] | 0) + $i$2;
     $arrayidx55 = $labelInfo + 1310736 + ($4 + -5 << 2) | 0;
     HEAP32[$arrayidx55 >> 2] = (HEAP32[$arrayidx55 >> 2] | 0) + $j$0;
     HEAP32[$labelInfo + 1310736 + ($4 + -1 << 2) >> 2] = $j$0;
     $wk_max$3 = $wk_max$1;
     break;
    }
    $8 = HEAP16[$arrayidx40 + 2 >> 1] | 0;
    $9 = HEAP16[$arrayidx40 + -2 >> 1] | 0;
    $cmp66 = $9 << 16 >> 16 > 0;
    $sub75 = ($9 << 16 >> 16) + -1 | 0;
    $add$ptr130 = $pnt2$3 + -2 | 0;
    if ($8 << 16 >> 16 <= 0) {
     if ($cmp66) {
      HEAP16[$pnt2$3 >> 1] = $9;
      $mul229 = $sub75 * 7 | 0;
      $arrayidx231 = $labelInfo + 1310736 + ($mul229 << 2) | 0;
      HEAP32[$arrayidx231 >> 2] = (HEAP32[$arrayidx231 >> 2] | 0) + 1;
      $arrayidx234 = $labelInfo + 1310736 + ($mul229 + 1 << 2) | 0;
      HEAP32[$arrayidx234 >> 2] = (HEAP32[$arrayidx234 >> 2] | 0) + $i$2;
      $arrayidx237 = $labelInfo + 1310736 + ($mul229 + 2 << 2) | 0;
      HEAP32[$arrayidx237 >> 2] = (HEAP32[$arrayidx237 >> 2] | 0) + $j$0;
      $arrayidx240 = $labelInfo + 1310736 + ($mul229 + 4 << 2) | 0;
      if ((HEAP32[$arrayidx240 >> 2] | 0) < ($i$2 | 0)) HEAP32[$arrayidx240 >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($mul229 + 6 << 2) >> 2] = $j$0;
      $wk_max$3 = $wk_max$1;
      break;
     }
     $37 = HEAP16[$add$ptr130 >> 1] | 0;
     if ($37 << 16 >> 16 > 0) {
      HEAP16[$pnt2$3 >> 1] = $37;
      $38 = ($37 << 16 >> 16) * 7 | 0;
      $arrayidx260 = $labelInfo + 1310736 + ($38 + -7 << 2) | 0;
      HEAP32[$arrayidx260 >> 2] = (HEAP32[$arrayidx260 >> 2] | 0) + 1;
      $arrayidx263 = $labelInfo + 1310736 + ($38 + -6 << 2) | 0;
      HEAP32[$arrayidx263 >> 2] = (HEAP32[$arrayidx263 >> 2] | 0) + $i$2;
      $arrayidx266 = $labelInfo + 1310736 + ($38 + -5 << 2) | 0;
      HEAP32[$arrayidx266 >> 2] = (HEAP32[$arrayidx266 >> 2] | 0) + $j$0;
      $add268 = $38 + -3 | 0;
      if ((HEAP32[$labelInfo + 1310736 + ($add268 << 2) >> 2] | 0) < ($i$2 | 0)) {
       $$sink = $i$2;
       $add273$sink = $add268;
       $wk_max$2 = $wk_max$1;
      } else {
       $wk_max$3 = $wk_max$1;
       break;
      }
     } else {
      $inc277 = $wk_max$1 + 1 | 0;
      if (($wk_max$1 | 0) > 32767) {
       label = 50;
       break L9;
      }
      HEAP16[$pnt2$3 >> 1] = $inc277;
      HEAP32[$labelInfo + 1179664 + ($wk_max$1 << 2) >> 2] = $inc277 << 16 >> 16;
      $mul287 = $wk_max$1 * 7 | 0;
      HEAP32[$labelInfo + 1310736 + ($mul287 << 2) >> 2] = 1;
      HEAP32[$labelInfo + 1310736 + ($mul287 + 1 << 2) >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($mul287 + 2 << 2) >> 2] = $j$0;
      HEAP32[$labelInfo + 1310736 + ($mul287 + 3 << 2) >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($mul287 + 4 << 2) >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($mul287 + 5 << 2) >> 2] = $j$0;
      $$sink = $j$0;
      $add273$sink = $mul287 + 6 | 0;
      $wk_max$2 = $inc277;
     }
     HEAP32[$labelInfo + 1310736 + ($add273$sink << 2) >> 2] = $$sink;
     $wk_max$3 = $wk_max$2;
     break;
    }
    $sub71 = ($8 << 16 >> 16) + -1 | 0;
    $arrayidx72 = $labelInfo + 1179664 + ($sub71 << 2) | 0;
    if ($cmp66) {
     $10 = HEAP32[$arrayidx72 >> 2] | 0;
     $11 = HEAP32[$labelInfo + 1179664 + ($sub75 << 2) >> 2] | 0;
     L35 : do if (($10 | 0) > ($11 | 0)) {
      HEAP16[$pnt2$3 >> 1] = $11;
      $k$0 = 0;
      $wk$0 = $arraydecay;
      while (1) {
       if (($k$0 | 0) >= ($wk_max$1 | 0)) {
        $14 = $11;
        break L35;
       }
       if ((HEAP32[$wk$0 >> 2] | 0) == ($10 | 0)) HEAP32[$wk$0 >> 2] = $11;
       $k$0 = $k$0 + 1 | 0;
       $wk$0 = $wk$0 + 4 | 0;
      }
     } else {
      HEAP16[$pnt2$3 >> 1] = $10;
      if (($10 | 0) < ($11 | 0)) {
       $k$1 = 0;
       $wk$1 = $arraydecay;
       while (1) {
        if (($k$1 | 0) >= ($wk_max$1 | 0)) {
         $14 = $10;
         break L35;
        }
        if ((HEAP32[$wk$1 >> 2] | 0) == ($11 | 0)) HEAP32[$wk$1 >> 2] = $10;
        $k$1 = $k$1 + 1 | 0;
        $wk$1 = $wk$1 + 4 | 0;
       }
      } else $14 = $10;
     } while (0);
     $15 = ($14 << 16 >> 16) * 7 | 0;
     $arrayidx119 = $labelInfo + 1310736 + ($15 + -7 << 2) | 0;
     HEAP32[$arrayidx119 >> 2] = (HEAP32[$arrayidx119 >> 2] | 0) + 1;
     $arrayidx122 = $labelInfo + 1310736 + ($15 + -6 << 2) | 0;
     HEAP32[$arrayidx122 >> 2] = (HEAP32[$arrayidx122 >> 2] | 0) + $i$2;
     $arrayidx125 = $labelInfo + 1310736 + ($15 + -5 << 2) | 0;
     HEAP32[$arrayidx125 >> 2] = (HEAP32[$arrayidx125 >> 2] | 0) + $j$0;
     HEAP32[$labelInfo + 1310736 + ($15 + -1 << 2) >> 2] = $j$0;
     $wk_max$3 = $wk_max$1;
     break;
    }
    $19 = HEAP16[$add$ptr130 >> 1] | 0;
    if ($19 << 16 >> 16 <= 0) {
     HEAP16[$pnt2$3 >> 1] = $8;
     $mul198 = $sub71 * 7 | 0;
     $arrayidx200 = $labelInfo + 1310736 + ($mul198 << 2) | 0;
     HEAP32[$arrayidx200 >> 2] = (HEAP32[$arrayidx200 >> 2] | 0) + 1;
     $arrayidx203 = $labelInfo + 1310736 + ($mul198 + 1 << 2) | 0;
     HEAP32[$arrayidx203 >> 2] = (HEAP32[$arrayidx203 >> 2] | 0) + $i$2;
     $arrayidx206 = $labelInfo + 1310736 + ($mul198 + 2 << 2) | 0;
     HEAP32[$arrayidx206 >> 2] = (HEAP32[$arrayidx206 >> 2] | 0) + $j$0;
     $arrayidx209 = $labelInfo + 1310736 + ($mul198 + 3 << 2) | 0;
     if ((HEAP32[$arrayidx209 >> 2] | 0) > ($i$2 | 0)) HEAP32[$arrayidx209 >> 2] = $i$2;
     HEAP32[$labelInfo + 1310736 + ($mul198 + 6 << 2) >> 2] = $j$0;
     $wk_max$3 = $wk_max$1;
     break;
    }
    $20 = HEAP32[$arrayidx72 >> 2] | 0;
    $21 = HEAP32[$labelInfo + 1179664 + (($19 << 16 >> 16) + -1 << 2) >> 2] | 0;
    L58 : do if (($20 | 0) > ($21 | 0)) {
     HEAP16[$pnt2$3 >> 1] = $21;
     $k$2 = 0;
     $wk$2 = $arraydecay;
     while (1) {
      if (($k$2 | 0) >= ($wk_max$1 | 0)) {
       $24 = $21;
       break L58;
      }
      if ((HEAP32[$wk$2 >> 2] | 0) == ($20 | 0)) HEAP32[$wk$2 >> 2] = $21;
      $k$2 = $k$2 + 1 | 0;
      $wk$2 = $wk$2 + 4 | 0;
     }
    } else {
     HEAP16[$pnt2$3 >> 1] = $20;
     if (($20 | 0) < ($21 | 0)) {
      $k$3 = 0;
      $wk$3 = $arraydecay;
      while (1) {
       if (($k$3 | 0) >= ($wk_max$1 | 0)) {
        $24 = $20;
        break L58;
       }
       if ((HEAP32[$wk$3 >> 2] | 0) == ($21 | 0)) HEAP32[$wk$3 >> 2] = $20;
       $k$3 = $k$3 + 1 | 0;
       $wk$3 = $wk$3 + 4 | 0;
      }
     } else $24 = $20;
    } while (0);
    $25 = ($24 << 16 >> 16) * 7 | 0;
    $arrayidx186 = $labelInfo + 1310736 + ($25 + -7 << 2) | 0;
    HEAP32[$arrayidx186 >> 2] = (HEAP32[$arrayidx186 >> 2] | 0) + 1;
    $arrayidx189 = $labelInfo + 1310736 + ($25 + -6 << 2) | 0;
    HEAP32[$arrayidx189 >> 2] = (HEAP32[$arrayidx189 >> 2] | 0) + $i$2;
    $arrayidx192 = $labelInfo + 1310736 + ($25 + -5 << 2) | 0;
    HEAP32[$arrayidx192 >> 2] = (HEAP32[$arrayidx192 >> 2] | 0) + $j$0;
    $wk_max$3 = $wk_max$1;
   } else {
    HEAP16[$pnt2$3 >> 1] = 0;
    HEAP8[$dpnt$1 >> 0] = 0;
    $wk_max$3 = $wk_max$1;
   } while (0);
   $dpnt$1 = $dpnt$1 + 1 | 0;
   $i$2 = $i$2 + 1 | 0;
   $pnt$1 = $pnt$1 + 4 | 0;
   $pnt2$3 = $pnt2$3 + 2 | 0;
   $wk_max$1 = $wk_max$3;
  }
  $dpnt$0 = $dpnt$1 + 2 | 0;
  $j$0 = $j$0 + 1 | 0;
  $pnt$0 = $pnt$1 + $mul24 + 8 | 0;
  $pnt2$2 = $pnt2$3 + 4 | 0;
  $wk_max$0 = $wk_max$1;
 }
 L77 : do if ((label | 0) == 50) {
  _arLog(3, 3256, $vararg_buffer);
  $retval$0 = -1;
 } else if ((label | 0) == 56) {
  $arrayidx324 = $labelInfo + 12 | 0;
  $i$3 = 1;
  $j$1 = 1;
  $wk$4 = $arraydecay;
  while (1) {
   if (($i$3 | 0) > ($wk_max$0 | 0)) break;
   $43 = HEAP32[$wk$4 >> 2] | 0;
   if (($43 | 0) == ($i$3 | 0)) {
    $cond = $j$1;
    $j$2 = $j$1 + 1 | 0;
   } else {
    $cond = HEAP32[$labelInfo + 1179664 + ($43 + -1 << 2) >> 2] | 0;
    $j$2 = $j$1;
   }
   HEAP32[$wk$4 >> 2] = $cond;
   $i$3 = $i$3 + 1 | 0;
   $j$1 = $j$2;
   $wk$4 = $wk$4 + 4 | 0;
  }
  $label_num322 = $labelInfo + 8 | 0;
  $sub345 = $j$1 + -1 | 0;
  HEAP32[$label_num322 >> 2] = $sub345;
  if (!$sub345) $retval$0 = 0; else {
   _memset($arrayidx324 | 0, 0, $sub345 << 2 | 0) | 0;
   _memset($labelInfo + 655376 | 0, 0, $sub345 << 4 | 0) | 0;
   $45 = $sub345;
   $i$4 = 0;
   while (1) {
    if (($i$4 | 0) >= ($45 | 0)) {
     $i$5 = 0;
     break;
    }
    $mul357 = $i$4 << 2;
    HEAP32[$labelInfo + 131084 + ($mul357 << 2) >> 2] = $div;
    HEAP32[$labelInfo + 131084 + (($mul357 | 1) << 2) >> 2] = 0;
    HEAP32[$labelInfo + 131084 + (($mul357 | 2) << 2) >> 2] = $div1;
    HEAP32[$labelInfo + 131084 + (($mul357 | 3) << 2) >> 2] = 0;
    $45 = HEAP32[$label_num322 >> 2] | 0;
    $i$4 = $i$4 + 1 | 0;
   }
   while (1) {
    if (($i$5 | 0) >= ($wk_max$0 | 0)) {
     $i$6 = 0;
     break;
    }
    $sub377 = (HEAP32[$labelInfo + 1179664 + ($i$5 << 2) >> 2] | 0) + -1 | 0;
    $mul378 = $i$5 * 7 | 0;
    $arrayidx381 = $labelInfo + 12 + ($sub377 << 2) | 0;
    HEAP32[$arrayidx381 >> 2] = (HEAP32[$arrayidx381 >> 2] | 0) + (HEAP32[$labelInfo + 1310736 + ($mul378 << 2) >> 2] | 0);
    $mul387 = $sub377 << 1;
    $arrayidx389 = $labelInfo + 655376 + ($mul387 << 3) | 0;
    HEAPF64[$arrayidx389 >> 3] = +HEAPF64[$arrayidx389 >> 3] + +(HEAP32[$labelInfo + 1310736 + ($mul378 + 1 << 2) >> 2] | 0);
    $arrayidx397 = $labelInfo + 655376 + (($mul387 | 1) << 3) | 0;
    HEAPF64[$arrayidx397 >> 3] = +HEAPF64[$arrayidx397 >> 3] + +(HEAP32[$labelInfo + 1310736 + ($mul378 + 2 << 2) >> 2] | 0);
    $mul399 = $sub377 << 2;
    $arrayidx401 = $labelInfo + 131084 + ($mul399 << 2) | 0;
    $54 = HEAP32[$labelInfo + 1310736 + ($mul378 + 3 << 2) >> 2] | 0;
    if ((HEAP32[$arrayidx401 >> 2] | 0) > ($54 | 0)) HEAP32[$arrayidx401 >> 2] = $54;
    $arrayidx417 = $labelInfo + 131084 + (($mul399 | 1) << 2) | 0;
    $56 = HEAP32[$labelInfo + 1310736 + ($mul378 + 4 << 2) >> 2] | 0;
    if ((HEAP32[$arrayidx417 >> 2] | 0) < ($56 | 0)) HEAP32[$arrayidx417 >> 2] = $56;
    $arrayidx433 = $labelInfo + 131084 + (($mul399 | 2) << 2) | 0;
    $58 = HEAP32[$labelInfo + 1310736 + ($mul378 + 5 << 2) >> 2] | 0;
    if ((HEAP32[$arrayidx433 >> 2] | 0) > ($58 | 0)) HEAP32[$arrayidx433 >> 2] = $58;
    $arrayidx449 = $labelInfo + 131084 + (($mul399 | 3) << 2) | 0;
    $60 = HEAP32[$labelInfo + 1310736 + ($mul378 + 6 << 2) >> 2] | 0;
    if ((HEAP32[$arrayidx449 >> 2] | 0) < ($60 | 0)) HEAP32[$arrayidx449 >> 2] = $60;
    $i$5 = $i$5 + 1 | 0;
   }
   while (1) {
    if (($i$6 | 0) >= (HEAP32[$label_num322 >> 2] | 0)) {
     $retval$0 = 0;
     break L77;
    }
    $arrayidx470 = $labelInfo + 12 + ($i$6 << 2) | 0;
    $mul472 = $i$6 << 1;
    $arrayidx474 = $labelInfo + 655376 + ($mul472 << 3) | 0;
    HEAPF64[$arrayidx474 >> 3] = +HEAPF64[$arrayidx474 >> 3] / +(HEAP32[$arrayidx470 >> 2] | 0);
    $arrayidx480 = $labelInfo + 655376 + (($mul472 | 1) << 3) | 0;
    HEAPF64[$arrayidx480 >> 3] = +HEAPF64[$arrayidx480 >> 3] / +(HEAP32[$arrayidx470 >> 2] | 0);
    $i$6 = $i$6 + 1 | 0;
   }
  }
 } while (0);
 STACKTOP = sp;
 return $retval$0 | 0;
}

function _arLabelingSubEBICY($image, $xsize, $ysize, $labelingThresh, $labelInfo) {
 $image = $image | 0;
 $xsize = $xsize | 0;
 $ysize = $ysize | 0;
 $labelingThresh = $labelingThresh | 0;
 $labelInfo = $labelInfo | 0;
 var $$sink = 0, $0 = 0, $10 = 0, $11 = 0, $14 = 0, $15 = 0, $19 = 0, $20 = 0, $21 = 0, $24 = 0, $25 = 0, $3 = 0, $37 = 0, $38 = 0, $4 = 0, $43 = 0, $45 = 0, $54 = 0, $56 = 0, $58 = 0, $60 = 0, $8 = 0, $9 = 0, $add = 0, $add$ptr130 = 0, $add268 = 0, $add273$sink = 0, $arraydecay = 0, $arrayidx119 = 0, $arrayidx122 = 0, $arrayidx125 = 0, $arrayidx186 = 0, $arrayidx189 = 0, $arrayidx192 = 0, $arrayidx200 = 0, $arrayidx203 = 0, $arrayidx206 = 0, $arrayidx209 = 0, $arrayidx231 = 0, $arrayidx234 = 0, $arrayidx237 = 0, $arrayidx240 = 0, $arrayidx260 = 0, $arrayidx263 = 0, $arrayidx266 = 0, $arrayidx324 = 0, $arrayidx381 = 0, $arrayidx389 = 0, $arrayidx397 = 0, $arrayidx40 = 0, $arrayidx401 = 0, $arrayidx417 = 0, $arrayidx433 = 0, $arrayidx449 = 0, $arrayidx470 = 0, $arrayidx474 = 0, $arrayidx480 = 0, $arrayidx49 = 0, $arrayidx52 = 0, $arrayidx55 = 0, $arrayidx72 = 0, $cmp66 = 0, $cond = 0, $div = 0, $div1 = 0, $dpnt$0 = 0, $dpnt$1 = 0, $i$0 = 0, $i$1 = 0, $i$2 = 0, $i$3 = 0, $i$4 = 0, $i$5 = 0, $i$6 = 0, $inc277 = 0, $j$0 = 0, $j$1 = 0, $j$2 = 0, $k$0 = 0, $k$1 = 0, $k$2 = 0, $k$3 = 0, $label_num322 = 0, $mul198 = 0, $mul229 = 0, $mul24 = 0, $mul287 = 0, $mul357 = 0, $mul378 = 0, $mul387 = 0, $mul399 = 0, $mul472 = 0, $pnt$0 = 0, $pnt$1 = 0, $pnt1$0 = 0, $pnt1$1 = 0, $pnt2$0 = 0, $pnt2$1 = 0, $pnt2$2 = 0, $pnt2$3 = 0, $retval$0 = 0, $sub = 0, $sub345 = 0, $sub377 = 0, $sub39 = 0, $sub71 = 0, $sub75 = 0, $sub8 = 0, $vararg_buffer = 0, $wk$0 = 0, $wk$1 = 0, $wk$2 = 0, $wk$3 = 0, $wk$4 = 0, $wk_max$0 = 0, $wk_max$1 = 0, $wk_max$2 = 0, $wk_max$3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $vararg_buffer = sp;
 $div = ($xsize | 0) / 2 | 0;
 $div1 = ($ysize | 0) / 2 | 0;
 $0 = HEAP32[$labelInfo >> 2] | 0;
 $sub = $div1 + -1 | 0;
 $i$0 = 0;
 $pnt1$0 = $0;
 $pnt2$0 = $0 + ((Math_imul($sub, $div) | 0) << 1) | 0;
 while (1) {
  if (($i$0 | 0) >= ($div | 0)) break;
  HEAP16[$pnt2$0 >> 1] = 0;
  HEAP16[$pnt1$0 >> 1] = 0;
  $i$0 = $i$0 + 1 | 0;
  $pnt1$0 = $pnt1$0 + 2 | 0;
  $pnt2$0 = $pnt2$0 + 2 | 0;
 }
 $sub8 = $div + -1 | 0;
 $i$1 = 0;
 $pnt1$1 = $0;
 $pnt2$1 = $0 + ($sub8 << 1) | 0;
 while (1) {
  if (($i$1 | 0) >= ($div1 | 0)) break;
  HEAP16[$pnt2$1 >> 1] = 0;
  HEAP16[$pnt1$1 >> 1] = 0;
  $i$1 = $i$1 + 1 | 0;
  $pnt1$1 = $pnt1$1 + ($div << 1) | 0;
  $pnt2$1 = $pnt2$1 + ($div << 1) | 0;
 }
 $arraydecay = $labelInfo + 1179664 | 0;
 $add = $div + 1 | 0;
 $mul24 = $xsize << 1;
 $sub39 = 0 - $div | 0;
 $dpnt$0 = (HEAP32[$labelInfo + 4 >> 2] | 0) + $add | 0;
 $j$0 = 1;
 $pnt$0 = $image + (($xsize << 2) + 4) | 0;
 $pnt2$2 = $0 + ($add << 1) | 0;
 $wk_max$0 = 0;
 L9 : while (1) {
  if (($j$0 | 0) < ($sub | 0)) {
   $dpnt$1 = $dpnt$0;
   $i$2 = 1;
   $pnt$1 = $pnt$0;
   $pnt2$3 = $pnt2$2;
   $wk_max$1 = $wk_max$0;
  } else {
   label = 56;
   break;
  }
  while (1) {
   if (($i$2 | 0) >= ($sub8 | 0)) break;
   do if ((HEAPU8[$pnt$1 + 1 >> 0] | 0 | 0) > ($labelingThresh | 0)) {
    HEAP16[$pnt2$3 >> 1] = 0;
    HEAP8[$dpnt$1 >> 0] = 0;
    $wk_max$3 = $wk_max$1;
   } else {
    HEAP8[$dpnt$1 >> 0] = -1;
    $arrayidx40 = $pnt2$3 + ($sub39 << 1) | 0;
    $3 = HEAP16[$arrayidx40 >> 1] | 0;
    if ($3 << 16 >> 16 > 0) {
     HEAP16[$pnt2$3 >> 1] = $3;
     $4 = ($3 << 16 >> 16) * 7 | 0;
     $arrayidx49 = $labelInfo + 1310736 + ($4 + -7 << 2) | 0;
     HEAP32[$arrayidx49 >> 2] = (HEAP32[$arrayidx49 >> 2] | 0) + 1;
     $arrayidx52 = $labelInfo + 1310736 + ($4 + -6 << 2) | 0;
     HEAP32[$arrayidx52 >> 2] = (HEAP32[$arrayidx52 >> 2] | 0) + $i$2;
     $arrayidx55 = $labelInfo + 1310736 + ($4 + -5 << 2) | 0;
     HEAP32[$arrayidx55 >> 2] = (HEAP32[$arrayidx55 >> 2] | 0) + $j$0;
     HEAP32[$labelInfo + 1310736 + ($4 + -1 << 2) >> 2] = $j$0;
     $wk_max$3 = $wk_max$1;
     break;
    }
    $8 = HEAP16[$arrayidx40 + 2 >> 1] | 0;
    $9 = HEAP16[$arrayidx40 + -2 >> 1] | 0;
    $cmp66 = $9 << 16 >> 16 > 0;
    $sub75 = ($9 << 16 >> 16) + -1 | 0;
    $add$ptr130 = $pnt2$3 + -2 | 0;
    if ($8 << 16 >> 16 <= 0) {
     if ($cmp66) {
      HEAP16[$pnt2$3 >> 1] = $9;
      $mul229 = $sub75 * 7 | 0;
      $arrayidx231 = $labelInfo + 1310736 + ($mul229 << 2) | 0;
      HEAP32[$arrayidx231 >> 2] = (HEAP32[$arrayidx231 >> 2] | 0) + 1;
      $arrayidx234 = $labelInfo + 1310736 + ($mul229 + 1 << 2) | 0;
      HEAP32[$arrayidx234 >> 2] = (HEAP32[$arrayidx234 >> 2] | 0) + $i$2;
      $arrayidx237 = $labelInfo + 1310736 + ($mul229 + 2 << 2) | 0;
      HEAP32[$arrayidx237 >> 2] = (HEAP32[$arrayidx237 >> 2] | 0) + $j$0;
      $arrayidx240 = $labelInfo + 1310736 + ($mul229 + 4 << 2) | 0;
      if ((HEAP32[$arrayidx240 >> 2] | 0) < ($i$2 | 0)) HEAP32[$arrayidx240 >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($mul229 + 6 << 2) >> 2] = $j$0;
      $wk_max$3 = $wk_max$1;
      break;
     }
     $37 = HEAP16[$add$ptr130 >> 1] | 0;
     if ($37 << 16 >> 16 > 0) {
      HEAP16[$pnt2$3 >> 1] = $37;
      $38 = ($37 << 16 >> 16) * 7 | 0;
      $arrayidx260 = $labelInfo + 1310736 + ($38 + -7 << 2) | 0;
      HEAP32[$arrayidx260 >> 2] = (HEAP32[$arrayidx260 >> 2] | 0) + 1;
      $arrayidx263 = $labelInfo + 1310736 + ($38 + -6 << 2) | 0;
      HEAP32[$arrayidx263 >> 2] = (HEAP32[$arrayidx263 >> 2] | 0) + $i$2;
      $arrayidx266 = $labelInfo + 1310736 + ($38 + -5 << 2) | 0;
      HEAP32[$arrayidx266 >> 2] = (HEAP32[$arrayidx266 >> 2] | 0) + $j$0;
      $add268 = $38 + -3 | 0;
      if ((HEAP32[$labelInfo + 1310736 + ($add268 << 2) >> 2] | 0) < ($i$2 | 0)) {
       $$sink = $i$2;
       $add273$sink = $add268;
       $wk_max$2 = $wk_max$1;
      } else {
       $wk_max$3 = $wk_max$1;
       break;
      }
     } else {
      $inc277 = $wk_max$1 + 1 | 0;
      if (($wk_max$1 | 0) > 32767) {
       label = 50;
       break L9;
      }
      HEAP16[$pnt2$3 >> 1] = $inc277;
      HEAP32[$labelInfo + 1179664 + ($wk_max$1 << 2) >> 2] = $inc277 << 16 >> 16;
      $mul287 = $wk_max$1 * 7 | 0;
      HEAP32[$labelInfo + 1310736 + ($mul287 << 2) >> 2] = 1;
      HEAP32[$labelInfo + 1310736 + ($mul287 + 1 << 2) >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($mul287 + 2 << 2) >> 2] = $j$0;
      HEAP32[$labelInfo + 1310736 + ($mul287 + 3 << 2) >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($mul287 + 4 << 2) >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($mul287 + 5 << 2) >> 2] = $j$0;
      $$sink = $j$0;
      $add273$sink = $mul287 + 6 | 0;
      $wk_max$2 = $inc277;
     }
     HEAP32[$labelInfo + 1310736 + ($add273$sink << 2) >> 2] = $$sink;
     $wk_max$3 = $wk_max$2;
     break;
    }
    $sub71 = ($8 << 16 >> 16) + -1 | 0;
    $arrayidx72 = $labelInfo + 1179664 + ($sub71 << 2) | 0;
    if ($cmp66) {
     $10 = HEAP32[$arrayidx72 >> 2] | 0;
     $11 = HEAP32[$labelInfo + 1179664 + ($sub75 << 2) >> 2] | 0;
     L36 : do if (($10 | 0) > ($11 | 0)) {
      HEAP16[$pnt2$3 >> 1] = $11;
      $k$0 = 0;
      $wk$0 = $arraydecay;
      while (1) {
       if (($k$0 | 0) >= ($wk_max$1 | 0)) {
        $14 = $11;
        break L36;
       }
       if ((HEAP32[$wk$0 >> 2] | 0) == ($10 | 0)) HEAP32[$wk$0 >> 2] = $11;
       $k$0 = $k$0 + 1 | 0;
       $wk$0 = $wk$0 + 4 | 0;
      }
     } else {
      HEAP16[$pnt2$3 >> 1] = $10;
      if (($10 | 0) < ($11 | 0)) {
       $k$1 = 0;
       $wk$1 = $arraydecay;
       while (1) {
        if (($k$1 | 0) >= ($wk_max$1 | 0)) {
         $14 = $10;
         break L36;
        }
        if ((HEAP32[$wk$1 >> 2] | 0) == ($11 | 0)) HEAP32[$wk$1 >> 2] = $10;
        $k$1 = $k$1 + 1 | 0;
        $wk$1 = $wk$1 + 4 | 0;
       }
      } else $14 = $10;
     } while (0);
     $15 = ($14 << 16 >> 16) * 7 | 0;
     $arrayidx119 = $labelInfo + 1310736 + ($15 + -7 << 2) | 0;
     HEAP32[$arrayidx119 >> 2] = (HEAP32[$arrayidx119 >> 2] | 0) + 1;
     $arrayidx122 = $labelInfo + 1310736 + ($15 + -6 << 2) | 0;
     HEAP32[$arrayidx122 >> 2] = (HEAP32[$arrayidx122 >> 2] | 0) + $i$2;
     $arrayidx125 = $labelInfo + 1310736 + ($15 + -5 << 2) | 0;
     HEAP32[$arrayidx125 >> 2] = (HEAP32[$arrayidx125 >> 2] | 0) + $j$0;
     HEAP32[$labelInfo + 1310736 + ($15 + -1 << 2) >> 2] = $j$0;
     $wk_max$3 = $wk_max$1;
     break;
    }
    $19 = HEAP16[$add$ptr130 >> 1] | 0;
    if ($19 << 16 >> 16 <= 0) {
     HEAP16[$pnt2$3 >> 1] = $8;
     $mul198 = $sub71 * 7 | 0;
     $arrayidx200 = $labelInfo + 1310736 + ($mul198 << 2) | 0;
     HEAP32[$arrayidx200 >> 2] = (HEAP32[$arrayidx200 >> 2] | 0) + 1;
     $arrayidx203 = $labelInfo + 1310736 + ($mul198 + 1 << 2) | 0;
     HEAP32[$arrayidx203 >> 2] = (HEAP32[$arrayidx203 >> 2] | 0) + $i$2;
     $arrayidx206 = $labelInfo + 1310736 + ($mul198 + 2 << 2) | 0;
     HEAP32[$arrayidx206 >> 2] = (HEAP32[$arrayidx206 >> 2] | 0) + $j$0;
     $arrayidx209 = $labelInfo + 1310736 + ($mul198 + 3 << 2) | 0;
     if ((HEAP32[$arrayidx209 >> 2] | 0) > ($i$2 | 0)) HEAP32[$arrayidx209 >> 2] = $i$2;
     HEAP32[$labelInfo + 1310736 + ($mul198 + 6 << 2) >> 2] = $j$0;
     $wk_max$3 = $wk_max$1;
     break;
    }
    $20 = HEAP32[$arrayidx72 >> 2] | 0;
    $21 = HEAP32[$labelInfo + 1179664 + (($19 << 16 >> 16) + -1 << 2) >> 2] | 0;
    L59 : do if (($20 | 0) > ($21 | 0)) {
     HEAP16[$pnt2$3 >> 1] = $21;
     $k$2 = 0;
     $wk$2 = $arraydecay;
     while (1) {
      if (($k$2 | 0) >= ($wk_max$1 | 0)) {
       $24 = $21;
       break L59;
      }
      if ((HEAP32[$wk$2 >> 2] | 0) == ($20 | 0)) HEAP32[$wk$2 >> 2] = $21;
      $k$2 = $k$2 + 1 | 0;
      $wk$2 = $wk$2 + 4 | 0;
     }
    } else {
     HEAP16[$pnt2$3 >> 1] = $20;
     if (($20 | 0) < ($21 | 0)) {
      $k$3 = 0;
      $wk$3 = $arraydecay;
      while (1) {
       if (($k$3 | 0) >= ($wk_max$1 | 0)) {
        $24 = $20;
        break L59;
       }
       if ((HEAP32[$wk$3 >> 2] | 0) == ($21 | 0)) HEAP32[$wk$3 >> 2] = $20;
       $k$3 = $k$3 + 1 | 0;
       $wk$3 = $wk$3 + 4 | 0;
      }
     } else $24 = $20;
    } while (0);
    $25 = ($24 << 16 >> 16) * 7 | 0;
    $arrayidx186 = $labelInfo + 1310736 + ($25 + -7 << 2) | 0;
    HEAP32[$arrayidx186 >> 2] = (HEAP32[$arrayidx186 >> 2] | 0) + 1;
    $arrayidx189 = $labelInfo + 1310736 + ($25 + -6 << 2) | 0;
    HEAP32[$arrayidx189 >> 2] = (HEAP32[$arrayidx189 >> 2] | 0) + $i$2;
    $arrayidx192 = $labelInfo + 1310736 + ($25 + -5 << 2) | 0;
    HEAP32[$arrayidx192 >> 2] = (HEAP32[$arrayidx192 >> 2] | 0) + $j$0;
    $wk_max$3 = $wk_max$1;
   } while (0);
   $dpnt$1 = $dpnt$1 + 1 | 0;
   $i$2 = $i$2 + 1 | 0;
   $pnt$1 = $pnt$1 + 4 | 0;
   $pnt2$3 = $pnt2$3 + 2 | 0;
   $wk_max$1 = $wk_max$3;
  }
  $dpnt$0 = $dpnt$1 + 2 | 0;
  $j$0 = $j$0 + 1 | 0;
  $pnt$0 = $pnt$1 + $mul24 + 8 | 0;
  $pnt2$2 = $pnt2$3 + 4 | 0;
  $wk_max$0 = $wk_max$1;
 }
 L77 : do if ((label | 0) == 50) {
  _arLog(3, 3256, $vararg_buffer);
  $retval$0 = -1;
 } else if ((label | 0) == 56) {
  $arrayidx324 = $labelInfo + 12 | 0;
  $i$3 = 1;
  $j$1 = 1;
  $wk$4 = $arraydecay;
  while (1) {
   if (($i$3 | 0) > ($wk_max$0 | 0)) break;
   $43 = HEAP32[$wk$4 >> 2] | 0;
   if (($43 | 0) == ($i$3 | 0)) {
    $cond = $j$1;
    $j$2 = $j$1 + 1 | 0;
   } else {
    $cond = HEAP32[$labelInfo + 1179664 + ($43 + -1 << 2) >> 2] | 0;
    $j$2 = $j$1;
   }
   HEAP32[$wk$4 >> 2] = $cond;
   $i$3 = $i$3 + 1 | 0;
   $j$1 = $j$2;
   $wk$4 = $wk$4 + 4 | 0;
  }
  $label_num322 = $labelInfo + 8 | 0;
  $sub345 = $j$1 + -1 | 0;
  HEAP32[$label_num322 >> 2] = $sub345;
  if (!$sub345) $retval$0 = 0; else {
   _memset($arrayidx324 | 0, 0, $sub345 << 2 | 0) | 0;
   _memset($labelInfo + 655376 | 0, 0, $sub345 << 4 | 0) | 0;
   $45 = $sub345;
   $i$4 = 0;
   while (1) {
    if (($i$4 | 0) >= ($45 | 0)) {
     $i$5 = 0;
     break;
    }
    $mul357 = $i$4 << 2;
    HEAP32[$labelInfo + 131084 + ($mul357 << 2) >> 2] = $div;
    HEAP32[$labelInfo + 131084 + (($mul357 | 1) << 2) >> 2] = 0;
    HEAP32[$labelInfo + 131084 + (($mul357 | 2) << 2) >> 2] = $div1;
    HEAP32[$labelInfo + 131084 + (($mul357 | 3) << 2) >> 2] = 0;
    $45 = HEAP32[$label_num322 >> 2] | 0;
    $i$4 = $i$4 + 1 | 0;
   }
   while (1) {
    if (($i$5 | 0) >= ($wk_max$0 | 0)) {
     $i$6 = 0;
     break;
    }
    $sub377 = (HEAP32[$labelInfo + 1179664 + ($i$5 << 2) >> 2] | 0) + -1 | 0;
    $mul378 = $i$5 * 7 | 0;
    $arrayidx381 = $labelInfo + 12 + ($sub377 << 2) | 0;
    HEAP32[$arrayidx381 >> 2] = (HEAP32[$arrayidx381 >> 2] | 0) + (HEAP32[$labelInfo + 1310736 + ($mul378 << 2) >> 2] | 0);
    $mul387 = $sub377 << 1;
    $arrayidx389 = $labelInfo + 655376 + ($mul387 << 3) | 0;
    HEAPF64[$arrayidx389 >> 3] = +HEAPF64[$arrayidx389 >> 3] + +(HEAP32[$labelInfo + 1310736 + ($mul378 + 1 << 2) >> 2] | 0);
    $arrayidx397 = $labelInfo + 655376 + (($mul387 | 1) << 3) | 0;
    HEAPF64[$arrayidx397 >> 3] = +HEAPF64[$arrayidx397 >> 3] + +(HEAP32[$labelInfo + 1310736 + ($mul378 + 2 << 2) >> 2] | 0);
    $mul399 = $sub377 << 2;
    $arrayidx401 = $labelInfo + 131084 + ($mul399 << 2) | 0;
    $54 = HEAP32[$labelInfo + 1310736 + ($mul378 + 3 << 2) >> 2] | 0;
    if ((HEAP32[$arrayidx401 >> 2] | 0) > ($54 | 0)) HEAP32[$arrayidx401 >> 2] = $54;
    $arrayidx417 = $labelInfo + 131084 + (($mul399 | 1) << 2) | 0;
    $56 = HEAP32[$labelInfo + 1310736 + ($mul378 + 4 << 2) >> 2] | 0;
    if ((HEAP32[$arrayidx417 >> 2] | 0) < ($56 | 0)) HEAP32[$arrayidx417 >> 2] = $56;
    $arrayidx433 = $labelInfo + 131084 + (($mul399 | 2) << 2) | 0;
    $58 = HEAP32[$labelInfo + 1310736 + ($mul378 + 5 << 2) >> 2] | 0;
    if ((HEAP32[$arrayidx433 >> 2] | 0) > ($58 | 0)) HEAP32[$arrayidx433 >> 2] = $58;
    $arrayidx449 = $labelInfo + 131084 + (($mul399 | 3) << 2) | 0;
    $60 = HEAP32[$labelInfo + 1310736 + ($mul378 + 6 << 2) >> 2] | 0;
    if ((HEAP32[$arrayidx449 >> 2] | 0) < ($60 | 0)) HEAP32[$arrayidx449 >> 2] = $60;
    $i$5 = $i$5 + 1 | 0;
   }
   while (1) {
    if (($i$6 | 0) >= (HEAP32[$label_num322 >> 2] | 0)) {
     $retval$0 = 0;
     break L77;
    }
    $arrayidx470 = $labelInfo + 12 + ($i$6 << 2) | 0;
    $mul472 = $i$6 << 1;
    $arrayidx474 = $labelInfo + 655376 + ($mul472 << 3) | 0;
    HEAPF64[$arrayidx474 >> 3] = +HEAPF64[$arrayidx474 >> 3] / +(HEAP32[$arrayidx470 >> 2] | 0);
    $arrayidx480 = $labelInfo + 655376 + (($mul472 | 1) << 3) | 0;
    HEAPF64[$arrayidx480 >> 3] = +HEAPF64[$arrayidx480 >> 3] / +(HEAP32[$arrayidx470 >> 2] | 0);
    $i$6 = $i$6 + 1 | 0;
   }
  }
 } while (0);
 STACKTOP = sp;
 return $retval$0 | 0;
}

function _arLabelingSubEWIYC($image, $xsize, $ysize, $labelingThresh, $labelInfo) {
 $image = $image | 0;
 $xsize = $xsize | 0;
 $ysize = $ysize | 0;
 $labelingThresh = $labelingThresh | 0;
 $labelInfo = $labelInfo | 0;
 var $$sink = 0, $0 = 0, $10 = 0, $11 = 0, $14 = 0, $15 = 0, $19 = 0, $20 = 0, $21 = 0, $24 = 0, $25 = 0, $3 = 0, $37 = 0, $38 = 0, $4 = 0, $43 = 0, $45 = 0, $54 = 0, $56 = 0, $58 = 0, $60 = 0, $8 = 0, $9 = 0, $add = 0, $add$ptr129 = 0, $add267 = 0, $add272$sink = 0, $arraydecay = 0, $arrayidx118 = 0, $arrayidx121 = 0, $arrayidx124 = 0, $arrayidx185 = 0, $arrayidx188 = 0, $arrayidx191 = 0, $arrayidx199 = 0, $arrayidx202 = 0, $arrayidx205 = 0, $arrayidx208 = 0, $arrayidx230 = 0, $arrayidx233 = 0, $arrayidx236 = 0, $arrayidx239 = 0, $arrayidx259 = 0, $arrayidx262 = 0, $arrayidx265 = 0, $arrayidx323 = 0, $arrayidx380 = 0, $arrayidx388 = 0, $arrayidx39 = 0, $arrayidx396 = 0, $arrayidx400 = 0, $arrayidx416 = 0, $arrayidx432 = 0, $arrayidx448 = 0, $arrayidx469 = 0, $arrayidx473 = 0, $arrayidx479 = 0, $arrayidx48 = 0, $arrayidx51 = 0, $arrayidx54 = 0, $arrayidx71 = 0, $cmp65 = 0, $cond = 0, $div = 0, $div1 = 0, $dpnt$0 = 0, $dpnt$1 = 0, $i$0 = 0, $i$1 = 0, $i$2 = 0, $i$3 = 0, $i$4 = 0, $i$5 = 0, $i$6 = 0, $inc276 = 0, $j$0 = 0, $j$1 = 0, $j$2 = 0, $k$0 = 0, $k$1 = 0, $k$2 = 0, $k$3 = 0, $label_num321 = 0, $mul197 = 0, $mul228 = 0, $mul24 = 0, $mul286 = 0, $mul356 = 0, $mul377 = 0, $mul386 = 0, $mul398 = 0, $mul471 = 0, $pnt$0 = 0, $pnt$1 = 0, $pnt1$0 = 0, $pnt1$1 = 0, $pnt2$0 = 0, $pnt2$1 = 0, $pnt2$2 = 0, $pnt2$3 = 0, $retval$0 = 0, $sub = 0, $sub344 = 0, $sub376 = 0, $sub38 = 0, $sub70 = 0, $sub74 = 0, $sub8 = 0, $vararg_buffer = 0, $wk$0 = 0, $wk$1 = 0, $wk$2 = 0, $wk$3 = 0, $wk$4 = 0, $wk_max$0 = 0, $wk_max$1 = 0, $wk_max$2 = 0, $wk_max$3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $vararg_buffer = sp;
 $div = ($xsize | 0) / 2 | 0;
 $div1 = ($ysize | 0) / 2 | 0;
 $0 = HEAP32[$labelInfo >> 2] | 0;
 $sub = $div1 + -1 | 0;
 $i$0 = 0;
 $pnt1$0 = $0;
 $pnt2$0 = $0 + ((Math_imul($sub, $div) | 0) << 1) | 0;
 while (1) {
  if (($i$0 | 0) >= ($div | 0)) break;
  HEAP16[$pnt2$0 >> 1] = 0;
  HEAP16[$pnt1$0 >> 1] = 0;
  $i$0 = $i$0 + 1 | 0;
  $pnt1$0 = $pnt1$0 + 2 | 0;
  $pnt2$0 = $pnt2$0 + 2 | 0;
 }
 $sub8 = $div + -1 | 0;
 $i$1 = 0;
 $pnt1$1 = $0;
 $pnt2$1 = $0 + ($sub8 << 1) | 0;
 while (1) {
  if (($i$1 | 0) >= ($div1 | 0)) break;
  HEAP16[$pnt2$1 >> 1] = 0;
  HEAP16[$pnt1$1 >> 1] = 0;
  $i$1 = $i$1 + 1 | 0;
  $pnt1$1 = $pnt1$1 + ($div << 1) | 0;
  $pnt2$1 = $pnt2$1 + ($div << 1) | 0;
 }
 $arraydecay = $labelInfo + 1179664 | 0;
 $add = $div + 1 | 0;
 $mul24 = $xsize << 1;
 $sub38 = 0 - $div | 0;
 $dpnt$0 = (HEAP32[$labelInfo + 4 >> 2] | 0) + $add | 0;
 $j$0 = 1;
 $pnt$0 = $image + (($xsize << 2) + 4) | 0;
 $pnt2$2 = $0 + ($add << 1) | 0;
 $wk_max$0 = 0;
 L9 : while (1) {
  if (($j$0 | 0) < ($sub | 0)) {
   $dpnt$1 = $dpnt$0;
   $i$2 = 1;
   $pnt$1 = $pnt$0;
   $pnt2$3 = $pnt2$2;
   $wk_max$1 = $wk_max$0;
  } else {
   label = 56;
   break;
  }
  while (1) {
   if (($i$2 | 0) >= ($sub8 | 0)) break;
   do if ((HEAPU8[$pnt$1 >> 0] | 0 | 0) > ($labelingThresh | 0)) {
    HEAP8[$dpnt$1 >> 0] = -1;
    $arrayidx39 = $pnt2$3 + ($sub38 << 1) | 0;
    $3 = HEAP16[$arrayidx39 >> 1] | 0;
    if ($3 << 16 >> 16 > 0) {
     HEAP16[$pnt2$3 >> 1] = $3;
     $4 = ($3 << 16 >> 16) * 7 | 0;
     $arrayidx48 = $labelInfo + 1310736 + ($4 + -7 << 2) | 0;
     HEAP32[$arrayidx48 >> 2] = (HEAP32[$arrayidx48 >> 2] | 0) + 1;
     $arrayidx51 = $labelInfo + 1310736 + ($4 + -6 << 2) | 0;
     HEAP32[$arrayidx51 >> 2] = (HEAP32[$arrayidx51 >> 2] | 0) + $i$2;
     $arrayidx54 = $labelInfo + 1310736 + ($4 + -5 << 2) | 0;
     HEAP32[$arrayidx54 >> 2] = (HEAP32[$arrayidx54 >> 2] | 0) + $j$0;
     HEAP32[$labelInfo + 1310736 + ($4 + -1 << 2) >> 2] = $j$0;
     $wk_max$3 = $wk_max$1;
     break;
    }
    $8 = HEAP16[$arrayidx39 + 2 >> 1] | 0;
    $9 = HEAP16[$arrayidx39 + -2 >> 1] | 0;
    $cmp65 = $9 << 16 >> 16 > 0;
    $sub74 = ($9 << 16 >> 16) + -1 | 0;
    $add$ptr129 = $pnt2$3 + -2 | 0;
    if ($8 << 16 >> 16 <= 0) {
     if ($cmp65) {
      HEAP16[$pnt2$3 >> 1] = $9;
      $mul228 = $sub74 * 7 | 0;
      $arrayidx230 = $labelInfo + 1310736 + ($mul228 << 2) | 0;
      HEAP32[$arrayidx230 >> 2] = (HEAP32[$arrayidx230 >> 2] | 0) + 1;
      $arrayidx233 = $labelInfo + 1310736 + ($mul228 + 1 << 2) | 0;
      HEAP32[$arrayidx233 >> 2] = (HEAP32[$arrayidx233 >> 2] | 0) + $i$2;
      $arrayidx236 = $labelInfo + 1310736 + ($mul228 + 2 << 2) | 0;
      HEAP32[$arrayidx236 >> 2] = (HEAP32[$arrayidx236 >> 2] | 0) + $j$0;
      $arrayidx239 = $labelInfo + 1310736 + ($mul228 + 4 << 2) | 0;
      if ((HEAP32[$arrayidx239 >> 2] | 0) < ($i$2 | 0)) HEAP32[$arrayidx239 >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($mul228 + 6 << 2) >> 2] = $j$0;
      $wk_max$3 = $wk_max$1;
      break;
     }
     $37 = HEAP16[$add$ptr129 >> 1] | 0;
     if ($37 << 16 >> 16 > 0) {
      HEAP16[$pnt2$3 >> 1] = $37;
      $38 = ($37 << 16 >> 16) * 7 | 0;
      $arrayidx259 = $labelInfo + 1310736 + ($38 + -7 << 2) | 0;
      HEAP32[$arrayidx259 >> 2] = (HEAP32[$arrayidx259 >> 2] | 0) + 1;
      $arrayidx262 = $labelInfo + 1310736 + ($38 + -6 << 2) | 0;
      HEAP32[$arrayidx262 >> 2] = (HEAP32[$arrayidx262 >> 2] | 0) + $i$2;
      $arrayidx265 = $labelInfo + 1310736 + ($38 + -5 << 2) | 0;
      HEAP32[$arrayidx265 >> 2] = (HEAP32[$arrayidx265 >> 2] | 0) + $j$0;
      $add267 = $38 + -3 | 0;
      if ((HEAP32[$labelInfo + 1310736 + ($add267 << 2) >> 2] | 0) < ($i$2 | 0)) {
       $$sink = $i$2;
       $add272$sink = $add267;
       $wk_max$2 = $wk_max$1;
      } else {
       $wk_max$3 = $wk_max$1;
       break;
      }
     } else {
      $inc276 = $wk_max$1 + 1 | 0;
      if (($wk_max$1 | 0) > 32767) {
       label = 50;
       break L9;
      }
      HEAP16[$pnt2$3 >> 1] = $inc276;
      HEAP32[$labelInfo + 1179664 + ($wk_max$1 << 2) >> 2] = $inc276 << 16 >> 16;
      $mul286 = $wk_max$1 * 7 | 0;
      HEAP32[$labelInfo + 1310736 + ($mul286 << 2) >> 2] = 1;
      HEAP32[$labelInfo + 1310736 + ($mul286 + 1 << 2) >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($mul286 + 2 << 2) >> 2] = $j$0;
      HEAP32[$labelInfo + 1310736 + ($mul286 + 3 << 2) >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($mul286 + 4 << 2) >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($mul286 + 5 << 2) >> 2] = $j$0;
      $$sink = $j$0;
      $add272$sink = $mul286 + 6 | 0;
      $wk_max$2 = $inc276;
     }
     HEAP32[$labelInfo + 1310736 + ($add272$sink << 2) >> 2] = $$sink;
     $wk_max$3 = $wk_max$2;
     break;
    }
    $sub70 = ($8 << 16 >> 16) + -1 | 0;
    $arrayidx71 = $labelInfo + 1179664 + ($sub70 << 2) | 0;
    if ($cmp65) {
     $10 = HEAP32[$arrayidx71 >> 2] | 0;
     $11 = HEAP32[$labelInfo + 1179664 + ($sub74 << 2) >> 2] | 0;
     L35 : do if (($10 | 0) > ($11 | 0)) {
      HEAP16[$pnt2$3 >> 1] = $11;
      $k$0 = 0;
      $wk$0 = $arraydecay;
      while (1) {
       if (($k$0 | 0) >= ($wk_max$1 | 0)) {
        $14 = $11;
        break L35;
       }
       if ((HEAP32[$wk$0 >> 2] | 0) == ($10 | 0)) HEAP32[$wk$0 >> 2] = $11;
       $k$0 = $k$0 + 1 | 0;
       $wk$0 = $wk$0 + 4 | 0;
      }
     } else {
      HEAP16[$pnt2$3 >> 1] = $10;
      if (($10 | 0) < ($11 | 0)) {
       $k$1 = 0;
       $wk$1 = $arraydecay;
       while (1) {
        if (($k$1 | 0) >= ($wk_max$1 | 0)) {
         $14 = $10;
         break L35;
        }
        if ((HEAP32[$wk$1 >> 2] | 0) == ($11 | 0)) HEAP32[$wk$1 >> 2] = $10;
        $k$1 = $k$1 + 1 | 0;
        $wk$1 = $wk$1 + 4 | 0;
       }
      } else $14 = $10;
     } while (0);
     $15 = ($14 << 16 >> 16) * 7 | 0;
     $arrayidx118 = $labelInfo + 1310736 + ($15 + -7 << 2) | 0;
     HEAP32[$arrayidx118 >> 2] = (HEAP32[$arrayidx118 >> 2] | 0) + 1;
     $arrayidx121 = $labelInfo + 1310736 + ($15 + -6 << 2) | 0;
     HEAP32[$arrayidx121 >> 2] = (HEAP32[$arrayidx121 >> 2] | 0) + $i$2;
     $arrayidx124 = $labelInfo + 1310736 + ($15 + -5 << 2) | 0;
     HEAP32[$arrayidx124 >> 2] = (HEAP32[$arrayidx124 >> 2] | 0) + $j$0;
     HEAP32[$labelInfo + 1310736 + ($15 + -1 << 2) >> 2] = $j$0;
     $wk_max$3 = $wk_max$1;
     break;
    }
    $19 = HEAP16[$add$ptr129 >> 1] | 0;
    if ($19 << 16 >> 16 <= 0) {
     HEAP16[$pnt2$3 >> 1] = $8;
     $mul197 = $sub70 * 7 | 0;
     $arrayidx199 = $labelInfo + 1310736 + ($mul197 << 2) | 0;
     HEAP32[$arrayidx199 >> 2] = (HEAP32[$arrayidx199 >> 2] | 0) + 1;
     $arrayidx202 = $labelInfo + 1310736 + ($mul197 + 1 << 2) | 0;
     HEAP32[$arrayidx202 >> 2] = (HEAP32[$arrayidx202 >> 2] | 0) + $i$2;
     $arrayidx205 = $labelInfo + 1310736 + ($mul197 + 2 << 2) | 0;
     HEAP32[$arrayidx205 >> 2] = (HEAP32[$arrayidx205 >> 2] | 0) + $j$0;
     $arrayidx208 = $labelInfo + 1310736 + ($mul197 + 3 << 2) | 0;
     if ((HEAP32[$arrayidx208 >> 2] | 0) > ($i$2 | 0)) HEAP32[$arrayidx208 >> 2] = $i$2;
     HEAP32[$labelInfo + 1310736 + ($mul197 + 6 << 2) >> 2] = $j$0;
     $wk_max$3 = $wk_max$1;
     break;
    }
    $20 = HEAP32[$arrayidx71 >> 2] | 0;
    $21 = HEAP32[$labelInfo + 1179664 + (($19 << 16 >> 16) + -1 << 2) >> 2] | 0;
    L58 : do if (($20 | 0) > ($21 | 0)) {
     HEAP16[$pnt2$3 >> 1] = $21;
     $k$2 = 0;
     $wk$2 = $arraydecay;
     while (1) {
      if (($k$2 | 0) >= ($wk_max$1 | 0)) {
       $24 = $21;
       break L58;
      }
      if ((HEAP32[$wk$2 >> 2] | 0) == ($20 | 0)) HEAP32[$wk$2 >> 2] = $21;
      $k$2 = $k$2 + 1 | 0;
      $wk$2 = $wk$2 + 4 | 0;
     }
    } else {
     HEAP16[$pnt2$3 >> 1] = $20;
     if (($20 | 0) < ($21 | 0)) {
      $k$3 = 0;
      $wk$3 = $arraydecay;
      while (1) {
       if (($k$3 | 0) >= ($wk_max$1 | 0)) {
        $24 = $20;
        break L58;
       }
       if ((HEAP32[$wk$3 >> 2] | 0) == ($21 | 0)) HEAP32[$wk$3 >> 2] = $20;
       $k$3 = $k$3 + 1 | 0;
       $wk$3 = $wk$3 + 4 | 0;
      }
     } else $24 = $20;
    } while (0);
    $25 = ($24 << 16 >> 16) * 7 | 0;
    $arrayidx185 = $labelInfo + 1310736 + ($25 + -7 << 2) | 0;
    HEAP32[$arrayidx185 >> 2] = (HEAP32[$arrayidx185 >> 2] | 0) + 1;
    $arrayidx188 = $labelInfo + 1310736 + ($25 + -6 << 2) | 0;
    HEAP32[$arrayidx188 >> 2] = (HEAP32[$arrayidx188 >> 2] | 0) + $i$2;
    $arrayidx191 = $labelInfo + 1310736 + ($25 + -5 << 2) | 0;
    HEAP32[$arrayidx191 >> 2] = (HEAP32[$arrayidx191 >> 2] | 0) + $j$0;
    $wk_max$3 = $wk_max$1;
   } else {
    HEAP16[$pnt2$3 >> 1] = 0;
    HEAP8[$dpnt$1 >> 0] = 0;
    $wk_max$3 = $wk_max$1;
   } while (0);
   $dpnt$1 = $dpnt$1 + 1 | 0;
   $i$2 = $i$2 + 1 | 0;
   $pnt$1 = $pnt$1 + 4 | 0;
   $pnt2$3 = $pnt2$3 + 2 | 0;
   $wk_max$1 = $wk_max$3;
  }
  $dpnt$0 = $dpnt$1 + 2 | 0;
  $j$0 = $j$0 + 1 | 0;
  $pnt$0 = $pnt$1 + $mul24 + 8 | 0;
  $pnt2$2 = $pnt2$3 + 4 | 0;
  $wk_max$0 = $wk_max$1;
 }
 L77 : do if ((label | 0) == 50) {
  _arLog(3, 3256, $vararg_buffer);
  $retval$0 = -1;
 } else if ((label | 0) == 56) {
  $arrayidx323 = $labelInfo + 12 | 0;
  $i$3 = 1;
  $j$1 = 1;
  $wk$4 = $arraydecay;
  while (1) {
   if (($i$3 | 0) > ($wk_max$0 | 0)) break;
   $43 = HEAP32[$wk$4 >> 2] | 0;
   if (($43 | 0) == ($i$3 | 0)) {
    $cond = $j$1;
    $j$2 = $j$1 + 1 | 0;
   } else {
    $cond = HEAP32[$labelInfo + 1179664 + ($43 + -1 << 2) >> 2] | 0;
    $j$2 = $j$1;
   }
   HEAP32[$wk$4 >> 2] = $cond;
   $i$3 = $i$3 + 1 | 0;
   $j$1 = $j$2;
   $wk$4 = $wk$4 + 4 | 0;
  }
  $label_num321 = $labelInfo + 8 | 0;
  $sub344 = $j$1 + -1 | 0;
  HEAP32[$label_num321 >> 2] = $sub344;
  if (!$sub344) $retval$0 = 0; else {
   _memset($arrayidx323 | 0, 0, $sub344 << 2 | 0) | 0;
   _memset($labelInfo + 655376 | 0, 0, $sub344 << 4 | 0) | 0;
   $45 = $sub344;
   $i$4 = 0;
   while (1) {
    if (($i$4 | 0) >= ($45 | 0)) {
     $i$5 = 0;
     break;
    }
    $mul356 = $i$4 << 2;
    HEAP32[$labelInfo + 131084 + ($mul356 << 2) >> 2] = $div;
    HEAP32[$labelInfo + 131084 + (($mul356 | 1) << 2) >> 2] = 0;
    HEAP32[$labelInfo + 131084 + (($mul356 | 2) << 2) >> 2] = $div1;
    HEAP32[$labelInfo + 131084 + (($mul356 | 3) << 2) >> 2] = 0;
    $45 = HEAP32[$label_num321 >> 2] | 0;
    $i$4 = $i$4 + 1 | 0;
   }
   while (1) {
    if (($i$5 | 0) >= ($wk_max$0 | 0)) {
     $i$6 = 0;
     break;
    }
    $sub376 = (HEAP32[$labelInfo + 1179664 + ($i$5 << 2) >> 2] | 0) + -1 | 0;
    $mul377 = $i$5 * 7 | 0;
    $arrayidx380 = $labelInfo + 12 + ($sub376 << 2) | 0;
    HEAP32[$arrayidx380 >> 2] = (HEAP32[$arrayidx380 >> 2] | 0) + (HEAP32[$labelInfo + 1310736 + ($mul377 << 2) >> 2] | 0);
    $mul386 = $sub376 << 1;
    $arrayidx388 = $labelInfo + 655376 + ($mul386 << 3) | 0;
    HEAPF64[$arrayidx388 >> 3] = +HEAPF64[$arrayidx388 >> 3] + +(HEAP32[$labelInfo + 1310736 + ($mul377 + 1 << 2) >> 2] | 0);
    $arrayidx396 = $labelInfo + 655376 + (($mul386 | 1) << 3) | 0;
    HEAPF64[$arrayidx396 >> 3] = +HEAPF64[$arrayidx396 >> 3] + +(HEAP32[$labelInfo + 1310736 + ($mul377 + 2 << 2) >> 2] | 0);
    $mul398 = $sub376 << 2;
    $arrayidx400 = $labelInfo + 131084 + ($mul398 << 2) | 0;
    $54 = HEAP32[$labelInfo + 1310736 + ($mul377 + 3 << 2) >> 2] | 0;
    if ((HEAP32[$arrayidx400 >> 2] | 0) > ($54 | 0)) HEAP32[$arrayidx400 >> 2] = $54;
    $arrayidx416 = $labelInfo + 131084 + (($mul398 | 1) << 2) | 0;
    $56 = HEAP32[$labelInfo + 1310736 + ($mul377 + 4 << 2) >> 2] | 0;
    if ((HEAP32[$arrayidx416 >> 2] | 0) < ($56 | 0)) HEAP32[$arrayidx416 >> 2] = $56;
    $arrayidx432 = $labelInfo + 131084 + (($mul398 | 2) << 2) | 0;
    $58 = HEAP32[$labelInfo + 1310736 + ($mul377 + 5 << 2) >> 2] | 0;
    if ((HEAP32[$arrayidx432 >> 2] | 0) > ($58 | 0)) HEAP32[$arrayidx432 >> 2] = $58;
    $arrayidx448 = $labelInfo + 131084 + (($mul398 | 3) << 2) | 0;
    $60 = HEAP32[$labelInfo + 1310736 + ($mul377 + 6 << 2) >> 2] | 0;
    if ((HEAP32[$arrayidx448 >> 2] | 0) < ($60 | 0)) HEAP32[$arrayidx448 >> 2] = $60;
    $i$5 = $i$5 + 1 | 0;
   }
   while (1) {
    if (($i$6 | 0) >= (HEAP32[$label_num321 >> 2] | 0)) {
     $retval$0 = 0;
     break L77;
    }
    $arrayidx469 = $labelInfo + 12 + ($i$6 << 2) | 0;
    $mul471 = $i$6 << 1;
    $arrayidx473 = $labelInfo + 655376 + ($mul471 << 3) | 0;
    HEAPF64[$arrayidx473 >> 3] = +HEAPF64[$arrayidx473 >> 3] / +(HEAP32[$arrayidx469 >> 2] | 0);
    $arrayidx479 = $labelInfo + 655376 + (($mul471 | 1) << 3) | 0;
    HEAPF64[$arrayidx479 >> 3] = +HEAPF64[$arrayidx479 >> 3] / +(HEAP32[$arrayidx469 >> 2] | 0);
    $i$6 = $i$6 + 1 | 0;
   }
  }
 } while (0);
 STACKTOP = sp;
 return $retval$0 | 0;
}

function _arLabelingSubEBIYC($image, $xsize, $ysize, $labelingThresh, $labelInfo) {
 $image = $image | 0;
 $xsize = $xsize | 0;
 $ysize = $ysize | 0;
 $labelingThresh = $labelingThresh | 0;
 $labelInfo = $labelInfo | 0;
 var $$sink = 0, $0 = 0, $10 = 0, $11 = 0, $14 = 0, $15 = 0, $19 = 0, $20 = 0, $21 = 0, $24 = 0, $25 = 0, $3 = 0, $37 = 0, $38 = 0, $4 = 0, $43 = 0, $45 = 0, $54 = 0, $56 = 0, $58 = 0, $60 = 0, $8 = 0, $9 = 0, $add = 0, $add$ptr129 = 0, $add267 = 0, $add272$sink = 0, $arraydecay = 0, $arrayidx118 = 0, $arrayidx121 = 0, $arrayidx124 = 0, $arrayidx185 = 0, $arrayidx188 = 0, $arrayidx191 = 0, $arrayidx199 = 0, $arrayidx202 = 0, $arrayidx205 = 0, $arrayidx208 = 0, $arrayidx230 = 0, $arrayidx233 = 0, $arrayidx236 = 0, $arrayidx239 = 0, $arrayidx259 = 0, $arrayidx262 = 0, $arrayidx265 = 0, $arrayidx323 = 0, $arrayidx380 = 0, $arrayidx388 = 0, $arrayidx39 = 0, $arrayidx396 = 0, $arrayidx400 = 0, $arrayidx416 = 0, $arrayidx432 = 0, $arrayidx448 = 0, $arrayidx469 = 0, $arrayidx473 = 0, $arrayidx479 = 0, $arrayidx48 = 0, $arrayidx51 = 0, $arrayidx54 = 0, $arrayidx71 = 0, $cmp65 = 0, $cond = 0, $div = 0, $div1 = 0, $dpnt$0 = 0, $dpnt$1 = 0, $i$0 = 0, $i$1 = 0, $i$2 = 0, $i$3 = 0, $i$4 = 0, $i$5 = 0, $i$6 = 0, $inc276 = 0, $j$0 = 0, $j$1 = 0, $j$2 = 0, $k$0 = 0, $k$1 = 0, $k$2 = 0, $k$3 = 0, $label_num321 = 0, $mul197 = 0, $mul228 = 0, $mul24 = 0, $mul286 = 0, $mul356 = 0, $mul377 = 0, $mul386 = 0, $mul398 = 0, $mul471 = 0, $pnt$0 = 0, $pnt$1 = 0, $pnt1$0 = 0, $pnt1$1 = 0, $pnt2$0 = 0, $pnt2$1 = 0, $pnt2$2 = 0, $pnt2$3 = 0, $retval$0 = 0, $sub = 0, $sub344 = 0, $sub376 = 0, $sub38 = 0, $sub70 = 0, $sub74 = 0, $sub8 = 0, $vararg_buffer = 0, $wk$0 = 0, $wk$1 = 0, $wk$2 = 0, $wk$3 = 0, $wk$4 = 0, $wk_max$0 = 0, $wk_max$1 = 0, $wk_max$2 = 0, $wk_max$3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $vararg_buffer = sp;
 $div = ($xsize | 0) / 2 | 0;
 $div1 = ($ysize | 0) / 2 | 0;
 $0 = HEAP32[$labelInfo >> 2] | 0;
 $sub = $div1 + -1 | 0;
 $i$0 = 0;
 $pnt1$0 = $0;
 $pnt2$0 = $0 + ((Math_imul($sub, $div) | 0) << 1) | 0;
 while (1) {
  if (($i$0 | 0) >= ($div | 0)) break;
  HEAP16[$pnt2$0 >> 1] = 0;
  HEAP16[$pnt1$0 >> 1] = 0;
  $i$0 = $i$0 + 1 | 0;
  $pnt1$0 = $pnt1$0 + 2 | 0;
  $pnt2$0 = $pnt2$0 + 2 | 0;
 }
 $sub8 = $div + -1 | 0;
 $i$1 = 0;
 $pnt1$1 = $0;
 $pnt2$1 = $0 + ($sub8 << 1) | 0;
 while (1) {
  if (($i$1 | 0) >= ($div1 | 0)) break;
  HEAP16[$pnt2$1 >> 1] = 0;
  HEAP16[$pnt1$1 >> 1] = 0;
  $i$1 = $i$1 + 1 | 0;
  $pnt1$1 = $pnt1$1 + ($div << 1) | 0;
  $pnt2$1 = $pnt2$1 + ($div << 1) | 0;
 }
 $arraydecay = $labelInfo + 1179664 | 0;
 $add = $div + 1 | 0;
 $mul24 = $xsize << 1;
 $sub38 = 0 - $div | 0;
 $dpnt$0 = (HEAP32[$labelInfo + 4 >> 2] | 0) + $add | 0;
 $j$0 = 1;
 $pnt$0 = $image + (($xsize << 2) + 4) | 0;
 $pnt2$2 = $0 + ($add << 1) | 0;
 $wk_max$0 = 0;
 L9 : while (1) {
  if (($j$0 | 0) < ($sub | 0)) {
   $dpnt$1 = $dpnt$0;
   $i$2 = 1;
   $pnt$1 = $pnt$0;
   $pnt2$3 = $pnt2$2;
   $wk_max$1 = $wk_max$0;
  } else {
   label = 56;
   break;
  }
  while (1) {
   if (($i$2 | 0) >= ($sub8 | 0)) break;
   do if ((HEAPU8[$pnt$1 >> 0] | 0 | 0) > ($labelingThresh | 0)) {
    HEAP16[$pnt2$3 >> 1] = 0;
    HEAP8[$dpnt$1 >> 0] = 0;
    $wk_max$3 = $wk_max$1;
   } else {
    HEAP8[$dpnt$1 >> 0] = -1;
    $arrayidx39 = $pnt2$3 + ($sub38 << 1) | 0;
    $3 = HEAP16[$arrayidx39 >> 1] | 0;
    if ($3 << 16 >> 16 > 0) {
     HEAP16[$pnt2$3 >> 1] = $3;
     $4 = ($3 << 16 >> 16) * 7 | 0;
     $arrayidx48 = $labelInfo + 1310736 + ($4 + -7 << 2) | 0;
     HEAP32[$arrayidx48 >> 2] = (HEAP32[$arrayidx48 >> 2] | 0) + 1;
     $arrayidx51 = $labelInfo + 1310736 + ($4 + -6 << 2) | 0;
     HEAP32[$arrayidx51 >> 2] = (HEAP32[$arrayidx51 >> 2] | 0) + $i$2;
     $arrayidx54 = $labelInfo + 1310736 + ($4 + -5 << 2) | 0;
     HEAP32[$arrayidx54 >> 2] = (HEAP32[$arrayidx54 >> 2] | 0) + $j$0;
     HEAP32[$labelInfo + 1310736 + ($4 + -1 << 2) >> 2] = $j$0;
     $wk_max$3 = $wk_max$1;
     break;
    }
    $8 = HEAP16[$arrayidx39 + 2 >> 1] | 0;
    $9 = HEAP16[$arrayidx39 + -2 >> 1] | 0;
    $cmp65 = $9 << 16 >> 16 > 0;
    $sub74 = ($9 << 16 >> 16) + -1 | 0;
    $add$ptr129 = $pnt2$3 + -2 | 0;
    if ($8 << 16 >> 16 <= 0) {
     if ($cmp65) {
      HEAP16[$pnt2$3 >> 1] = $9;
      $mul228 = $sub74 * 7 | 0;
      $arrayidx230 = $labelInfo + 1310736 + ($mul228 << 2) | 0;
      HEAP32[$arrayidx230 >> 2] = (HEAP32[$arrayidx230 >> 2] | 0) + 1;
      $arrayidx233 = $labelInfo + 1310736 + ($mul228 + 1 << 2) | 0;
      HEAP32[$arrayidx233 >> 2] = (HEAP32[$arrayidx233 >> 2] | 0) + $i$2;
      $arrayidx236 = $labelInfo + 1310736 + ($mul228 + 2 << 2) | 0;
      HEAP32[$arrayidx236 >> 2] = (HEAP32[$arrayidx236 >> 2] | 0) + $j$0;
      $arrayidx239 = $labelInfo + 1310736 + ($mul228 + 4 << 2) | 0;
      if ((HEAP32[$arrayidx239 >> 2] | 0) < ($i$2 | 0)) HEAP32[$arrayidx239 >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($mul228 + 6 << 2) >> 2] = $j$0;
      $wk_max$3 = $wk_max$1;
      break;
     }
     $37 = HEAP16[$add$ptr129 >> 1] | 0;
     if ($37 << 16 >> 16 > 0) {
      HEAP16[$pnt2$3 >> 1] = $37;
      $38 = ($37 << 16 >> 16) * 7 | 0;
      $arrayidx259 = $labelInfo + 1310736 + ($38 + -7 << 2) | 0;
      HEAP32[$arrayidx259 >> 2] = (HEAP32[$arrayidx259 >> 2] | 0) + 1;
      $arrayidx262 = $labelInfo + 1310736 + ($38 + -6 << 2) | 0;
      HEAP32[$arrayidx262 >> 2] = (HEAP32[$arrayidx262 >> 2] | 0) + $i$2;
      $arrayidx265 = $labelInfo + 1310736 + ($38 + -5 << 2) | 0;
      HEAP32[$arrayidx265 >> 2] = (HEAP32[$arrayidx265 >> 2] | 0) + $j$0;
      $add267 = $38 + -3 | 0;
      if ((HEAP32[$labelInfo + 1310736 + ($add267 << 2) >> 2] | 0) < ($i$2 | 0)) {
       $$sink = $i$2;
       $add272$sink = $add267;
       $wk_max$2 = $wk_max$1;
      } else {
       $wk_max$3 = $wk_max$1;
       break;
      }
     } else {
      $inc276 = $wk_max$1 + 1 | 0;
      if (($wk_max$1 | 0) > 32767) {
       label = 50;
       break L9;
      }
      HEAP16[$pnt2$3 >> 1] = $inc276;
      HEAP32[$labelInfo + 1179664 + ($wk_max$1 << 2) >> 2] = $inc276 << 16 >> 16;
      $mul286 = $wk_max$1 * 7 | 0;
      HEAP32[$labelInfo + 1310736 + ($mul286 << 2) >> 2] = 1;
      HEAP32[$labelInfo + 1310736 + ($mul286 + 1 << 2) >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($mul286 + 2 << 2) >> 2] = $j$0;
      HEAP32[$labelInfo + 1310736 + ($mul286 + 3 << 2) >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($mul286 + 4 << 2) >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($mul286 + 5 << 2) >> 2] = $j$0;
      $$sink = $j$0;
      $add272$sink = $mul286 + 6 | 0;
      $wk_max$2 = $inc276;
     }
     HEAP32[$labelInfo + 1310736 + ($add272$sink << 2) >> 2] = $$sink;
     $wk_max$3 = $wk_max$2;
     break;
    }
    $sub70 = ($8 << 16 >> 16) + -1 | 0;
    $arrayidx71 = $labelInfo + 1179664 + ($sub70 << 2) | 0;
    if ($cmp65) {
     $10 = HEAP32[$arrayidx71 >> 2] | 0;
     $11 = HEAP32[$labelInfo + 1179664 + ($sub74 << 2) >> 2] | 0;
     L36 : do if (($10 | 0) > ($11 | 0)) {
      HEAP16[$pnt2$3 >> 1] = $11;
      $k$0 = 0;
      $wk$0 = $arraydecay;
      while (1) {
       if (($k$0 | 0) >= ($wk_max$1 | 0)) {
        $14 = $11;
        break L36;
       }
       if ((HEAP32[$wk$0 >> 2] | 0) == ($10 | 0)) HEAP32[$wk$0 >> 2] = $11;
       $k$0 = $k$0 + 1 | 0;
       $wk$0 = $wk$0 + 4 | 0;
      }
     } else {
      HEAP16[$pnt2$3 >> 1] = $10;
      if (($10 | 0) < ($11 | 0)) {
       $k$1 = 0;
       $wk$1 = $arraydecay;
       while (1) {
        if (($k$1 | 0) >= ($wk_max$1 | 0)) {
         $14 = $10;
         break L36;
        }
        if ((HEAP32[$wk$1 >> 2] | 0) == ($11 | 0)) HEAP32[$wk$1 >> 2] = $10;
        $k$1 = $k$1 + 1 | 0;
        $wk$1 = $wk$1 + 4 | 0;
       }
      } else $14 = $10;
     } while (0);
     $15 = ($14 << 16 >> 16) * 7 | 0;
     $arrayidx118 = $labelInfo + 1310736 + ($15 + -7 << 2) | 0;
     HEAP32[$arrayidx118 >> 2] = (HEAP32[$arrayidx118 >> 2] | 0) + 1;
     $arrayidx121 = $labelInfo + 1310736 + ($15 + -6 << 2) | 0;
     HEAP32[$arrayidx121 >> 2] = (HEAP32[$arrayidx121 >> 2] | 0) + $i$2;
     $arrayidx124 = $labelInfo + 1310736 + ($15 + -5 << 2) | 0;
     HEAP32[$arrayidx124 >> 2] = (HEAP32[$arrayidx124 >> 2] | 0) + $j$0;
     HEAP32[$labelInfo + 1310736 + ($15 + -1 << 2) >> 2] = $j$0;
     $wk_max$3 = $wk_max$1;
     break;
    }
    $19 = HEAP16[$add$ptr129 >> 1] | 0;
    if ($19 << 16 >> 16 <= 0) {
     HEAP16[$pnt2$3 >> 1] = $8;
     $mul197 = $sub70 * 7 | 0;
     $arrayidx199 = $labelInfo + 1310736 + ($mul197 << 2) | 0;
     HEAP32[$arrayidx199 >> 2] = (HEAP32[$arrayidx199 >> 2] | 0) + 1;
     $arrayidx202 = $labelInfo + 1310736 + ($mul197 + 1 << 2) | 0;
     HEAP32[$arrayidx202 >> 2] = (HEAP32[$arrayidx202 >> 2] | 0) + $i$2;
     $arrayidx205 = $labelInfo + 1310736 + ($mul197 + 2 << 2) | 0;
     HEAP32[$arrayidx205 >> 2] = (HEAP32[$arrayidx205 >> 2] | 0) + $j$0;
     $arrayidx208 = $labelInfo + 1310736 + ($mul197 + 3 << 2) | 0;
     if ((HEAP32[$arrayidx208 >> 2] | 0) > ($i$2 | 0)) HEAP32[$arrayidx208 >> 2] = $i$2;
     HEAP32[$labelInfo + 1310736 + ($mul197 + 6 << 2) >> 2] = $j$0;
     $wk_max$3 = $wk_max$1;
     break;
    }
    $20 = HEAP32[$arrayidx71 >> 2] | 0;
    $21 = HEAP32[$labelInfo + 1179664 + (($19 << 16 >> 16) + -1 << 2) >> 2] | 0;
    L59 : do if (($20 | 0) > ($21 | 0)) {
     HEAP16[$pnt2$3 >> 1] = $21;
     $k$2 = 0;
     $wk$2 = $arraydecay;
     while (1) {
      if (($k$2 | 0) >= ($wk_max$1 | 0)) {
       $24 = $21;
       break L59;
      }
      if ((HEAP32[$wk$2 >> 2] | 0) == ($20 | 0)) HEAP32[$wk$2 >> 2] = $21;
      $k$2 = $k$2 + 1 | 0;
      $wk$2 = $wk$2 + 4 | 0;
     }
    } else {
     HEAP16[$pnt2$3 >> 1] = $20;
     if (($20 | 0) < ($21 | 0)) {
      $k$3 = 0;
      $wk$3 = $arraydecay;
      while (1) {
       if (($k$3 | 0) >= ($wk_max$1 | 0)) {
        $24 = $20;
        break L59;
       }
       if ((HEAP32[$wk$3 >> 2] | 0) == ($21 | 0)) HEAP32[$wk$3 >> 2] = $20;
       $k$3 = $k$3 + 1 | 0;
       $wk$3 = $wk$3 + 4 | 0;
      }
     } else $24 = $20;
    } while (0);
    $25 = ($24 << 16 >> 16) * 7 | 0;
    $arrayidx185 = $labelInfo + 1310736 + ($25 + -7 << 2) | 0;
    HEAP32[$arrayidx185 >> 2] = (HEAP32[$arrayidx185 >> 2] | 0) + 1;
    $arrayidx188 = $labelInfo + 1310736 + ($25 + -6 << 2) | 0;
    HEAP32[$arrayidx188 >> 2] = (HEAP32[$arrayidx188 >> 2] | 0) + $i$2;
    $arrayidx191 = $labelInfo + 1310736 + ($25 + -5 << 2) | 0;
    HEAP32[$arrayidx191 >> 2] = (HEAP32[$arrayidx191 >> 2] | 0) + $j$0;
    $wk_max$3 = $wk_max$1;
   } while (0);
   $dpnt$1 = $dpnt$1 + 1 | 0;
   $i$2 = $i$2 + 1 | 0;
   $pnt$1 = $pnt$1 + 4 | 0;
   $pnt2$3 = $pnt2$3 + 2 | 0;
   $wk_max$1 = $wk_max$3;
  }
  $dpnt$0 = $dpnt$1 + 2 | 0;
  $j$0 = $j$0 + 1 | 0;
  $pnt$0 = $pnt$1 + $mul24 + 8 | 0;
  $pnt2$2 = $pnt2$3 + 4 | 0;
  $wk_max$0 = $wk_max$1;
 }
 L77 : do if ((label | 0) == 50) {
  _arLog(3, 3256, $vararg_buffer);
  $retval$0 = -1;
 } else if ((label | 0) == 56) {
  $arrayidx323 = $labelInfo + 12 | 0;
  $i$3 = 1;
  $j$1 = 1;
  $wk$4 = $arraydecay;
  while (1) {
   if (($i$3 | 0) > ($wk_max$0 | 0)) break;
   $43 = HEAP32[$wk$4 >> 2] | 0;
   if (($43 | 0) == ($i$3 | 0)) {
    $cond = $j$1;
    $j$2 = $j$1 + 1 | 0;
   } else {
    $cond = HEAP32[$labelInfo + 1179664 + ($43 + -1 << 2) >> 2] | 0;
    $j$2 = $j$1;
   }
   HEAP32[$wk$4 >> 2] = $cond;
   $i$3 = $i$3 + 1 | 0;
   $j$1 = $j$2;
   $wk$4 = $wk$4 + 4 | 0;
  }
  $label_num321 = $labelInfo + 8 | 0;
  $sub344 = $j$1 + -1 | 0;
  HEAP32[$label_num321 >> 2] = $sub344;
  if (!$sub344) $retval$0 = 0; else {
   _memset($arrayidx323 | 0, 0, $sub344 << 2 | 0) | 0;
   _memset($labelInfo + 655376 | 0, 0, $sub344 << 4 | 0) | 0;
   $45 = $sub344;
   $i$4 = 0;
   while (1) {
    if (($i$4 | 0) >= ($45 | 0)) {
     $i$5 = 0;
     break;
    }
    $mul356 = $i$4 << 2;
    HEAP32[$labelInfo + 131084 + ($mul356 << 2) >> 2] = $div;
    HEAP32[$labelInfo + 131084 + (($mul356 | 1) << 2) >> 2] = 0;
    HEAP32[$labelInfo + 131084 + (($mul356 | 2) << 2) >> 2] = $div1;
    HEAP32[$labelInfo + 131084 + (($mul356 | 3) << 2) >> 2] = 0;
    $45 = HEAP32[$label_num321 >> 2] | 0;
    $i$4 = $i$4 + 1 | 0;
   }
   while (1) {
    if (($i$5 | 0) >= ($wk_max$0 | 0)) {
     $i$6 = 0;
     break;
    }
    $sub376 = (HEAP32[$labelInfo + 1179664 + ($i$5 << 2) >> 2] | 0) + -1 | 0;
    $mul377 = $i$5 * 7 | 0;
    $arrayidx380 = $labelInfo + 12 + ($sub376 << 2) | 0;
    HEAP32[$arrayidx380 >> 2] = (HEAP32[$arrayidx380 >> 2] | 0) + (HEAP32[$labelInfo + 1310736 + ($mul377 << 2) >> 2] | 0);
    $mul386 = $sub376 << 1;
    $arrayidx388 = $labelInfo + 655376 + ($mul386 << 3) | 0;
    HEAPF64[$arrayidx388 >> 3] = +HEAPF64[$arrayidx388 >> 3] + +(HEAP32[$labelInfo + 1310736 + ($mul377 + 1 << 2) >> 2] | 0);
    $arrayidx396 = $labelInfo + 655376 + (($mul386 | 1) << 3) | 0;
    HEAPF64[$arrayidx396 >> 3] = +HEAPF64[$arrayidx396 >> 3] + +(HEAP32[$labelInfo + 1310736 + ($mul377 + 2 << 2) >> 2] | 0);
    $mul398 = $sub376 << 2;
    $arrayidx400 = $labelInfo + 131084 + ($mul398 << 2) | 0;
    $54 = HEAP32[$labelInfo + 1310736 + ($mul377 + 3 << 2) >> 2] | 0;
    if ((HEAP32[$arrayidx400 >> 2] | 0) > ($54 | 0)) HEAP32[$arrayidx400 >> 2] = $54;
    $arrayidx416 = $labelInfo + 131084 + (($mul398 | 1) << 2) | 0;
    $56 = HEAP32[$labelInfo + 1310736 + ($mul377 + 4 << 2) >> 2] | 0;
    if ((HEAP32[$arrayidx416 >> 2] | 0) < ($56 | 0)) HEAP32[$arrayidx416 >> 2] = $56;
    $arrayidx432 = $labelInfo + 131084 + (($mul398 | 2) << 2) | 0;
    $58 = HEAP32[$labelInfo + 1310736 + ($mul377 + 5 << 2) >> 2] | 0;
    if ((HEAP32[$arrayidx432 >> 2] | 0) > ($58 | 0)) HEAP32[$arrayidx432 >> 2] = $58;
    $arrayidx448 = $labelInfo + 131084 + (($mul398 | 3) << 2) | 0;
    $60 = HEAP32[$labelInfo + 1310736 + ($mul377 + 6 << 2) >> 2] | 0;
    if ((HEAP32[$arrayidx448 >> 2] | 0) < ($60 | 0)) HEAP32[$arrayidx448 >> 2] = $60;
    $i$5 = $i$5 + 1 | 0;
   }
   while (1) {
    if (($i$6 | 0) >= (HEAP32[$label_num321 >> 2] | 0)) {
     $retval$0 = 0;
     break L77;
    }
    $arrayidx469 = $labelInfo + 12 + ($i$6 << 2) | 0;
    $mul471 = $i$6 << 1;
    $arrayidx473 = $labelInfo + 655376 + ($mul471 << 3) | 0;
    HEAPF64[$arrayidx473 >> 3] = +HEAPF64[$arrayidx473 >> 3] / +(HEAP32[$arrayidx469 >> 2] | 0);
    $arrayidx479 = $labelInfo + 655376 + (($mul471 | 1) << 3) | 0;
    HEAPF64[$arrayidx479 >> 3] = +HEAPF64[$arrayidx479 >> 3] / +(HEAP32[$arrayidx469 >> 2] | 0);
    $i$6 = $i$6 + 1 | 0;
   }
  }
 } while (0);
 STACKTOP = sp;
 return $retval$0 | 0;
}

function _arLabelingSubEWRA3C($image, $xsize, $ysize, $labelingThresh, $labelInfo) {
 $image = $image | 0;
 $xsize = $xsize | 0;
 $ysize = $ysize | 0;
 $labelingThresh = $labelingThresh | 0;
 $labelInfo = $labelInfo | 0;
 var $$sink = 0, $0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $16 = 0, $17 = 0, $21 = 0, $22 = 0, $23 = 0, $26 = 0, $27 = 0, $39 = 0, $40 = 0, $45 = 0, $47 = 0, $5 = 0, $56 = 0, $58 = 0, $6 = 0, $60 = 0, $62 = 0, $add = 0, $add$ptr135 = 0, $add273 = 0, $add278$sink = 0, $arraydecay = 0, $arrayidx124 = 0, $arrayidx127 = 0, $arrayidx130 = 0, $arrayidx191 = 0, $arrayidx194 = 0, $arrayidx197 = 0, $arrayidx205 = 0, $arrayidx208 = 0, $arrayidx211 = 0, $arrayidx214 = 0, $arrayidx236 = 0, $arrayidx239 = 0, $arrayidx242 = 0, $arrayidx245 = 0, $arrayidx265 = 0, $arrayidx268 = 0, $arrayidx271 = 0, $arrayidx327 = 0, $arrayidx384 = 0, $arrayidx392 = 0, $arrayidx400 = 0, $arrayidx404 = 0, $arrayidx420 = 0, $arrayidx436 = 0, $arrayidx45 = 0, $arrayidx452 = 0, $arrayidx473 = 0, $arrayidx477 = 0, $arrayidx482 = 0, $arrayidx54 = 0, $arrayidx57 = 0, $arrayidx60 = 0, $arrayidx77 = 0, $cmp71 = 0, $cond = 0, $dpnt$0 = 0, $dpnt$1 = 0, $i$0 = 0, $i$1 = 0, $i$2 = 0, $i$3 = 0, $i$4 = 0, $i$5 = 0, $i$6 = 0, $inc282 = 0, $j$0 = 0, $j$1 = 0, $j$2 = 0, $k$0 = 0, $k$1 = 0, $k$2 = 0, $k$3 = 0, $label_num325 = 0, $mul = 0, $mul203 = 0, $mul234 = 0, $mul292 = 0, $mul360 = 0, $mul381 = 0, $mul390 = 0, $mul402 = 0, $mul475 = 0, $pnt$0 = 0, $pnt$1 = 0, $pnt1$0 = 0, $pnt1$1 = 0, $pnt2$0 = 0, $pnt2$1 = 0, $pnt2$2 = 0, $pnt2$3 = 0, $retval$0 = 0, $sub = 0, $sub348 = 0, $sub380 = 0, $sub44 = 0, $sub76 = 0, $sub8 = 0, $sub80 = 0, $vararg_buffer = 0, $wk$0 = 0, $wk$1 = 0, $wk$2 = 0, $wk$3 = 0, $wk$4 = 0, $wk_max$0 = 0, $wk_max$1 = 0, $wk_max$2 = 0, $wk_max$3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $vararg_buffer = sp;
 $0 = HEAP32[$labelInfo >> 2] | 0;
 $sub = $ysize + -1 | 0;
 $i$0 = 0;
 $pnt1$0 = $0;
 $pnt2$0 = $0 + ((Math_imul($sub, $xsize) | 0) << 1) | 0;
 while (1) {
  if (($i$0 | 0) >= ($xsize | 0)) break;
  HEAP16[$pnt2$0 >> 1] = 0;
  HEAP16[$pnt1$0 >> 1] = 0;
  $i$0 = $i$0 + 1 | 0;
  $pnt1$0 = $pnt1$0 + 2 | 0;
  $pnt2$0 = $pnt2$0 + 2 | 0;
 }
 $mul = $labelingThresh * 3 | 0;
 $sub8 = $xsize + -1 | 0;
 $i$1 = 0;
 $pnt1$1 = $0;
 $pnt2$1 = $0 + ($sub8 << 1) | 0;
 while (1) {
  if (($i$1 | 0) >= ($ysize | 0)) break;
  HEAP16[$pnt2$1 >> 1] = 0;
  HEAP16[$pnt1$1 >> 1] = 0;
  $i$1 = $i$1 + 1 | 0;
  $pnt1$1 = $pnt1$1 + ($xsize << 1) | 0;
  $pnt2$1 = $pnt2$1 + ($xsize << 1) | 0;
 }
 $arraydecay = $labelInfo + 1179664 | 0;
 $add = $xsize + 1 | 0;
 $sub44 = 0 - $xsize | 0;
 $dpnt$0 = (HEAP32[$labelInfo + 4 >> 2] | 0) + $add | 0;
 $j$0 = 1;
 $pnt$0 = $image + ($add << 2) | 0;
 $pnt2$2 = $0 + ($add << 1) | 0;
 $wk_max$0 = 0;
 L9 : while (1) {
  if (($j$0 | 0) < ($sub | 0)) {
   $dpnt$1 = $dpnt$0;
   $i$2 = 1;
   $pnt$1 = $pnt$0;
   $pnt2$3 = $pnt2$2;
   $wk_max$1 = $wk_max$0;
  } else {
   label = 56;
   break;
  }
  while (1) {
   if (($i$2 | 0) >= ($sub8 | 0)) break;
   do if (((HEAPU8[$pnt$1 + 2 >> 0] | 0) + (HEAPU8[$pnt$1 + 1 >> 0] | 0) + (HEAPU8[$pnt$1 + 3 >> 0] | 0) | 0) > ($mul | 0)) {
    HEAP8[$dpnt$1 >> 0] = -1;
    $arrayidx45 = $pnt2$3 + ($sub44 << 1) | 0;
    $5 = HEAP16[$arrayidx45 >> 1] | 0;
    if ($5 << 16 >> 16 > 0) {
     HEAP16[$pnt2$3 >> 1] = $5;
     $6 = ($5 << 16 >> 16) * 7 | 0;
     $arrayidx54 = $labelInfo + 1310736 + ($6 + -7 << 2) | 0;
     HEAP32[$arrayidx54 >> 2] = (HEAP32[$arrayidx54 >> 2] | 0) + 1;
     $arrayidx57 = $labelInfo + 1310736 + ($6 + -6 << 2) | 0;
     HEAP32[$arrayidx57 >> 2] = (HEAP32[$arrayidx57 >> 2] | 0) + $i$2;
     $arrayidx60 = $labelInfo + 1310736 + ($6 + -5 << 2) | 0;
     HEAP32[$arrayidx60 >> 2] = (HEAP32[$arrayidx60 >> 2] | 0) + $j$0;
     HEAP32[$labelInfo + 1310736 + ($6 + -1 << 2) >> 2] = $j$0;
     $wk_max$3 = $wk_max$1;
     break;
    }
    $10 = HEAP16[$arrayidx45 + 2 >> 1] | 0;
    $11 = HEAP16[$arrayidx45 + -2 >> 1] | 0;
    $cmp71 = $11 << 16 >> 16 > 0;
    $sub80 = ($11 << 16 >> 16) + -1 | 0;
    $add$ptr135 = $pnt2$3 + -2 | 0;
    if ($10 << 16 >> 16 <= 0) {
     if ($cmp71) {
      HEAP16[$pnt2$3 >> 1] = $11;
      $mul234 = $sub80 * 7 | 0;
      $arrayidx236 = $labelInfo + 1310736 + ($mul234 << 2) | 0;
      HEAP32[$arrayidx236 >> 2] = (HEAP32[$arrayidx236 >> 2] | 0) + 1;
      $arrayidx239 = $labelInfo + 1310736 + ($mul234 + 1 << 2) | 0;
      HEAP32[$arrayidx239 >> 2] = (HEAP32[$arrayidx239 >> 2] | 0) + $i$2;
      $arrayidx242 = $labelInfo + 1310736 + ($mul234 + 2 << 2) | 0;
      HEAP32[$arrayidx242 >> 2] = (HEAP32[$arrayidx242 >> 2] | 0) + $j$0;
      $arrayidx245 = $labelInfo + 1310736 + ($mul234 + 4 << 2) | 0;
      if ((HEAP32[$arrayidx245 >> 2] | 0) < ($i$2 | 0)) HEAP32[$arrayidx245 >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($mul234 + 6 << 2) >> 2] = $j$0;
      $wk_max$3 = $wk_max$1;
      break;
     }
     $39 = HEAP16[$add$ptr135 >> 1] | 0;
     if ($39 << 16 >> 16 > 0) {
      HEAP16[$pnt2$3 >> 1] = $39;
      $40 = ($39 << 16 >> 16) * 7 | 0;
      $arrayidx265 = $labelInfo + 1310736 + ($40 + -7 << 2) | 0;
      HEAP32[$arrayidx265 >> 2] = (HEAP32[$arrayidx265 >> 2] | 0) + 1;
      $arrayidx268 = $labelInfo + 1310736 + ($40 + -6 << 2) | 0;
      HEAP32[$arrayidx268 >> 2] = (HEAP32[$arrayidx268 >> 2] | 0) + $i$2;
      $arrayidx271 = $labelInfo + 1310736 + ($40 + -5 << 2) | 0;
      HEAP32[$arrayidx271 >> 2] = (HEAP32[$arrayidx271 >> 2] | 0) + $j$0;
      $add273 = $40 + -3 | 0;
      if ((HEAP32[$labelInfo + 1310736 + ($add273 << 2) >> 2] | 0) < ($i$2 | 0)) {
       $$sink = $i$2;
       $add278$sink = $add273;
       $wk_max$2 = $wk_max$1;
      } else {
       $wk_max$3 = $wk_max$1;
       break;
      }
     } else {
      $inc282 = $wk_max$1 + 1 | 0;
      if (($wk_max$1 | 0) > 32767) {
       label = 50;
       break L9;
      }
      HEAP16[$pnt2$3 >> 1] = $inc282;
      HEAP32[$labelInfo + 1179664 + ($wk_max$1 << 2) >> 2] = $inc282 << 16 >> 16;
      $mul292 = $wk_max$1 * 7 | 0;
      HEAP32[$labelInfo + 1310736 + ($mul292 << 2) >> 2] = 1;
      HEAP32[$labelInfo + 1310736 + ($mul292 + 1 << 2) >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($mul292 + 2 << 2) >> 2] = $j$0;
      HEAP32[$labelInfo + 1310736 + ($mul292 + 3 << 2) >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($mul292 + 4 << 2) >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($mul292 + 5 << 2) >> 2] = $j$0;
      $$sink = $j$0;
      $add278$sink = $mul292 + 6 | 0;
      $wk_max$2 = $inc282;
     }
     HEAP32[$labelInfo + 1310736 + ($add278$sink << 2) >> 2] = $$sink;
     $wk_max$3 = $wk_max$2;
     break;
    }
    $sub76 = ($10 << 16 >> 16) + -1 | 0;
    $arrayidx77 = $labelInfo + 1179664 + ($sub76 << 2) | 0;
    if ($cmp71) {
     $12 = HEAP32[$arrayidx77 >> 2] | 0;
     $13 = HEAP32[$labelInfo + 1179664 + ($sub80 << 2) >> 2] | 0;
     L35 : do if (($12 | 0) > ($13 | 0)) {
      HEAP16[$pnt2$3 >> 1] = $13;
      $k$0 = 0;
      $wk$0 = $arraydecay;
      while (1) {
       if (($k$0 | 0) >= ($wk_max$1 | 0)) {
        $16 = $13;
        break L35;
       }
       if ((HEAP32[$wk$0 >> 2] | 0) == ($12 | 0)) HEAP32[$wk$0 >> 2] = $13;
       $k$0 = $k$0 + 1 | 0;
       $wk$0 = $wk$0 + 4 | 0;
      }
     } else {
      HEAP16[$pnt2$3 >> 1] = $12;
      if (($12 | 0) < ($13 | 0)) {
       $k$1 = 0;
       $wk$1 = $arraydecay;
       while (1) {
        if (($k$1 | 0) >= ($wk_max$1 | 0)) {
         $16 = $12;
         break L35;
        }
        if ((HEAP32[$wk$1 >> 2] | 0) == ($13 | 0)) HEAP32[$wk$1 >> 2] = $12;
        $k$1 = $k$1 + 1 | 0;
        $wk$1 = $wk$1 + 4 | 0;
       }
      } else $16 = $12;
     } while (0);
     $17 = ($16 << 16 >> 16) * 7 | 0;
     $arrayidx124 = $labelInfo + 1310736 + ($17 + -7 << 2) | 0;
     HEAP32[$arrayidx124 >> 2] = (HEAP32[$arrayidx124 >> 2] | 0) + 1;
     $arrayidx127 = $labelInfo + 1310736 + ($17 + -6 << 2) | 0;
     HEAP32[$arrayidx127 >> 2] = (HEAP32[$arrayidx127 >> 2] | 0) + $i$2;
     $arrayidx130 = $labelInfo + 1310736 + ($17 + -5 << 2) | 0;
     HEAP32[$arrayidx130 >> 2] = (HEAP32[$arrayidx130 >> 2] | 0) + $j$0;
     HEAP32[$labelInfo + 1310736 + ($17 + -1 << 2) >> 2] = $j$0;
     $wk_max$3 = $wk_max$1;
     break;
    }
    $21 = HEAP16[$add$ptr135 >> 1] | 0;
    if ($21 << 16 >> 16 <= 0) {
     HEAP16[$pnt2$3 >> 1] = $10;
     $mul203 = $sub76 * 7 | 0;
     $arrayidx205 = $labelInfo + 1310736 + ($mul203 << 2) | 0;
     HEAP32[$arrayidx205 >> 2] = (HEAP32[$arrayidx205 >> 2] | 0) + 1;
     $arrayidx208 = $labelInfo + 1310736 + ($mul203 + 1 << 2) | 0;
     HEAP32[$arrayidx208 >> 2] = (HEAP32[$arrayidx208 >> 2] | 0) + $i$2;
     $arrayidx211 = $labelInfo + 1310736 + ($mul203 + 2 << 2) | 0;
     HEAP32[$arrayidx211 >> 2] = (HEAP32[$arrayidx211 >> 2] | 0) + $j$0;
     $arrayidx214 = $labelInfo + 1310736 + ($mul203 + 3 << 2) | 0;
     if ((HEAP32[$arrayidx214 >> 2] | 0) > ($i$2 | 0)) HEAP32[$arrayidx214 >> 2] = $i$2;
     HEAP32[$labelInfo + 1310736 + ($mul203 + 6 << 2) >> 2] = $j$0;
     $wk_max$3 = $wk_max$1;
     break;
    }
    $22 = HEAP32[$arrayidx77 >> 2] | 0;
    $23 = HEAP32[$labelInfo + 1179664 + (($21 << 16 >> 16) + -1 << 2) >> 2] | 0;
    L58 : do if (($22 | 0) > ($23 | 0)) {
     HEAP16[$pnt2$3 >> 1] = $23;
     $k$2 = 0;
     $wk$2 = $arraydecay;
     while (1) {
      if (($k$2 | 0) >= ($wk_max$1 | 0)) {
       $26 = $23;
       break L58;
      }
      if ((HEAP32[$wk$2 >> 2] | 0) == ($22 | 0)) HEAP32[$wk$2 >> 2] = $23;
      $k$2 = $k$2 + 1 | 0;
      $wk$2 = $wk$2 + 4 | 0;
     }
    } else {
     HEAP16[$pnt2$3 >> 1] = $22;
     if (($22 | 0) < ($23 | 0)) {
      $k$3 = 0;
      $wk$3 = $arraydecay;
      while (1) {
       if (($k$3 | 0) >= ($wk_max$1 | 0)) {
        $26 = $22;
        break L58;
       }
       if ((HEAP32[$wk$3 >> 2] | 0) == ($23 | 0)) HEAP32[$wk$3 >> 2] = $22;
       $k$3 = $k$3 + 1 | 0;
       $wk$3 = $wk$3 + 4 | 0;
      }
     } else $26 = $22;
    } while (0);
    $27 = ($26 << 16 >> 16) * 7 | 0;
    $arrayidx191 = $labelInfo + 1310736 + ($27 + -7 << 2) | 0;
    HEAP32[$arrayidx191 >> 2] = (HEAP32[$arrayidx191 >> 2] | 0) + 1;
    $arrayidx194 = $labelInfo + 1310736 + ($27 + -6 << 2) | 0;
    HEAP32[$arrayidx194 >> 2] = (HEAP32[$arrayidx194 >> 2] | 0) + $i$2;
    $arrayidx197 = $labelInfo + 1310736 + ($27 + -5 << 2) | 0;
    HEAP32[$arrayidx197 >> 2] = (HEAP32[$arrayidx197 >> 2] | 0) + $j$0;
    $wk_max$3 = $wk_max$1;
   } else {
    HEAP16[$pnt2$3 >> 1] = 0;
    HEAP8[$dpnt$1 >> 0] = 0;
    $wk_max$3 = $wk_max$1;
   } while (0);
   $dpnt$1 = $dpnt$1 + 1 | 0;
   $i$2 = $i$2 + 1 | 0;
   $pnt$1 = $pnt$1 + 4 | 0;
   $pnt2$3 = $pnt2$3 + 2 | 0;
   $wk_max$1 = $wk_max$3;
  }
  $dpnt$0 = $dpnt$1 + 2 | 0;
  $j$0 = $j$0 + 1 | 0;
  $pnt$0 = $pnt$1 + 8 | 0;
  $pnt2$2 = $pnt2$3 + 4 | 0;
  $wk_max$0 = $wk_max$1;
 }
 L77 : do if ((label | 0) == 50) {
  _arLog(3, 3256, $vararg_buffer);
  $retval$0 = -1;
 } else if ((label | 0) == 56) {
  $arrayidx327 = $labelInfo + 12 | 0;
  $i$3 = 1;
  $j$1 = 1;
  $wk$4 = $arraydecay;
  while (1) {
   if (($i$3 | 0) > ($wk_max$0 | 0)) break;
   $45 = HEAP32[$wk$4 >> 2] | 0;
   if (($45 | 0) == ($i$3 | 0)) {
    $cond = $j$1;
    $j$2 = $j$1 + 1 | 0;
   } else {
    $cond = HEAP32[$labelInfo + 1179664 + ($45 + -1 << 2) >> 2] | 0;
    $j$2 = $j$1;
   }
   HEAP32[$wk$4 >> 2] = $cond;
   $i$3 = $i$3 + 1 | 0;
   $j$1 = $j$2;
   $wk$4 = $wk$4 + 4 | 0;
  }
  $label_num325 = $labelInfo + 8 | 0;
  $sub348 = $j$1 + -1 | 0;
  HEAP32[$label_num325 >> 2] = $sub348;
  if (!$sub348) $retval$0 = 0; else {
   _memset($arrayidx327 | 0, 0, $sub348 << 2 | 0) | 0;
   _memset($labelInfo + 655376 | 0, 0, $sub348 << 4 | 0) | 0;
   $47 = $sub348;
   $i$4 = 0;
   while (1) {
    if (($i$4 | 0) >= ($47 | 0)) {
     $i$5 = 0;
     break;
    }
    $mul360 = $i$4 << 2;
    HEAP32[$labelInfo + 131084 + ($mul360 << 2) >> 2] = $xsize;
    HEAP32[$labelInfo + 131084 + (($mul360 | 1) << 2) >> 2] = 0;
    HEAP32[$labelInfo + 131084 + (($mul360 | 2) << 2) >> 2] = $ysize;
    HEAP32[$labelInfo + 131084 + (($mul360 | 3) << 2) >> 2] = 0;
    $47 = HEAP32[$label_num325 >> 2] | 0;
    $i$4 = $i$4 + 1 | 0;
   }
   while (1) {
    if (($i$5 | 0) >= ($wk_max$0 | 0)) {
     $i$6 = 0;
     break;
    }
    $sub380 = (HEAP32[$labelInfo + 1179664 + ($i$5 << 2) >> 2] | 0) + -1 | 0;
    $mul381 = $i$5 * 7 | 0;
    $arrayidx384 = $labelInfo + 12 + ($sub380 << 2) | 0;
    HEAP32[$arrayidx384 >> 2] = (HEAP32[$arrayidx384 >> 2] | 0) + (HEAP32[$labelInfo + 1310736 + ($mul381 << 2) >> 2] | 0);
    $mul390 = $sub380 << 1;
    $arrayidx392 = $labelInfo + 655376 + ($mul390 << 3) | 0;
    HEAPF64[$arrayidx392 >> 3] = +HEAPF64[$arrayidx392 >> 3] + +(HEAP32[$labelInfo + 1310736 + ($mul381 + 1 << 2) >> 2] | 0);
    $arrayidx400 = $labelInfo + 655376 + (($mul390 | 1) << 3) | 0;
    HEAPF64[$arrayidx400 >> 3] = +HEAPF64[$arrayidx400 >> 3] + +(HEAP32[$labelInfo + 1310736 + ($mul381 + 2 << 2) >> 2] | 0);
    $mul402 = $sub380 << 2;
    $arrayidx404 = $labelInfo + 131084 + ($mul402 << 2) | 0;
    $56 = HEAP32[$labelInfo + 1310736 + ($mul381 + 3 << 2) >> 2] | 0;
    if ((HEAP32[$arrayidx404 >> 2] | 0) > ($56 | 0)) HEAP32[$arrayidx404 >> 2] = $56;
    $arrayidx420 = $labelInfo + 131084 + (($mul402 | 1) << 2) | 0;
    $58 = HEAP32[$labelInfo + 1310736 + ($mul381 + 4 << 2) >> 2] | 0;
    if ((HEAP32[$arrayidx420 >> 2] | 0) < ($58 | 0)) HEAP32[$arrayidx420 >> 2] = $58;
    $arrayidx436 = $labelInfo + 131084 + (($mul402 | 2) << 2) | 0;
    $60 = HEAP32[$labelInfo + 1310736 + ($mul381 + 5 << 2) >> 2] | 0;
    if ((HEAP32[$arrayidx436 >> 2] | 0) > ($60 | 0)) HEAP32[$arrayidx436 >> 2] = $60;
    $arrayidx452 = $labelInfo + 131084 + (($mul402 | 3) << 2) | 0;
    $62 = HEAP32[$labelInfo + 1310736 + ($mul381 + 6 << 2) >> 2] | 0;
    if ((HEAP32[$arrayidx452 >> 2] | 0) < ($62 | 0)) HEAP32[$arrayidx452 >> 2] = $62;
    $i$5 = $i$5 + 1 | 0;
   }
   while (1) {
    if (($i$6 | 0) >= (HEAP32[$label_num325 >> 2] | 0)) {
     $retval$0 = 0;
     break L77;
    }
    $arrayidx473 = $labelInfo + 12 + ($i$6 << 2) | 0;
    $mul475 = $i$6 << 1;
    $arrayidx477 = $labelInfo + 655376 + ($mul475 << 3) | 0;
    HEAPF64[$arrayidx477 >> 3] = +HEAPF64[$arrayidx477 >> 3] / +(HEAP32[$arrayidx473 >> 2] | 0);
    $arrayidx482 = $labelInfo + 655376 + (($mul475 | 1) << 3) | 0;
    HEAPF64[$arrayidx482 >> 3] = +HEAPF64[$arrayidx482 >> 3] / +(HEAP32[$arrayidx473 >> 2] | 0);
    $i$6 = $i$6 + 1 | 0;
   }
  }
 } while (0);
 STACKTOP = sp;
 return $retval$0 | 0;
}

function _arLabelingSubEBRA3C($image, $xsize, $ysize, $labelingThresh, $labelInfo) {
 $image = $image | 0;
 $xsize = $xsize | 0;
 $ysize = $ysize | 0;
 $labelingThresh = $labelingThresh | 0;
 $labelInfo = $labelInfo | 0;
 var $$sink = 0, $0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $16 = 0, $17 = 0, $21 = 0, $22 = 0, $23 = 0, $26 = 0, $27 = 0, $39 = 0, $40 = 0, $45 = 0, $47 = 0, $5 = 0, $56 = 0, $58 = 0, $6 = 0, $60 = 0, $62 = 0, $add = 0, $add$ptr135 = 0, $add273 = 0, $add278$sink = 0, $arraydecay = 0, $arrayidx124 = 0, $arrayidx127 = 0, $arrayidx130 = 0, $arrayidx191 = 0, $arrayidx194 = 0, $arrayidx197 = 0, $arrayidx205 = 0, $arrayidx208 = 0, $arrayidx211 = 0, $arrayidx214 = 0, $arrayidx236 = 0, $arrayidx239 = 0, $arrayidx242 = 0, $arrayidx245 = 0, $arrayidx265 = 0, $arrayidx268 = 0, $arrayidx271 = 0, $arrayidx327 = 0, $arrayidx384 = 0, $arrayidx392 = 0, $arrayidx400 = 0, $arrayidx404 = 0, $arrayidx420 = 0, $arrayidx436 = 0, $arrayidx45 = 0, $arrayidx452 = 0, $arrayidx473 = 0, $arrayidx477 = 0, $arrayidx482 = 0, $arrayidx54 = 0, $arrayidx57 = 0, $arrayidx60 = 0, $arrayidx77 = 0, $cmp71 = 0, $cond = 0, $dpnt$0 = 0, $dpnt$1 = 0, $i$0 = 0, $i$1 = 0, $i$2 = 0, $i$3 = 0, $i$4 = 0, $i$5 = 0, $i$6 = 0, $inc282 = 0, $j$0 = 0, $j$1 = 0, $j$2 = 0, $k$0 = 0, $k$1 = 0, $k$2 = 0, $k$3 = 0, $label_num325 = 0, $mul = 0, $mul203 = 0, $mul234 = 0, $mul292 = 0, $mul360 = 0, $mul381 = 0, $mul390 = 0, $mul402 = 0, $mul475 = 0, $pnt$0 = 0, $pnt$1 = 0, $pnt1$0 = 0, $pnt1$1 = 0, $pnt2$0 = 0, $pnt2$1 = 0, $pnt2$2 = 0, $pnt2$3 = 0, $retval$0 = 0, $sub = 0, $sub348 = 0, $sub380 = 0, $sub44 = 0, $sub76 = 0, $sub8 = 0, $sub80 = 0, $vararg_buffer = 0, $wk$0 = 0, $wk$1 = 0, $wk$2 = 0, $wk$3 = 0, $wk$4 = 0, $wk_max$0 = 0, $wk_max$1 = 0, $wk_max$2 = 0, $wk_max$3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $vararg_buffer = sp;
 $0 = HEAP32[$labelInfo >> 2] | 0;
 $sub = $ysize + -1 | 0;
 $i$0 = 0;
 $pnt1$0 = $0;
 $pnt2$0 = $0 + ((Math_imul($sub, $xsize) | 0) << 1) | 0;
 while (1) {
  if (($i$0 | 0) >= ($xsize | 0)) break;
  HEAP16[$pnt2$0 >> 1] = 0;
  HEAP16[$pnt1$0 >> 1] = 0;
  $i$0 = $i$0 + 1 | 0;
  $pnt1$0 = $pnt1$0 + 2 | 0;
  $pnt2$0 = $pnt2$0 + 2 | 0;
 }
 $mul = $labelingThresh * 3 | 0;
 $sub8 = $xsize + -1 | 0;
 $i$1 = 0;
 $pnt1$1 = $0;
 $pnt2$1 = $0 + ($sub8 << 1) | 0;
 while (1) {
  if (($i$1 | 0) >= ($ysize | 0)) break;
  HEAP16[$pnt2$1 >> 1] = 0;
  HEAP16[$pnt1$1 >> 1] = 0;
  $i$1 = $i$1 + 1 | 0;
  $pnt1$1 = $pnt1$1 + ($xsize << 1) | 0;
  $pnt2$1 = $pnt2$1 + ($xsize << 1) | 0;
 }
 $arraydecay = $labelInfo + 1179664 | 0;
 $add = $xsize + 1 | 0;
 $sub44 = 0 - $xsize | 0;
 $dpnt$0 = (HEAP32[$labelInfo + 4 >> 2] | 0) + $add | 0;
 $j$0 = 1;
 $pnt$0 = $image + ($add << 2) | 0;
 $pnt2$2 = $0 + ($add << 1) | 0;
 $wk_max$0 = 0;
 L9 : while (1) {
  if (($j$0 | 0) < ($sub | 0)) {
   $dpnt$1 = $dpnt$0;
   $i$2 = 1;
   $pnt$1 = $pnt$0;
   $pnt2$3 = $pnt2$2;
   $wk_max$1 = $wk_max$0;
  } else {
   label = 56;
   break;
  }
  while (1) {
   if (($i$2 | 0) >= ($sub8 | 0)) break;
   do if (((HEAPU8[$pnt$1 + 2 >> 0] | 0) + (HEAPU8[$pnt$1 + 1 >> 0] | 0) + (HEAPU8[$pnt$1 + 3 >> 0] | 0) | 0) > ($mul | 0)) {
    HEAP16[$pnt2$3 >> 1] = 0;
    HEAP8[$dpnt$1 >> 0] = 0;
    $wk_max$3 = $wk_max$1;
   } else {
    HEAP8[$dpnt$1 >> 0] = -1;
    $arrayidx45 = $pnt2$3 + ($sub44 << 1) | 0;
    $5 = HEAP16[$arrayidx45 >> 1] | 0;
    if ($5 << 16 >> 16 > 0) {
     HEAP16[$pnt2$3 >> 1] = $5;
     $6 = ($5 << 16 >> 16) * 7 | 0;
     $arrayidx54 = $labelInfo + 1310736 + ($6 + -7 << 2) | 0;
     HEAP32[$arrayidx54 >> 2] = (HEAP32[$arrayidx54 >> 2] | 0) + 1;
     $arrayidx57 = $labelInfo + 1310736 + ($6 + -6 << 2) | 0;
     HEAP32[$arrayidx57 >> 2] = (HEAP32[$arrayidx57 >> 2] | 0) + $i$2;
     $arrayidx60 = $labelInfo + 1310736 + ($6 + -5 << 2) | 0;
     HEAP32[$arrayidx60 >> 2] = (HEAP32[$arrayidx60 >> 2] | 0) + $j$0;
     HEAP32[$labelInfo + 1310736 + ($6 + -1 << 2) >> 2] = $j$0;
     $wk_max$3 = $wk_max$1;
     break;
    }
    $10 = HEAP16[$arrayidx45 + 2 >> 1] | 0;
    $11 = HEAP16[$arrayidx45 + -2 >> 1] | 0;
    $cmp71 = $11 << 16 >> 16 > 0;
    $sub80 = ($11 << 16 >> 16) + -1 | 0;
    $add$ptr135 = $pnt2$3 + -2 | 0;
    if ($10 << 16 >> 16 <= 0) {
     if ($cmp71) {
      HEAP16[$pnt2$3 >> 1] = $11;
      $mul234 = $sub80 * 7 | 0;
      $arrayidx236 = $labelInfo + 1310736 + ($mul234 << 2) | 0;
      HEAP32[$arrayidx236 >> 2] = (HEAP32[$arrayidx236 >> 2] | 0) + 1;
      $arrayidx239 = $labelInfo + 1310736 + ($mul234 + 1 << 2) | 0;
      HEAP32[$arrayidx239 >> 2] = (HEAP32[$arrayidx239 >> 2] | 0) + $i$2;
      $arrayidx242 = $labelInfo + 1310736 + ($mul234 + 2 << 2) | 0;
      HEAP32[$arrayidx242 >> 2] = (HEAP32[$arrayidx242 >> 2] | 0) + $j$0;
      $arrayidx245 = $labelInfo + 1310736 + ($mul234 + 4 << 2) | 0;
      if ((HEAP32[$arrayidx245 >> 2] | 0) < ($i$2 | 0)) HEAP32[$arrayidx245 >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($mul234 + 6 << 2) >> 2] = $j$0;
      $wk_max$3 = $wk_max$1;
      break;
     }
     $39 = HEAP16[$add$ptr135 >> 1] | 0;
     if ($39 << 16 >> 16 > 0) {
      HEAP16[$pnt2$3 >> 1] = $39;
      $40 = ($39 << 16 >> 16) * 7 | 0;
      $arrayidx265 = $labelInfo + 1310736 + ($40 + -7 << 2) | 0;
      HEAP32[$arrayidx265 >> 2] = (HEAP32[$arrayidx265 >> 2] | 0) + 1;
      $arrayidx268 = $labelInfo + 1310736 + ($40 + -6 << 2) | 0;
      HEAP32[$arrayidx268 >> 2] = (HEAP32[$arrayidx268 >> 2] | 0) + $i$2;
      $arrayidx271 = $labelInfo + 1310736 + ($40 + -5 << 2) | 0;
      HEAP32[$arrayidx271 >> 2] = (HEAP32[$arrayidx271 >> 2] | 0) + $j$0;
      $add273 = $40 + -3 | 0;
      if ((HEAP32[$labelInfo + 1310736 + ($add273 << 2) >> 2] | 0) < ($i$2 | 0)) {
       $$sink = $i$2;
       $add278$sink = $add273;
       $wk_max$2 = $wk_max$1;
      } else {
       $wk_max$3 = $wk_max$1;
       break;
      }
     } else {
      $inc282 = $wk_max$1 + 1 | 0;
      if (($wk_max$1 | 0) > 32767) {
       label = 50;
       break L9;
      }
      HEAP16[$pnt2$3 >> 1] = $inc282;
      HEAP32[$labelInfo + 1179664 + ($wk_max$1 << 2) >> 2] = $inc282 << 16 >> 16;
      $mul292 = $wk_max$1 * 7 | 0;
      HEAP32[$labelInfo + 1310736 + ($mul292 << 2) >> 2] = 1;
      HEAP32[$labelInfo + 1310736 + ($mul292 + 1 << 2) >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($mul292 + 2 << 2) >> 2] = $j$0;
      HEAP32[$labelInfo + 1310736 + ($mul292 + 3 << 2) >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($mul292 + 4 << 2) >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($mul292 + 5 << 2) >> 2] = $j$0;
      $$sink = $j$0;
      $add278$sink = $mul292 + 6 | 0;
      $wk_max$2 = $inc282;
     }
     HEAP32[$labelInfo + 1310736 + ($add278$sink << 2) >> 2] = $$sink;
     $wk_max$3 = $wk_max$2;
     break;
    }
    $sub76 = ($10 << 16 >> 16) + -1 | 0;
    $arrayidx77 = $labelInfo + 1179664 + ($sub76 << 2) | 0;
    if ($cmp71) {
     $12 = HEAP32[$arrayidx77 >> 2] | 0;
     $13 = HEAP32[$labelInfo + 1179664 + ($sub80 << 2) >> 2] | 0;
     L36 : do if (($12 | 0) > ($13 | 0)) {
      HEAP16[$pnt2$3 >> 1] = $13;
      $k$0 = 0;
      $wk$0 = $arraydecay;
      while (1) {
       if (($k$0 | 0) >= ($wk_max$1 | 0)) {
        $16 = $13;
        break L36;
       }
       if ((HEAP32[$wk$0 >> 2] | 0) == ($12 | 0)) HEAP32[$wk$0 >> 2] = $13;
       $k$0 = $k$0 + 1 | 0;
       $wk$0 = $wk$0 + 4 | 0;
      }
     } else {
      HEAP16[$pnt2$3 >> 1] = $12;
      if (($12 | 0) < ($13 | 0)) {
       $k$1 = 0;
       $wk$1 = $arraydecay;
       while (1) {
        if (($k$1 | 0) >= ($wk_max$1 | 0)) {
         $16 = $12;
         break L36;
        }
        if ((HEAP32[$wk$1 >> 2] | 0) == ($13 | 0)) HEAP32[$wk$1 >> 2] = $12;
        $k$1 = $k$1 + 1 | 0;
        $wk$1 = $wk$1 + 4 | 0;
       }
      } else $16 = $12;
     } while (0);
     $17 = ($16 << 16 >> 16) * 7 | 0;
     $arrayidx124 = $labelInfo + 1310736 + ($17 + -7 << 2) | 0;
     HEAP32[$arrayidx124 >> 2] = (HEAP32[$arrayidx124 >> 2] | 0) + 1;
     $arrayidx127 = $labelInfo + 1310736 + ($17 + -6 << 2) | 0;
     HEAP32[$arrayidx127 >> 2] = (HEAP32[$arrayidx127 >> 2] | 0) + $i$2;
     $arrayidx130 = $labelInfo + 1310736 + ($17 + -5 << 2) | 0;
     HEAP32[$arrayidx130 >> 2] = (HEAP32[$arrayidx130 >> 2] | 0) + $j$0;
     HEAP32[$labelInfo + 1310736 + ($17 + -1 << 2) >> 2] = $j$0;
     $wk_max$3 = $wk_max$1;
     break;
    }
    $21 = HEAP16[$add$ptr135 >> 1] | 0;
    if ($21 << 16 >> 16 <= 0) {
     HEAP16[$pnt2$3 >> 1] = $10;
     $mul203 = $sub76 * 7 | 0;
     $arrayidx205 = $labelInfo + 1310736 + ($mul203 << 2) | 0;
     HEAP32[$arrayidx205 >> 2] = (HEAP32[$arrayidx205 >> 2] | 0) + 1;
     $arrayidx208 = $labelInfo + 1310736 + ($mul203 + 1 << 2) | 0;
     HEAP32[$arrayidx208 >> 2] = (HEAP32[$arrayidx208 >> 2] | 0) + $i$2;
     $arrayidx211 = $labelInfo + 1310736 + ($mul203 + 2 << 2) | 0;
     HEAP32[$arrayidx211 >> 2] = (HEAP32[$arrayidx211 >> 2] | 0) + $j$0;
     $arrayidx214 = $labelInfo + 1310736 + ($mul203 + 3 << 2) | 0;
     if ((HEAP32[$arrayidx214 >> 2] | 0) > ($i$2 | 0)) HEAP32[$arrayidx214 >> 2] = $i$2;
     HEAP32[$labelInfo + 1310736 + ($mul203 + 6 << 2) >> 2] = $j$0;
     $wk_max$3 = $wk_max$1;
     break;
    }
    $22 = HEAP32[$arrayidx77 >> 2] | 0;
    $23 = HEAP32[$labelInfo + 1179664 + (($21 << 16 >> 16) + -1 << 2) >> 2] | 0;
    L59 : do if (($22 | 0) > ($23 | 0)) {
     HEAP16[$pnt2$3 >> 1] = $23;
     $k$2 = 0;
     $wk$2 = $arraydecay;
     while (1) {
      if (($k$2 | 0) >= ($wk_max$1 | 0)) {
       $26 = $23;
       break L59;
      }
      if ((HEAP32[$wk$2 >> 2] | 0) == ($22 | 0)) HEAP32[$wk$2 >> 2] = $23;
      $k$2 = $k$2 + 1 | 0;
      $wk$2 = $wk$2 + 4 | 0;
     }
    } else {
     HEAP16[$pnt2$3 >> 1] = $22;
     if (($22 | 0) < ($23 | 0)) {
      $k$3 = 0;
      $wk$3 = $arraydecay;
      while (1) {
       if (($k$3 | 0) >= ($wk_max$1 | 0)) {
        $26 = $22;
        break L59;
       }
       if ((HEAP32[$wk$3 >> 2] | 0) == ($23 | 0)) HEAP32[$wk$3 >> 2] = $22;
       $k$3 = $k$3 + 1 | 0;
       $wk$3 = $wk$3 + 4 | 0;
      }
     } else $26 = $22;
    } while (0);
    $27 = ($26 << 16 >> 16) * 7 | 0;
    $arrayidx191 = $labelInfo + 1310736 + ($27 + -7 << 2) | 0;
    HEAP32[$arrayidx191 >> 2] = (HEAP32[$arrayidx191 >> 2] | 0) + 1;
    $arrayidx194 = $labelInfo + 1310736 + ($27 + -6 << 2) | 0;
    HEAP32[$arrayidx194 >> 2] = (HEAP32[$arrayidx194 >> 2] | 0) + $i$2;
    $arrayidx197 = $labelInfo + 1310736 + ($27 + -5 << 2) | 0;
    HEAP32[$arrayidx197 >> 2] = (HEAP32[$arrayidx197 >> 2] | 0) + $j$0;
    $wk_max$3 = $wk_max$1;
   } while (0);
   $dpnt$1 = $dpnt$1 + 1 | 0;
   $i$2 = $i$2 + 1 | 0;
   $pnt$1 = $pnt$1 + 4 | 0;
   $pnt2$3 = $pnt2$3 + 2 | 0;
   $wk_max$1 = $wk_max$3;
  }
  $dpnt$0 = $dpnt$1 + 2 | 0;
  $j$0 = $j$0 + 1 | 0;
  $pnt$0 = $pnt$1 + 8 | 0;
  $pnt2$2 = $pnt2$3 + 4 | 0;
  $wk_max$0 = $wk_max$1;
 }
 L77 : do if ((label | 0) == 50) {
  _arLog(3, 3256, $vararg_buffer);
  $retval$0 = -1;
 } else if ((label | 0) == 56) {
  $arrayidx327 = $labelInfo + 12 | 0;
  $i$3 = 1;
  $j$1 = 1;
  $wk$4 = $arraydecay;
  while (1) {
   if (($i$3 | 0) > ($wk_max$0 | 0)) break;
   $45 = HEAP32[$wk$4 >> 2] | 0;
   if (($45 | 0) == ($i$3 | 0)) {
    $cond = $j$1;
    $j$2 = $j$1 + 1 | 0;
   } else {
    $cond = HEAP32[$labelInfo + 1179664 + ($45 + -1 << 2) >> 2] | 0;
    $j$2 = $j$1;
   }
   HEAP32[$wk$4 >> 2] = $cond;
   $i$3 = $i$3 + 1 | 0;
   $j$1 = $j$2;
   $wk$4 = $wk$4 + 4 | 0;
  }
  $label_num325 = $labelInfo + 8 | 0;
  $sub348 = $j$1 + -1 | 0;
  HEAP32[$label_num325 >> 2] = $sub348;
  if (!$sub348) $retval$0 = 0; else {
   _memset($arrayidx327 | 0, 0, $sub348 << 2 | 0) | 0;
   _memset($labelInfo + 655376 | 0, 0, $sub348 << 4 | 0) | 0;
   $47 = $sub348;
   $i$4 = 0;
   while (1) {
    if (($i$4 | 0) >= ($47 | 0)) {
     $i$5 = 0;
     break;
    }
    $mul360 = $i$4 << 2;
    HEAP32[$labelInfo + 131084 + ($mul360 << 2) >> 2] = $xsize;
    HEAP32[$labelInfo + 131084 + (($mul360 | 1) << 2) >> 2] = 0;
    HEAP32[$labelInfo + 131084 + (($mul360 | 2) << 2) >> 2] = $ysize;
    HEAP32[$labelInfo + 131084 + (($mul360 | 3) << 2) >> 2] = 0;
    $47 = HEAP32[$label_num325 >> 2] | 0;
    $i$4 = $i$4 + 1 | 0;
   }
   while (1) {
    if (($i$5 | 0) >= ($wk_max$0 | 0)) {
     $i$6 = 0;
     break;
    }
    $sub380 = (HEAP32[$labelInfo + 1179664 + ($i$5 << 2) >> 2] | 0) + -1 | 0;
    $mul381 = $i$5 * 7 | 0;
    $arrayidx384 = $labelInfo + 12 + ($sub380 << 2) | 0;
    HEAP32[$arrayidx384 >> 2] = (HEAP32[$arrayidx384 >> 2] | 0) + (HEAP32[$labelInfo + 1310736 + ($mul381 << 2) >> 2] | 0);
    $mul390 = $sub380 << 1;
    $arrayidx392 = $labelInfo + 655376 + ($mul390 << 3) | 0;
    HEAPF64[$arrayidx392 >> 3] = +HEAPF64[$arrayidx392 >> 3] + +(HEAP32[$labelInfo + 1310736 + ($mul381 + 1 << 2) >> 2] | 0);
    $arrayidx400 = $labelInfo + 655376 + (($mul390 | 1) << 3) | 0;
    HEAPF64[$arrayidx400 >> 3] = +HEAPF64[$arrayidx400 >> 3] + +(HEAP32[$labelInfo + 1310736 + ($mul381 + 2 << 2) >> 2] | 0);
    $mul402 = $sub380 << 2;
    $arrayidx404 = $labelInfo + 131084 + ($mul402 << 2) | 0;
    $56 = HEAP32[$labelInfo + 1310736 + ($mul381 + 3 << 2) >> 2] | 0;
    if ((HEAP32[$arrayidx404 >> 2] | 0) > ($56 | 0)) HEAP32[$arrayidx404 >> 2] = $56;
    $arrayidx420 = $labelInfo + 131084 + (($mul402 | 1) << 2) | 0;
    $58 = HEAP32[$labelInfo + 1310736 + ($mul381 + 4 << 2) >> 2] | 0;
    if ((HEAP32[$arrayidx420 >> 2] | 0) < ($58 | 0)) HEAP32[$arrayidx420 >> 2] = $58;
    $arrayidx436 = $labelInfo + 131084 + (($mul402 | 2) << 2) | 0;
    $60 = HEAP32[$labelInfo + 1310736 + ($mul381 + 5 << 2) >> 2] | 0;
    if ((HEAP32[$arrayidx436 >> 2] | 0) > ($60 | 0)) HEAP32[$arrayidx436 >> 2] = $60;
    $arrayidx452 = $labelInfo + 131084 + (($mul402 | 3) << 2) | 0;
    $62 = HEAP32[$labelInfo + 1310736 + ($mul381 + 6 << 2) >> 2] | 0;
    if ((HEAP32[$arrayidx452 >> 2] | 0) < ($62 | 0)) HEAP32[$arrayidx452 >> 2] = $62;
    $i$5 = $i$5 + 1 | 0;
   }
   while (1) {
    if (($i$6 | 0) >= (HEAP32[$label_num325 >> 2] | 0)) {
     $retval$0 = 0;
     break L77;
    }
    $arrayidx473 = $labelInfo + 12 + ($i$6 << 2) | 0;
    $mul475 = $i$6 << 1;
    $arrayidx477 = $labelInfo + 655376 + ($mul475 << 3) | 0;
    HEAPF64[$arrayidx477 >> 3] = +HEAPF64[$arrayidx477 >> 3] / +(HEAP32[$arrayidx473 >> 2] | 0);
    $arrayidx482 = $labelInfo + 655376 + (($mul475 | 1) << 3) | 0;
    HEAPF64[$arrayidx482 >> 3] = +HEAPF64[$arrayidx482 >> 3] / +(HEAP32[$arrayidx473 >> 2] | 0);
    $i$6 = $i$6 + 1 | 0;
   }
  }
 } while (0);
 STACKTOP = sp;
 return $retval$0 | 0;
}

function _arLabelingSubEWR3C($image, $xsize, $ysize, $labelingThresh, $labelInfo) {
 $image = $image | 0;
 $xsize = $xsize | 0;
 $ysize = $ysize | 0;
 $labelingThresh = $labelingThresh | 0;
 $labelInfo = $labelInfo | 0;
 var $$sink = 0, $0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $16 = 0, $17 = 0, $21 = 0, $22 = 0, $23 = 0, $26 = 0, $27 = 0, $39 = 0, $40 = 0, $45 = 0, $47 = 0, $5 = 0, $56 = 0, $58 = 0, $6 = 0, $60 = 0, $62 = 0, $add = 0, $add$ptr135 = 0, $add273 = 0, $add278$sink = 0, $arraydecay = 0, $arrayidx124 = 0, $arrayidx127 = 0, $arrayidx130 = 0, $arrayidx191 = 0, $arrayidx194 = 0, $arrayidx197 = 0, $arrayidx205 = 0, $arrayidx208 = 0, $arrayidx211 = 0, $arrayidx214 = 0, $arrayidx236 = 0, $arrayidx239 = 0, $arrayidx242 = 0, $arrayidx245 = 0, $arrayidx265 = 0, $arrayidx268 = 0, $arrayidx271 = 0, $arrayidx327 = 0, $arrayidx384 = 0, $arrayidx392 = 0, $arrayidx400 = 0, $arrayidx404 = 0, $arrayidx420 = 0, $arrayidx436 = 0, $arrayidx45 = 0, $arrayidx452 = 0, $arrayidx473 = 0, $arrayidx477 = 0, $arrayidx482 = 0, $arrayidx54 = 0, $arrayidx57 = 0, $arrayidx60 = 0, $arrayidx77 = 0, $cmp71 = 0, $cond = 0, $dpnt$0 = 0, $dpnt$1 = 0, $i$0 = 0, $i$1 = 0, $i$2 = 0, $i$3 = 0, $i$4 = 0, $i$5 = 0, $i$6 = 0, $inc282 = 0, $j$0 = 0, $j$1 = 0, $j$2 = 0, $k$0 = 0, $k$1 = 0, $k$2 = 0, $k$3 = 0, $label_num325 = 0, $mul = 0, $mul203 = 0, $mul234 = 0, $mul292 = 0, $mul360 = 0, $mul381 = 0, $mul390 = 0, $mul402 = 0, $mul475 = 0, $pnt$0 = 0, $pnt$1 = 0, $pnt1$0 = 0, $pnt1$1 = 0, $pnt2$0 = 0, $pnt2$1 = 0, $pnt2$2 = 0, $pnt2$3 = 0, $retval$0 = 0, $sub = 0, $sub348 = 0, $sub380 = 0, $sub44 = 0, $sub76 = 0, $sub8 = 0, $sub80 = 0, $vararg_buffer = 0, $wk$0 = 0, $wk$1 = 0, $wk$2 = 0, $wk$3 = 0, $wk$4 = 0, $wk_max$0 = 0, $wk_max$1 = 0, $wk_max$2 = 0, $wk_max$3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $vararg_buffer = sp;
 $0 = HEAP32[$labelInfo >> 2] | 0;
 $sub = $ysize + -1 | 0;
 $i$0 = 0;
 $pnt1$0 = $0;
 $pnt2$0 = $0 + ((Math_imul($sub, $xsize) | 0) << 1) | 0;
 while (1) {
  if (($i$0 | 0) >= ($xsize | 0)) break;
  HEAP16[$pnt2$0 >> 1] = 0;
  HEAP16[$pnt1$0 >> 1] = 0;
  $i$0 = $i$0 + 1 | 0;
  $pnt1$0 = $pnt1$0 + 2 | 0;
  $pnt2$0 = $pnt2$0 + 2 | 0;
 }
 $mul = $labelingThresh * 3 | 0;
 $sub8 = $xsize + -1 | 0;
 $i$1 = 0;
 $pnt1$1 = $0;
 $pnt2$1 = $0 + ($sub8 << 1) | 0;
 while (1) {
  if (($i$1 | 0) >= ($ysize | 0)) break;
  HEAP16[$pnt2$1 >> 1] = 0;
  HEAP16[$pnt1$1 >> 1] = 0;
  $i$1 = $i$1 + 1 | 0;
  $pnt1$1 = $pnt1$1 + ($xsize << 1) | 0;
  $pnt2$1 = $pnt2$1 + ($xsize << 1) | 0;
 }
 $arraydecay = $labelInfo + 1179664 | 0;
 $add = $xsize + 1 | 0;
 $sub44 = 0 - $xsize | 0;
 $dpnt$0 = (HEAP32[$labelInfo + 4 >> 2] | 0) + $add | 0;
 $j$0 = 1;
 $pnt$0 = $image + ($add * 3 | 0) | 0;
 $pnt2$2 = $0 + ($add << 1) | 0;
 $wk_max$0 = 0;
 L9 : while (1) {
  if (($j$0 | 0) < ($sub | 0)) {
   $dpnt$1 = $dpnt$0;
   $i$2 = 1;
   $pnt$1 = $pnt$0;
   $pnt2$3 = $pnt2$2;
   $wk_max$1 = $wk_max$0;
  } else {
   label = 56;
   break;
  }
  while (1) {
   if (($i$2 | 0) >= ($sub8 | 0)) break;
   do if (((HEAPU8[$pnt$1 + 1 >> 0] | 0) + (HEAPU8[$pnt$1 >> 0] | 0) + (HEAPU8[$pnt$1 + 2 >> 0] | 0) | 0) > ($mul | 0)) {
    HEAP8[$dpnt$1 >> 0] = -1;
    $arrayidx45 = $pnt2$3 + ($sub44 << 1) | 0;
    $5 = HEAP16[$arrayidx45 >> 1] | 0;
    if ($5 << 16 >> 16 > 0) {
     HEAP16[$pnt2$3 >> 1] = $5;
     $6 = ($5 << 16 >> 16) * 7 | 0;
     $arrayidx54 = $labelInfo + 1310736 + ($6 + -7 << 2) | 0;
     HEAP32[$arrayidx54 >> 2] = (HEAP32[$arrayidx54 >> 2] | 0) + 1;
     $arrayidx57 = $labelInfo + 1310736 + ($6 + -6 << 2) | 0;
     HEAP32[$arrayidx57 >> 2] = (HEAP32[$arrayidx57 >> 2] | 0) + $i$2;
     $arrayidx60 = $labelInfo + 1310736 + ($6 + -5 << 2) | 0;
     HEAP32[$arrayidx60 >> 2] = (HEAP32[$arrayidx60 >> 2] | 0) + $j$0;
     HEAP32[$labelInfo + 1310736 + ($6 + -1 << 2) >> 2] = $j$0;
     $wk_max$3 = $wk_max$1;
     break;
    }
    $10 = HEAP16[$arrayidx45 + 2 >> 1] | 0;
    $11 = HEAP16[$arrayidx45 + -2 >> 1] | 0;
    $cmp71 = $11 << 16 >> 16 > 0;
    $sub80 = ($11 << 16 >> 16) + -1 | 0;
    $add$ptr135 = $pnt2$3 + -2 | 0;
    if ($10 << 16 >> 16 <= 0) {
     if ($cmp71) {
      HEAP16[$pnt2$3 >> 1] = $11;
      $mul234 = $sub80 * 7 | 0;
      $arrayidx236 = $labelInfo + 1310736 + ($mul234 << 2) | 0;
      HEAP32[$arrayidx236 >> 2] = (HEAP32[$arrayidx236 >> 2] | 0) + 1;
      $arrayidx239 = $labelInfo + 1310736 + ($mul234 + 1 << 2) | 0;
      HEAP32[$arrayidx239 >> 2] = (HEAP32[$arrayidx239 >> 2] | 0) + $i$2;
      $arrayidx242 = $labelInfo + 1310736 + ($mul234 + 2 << 2) | 0;
      HEAP32[$arrayidx242 >> 2] = (HEAP32[$arrayidx242 >> 2] | 0) + $j$0;
      $arrayidx245 = $labelInfo + 1310736 + ($mul234 + 4 << 2) | 0;
      if ((HEAP32[$arrayidx245 >> 2] | 0) < ($i$2 | 0)) HEAP32[$arrayidx245 >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($mul234 + 6 << 2) >> 2] = $j$0;
      $wk_max$3 = $wk_max$1;
      break;
     }
     $39 = HEAP16[$add$ptr135 >> 1] | 0;
     if ($39 << 16 >> 16 > 0) {
      HEAP16[$pnt2$3 >> 1] = $39;
      $40 = ($39 << 16 >> 16) * 7 | 0;
      $arrayidx265 = $labelInfo + 1310736 + ($40 + -7 << 2) | 0;
      HEAP32[$arrayidx265 >> 2] = (HEAP32[$arrayidx265 >> 2] | 0) + 1;
      $arrayidx268 = $labelInfo + 1310736 + ($40 + -6 << 2) | 0;
      HEAP32[$arrayidx268 >> 2] = (HEAP32[$arrayidx268 >> 2] | 0) + $i$2;
      $arrayidx271 = $labelInfo + 1310736 + ($40 + -5 << 2) | 0;
      HEAP32[$arrayidx271 >> 2] = (HEAP32[$arrayidx271 >> 2] | 0) + $j$0;
      $add273 = $40 + -3 | 0;
      if ((HEAP32[$labelInfo + 1310736 + ($add273 << 2) >> 2] | 0) < ($i$2 | 0)) {
       $$sink = $i$2;
       $add278$sink = $add273;
       $wk_max$2 = $wk_max$1;
      } else {
       $wk_max$3 = $wk_max$1;
       break;
      }
     } else {
      $inc282 = $wk_max$1 + 1 | 0;
      if (($wk_max$1 | 0) > 32767) {
       label = 50;
       break L9;
      }
      HEAP16[$pnt2$3 >> 1] = $inc282;
      HEAP32[$labelInfo + 1179664 + ($wk_max$1 << 2) >> 2] = $inc282 << 16 >> 16;
      $mul292 = $wk_max$1 * 7 | 0;
      HEAP32[$labelInfo + 1310736 + ($mul292 << 2) >> 2] = 1;
      HEAP32[$labelInfo + 1310736 + ($mul292 + 1 << 2) >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($mul292 + 2 << 2) >> 2] = $j$0;
      HEAP32[$labelInfo + 1310736 + ($mul292 + 3 << 2) >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($mul292 + 4 << 2) >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($mul292 + 5 << 2) >> 2] = $j$0;
      $$sink = $j$0;
      $add278$sink = $mul292 + 6 | 0;
      $wk_max$2 = $inc282;
     }
     HEAP32[$labelInfo + 1310736 + ($add278$sink << 2) >> 2] = $$sink;
     $wk_max$3 = $wk_max$2;
     break;
    }
    $sub76 = ($10 << 16 >> 16) + -1 | 0;
    $arrayidx77 = $labelInfo + 1179664 + ($sub76 << 2) | 0;
    if ($cmp71) {
     $12 = HEAP32[$arrayidx77 >> 2] | 0;
     $13 = HEAP32[$labelInfo + 1179664 + ($sub80 << 2) >> 2] | 0;
     L35 : do if (($12 | 0) > ($13 | 0)) {
      HEAP16[$pnt2$3 >> 1] = $13;
      $k$0 = 0;
      $wk$0 = $arraydecay;
      while (1) {
       if (($k$0 | 0) >= ($wk_max$1 | 0)) {
        $16 = $13;
        break L35;
       }
       if ((HEAP32[$wk$0 >> 2] | 0) == ($12 | 0)) HEAP32[$wk$0 >> 2] = $13;
       $k$0 = $k$0 + 1 | 0;
       $wk$0 = $wk$0 + 4 | 0;
      }
     } else {
      HEAP16[$pnt2$3 >> 1] = $12;
      if (($12 | 0) < ($13 | 0)) {
       $k$1 = 0;
       $wk$1 = $arraydecay;
       while (1) {
        if (($k$1 | 0) >= ($wk_max$1 | 0)) {
         $16 = $12;
         break L35;
        }
        if ((HEAP32[$wk$1 >> 2] | 0) == ($13 | 0)) HEAP32[$wk$1 >> 2] = $12;
        $k$1 = $k$1 + 1 | 0;
        $wk$1 = $wk$1 + 4 | 0;
       }
      } else $16 = $12;
     } while (0);
     $17 = ($16 << 16 >> 16) * 7 | 0;
     $arrayidx124 = $labelInfo + 1310736 + ($17 + -7 << 2) | 0;
     HEAP32[$arrayidx124 >> 2] = (HEAP32[$arrayidx124 >> 2] | 0) + 1;
     $arrayidx127 = $labelInfo + 1310736 + ($17 + -6 << 2) | 0;
     HEAP32[$arrayidx127 >> 2] = (HEAP32[$arrayidx127 >> 2] | 0) + $i$2;
     $arrayidx130 = $labelInfo + 1310736 + ($17 + -5 << 2) | 0;
     HEAP32[$arrayidx130 >> 2] = (HEAP32[$arrayidx130 >> 2] | 0) + $j$0;
     HEAP32[$labelInfo + 1310736 + ($17 + -1 << 2) >> 2] = $j$0;
     $wk_max$3 = $wk_max$1;
     break;
    }
    $21 = HEAP16[$add$ptr135 >> 1] | 0;
    if ($21 << 16 >> 16 <= 0) {
     HEAP16[$pnt2$3 >> 1] = $10;
     $mul203 = $sub76 * 7 | 0;
     $arrayidx205 = $labelInfo + 1310736 + ($mul203 << 2) | 0;
     HEAP32[$arrayidx205 >> 2] = (HEAP32[$arrayidx205 >> 2] | 0) + 1;
     $arrayidx208 = $labelInfo + 1310736 + ($mul203 + 1 << 2) | 0;
     HEAP32[$arrayidx208 >> 2] = (HEAP32[$arrayidx208 >> 2] | 0) + $i$2;
     $arrayidx211 = $labelInfo + 1310736 + ($mul203 + 2 << 2) | 0;
     HEAP32[$arrayidx211 >> 2] = (HEAP32[$arrayidx211 >> 2] | 0) + $j$0;
     $arrayidx214 = $labelInfo + 1310736 + ($mul203 + 3 << 2) | 0;
     if ((HEAP32[$arrayidx214 >> 2] | 0) > ($i$2 | 0)) HEAP32[$arrayidx214 >> 2] = $i$2;
     HEAP32[$labelInfo + 1310736 + ($mul203 + 6 << 2) >> 2] = $j$0;
     $wk_max$3 = $wk_max$1;
     break;
    }
    $22 = HEAP32[$arrayidx77 >> 2] | 0;
    $23 = HEAP32[$labelInfo + 1179664 + (($21 << 16 >> 16) + -1 << 2) >> 2] | 0;
    L58 : do if (($22 | 0) > ($23 | 0)) {
     HEAP16[$pnt2$3 >> 1] = $23;
     $k$2 = 0;
     $wk$2 = $arraydecay;
     while (1) {
      if (($k$2 | 0) >= ($wk_max$1 | 0)) {
       $26 = $23;
       break L58;
      }
      if ((HEAP32[$wk$2 >> 2] | 0) == ($22 | 0)) HEAP32[$wk$2 >> 2] = $23;
      $k$2 = $k$2 + 1 | 0;
      $wk$2 = $wk$2 + 4 | 0;
     }
    } else {
     HEAP16[$pnt2$3 >> 1] = $22;
     if (($22 | 0) < ($23 | 0)) {
      $k$3 = 0;
      $wk$3 = $arraydecay;
      while (1) {
       if (($k$3 | 0) >= ($wk_max$1 | 0)) {
        $26 = $22;
        break L58;
       }
       if ((HEAP32[$wk$3 >> 2] | 0) == ($23 | 0)) HEAP32[$wk$3 >> 2] = $22;
       $k$3 = $k$3 + 1 | 0;
       $wk$3 = $wk$3 + 4 | 0;
      }
     } else $26 = $22;
    } while (0);
    $27 = ($26 << 16 >> 16) * 7 | 0;
    $arrayidx191 = $labelInfo + 1310736 + ($27 + -7 << 2) | 0;
    HEAP32[$arrayidx191 >> 2] = (HEAP32[$arrayidx191 >> 2] | 0) + 1;
    $arrayidx194 = $labelInfo + 1310736 + ($27 + -6 << 2) | 0;
    HEAP32[$arrayidx194 >> 2] = (HEAP32[$arrayidx194 >> 2] | 0) + $i$2;
    $arrayidx197 = $labelInfo + 1310736 + ($27 + -5 << 2) | 0;
    HEAP32[$arrayidx197 >> 2] = (HEAP32[$arrayidx197 >> 2] | 0) + $j$0;
    $wk_max$3 = $wk_max$1;
   } else {
    HEAP16[$pnt2$3 >> 1] = 0;
    HEAP8[$dpnt$1 >> 0] = 0;
    $wk_max$3 = $wk_max$1;
   } while (0);
   $dpnt$1 = $dpnt$1 + 1 | 0;
   $i$2 = $i$2 + 1 | 0;
   $pnt$1 = $pnt$1 + 3 | 0;
   $pnt2$3 = $pnt2$3 + 2 | 0;
   $wk_max$1 = $wk_max$3;
  }
  $dpnt$0 = $dpnt$1 + 2 | 0;
  $j$0 = $j$0 + 1 | 0;
  $pnt$0 = $pnt$1 + 6 | 0;
  $pnt2$2 = $pnt2$3 + 4 | 0;
  $wk_max$0 = $wk_max$1;
 }
 L77 : do if ((label | 0) == 50) {
  _arLog(3, 3256, $vararg_buffer);
  $retval$0 = -1;
 } else if ((label | 0) == 56) {
  $arrayidx327 = $labelInfo + 12 | 0;
  $i$3 = 1;
  $j$1 = 1;
  $wk$4 = $arraydecay;
  while (1) {
   if (($i$3 | 0) > ($wk_max$0 | 0)) break;
   $45 = HEAP32[$wk$4 >> 2] | 0;
   if (($45 | 0) == ($i$3 | 0)) {
    $cond = $j$1;
    $j$2 = $j$1 + 1 | 0;
   } else {
    $cond = HEAP32[$labelInfo + 1179664 + ($45 + -1 << 2) >> 2] | 0;
    $j$2 = $j$1;
   }
   HEAP32[$wk$4 >> 2] = $cond;
   $i$3 = $i$3 + 1 | 0;
   $j$1 = $j$2;
   $wk$4 = $wk$4 + 4 | 0;
  }
  $label_num325 = $labelInfo + 8 | 0;
  $sub348 = $j$1 + -1 | 0;
  HEAP32[$label_num325 >> 2] = $sub348;
  if (!$sub348) $retval$0 = 0; else {
   _memset($arrayidx327 | 0, 0, $sub348 << 2 | 0) | 0;
   _memset($labelInfo + 655376 | 0, 0, $sub348 << 4 | 0) | 0;
   $47 = $sub348;
   $i$4 = 0;
   while (1) {
    if (($i$4 | 0) >= ($47 | 0)) {
     $i$5 = 0;
     break;
    }
    $mul360 = $i$4 << 2;
    HEAP32[$labelInfo + 131084 + ($mul360 << 2) >> 2] = $xsize;
    HEAP32[$labelInfo + 131084 + (($mul360 | 1) << 2) >> 2] = 0;
    HEAP32[$labelInfo + 131084 + (($mul360 | 2) << 2) >> 2] = $ysize;
    HEAP32[$labelInfo + 131084 + (($mul360 | 3) << 2) >> 2] = 0;
    $47 = HEAP32[$label_num325 >> 2] | 0;
    $i$4 = $i$4 + 1 | 0;
   }
   while (1) {
    if (($i$5 | 0) >= ($wk_max$0 | 0)) {
     $i$6 = 0;
     break;
    }
    $sub380 = (HEAP32[$labelInfo + 1179664 + ($i$5 << 2) >> 2] | 0) + -1 | 0;
    $mul381 = $i$5 * 7 | 0;
    $arrayidx384 = $labelInfo + 12 + ($sub380 << 2) | 0;
    HEAP32[$arrayidx384 >> 2] = (HEAP32[$arrayidx384 >> 2] | 0) + (HEAP32[$labelInfo + 1310736 + ($mul381 << 2) >> 2] | 0);
    $mul390 = $sub380 << 1;
    $arrayidx392 = $labelInfo + 655376 + ($mul390 << 3) | 0;
    HEAPF64[$arrayidx392 >> 3] = +HEAPF64[$arrayidx392 >> 3] + +(HEAP32[$labelInfo + 1310736 + ($mul381 + 1 << 2) >> 2] | 0);
    $arrayidx400 = $labelInfo + 655376 + (($mul390 | 1) << 3) | 0;
    HEAPF64[$arrayidx400 >> 3] = +HEAPF64[$arrayidx400 >> 3] + +(HEAP32[$labelInfo + 1310736 + ($mul381 + 2 << 2) >> 2] | 0);
    $mul402 = $sub380 << 2;
    $arrayidx404 = $labelInfo + 131084 + ($mul402 << 2) | 0;
    $56 = HEAP32[$labelInfo + 1310736 + ($mul381 + 3 << 2) >> 2] | 0;
    if ((HEAP32[$arrayidx404 >> 2] | 0) > ($56 | 0)) HEAP32[$arrayidx404 >> 2] = $56;
    $arrayidx420 = $labelInfo + 131084 + (($mul402 | 1) << 2) | 0;
    $58 = HEAP32[$labelInfo + 1310736 + ($mul381 + 4 << 2) >> 2] | 0;
    if ((HEAP32[$arrayidx420 >> 2] | 0) < ($58 | 0)) HEAP32[$arrayidx420 >> 2] = $58;
    $arrayidx436 = $labelInfo + 131084 + (($mul402 | 2) << 2) | 0;
    $60 = HEAP32[$labelInfo + 1310736 + ($mul381 + 5 << 2) >> 2] | 0;
    if ((HEAP32[$arrayidx436 >> 2] | 0) > ($60 | 0)) HEAP32[$arrayidx436 >> 2] = $60;
    $arrayidx452 = $labelInfo + 131084 + (($mul402 | 3) << 2) | 0;
    $62 = HEAP32[$labelInfo + 1310736 + ($mul381 + 6 << 2) >> 2] | 0;
    if ((HEAP32[$arrayidx452 >> 2] | 0) < ($62 | 0)) HEAP32[$arrayidx452 >> 2] = $62;
    $i$5 = $i$5 + 1 | 0;
   }
   while (1) {
    if (($i$6 | 0) >= (HEAP32[$label_num325 >> 2] | 0)) {
     $retval$0 = 0;
     break L77;
    }
    $arrayidx473 = $labelInfo + 12 + ($i$6 << 2) | 0;
    $mul475 = $i$6 << 1;
    $arrayidx477 = $labelInfo + 655376 + ($mul475 << 3) | 0;
    HEAPF64[$arrayidx477 >> 3] = +HEAPF64[$arrayidx477 >> 3] / +(HEAP32[$arrayidx473 >> 2] | 0);
    $arrayidx482 = $labelInfo + 655376 + (($mul475 | 1) << 3) | 0;
    HEAPF64[$arrayidx482 >> 3] = +HEAPF64[$arrayidx482 >> 3] / +(HEAP32[$arrayidx473 >> 2] | 0);
    $i$6 = $i$6 + 1 | 0;
   }
  }
 } while (0);
 STACKTOP = sp;
 return $retval$0 | 0;
}

function _arLabelingSubEBR3C($image, $xsize, $ysize, $labelingThresh, $labelInfo) {
 $image = $image | 0;
 $xsize = $xsize | 0;
 $ysize = $ysize | 0;
 $labelingThresh = $labelingThresh | 0;
 $labelInfo = $labelInfo | 0;
 var $$sink = 0, $0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $16 = 0, $17 = 0, $21 = 0, $22 = 0, $23 = 0, $26 = 0, $27 = 0, $39 = 0, $40 = 0, $45 = 0, $47 = 0, $5 = 0, $56 = 0, $58 = 0, $6 = 0, $60 = 0, $62 = 0, $add = 0, $add$ptr135 = 0, $add273 = 0, $add278$sink = 0, $arraydecay = 0, $arrayidx124 = 0, $arrayidx127 = 0, $arrayidx130 = 0, $arrayidx191 = 0, $arrayidx194 = 0, $arrayidx197 = 0, $arrayidx205 = 0, $arrayidx208 = 0, $arrayidx211 = 0, $arrayidx214 = 0, $arrayidx236 = 0, $arrayidx239 = 0, $arrayidx242 = 0, $arrayidx245 = 0, $arrayidx265 = 0, $arrayidx268 = 0, $arrayidx271 = 0, $arrayidx327 = 0, $arrayidx384 = 0, $arrayidx392 = 0, $arrayidx400 = 0, $arrayidx404 = 0, $arrayidx420 = 0, $arrayidx436 = 0, $arrayidx45 = 0, $arrayidx452 = 0, $arrayidx473 = 0, $arrayidx477 = 0, $arrayidx482 = 0, $arrayidx54 = 0, $arrayidx57 = 0, $arrayidx60 = 0, $arrayidx77 = 0, $cmp71 = 0, $cond = 0, $dpnt$0 = 0, $dpnt$1 = 0, $i$0 = 0, $i$1 = 0, $i$2 = 0, $i$3 = 0, $i$4 = 0, $i$5 = 0, $i$6 = 0, $inc282 = 0, $j$0 = 0, $j$1 = 0, $j$2 = 0, $k$0 = 0, $k$1 = 0, $k$2 = 0, $k$3 = 0, $label_num325 = 0, $mul = 0, $mul203 = 0, $mul234 = 0, $mul292 = 0, $mul360 = 0, $mul381 = 0, $mul390 = 0, $mul402 = 0, $mul475 = 0, $pnt$0 = 0, $pnt$1 = 0, $pnt1$0 = 0, $pnt1$1 = 0, $pnt2$0 = 0, $pnt2$1 = 0, $pnt2$2 = 0, $pnt2$3 = 0, $retval$0 = 0, $sub = 0, $sub348 = 0, $sub380 = 0, $sub44 = 0, $sub76 = 0, $sub8 = 0, $sub80 = 0, $vararg_buffer = 0, $wk$0 = 0, $wk$1 = 0, $wk$2 = 0, $wk$3 = 0, $wk$4 = 0, $wk_max$0 = 0, $wk_max$1 = 0, $wk_max$2 = 0, $wk_max$3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $vararg_buffer = sp;
 $0 = HEAP32[$labelInfo >> 2] | 0;
 $sub = $ysize + -1 | 0;
 $i$0 = 0;
 $pnt1$0 = $0;
 $pnt2$0 = $0 + ((Math_imul($sub, $xsize) | 0) << 1) | 0;
 while (1) {
  if (($i$0 | 0) >= ($xsize | 0)) break;
  HEAP16[$pnt2$0 >> 1] = 0;
  HEAP16[$pnt1$0 >> 1] = 0;
  $i$0 = $i$0 + 1 | 0;
  $pnt1$0 = $pnt1$0 + 2 | 0;
  $pnt2$0 = $pnt2$0 + 2 | 0;
 }
 $mul = $labelingThresh * 3 | 0;
 $sub8 = $xsize + -1 | 0;
 $i$1 = 0;
 $pnt1$1 = $0;
 $pnt2$1 = $0 + ($sub8 << 1) | 0;
 while (1) {
  if (($i$1 | 0) >= ($ysize | 0)) break;
  HEAP16[$pnt2$1 >> 1] = 0;
  HEAP16[$pnt1$1 >> 1] = 0;
  $i$1 = $i$1 + 1 | 0;
  $pnt1$1 = $pnt1$1 + ($xsize << 1) | 0;
  $pnt2$1 = $pnt2$1 + ($xsize << 1) | 0;
 }
 $arraydecay = $labelInfo + 1179664 | 0;
 $add = $xsize + 1 | 0;
 $sub44 = 0 - $xsize | 0;
 $dpnt$0 = (HEAP32[$labelInfo + 4 >> 2] | 0) + $add | 0;
 $j$0 = 1;
 $pnt$0 = $image + ($add * 3 | 0) | 0;
 $pnt2$2 = $0 + ($add << 1) | 0;
 $wk_max$0 = 0;
 L9 : while (1) {
  if (($j$0 | 0) < ($sub | 0)) {
   $dpnt$1 = $dpnt$0;
   $i$2 = 1;
   $pnt$1 = $pnt$0;
   $pnt2$3 = $pnt2$2;
   $wk_max$1 = $wk_max$0;
  } else {
   label = 56;
   break;
  }
  while (1) {
   if (($i$2 | 0) >= ($sub8 | 0)) break;
   do if (((HEAPU8[$pnt$1 + 1 >> 0] | 0) + (HEAPU8[$pnt$1 >> 0] | 0) + (HEAPU8[$pnt$1 + 2 >> 0] | 0) | 0) > ($mul | 0)) {
    HEAP16[$pnt2$3 >> 1] = 0;
    HEAP8[$dpnt$1 >> 0] = 0;
    $wk_max$3 = $wk_max$1;
   } else {
    HEAP8[$dpnt$1 >> 0] = -1;
    $arrayidx45 = $pnt2$3 + ($sub44 << 1) | 0;
    $5 = HEAP16[$arrayidx45 >> 1] | 0;
    if ($5 << 16 >> 16 > 0) {
     HEAP16[$pnt2$3 >> 1] = $5;
     $6 = ($5 << 16 >> 16) * 7 | 0;
     $arrayidx54 = $labelInfo + 1310736 + ($6 + -7 << 2) | 0;
     HEAP32[$arrayidx54 >> 2] = (HEAP32[$arrayidx54 >> 2] | 0) + 1;
     $arrayidx57 = $labelInfo + 1310736 + ($6 + -6 << 2) | 0;
     HEAP32[$arrayidx57 >> 2] = (HEAP32[$arrayidx57 >> 2] | 0) + $i$2;
     $arrayidx60 = $labelInfo + 1310736 + ($6 + -5 << 2) | 0;
     HEAP32[$arrayidx60 >> 2] = (HEAP32[$arrayidx60 >> 2] | 0) + $j$0;
     HEAP32[$labelInfo + 1310736 + ($6 + -1 << 2) >> 2] = $j$0;
     $wk_max$3 = $wk_max$1;
     break;
    }
    $10 = HEAP16[$arrayidx45 + 2 >> 1] | 0;
    $11 = HEAP16[$arrayidx45 + -2 >> 1] | 0;
    $cmp71 = $11 << 16 >> 16 > 0;
    $sub80 = ($11 << 16 >> 16) + -1 | 0;
    $add$ptr135 = $pnt2$3 + -2 | 0;
    if ($10 << 16 >> 16 <= 0) {
     if ($cmp71) {
      HEAP16[$pnt2$3 >> 1] = $11;
      $mul234 = $sub80 * 7 | 0;
      $arrayidx236 = $labelInfo + 1310736 + ($mul234 << 2) | 0;
      HEAP32[$arrayidx236 >> 2] = (HEAP32[$arrayidx236 >> 2] | 0) + 1;
      $arrayidx239 = $labelInfo + 1310736 + ($mul234 + 1 << 2) | 0;
      HEAP32[$arrayidx239 >> 2] = (HEAP32[$arrayidx239 >> 2] | 0) + $i$2;
      $arrayidx242 = $labelInfo + 1310736 + ($mul234 + 2 << 2) | 0;
      HEAP32[$arrayidx242 >> 2] = (HEAP32[$arrayidx242 >> 2] | 0) + $j$0;
      $arrayidx245 = $labelInfo + 1310736 + ($mul234 + 4 << 2) | 0;
      if ((HEAP32[$arrayidx245 >> 2] | 0) < ($i$2 | 0)) HEAP32[$arrayidx245 >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($mul234 + 6 << 2) >> 2] = $j$0;
      $wk_max$3 = $wk_max$1;
      break;
     }
     $39 = HEAP16[$add$ptr135 >> 1] | 0;
     if ($39 << 16 >> 16 > 0) {
      HEAP16[$pnt2$3 >> 1] = $39;
      $40 = ($39 << 16 >> 16) * 7 | 0;
      $arrayidx265 = $labelInfo + 1310736 + ($40 + -7 << 2) | 0;
      HEAP32[$arrayidx265 >> 2] = (HEAP32[$arrayidx265 >> 2] | 0) + 1;
      $arrayidx268 = $labelInfo + 1310736 + ($40 + -6 << 2) | 0;
      HEAP32[$arrayidx268 >> 2] = (HEAP32[$arrayidx268 >> 2] | 0) + $i$2;
      $arrayidx271 = $labelInfo + 1310736 + ($40 + -5 << 2) | 0;
      HEAP32[$arrayidx271 >> 2] = (HEAP32[$arrayidx271 >> 2] | 0) + $j$0;
      $add273 = $40 + -3 | 0;
      if ((HEAP32[$labelInfo + 1310736 + ($add273 << 2) >> 2] | 0) < ($i$2 | 0)) {
       $$sink = $i$2;
       $add278$sink = $add273;
       $wk_max$2 = $wk_max$1;
      } else {
       $wk_max$3 = $wk_max$1;
       break;
      }
     } else {
      $inc282 = $wk_max$1 + 1 | 0;
      if (($wk_max$1 | 0) > 32767) {
       label = 50;
       break L9;
      }
      HEAP16[$pnt2$3 >> 1] = $inc282;
      HEAP32[$labelInfo + 1179664 + ($wk_max$1 << 2) >> 2] = $inc282 << 16 >> 16;
      $mul292 = $wk_max$1 * 7 | 0;
      HEAP32[$labelInfo + 1310736 + ($mul292 << 2) >> 2] = 1;
      HEAP32[$labelInfo + 1310736 + ($mul292 + 1 << 2) >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($mul292 + 2 << 2) >> 2] = $j$0;
      HEAP32[$labelInfo + 1310736 + ($mul292 + 3 << 2) >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($mul292 + 4 << 2) >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($mul292 + 5 << 2) >> 2] = $j$0;
      $$sink = $j$0;
      $add278$sink = $mul292 + 6 | 0;
      $wk_max$2 = $inc282;
     }
     HEAP32[$labelInfo + 1310736 + ($add278$sink << 2) >> 2] = $$sink;
     $wk_max$3 = $wk_max$2;
     break;
    }
    $sub76 = ($10 << 16 >> 16) + -1 | 0;
    $arrayidx77 = $labelInfo + 1179664 + ($sub76 << 2) | 0;
    if ($cmp71) {
     $12 = HEAP32[$arrayidx77 >> 2] | 0;
     $13 = HEAP32[$labelInfo + 1179664 + ($sub80 << 2) >> 2] | 0;
     L36 : do if (($12 | 0) > ($13 | 0)) {
      HEAP16[$pnt2$3 >> 1] = $13;
      $k$0 = 0;
      $wk$0 = $arraydecay;
      while (1) {
       if (($k$0 | 0) >= ($wk_max$1 | 0)) {
        $16 = $13;
        break L36;
       }
       if ((HEAP32[$wk$0 >> 2] | 0) == ($12 | 0)) HEAP32[$wk$0 >> 2] = $13;
       $k$0 = $k$0 + 1 | 0;
       $wk$0 = $wk$0 + 4 | 0;
      }
     } else {
      HEAP16[$pnt2$3 >> 1] = $12;
      if (($12 | 0) < ($13 | 0)) {
       $k$1 = 0;
       $wk$1 = $arraydecay;
       while (1) {
        if (($k$1 | 0) >= ($wk_max$1 | 0)) {
         $16 = $12;
         break L36;
        }
        if ((HEAP32[$wk$1 >> 2] | 0) == ($13 | 0)) HEAP32[$wk$1 >> 2] = $12;
        $k$1 = $k$1 + 1 | 0;
        $wk$1 = $wk$1 + 4 | 0;
       }
      } else $16 = $12;
     } while (0);
     $17 = ($16 << 16 >> 16) * 7 | 0;
     $arrayidx124 = $labelInfo + 1310736 + ($17 + -7 << 2) | 0;
     HEAP32[$arrayidx124 >> 2] = (HEAP32[$arrayidx124 >> 2] | 0) + 1;
     $arrayidx127 = $labelInfo + 1310736 + ($17 + -6 << 2) | 0;
     HEAP32[$arrayidx127 >> 2] = (HEAP32[$arrayidx127 >> 2] | 0) + $i$2;
     $arrayidx130 = $labelInfo + 1310736 + ($17 + -5 << 2) | 0;
     HEAP32[$arrayidx130 >> 2] = (HEAP32[$arrayidx130 >> 2] | 0) + $j$0;
     HEAP32[$labelInfo + 1310736 + ($17 + -1 << 2) >> 2] = $j$0;
     $wk_max$3 = $wk_max$1;
     break;
    }
    $21 = HEAP16[$add$ptr135 >> 1] | 0;
    if ($21 << 16 >> 16 <= 0) {
     HEAP16[$pnt2$3 >> 1] = $10;
     $mul203 = $sub76 * 7 | 0;
     $arrayidx205 = $labelInfo + 1310736 + ($mul203 << 2) | 0;
     HEAP32[$arrayidx205 >> 2] = (HEAP32[$arrayidx205 >> 2] | 0) + 1;
     $arrayidx208 = $labelInfo + 1310736 + ($mul203 + 1 << 2) | 0;
     HEAP32[$arrayidx208 >> 2] = (HEAP32[$arrayidx208 >> 2] | 0) + $i$2;
     $arrayidx211 = $labelInfo + 1310736 + ($mul203 + 2 << 2) | 0;
     HEAP32[$arrayidx211 >> 2] = (HEAP32[$arrayidx211 >> 2] | 0) + $j$0;
     $arrayidx214 = $labelInfo + 1310736 + ($mul203 + 3 << 2) | 0;
     if ((HEAP32[$arrayidx214 >> 2] | 0) > ($i$2 | 0)) HEAP32[$arrayidx214 >> 2] = $i$2;
     HEAP32[$labelInfo + 1310736 + ($mul203 + 6 << 2) >> 2] = $j$0;
     $wk_max$3 = $wk_max$1;
     break;
    }
    $22 = HEAP32[$arrayidx77 >> 2] | 0;
    $23 = HEAP32[$labelInfo + 1179664 + (($21 << 16 >> 16) + -1 << 2) >> 2] | 0;
    L59 : do if (($22 | 0) > ($23 | 0)) {
     HEAP16[$pnt2$3 >> 1] = $23;
     $k$2 = 0;
     $wk$2 = $arraydecay;
     while (1) {
      if (($k$2 | 0) >= ($wk_max$1 | 0)) {
       $26 = $23;
       break L59;
      }
      if ((HEAP32[$wk$2 >> 2] | 0) == ($22 | 0)) HEAP32[$wk$2 >> 2] = $23;
      $k$2 = $k$2 + 1 | 0;
      $wk$2 = $wk$2 + 4 | 0;
     }
    } else {
     HEAP16[$pnt2$3 >> 1] = $22;
     if (($22 | 0) < ($23 | 0)) {
      $k$3 = 0;
      $wk$3 = $arraydecay;
      while (1) {
       if (($k$3 | 0) >= ($wk_max$1 | 0)) {
        $26 = $22;
        break L59;
       }
       if ((HEAP32[$wk$3 >> 2] | 0) == ($23 | 0)) HEAP32[$wk$3 >> 2] = $22;
       $k$3 = $k$3 + 1 | 0;
       $wk$3 = $wk$3 + 4 | 0;
      }
     } else $26 = $22;
    } while (0);
    $27 = ($26 << 16 >> 16) * 7 | 0;
    $arrayidx191 = $labelInfo + 1310736 + ($27 + -7 << 2) | 0;
    HEAP32[$arrayidx191 >> 2] = (HEAP32[$arrayidx191 >> 2] | 0) + 1;
    $arrayidx194 = $labelInfo + 1310736 + ($27 + -6 << 2) | 0;
    HEAP32[$arrayidx194 >> 2] = (HEAP32[$arrayidx194 >> 2] | 0) + $i$2;
    $arrayidx197 = $labelInfo + 1310736 + ($27 + -5 << 2) | 0;
    HEAP32[$arrayidx197 >> 2] = (HEAP32[$arrayidx197 >> 2] | 0) + $j$0;
    $wk_max$3 = $wk_max$1;
   } while (0);
   $dpnt$1 = $dpnt$1 + 1 | 0;
   $i$2 = $i$2 + 1 | 0;
   $pnt$1 = $pnt$1 + 3 | 0;
   $pnt2$3 = $pnt2$3 + 2 | 0;
   $wk_max$1 = $wk_max$3;
  }
  $dpnt$0 = $dpnt$1 + 2 | 0;
  $j$0 = $j$0 + 1 | 0;
  $pnt$0 = $pnt$1 + 6 | 0;
  $pnt2$2 = $pnt2$3 + 4 | 0;
  $wk_max$0 = $wk_max$1;
 }
 L77 : do if ((label | 0) == 50) {
  _arLog(3, 3256, $vararg_buffer);
  $retval$0 = -1;
 } else if ((label | 0) == 56) {
  $arrayidx327 = $labelInfo + 12 | 0;
  $i$3 = 1;
  $j$1 = 1;
  $wk$4 = $arraydecay;
  while (1) {
   if (($i$3 | 0) > ($wk_max$0 | 0)) break;
   $45 = HEAP32[$wk$4 >> 2] | 0;
   if (($45 | 0) == ($i$3 | 0)) {
    $cond = $j$1;
    $j$2 = $j$1 + 1 | 0;
   } else {
    $cond = HEAP32[$labelInfo + 1179664 + ($45 + -1 << 2) >> 2] | 0;
    $j$2 = $j$1;
   }
   HEAP32[$wk$4 >> 2] = $cond;
   $i$3 = $i$3 + 1 | 0;
   $j$1 = $j$2;
   $wk$4 = $wk$4 + 4 | 0;
  }
  $label_num325 = $labelInfo + 8 | 0;
  $sub348 = $j$1 + -1 | 0;
  HEAP32[$label_num325 >> 2] = $sub348;
  if (!$sub348) $retval$0 = 0; else {
   _memset($arrayidx327 | 0, 0, $sub348 << 2 | 0) | 0;
   _memset($labelInfo + 655376 | 0, 0, $sub348 << 4 | 0) | 0;
   $47 = $sub348;
   $i$4 = 0;
   while (1) {
    if (($i$4 | 0) >= ($47 | 0)) {
     $i$5 = 0;
     break;
    }
    $mul360 = $i$4 << 2;
    HEAP32[$labelInfo + 131084 + ($mul360 << 2) >> 2] = $xsize;
    HEAP32[$labelInfo + 131084 + (($mul360 | 1) << 2) >> 2] = 0;
    HEAP32[$labelInfo + 131084 + (($mul360 | 2) << 2) >> 2] = $ysize;
    HEAP32[$labelInfo + 131084 + (($mul360 | 3) << 2) >> 2] = 0;
    $47 = HEAP32[$label_num325 >> 2] | 0;
    $i$4 = $i$4 + 1 | 0;
   }
   while (1) {
    if (($i$5 | 0) >= ($wk_max$0 | 0)) {
     $i$6 = 0;
     break;
    }
    $sub380 = (HEAP32[$labelInfo + 1179664 + ($i$5 << 2) >> 2] | 0) + -1 | 0;
    $mul381 = $i$5 * 7 | 0;
    $arrayidx384 = $labelInfo + 12 + ($sub380 << 2) | 0;
    HEAP32[$arrayidx384 >> 2] = (HEAP32[$arrayidx384 >> 2] | 0) + (HEAP32[$labelInfo + 1310736 + ($mul381 << 2) >> 2] | 0);
    $mul390 = $sub380 << 1;
    $arrayidx392 = $labelInfo + 655376 + ($mul390 << 3) | 0;
    HEAPF64[$arrayidx392 >> 3] = +HEAPF64[$arrayidx392 >> 3] + +(HEAP32[$labelInfo + 1310736 + ($mul381 + 1 << 2) >> 2] | 0);
    $arrayidx400 = $labelInfo + 655376 + (($mul390 | 1) << 3) | 0;
    HEAPF64[$arrayidx400 >> 3] = +HEAPF64[$arrayidx400 >> 3] + +(HEAP32[$labelInfo + 1310736 + ($mul381 + 2 << 2) >> 2] | 0);
    $mul402 = $sub380 << 2;
    $arrayidx404 = $labelInfo + 131084 + ($mul402 << 2) | 0;
    $56 = HEAP32[$labelInfo + 1310736 + ($mul381 + 3 << 2) >> 2] | 0;
    if ((HEAP32[$arrayidx404 >> 2] | 0) > ($56 | 0)) HEAP32[$arrayidx404 >> 2] = $56;
    $arrayidx420 = $labelInfo + 131084 + (($mul402 | 1) << 2) | 0;
    $58 = HEAP32[$labelInfo + 1310736 + ($mul381 + 4 << 2) >> 2] | 0;
    if ((HEAP32[$arrayidx420 >> 2] | 0) < ($58 | 0)) HEAP32[$arrayidx420 >> 2] = $58;
    $arrayidx436 = $labelInfo + 131084 + (($mul402 | 2) << 2) | 0;
    $60 = HEAP32[$labelInfo + 1310736 + ($mul381 + 5 << 2) >> 2] | 0;
    if ((HEAP32[$arrayidx436 >> 2] | 0) > ($60 | 0)) HEAP32[$arrayidx436 >> 2] = $60;
    $arrayidx452 = $labelInfo + 131084 + (($mul402 | 3) << 2) | 0;
    $62 = HEAP32[$labelInfo + 1310736 + ($mul381 + 6 << 2) >> 2] | 0;
    if ((HEAP32[$arrayidx452 >> 2] | 0) < ($62 | 0)) HEAP32[$arrayidx452 >> 2] = $62;
    $i$5 = $i$5 + 1 | 0;
   }
   while (1) {
    if (($i$6 | 0) >= (HEAP32[$label_num325 >> 2] | 0)) {
     $retval$0 = 0;
     break L77;
    }
    $arrayidx473 = $labelInfo + 12 + ($i$6 << 2) | 0;
    $mul475 = $i$6 << 1;
    $arrayidx477 = $labelInfo + 655376 + ($mul475 << 3) | 0;
    HEAPF64[$arrayidx477 >> 3] = +HEAPF64[$arrayidx477 >> 3] / +(HEAP32[$arrayidx473 >> 2] | 0);
    $arrayidx482 = $labelInfo + 655376 + (($mul475 | 1) << 3) | 0;
    HEAPF64[$arrayidx482 >> 3] = +HEAPF64[$arrayidx482 >> 3] / +(HEAP32[$arrayidx473 >> 2] | 0);
    $i$6 = $i$6 + 1 | 0;
   }
  }
 } while (0);
 STACKTOP = sp;
 return $retval$0 | 0;
}

function _arLabelingSubEWR3CA($image, $xsize, $ysize, $labelingThresh, $labelInfo) {
 $image = $image | 0;
 $xsize = $xsize | 0;
 $ysize = $ysize | 0;
 $labelingThresh = $labelingThresh | 0;
 $labelInfo = $labelInfo | 0;
 var $$sink = 0, $0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $16 = 0, $17 = 0, $21 = 0, $22 = 0, $23 = 0, $26 = 0, $27 = 0, $39 = 0, $40 = 0, $45 = 0, $47 = 0, $5 = 0, $56 = 0, $58 = 0, $6 = 0, $60 = 0, $62 = 0, $add = 0, $add$ptr135 = 0, $add273 = 0, $add278$sink = 0, $arraydecay = 0, $arrayidx124 = 0, $arrayidx127 = 0, $arrayidx130 = 0, $arrayidx191 = 0, $arrayidx194 = 0, $arrayidx197 = 0, $arrayidx205 = 0, $arrayidx208 = 0, $arrayidx211 = 0, $arrayidx214 = 0, $arrayidx236 = 0, $arrayidx239 = 0, $arrayidx242 = 0, $arrayidx245 = 0, $arrayidx265 = 0, $arrayidx268 = 0, $arrayidx271 = 0, $arrayidx327 = 0, $arrayidx384 = 0, $arrayidx392 = 0, $arrayidx400 = 0, $arrayidx404 = 0, $arrayidx420 = 0, $arrayidx436 = 0, $arrayidx45 = 0, $arrayidx452 = 0, $arrayidx473 = 0, $arrayidx477 = 0, $arrayidx482 = 0, $arrayidx54 = 0, $arrayidx57 = 0, $arrayidx60 = 0, $arrayidx77 = 0, $cmp71 = 0, $cond = 0, $dpnt$0 = 0, $dpnt$1 = 0, $i$0 = 0, $i$1 = 0, $i$2 = 0, $i$3 = 0, $i$4 = 0, $i$5 = 0, $i$6 = 0, $inc282 = 0, $j$0 = 0, $j$1 = 0, $j$2 = 0, $k$0 = 0, $k$1 = 0, $k$2 = 0, $k$3 = 0, $label_num325 = 0, $mul = 0, $mul203 = 0, $mul234 = 0, $mul292 = 0, $mul360 = 0, $mul381 = 0, $mul390 = 0, $mul402 = 0, $mul475 = 0, $pnt$0 = 0, $pnt$1 = 0, $pnt1$0 = 0, $pnt1$1 = 0, $pnt2$0 = 0, $pnt2$1 = 0, $pnt2$2 = 0, $pnt2$3 = 0, $retval$0 = 0, $sub = 0, $sub348 = 0, $sub380 = 0, $sub44 = 0, $sub76 = 0, $sub8 = 0, $sub80 = 0, $vararg_buffer = 0, $wk$0 = 0, $wk$1 = 0, $wk$2 = 0, $wk$3 = 0, $wk$4 = 0, $wk_max$0 = 0, $wk_max$1 = 0, $wk_max$2 = 0, $wk_max$3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $vararg_buffer = sp;
 $0 = HEAP32[$labelInfo >> 2] | 0;
 $sub = $ysize + -1 | 0;
 $i$0 = 0;
 $pnt1$0 = $0;
 $pnt2$0 = $0 + ((Math_imul($sub, $xsize) | 0) << 1) | 0;
 while (1) {
  if (($i$0 | 0) >= ($xsize | 0)) break;
  HEAP16[$pnt2$0 >> 1] = 0;
  HEAP16[$pnt1$0 >> 1] = 0;
  $i$0 = $i$0 + 1 | 0;
  $pnt1$0 = $pnt1$0 + 2 | 0;
  $pnt2$0 = $pnt2$0 + 2 | 0;
 }
 $mul = $labelingThresh * 3 | 0;
 $sub8 = $xsize + -1 | 0;
 $i$1 = 0;
 $pnt1$1 = $0;
 $pnt2$1 = $0 + ($sub8 << 1) | 0;
 while (1) {
  if (($i$1 | 0) >= ($ysize | 0)) break;
  HEAP16[$pnt2$1 >> 1] = 0;
  HEAP16[$pnt1$1 >> 1] = 0;
  $i$1 = $i$1 + 1 | 0;
  $pnt1$1 = $pnt1$1 + ($xsize << 1) | 0;
  $pnt2$1 = $pnt2$1 + ($xsize << 1) | 0;
 }
 $arraydecay = $labelInfo + 1179664 | 0;
 $add = $xsize + 1 | 0;
 $sub44 = 0 - $xsize | 0;
 $dpnt$0 = (HEAP32[$labelInfo + 4 >> 2] | 0) + $add | 0;
 $j$0 = 1;
 $pnt$0 = $image + ($add << 2) | 0;
 $pnt2$2 = $0 + ($add << 1) | 0;
 $wk_max$0 = 0;
 L9 : while (1) {
  if (($j$0 | 0) < ($sub | 0)) {
   $dpnt$1 = $dpnt$0;
   $i$2 = 1;
   $pnt$1 = $pnt$0;
   $pnt2$3 = $pnt2$2;
   $wk_max$1 = $wk_max$0;
  } else {
   label = 56;
   break;
  }
  while (1) {
   if (($i$2 | 0) >= ($sub8 | 0)) break;
   do if (((HEAPU8[$pnt$1 + 1 >> 0] | 0) + (HEAPU8[$pnt$1 >> 0] | 0) + (HEAPU8[$pnt$1 + 2 >> 0] | 0) | 0) > ($mul | 0)) {
    HEAP8[$dpnt$1 >> 0] = -1;
    $arrayidx45 = $pnt2$3 + ($sub44 << 1) | 0;
    $5 = HEAP16[$arrayidx45 >> 1] | 0;
    if ($5 << 16 >> 16 > 0) {
     HEAP16[$pnt2$3 >> 1] = $5;
     $6 = ($5 << 16 >> 16) * 7 | 0;
     $arrayidx54 = $labelInfo + 1310736 + ($6 + -7 << 2) | 0;
     HEAP32[$arrayidx54 >> 2] = (HEAP32[$arrayidx54 >> 2] | 0) + 1;
     $arrayidx57 = $labelInfo + 1310736 + ($6 + -6 << 2) | 0;
     HEAP32[$arrayidx57 >> 2] = (HEAP32[$arrayidx57 >> 2] | 0) + $i$2;
     $arrayidx60 = $labelInfo + 1310736 + ($6 + -5 << 2) | 0;
     HEAP32[$arrayidx60 >> 2] = (HEAP32[$arrayidx60 >> 2] | 0) + $j$0;
     HEAP32[$labelInfo + 1310736 + ($6 + -1 << 2) >> 2] = $j$0;
     $wk_max$3 = $wk_max$1;
     break;
    }
    $10 = HEAP16[$arrayidx45 + 2 >> 1] | 0;
    $11 = HEAP16[$arrayidx45 + -2 >> 1] | 0;
    $cmp71 = $11 << 16 >> 16 > 0;
    $sub80 = ($11 << 16 >> 16) + -1 | 0;
    $add$ptr135 = $pnt2$3 + -2 | 0;
    if ($10 << 16 >> 16 <= 0) {
     if ($cmp71) {
      HEAP16[$pnt2$3 >> 1] = $11;
      $mul234 = $sub80 * 7 | 0;
      $arrayidx236 = $labelInfo + 1310736 + ($mul234 << 2) | 0;
      HEAP32[$arrayidx236 >> 2] = (HEAP32[$arrayidx236 >> 2] | 0) + 1;
      $arrayidx239 = $labelInfo + 1310736 + ($mul234 + 1 << 2) | 0;
      HEAP32[$arrayidx239 >> 2] = (HEAP32[$arrayidx239 >> 2] | 0) + $i$2;
      $arrayidx242 = $labelInfo + 1310736 + ($mul234 + 2 << 2) | 0;
      HEAP32[$arrayidx242 >> 2] = (HEAP32[$arrayidx242 >> 2] | 0) + $j$0;
      $arrayidx245 = $labelInfo + 1310736 + ($mul234 + 4 << 2) | 0;
      if ((HEAP32[$arrayidx245 >> 2] | 0) < ($i$2 | 0)) HEAP32[$arrayidx245 >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($mul234 + 6 << 2) >> 2] = $j$0;
      $wk_max$3 = $wk_max$1;
      break;
     }
     $39 = HEAP16[$add$ptr135 >> 1] | 0;
     if ($39 << 16 >> 16 > 0) {
      HEAP16[$pnt2$3 >> 1] = $39;
      $40 = ($39 << 16 >> 16) * 7 | 0;
      $arrayidx265 = $labelInfo + 1310736 + ($40 + -7 << 2) | 0;
      HEAP32[$arrayidx265 >> 2] = (HEAP32[$arrayidx265 >> 2] | 0) + 1;
      $arrayidx268 = $labelInfo + 1310736 + ($40 + -6 << 2) | 0;
      HEAP32[$arrayidx268 >> 2] = (HEAP32[$arrayidx268 >> 2] | 0) + $i$2;
      $arrayidx271 = $labelInfo + 1310736 + ($40 + -5 << 2) | 0;
      HEAP32[$arrayidx271 >> 2] = (HEAP32[$arrayidx271 >> 2] | 0) + $j$0;
      $add273 = $40 + -3 | 0;
      if ((HEAP32[$labelInfo + 1310736 + ($add273 << 2) >> 2] | 0) < ($i$2 | 0)) {
       $$sink = $i$2;
       $add278$sink = $add273;
       $wk_max$2 = $wk_max$1;
      } else {
       $wk_max$3 = $wk_max$1;
       break;
      }
     } else {
      $inc282 = $wk_max$1 + 1 | 0;
      if (($wk_max$1 | 0) > 32767) {
       label = 50;
       break L9;
      }
      HEAP16[$pnt2$3 >> 1] = $inc282;
      HEAP32[$labelInfo + 1179664 + ($wk_max$1 << 2) >> 2] = $inc282 << 16 >> 16;
      $mul292 = $wk_max$1 * 7 | 0;
      HEAP32[$labelInfo + 1310736 + ($mul292 << 2) >> 2] = 1;
      HEAP32[$labelInfo + 1310736 + ($mul292 + 1 << 2) >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($mul292 + 2 << 2) >> 2] = $j$0;
      HEAP32[$labelInfo + 1310736 + ($mul292 + 3 << 2) >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($mul292 + 4 << 2) >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($mul292 + 5 << 2) >> 2] = $j$0;
      $$sink = $j$0;
      $add278$sink = $mul292 + 6 | 0;
      $wk_max$2 = $inc282;
     }
     HEAP32[$labelInfo + 1310736 + ($add278$sink << 2) >> 2] = $$sink;
     $wk_max$3 = $wk_max$2;
     break;
    }
    $sub76 = ($10 << 16 >> 16) + -1 | 0;
    $arrayidx77 = $labelInfo + 1179664 + ($sub76 << 2) | 0;
    if ($cmp71) {
     $12 = HEAP32[$arrayidx77 >> 2] | 0;
     $13 = HEAP32[$labelInfo + 1179664 + ($sub80 << 2) >> 2] | 0;
     L35 : do if (($12 | 0) > ($13 | 0)) {
      HEAP16[$pnt2$3 >> 1] = $13;
      $k$0 = 0;
      $wk$0 = $arraydecay;
      while (1) {
       if (($k$0 | 0) >= ($wk_max$1 | 0)) {
        $16 = $13;
        break L35;
       }
       if ((HEAP32[$wk$0 >> 2] | 0) == ($12 | 0)) HEAP32[$wk$0 >> 2] = $13;
       $k$0 = $k$0 + 1 | 0;
       $wk$0 = $wk$0 + 4 | 0;
      }
     } else {
      HEAP16[$pnt2$3 >> 1] = $12;
      if (($12 | 0) < ($13 | 0)) {
       $k$1 = 0;
       $wk$1 = $arraydecay;
       while (1) {
        if (($k$1 | 0) >= ($wk_max$1 | 0)) {
         $16 = $12;
         break L35;
        }
        if ((HEAP32[$wk$1 >> 2] | 0) == ($13 | 0)) HEAP32[$wk$1 >> 2] = $12;
        $k$1 = $k$1 + 1 | 0;
        $wk$1 = $wk$1 + 4 | 0;
       }
      } else $16 = $12;
     } while (0);
     $17 = ($16 << 16 >> 16) * 7 | 0;
     $arrayidx124 = $labelInfo + 1310736 + ($17 + -7 << 2) | 0;
     HEAP32[$arrayidx124 >> 2] = (HEAP32[$arrayidx124 >> 2] | 0) + 1;
     $arrayidx127 = $labelInfo + 1310736 + ($17 + -6 << 2) | 0;
     HEAP32[$arrayidx127 >> 2] = (HEAP32[$arrayidx127 >> 2] | 0) + $i$2;
     $arrayidx130 = $labelInfo + 1310736 + ($17 + -5 << 2) | 0;
     HEAP32[$arrayidx130 >> 2] = (HEAP32[$arrayidx130 >> 2] | 0) + $j$0;
     HEAP32[$labelInfo + 1310736 + ($17 + -1 << 2) >> 2] = $j$0;
     $wk_max$3 = $wk_max$1;
     break;
    }
    $21 = HEAP16[$add$ptr135 >> 1] | 0;
    if ($21 << 16 >> 16 <= 0) {
     HEAP16[$pnt2$3 >> 1] = $10;
     $mul203 = $sub76 * 7 | 0;
     $arrayidx205 = $labelInfo + 1310736 + ($mul203 << 2) | 0;
     HEAP32[$arrayidx205 >> 2] = (HEAP32[$arrayidx205 >> 2] | 0) + 1;
     $arrayidx208 = $labelInfo + 1310736 + ($mul203 + 1 << 2) | 0;
     HEAP32[$arrayidx208 >> 2] = (HEAP32[$arrayidx208 >> 2] | 0) + $i$2;
     $arrayidx211 = $labelInfo + 1310736 + ($mul203 + 2 << 2) | 0;
     HEAP32[$arrayidx211 >> 2] = (HEAP32[$arrayidx211 >> 2] | 0) + $j$0;
     $arrayidx214 = $labelInfo + 1310736 + ($mul203 + 3 << 2) | 0;
     if ((HEAP32[$arrayidx214 >> 2] | 0) > ($i$2 | 0)) HEAP32[$arrayidx214 >> 2] = $i$2;
     HEAP32[$labelInfo + 1310736 + ($mul203 + 6 << 2) >> 2] = $j$0;
     $wk_max$3 = $wk_max$1;
     break;
    }
    $22 = HEAP32[$arrayidx77 >> 2] | 0;
    $23 = HEAP32[$labelInfo + 1179664 + (($21 << 16 >> 16) + -1 << 2) >> 2] | 0;
    L58 : do if (($22 | 0) > ($23 | 0)) {
     HEAP16[$pnt2$3 >> 1] = $23;
     $k$2 = 0;
     $wk$2 = $arraydecay;
     while (1) {
      if (($k$2 | 0) >= ($wk_max$1 | 0)) {
       $26 = $23;
       break L58;
      }
      if ((HEAP32[$wk$2 >> 2] | 0) == ($22 | 0)) HEAP32[$wk$2 >> 2] = $23;
      $k$2 = $k$2 + 1 | 0;
      $wk$2 = $wk$2 + 4 | 0;
     }
    } else {
     HEAP16[$pnt2$3 >> 1] = $22;
     if (($22 | 0) < ($23 | 0)) {
      $k$3 = 0;
      $wk$3 = $arraydecay;
      while (1) {
       if (($k$3 | 0) >= ($wk_max$1 | 0)) {
        $26 = $22;
        break L58;
       }
       if ((HEAP32[$wk$3 >> 2] | 0) == ($23 | 0)) HEAP32[$wk$3 >> 2] = $22;
       $k$3 = $k$3 + 1 | 0;
       $wk$3 = $wk$3 + 4 | 0;
      }
     } else $26 = $22;
    } while (0);
    $27 = ($26 << 16 >> 16) * 7 | 0;
    $arrayidx191 = $labelInfo + 1310736 + ($27 + -7 << 2) | 0;
    HEAP32[$arrayidx191 >> 2] = (HEAP32[$arrayidx191 >> 2] | 0) + 1;
    $arrayidx194 = $labelInfo + 1310736 + ($27 + -6 << 2) | 0;
    HEAP32[$arrayidx194 >> 2] = (HEAP32[$arrayidx194 >> 2] | 0) + $i$2;
    $arrayidx197 = $labelInfo + 1310736 + ($27 + -5 << 2) | 0;
    HEAP32[$arrayidx197 >> 2] = (HEAP32[$arrayidx197 >> 2] | 0) + $j$0;
    $wk_max$3 = $wk_max$1;
   } else {
    HEAP16[$pnt2$3 >> 1] = 0;
    HEAP8[$dpnt$1 >> 0] = 0;
    $wk_max$3 = $wk_max$1;
   } while (0);
   $dpnt$1 = $dpnt$1 + 1 | 0;
   $i$2 = $i$2 + 1 | 0;
   $pnt$1 = $pnt$1 + 4 | 0;
   $pnt2$3 = $pnt2$3 + 2 | 0;
   $wk_max$1 = $wk_max$3;
  }
  $dpnt$0 = $dpnt$1 + 2 | 0;
  $j$0 = $j$0 + 1 | 0;
  $pnt$0 = $pnt$1 + 8 | 0;
  $pnt2$2 = $pnt2$3 + 4 | 0;
  $wk_max$0 = $wk_max$1;
 }
 L77 : do if ((label | 0) == 50) {
  _arLog(3, 3256, $vararg_buffer);
  $retval$0 = -1;
 } else if ((label | 0) == 56) {
  $arrayidx327 = $labelInfo + 12 | 0;
  $i$3 = 1;
  $j$1 = 1;
  $wk$4 = $arraydecay;
  while (1) {
   if (($i$3 | 0) > ($wk_max$0 | 0)) break;
   $45 = HEAP32[$wk$4 >> 2] | 0;
   if (($45 | 0) == ($i$3 | 0)) {
    $cond = $j$1;
    $j$2 = $j$1 + 1 | 0;
   } else {
    $cond = HEAP32[$labelInfo + 1179664 + ($45 + -1 << 2) >> 2] | 0;
    $j$2 = $j$1;
   }
   HEAP32[$wk$4 >> 2] = $cond;
   $i$3 = $i$3 + 1 | 0;
   $j$1 = $j$2;
   $wk$4 = $wk$4 + 4 | 0;
  }
  $label_num325 = $labelInfo + 8 | 0;
  $sub348 = $j$1 + -1 | 0;
  HEAP32[$label_num325 >> 2] = $sub348;
  if (!$sub348) $retval$0 = 0; else {
   _memset($arrayidx327 | 0, 0, $sub348 << 2 | 0) | 0;
   _memset($labelInfo + 655376 | 0, 0, $sub348 << 4 | 0) | 0;
   $47 = $sub348;
   $i$4 = 0;
   while (1) {
    if (($i$4 | 0) >= ($47 | 0)) {
     $i$5 = 0;
     break;
    }
    $mul360 = $i$4 << 2;
    HEAP32[$labelInfo + 131084 + ($mul360 << 2) >> 2] = $xsize;
    HEAP32[$labelInfo + 131084 + (($mul360 | 1) << 2) >> 2] = 0;
    HEAP32[$labelInfo + 131084 + (($mul360 | 2) << 2) >> 2] = $ysize;
    HEAP32[$labelInfo + 131084 + (($mul360 | 3) << 2) >> 2] = 0;
    $47 = HEAP32[$label_num325 >> 2] | 0;
    $i$4 = $i$4 + 1 | 0;
   }
   while (1) {
    if (($i$5 | 0) >= ($wk_max$0 | 0)) {
     $i$6 = 0;
     break;
    }
    $sub380 = (HEAP32[$labelInfo + 1179664 + ($i$5 << 2) >> 2] | 0) + -1 | 0;
    $mul381 = $i$5 * 7 | 0;
    $arrayidx384 = $labelInfo + 12 + ($sub380 << 2) | 0;
    HEAP32[$arrayidx384 >> 2] = (HEAP32[$arrayidx384 >> 2] | 0) + (HEAP32[$labelInfo + 1310736 + ($mul381 << 2) >> 2] | 0);
    $mul390 = $sub380 << 1;
    $arrayidx392 = $labelInfo + 655376 + ($mul390 << 3) | 0;
    HEAPF64[$arrayidx392 >> 3] = +HEAPF64[$arrayidx392 >> 3] + +(HEAP32[$labelInfo + 1310736 + ($mul381 + 1 << 2) >> 2] | 0);
    $arrayidx400 = $labelInfo + 655376 + (($mul390 | 1) << 3) | 0;
    HEAPF64[$arrayidx400 >> 3] = +HEAPF64[$arrayidx400 >> 3] + +(HEAP32[$labelInfo + 1310736 + ($mul381 + 2 << 2) >> 2] | 0);
    $mul402 = $sub380 << 2;
    $arrayidx404 = $labelInfo + 131084 + ($mul402 << 2) | 0;
    $56 = HEAP32[$labelInfo + 1310736 + ($mul381 + 3 << 2) >> 2] | 0;
    if ((HEAP32[$arrayidx404 >> 2] | 0) > ($56 | 0)) HEAP32[$arrayidx404 >> 2] = $56;
    $arrayidx420 = $labelInfo + 131084 + (($mul402 | 1) << 2) | 0;
    $58 = HEAP32[$labelInfo + 1310736 + ($mul381 + 4 << 2) >> 2] | 0;
    if ((HEAP32[$arrayidx420 >> 2] | 0) < ($58 | 0)) HEAP32[$arrayidx420 >> 2] = $58;
    $arrayidx436 = $labelInfo + 131084 + (($mul402 | 2) << 2) | 0;
    $60 = HEAP32[$labelInfo + 1310736 + ($mul381 + 5 << 2) >> 2] | 0;
    if ((HEAP32[$arrayidx436 >> 2] | 0) > ($60 | 0)) HEAP32[$arrayidx436 >> 2] = $60;
    $arrayidx452 = $labelInfo + 131084 + (($mul402 | 3) << 2) | 0;
    $62 = HEAP32[$labelInfo + 1310736 + ($mul381 + 6 << 2) >> 2] | 0;
    if ((HEAP32[$arrayidx452 >> 2] | 0) < ($62 | 0)) HEAP32[$arrayidx452 >> 2] = $62;
    $i$5 = $i$5 + 1 | 0;
   }
   while (1) {
    if (($i$6 | 0) >= (HEAP32[$label_num325 >> 2] | 0)) {
     $retval$0 = 0;
     break L77;
    }
    $arrayidx473 = $labelInfo + 12 + ($i$6 << 2) | 0;
    $mul475 = $i$6 << 1;
    $arrayidx477 = $labelInfo + 655376 + ($mul475 << 3) | 0;
    HEAPF64[$arrayidx477 >> 3] = +HEAPF64[$arrayidx477 >> 3] / +(HEAP32[$arrayidx473 >> 2] | 0);
    $arrayidx482 = $labelInfo + 655376 + (($mul475 | 1) << 3) | 0;
    HEAPF64[$arrayidx482 >> 3] = +HEAPF64[$arrayidx482 >> 3] / +(HEAP32[$arrayidx473 >> 2] | 0);
    $i$6 = $i$6 + 1 | 0;
   }
  }
 } while (0);
 STACKTOP = sp;
 return $retval$0 | 0;
}

function _arLabelingSubEBR3CA($image, $xsize, $ysize, $labelingThresh, $labelInfo) {
 $image = $image | 0;
 $xsize = $xsize | 0;
 $ysize = $ysize | 0;
 $labelingThresh = $labelingThresh | 0;
 $labelInfo = $labelInfo | 0;
 var $$sink = 0, $0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $16 = 0, $17 = 0, $21 = 0, $22 = 0, $23 = 0, $26 = 0, $27 = 0, $39 = 0, $40 = 0, $45 = 0, $47 = 0, $5 = 0, $56 = 0, $58 = 0, $6 = 0, $60 = 0, $62 = 0, $add = 0, $add$ptr135 = 0, $add273 = 0, $add278$sink = 0, $arraydecay = 0, $arrayidx124 = 0, $arrayidx127 = 0, $arrayidx130 = 0, $arrayidx191 = 0, $arrayidx194 = 0, $arrayidx197 = 0, $arrayidx205 = 0, $arrayidx208 = 0, $arrayidx211 = 0, $arrayidx214 = 0, $arrayidx236 = 0, $arrayidx239 = 0, $arrayidx242 = 0, $arrayidx245 = 0, $arrayidx265 = 0, $arrayidx268 = 0, $arrayidx271 = 0, $arrayidx327 = 0, $arrayidx384 = 0, $arrayidx392 = 0, $arrayidx400 = 0, $arrayidx404 = 0, $arrayidx420 = 0, $arrayidx436 = 0, $arrayidx45 = 0, $arrayidx452 = 0, $arrayidx473 = 0, $arrayidx477 = 0, $arrayidx482 = 0, $arrayidx54 = 0, $arrayidx57 = 0, $arrayidx60 = 0, $arrayidx77 = 0, $cmp71 = 0, $cond = 0, $dpnt$0 = 0, $dpnt$1 = 0, $i$0 = 0, $i$1 = 0, $i$2 = 0, $i$3 = 0, $i$4 = 0, $i$5 = 0, $i$6 = 0, $inc282 = 0, $j$0 = 0, $j$1 = 0, $j$2 = 0, $k$0 = 0, $k$1 = 0, $k$2 = 0, $k$3 = 0, $label_num325 = 0, $mul = 0, $mul203 = 0, $mul234 = 0, $mul292 = 0, $mul360 = 0, $mul381 = 0, $mul390 = 0, $mul402 = 0, $mul475 = 0, $pnt$0 = 0, $pnt$1 = 0, $pnt1$0 = 0, $pnt1$1 = 0, $pnt2$0 = 0, $pnt2$1 = 0, $pnt2$2 = 0, $pnt2$3 = 0, $retval$0 = 0, $sub = 0, $sub348 = 0, $sub380 = 0, $sub44 = 0, $sub76 = 0, $sub8 = 0, $sub80 = 0, $vararg_buffer = 0, $wk$0 = 0, $wk$1 = 0, $wk$2 = 0, $wk$3 = 0, $wk$4 = 0, $wk_max$0 = 0, $wk_max$1 = 0, $wk_max$2 = 0, $wk_max$3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $vararg_buffer = sp;
 $0 = HEAP32[$labelInfo >> 2] | 0;
 $sub = $ysize + -1 | 0;
 $i$0 = 0;
 $pnt1$0 = $0;
 $pnt2$0 = $0 + ((Math_imul($sub, $xsize) | 0) << 1) | 0;
 while (1) {
  if (($i$0 | 0) >= ($xsize | 0)) break;
  HEAP16[$pnt2$0 >> 1] = 0;
  HEAP16[$pnt1$0 >> 1] = 0;
  $i$0 = $i$0 + 1 | 0;
  $pnt1$0 = $pnt1$0 + 2 | 0;
  $pnt2$0 = $pnt2$0 + 2 | 0;
 }
 $mul = $labelingThresh * 3 | 0;
 $sub8 = $xsize + -1 | 0;
 $i$1 = 0;
 $pnt1$1 = $0;
 $pnt2$1 = $0 + ($sub8 << 1) | 0;
 while (1) {
  if (($i$1 | 0) >= ($ysize | 0)) break;
  HEAP16[$pnt2$1 >> 1] = 0;
  HEAP16[$pnt1$1 >> 1] = 0;
  $i$1 = $i$1 + 1 | 0;
  $pnt1$1 = $pnt1$1 + ($xsize << 1) | 0;
  $pnt2$1 = $pnt2$1 + ($xsize << 1) | 0;
 }
 $arraydecay = $labelInfo + 1179664 | 0;
 $add = $xsize + 1 | 0;
 $sub44 = 0 - $xsize | 0;
 $dpnt$0 = (HEAP32[$labelInfo + 4 >> 2] | 0) + $add | 0;
 $j$0 = 1;
 $pnt$0 = $image + ($add << 2) | 0;
 $pnt2$2 = $0 + ($add << 1) | 0;
 $wk_max$0 = 0;
 L9 : while (1) {
  if (($j$0 | 0) < ($sub | 0)) {
   $dpnt$1 = $dpnt$0;
   $i$2 = 1;
   $pnt$1 = $pnt$0;
   $pnt2$3 = $pnt2$2;
   $wk_max$1 = $wk_max$0;
  } else {
   label = 56;
   break;
  }
  while (1) {
   if (($i$2 | 0) >= ($sub8 | 0)) break;
   do if (((HEAPU8[$pnt$1 + 1 >> 0] | 0) + (HEAPU8[$pnt$1 >> 0] | 0) + (HEAPU8[$pnt$1 + 2 >> 0] | 0) | 0) > ($mul | 0)) {
    HEAP16[$pnt2$3 >> 1] = 0;
    HEAP8[$dpnt$1 >> 0] = 0;
    $wk_max$3 = $wk_max$1;
   } else {
    HEAP8[$dpnt$1 >> 0] = -1;
    $arrayidx45 = $pnt2$3 + ($sub44 << 1) | 0;
    $5 = HEAP16[$arrayidx45 >> 1] | 0;
    if ($5 << 16 >> 16 > 0) {
     HEAP16[$pnt2$3 >> 1] = $5;
     $6 = ($5 << 16 >> 16) * 7 | 0;
     $arrayidx54 = $labelInfo + 1310736 + ($6 + -7 << 2) | 0;
     HEAP32[$arrayidx54 >> 2] = (HEAP32[$arrayidx54 >> 2] | 0) + 1;
     $arrayidx57 = $labelInfo + 1310736 + ($6 + -6 << 2) | 0;
     HEAP32[$arrayidx57 >> 2] = (HEAP32[$arrayidx57 >> 2] | 0) + $i$2;
     $arrayidx60 = $labelInfo + 1310736 + ($6 + -5 << 2) | 0;
     HEAP32[$arrayidx60 >> 2] = (HEAP32[$arrayidx60 >> 2] | 0) + $j$0;
     HEAP32[$labelInfo + 1310736 + ($6 + -1 << 2) >> 2] = $j$0;
     $wk_max$3 = $wk_max$1;
     break;
    }
    $10 = HEAP16[$arrayidx45 + 2 >> 1] | 0;
    $11 = HEAP16[$arrayidx45 + -2 >> 1] | 0;
    $cmp71 = $11 << 16 >> 16 > 0;
    $sub80 = ($11 << 16 >> 16) + -1 | 0;
    $add$ptr135 = $pnt2$3 + -2 | 0;
    if ($10 << 16 >> 16 <= 0) {
     if ($cmp71) {
      HEAP16[$pnt2$3 >> 1] = $11;
      $mul234 = $sub80 * 7 | 0;
      $arrayidx236 = $labelInfo + 1310736 + ($mul234 << 2) | 0;
      HEAP32[$arrayidx236 >> 2] = (HEAP32[$arrayidx236 >> 2] | 0) + 1;
      $arrayidx239 = $labelInfo + 1310736 + ($mul234 + 1 << 2) | 0;
      HEAP32[$arrayidx239 >> 2] = (HEAP32[$arrayidx239 >> 2] | 0) + $i$2;
      $arrayidx242 = $labelInfo + 1310736 + ($mul234 + 2 << 2) | 0;
      HEAP32[$arrayidx242 >> 2] = (HEAP32[$arrayidx242 >> 2] | 0) + $j$0;
      $arrayidx245 = $labelInfo + 1310736 + ($mul234 + 4 << 2) | 0;
      if ((HEAP32[$arrayidx245 >> 2] | 0) < ($i$2 | 0)) HEAP32[$arrayidx245 >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($mul234 + 6 << 2) >> 2] = $j$0;
      $wk_max$3 = $wk_max$1;
      break;
     }
     $39 = HEAP16[$add$ptr135 >> 1] | 0;
     if ($39 << 16 >> 16 > 0) {
      HEAP16[$pnt2$3 >> 1] = $39;
      $40 = ($39 << 16 >> 16) * 7 | 0;
      $arrayidx265 = $labelInfo + 1310736 + ($40 + -7 << 2) | 0;
      HEAP32[$arrayidx265 >> 2] = (HEAP32[$arrayidx265 >> 2] | 0) + 1;
      $arrayidx268 = $labelInfo + 1310736 + ($40 + -6 << 2) | 0;
      HEAP32[$arrayidx268 >> 2] = (HEAP32[$arrayidx268 >> 2] | 0) + $i$2;
      $arrayidx271 = $labelInfo + 1310736 + ($40 + -5 << 2) | 0;
      HEAP32[$arrayidx271 >> 2] = (HEAP32[$arrayidx271 >> 2] | 0) + $j$0;
      $add273 = $40 + -3 | 0;
      if ((HEAP32[$labelInfo + 1310736 + ($add273 << 2) >> 2] | 0) < ($i$2 | 0)) {
       $$sink = $i$2;
       $add278$sink = $add273;
       $wk_max$2 = $wk_max$1;
      } else {
       $wk_max$3 = $wk_max$1;
       break;
      }
     } else {
      $inc282 = $wk_max$1 + 1 | 0;
      if (($wk_max$1 | 0) > 32767) {
       label = 50;
       break L9;
      }
      HEAP16[$pnt2$3 >> 1] = $inc282;
      HEAP32[$labelInfo + 1179664 + ($wk_max$1 << 2) >> 2] = $inc282 << 16 >> 16;
      $mul292 = $wk_max$1 * 7 | 0;
      HEAP32[$labelInfo + 1310736 + ($mul292 << 2) >> 2] = 1;
      HEAP32[$labelInfo + 1310736 + ($mul292 + 1 << 2) >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($mul292 + 2 << 2) >> 2] = $j$0;
      HEAP32[$labelInfo + 1310736 + ($mul292 + 3 << 2) >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($mul292 + 4 << 2) >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($mul292 + 5 << 2) >> 2] = $j$0;
      $$sink = $j$0;
      $add278$sink = $mul292 + 6 | 0;
      $wk_max$2 = $inc282;
     }
     HEAP32[$labelInfo + 1310736 + ($add278$sink << 2) >> 2] = $$sink;
     $wk_max$3 = $wk_max$2;
     break;
    }
    $sub76 = ($10 << 16 >> 16) + -1 | 0;
    $arrayidx77 = $labelInfo + 1179664 + ($sub76 << 2) | 0;
    if ($cmp71) {
     $12 = HEAP32[$arrayidx77 >> 2] | 0;
     $13 = HEAP32[$labelInfo + 1179664 + ($sub80 << 2) >> 2] | 0;
     L36 : do if (($12 | 0) > ($13 | 0)) {
      HEAP16[$pnt2$3 >> 1] = $13;
      $k$0 = 0;
      $wk$0 = $arraydecay;
      while (1) {
       if (($k$0 | 0) >= ($wk_max$1 | 0)) {
        $16 = $13;
        break L36;
       }
       if ((HEAP32[$wk$0 >> 2] | 0) == ($12 | 0)) HEAP32[$wk$0 >> 2] = $13;
       $k$0 = $k$0 + 1 | 0;
       $wk$0 = $wk$0 + 4 | 0;
      }
     } else {
      HEAP16[$pnt2$3 >> 1] = $12;
      if (($12 | 0) < ($13 | 0)) {
       $k$1 = 0;
       $wk$1 = $arraydecay;
       while (1) {
        if (($k$1 | 0) >= ($wk_max$1 | 0)) {
         $16 = $12;
         break L36;
        }
        if ((HEAP32[$wk$1 >> 2] | 0) == ($13 | 0)) HEAP32[$wk$1 >> 2] = $12;
        $k$1 = $k$1 + 1 | 0;
        $wk$1 = $wk$1 + 4 | 0;
       }
      } else $16 = $12;
     } while (0);
     $17 = ($16 << 16 >> 16) * 7 | 0;
     $arrayidx124 = $labelInfo + 1310736 + ($17 + -7 << 2) | 0;
     HEAP32[$arrayidx124 >> 2] = (HEAP32[$arrayidx124 >> 2] | 0) + 1;
     $arrayidx127 = $labelInfo + 1310736 + ($17 + -6 << 2) | 0;
     HEAP32[$arrayidx127 >> 2] = (HEAP32[$arrayidx127 >> 2] | 0) + $i$2;
     $arrayidx130 = $labelInfo + 1310736 + ($17 + -5 << 2) | 0;
     HEAP32[$arrayidx130 >> 2] = (HEAP32[$arrayidx130 >> 2] | 0) + $j$0;
     HEAP32[$labelInfo + 1310736 + ($17 + -1 << 2) >> 2] = $j$0;
     $wk_max$3 = $wk_max$1;
     break;
    }
    $21 = HEAP16[$add$ptr135 >> 1] | 0;
    if ($21 << 16 >> 16 <= 0) {
     HEAP16[$pnt2$3 >> 1] = $10;
     $mul203 = $sub76 * 7 | 0;
     $arrayidx205 = $labelInfo + 1310736 + ($mul203 << 2) | 0;
     HEAP32[$arrayidx205 >> 2] = (HEAP32[$arrayidx205 >> 2] | 0) + 1;
     $arrayidx208 = $labelInfo + 1310736 + ($mul203 + 1 << 2) | 0;
     HEAP32[$arrayidx208 >> 2] = (HEAP32[$arrayidx208 >> 2] | 0) + $i$2;
     $arrayidx211 = $labelInfo + 1310736 + ($mul203 + 2 << 2) | 0;
     HEAP32[$arrayidx211 >> 2] = (HEAP32[$arrayidx211 >> 2] | 0) + $j$0;
     $arrayidx214 = $labelInfo + 1310736 + ($mul203 + 3 << 2) | 0;
     if ((HEAP32[$arrayidx214 >> 2] | 0) > ($i$2 | 0)) HEAP32[$arrayidx214 >> 2] = $i$2;
     HEAP32[$labelInfo + 1310736 + ($mul203 + 6 << 2) >> 2] = $j$0;
     $wk_max$3 = $wk_max$1;
     break;
    }
    $22 = HEAP32[$arrayidx77 >> 2] | 0;
    $23 = HEAP32[$labelInfo + 1179664 + (($21 << 16 >> 16) + -1 << 2) >> 2] | 0;
    L59 : do if (($22 | 0) > ($23 | 0)) {
     HEAP16[$pnt2$3 >> 1] = $23;
     $k$2 = 0;
     $wk$2 = $arraydecay;
     while (1) {
      if (($k$2 | 0) >= ($wk_max$1 | 0)) {
       $26 = $23;
       break L59;
      }
      if ((HEAP32[$wk$2 >> 2] | 0) == ($22 | 0)) HEAP32[$wk$2 >> 2] = $23;
      $k$2 = $k$2 + 1 | 0;
      $wk$2 = $wk$2 + 4 | 0;
     }
    } else {
     HEAP16[$pnt2$3 >> 1] = $22;
     if (($22 | 0) < ($23 | 0)) {
      $k$3 = 0;
      $wk$3 = $arraydecay;
      while (1) {
       if (($k$3 | 0) >= ($wk_max$1 | 0)) {
        $26 = $22;
        break L59;
       }
       if ((HEAP32[$wk$3 >> 2] | 0) == ($23 | 0)) HEAP32[$wk$3 >> 2] = $22;
       $k$3 = $k$3 + 1 | 0;
       $wk$3 = $wk$3 + 4 | 0;
      }
     } else $26 = $22;
    } while (0);
    $27 = ($26 << 16 >> 16) * 7 | 0;
    $arrayidx191 = $labelInfo + 1310736 + ($27 + -7 << 2) | 0;
    HEAP32[$arrayidx191 >> 2] = (HEAP32[$arrayidx191 >> 2] | 0) + 1;
    $arrayidx194 = $labelInfo + 1310736 + ($27 + -6 << 2) | 0;
    HEAP32[$arrayidx194 >> 2] = (HEAP32[$arrayidx194 >> 2] | 0) + $i$2;
    $arrayidx197 = $labelInfo + 1310736 + ($27 + -5 << 2) | 0;
    HEAP32[$arrayidx197 >> 2] = (HEAP32[$arrayidx197 >> 2] | 0) + $j$0;
    $wk_max$3 = $wk_max$1;
   } while (0);
   $dpnt$1 = $dpnt$1 + 1 | 0;
   $i$2 = $i$2 + 1 | 0;
   $pnt$1 = $pnt$1 + 4 | 0;
   $pnt2$3 = $pnt2$3 + 2 | 0;
   $wk_max$1 = $wk_max$3;
  }
  $dpnt$0 = $dpnt$1 + 2 | 0;
  $j$0 = $j$0 + 1 | 0;
  $pnt$0 = $pnt$1 + 8 | 0;
  $pnt2$2 = $pnt2$3 + 4 | 0;
  $wk_max$0 = $wk_max$1;
 }
 L77 : do if ((label | 0) == 50) {
  _arLog(3, 3256, $vararg_buffer);
  $retval$0 = -1;
 } else if ((label | 0) == 56) {
  $arrayidx327 = $labelInfo + 12 | 0;
  $i$3 = 1;
  $j$1 = 1;
  $wk$4 = $arraydecay;
  while (1) {
   if (($i$3 | 0) > ($wk_max$0 | 0)) break;
   $45 = HEAP32[$wk$4 >> 2] | 0;
   if (($45 | 0) == ($i$3 | 0)) {
    $cond = $j$1;
    $j$2 = $j$1 + 1 | 0;
   } else {
    $cond = HEAP32[$labelInfo + 1179664 + ($45 + -1 << 2) >> 2] | 0;
    $j$2 = $j$1;
   }
   HEAP32[$wk$4 >> 2] = $cond;
   $i$3 = $i$3 + 1 | 0;
   $j$1 = $j$2;
   $wk$4 = $wk$4 + 4 | 0;
  }
  $label_num325 = $labelInfo + 8 | 0;
  $sub348 = $j$1 + -1 | 0;
  HEAP32[$label_num325 >> 2] = $sub348;
  if (!$sub348) $retval$0 = 0; else {
   _memset($arrayidx327 | 0, 0, $sub348 << 2 | 0) | 0;
   _memset($labelInfo + 655376 | 0, 0, $sub348 << 4 | 0) | 0;
   $47 = $sub348;
   $i$4 = 0;
   while (1) {
    if (($i$4 | 0) >= ($47 | 0)) {
     $i$5 = 0;
     break;
    }
    $mul360 = $i$4 << 2;
    HEAP32[$labelInfo + 131084 + ($mul360 << 2) >> 2] = $xsize;
    HEAP32[$labelInfo + 131084 + (($mul360 | 1) << 2) >> 2] = 0;
    HEAP32[$labelInfo + 131084 + (($mul360 | 2) << 2) >> 2] = $ysize;
    HEAP32[$labelInfo + 131084 + (($mul360 | 3) << 2) >> 2] = 0;
    $47 = HEAP32[$label_num325 >> 2] | 0;
    $i$4 = $i$4 + 1 | 0;
   }
   while (1) {
    if (($i$5 | 0) >= ($wk_max$0 | 0)) {
     $i$6 = 0;
     break;
    }
    $sub380 = (HEAP32[$labelInfo + 1179664 + ($i$5 << 2) >> 2] | 0) + -1 | 0;
    $mul381 = $i$5 * 7 | 0;
    $arrayidx384 = $labelInfo + 12 + ($sub380 << 2) | 0;
    HEAP32[$arrayidx384 >> 2] = (HEAP32[$arrayidx384 >> 2] | 0) + (HEAP32[$labelInfo + 1310736 + ($mul381 << 2) >> 2] | 0);
    $mul390 = $sub380 << 1;
    $arrayidx392 = $labelInfo + 655376 + ($mul390 << 3) | 0;
    HEAPF64[$arrayidx392 >> 3] = +HEAPF64[$arrayidx392 >> 3] + +(HEAP32[$labelInfo + 1310736 + ($mul381 + 1 << 2) >> 2] | 0);
    $arrayidx400 = $labelInfo + 655376 + (($mul390 | 1) << 3) | 0;
    HEAPF64[$arrayidx400 >> 3] = +HEAPF64[$arrayidx400 >> 3] + +(HEAP32[$labelInfo + 1310736 + ($mul381 + 2 << 2) >> 2] | 0);
    $mul402 = $sub380 << 2;
    $arrayidx404 = $labelInfo + 131084 + ($mul402 << 2) | 0;
    $56 = HEAP32[$labelInfo + 1310736 + ($mul381 + 3 << 2) >> 2] | 0;
    if ((HEAP32[$arrayidx404 >> 2] | 0) > ($56 | 0)) HEAP32[$arrayidx404 >> 2] = $56;
    $arrayidx420 = $labelInfo + 131084 + (($mul402 | 1) << 2) | 0;
    $58 = HEAP32[$labelInfo + 1310736 + ($mul381 + 4 << 2) >> 2] | 0;
    if ((HEAP32[$arrayidx420 >> 2] | 0) < ($58 | 0)) HEAP32[$arrayidx420 >> 2] = $58;
    $arrayidx436 = $labelInfo + 131084 + (($mul402 | 2) << 2) | 0;
    $60 = HEAP32[$labelInfo + 1310736 + ($mul381 + 5 << 2) >> 2] | 0;
    if ((HEAP32[$arrayidx436 >> 2] | 0) > ($60 | 0)) HEAP32[$arrayidx436 >> 2] = $60;
    $arrayidx452 = $labelInfo + 131084 + (($mul402 | 3) << 2) | 0;
    $62 = HEAP32[$labelInfo + 1310736 + ($mul381 + 6 << 2) >> 2] | 0;
    if ((HEAP32[$arrayidx452 >> 2] | 0) < ($62 | 0)) HEAP32[$arrayidx452 >> 2] = $62;
    $i$5 = $i$5 + 1 | 0;
   }
   while (1) {
    if (($i$6 | 0) >= (HEAP32[$label_num325 >> 2] | 0)) {
     $retval$0 = 0;
     break L77;
    }
    $arrayidx473 = $labelInfo + 12 + ($i$6 << 2) | 0;
    $mul475 = $i$6 << 1;
    $arrayidx477 = $labelInfo + 655376 + ($mul475 << 3) | 0;
    HEAPF64[$arrayidx477 >> 3] = +HEAPF64[$arrayidx477 >> 3] / +(HEAP32[$arrayidx473 >> 2] | 0);
    $arrayidx482 = $labelInfo + 655376 + (($mul475 | 1) << 3) | 0;
    HEAPF64[$arrayidx482 >> 3] = +HEAPF64[$arrayidx482 >> 3] / +(HEAP32[$arrayidx473 >> 2] | 0);
    $i$6 = $i$6 + 1 | 0;
   }
  }
 } while (0);
 STACKTOP = sp;
 return $retval$0 | 0;
}

function _arLabelingSubEBIC($image, $xsize, $ysize, $labelingThresh, $labelInfo) {
 $image = $image | 0;
 $xsize = $xsize | 0;
 $ysize = $ysize | 0;
 $labelingThresh = $labelingThresh | 0;
 $labelInfo = $labelInfo | 0;
 var $$sink = 0, $0 = 0, $10 = 0, $11 = 0, $14 = 0, $15 = 0, $19 = 0, $20 = 0, $21 = 0, $24 = 0, $25 = 0, $3 = 0, $37 = 0, $38 = 0, $4 = 0, $43 = 0, $45 = 0, $54 = 0, $56 = 0, $58 = 0, $60 = 0, $8 = 0, $9 = 0, $add = 0, $add$ptr129 = 0, $add267 = 0, $add272$sink = 0, $arraydecay = 0, $arrayidx118 = 0, $arrayidx121 = 0, $arrayidx124 = 0, $arrayidx185 = 0, $arrayidx188 = 0, $arrayidx191 = 0, $arrayidx199 = 0, $arrayidx202 = 0, $arrayidx205 = 0, $arrayidx208 = 0, $arrayidx230 = 0, $arrayidx233 = 0, $arrayidx236 = 0, $arrayidx239 = 0, $arrayidx259 = 0, $arrayidx262 = 0, $arrayidx265 = 0, $arrayidx323 = 0, $arrayidx380 = 0, $arrayidx388 = 0, $arrayidx39 = 0, $arrayidx396 = 0, $arrayidx400 = 0, $arrayidx416 = 0, $arrayidx432 = 0, $arrayidx448 = 0, $arrayidx469 = 0, $arrayidx473 = 0, $arrayidx479 = 0, $arrayidx48 = 0, $arrayidx51 = 0, $arrayidx54 = 0, $arrayidx71 = 0, $cmp65 = 0, $cond = 0, $div = 0, $div1 = 0, $dpnt$0 = 0, $dpnt$1 = 0, $i$0 = 0, $i$1 = 0, $i$2 = 0, $i$3 = 0, $i$4 = 0, $i$5 = 0, $i$6 = 0, $inc276 = 0, $j$0 = 0, $j$1 = 0, $j$2 = 0, $k$0 = 0, $k$1 = 0, $k$2 = 0, $k$3 = 0, $label_num321 = 0, $mul197 = 0, $mul228 = 0, $mul286 = 0, $mul356 = 0, $mul377 = 0, $mul386 = 0, $mul398 = 0, $mul471 = 0, $pnt$0 = 0, $pnt$1 = 0, $pnt1$0 = 0, $pnt1$1 = 0, $pnt2$0 = 0, $pnt2$1 = 0, $pnt2$2 = 0, $pnt2$3 = 0, $retval$0 = 0, $sub = 0, $sub344 = 0, $sub376 = 0, $sub38 = 0, $sub70 = 0, $sub74 = 0, $sub8 = 0, $vararg_buffer = 0, $wk$0 = 0, $wk$1 = 0, $wk$2 = 0, $wk$3 = 0, $wk$4 = 0, $wk_max$0 = 0, $wk_max$1 = 0, $wk_max$2 = 0, $wk_max$3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $vararg_buffer = sp;
 $div = ($xsize | 0) / 2 | 0;
 $div1 = ($ysize | 0) / 2 | 0;
 $0 = HEAP32[$labelInfo >> 2] | 0;
 $sub = $div1 + -1 | 0;
 $i$0 = 0;
 $pnt1$0 = $0;
 $pnt2$0 = $0 + ((Math_imul($sub, $div) | 0) << 1) | 0;
 while (1) {
  if (($i$0 | 0) >= ($div | 0)) break;
  HEAP16[$pnt2$0 >> 1] = 0;
  HEAP16[$pnt1$0 >> 1] = 0;
  $i$0 = $i$0 + 1 | 0;
  $pnt1$0 = $pnt1$0 + 2 | 0;
  $pnt2$0 = $pnt2$0 + 2 | 0;
 }
 $sub8 = $div + -1 | 0;
 $i$1 = 0;
 $pnt1$1 = $0;
 $pnt2$1 = $0 + ($sub8 << 1) | 0;
 while (1) {
  if (($i$1 | 0) >= ($div1 | 0)) break;
  HEAP16[$pnt2$1 >> 1] = 0;
  HEAP16[$pnt1$1 >> 1] = 0;
  $i$1 = $i$1 + 1 | 0;
  $pnt1$1 = $pnt1$1 + ($div << 1) | 0;
  $pnt2$1 = $pnt2$1 + ($div << 1) | 0;
 }
 $arraydecay = $labelInfo + 1179664 | 0;
 $add = $div + 1 | 0;
 $sub38 = 0 - $div | 0;
 $dpnt$0 = (HEAP32[$labelInfo + 4 >> 2] | 0) + $add | 0;
 $j$0 = 1;
 $pnt$0 = $image + (($xsize << 1) + 2) | 0;
 $pnt2$2 = $0 + ($add << 1) | 0;
 $wk_max$0 = 0;
 L9 : while (1) {
  if (($j$0 | 0) < ($sub | 0)) {
   $dpnt$1 = $dpnt$0;
   $i$2 = 1;
   $pnt$1 = $pnt$0;
   $pnt2$3 = $pnt2$2;
   $wk_max$1 = $wk_max$0;
  } else {
   label = 56;
   break;
  }
  while (1) {
   if (($i$2 | 0) >= ($sub8 | 0)) break;
   do if ((HEAPU8[$pnt$1 >> 0] | 0 | 0) > ($labelingThresh | 0)) {
    HEAP16[$pnt2$3 >> 1] = 0;
    HEAP8[$dpnt$1 >> 0] = 0;
    $wk_max$3 = $wk_max$1;
   } else {
    HEAP8[$dpnt$1 >> 0] = -1;
    $arrayidx39 = $pnt2$3 + ($sub38 << 1) | 0;
    $3 = HEAP16[$arrayidx39 >> 1] | 0;
    if ($3 << 16 >> 16 > 0) {
     HEAP16[$pnt2$3 >> 1] = $3;
     $4 = ($3 << 16 >> 16) * 7 | 0;
     $arrayidx48 = $labelInfo + 1310736 + ($4 + -7 << 2) | 0;
     HEAP32[$arrayidx48 >> 2] = (HEAP32[$arrayidx48 >> 2] | 0) + 1;
     $arrayidx51 = $labelInfo + 1310736 + ($4 + -6 << 2) | 0;
     HEAP32[$arrayidx51 >> 2] = (HEAP32[$arrayidx51 >> 2] | 0) + $i$2;
     $arrayidx54 = $labelInfo + 1310736 + ($4 + -5 << 2) | 0;
     HEAP32[$arrayidx54 >> 2] = (HEAP32[$arrayidx54 >> 2] | 0) + $j$0;
     HEAP32[$labelInfo + 1310736 + ($4 + -1 << 2) >> 2] = $j$0;
     $wk_max$3 = $wk_max$1;
     break;
    }
    $8 = HEAP16[$arrayidx39 + 2 >> 1] | 0;
    $9 = HEAP16[$arrayidx39 + -2 >> 1] | 0;
    $cmp65 = $9 << 16 >> 16 > 0;
    $add$ptr129 = $pnt2$3 + -2 | 0;
    $sub74 = ($9 << 16 >> 16) + -1 | 0;
    if ($8 << 16 >> 16 <= 0) {
     if ($cmp65) {
      HEAP16[$pnt2$3 >> 1] = $9;
      $mul228 = $sub74 * 7 | 0;
      $arrayidx230 = $labelInfo + 1310736 + ($mul228 << 2) | 0;
      HEAP32[$arrayidx230 >> 2] = (HEAP32[$arrayidx230 >> 2] | 0) + 1;
      $arrayidx233 = $labelInfo + 1310736 + ($mul228 + 1 << 2) | 0;
      HEAP32[$arrayidx233 >> 2] = (HEAP32[$arrayidx233 >> 2] | 0) + $i$2;
      $arrayidx236 = $labelInfo + 1310736 + ($mul228 + 2 << 2) | 0;
      HEAP32[$arrayidx236 >> 2] = (HEAP32[$arrayidx236 >> 2] | 0) + $j$0;
      $arrayidx239 = $labelInfo + 1310736 + ($mul228 + 4 << 2) | 0;
      if ((HEAP32[$arrayidx239 >> 2] | 0) < ($i$2 | 0)) HEAP32[$arrayidx239 >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($mul228 + 6 << 2) >> 2] = $j$0;
      $wk_max$3 = $wk_max$1;
      break;
     }
     $37 = HEAP16[$add$ptr129 >> 1] | 0;
     if ($37 << 16 >> 16 > 0) {
      HEAP16[$pnt2$3 >> 1] = $37;
      $38 = ($37 << 16 >> 16) * 7 | 0;
      $arrayidx259 = $labelInfo + 1310736 + ($38 + -7 << 2) | 0;
      HEAP32[$arrayidx259 >> 2] = (HEAP32[$arrayidx259 >> 2] | 0) + 1;
      $arrayidx262 = $labelInfo + 1310736 + ($38 + -6 << 2) | 0;
      HEAP32[$arrayidx262 >> 2] = (HEAP32[$arrayidx262 >> 2] | 0) + $i$2;
      $arrayidx265 = $labelInfo + 1310736 + ($38 + -5 << 2) | 0;
      HEAP32[$arrayidx265 >> 2] = (HEAP32[$arrayidx265 >> 2] | 0) + $j$0;
      $add267 = $38 + -3 | 0;
      if ((HEAP32[$labelInfo + 1310736 + ($add267 << 2) >> 2] | 0) < ($i$2 | 0)) {
       $$sink = $i$2;
       $add272$sink = $add267;
       $wk_max$2 = $wk_max$1;
      } else {
       $wk_max$3 = $wk_max$1;
       break;
      }
     } else {
      $inc276 = $wk_max$1 + 1 | 0;
      if (($wk_max$1 | 0) > 32767) {
       label = 50;
       break L9;
      }
      HEAP16[$pnt2$3 >> 1] = $inc276;
      HEAP32[$labelInfo + 1179664 + ($wk_max$1 << 2) >> 2] = $inc276 << 16 >> 16;
      $mul286 = $wk_max$1 * 7 | 0;
      HEAP32[$labelInfo + 1310736 + ($mul286 << 2) >> 2] = 1;
      HEAP32[$labelInfo + 1310736 + ($mul286 + 1 << 2) >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($mul286 + 2 << 2) >> 2] = $j$0;
      HEAP32[$labelInfo + 1310736 + ($mul286 + 3 << 2) >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($mul286 + 4 << 2) >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($mul286 + 5 << 2) >> 2] = $j$0;
      $$sink = $j$0;
      $add272$sink = $mul286 + 6 | 0;
      $wk_max$2 = $inc276;
     }
     HEAP32[$labelInfo + 1310736 + ($add272$sink << 2) >> 2] = $$sink;
     $wk_max$3 = $wk_max$2;
     break;
    }
    $sub70 = ($8 << 16 >> 16) + -1 | 0;
    $arrayidx71 = $labelInfo + 1179664 + ($sub70 << 2) | 0;
    if ($cmp65) {
     $10 = HEAP32[$arrayidx71 >> 2] | 0;
     $11 = HEAP32[$labelInfo + 1179664 + ($sub74 << 2) >> 2] | 0;
     L36 : do if (($10 | 0) > ($11 | 0)) {
      HEAP16[$pnt2$3 >> 1] = $11;
      $k$0 = 0;
      $wk$0 = $arraydecay;
      while (1) {
       if (($k$0 | 0) >= ($wk_max$1 | 0)) {
        $14 = $11;
        break L36;
       }
       if ((HEAP32[$wk$0 >> 2] | 0) == ($10 | 0)) HEAP32[$wk$0 >> 2] = $11;
       $k$0 = $k$0 + 1 | 0;
       $wk$0 = $wk$0 + 4 | 0;
      }
     } else {
      HEAP16[$pnt2$3 >> 1] = $10;
      if (($10 | 0) < ($11 | 0)) {
       $k$1 = 0;
       $wk$1 = $arraydecay;
       while (1) {
        if (($k$1 | 0) >= ($wk_max$1 | 0)) {
         $14 = $10;
         break L36;
        }
        if ((HEAP32[$wk$1 >> 2] | 0) == ($11 | 0)) HEAP32[$wk$1 >> 2] = $10;
        $k$1 = $k$1 + 1 | 0;
        $wk$1 = $wk$1 + 4 | 0;
       }
      } else $14 = $10;
     } while (0);
     $15 = ($14 << 16 >> 16) * 7 | 0;
     $arrayidx118 = $labelInfo + 1310736 + ($15 + -7 << 2) | 0;
     HEAP32[$arrayidx118 >> 2] = (HEAP32[$arrayidx118 >> 2] | 0) + 1;
     $arrayidx121 = $labelInfo + 1310736 + ($15 + -6 << 2) | 0;
     HEAP32[$arrayidx121 >> 2] = (HEAP32[$arrayidx121 >> 2] | 0) + $i$2;
     $arrayidx124 = $labelInfo + 1310736 + ($15 + -5 << 2) | 0;
     HEAP32[$arrayidx124 >> 2] = (HEAP32[$arrayidx124 >> 2] | 0) + $j$0;
     HEAP32[$labelInfo + 1310736 + ($15 + -1 << 2) >> 2] = $j$0;
     $wk_max$3 = $wk_max$1;
     break;
    }
    $19 = HEAP16[$add$ptr129 >> 1] | 0;
    if ($19 << 16 >> 16 <= 0) {
     HEAP16[$pnt2$3 >> 1] = $8;
     $mul197 = $sub70 * 7 | 0;
     $arrayidx199 = $labelInfo + 1310736 + ($mul197 << 2) | 0;
     HEAP32[$arrayidx199 >> 2] = (HEAP32[$arrayidx199 >> 2] | 0) + 1;
     $arrayidx202 = $labelInfo + 1310736 + ($mul197 + 1 << 2) | 0;
     HEAP32[$arrayidx202 >> 2] = (HEAP32[$arrayidx202 >> 2] | 0) + $i$2;
     $arrayidx205 = $labelInfo + 1310736 + ($mul197 + 2 << 2) | 0;
     HEAP32[$arrayidx205 >> 2] = (HEAP32[$arrayidx205 >> 2] | 0) + $j$0;
     $arrayidx208 = $labelInfo + 1310736 + ($mul197 + 3 << 2) | 0;
     if ((HEAP32[$arrayidx208 >> 2] | 0) > ($i$2 | 0)) HEAP32[$arrayidx208 >> 2] = $i$2;
     HEAP32[$labelInfo + 1310736 + ($mul197 + 6 << 2) >> 2] = $j$0;
     $wk_max$3 = $wk_max$1;
     break;
    }
    $20 = HEAP32[$arrayidx71 >> 2] | 0;
    $21 = HEAP32[$labelInfo + 1179664 + (($19 << 16 >> 16) + -1 << 2) >> 2] | 0;
    L59 : do if (($20 | 0) > ($21 | 0)) {
     HEAP16[$pnt2$3 >> 1] = $21;
     $k$2 = 0;
     $wk$2 = $arraydecay;
     while (1) {
      if (($k$2 | 0) >= ($wk_max$1 | 0)) {
       $24 = $21;
       break L59;
      }
      if ((HEAP32[$wk$2 >> 2] | 0) == ($20 | 0)) HEAP32[$wk$2 >> 2] = $21;
      $k$2 = $k$2 + 1 | 0;
      $wk$2 = $wk$2 + 4 | 0;
     }
    } else {
     HEAP16[$pnt2$3 >> 1] = $20;
     if (($20 | 0) < ($21 | 0)) {
      $k$3 = 0;
      $wk$3 = $arraydecay;
      while (1) {
       if (($k$3 | 0) >= ($wk_max$1 | 0)) {
        $24 = $20;
        break L59;
       }
       if ((HEAP32[$wk$3 >> 2] | 0) == ($21 | 0)) HEAP32[$wk$3 >> 2] = $20;
       $k$3 = $k$3 + 1 | 0;
       $wk$3 = $wk$3 + 4 | 0;
      }
     } else $24 = $20;
    } while (0);
    $25 = ($24 << 16 >> 16) * 7 | 0;
    $arrayidx185 = $labelInfo + 1310736 + ($25 + -7 << 2) | 0;
    HEAP32[$arrayidx185 >> 2] = (HEAP32[$arrayidx185 >> 2] | 0) + 1;
    $arrayidx188 = $labelInfo + 1310736 + ($25 + -6 << 2) | 0;
    HEAP32[$arrayidx188 >> 2] = (HEAP32[$arrayidx188 >> 2] | 0) + $i$2;
    $arrayidx191 = $labelInfo + 1310736 + ($25 + -5 << 2) | 0;
    HEAP32[$arrayidx191 >> 2] = (HEAP32[$arrayidx191 >> 2] | 0) + $j$0;
    $wk_max$3 = $wk_max$1;
   } while (0);
   $dpnt$1 = $dpnt$1 + 1 | 0;
   $i$2 = $i$2 + 1 | 0;
   $pnt$1 = $pnt$1 + 2 | 0;
   $pnt2$3 = $pnt2$3 + 2 | 0;
   $wk_max$1 = $wk_max$3;
  }
  $dpnt$0 = $dpnt$1 + 2 | 0;
  $j$0 = $j$0 + 1 | 0;
  $pnt$0 = $pnt$1 + $xsize + 4 | 0;
  $pnt2$2 = $pnt2$3 + 4 | 0;
  $wk_max$0 = $wk_max$1;
 }
 L77 : do if ((label | 0) == 50) {
  _arLog(3, 3256, $vararg_buffer);
  $retval$0 = -1;
 } else if ((label | 0) == 56) {
  $arrayidx323 = $labelInfo + 12 | 0;
  $i$3 = 1;
  $j$1 = 1;
  $wk$4 = $arraydecay;
  while (1) {
   if (($i$3 | 0) > ($wk_max$0 | 0)) break;
   $43 = HEAP32[$wk$4 >> 2] | 0;
   if (($43 | 0) == ($i$3 | 0)) {
    $cond = $j$1;
    $j$2 = $j$1 + 1 | 0;
   } else {
    $cond = HEAP32[$labelInfo + 1179664 + ($43 + -1 << 2) >> 2] | 0;
    $j$2 = $j$1;
   }
   HEAP32[$wk$4 >> 2] = $cond;
   $i$3 = $i$3 + 1 | 0;
   $j$1 = $j$2;
   $wk$4 = $wk$4 + 4 | 0;
  }
  $label_num321 = $labelInfo + 8 | 0;
  $sub344 = $j$1 + -1 | 0;
  HEAP32[$label_num321 >> 2] = $sub344;
  if (!$sub344) $retval$0 = 0; else {
   _memset($arrayidx323 | 0, 0, $sub344 << 2 | 0) | 0;
   _memset($labelInfo + 655376 | 0, 0, $sub344 << 4 | 0) | 0;
   $45 = $sub344;
   $i$4 = 0;
   while (1) {
    if (($i$4 | 0) >= ($45 | 0)) {
     $i$5 = 0;
     break;
    }
    $mul356 = $i$4 << 2;
    HEAP32[$labelInfo + 131084 + ($mul356 << 2) >> 2] = $div;
    HEAP32[$labelInfo + 131084 + (($mul356 | 1) << 2) >> 2] = 0;
    HEAP32[$labelInfo + 131084 + (($mul356 | 2) << 2) >> 2] = $div1;
    HEAP32[$labelInfo + 131084 + (($mul356 | 3) << 2) >> 2] = 0;
    $45 = HEAP32[$label_num321 >> 2] | 0;
    $i$4 = $i$4 + 1 | 0;
   }
   while (1) {
    if (($i$5 | 0) >= ($wk_max$0 | 0)) {
     $i$6 = 0;
     break;
    }
    $sub376 = (HEAP32[$labelInfo + 1179664 + ($i$5 << 2) >> 2] | 0) + -1 | 0;
    $mul377 = $i$5 * 7 | 0;
    $arrayidx380 = $labelInfo + 12 + ($sub376 << 2) | 0;
    HEAP32[$arrayidx380 >> 2] = (HEAP32[$arrayidx380 >> 2] | 0) + (HEAP32[$labelInfo + 1310736 + ($mul377 << 2) >> 2] | 0);
    $mul386 = $sub376 << 1;
    $arrayidx388 = $labelInfo + 655376 + ($mul386 << 3) | 0;
    HEAPF64[$arrayidx388 >> 3] = +HEAPF64[$arrayidx388 >> 3] + +(HEAP32[$labelInfo + 1310736 + ($mul377 + 1 << 2) >> 2] | 0);
    $arrayidx396 = $labelInfo + 655376 + (($mul386 | 1) << 3) | 0;
    HEAPF64[$arrayidx396 >> 3] = +HEAPF64[$arrayidx396 >> 3] + +(HEAP32[$labelInfo + 1310736 + ($mul377 + 2 << 2) >> 2] | 0);
    $mul398 = $sub376 << 2;
    $arrayidx400 = $labelInfo + 131084 + ($mul398 << 2) | 0;
    $54 = HEAP32[$labelInfo + 1310736 + ($mul377 + 3 << 2) >> 2] | 0;
    if ((HEAP32[$arrayidx400 >> 2] | 0) > ($54 | 0)) HEAP32[$arrayidx400 >> 2] = $54;
    $arrayidx416 = $labelInfo + 131084 + (($mul398 | 1) << 2) | 0;
    $56 = HEAP32[$labelInfo + 1310736 + ($mul377 + 4 << 2) >> 2] | 0;
    if ((HEAP32[$arrayidx416 >> 2] | 0) < ($56 | 0)) HEAP32[$arrayidx416 >> 2] = $56;
    $arrayidx432 = $labelInfo + 131084 + (($mul398 | 2) << 2) | 0;
    $58 = HEAP32[$labelInfo + 1310736 + ($mul377 + 5 << 2) >> 2] | 0;
    if ((HEAP32[$arrayidx432 >> 2] | 0) > ($58 | 0)) HEAP32[$arrayidx432 >> 2] = $58;
    $arrayidx448 = $labelInfo + 131084 + (($mul398 | 3) << 2) | 0;
    $60 = HEAP32[$labelInfo + 1310736 + ($mul377 + 6 << 2) >> 2] | 0;
    if ((HEAP32[$arrayidx448 >> 2] | 0) < ($60 | 0)) HEAP32[$arrayidx448 >> 2] = $60;
    $i$5 = $i$5 + 1 | 0;
   }
   while (1) {
    if (($i$6 | 0) >= (HEAP32[$label_num321 >> 2] | 0)) {
     $retval$0 = 0;
     break L77;
    }
    $arrayidx469 = $labelInfo + 12 + ($i$6 << 2) | 0;
    $mul471 = $i$6 << 1;
    $arrayidx473 = $labelInfo + 655376 + ($mul471 << 3) | 0;
    HEAPF64[$arrayidx473 >> 3] = +HEAPF64[$arrayidx473 >> 3] / +(HEAP32[$arrayidx469 >> 2] | 0);
    $arrayidx479 = $labelInfo + 655376 + (($mul471 | 1) << 3) | 0;
    HEAPF64[$arrayidx479 >> 3] = +HEAPF64[$arrayidx479 >> 3] / +(HEAP32[$arrayidx469 >> 2] | 0);
    $i$6 = $i$6 + 1 | 0;
   }
  }
 } while (0);
 STACKTOP = sp;
 return $retval$0 | 0;
}
function _arLabelingSubEWIC($image, $xsize, $ysize, $labelingThresh, $labelInfo) {
 $image = $image | 0;
 $xsize = $xsize | 0;
 $ysize = $ysize | 0;
 $labelingThresh = $labelingThresh | 0;
 $labelInfo = $labelInfo | 0;
 var $$sink = 0, $0 = 0, $10 = 0, $11 = 0, $14 = 0, $15 = 0, $19 = 0, $20 = 0, $21 = 0, $24 = 0, $25 = 0, $3 = 0, $37 = 0, $38 = 0, $4 = 0, $43 = 0, $45 = 0, $54 = 0, $56 = 0, $58 = 0, $60 = 0, $8 = 0, $9 = 0, $add = 0, $add$ptr129 = 0, $add267 = 0, $add272$sink = 0, $arraydecay = 0, $arrayidx118 = 0, $arrayidx121 = 0, $arrayidx124 = 0, $arrayidx185 = 0, $arrayidx188 = 0, $arrayidx191 = 0, $arrayidx199 = 0, $arrayidx202 = 0, $arrayidx205 = 0, $arrayidx208 = 0, $arrayidx230 = 0, $arrayidx233 = 0, $arrayidx236 = 0, $arrayidx239 = 0, $arrayidx259 = 0, $arrayidx262 = 0, $arrayidx265 = 0, $arrayidx323 = 0, $arrayidx380 = 0, $arrayidx388 = 0, $arrayidx39 = 0, $arrayidx396 = 0, $arrayidx400 = 0, $arrayidx416 = 0, $arrayidx432 = 0, $arrayidx448 = 0, $arrayidx469 = 0, $arrayidx473 = 0, $arrayidx479 = 0, $arrayidx48 = 0, $arrayidx51 = 0, $arrayidx54 = 0, $arrayidx71 = 0, $cmp65 = 0, $cond = 0, $div = 0, $div1 = 0, $dpnt$0 = 0, $dpnt$1 = 0, $i$0 = 0, $i$1 = 0, $i$2 = 0, $i$3 = 0, $i$4 = 0, $i$5 = 0, $i$6 = 0, $inc276 = 0, $j$0 = 0, $j$1 = 0, $j$2 = 0, $k$0 = 0, $k$1 = 0, $k$2 = 0, $k$3 = 0, $label_num321 = 0, $mul197 = 0, $mul228 = 0, $mul286 = 0, $mul356 = 0, $mul377 = 0, $mul386 = 0, $mul398 = 0, $mul471 = 0, $pnt$0 = 0, $pnt$1 = 0, $pnt1$0 = 0, $pnt1$1 = 0, $pnt2$0 = 0, $pnt2$1 = 0, $pnt2$2 = 0, $pnt2$3 = 0, $retval$0 = 0, $sub = 0, $sub344 = 0, $sub376 = 0, $sub38 = 0, $sub70 = 0, $sub74 = 0, $sub8 = 0, $vararg_buffer = 0, $wk$0 = 0, $wk$1 = 0, $wk$2 = 0, $wk$3 = 0, $wk$4 = 0, $wk_max$0 = 0, $wk_max$1 = 0, $wk_max$2 = 0, $wk_max$3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $vararg_buffer = sp;
 $div = ($xsize | 0) / 2 | 0;
 $div1 = ($ysize | 0) / 2 | 0;
 $0 = HEAP32[$labelInfo >> 2] | 0;
 $sub = $div1 + -1 | 0;
 $i$0 = 0;
 $pnt1$0 = $0;
 $pnt2$0 = $0 + ((Math_imul($sub, $div) | 0) << 1) | 0;
 while (1) {
  if (($i$0 | 0) >= ($div | 0)) break;
  HEAP16[$pnt2$0 >> 1] = 0;
  HEAP16[$pnt1$0 >> 1] = 0;
  $i$0 = $i$0 + 1 | 0;
  $pnt1$0 = $pnt1$0 + 2 | 0;
  $pnt2$0 = $pnt2$0 + 2 | 0;
 }
 $sub8 = $div + -1 | 0;
 $i$1 = 0;
 $pnt1$1 = $0;
 $pnt2$1 = $0 + ($sub8 << 1) | 0;
 while (1) {
  if (($i$1 | 0) >= ($div1 | 0)) break;
  HEAP16[$pnt2$1 >> 1] = 0;
  HEAP16[$pnt1$1 >> 1] = 0;
  $i$1 = $i$1 + 1 | 0;
  $pnt1$1 = $pnt1$1 + ($div << 1) | 0;
  $pnt2$1 = $pnt2$1 + ($div << 1) | 0;
 }
 $arraydecay = $labelInfo + 1179664 | 0;
 $add = $div + 1 | 0;
 $sub38 = 0 - $div | 0;
 $dpnt$0 = (HEAP32[$labelInfo + 4 >> 2] | 0) + $add | 0;
 $j$0 = 1;
 $pnt$0 = $image + (($xsize << 1) + 2) | 0;
 $pnt2$2 = $0 + ($add << 1) | 0;
 $wk_max$0 = 0;
 L9 : while (1) {
  if (($j$0 | 0) < ($sub | 0)) {
   $dpnt$1 = $dpnt$0;
   $i$2 = 1;
   $pnt$1 = $pnt$0;
   $pnt2$3 = $pnt2$2;
   $wk_max$1 = $wk_max$0;
  } else {
   label = 56;
   break;
  }
  while (1) {
   if (($i$2 | 0) >= ($sub8 | 0)) break;
   do if ((HEAPU8[$pnt$1 >> 0] | 0 | 0) > ($labelingThresh | 0)) {
    HEAP8[$dpnt$1 >> 0] = -1;
    $arrayidx39 = $pnt2$3 + ($sub38 << 1) | 0;
    $3 = HEAP16[$arrayidx39 >> 1] | 0;
    if ($3 << 16 >> 16 > 0) {
     HEAP16[$pnt2$3 >> 1] = $3;
     $4 = ($3 << 16 >> 16) * 7 | 0;
     $arrayidx48 = $labelInfo + 1310736 + ($4 + -7 << 2) | 0;
     HEAP32[$arrayidx48 >> 2] = (HEAP32[$arrayidx48 >> 2] | 0) + 1;
     $arrayidx51 = $labelInfo + 1310736 + ($4 + -6 << 2) | 0;
     HEAP32[$arrayidx51 >> 2] = (HEAP32[$arrayidx51 >> 2] | 0) + $i$2;
     $arrayidx54 = $labelInfo + 1310736 + ($4 + -5 << 2) | 0;
     HEAP32[$arrayidx54 >> 2] = (HEAP32[$arrayidx54 >> 2] | 0) + $j$0;
     HEAP32[$labelInfo + 1310736 + ($4 + -1 << 2) >> 2] = $j$0;
     $wk_max$3 = $wk_max$1;
     break;
    }
    $8 = HEAP16[$arrayidx39 + 2 >> 1] | 0;
    $9 = HEAP16[$arrayidx39 + -2 >> 1] | 0;
    $cmp65 = $9 << 16 >> 16 > 0;
    $add$ptr129 = $pnt2$3 + -2 | 0;
    $sub74 = ($9 << 16 >> 16) + -1 | 0;
    if ($8 << 16 >> 16 <= 0) {
     if ($cmp65) {
      HEAP16[$pnt2$3 >> 1] = $9;
      $mul228 = $sub74 * 7 | 0;
      $arrayidx230 = $labelInfo + 1310736 + ($mul228 << 2) | 0;
      HEAP32[$arrayidx230 >> 2] = (HEAP32[$arrayidx230 >> 2] | 0) + 1;
      $arrayidx233 = $labelInfo + 1310736 + ($mul228 + 1 << 2) | 0;
      HEAP32[$arrayidx233 >> 2] = (HEAP32[$arrayidx233 >> 2] | 0) + $i$2;
      $arrayidx236 = $labelInfo + 1310736 + ($mul228 + 2 << 2) | 0;
      HEAP32[$arrayidx236 >> 2] = (HEAP32[$arrayidx236 >> 2] | 0) + $j$0;
      $arrayidx239 = $labelInfo + 1310736 + ($mul228 + 4 << 2) | 0;
      if ((HEAP32[$arrayidx239 >> 2] | 0) < ($i$2 | 0)) HEAP32[$arrayidx239 >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($mul228 + 6 << 2) >> 2] = $j$0;
      $wk_max$3 = $wk_max$1;
      break;
     }
     $37 = HEAP16[$add$ptr129 >> 1] | 0;
     if ($37 << 16 >> 16 > 0) {
      HEAP16[$pnt2$3 >> 1] = $37;
      $38 = ($37 << 16 >> 16) * 7 | 0;
      $arrayidx259 = $labelInfo + 1310736 + ($38 + -7 << 2) | 0;
      HEAP32[$arrayidx259 >> 2] = (HEAP32[$arrayidx259 >> 2] | 0) + 1;
      $arrayidx262 = $labelInfo + 1310736 + ($38 + -6 << 2) | 0;
      HEAP32[$arrayidx262 >> 2] = (HEAP32[$arrayidx262 >> 2] | 0) + $i$2;
      $arrayidx265 = $labelInfo + 1310736 + ($38 + -5 << 2) | 0;
      HEAP32[$arrayidx265 >> 2] = (HEAP32[$arrayidx265 >> 2] | 0) + $j$0;
      $add267 = $38 + -3 | 0;
      if ((HEAP32[$labelInfo + 1310736 + ($add267 << 2) >> 2] | 0) < ($i$2 | 0)) {
       $$sink = $i$2;
       $add272$sink = $add267;
       $wk_max$2 = $wk_max$1;
      } else {
       $wk_max$3 = $wk_max$1;
       break;
      }
     } else {
      $inc276 = $wk_max$1 + 1 | 0;
      if (($wk_max$1 | 0) > 32767) {
       label = 50;
       break L9;
      }
      HEAP16[$pnt2$3 >> 1] = $inc276;
      HEAP32[$labelInfo + 1179664 + ($wk_max$1 << 2) >> 2] = $inc276 << 16 >> 16;
      $mul286 = $wk_max$1 * 7 | 0;
      HEAP32[$labelInfo + 1310736 + ($mul286 << 2) >> 2] = 1;
      HEAP32[$labelInfo + 1310736 + ($mul286 + 1 << 2) >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($mul286 + 2 << 2) >> 2] = $j$0;
      HEAP32[$labelInfo + 1310736 + ($mul286 + 3 << 2) >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($mul286 + 4 << 2) >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($mul286 + 5 << 2) >> 2] = $j$0;
      $$sink = $j$0;
      $add272$sink = $mul286 + 6 | 0;
      $wk_max$2 = $inc276;
     }
     HEAP32[$labelInfo + 1310736 + ($add272$sink << 2) >> 2] = $$sink;
     $wk_max$3 = $wk_max$2;
     break;
    }
    $sub70 = ($8 << 16 >> 16) + -1 | 0;
    $arrayidx71 = $labelInfo + 1179664 + ($sub70 << 2) | 0;
    if ($cmp65) {
     $10 = HEAP32[$arrayidx71 >> 2] | 0;
     $11 = HEAP32[$labelInfo + 1179664 + ($sub74 << 2) >> 2] | 0;
     L35 : do if (($10 | 0) > ($11 | 0)) {
      HEAP16[$pnt2$3 >> 1] = $11;
      $k$0 = 0;
      $wk$0 = $arraydecay;
      while (1) {
       if (($k$0 | 0) >= ($wk_max$1 | 0)) {
        $14 = $11;
        break L35;
       }
       if ((HEAP32[$wk$0 >> 2] | 0) == ($10 | 0)) HEAP32[$wk$0 >> 2] = $11;
       $k$0 = $k$0 + 1 | 0;
       $wk$0 = $wk$0 + 4 | 0;
      }
     } else {
      HEAP16[$pnt2$3 >> 1] = $10;
      if (($10 | 0) < ($11 | 0)) {
       $k$1 = 0;
       $wk$1 = $arraydecay;
       while (1) {
        if (($k$1 | 0) >= ($wk_max$1 | 0)) {
         $14 = $10;
         break L35;
        }
        if ((HEAP32[$wk$1 >> 2] | 0) == ($11 | 0)) HEAP32[$wk$1 >> 2] = $10;
        $k$1 = $k$1 + 1 | 0;
        $wk$1 = $wk$1 + 4 | 0;
       }
      } else $14 = $10;
     } while (0);
     $15 = ($14 << 16 >> 16) * 7 | 0;
     $arrayidx118 = $labelInfo + 1310736 + ($15 + -7 << 2) | 0;
     HEAP32[$arrayidx118 >> 2] = (HEAP32[$arrayidx118 >> 2] | 0) + 1;
     $arrayidx121 = $labelInfo + 1310736 + ($15 + -6 << 2) | 0;
     HEAP32[$arrayidx121 >> 2] = (HEAP32[$arrayidx121 >> 2] | 0) + $i$2;
     $arrayidx124 = $labelInfo + 1310736 + ($15 + -5 << 2) | 0;
     HEAP32[$arrayidx124 >> 2] = (HEAP32[$arrayidx124 >> 2] | 0) + $j$0;
     HEAP32[$labelInfo + 1310736 + ($15 + -1 << 2) >> 2] = $j$0;
     $wk_max$3 = $wk_max$1;
     break;
    }
    $19 = HEAP16[$add$ptr129 >> 1] | 0;
    if ($19 << 16 >> 16 <= 0) {
     HEAP16[$pnt2$3 >> 1] = $8;
     $mul197 = $sub70 * 7 | 0;
     $arrayidx199 = $labelInfo + 1310736 + ($mul197 << 2) | 0;
     HEAP32[$arrayidx199 >> 2] = (HEAP32[$arrayidx199 >> 2] | 0) + 1;
     $arrayidx202 = $labelInfo + 1310736 + ($mul197 + 1 << 2) | 0;
     HEAP32[$arrayidx202 >> 2] = (HEAP32[$arrayidx202 >> 2] | 0) + $i$2;
     $arrayidx205 = $labelInfo + 1310736 + ($mul197 + 2 << 2) | 0;
     HEAP32[$arrayidx205 >> 2] = (HEAP32[$arrayidx205 >> 2] | 0) + $j$0;
     $arrayidx208 = $labelInfo + 1310736 + ($mul197 + 3 << 2) | 0;
     if ((HEAP32[$arrayidx208 >> 2] | 0) > ($i$2 | 0)) HEAP32[$arrayidx208 >> 2] = $i$2;
     HEAP32[$labelInfo + 1310736 + ($mul197 + 6 << 2) >> 2] = $j$0;
     $wk_max$3 = $wk_max$1;
     break;
    }
    $20 = HEAP32[$arrayidx71 >> 2] | 0;
    $21 = HEAP32[$labelInfo + 1179664 + (($19 << 16 >> 16) + -1 << 2) >> 2] | 0;
    L58 : do if (($20 | 0) > ($21 | 0)) {
     HEAP16[$pnt2$3 >> 1] = $21;
     $k$2 = 0;
     $wk$2 = $arraydecay;
     while (1) {
      if (($k$2 | 0) >= ($wk_max$1 | 0)) {
       $24 = $21;
       break L58;
      }
      if ((HEAP32[$wk$2 >> 2] | 0) == ($20 | 0)) HEAP32[$wk$2 >> 2] = $21;
      $k$2 = $k$2 + 1 | 0;
      $wk$2 = $wk$2 + 4 | 0;
     }
    } else {
     HEAP16[$pnt2$3 >> 1] = $20;
     if (($20 | 0) < ($21 | 0)) {
      $k$3 = 0;
      $wk$3 = $arraydecay;
      while (1) {
       if (($k$3 | 0) >= ($wk_max$1 | 0)) {
        $24 = $20;
        break L58;
       }
       if ((HEAP32[$wk$3 >> 2] | 0) == ($21 | 0)) HEAP32[$wk$3 >> 2] = $20;
       $k$3 = $k$3 + 1 | 0;
       $wk$3 = $wk$3 + 4 | 0;
      }
     } else $24 = $20;
    } while (0);
    $25 = ($24 << 16 >> 16) * 7 | 0;
    $arrayidx185 = $labelInfo + 1310736 + ($25 + -7 << 2) | 0;
    HEAP32[$arrayidx185 >> 2] = (HEAP32[$arrayidx185 >> 2] | 0) + 1;
    $arrayidx188 = $labelInfo + 1310736 + ($25 + -6 << 2) | 0;
    HEAP32[$arrayidx188 >> 2] = (HEAP32[$arrayidx188 >> 2] | 0) + $i$2;
    $arrayidx191 = $labelInfo + 1310736 + ($25 + -5 << 2) | 0;
    HEAP32[$arrayidx191 >> 2] = (HEAP32[$arrayidx191 >> 2] | 0) + $j$0;
    $wk_max$3 = $wk_max$1;
   } else {
    HEAP16[$pnt2$3 >> 1] = 0;
    HEAP8[$dpnt$1 >> 0] = 0;
    $wk_max$3 = $wk_max$1;
   } while (0);
   $dpnt$1 = $dpnt$1 + 1 | 0;
   $i$2 = $i$2 + 1 | 0;
   $pnt$1 = $pnt$1 + 2 | 0;
   $pnt2$3 = $pnt2$3 + 2 | 0;
   $wk_max$1 = $wk_max$3;
  }
  $dpnt$0 = $dpnt$1 + 2 | 0;
  $j$0 = $j$0 + 1 | 0;
  $pnt$0 = $pnt$1 + $xsize + 4 | 0;
  $pnt2$2 = $pnt2$3 + 4 | 0;
  $wk_max$0 = $wk_max$1;
 }
 L77 : do if ((label | 0) == 50) {
  _arLog(3, 3256, $vararg_buffer);
  $retval$0 = -1;
 } else if ((label | 0) == 56) {
  $arrayidx323 = $labelInfo + 12 | 0;
  $i$3 = 1;
  $j$1 = 1;
  $wk$4 = $arraydecay;
  while (1) {
   if (($i$3 | 0) > ($wk_max$0 | 0)) break;
   $43 = HEAP32[$wk$4 >> 2] | 0;
   if (($43 | 0) == ($i$3 | 0)) {
    $cond = $j$1;
    $j$2 = $j$1 + 1 | 0;
   } else {
    $cond = HEAP32[$labelInfo + 1179664 + ($43 + -1 << 2) >> 2] | 0;
    $j$2 = $j$1;
   }
   HEAP32[$wk$4 >> 2] = $cond;
   $i$3 = $i$3 + 1 | 0;
   $j$1 = $j$2;
   $wk$4 = $wk$4 + 4 | 0;
  }
  $label_num321 = $labelInfo + 8 | 0;
  $sub344 = $j$1 + -1 | 0;
  HEAP32[$label_num321 >> 2] = $sub344;
  if (!$sub344) $retval$0 = 0; else {
   _memset($arrayidx323 | 0, 0, $sub344 << 2 | 0) | 0;
   _memset($labelInfo + 655376 | 0, 0, $sub344 << 4 | 0) | 0;
   $45 = $sub344;
   $i$4 = 0;
   while (1) {
    if (($i$4 | 0) >= ($45 | 0)) {
     $i$5 = 0;
     break;
    }
    $mul356 = $i$4 << 2;
    HEAP32[$labelInfo + 131084 + ($mul356 << 2) >> 2] = $div;
    HEAP32[$labelInfo + 131084 + (($mul356 | 1) << 2) >> 2] = 0;
    HEAP32[$labelInfo + 131084 + (($mul356 | 2) << 2) >> 2] = $div1;
    HEAP32[$labelInfo + 131084 + (($mul356 | 3) << 2) >> 2] = 0;
    $45 = HEAP32[$label_num321 >> 2] | 0;
    $i$4 = $i$4 + 1 | 0;
   }
   while (1) {
    if (($i$5 | 0) >= ($wk_max$0 | 0)) {
     $i$6 = 0;
     break;
    }
    $sub376 = (HEAP32[$labelInfo + 1179664 + ($i$5 << 2) >> 2] | 0) + -1 | 0;
    $mul377 = $i$5 * 7 | 0;
    $arrayidx380 = $labelInfo + 12 + ($sub376 << 2) | 0;
    HEAP32[$arrayidx380 >> 2] = (HEAP32[$arrayidx380 >> 2] | 0) + (HEAP32[$labelInfo + 1310736 + ($mul377 << 2) >> 2] | 0);
    $mul386 = $sub376 << 1;
    $arrayidx388 = $labelInfo + 655376 + ($mul386 << 3) | 0;
    HEAPF64[$arrayidx388 >> 3] = +HEAPF64[$arrayidx388 >> 3] + +(HEAP32[$labelInfo + 1310736 + ($mul377 + 1 << 2) >> 2] | 0);
    $arrayidx396 = $labelInfo + 655376 + (($mul386 | 1) << 3) | 0;
    HEAPF64[$arrayidx396 >> 3] = +HEAPF64[$arrayidx396 >> 3] + +(HEAP32[$labelInfo + 1310736 + ($mul377 + 2 << 2) >> 2] | 0);
    $mul398 = $sub376 << 2;
    $arrayidx400 = $labelInfo + 131084 + ($mul398 << 2) | 0;
    $54 = HEAP32[$labelInfo + 1310736 + ($mul377 + 3 << 2) >> 2] | 0;
    if ((HEAP32[$arrayidx400 >> 2] | 0) > ($54 | 0)) HEAP32[$arrayidx400 >> 2] = $54;
    $arrayidx416 = $labelInfo + 131084 + (($mul398 | 1) << 2) | 0;
    $56 = HEAP32[$labelInfo + 1310736 + ($mul377 + 4 << 2) >> 2] | 0;
    if ((HEAP32[$arrayidx416 >> 2] | 0) < ($56 | 0)) HEAP32[$arrayidx416 >> 2] = $56;
    $arrayidx432 = $labelInfo + 131084 + (($mul398 | 2) << 2) | 0;
    $58 = HEAP32[$labelInfo + 1310736 + ($mul377 + 5 << 2) >> 2] | 0;
    if ((HEAP32[$arrayidx432 >> 2] | 0) > ($58 | 0)) HEAP32[$arrayidx432 >> 2] = $58;
    $arrayidx448 = $labelInfo + 131084 + (($mul398 | 3) << 2) | 0;
    $60 = HEAP32[$labelInfo + 1310736 + ($mul377 + 6 << 2) >> 2] | 0;
    if ((HEAP32[$arrayidx448 >> 2] | 0) < ($60 | 0)) HEAP32[$arrayidx448 >> 2] = $60;
    $i$5 = $i$5 + 1 | 0;
   }
   while (1) {
    if (($i$6 | 0) >= (HEAP32[$label_num321 >> 2] | 0)) {
     $retval$0 = 0;
     break L77;
    }
    $arrayidx469 = $labelInfo + 12 + ($i$6 << 2) | 0;
    $mul471 = $i$6 << 1;
    $arrayidx473 = $labelInfo + 655376 + ($mul471 << 3) | 0;
    HEAPF64[$arrayidx473 >> 3] = +HEAPF64[$arrayidx473 >> 3] / +(HEAP32[$arrayidx469 >> 2] | 0);
    $arrayidx479 = $labelInfo + 655376 + (($mul471 | 1) << 3) | 0;
    HEAPF64[$arrayidx479 >> 3] = +HEAPF64[$arrayidx479 >> 3] / +(HEAP32[$arrayidx469 >> 2] | 0);
    $i$6 = $i$6 + 1 | 0;
   }
  }
 } while (0);
 STACKTOP = sp;
 return $retval$0 | 0;
}

function _arLabelingSubDWI3CA5551($image, $xsize, $ysize, $labelingThresh, $labelInfo) {
 $image = $image | 0;
 $xsize = $xsize | 0;
 $ysize = $ysize | 0;
 $labelingThresh = $labelingThresh | 0;
 $labelInfo = $labelInfo | 0;
 var $$sink = 0, $0 = 0, $10 = 0, $11 = 0, $14 = 0, $15 = 0, $19 = 0, $20 = 0, $21 = 0, $24 = 0, $25 = 0, $3 = 0, $37 = 0, $38 = 0, $4 = 0, $43 = 0, $45 = 0, $54 = 0, $56 = 0, $58 = 0, $60 = 0, $8 = 0, $9 = 0, $add$ptr143 = 0, $add281 = 0, $add286$sink = 0, $arraydecay = 0, $arrayidx132 = 0, $arrayidx135 = 0, $arrayidx138 = 0, $arrayidx199 = 0, $arrayidx202 = 0, $arrayidx205 = 0, $arrayidx213 = 0, $arrayidx216 = 0, $arrayidx219 = 0, $arrayidx222 = 0, $arrayidx244 = 0, $arrayidx247 = 0, $arrayidx250 = 0, $arrayidx253 = 0, $arrayidx273 = 0, $arrayidx276 = 0, $arrayidx279 = 0, $arrayidx335 = 0, $arrayidx392 = 0, $arrayidx400 = 0, $arrayidx408 = 0, $arrayidx412 = 0, $arrayidx428 = 0, $arrayidx444 = 0, $arrayidx460 = 0, $arrayidx481 = 0, $arrayidx485 = 0, $arrayidx491 = 0, $arrayidx53 = 0, $arrayidx62 = 0, $arrayidx65 = 0, $arrayidx68 = 0, $arrayidx85 = 0, $cmp79 = 0, $cond = 0, $conv = 0, $conv41 = 0, $div = 0, $div1 = 0, $i$0 = 0, $i$1 = 0, $i$2 = 0, $i$3 = 0, $i$4 = 0, $i$5 = 0, $i$6 = 0, $inc290 = 0, $j$0 = 0, $j$1 = 0, $j$2 = 0, $k$0 = 0, $k$1 = 0, $k$2 = 0, $k$3 = 0, $label_num333 = 0, $mul = 0, $mul211 = 0, $mul23 = 0, $mul242 = 0, $mul300 = 0, $mul368 = 0, $mul389 = 0, $mul398 = 0, $mul410 = 0, $mul483 = 0, $pnt$0 = 0, $pnt$1 = 0, $pnt1$0 = 0, $pnt1$1 = 0, $pnt2$0 = 0, $pnt2$1 = 0, $pnt2$2 = 0, $pnt2$3 = 0, $retval$0 = 0, $sub = 0, $sub356 = 0, $sub388 = 0, $sub52 = 0, $sub84 = 0, $sub88 = 0, $sub9 = 0, $vararg_buffer = 0, $wk$0 = 0, $wk$1 = 0, $wk$2 = 0, $wk$3 = 0, $wk$4 = 0, $wk_max$0 = 0, $wk_max$1 = 0, $wk_max$2 = 0, $wk_max$3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $vararg_buffer = sp;
 $div = ($xsize | 0) / 2 | 0;
 $div1 = ($ysize | 0) / 2 | 0;
 $0 = HEAP32[$labelInfo >> 2] | 0;
 $sub = $div1 + -1 | 0;
 $i$0 = 0;
 $pnt1$0 = $0;
 $pnt2$0 = $0 + ((Math_imul($sub, $div) | 0) << 1) | 0;
 while (1) {
  if (($i$0 | 0) >= ($div | 0)) break;
  HEAP16[$pnt2$0 >> 1] = 0;
  HEAP16[$pnt1$0 >> 1] = 0;
  $i$0 = $i$0 + 1 | 0;
  $pnt1$0 = $pnt1$0 + 2 | 0;
  $pnt2$0 = $pnt2$0 + 2 | 0;
 }
 $mul = $labelingThresh * 3 | 0;
 $sub9 = $div + -1 | 0;
 $i$1 = 0;
 $pnt1$1 = $0;
 $pnt2$1 = $0 + ($sub9 << 1) | 0;
 while (1) {
  if (($i$1 | 0) >= ($div1 | 0)) break;
  HEAP16[$pnt2$1 >> 1] = 0;
  HEAP16[$pnt1$1 >> 1] = 0;
  $i$1 = $i$1 + 1 | 0;
  $pnt1$1 = $pnt1$1 + ($div << 1) | 0;
  $pnt2$1 = $pnt2$1 + ($div << 1) | 0;
 }
 $arraydecay = $labelInfo + 1179664 | 0;
 $mul23 = $xsize << 1;
 $sub52 = 0 - $div | 0;
 $j$0 = 1;
 $pnt$0 = $image + (($xsize << 2) + 4) | 0;
 $pnt2$2 = $0 + ($div + 1 << 1) | 0;
 $wk_max$0 = 0;
 L9 : while (1) {
  if (($j$0 | 0) < ($sub | 0)) {
   $i$2 = 1;
   $pnt$1 = $pnt$0;
   $pnt2$3 = $pnt2$2;
   $wk_max$1 = $wk_max$0;
  } else {
   label = 56;
   break;
  }
  while (1) {
   if (($i$2 | 0) >= ($sub9 | 0)) break;
   $conv = HEAPU8[$pnt$1 >> 0] | 0;
   $conv41 = HEAPU8[$pnt$1 + 1 >> 0] | 0;
   do if ((($conv & 248) + 12 + ($conv << 5 & 224) + ($conv41 >>> 3 & 24) + ($conv41 << 2 & 248) | 0) > ($mul | 0)) {
    $arrayidx53 = $pnt2$3 + ($sub52 << 1) | 0;
    $3 = HEAP16[$arrayidx53 >> 1] | 0;
    if ($3 << 16 >> 16 > 0) {
     HEAP16[$pnt2$3 >> 1] = $3;
     $4 = ($3 << 16 >> 16) * 7 | 0;
     $arrayidx62 = $labelInfo + 1310736 + ($4 + -7 << 2) | 0;
     HEAP32[$arrayidx62 >> 2] = (HEAP32[$arrayidx62 >> 2] | 0) + 1;
     $arrayidx65 = $labelInfo + 1310736 + ($4 + -6 << 2) | 0;
     HEAP32[$arrayidx65 >> 2] = (HEAP32[$arrayidx65 >> 2] | 0) + $i$2;
     $arrayidx68 = $labelInfo + 1310736 + ($4 + -5 << 2) | 0;
     HEAP32[$arrayidx68 >> 2] = (HEAP32[$arrayidx68 >> 2] | 0) + $j$0;
     HEAP32[$labelInfo + 1310736 + ($4 + -1 << 2) >> 2] = $j$0;
     $wk_max$3 = $wk_max$1;
     break;
    }
    $8 = HEAP16[$arrayidx53 + 2 >> 1] | 0;
    $9 = HEAP16[$arrayidx53 + -2 >> 1] | 0;
    $cmp79 = $9 << 16 >> 16 > 0;
    $add$ptr143 = $pnt2$3 + -2 | 0;
    $sub88 = ($9 << 16 >> 16) + -1 | 0;
    if ($8 << 16 >> 16 <= 0) {
     if ($cmp79) {
      HEAP16[$pnt2$3 >> 1] = $9;
      $mul242 = $sub88 * 7 | 0;
      $arrayidx244 = $labelInfo + 1310736 + ($mul242 << 2) | 0;
      HEAP32[$arrayidx244 >> 2] = (HEAP32[$arrayidx244 >> 2] | 0) + 1;
      $arrayidx247 = $labelInfo + 1310736 + ($mul242 + 1 << 2) | 0;
      HEAP32[$arrayidx247 >> 2] = (HEAP32[$arrayidx247 >> 2] | 0) + $i$2;
      $arrayidx250 = $labelInfo + 1310736 + ($mul242 + 2 << 2) | 0;
      HEAP32[$arrayidx250 >> 2] = (HEAP32[$arrayidx250 >> 2] | 0) + $j$0;
      $arrayidx253 = $labelInfo + 1310736 + ($mul242 + 4 << 2) | 0;
      if ((HEAP32[$arrayidx253 >> 2] | 0) < ($i$2 | 0)) HEAP32[$arrayidx253 >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($mul242 + 6 << 2) >> 2] = $j$0;
      $wk_max$3 = $wk_max$1;
      break;
     }
     $37 = HEAP16[$add$ptr143 >> 1] | 0;
     if ($37 << 16 >> 16 > 0) {
      HEAP16[$pnt2$3 >> 1] = $37;
      $38 = ($37 << 16 >> 16) * 7 | 0;
      $arrayidx273 = $labelInfo + 1310736 + ($38 + -7 << 2) | 0;
      HEAP32[$arrayidx273 >> 2] = (HEAP32[$arrayidx273 >> 2] | 0) + 1;
      $arrayidx276 = $labelInfo + 1310736 + ($38 + -6 << 2) | 0;
      HEAP32[$arrayidx276 >> 2] = (HEAP32[$arrayidx276 >> 2] | 0) + $i$2;
      $arrayidx279 = $labelInfo + 1310736 + ($38 + -5 << 2) | 0;
      HEAP32[$arrayidx279 >> 2] = (HEAP32[$arrayidx279 >> 2] | 0) + $j$0;
      $add281 = $38 + -3 | 0;
      if ((HEAP32[$labelInfo + 1310736 + ($add281 << 2) >> 2] | 0) < ($i$2 | 0)) {
       $$sink = $i$2;
       $add286$sink = $add281;
       $wk_max$2 = $wk_max$1;
      } else {
       $wk_max$3 = $wk_max$1;
       break;
      }
     } else {
      $inc290 = $wk_max$1 + 1 | 0;
      if (($wk_max$1 | 0) > 32767) {
       label = 50;
       break L9;
      }
      HEAP16[$pnt2$3 >> 1] = $inc290;
      HEAP32[$labelInfo + 1179664 + ($wk_max$1 << 2) >> 2] = $inc290 << 16 >> 16;
      $mul300 = $wk_max$1 * 7 | 0;
      HEAP32[$labelInfo + 1310736 + ($mul300 << 2) >> 2] = 1;
      HEAP32[$labelInfo + 1310736 + ($mul300 + 1 << 2) >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($mul300 + 2 << 2) >> 2] = $j$0;
      HEAP32[$labelInfo + 1310736 + ($mul300 + 3 << 2) >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($mul300 + 4 << 2) >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($mul300 + 5 << 2) >> 2] = $j$0;
      $$sink = $j$0;
      $add286$sink = $mul300 + 6 | 0;
      $wk_max$2 = $inc290;
     }
     HEAP32[$labelInfo + 1310736 + ($add286$sink << 2) >> 2] = $$sink;
     $wk_max$3 = $wk_max$2;
     break;
    }
    $sub84 = ($8 << 16 >> 16) + -1 | 0;
    $arrayidx85 = $labelInfo + 1179664 + ($sub84 << 2) | 0;
    if ($cmp79) {
     $10 = HEAP32[$arrayidx85 >> 2] | 0;
     $11 = HEAP32[$labelInfo + 1179664 + ($sub88 << 2) >> 2] | 0;
     L35 : do if (($10 | 0) > ($11 | 0)) {
      HEAP16[$pnt2$3 >> 1] = $11;
      $k$0 = 0;
      $wk$0 = $arraydecay;
      while (1) {
       if (($k$0 | 0) >= ($wk_max$1 | 0)) {
        $14 = $11;
        break L35;
       }
       if ((HEAP32[$wk$0 >> 2] | 0) == ($10 | 0)) HEAP32[$wk$0 >> 2] = $11;
       $k$0 = $k$0 + 1 | 0;
       $wk$0 = $wk$0 + 4 | 0;
      }
     } else {
      HEAP16[$pnt2$3 >> 1] = $10;
      if (($10 | 0) < ($11 | 0)) {
       $k$1 = 0;
       $wk$1 = $arraydecay;
       while (1) {
        if (($k$1 | 0) >= ($wk_max$1 | 0)) {
         $14 = $10;
         break L35;
        }
        if ((HEAP32[$wk$1 >> 2] | 0) == ($11 | 0)) HEAP32[$wk$1 >> 2] = $10;
        $k$1 = $k$1 + 1 | 0;
        $wk$1 = $wk$1 + 4 | 0;
       }
      } else $14 = $10;
     } while (0);
     $15 = ($14 << 16 >> 16) * 7 | 0;
     $arrayidx132 = $labelInfo + 1310736 + ($15 + -7 << 2) | 0;
     HEAP32[$arrayidx132 >> 2] = (HEAP32[$arrayidx132 >> 2] | 0) + 1;
     $arrayidx135 = $labelInfo + 1310736 + ($15 + -6 << 2) | 0;
     HEAP32[$arrayidx135 >> 2] = (HEAP32[$arrayidx135 >> 2] | 0) + $i$2;
     $arrayidx138 = $labelInfo + 1310736 + ($15 + -5 << 2) | 0;
     HEAP32[$arrayidx138 >> 2] = (HEAP32[$arrayidx138 >> 2] | 0) + $j$0;
     HEAP32[$labelInfo + 1310736 + ($15 + -1 << 2) >> 2] = $j$0;
     $wk_max$3 = $wk_max$1;
     break;
    }
    $19 = HEAP16[$add$ptr143 >> 1] | 0;
    if ($19 << 16 >> 16 <= 0) {
     HEAP16[$pnt2$3 >> 1] = $8;
     $mul211 = $sub84 * 7 | 0;
     $arrayidx213 = $labelInfo + 1310736 + ($mul211 << 2) | 0;
     HEAP32[$arrayidx213 >> 2] = (HEAP32[$arrayidx213 >> 2] | 0) + 1;
     $arrayidx216 = $labelInfo + 1310736 + ($mul211 + 1 << 2) | 0;
     HEAP32[$arrayidx216 >> 2] = (HEAP32[$arrayidx216 >> 2] | 0) + $i$2;
     $arrayidx219 = $labelInfo + 1310736 + ($mul211 + 2 << 2) | 0;
     HEAP32[$arrayidx219 >> 2] = (HEAP32[$arrayidx219 >> 2] | 0) + $j$0;
     $arrayidx222 = $labelInfo + 1310736 + ($mul211 + 3 << 2) | 0;
     if ((HEAP32[$arrayidx222 >> 2] | 0) > ($i$2 | 0)) HEAP32[$arrayidx222 >> 2] = $i$2;
     HEAP32[$labelInfo + 1310736 + ($mul211 + 6 << 2) >> 2] = $j$0;
     $wk_max$3 = $wk_max$1;
     break;
    }
    $20 = HEAP32[$arrayidx85 >> 2] | 0;
    $21 = HEAP32[$labelInfo + 1179664 + (($19 << 16 >> 16) + -1 << 2) >> 2] | 0;
    L58 : do if (($20 | 0) > ($21 | 0)) {
     HEAP16[$pnt2$3 >> 1] = $21;
     $k$2 = 0;
     $wk$2 = $arraydecay;
     while (1) {
      if (($k$2 | 0) >= ($wk_max$1 | 0)) {
       $24 = $21;
       break L58;
      }
      if ((HEAP32[$wk$2 >> 2] | 0) == ($20 | 0)) HEAP32[$wk$2 >> 2] = $21;
      $k$2 = $k$2 + 1 | 0;
      $wk$2 = $wk$2 + 4 | 0;
     }
    } else {
     HEAP16[$pnt2$3 >> 1] = $20;
     if (($20 | 0) < ($21 | 0)) {
      $k$3 = 0;
      $wk$3 = $arraydecay;
      while (1) {
       if (($k$3 | 0) >= ($wk_max$1 | 0)) {
        $24 = $20;
        break L58;
       }
       if ((HEAP32[$wk$3 >> 2] | 0) == ($21 | 0)) HEAP32[$wk$3 >> 2] = $20;
       $k$3 = $k$3 + 1 | 0;
       $wk$3 = $wk$3 + 4 | 0;
      }
     } else $24 = $20;
    } while (0);
    $25 = ($24 << 16 >> 16) * 7 | 0;
    $arrayidx199 = $labelInfo + 1310736 + ($25 + -7 << 2) | 0;
    HEAP32[$arrayidx199 >> 2] = (HEAP32[$arrayidx199 >> 2] | 0) + 1;
    $arrayidx202 = $labelInfo + 1310736 + ($25 + -6 << 2) | 0;
    HEAP32[$arrayidx202 >> 2] = (HEAP32[$arrayidx202 >> 2] | 0) + $i$2;
    $arrayidx205 = $labelInfo + 1310736 + ($25 + -5 << 2) | 0;
    HEAP32[$arrayidx205 >> 2] = (HEAP32[$arrayidx205 >> 2] | 0) + $j$0;
    $wk_max$3 = $wk_max$1;
   } else {
    HEAP16[$pnt2$3 >> 1] = 0;
    $wk_max$3 = $wk_max$1;
   } while (0);
   $i$2 = $i$2 + 1 | 0;
   $pnt$1 = $pnt$1 + 4 | 0;
   $pnt2$3 = $pnt2$3 + 2 | 0;
   $wk_max$1 = $wk_max$3;
  }
  $j$0 = $j$0 + 1 | 0;
  $pnt$0 = $pnt$1 + $mul23 + 8 | 0;
  $pnt2$2 = $pnt2$3 + 4 | 0;
  $wk_max$0 = $wk_max$1;
 }
 L77 : do if ((label | 0) == 50) {
  _arLog(3, 3256, $vararg_buffer);
  $retval$0 = -1;
 } else if ((label | 0) == 56) {
  $arrayidx335 = $labelInfo + 12 | 0;
  $i$3 = 1;
  $j$1 = 1;
  $wk$4 = $arraydecay;
  while (1) {
   if (($i$3 | 0) > ($wk_max$0 | 0)) break;
   $43 = HEAP32[$wk$4 >> 2] | 0;
   if (($43 | 0) == ($i$3 | 0)) {
    $cond = $j$1;
    $j$2 = $j$1 + 1 | 0;
   } else {
    $cond = HEAP32[$labelInfo + 1179664 + ($43 + -1 << 2) >> 2] | 0;
    $j$2 = $j$1;
   }
   HEAP32[$wk$4 >> 2] = $cond;
   $i$3 = $i$3 + 1 | 0;
   $j$1 = $j$2;
   $wk$4 = $wk$4 + 4 | 0;
  }
  $label_num333 = $labelInfo + 8 | 0;
  $sub356 = $j$1 + -1 | 0;
  HEAP32[$label_num333 >> 2] = $sub356;
  if (!$sub356) $retval$0 = 0; else {
   _memset($arrayidx335 | 0, 0, $sub356 << 2 | 0) | 0;
   _memset($labelInfo + 655376 | 0, 0, $sub356 << 4 | 0) | 0;
   $45 = $sub356;
   $i$4 = 0;
   while (1) {
    if (($i$4 | 0) >= ($45 | 0)) {
     $i$5 = 0;
     break;
    }
    $mul368 = $i$4 << 2;
    HEAP32[$labelInfo + 131084 + ($mul368 << 2) >> 2] = $div;
    HEAP32[$labelInfo + 131084 + (($mul368 | 1) << 2) >> 2] = 0;
    HEAP32[$labelInfo + 131084 + (($mul368 | 2) << 2) >> 2] = $div1;
    HEAP32[$labelInfo + 131084 + (($mul368 | 3) << 2) >> 2] = 0;
    $45 = HEAP32[$label_num333 >> 2] | 0;
    $i$4 = $i$4 + 1 | 0;
   }
   while (1) {
    if (($i$5 | 0) >= ($wk_max$0 | 0)) {
     $i$6 = 0;
     break;
    }
    $sub388 = (HEAP32[$labelInfo + 1179664 + ($i$5 << 2) >> 2] | 0) + -1 | 0;
    $mul389 = $i$5 * 7 | 0;
    $arrayidx392 = $labelInfo + 12 + ($sub388 << 2) | 0;
    HEAP32[$arrayidx392 >> 2] = (HEAP32[$arrayidx392 >> 2] | 0) + (HEAP32[$labelInfo + 1310736 + ($mul389 << 2) >> 2] | 0);
    $mul398 = $sub388 << 1;
    $arrayidx400 = $labelInfo + 655376 + ($mul398 << 3) | 0;
    HEAPF64[$arrayidx400 >> 3] = +HEAPF64[$arrayidx400 >> 3] + +(HEAP32[$labelInfo + 1310736 + ($mul389 + 1 << 2) >> 2] | 0);
    $arrayidx408 = $labelInfo + 655376 + (($mul398 | 1) << 3) | 0;
    HEAPF64[$arrayidx408 >> 3] = +HEAPF64[$arrayidx408 >> 3] + +(HEAP32[$labelInfo + 1310736 + ($mul389 + 2 << 2) >> 2] | 0);
    $mul410 = $sub388 << 2;
    $arrayidx412 = $labelInfo + 131084 + ($mul410 << 2) | 0;
    $54 = HEAP32[$labelInfo + 1310736 + ($mul389 + 3 << 2) >> 2] | 0;
    if ((HEAP32[$arrayidx412 >> 2] | 0) > ($54 | 0)) HEAP32[$arrayidx412 >> 2] = $54;
    $arrayidx428 = $labelInfo + 131084 + (($mul410 | 1) << 2) | 0;
    $56 = HEAP32[$labelInfo + 1310736 + ($mul389 + 4 << 2) >> 2] | 0;
    if ((HEAP32[$arrayidx428 >> 2] | 0) < ($56 | 0)) HEAP32[$arrayidx428 >> 2] = $56;
    $arrayidx444 = $labelInfo + 131084 + (($mul410 | 2) << 2) | 0;
    $58 = HEAP32[$labelInfo + 1310736 + ($mul389 + 5 << 2) >> 2] | 0;
    if ((HEAP32[$arrayidx444 >> 2] | 0) > ($58 | 0)) HEAP32[$arrayidx444 >> 2] = $58;
    $arrayidx460 = $labelInfo + 131084 + (($mul410 | 3) << 2) | 0;
    $60 = HEAP32[$labelInfo + 1310736 + ($mul389 + 6 << 2) >> 2] | 0;
    if ((HEAP32[$arrayidx460 >> 2] | 0) < ($60 | 0)) HEAP32[$arrayidx460 >> 2] = $60;
    $i$5 = $i$5 + 1 | 0;
   }
   while (1) {
    if (($i$6 | 0) >= (HEAP32[$label_num333 >> 2] | 0)) {
     $retval$0 = 0;
     break L77;
    }
    $arrayidx481 = $labelInfo + 12 + ($i$6 << 2) | 0;
    $mul483 = $i$6 << 1;
    $arrayidx485 = $labelInfo + 655376 + ($mul483 << 3) | 0;
    HEAPF64[$arrayidx485 >> 3] = +HEAPF64[$arrayidx485 >> 3] / +(HEAP32[$arrayidx481 >> 2] | 0);
    $arrayidx491 = $labelInfo + 655376 + (($mul483 | 1) << 3) | 0;
    HEAPF64[$arrayidx491 >> 3] = +HEAPF64[$arrayidx491 >> 3] / +(HEAP32[$arrayidx481 >> 2] | 0);
    $i$6 = $i$6 + 1 | 0;
   }
  }
 } while (0);
 STACKTOP = sp;
 return $retval$0 | 0;
}

function _arLabelingSubDBI3CA5551($image, $xsize, $ysize, $labelingThresh, $labelInfo) {
 $image = $image | 0;
 $xsize = $xsize | 0;
 $ysize = $ysize | 0;
 $labelingThresh = $labelingThresh | 0;
 $labelInfo = $labelInfo | 0;
 var $$sink = 0, $0 = 0, $10 = 0, $11 = 0, $14 = 0, $15 = 0, $19 = 0, $20 = 0, $21 = 0, $24 = 0, $25 = 0, $3 = 0, $37 = 0, $38 = 0, $4 = 0, $43 = 0, $45 = 0, $54 = 0, $56 = 0, $58 = 0, $60 = 0, $8 = 0, $9 = 0, $add$ptr143 = 0, $add281 = 0, $add286$sink = 0, $arraydecay = 0, $arrayidx132 = 0, $arrayidx135 = 0, $arrayidx138 = 0, $arrayidx199 = 0, $arrayidx202 = 0, $arrayidx205 = 0, $arrayidx213 = 0, $arrayidx216 = 0, $arrayidx219 = 0, $arrayidx222 = 0, $arrayidx244 = 0, $arrayidx247 = 0, $arrayidx250 = 0, $arrayidx253 = 0, $arrayidx273 = 0, $arrayidx276 = 0, $arrayidx279 = 0, $arrayidx335 = 0, $arrayidx392 = 0, $arrayidx400 = 0, $arrayidx408 = 0, $arrayidx412 = 0, $arrayidx428 = 0, $arrayidx444 = 0, $arrayidx460 = 0, $arrayidx481 = 0, $arrayidx485 = 0, $arrayidx491 = 0, $arrayidx53 = 0, $arrayidx62 = 0, $arrayidx65 = 0, $arrayidx68 = 0, $arrayidx85 = 0, $cmp79 = 0, $cond = 0, $conv = 0, $conv41 = 0, $div = 0, $div1 = 0, $i$0 = 0, $i$1 = 0, $i$2 = 0, $i$3 = 0, $i$4 = 0, $i$5 = 0, $i$6 = 0, $inc290 = 0, $j$0 = 0, $j$1 = 0, $j$2 = 0, $k$0 = 0, $k$1 = 0, $k$2 = 0, $k$3 = 0, $label_num333 = 0, $mul = 0, $mul211 = 0, $mul23 = 0, $mul242 = 0, $mul300 = 0, $mul368 = 0, $mul389 = 0, $mul398 = 0, $mul410 = 0, $mul483 = 0, $pnt$0 = 0, $pnt$1 = 0, $pnt1$0 = 0, $pnt1$1 = 0, $pnt2$0 = 0, $pnt2$1 = 0, $pnt2$2 = 0, $pnt2$3 = 0, $retval$0 = 0, $sub = 0, $sub356 = 0, $sub388 = 0, $sub52 = 0, $sub84 = 0, $sub88 = 0, $sub9 = 0, $vararg_buffer = 0, $wk$0 = 0, $wk$1 = 0, $wk$2 = 0, $wk$3 = 0, $wk$4 = 0, $wk_max$0 = 0, $wk_max$1 = 0, $wk_max$2 = 0, $wk_max$3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $vararg_buffer = sp;
 $div = ($xsize | 0) / 2 | 0;
 $div1 = ($ysize | 0) / 2 | 0;
 $0 = HEAP32[$labelInfo >> 2] | 0;
 $sub = $div1 + -1 | 0;
 $i$0 = 0;
 $pnt1$0 = $0;
 $pnt2$0 = $0 + ((Math_imul($sub, $div) | 0) << 1) | 0;
 while (1) {
  if (($i$0 | 0) >= ($div | 0)) break;
  HEAP16[$pnt2$0 >> 1] = 0;
  HEAP16[$pnt1$0 >> 1] = 0;
  $i$0 = $i$0 + 1 | 0;
  $pnt1$0 = $pnt1$0 + 2 | 0;
  $pnt2$0 = $pnt2$0 + 2 | 0;
 }
 $mul = $labelingThresh * 3 | 0;
 $sub9 = $div + -1 | 0;
 $i$1 = 0;
 $pnt1$1 = $0;
 $pnt2$1 = $0 + ($sub9 << 1) | 0;
 while (1) {
  if (($i$1 | 0) >= ($div1 | 0)) break;
  HEAP16[$pnt2$1 >> 1] = 0;
  HEAP16[$pnt1$1 >> 1] = 0;
  $i$1 = $i$1 + 1 | 0;
  $pnt1$1 = $pnt1$1 + ($div << 1) | 0;
  $pnt2$1 = $pnt2$1 + ($div << 1) | 0;
 }
 $arraydecay = $labelInfo + 1179664 | 0;
 $mul23 = $xsize << 1;
 $sub52 = 0 - $div | 0;
 $j$0 = 1;
 $pnt$0 = $image + (($xsize << 2) + 4) | 0;
 $pnt2$2 = $0 + ($div + 1 << 1) | 0;
 $wk_max$0 = 0;
 L9 : while (1) {
  if (($j$0 | 0) < ($sub | 0)) {
   $i$2 = 1;
   $pnt$1 = $pnt$0;
   $pnt2$3 = $pnt2$2;
   $wk_max$1 = $wk_max$0;
  } else {
   label = 56;
   break;
  }
  while (1) {
   if (($i$2 | 0) >= ($sub9 | 0)) break;
   $conv = HEAPU8[$pnt$1 >> 0] | 0;
   $conv41 = HEAPU8[$pnt$1 + 1 >> 0] | 0;
   do if ((($conv & 248) + 12 + ($conv << 5 & 224) + ($conv41 >>> 3 & 24) + ($conv41 << 2 & 248) | 0) > ($mul | 0)) {
    HEAP16[$pnt2$3 >> 1] = 0;
    $wk_max$3 = $wk_max$1;
   } else {
    $arrayidx53 = $pnt2$3 + ($sub52 << 1) | 0;
    $3 = HEAP16[$arrayidx53 >> 1] | 0;
    if ($3 << 16 >> 16 > 0) {
     HEAP16[$pnt2$3 >> 1] = $3;
     $4 = ($3 << 16 >> 16) * 7 | 0;
     $arrayidx62 = $labelInfo + 1310736 + ($4 + -7 << 2) | 0;
     HEAP32[$arrayidx62 >> 2] = (HEAP32[$arrayidx62 >> 2] | 0) + 1;
     $arrayidx65 = $labelInfo + 1310736 + ($4 + -6 << 2) | 0;
     HEAP32[$arrayidx65 >> 2] = (HEAP32[$arrayidx65 >> 2] | 0) + $i$2;
     $arrayidx68 = $labelInfo + 1310736 + ($4 + -5 << 2) | 0;
     HEAP32[$arrayidx68 >> 2] = (HEAP32[$arrayidx68 >> 2] | 0) + $j$0;
     HEAP32[$labelInfo + 1310736 + ($4 + -1 << 2) >> 2] = $j$0;
     $wk_max$3 = $wk_max$1;
     break;
    }
    $8 = HEAP16[$arrayidx53 + 2 >> 1] | 0;
    $9 = HEAP16[$arrayidx53 + -2 >> 1] | 0;
    $cmp79 = $9 << 16 >> 16 > 0;
    $add$ptr143 = $pnt2$3 + -2 | 0;
    $sub88 = ($9 << 16 >> 16) + -1 | 0;
    if ($8 << 16 >> 16 <= 0) {
     if ($cmp79) {
      HEAP16[$pnt2$3 >> 1] = $9;
      $mul242 = $sub88 * 7 | 0;
      $arrayidx244 = $labelInfo + 1310736 + ($mul242 << 2) | 0;
      HEAP32[$arrayidx244 >> 2] = (HEAP32[$arrayidx244 >> 2] | 0) + 1;
      $arrayidx247 = $labelInfo + 1310736 + ($mul242 + 1 << 2) | 0;
      HEAP32[$arrayidx247 >> 2] = (HEAP32[$arrayidx247 >> 2] | 0) + $i$2;
      $arrayidx250 = $labelInfo + 1310736 + ($mul242 + 2 << 2) | 0;
      HEAP32[$arrayidx250 >> 2] = (HEAP32[$arrayidx250 >> 2] | 0) + $j$0;
      $arrayidx253 = $labelInfo + 1310736 + ($mul242 + 4 << 2) | 0;
      if ((HEAP32[$arrayidx253 >> 2] | 0) < ($i$2 | 0)) HEAP32[$arrayidx253 >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($mul242 + 6 << 2) >> 2] = $j$0;
      $wk_max$3 = $wk_max$1;
      break;
     }
     $37 = HEAP16[$add$ptr143 >> 1] | 0;
     if ($37 << 16 >> 16 > 0) {
      HEAP16[$pnt2$3 >> 1] = $37;
      $38 = ($37 << 16 >> 16) * 7 | 0;
      $arrayidx273 = $labelInfo + 1310736 + ($38 + -7 << 2) | 0;
      HEAP32[$arrayidx273 >> 2] = (HEAP32[$arrayidx273 >> 2] | 0) + 1;
      $arrayidx276 = $labelInfo + 1310736 + ($38 + -6 << 2) | 0;
      HEAP32[$arrayidx276 >> 2] = (HEAP32[$arrayidx276 >> 2] | 0) + $i$2;
      $arrayidx279 = $labelInfo + 1310736 + ($38 + -5 << 2) | 0;
      HEAP32[$arrayidx279 >> 2] = (HEAP32[$arrayidx279 >> 2] | 0) + $j$0;
      $add281 = $38 + -3 | 0;
      if ((HEAP32[$labelInfo + 1310736 + ($add281 << 2) >> 2] | 0) < ($i$2 | 0)) {
       $$sink = $i$2;
       $add286$sink = $add281;
       $wk_max$2 = $wk_max$1;
      } else {
       $wk_max$3 = $wk_max$1;
       break;
      }
     } else {
      $inc290 = $wk_max$1 + 1 | 0;
      if (($wk_max$1 | 0) > 32767) {
       label = 50;
       break L9;
      }
      HEAP16[$pnt2$3 >> 1] = $inc290;
      HEAP32[$labelInfo + 1179664 + ($wk_max$1 << 2) >> 2] = $inc290 << 16 >> 16;
      $mul300 = $wk_max$1 * 7 | 0;
      HEAP32[$labelInfo + 1310736 + ($mul300 << 2) >> 2] = 1;
      HEAP32[$labelInfo + 1310736 + ($mul300 + 1 << 2) >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($mul300 + 2 << 2) >> 2] = $j$0;
      HEAP32[$labelInfo + 1310736 + ($mul300 + 3 << 2) >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($mul300 + 4 << 2) >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($mul300 + 5 << 2) >> 2] = $j$0;
      $$sink = $j$0;
      $add286$sink = $mul300 + 6 | 0;
      $wk_max$2 = $inc290;
     }
     HEAP32[$labelInfo + 1310736 + ($add286$sink << 2) >> 2] = $$sink;
     $wk_max$3 = $wk_max$2;
     break;
    }
    $sub84 = ($8 << 16 >> 16) + -1 | 0;
    $arrayidx85 = $labelInfo + 1179664 + ($sub84 << 2) | 0;
    if ($cmp79) {
     $10 = HEAP32[$arrayidx85 >> 2] | 0;
     $11 = HEAP32[$labelInfo + 1179664 + ($sub88 << 2) >> 2] | 0;
     L36 : do if (($10 | 0) > ($11 | 0)) {
      HEAP16[$pnt2$3 >> 1] = $11;
      $k$0 = 0;
      $wk$0 = $arraydecay;
      while (1) {
       if (($k$0 | 0) >= ($wk_max$1 | 0)) {
        $14 = $11;
        break L36;
       }
       if ((HEAP32[$wk$0 >> 2] | 0) == ($10 | 0)) HEAP32[$wk$0 >> 2] = $11;
       $k$0 = $k$0 + 1 | 0;
       $wk$0 = $wk$0 + 4 | 0;
      }
     } else {
      HEAP16[$pnt2$3 >> 1] = $10;
      if (($10 | 0) < ($11 | 0)) {
       $k$1 = 0;
       $wk$1 = $arraydecay;
       while (1) {
        if (($k$1 | 0) >= ($wk_max$1 | 0)) {
         $14 = $10;
         break L36;
        }
        if ((HEAP32[$wk$1 >> 2] | 0) == ($11 | 0)) HEAP32[$wk$1 >> 2] = $10;
        $k$1 = $k$1 + 1 | 0;
        $wk$1 = $wk$1 + 4 | 0;
       }
      } else $14 = $10;
     } while (0);
     $15 = ($14 << 16 >> 16) * 7 | 0;
     $arrayidx132 = $labelInfo + 1310736 + ($15 + -7 << 2) | 0;
     HEAP32[$arrayidx132 >> 2] = (HEAP32[$arrayidx132 >> 2] | 0) + 1;
     $arrayidx135 = $labelInfo + 1310736 + ($15 + -6 << 2) | 0;
     HEAP32[$arrayidx135 >> 2] = (HEAP32[$arrayidx135 >> 2] | 0) + $i$2;
     $arrayidx138 = $labelInfo + 1310736 + ($15 + -5 << 2) | 0;
     HEAP32[$arrayidx138 >> 2] = (HEAP32[$arrayidx138 >> 2] | 0) + $j$0;
     HEAP32[$labelInfo + 1310736 + ($15 + -1 << 2) >> 2] = $j$0;
     $wk_max$3 = $wk_max$1;
     break;
    }
    $19 = HEAP16[$add$ptr143 >> 1] | 0;
    if ($19 << 16 >> 16 <= 0) {
     HEAP16[$pnt2$3 >> 1] = $8;
     $mul211 = $sub84 * 7 | 0;
     $arrayidx213 = $labelInfo + 1310736 + ($mul211 << 2) | 0;
     HEAP32[$arrayidx213 >> 2] = (HEAP32[$arrayidx213 >> 2] | 0) + 1;
     $arrayidx216 = $labelInfo + 1310736 + ($mul211 + 1 << 2) | 0;
     HEAP32[$arrayidx216 >> 2] = (HEAP32[$arrayidx216 >> 2] | 0) + $i$2;
     $arrayidx219 = $labelInfo + 1310736 + ($mul211 + 2 << 2) | 0;
     HEAP32[$arrayidx219 >> 2] = (HEAP32[$arrayidx219 >> 2] | 0) + $j$0;
     $arrayidx222 = $labelInfo + 1310736 + ($mul211 + 3 << 2) | 0;
     if ((HEAP32[$arrayidx222 >> 2] | 0) > ($i$2 | 0)) HEAP32[$arrayidx222 >> 2] = $i$2;
     HEAP32[$labelInfo + 1310736 + ($mul211 + 6 << 2) >> 2] = $j$0;
     $wk_max$3 = $wk_max$1;
     break;
    }
    $20 = HEAP32[$arrayidx85 >> 2] | 0;
    $21 = HEAP32[$labelInfo + 1179664 + (($19 << 16 >> 16) + -1 << 2) >> 2] | 0;
    L59 : do if (($20 | 0) > ($21 | 0)) {
     HEAP16[$pnt2$3 >> 1] = $21;
     $k$2 = 0;
     $wk$2 = $arraydecay;
     while (1) {
      if (($k$2 | 0) >= ($wk_max$1 | 0)) {
       $24 = $21;
       break L59;
      }
      if ((HEAP32[$wk$2 >> 2] | 0) == ($20 | 0)) HEAP32[$wk$2 >> 2] = $21;
      $k$2 = $k$2 + 1 | 0;
      $wk$2 = $wk$2 + 4 | 0;
     }
    } else {
     HEAP16[$pnt2$3 >> 1] = $20;
     if (($20 | 0) < ($21 | 0)) {
      $k$3 = 0;
      $wk$3 = $arraydecay;
      while (1) {
       if (($k$3 | 0) >= ($wk_max$1 | 0)) {
        $24 = $20;
        break L59;
       }
       if ((HEAP32[$wk$3 >> 2] | 0) == ($21 | 0)) HEAP32[$wk$3 >> 2] = $20;
       $k$3 = $k$3 + 1 | 0;
       $wk$3 = $wk$3 + 4 | 0;
      }
     } else $24 = $20;
    } while (0);
    $25 = ($24 << 16 >> 16) * 7 | 0;
    $arrayidx199 = $labelInfo + 1310736 + ($25 + -7 << 2) | 0;
    HEAP32[$arrayidx199 >> 2] = (HEAP32[$arrayidx199 >> 2] | 0) + 1;
    $arrayidx202 = $labelInfo + 1310736 + ($25 + -6 << 2) | 0;
    HEAP32[$arrayidx202 >> 2] = (HEAP32[$arrayidx202 >> 2] | 0) + $i$2;
    $arrayidx205 = $labelInfo + 1310736 + ($25 + -5 << 2) | 0;
    HEAP32[$arrayidx205 >> 2] = (HEAP32[$arrayidx205 >> 2] | 0) + $j$0;
    $wk_max$3 = $wk_max$1;
   } while (0);
   $i$2 = $i$2 + 1 | 0;
   $pnt$1 = $pnt$1 + 4 | 0;
   $pnt2$3 = $pnt2$3 + 2 | 0;
   $wk_max$1 = $wk_max$3;
  }
  $j$0 = $j$0 + 1 | 0;
  $pnt$0 = $pnt$1 + $mul23 + 8 | 0;
  $pnt2$2 = $pnt2$3 + 4 | 0;
  $wk_max$0 = $wk_max$1;
 }
 L77 : do if ((label | 0) == 50) {
  _arLog(3, 3256, $vararg_buffer);
  $retval$0 = -1;
 } else if ((label | 0) == 56) {
  $arrayidx335 = $labelInfo + 12 | 0;
  $i$3 = 1;
  $j$1 = 1;
  $wk$4 = $arraydecay;
  while (1) {
   if (($i$3 | 0) > ($wk_max$0 | 0)) break;
   $43 = HEAP32[$wk$4 >> 2] | 0;
   if (($43 | 0) == ($i$3 | 0)) {
    $cond = $j$1;
    $j$2 = $j$1 + 1 | 0;
   } else {
    $cond = HEAP32[$labelInfo + 1179664 + ($43 + -1 << 2) >> 2] | 0;
    $j$2 = $j$1;
   }
   HEAP32[$wk$4 >> 2] = $cond;
   $i$3 = $i$3 + 1 | 0;
   $j$1 = $j$2;
   $wk$4 = $wk$4 + 4 | 0;
  }
  $label_num333 = $labelInfo + 8 | 0;
  $sub356 = $j$1 + -1 | 0;
  HEAP32[$label_num333 >> 2] = $sub356;
  if (!$sub356) $retval$0 = 0; else {
   _memset($arrayidx335 | 0, 0, $sub356 << 2 | 0) | 0;
   _memset($labelInfo + 655376 | 0, 0, $sub356 << 4 | 0) | 0;
   $45 = $sub356;
   $i$4 = 0;
   while (1) {
    if (($i$4 | 0) >= ($45 | 0)) {
     $i$5 = 0;
     break;
    }
    $mul368 = $i$4 << 2;
    HEAP32[$labelInfo + 131084 + ($mul368 << 2) >> 2] = $div;
    HEAP32[$labelInfo + 131084 + (($mul368 | 1) << 2) >> 2] = 0;
    HEAP32[$labelInfo + 131084 + (($mul368 | 2) << 2) >> 2] = $div1;
    HEAP32[$labelInfo + 131084 + (($mul368 | 3) << 2) >> 2] = 0;
    $45 = HEAP32[$label_num333 >> 2] | 0;
    $i$4 = $i$4 + 1 | 0;
   }
   while (1) {
    if (($i$5 | 0) >= ($wk_max$0 | 0)) {
     $i$6 = 0;
     break;
    }
    $sub388 = (HEAP32[$labelInfo + 1179664 + ($i$5 << 2) >> 2] | 0) + -1 | 0;
    $mul389 = $i$5 * 7 | 0;
    $arrayidx392 = $labelInfo + 12 + ($sub388 << 2) | 0;
    HEAP32[$arrayidx392 >> 2] = (HEAP32[$arrayidx392 >> 2] | 0) + (HEAP32[$labelInfo + 1310736 + ($mul389 << 2) >> 2] | 0);
    $mul398 = $sub388 << 1;
    $arrayidx400 = $labelInfo + 655376 + ($mul398 << 3) | 0;
    HEAPF64[$arrayidx400 >> 3] = +HEAPF64[$arrayidx400 >> 3] + +(HEAP32[$labelInfo + 1310736 + ($mul389 + 1 << 2) >> 2] | 0);
    $arrayidx408 = $labelInfo + 655376 + (($mul398 | 1) << 3) | 0;
    HEAPF64[$arrayidx408 >> 3] = +HEAPF64[$arrayidx408 >> 3] + +(HEAP32[$labelInfo + 1310736 + ($mul389 + 2 << 2) >> 2] | 0);
    $mul410 = $sub388 << 2;
    $arrayidx412 = $labelInfo + 131084 + ($mul410 << 2) | 0;
    $54 = HEAP32[$labelInfo + 1310736 + ($mul389 + 3 << 2) >> 2] | 0;
    if ((HEAP32[$arrayidx412 >> 2] | 0) > ($54 | 0)) HEAP32[$arrayidx412 >> 2] = $54;
    $arrayidx428 = $labelInfo + 131084 + (($mul410 | 1) << 2) | 0;
    $56 = HEAP32[$labelInfo + 1310736 + ($mul389 + 4 << 2) >> 2] | 0;
    if ((HEAP32[$arrayidx428 >> 2] | 0) < ($56 | 0)) HEAP32[$arrayidx428 >> 2] = $56;
    $arrayidx444 = $labelInfo + 131084 + (($mul410 | 2) << 2) | 0;
    $58 = HEAP32[$labelInfo + 1310736 + ($mul389 + 5 << 2) >> 2] | 0;
    if ((HEAP32[$arrayidx444 >> 2] | 0) > ($58 | 0)) HEAP32[$arrayidx444 >> 2] = $58;
    $arrayidx460 = $labelInfo + 131084 + (($mul410 | 3) << 2) | 0;
    $60 = HEAP32[$labelInfo + 1310736 + ($mul389 + 6 << 2) >> 2] | 0;
    if ((HEAP32[$arrayidx460 >> 2] | 0) < ($60 | 0)) HEAP32[$arrayidx460 >> 2] = $60;
    $i$5 = $i$5 + 1 | 0;
   }
   while (1) {
    if (($i$6 | 0) >= (HEAP32[$label_num333 >> 2] | 0)) {
     $retval$0 = 0;
     break L77;
    }
    $arrayidx481 = $labelInfo + 12 + ($i$6 << 2) | 0;
    $mul483 = $i$6 << 1;
    $arrayidx485 = $labelInfo + 655376 + ($mul483 << 3) | 0;
    HEAPF64[$arrayidx485 >> 3] = +HEAPF64[$arrayidx485 >> 3] / +(HEAP32[$arrayidx481 >> 2] | 0);
    $arrayidx491 = $labelInfo + 655376 + (($mul483 | 1) << 3) | 0;
    HEAPF64[$arrayidx491 >> 3] = +HEAPF64[$arrayidx491 >> 3] / +(HEAP32[$arrayidx481 >> 2] | 0);
    $i$6 = $i$6 + 1 | 0;
   }
  }
 } while (0);
 STACKTOP = sp;
 return $retval$0 | 0;
}

function _arLabelingSubDWI3C565($image, $xsize, $ysize, $labelingThresh, $labelInfo) {
 $image = $image | 0;
 $xsize = $xsize | 0;
 $ysize = $ysize | 0;
 $labelingThresh = $labelingThresh | 0;
 $labelInfo = $labelInfo | 0;
 var $$sink = 0, $0 = 0, $10 = 0, $11 = 0, $14 = 0, $15 = 0, $19 = 0, $20 = 0, $21 = 0, $24 = 0, $25 = 0, $3 = 0, $37 = 0, $38 = 0, $4 = 0, $43 = 0, $45 = 0, $54 = 0, $56 = 0, $58 = 0, $60 = 0, $8 = 0, $9 = 0, $add$ptr143 = 0, $add281 = 0, $add286$sink = 0, $arraydecay = 0, $arrayidx132 = 0, $arrayidx135 = 0, $arrayidx138 = 0, $arrayidx199 = 0, $arrayidx202 = 0, $arrayidx205 = 0, $arrayidx213 = 0, $arrayidx216 = 0, $arrayidx219 = 0, $arrayidx222 = 0, $arrayidx244 = 0, $arrayidx247 = 0, $arrayidx250 = 0, $arrayidx253 = 0, $arrayidx273 = 0, $arrayidx276 = 0, $arrayidx279 = 0, $arrayidx335 = 0, $arrayidx392 = 0, $arrayidx400 = 0, $arrayidx408 = 0, $arrayidx412 = 0, $arrayidx428 = 0, $arrayidx444 = 0, $arrayidx460 = 0, $arrayidx481 = 0, $arrayidx485 = 0, $arrayidx491 = 0, $arrayidx53 = 0, $arrayidx62 = 0, $arrayidx65 = 0, $arrayidx68 = 0, $arrayidx85 = 0, $cmp79 = 0, $cond = 0, $conv = 0, $conv41 = 0, $div = 0, $div1 = 0, $i$0 = 0, $i$1 = 0, $i$2 = 0, $i$3 = 0, $i$4 = 0, $i$5 = 0, $i$6 = 0, $inc290 = 0, $j$0 = 0, $j$1 = 0, $j$2 = 0, $k$0 = 0, $k$1 = 0, $k$2 = 0, $k$3 = 0, $label_num333 = 0, $mul = 0, $mul211 = 0, $mul23 = 0, $mul242 = 0, $mul300 = 0, $mul368 = 0, $mul389 = 0, $mul398 = 0, $mul410 = 0, $mul483 = 0, $pnt$0 = 0, $pnt$1 = 0, $pnt1$0 = 0, $pnt1$1 = 0, $pnt2$0 = 0, $pnt2$1 = 0, $pnt2$2 = 0, $pnt2$3 = 0, $retval$0 = 0, $sub = 0, $sub356 = 0, $sub388 = 0, $sub52 = 0, $sub84 = 0, $sub88 = 0, $sub9 = 0, $vararg_buffer = 0, $wk$0 = 0, $wk$1 = 0, $wk$2 = 0, $wk$3 = 0, $wk$4 = 0, $wk_max$0 = 0, $wk_max$1 = 0, $wk_max$2 = 0, $wk_max$3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $vararg_buffer = sp;
 $div = ($xsize | 0) / 2 | 0;
 $div1 = ($ysize | 0) / 2 | 0;
 $0 = HEAP32[$labelInfo >> 2] | 0;
 $sub = $div1 + -1 | 0;
 $i$0 = 0;
 $pnt1$0 = $0;
 $pnt2$0 = $0 + ((Math_imul($sub, $div) | 0) << 1) | 0;
 while (1) {
  if (($i$0 | 0) >= ($div | 0)) break;
  HEAP16[$pnt2$0 >> 1] = 0;
  HEAP16[$pnt1$0 >> 1] = 0;
  $i$0 = $i$0 + 1 | 0;
  $pnt1$0 = $pnt1$0 + 2 | 0;
  $pnt2$0 = $pnt2$0 + 2 | 0;
 }
 $mul = $labelingThresh * 3 | 0;
 $sub9 = $div + -1 | 0;
 $i$1 = 0;
 $pnt1$1 = $0;
 $pnt2$1 = $0 + ($sub9 << 1) | 0;
 while (1) {
  if (($i$1 | 0) >= ($div1 | 0)) break;
  HEAP16[$pnt2$1 >> 1] = 0;
  HEAP16[$pnt1$1 >> 1] = 0;
  $i$1 = $i$1 + 1 | 0;
  $pnt1$1 = $pnt1$1 + ($div << 1) | 0;
  $pnt2$1 = $pnt2$1 + ($div << 1) | 0;
 }
 $arraydecay = $labelInfo + 1179664 | 0;
 $mul23 = $xsize << 1;
 $sub52 = 0 - $div | 0;
 $j$0 = 1;
 $pnt$0 = $image + (($xsize << 2) + 4) | 0;
 $pnt2$2 = $0 + ($div + 1 << 1) | 0;
 $wk_max$0 = 0;
 L9 : while (1) {
  if (($j$0 | 0) < ($sub | 0)) {
   $i$2 = 1;
   $pnt$1 = $pnt$0;
   $pnt2$3 = $pnt2$2;
   $wk_max$1 = $wk_max$0;
  } else {
   label = 56;
   break;
  }
  while (1) {
   if (($i$2 | 0) >= ($sub9 | 0)) break;
   $conv = HEAPU8[$pnt$1 >> 0] | 0;
   $conv41 = HEAPU8[$pnt$1 + 1 >> 0] | 0;
   do if ((($conv & 248) + 10 + ($conv << 5 & 224) + ($conv41 >>> 3 & 28) + ($conv41 << 3 & 248) | 0) > ($mul | 0)) {
    $arrayidx53 = $pnt2$3 + ($sub52 << 1) | 0;
    $3 = HEAP16[$arrayidx53 >> 1] | 0;
    if ($3 << 16 >> 16 > 0) {
     HEAP16[$pnt2$3 >> 1] = $3;
     $4 = ($3 << 16 >> 16) * 7 | 0;
     $arrayidx62 = $labelInfo + 1310736 + ($4 + -7 << 2) | 0;
     HEAP32[$arrayidx62 >> 2] = (HEAP32[$arrayidx62 >> 2] | 0) + 1;
     $arrayidx65 = $labelInfo + 1310736 + ($4 + -6 << 2) | 0;
     HEAP32[$arrayidx65 >> 2] = (HEAP32[$arrayidx65 >> 2] | 0) + $i$2;
     $arrayidx68 = $labelInfo + 1310736 + ($4 + -5 << 2) | 0;
     HEAP32[$arrayidx68 >> 2] = (HEAP32[$arrayidx68 >> 2] | 0) + $j$0;
     HEAP32[$labelInfo + 1310736 + ($4 + -1 << 2) >> 2] = $j$0;
     $wk_max$3 = $wk_max$1;
     break;
    }
    $8 = HEAP16[$arrayidx53 + 2 >> 1] | 0;
    $9 = HEAP16[$arrayidx53 + -2 >> 1] | 0;
    $cmp79 = $9 << 16 >> 16 > 0;
    $add$ptr143 = $pnt2$3 + -2 | 0;
    $sub88 = ($9 << 16 >> 16) + -1 | 0;
    if ($8 << 16 >> 16 <= 0) {
     if ($cmp79) {
      HEAP16[$pnt2$3 >> 1] = $9;
      $mul242 = $sub88 * 7 | 0;
      $arrayidx244 = $labelInfo + 1310736 + ($mul242 << 2) | 0;
      HEAP32[$arrayidx244 >> 2] = (HEAP32[$arrayidx244 >> 2] | 0) + 1;
      $arrayidx247 = $labelInfo + 1310736 + ($mul242 + 1 << 2) | 0;
      HEAP32[$arrayidx247 >> 2] = (HEAP32[$arrayidx247 >> 2] | 0) + $i$2;
      $arrayidx250 = $labelInfo + 1310736 + ($mul242 + 2 << 2) | 0;
      HEAP32[$arrayidx250 >> 2] = (HEAP32[$arrayidx250 >> 2] | 0) + $j$0;
      $arrayidx253 = $labelInfo + 1310736 + ($mul242 + 4 << 2) | 0;
      if ((HEAP32[$arrayidx253 >> 2] | 0) < ($i$2 | 0)) HEAP32[$arrayidx253 >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($mul242 + 6 << 2) >> 2] = $j$0;
      $wk_max$3 = $wk_max$1;
      break;
     }
     $37 = HEAP16[$add$ptr143 >> 1] | 0;
     if ($37 << 16 >> 16 > 0) {
      HEAP16[$pnt2$3 >> 1] = $37;
      $38 = ($37 << 16 >> 16) * 7 | 0;
      $arrayidx273 = $labelInfo + 1310736 + ($38 + -7 << 2) | 0;
      HEAP32[$arrayidx273 >> 2] = (HEAP32[$arrayidx273 >> 2] | 0) + 1;
      $arrayidx276 = $labelInfo + 1310736 + ($38 + -6 << 2) | 0;
      HEAP32[$arrayidx276 >> 2] = (HEAP32[$arrayidx276 >> 2] | 0) + $i$2;
      $arrayidx279 = $labelInfo + 1310736 + ($38 + -5 << 2) | 0;
      HEAP32[$arrayidx279 >> 2] = (HEAP32[$arrayidx279 >> 2] | 0) + $j$0;
      $add281 = $38 + -3 | 0;
      if ((HEAP32[$labelInfo + 1310736 + ($add281 << 2) >> 2] | 0) < ($i$2 | 0)) {
       $$sink = $i$2;
       $add286$sink = $add281;
       $wk_max$2 = $wk_max$1;
      } else {
       $wk_max$3 = $wk_max$1;
       break;
      }
     } else {
      $inc290 = $wk_max$1 + 1 | 0;
      if (($wk_max$1 | 0) > 32767) {
       label = 50;
       break L9;
      }
      HEAP16[$pnt2$3 >> 1] = $inc290;
      HEAP32[$labelInfo + 1179664 + ($wk_max$1 << 2) >> 2] = $inc290 << 16 >> 16;
      $mul300 = $wk_max$1 * 7 | 0;
      HEAP32[$labelInfo + 1310736 + ($mul300 << 2) >> 2] = 1;
      HEAP32[$labelInfo + 1310736 + ($mul300 + 1 << 2) >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($mul300 + 2 << 2) >> 2] = $j$0;
      HEAP32[$labelInfo + 1310736 + ($mul300 + 3 << 2) >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($mul300 + 4 << 2) >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($mul300 + 5 << 2) >> 2] = $j$0;
      $$sink = $j$0;
      $add286$sink = $mul300 + 6 | 0;
      $wk_max$2 = $inc290;
     }
     HEAP32[$labelInfo + 1310736 + ($add286$sink << 2) >> 2] = $$sink;
     $wk_max$3 = $wk_max$2;
     break;
    }
    $sub84 = ($8 << 16 >> 16) + -1 | 0;
    $arrayidx85 = $labelInfo + 1179664 + ($sub84 << 2) | 0;
    if ($cmp79) {
     $10 = HEAP32[$arrayidx85 >> 2] | 0;
     $11 = HEAP32[$labelInfo + 1179664 + ($sub88 << 2) >> 2] | 0;
     L35 : do if (($10 | 0) > ($11 | 0)) {
      HEAP16[$pnt2$3 >> 1] = $11;
      $k$0 = 0;
      $wk$0 = $arraydecay;
      while (1) {
       if (($k$0 | 0) >= ($wk_max$1 | 0)) {
        $14 = $11;
        break L35;
       }
       if ((HEAP32[$wk$0 >> 2] | 0) == ($10 | 0)) HEAP32[$wk$0 >> 2] = $11;
       $k$0 = $k$0 + 1 | 0;
       $wk$0 = $wk$0 + 4 | 0;
      }
     } else {
      HEAP16[$pnt2$3 >> 1] = $10;
      if (($10 | 0) < ($11 | 0)) {
       $k$1 = 0;
       $wk$1 = $arraydecay;
       while (1) {
        if (($k$1 | 0) >= ($wk_max$1 | 0)) {
         $14 = $10;
         break L35;
        }
        if ((HEAP32[$wk$1 >> 2] | 0) == ($11 | 0)) HEAP32[$wk$1 >> 2] = $10;
        $k$1 = $k$1 + 1 | 0;
        $wk$1 = $wk$1 + 4 | 0;
       }
      } else $14 = $10;
     } while (0);
     $15 = ($14 << 16 >> 16) * 7 | 0;
     $arrayidx132 = $labelInfo + 1310736 + ($15 + -7 << 2) | 0;
     HEAP32[$arrayidx132 >> 2] = (HEAP32[$arrayidx132 >> 2] | 0) + 1;
     $arrayidx135 = $labelInfo + 1310736 + ($15 + -6 << 2) | 0;
     HEAP32[$arrayidx135 >> 2] = (HEAP32[$arrayidx135 >> 2] | 0) + $i$2;
     $arrayidx138 = $labelInfo + 1310736 + ($15 + -5 << 2) | 0;
     HEAP32[$arrayidx138 >> 2] = (HEAP32[$arrayidx138 >> 2] | 0) + $j$0;
     HEAP32[$labelInfo + 1310736 + ($15 + -1 << 2) >> 2] = $j$0;
     $wk_max$3 = $wk_max$1;
     break;
    }
    $19 = HEAP16[$add$ptr143 >> 1] | 0;
    if ($19 << 16 >> 16 <= 0) {
     HEAP16[$pnt2$3 >> 1] = $8;
     $mul211 = $sub84 * 7 | 0;
     $arrayidx213 = $labelInfo + 1310736 + ($mul211 << 2) | 0;
     HEAP32[$arrayidx213 >> 2] = (HEAP32[$arrayidx213 >> 2] | 0) + 1;
     $arrayidx216 = $labelInfo + 1310736 + ($mul211 + 1 << 2) | 0;
     HEAP32[$arrayidx216 >> 2] = (HEAP32[$arrayidx216 >> 2] | 0) + $i$2;
     $arrayidx219 = $labelInfo + 1310736 + ($mul211 + 2 << 2) | 0;
     HEAP32[$arrayidx219 >> 2] = (HEAP32[$arrayidx219 >> 2] | 0) + $j$0;
     $arrayidx222 = $labelInfo + 1310736 + ($mul211 + 3 << 2) | 0;
     if ((HEAP32[$arrayidx222 >> 2] | 0) > ($i$2 | 0)) HEAP32[$arrayidx222 >> 2] = $i$2;
     HEAP32[$labelInfo + 1310736 + ($mul211 + 6 << 2) >> 2] = $j$0;
     $wk_max$3 = $wk_max$1;
     break;
    }
    $20 = HEAP32[$arrayidx85 >> 2] | 0;
    $21 = HEAP32[$labelInfo + 1179664 + (($19 << 16 >> 16) + -1 << 2) >> 2] | 0;
    L58 : do if (($20 | 0) > ($21 | 0)) {
     HEAP16[$pnt2$3 >> 1] = $21;
     $k$2 = 0;
     $wk$2 = $arraydecay;
     while (1) {
      if (($k$2 | 0) >= ($wk_max$1 | 0)) {
       $24 = $21;
       break L58;
      }
      if ((HEAP32[$wk$2 >> 2] | 0) == ($20 | 0)) HEAP32[$wk$2 >> 2] = $21;
      $k$2 = $k$2 + 1 | 0;
      $wk$2 = $wk$2 + 4 | 0;
     }
    } else {
     HEAP16[$pnt2$3 >> 1] = $20;
     if (($20 | 0) < ($21 | 0)) {
      $k$3 = 0;
      $wk$3 = $arraydecay;
      while (1) {
       if (($k$3 | 0) >= ($wk_max$1 | 0)) {
        $24 = $20;
        break L58;
       }
       if ((HEAP32[$wk$3 >> 2] | 0) == ($21 | 0)) HEAP32[$wk$3 >> 2] = $20;
       $k$3 = $k$3 + 1 | 0;
       $wk$3 = $wk$3 + 4 | 0;
      }
     } else $24 = $20;
    } while (0);
    $25 = ($24 << 16 >> 16) * 7 | 0;
    $arrayidx199 = $labelInfo + 1310736 + ($25 + -7 << 2) | 0;
    HEAP32[$arrayidx199 >> 2] = (HEAP32[$arrayidx199 >> 2] | 0) + 1;
    $arrayidx202 = $labelInfo + 1310736 + ($25 + -6 << 2) | 0;
    HEAP32[$arrayidx202 >> 2] = (HEAP32[$arrayidx202 >> 2] | 0) + $i$2;
    $arrayidx205 = $labelInfo + 1310736 + ($25 + -5 << 2) | 0;
    HEAP32[$arrayidx205 >> 2] = (HEAP32[$arrayidx205 >> 2] | 0) + $j$0;
    $wk_max$3 = $wk_max$1;
   } else {
    HEAP16[$pnt2$3 >> 1] = 0;
    $wk_max$3 = $wk_max$1;
   } while (0);
   $i$2 = $i$2 + 1 | 0;
   $pnt$1 = $pnt$1 + 4 | 0;
   $pnt2$3 = $pnt2$3 + 2 | 0;
   $wk_max$1 = $wk_max$3;
  }
  $j$0 = $j$0 + 1 | 0;
  $pnt$0 = $pnt$1 + $mul23 + 8 | 0;
  $pnt2$2 = $pnt2$3 + 4 | 0;
  $wk_max$0 = $wk_max$1;
 }
 L77 : do if ((label | 0) == 50) {
  _arLog(3, 3256, $vararg_buffer);
  $retval$0 = -1;
 } else if ((label | 0) == 56) {
  $arrayidx335 = $labelInfo + 12 | 0;
  $i$3 = 1;
  $j$1 = 1;
  $wk$4 = $arraydecay;
  while (1) {
   if (($i$3 | 0) > ($wk_max$0 | 0)) break;
   $43 = HEAP32[$wk$4 >> 2] | 0;
   if (($43 | 0) == ($i$3 | 0)) {
    $cond = $j$1;
    $j$2 = $j$1 + 1 | 0;
   } else {
    $cond = HEAP32[$labelInfo + 1179664 + ($43 + -1 << 2) >> 2] | 0;
    $j$2 = $j$1;
   }
   HEAP32[$wk$4 >> 2] = $cond;
   $i$3 = $i$3 + 1 | 0;
   $j$1 = $j$2;
   $wk$4 = $wk$4 + 4 | 0;
  }
  $label_num333 = $labelInfo + 8 | 0;
  $sub356 = $j$1 + -1 | 0;
  HEAP32[$label_num333 >> 2] = $sub356;
  if (!$sub356) $retval$0 = 0; else {
   _memset($arrayidx335 | 0, 0, $sub356 << 2 | 0) | 0;
   _memset($labelInfo + 655376 | 0, 0, $sub356 << 4 | 0) | 0;
   $45 = $sub356;
   $i$4 = 0;
   while (1) {
    if (($i$4 | 0) >= ($45 | 0)) {
     $i$5 = 0;
     break;
    }
    $mul368 = $i$4 << 2;
    HEAP32[$labelInfo + 131084 + ($mul368 << 2) >> 2] = $div;
    HEAP32[$labelInfo + 131084 + (($mul368 | 1) << 2) >> 2] = 0;
    HEAP32[$labelInfo + 131084 + (($mul368 | 2) << 2) >> 2] = $div1;
    HEAP32[$labelInfo + 131084 + (($mul368 | 3) << 2) >> 2] = 0;
    $45 = HEAP32[$label_num333 >> 2] | 0;
    $i$4 = $i$4 + 1 | 0;
   }
   while (1) {
    if (($i$5 | 0) >= ($wk_max$0 | 0)) {
     $i$6 = 0;
     break;
    }
    $sub388 = (HEAP32[$labelInfo + 1179664 + ($i$5 << 2) >> 2] | 0) + -1 | 0;
    $mul389 = $i$5 * 7 | 0;
    $arrayidx392 = $labelInfo + 12 + ($sub388 << 2) | 0;
    HEAP32[$arrayidx392 >> 2] = (HEAP32[$arrayidx392 >> 2] | 0) + (HEAP32[$labelInfo + 1310736 + ($mul389 << 2) >> 2] | 0);
    $mul398 = $sub388 << 1;
    $arrayidx400 = $labelInfo + 655376 + ($mul398 << 3) | 0;
    HEAPF64[$arrayidx400 >> 3] = +HEAPF64[$arrayidx400 >> 3] + +(HEAP32[$labelInfo + 1310736 + ($mul389 + 1 << 2) >> 2] | 0);
    $arrayidx408 = $labelInfo + 655376 + (($mul398 | 1) << 3) | 0;
    HEAPF64[$arrayidx408 >> 3] = +HEAPF64[$arrayidx408 >> 3] + +(HEAP32[$labelInfo + 1310736 + ($mul389 + 2 << 2) >> 2] | 0);
    $mul410 = $sub388 << 2;
    $arrayidx412 = $labelInfo + 131084 + ($mul410 << 2) | 0;
    $54 = HEAP32[$labelInfo + 1310736 + ($mul389 + 3 << 2) >> 2] | 0;
    if ((HEAP32[$arrayidx412 >> 2] | 0) > ($54 | 0)) HEAP32[$arrayidx412 >> 2] = $54;
    $arrayidx428 = $labelInfo + 131084 + (($mul410 | 1) << 2) | 0;
    $56 = HEAP32[$labelInfo + 1310736 + ($mul389 + 4 << 2) >> 2] | 0;
    if ((HEAP32[$arrayidx428 >> 2] | 0) < ($56 | 0)) HEAP32[$arrayidx428 >> 2] = $56;
    $arrayidx444 = $labelInfo + 131084 + (($mul410 | 2) << 2) | 0;
    $58 = HEAP32[$labelInfo + 1310736 + ($mul389 + 5 << 2) >> 2] | 0;
    if ((HEAP32[$arrayidx444 >> 2] | 0) > ($58 | 0)) HEAP32[$arrayidx444 >> 2] = $58;
    $arrayidx460 = $labelInfo + 131084 + (($mul410 | 3) << 2) | 0;
    $60 = HEAP32[$labelInfo + 1310736 + ($mul389 + 6 << 2) >> 2] | 0;
    if ((HEAP32[$arrayidx460 >> 2] | 0) < ($60 | 0)) HEAP32[$arrayidx460 >> 2] = $60;
    $i$5 = $i$5 + 1 | 0;
   }
   while (1) {
    if (($i$6 | 0) >= (HEAP32[$label_num333 >> 2] | 0)) {
     $retval$0 = 0;
     break L77;
    }
    $arrayidx481 = $labelInfo + 12 + ($i$6 << 2) | 0;
    $mul483 = $i$6 << 1;
    $arrayidx485 = $labelInfo + 655376 + ($mul483 << 3) | 0;
    HEAPF64[$arrayidx485 >> 3] = +HEAPF64[$arrayidx485 >> 3] / +(HEAP32[$arrayidx481 >> 2] | 0);
    $arrayidx491 = $labelInfo + 655376 + (($mul483 | 1) << 3) | 0;
    HEAPF64[$arrayidx491 >> 3] = +HEAPF64[$arrayidx491 >> 3] / +(HEAP32[$arrayidx481 >> 2] | 0);
    $i$6 = $i$6 + 1 | 0;
   }
  }
 } while (0);
 STACKTOP = sp;
 return $retval$0 | 0;
}

function _arLabelingSubDBI3C565($image, $xsize, $ysize, $labelingThresh, $labelInfo) {
 $image = $image | 0;
 $xsize = $xsize | 0;
 $ysize = $ysize | 0;
 $labelingThresh = $labelingThresh | 0;
 $labelInfo = $labelInfo | 0;
 var $$sink = 0, $0 = 0, $10 = 0, $11 = 0, $14 = 0, $15 = 0, $19 = 0, $20 = 0, $21 = 0, $24 = 0, $25 = 0, $3 = 0, $37 = 0, $38 = 0, $4 = 0, $43 = 0, $45 = 0, $54 = 0, $56 = 0, $58 = 0, $60 = 0, $8 = 0, $9 = 0, $add$ptr143 = 0, $add281 = 0, $add286$sink = 0, $arraydecay = 0, $arrayidx132 = 0, $arrayidx135 = 0, $arrayidx138 = 0, $arrayidx199 = 0, $arrayidx202 = 0, $arrayidx205 = 0, $arrayidx213 = 0, $arrayidx216 = 0, $arrayidx219 = 0, $arrayidx222 = 0, $arrayidx244 = 0, $arrayidx247 = 0, $arrayidx250 = 0, $arrayidx253 = 0, $arrayidx273 = 0, $arrayidx276 = 0, $arrayidx279 = 0, $arrayidx335 = 0, $arrayidx392 = 0, $arrayidx400 = 0, $arrayidx408 = 0, $arrayidx412 = 0, $arrayidx428 = 0, $arrayidx444 = 0, $arrayidx460 = 0, $arrayidx481 = 0, $arrayidx485 = 0, $arrayidx491 = 0, $arrayidx53 = 0, $arrayidx62 = 0, $arrayidx65 = 0, $arrayidx68 = 0, $arrayidx85 = 0, $cmp79 = 0, $cond = 0, $conv = 0, $conv41 = 0, $div = 0, $div1 = 0, $i$0 = 0, $i$1 = 0, $i$2 = 0, $i$3 = 0, $i$4 = 0, $i$5 = 0, $i$6 = 0, $inc290 = 0, $j$0 = 0, $j$1 = 0, $j$2 = 0, $k$0 = 0, $k$1 = 0, $k$2 = 0, $k$3 = 0, $label_num333 = 0, $mul = 0, $mul211 = 0, $mul23 = 0, $mul242 = 0, $mul300 = 0, $mul368 = 0, $mul389 = 0, $mul398 = 0, $mul410 = 0, $mul483 = 0, $pnt$0 = 0, $pnt$1 = 0, $pnt1$0 = 0, $pnt1$1 = 0, $pnt2$0 = 0, $pnt2$1 = 0, $pnt2$2 = 0, $pnt2$3 = 0, $retval$0 = 0, $sub = 0, $sub356 = 0, $sub388 = 0, $sub52 = 0, $sub84 = 0, $sub88 = 0, $sub9 = 0, $vararg_buffer = 0, $wk$0 = 0, $wk$1 = 0, $wk$2 = 0, $wk$3 = 0, $wk$4 = 0, $wk_max$0 = 0, $wk_max$1 = 0, $wk_max$2 = 0, $wk_max$3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $vararg_buffer = sp;
 $div = ($xsize | 0) / 2 | 0;
 $div1 = ($ysize | 0) / 2 | 0;
 $0 = HEAP32[$labelInfo >> 2] | 0;
 $sub = $div1 + -1 | 0;
 $i$0 = 0;
 $pnt1$0 = $0;
 $pnt2$0 = $0 + ((Math_imul($sub, $div) | 0) << 1) | 0;
 while (1) {
  if (($i$0 | 0) >= ($div | 0)) break;
  HEAP16[$pnt2$0 >> 1] = 0;
  HEAP16[$pnt1$0 >> 1] = 0;
  $i$0 = $i$0 + 1 | 0;
  $pnt1$0 = $pnt1$0 + 2 | 0;
  $pnt2$0 = $pnt2$0 + 2 | 0;
 }
 $mul = $labelingThresh * 3 | 0;
 $sub9 = $div + -1 | 0;
 $i$1 = 0;
 $pnt1$1 = $0;
 $pnt2$1 = $0 + ($sub9 << 1) | 0;
 while (1) {
  if (($i$1 | 0) >= ($div1 | 0)) break;
  HEAP16[$pnt2$1 >> 1] = 0;
  HEAP16[$pnt1$1 >> 1] = 0;
  $i$1 = $i$1 + 1 | 0;
  $pnt1$1 = $pnt1$1 + ($div << 1) | 0;
  $pnt2$1 = $pnt2$1 + ($div << 1) | 0;
 }
 $arraydecay = $labelInfo + 1179664 | 0;
 $mul23 = $xsize << 1;
 $sub52 = 0 - $div | 0;
 $j$0 = 1;
 $pnt$0 = $image + (($xsize << 2) + 4) | 0;
 $pnt2$2 = $0 + ($div + 1 << 1) | 0;
 $wk_max$0 = 0;
 L9 : while (1) {
  if (($j$0 | 0) < ($sub | 0)) {
   $i$2 = 1;
   $pnt$1 = $pnt$0;
   $pnt2$3 = $pnt2$2;
   $wk_max$1 = $wk_max$0;
  } else {
   label = 56;
   break;
  }
  while (1) {
   if (($i$2 | 0) >= ($sub9 | 0)) break;
   $conv = HEAPU8[$pnt$1 >> 0] | 0;
   $conv41 = HEAPU8[$pnt$1 + 1 >> 0] | 0;
   do if ((($conv & 248) + 10 + ($conv << 5 & 224) + ($conv41 >>> 3 & 28) + ($conv41 << 3 & 248) | 0) > ($mul | 0)) {
    HEAP16[$pnt2$3 >> 1] = 0;
    $wk_max$3 = $wk_max$1;
   } else {
    $arrayidx53 = $pnt2$3 + ($sub52 << 1) | 0;
    $3 = HEAP16[$arrayidx53 >> 1] | 0;
    if ($3 << 16 >> 16 > 0) {
     HEAP16[$pnt2$3 >> 1] = $3;
     $4 = ($3 << 16 >> 16) * 7 | 0;
     $arrayidx62 = $labelInfo + 1310736 + ($4 + -7 << 2) | 0;
     HEAP32[$arrayidx62 >> 2] = (HEAP32[$arrayidx62 >> 2] | 0) + 1;
     $arrayidx65 = $labelInfo + 1310736 + ($4 + -6 << 2) | 0;
     HEAP32[$arrayidx65 >> 2] = (HEAP32[$arrayidx65 >> 2] | 0) + $i$2;
     $arrayidx68 = $labelInfo + 1310736 + ($4 + -5 << 2) | 0;
     HEAP32[$arrayidx68 >> 2] = (HEAP32[$arrayidx68 >> 2] | 0) + $j$0;
     HEAP32[$labelInfo + 1310736 + ($4 + -1 << 2) >> 2] = $j$0;
     $wk_max$3 = $wk_max$1;
     break;
    }
    $8 = HEAP16[$arrayidx53 + 2 >> 1] | 0;
    $9 = HEAP16[$arrayidx53 + -2 >> 1] | 0;
    $cmp79 = $9 << 16 >> 16 > 0;
    $add$ptr143 = $pnt2$3 + -2 | 0;
    $sub88 = ($9 << 16 >> 16) + -1 | 0;
    if ($8 << 16 >> 16 <= 0) {
     if ($cmp79) {
      HEAP16[$pnt2$3 >> 1] = $9;
      $mul242 = $sub88 * 7 | 0;
      $arrayidx244 = $labelInfo + 1310736 + ($mul242 << 2) | 0;
      HEAP32[$arrayidx244 >> 2] = (HEAP32[$arrayidx244 >> 2] | 0) + 1;
      $arrayidx247 = $labelInfo + 1310736 + ($mul242 + 1 << 2) | 0;
      HEAP32[$arrayidx247 >> 2] = (HEAP32[$arrayidx247 >> 2] | 0) + $i$2;
      $arrayidx250 = $labelInfo + 1310736 + ($mul242 + 2 << 2) | 0;
      HEAP32[$arrayidx250 >> 2] = (HEAP32[$arrayidx250 >> 2] | 0) + $j$0;
      $arrayidx253 = $labelInfo + 1310736 + ($mul242 + 4 << 2) | 0;
      if ((HEAP32[$arrayidx253 >> 2] | 0) < ($i$2 | 0)) HEAP32[$arrayidx253 >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($mul242 + 6 << 2) >> 2] = $j$0;
      $wk_max$3 = $wk_max$1;
      break;
     }
     $37 = HEAP16[$add$ptr143 >> 1] | 0;
     if ($37 << 16 >> 16 > 0) {
      HEAP16[$pnt2$3 >> 1] = $37;
      $38 = ($37 << 16 >> 16) * 7 | 0;
      $arrayidx273 = $labelInfo + 1310736 + ($38 + -7 << 2) | 0;
      HEAP32[$arrayidx273 >> 2] = (HEAP32[$arrayidx273 >> 2] | 0) + 1;
      $arrayidx276 = $labelInfo + 1310736 + ($38 + -6 << 2) | 0;
      HEAP32[$arrayidx276 >> 2] = (HEAP32[$arrayidx276 >> 2] | 0) + $i$2;
      $arrayidx279 = $labelInfo + 1310736 + ($38 + -5 << 2) | 0;
      HEAP32[$arrayidx279 >> 2] = (HEAP32[$arrayidx279 >> 2] | 0) + $j$0;
      $add281 = $38 + -3 | 0;
      if ((HEAP32[$labelInfo + 1310736 + ($add281 << 2) >> 2] | 0) < ($i$2 | 0)) {
       $$sink = $i$2;
       $add286$sink = $add281;
       $wk_max$2 = $wk_max$1;
      } else {
       $wk_max$3 = $wk_max$1;
       break;
      }
     } else {
      $inc290 = $wk_max$1 + 1 | 0;
      if (($wk_max$1 | 0) > 32767) {
       label = 50;
       break L9;
      }
      HEAP16[$pnt2$3 >> 1] = $inc290;
      HEAP32[$labelInfo + 1179664 + ($wk_max$1 << 2) >> 2] = $inc290 << 16 >> 16;
      $mul300 = $wk_max$1 * 7 | 0;
      HEAP32[$labelInfo + 1310736 + ($mul300 << 2) >> 2] = 1;
      HEAP32[$labelInfo + 1310736 + ($mul300 + 1 << 2) >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($mul300 + 2 << 2) >> 2] = $j$0;
      HEAP32[$labelInfo + 1310736 + ($mul300 + 3 << 2) >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($mul300 + 4 << 2) >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($mul300 + 5 << 2) >> 2] = $j$0;
      $$sink = $j$0;
      $add286$sink = $mul300 + 6 | 0;
      $wk_max$2 = $inc290;
     }
     HEAP32[$labelInfo + 1310736 + ($add286$sink << 2) >> 2] = $$sink;
     $wk_max$3 = $wk_max$2;
     break;
    }
    $sub84 = ($8 << 16 >> 16) + -1 | 0;
    $arrayidx85 = $labelInfo + 1179664 + ($sub84 << 2) | 0;
    if ($cmp79) {
     $10 = HEAP32[$arrayidx85 >> 2] | 0;
     $11 = HEAP32[$labelInfo + 1179664 + ($sub88 << 2) >> 2] | 0;
     L36 : do if (($10 | 0) > ($11 | 0)) {
      HEAP16[$pnt2$3 >> 1] = $11;
      $k$0 = 0;
      $wk$0 = $arraydecay;
      while (1) {
       if (($k$0 | 0) >= ($wk_max$1 | 0)) {
        $14 = $11;
        break L36;
       }
       if ((HEAP32[$wk$0 >> 2] | 0) == ($10 | 0)) HEAP32[$wk$0 >> 2] = $11;
       $k$0 = $k$0 + 1 | 0;
       $wk$0 = $wk$0 + 4 | 0;
      }
     } else {
      HEAP16[$pnt2$3 >> 1] = $10;
      if (($10 | 0) < ($11 | 0)) {
       $k$1 = 0;
       $wk$1 = $arraydecay;
       while (1) {
        if (($k$1 | 0) >= ($wk_max$1 | 0)) {
         $14 = $10;
         break L36;
        }
        if ((HEAP32[$wk$1 >> 2] | 0) == ($11 | 0)) HEAP32[$wk$1 >> 2] = $10;
        $k$1 = $k$1 + 1 | 0;
        $wk$1 = $wk$1 + 4 | 0;
       }
      } else $14 = $10;
     } while (0);
     $15 = ($14 << 16 >> 16) * 7 | 0;
     $arrayidx132 = $labelInfo + 1310736 + ($15 + -7 << 2) | 0;
     HEAP32[$arrayidx132 >> 2] = (HEAP32[$arrayidx132 >> 2] | 0) + 1;
     $arrayidx135 = $labelInfo + 1310736 + ($15 + -6 << 2) | 0;
     HEAP32[$arrayidx135 >> 2] = (HEAP32[$arrayidx135 >> 2] | 0) + $i$2;
     $arrayidx138 = $labelInfo + 1310736 + ($15 + -5 << 2) | 0;
     HEAP32[$arrayidx138 >> 2] = (HEAP32[$arrayidx138 >> 2] | 0) + $j$0;
     HEAP32[$labelInfo + 1310736 + ($15 + -1 << 2) >> 2] = $j$0;
     $wk_max$3 = $wk_max$1;
     break;
    }
    $19 = HEAP16[$add$ptr143 >> 1] | 0;
    if ($19 << 16 >> 16 <= 0) {
     HEAP16[$pnt2$3 >> 1] = $8;
     $mul211 = $sub84 * 7 | 0;
     $arrayidx213 = $labelInfo + 1310736 + ($mul211 << 2) | 0;
     HEAP32[$arrayidx213 >> 2] = (HEAP32[$arrayidx213 >> 2] | 0) + 1;
     $arrayidx216 = $labelInfo + 1310736 + ($mul211 + 1 << 2) | 0;
     HEAP32[$arrayidx216 >> 2] = (HEAP32[$arrayidx216 >> 2] | 0) + $i$2;
     $arrayidx219 = $labelInfo + 1310736 + ($mul211 + 2 << 2) | 0;
     HEAP32[$arrayidx219 >> 2] = (HEAP32[$arrayidx219 >> 2] | 0) + $j$0;
     $arrayidx222 = $labelInfo + 1310736 + ($mul211 + 3 << 2) | 0;
     if ((HEAP32[$arrayidx222 >> 2] | 0) > ($i$2 | 0)) HEAP32[$arrayidx222 >> 2] = $i$2;
     HEAP32[$labelInfo + 1310736 + ($mul211 + 6 << 2) >> 2] = $j$0;
     $wk_max$3 = $wk_max$1;
     break;
    }
    $20 = HEAP32[$arrayidx85 >> 2] | 0;
    $21 = HEAP32[$labelInfo + 1179664 + (($19 << 16 >> 16) + -1 << 2) >> 2] | 0;
    L59 : do if (($20 | 0) > ($21 | 0)) {
     HEAP16[$pnt2$3 >> 1] = $21;
     $k$2 = 0;
     $wk$2 = $arraydecay;
     while (1) {
      if (($k$2 | 0) >= ($wk_max$1 | 0)) {
       $24 = $21;
       break L59;
      }
      if ((HEAP32[$wk$2 >> 2] | 0) == ($20 | 0)) HEAP32[$wk$2 >> 2] = $21;
      $k$2 = $k$2 + 1 | 0;
      $wk$2 = $wk$2 + 4 | 0;
     }
    } else {
     HEAP16[$pnt2$3 >> 1] = $20;
     if (($20 | 0) < ($21 | 0)) {
      $k$3 = 0;
      $wk$3 = $arraydecay;
      while (1) {
       if (($k$3 | 0) >= ($wk_max$1 | 0)) {
        $24 = $20;
        break L59;
       }
       if ((HEAP32[$wk$3 >> 2] | 0) == ($21 | 0)) HEAP32[$wk$3 >> 2] = $20;
       $k$3 = $k$3 + 1 | 0;
       $wk$3 = $wk$3 + 4 | 0;
      }
     } else $24 = $20;
    } while (0);
    $25 = ($24 << 16 >> 16) * 7 | 0;
    $arrayidx199 = $labelInfo + 1310736 + ($25 + -7 << 2) | 0;
    HEAP32[$arrayidx199 >> 2] = (HEAP32[$arrayidx199 >> 2] | 0) + 1;
    $arrayidx202 = $labelInfo + 1310736 + ($25 + -6 << 2) | 0;
    HEAP32[$arrayidx202 >> 2] = (HEAP32[$arrayidx202 >> 2] | 0) + $i$2;
    $arrayidx205 = $labelInfo + 1310736 + ($25 + -5 << 2) | 0;
    HEAP32[$arrayidx205 >> 2] = (HEAP32[$arrayidx205 >> 2] | 0) + $j$0;
    $wk_max$3 = $wk_max$1;
   } while (0);
   $i$2 = $i$2 + 1 | 0;
   $pnt$1 = $pnt$1 + 4 | 0;
   $pnt2$3 = $pnt2$3 + 2 | 0;
   $wk_max$1 = $wk_max$3;
  }
  $j$0 = $j$0 + 1 | 0;
  $pnt$0 = $pnt$1 + $mul23 + 8 | 0;
  $pnt2$2 = $pnt2$3 + 4 | 0;
  $wk_max$0 = $wk_max$1;
 }
 L77 : do if ((label | 0) == 50) {
  _arLog(3, 3256, $vararg_buffer);
  $retval$0 = -1;
 } else if ((label | 0) == 56) {
  $arrayidx335 = $labelInfo + 12 | 0;
  $i$3 = 1;
  $j$1 = 1;
  $wk$4 = $arraydecay;
  while (1) {
   if (($i$3 | 0) > ($wk_max$0 | 0)) break;
   $43 = HEAP32[$wk$4 >> 2] | 0;
   if (($43 | 0) == ($i$3 | 0)) {
    $cond = $j$1;
    $j$2 = $j$1 + 1 | 0;
   } else {
    $cond = HEAP32[$labelInfo + 1179664 + ($43 + -1 << 2) >> 2] | 0;
    $j$2 = $j$1;
   }
   HEAP32[$wk$4 >> 2] = $cond;
   $i$3 = $i$3 + 1 | 0;
   $j$1 = $j$2;
   $wk$4 = $wk$4 + 4 | 0;
  }
  $label_num333 = $labelInfo + 8 | 0;
  $sub356 = $j$1 + -1 | 0;
  HEAP32[$label_num333 >> 2] = $sub356;
  if (!$sub356) $retval$0 = 0; else {
   _memset($arrayidx335 | 0, 0, $sub356 << 2 | 0) | 0;
   _memset($labelInfo + 655376 | 0, 0, $sub356 << 4 | 0) | 0;
   $45 = $sub356;
   $i$4 = 0;
   while (1) {
    if (($i$4 | 0) >= ($45 | 0)) {
     $i$5 = 0;
     break;
    }
    $mul368 = $i$4 << 2;
    HEAP32[$labelInfo + 131084 + ($mul368 << 2) >> 2] = $div;
    HEAP32[$labelInfo + 131084 + (($mul368 | 1) << 2) >> 2] = 0;
    HEAP32[$labelInfo + 131084 + (($mul368 | 2) << 2) >> 2] = $div1;
    HEAP32[$labelInfo + 131084 + (($mul368 | 3) << 2) >> 2] = 0;
    $45 = HEAP32[$label_num333 >> 2] | 0;
    $i$4 = $i$4 + 1 | 0;
   }
   while (1) {
    if (($i$5 | 0) >= ($wk_max$0 | 0)) {
     $i$6 = 0;
     break;
    }
    $sub388 = (HEAP32[$labelInfo + 1179664 + ($i$5 << 2) >> 2] | 0) + -1 | 0;
    $mul389 = $i$5 * 7 | 0;
    $arrayidx392 = $labelInfo + 12 + ($sub388 << 2) | 0;
    HEAP32[$arrayidx392 >> 2] = (HEAP32[$arrayidx392 >> 2] | 0) + (HEAP32[$labelInfo + 1310736 + ($mul389 << 2) >> 2] | 0);
    $mul398 = $sub388 << 1;
    $arrayidx400 = $labelInfo + 655376 + ($mul398 << 3) | 0;
    HEAPF64[$arrayidx400 >> 3] = +HEAPF64[$arrayidx400 >> 3] + +(HEAP32[$labelInfo + 1310736 + ($mul389 + 1 << 2) >> 2] | 0);
    $arrayidx408 = $labelInfo + 655376 + (($mul398 | 1) << 3) | 0;
    HEAPF64[$arrayidx408 >> 3] = +HEAPF64[$arrayidx408 >> 3] + +(HEAP32[$labelInfo + 1310736 + ($mul389 + 2 << 2) >> 2] | 0);
    $mul410 = $sub388 << 2;
    $arrayidx412 = $labelInfo + 131084 + ($mul410 << 2) | 0;
    $54 = HEAP32[$labelInfo + 1310736 + ($mul389 + 3 << 2) >> 2] | 0;
    if ((HEAP32[$arrayidx412 >> 2] | 0) > ($54 | 0)) HEAP32[$arrayidx412 >> 2] = $54;
    $arrayidx428 = $labelInfo + 131084 + (($mul410 | 1) << 2) | 0;
    $56 = HEAP32[$labelInfo + 1310736 + ($mul389 + 4 << 2) >> 2] | 0;
    if ((HEAP32[$arrayidx428 >> 2] | 0) < ($56 | 0)) HEAP32[$arrayidx428 >> 2] = $56;
    $arrayidx444 = $labelInfo + 131084 + (($mul410 | 2) << 2) | 0;
    $58 = HEAP32[$labelInfo + 1310736 + ($mul389 + 5 << 2) >> 2] | 0;
    if ((HEAP32[$arrayidx444 >> 2] | 0) > ($58 | 0)) HEAP32[$arrayidx444 >> 2] = $58;
    $arrayidx460 = $labelInfo + 131084 + (($mul410 | 3) << 2) | 0;
    $60 = HEAP32[$labelInfo + 1310736 + ($mul389 + 6 << 2) >> 2] | 0;
    if ((HEAP32[$arrayidx460 >> 2] | 0) < ($60 | 0)) HEAP32[$arrayidx460 >> 2] = $60;
    $i$5 = $i$5 + 1 | 0;
   }
   while (1) {
    if (($i$6 | 0) >= (HEAP32[$label_num333 >> 2] | 0)) {
     $retval$0 = 0;
     break L77;
    }
    $arrayidx481 = $labelInfo + 12 + ($i$6 << 2) | 0;
    $mul483 = $i$6 << 1;
    $arrayidx485 = $labelInfo + 655376 + ($mul483 << 3) | 0;
    HEAPF64[$arrayidx485 >> 3] = +HEAPF64[$arrayidx485 >> 3] / +(HEAP32[$arrayidx481 >> 2] | 0);
    $arrayidx491 = $labelInfo + 655376 + (($mul483 | 1) << 3) | 0;
    HEAPF64[$arrayidx491 >> 3] = +HEAPF64[$arrayidx491 >> 3] / +(HEAP32[$arrayidx481 >> 2] | 0);
    $i$6 = $i$6 + 1 | 0;
   }
  }
 } while (0);
 STACKTOP = sp;
 return $retval$0 | 0;
}

function _arLabelingSubDWI3CA4444($image, $xsize, $ysize, $labelingThresh, $labelInfo) {
 $image = $image | 0;
 $xsize = $xsize | 0;
 $ysize = $ysize | 0;
 $labelingThresh = $labelingThresh | 0;
 $labelInfo = $labelInfo | 0;
 var $$sink = 0, $0 = 0, $10 = 0, $11 = 0, $12 = 0, $15 = 0, $16 = 0, $20 = 0, $21 = 0, $22 = 0, $25 = 0, $26 = 0, $38 = 0, $39 = 0, $4 = 0, $44 = 0, $46 = 0, $5 = 0, $55 = 0, $57 = 0, $59 = 0, $61 = 0, $9 = 0, $add$ptr138 = 0, $add276 = 0, $add281$sink = 0, $arraydecay = 0, $arrayidx127 = 0, $arrayidx130 = 0, $arrayidx133 = 0, $arrayidx194 = 0, $arrayidx197 = 0, $arrayidx200 = 0, $arrayidx208 = 0, $arrayidx211 = 0, $arrayidx214 = 0, $arrayidx217 = 0, $arrayidx239 = 0, $arrayidx242 = 0, $arrayidx245 = 0, $arrayidx248 = 0, $arrayidx268 = 0, $arrayidx271 = 0, $arrayidx274 = 0, $arrayidx330 = 0, $arrayidx387 = 0, $arrayidx395 = 0, $arrayidx403 = 0, $arrayidx407 = 0, $arrayidx423 = 0, $arrayidx439 = 0, $arrayidx455 = 0, $arrayidx476 = 0, $arrayidx48 = 0, $arrayidx480 = 0, $arrayidx486 = 0, $arrayidx57 = 0, $arrayidx60 = 0, $arrayidx63 = 0, $arrayidx80 = 0, $cmp74 = 0, $cond = 0, $conv = 0, $div = 0, $div1 = 0, $i$0 = 0, $i$1 = 0, $i$2 = 0, $i$3 = 0, $i$4 = 0, $i$5 = 0, $i$6 = 0, $inc285 = 0, $j$0 = 0, $j$1 = 0, $j$2 = 0, $k$0 = 0, $k$1 = 0, $k$2 = 0, $k$3 = 0, $label_num328 = 0, $mul = 0, $mul206 = 0, $mul23 = 0, $mul237 = 0, $mul295 = 0, $mul363 = 0, $mul384 = 0, $mul393 = 0, $mul405 = 0, $mul478 = 0, $pnt$0 = 0, $pnt$1 = 0, $pnt1$0 = 0, $pnt1$1 = 0, $pnt2$0 = 0, $pnt2$1 = 0, $pnt2$2 = 0, $pnt2$3 = 0, $retval$0 = 0, $sub = 0, $sub351 = 0, $sub383 = 0, $sub47 = 0, $sub79 = 0, $sub83 = 0, $sub9 = 0, $vararg_buffer = 0, $wk$0 = 0, $wk$1 = 0, $wk$2 = 0, $wk$3 = 0, $wk$4 = 0, $wk_max$0 = 0, $wk_max$1 = 0, $wk_max$2 = 0, $wk_max$3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $vararg_buffer = sp;
 $div = ($xsize | 0) / 2 | 0;
 $div1 = ($ysize | 0) / 2 | 0;
 $0 = HEAP32[$labelInfo >> 2] | 0;
 $sub = $div1 + -1 | 0;
 $i$0 = 0;
 $pnt1$0 = $0;
 $pnt2$0 = $0 + ((Math_imul($sub, $div) | 0) << 1) | 0;
 while (1) {
  if (($i$0 | 0) >= ($div | 0)) break;
  HEAP16[$pnt2$0 >> 1] = 0;
  HEAP16[$pnt1$0 >> 1] = 0;
  $i$0 = $i$0 + 1 | 0;
  $pnt1$0 = $pnt1$0 + 2 | 0;
  $pnt2$0 = $pnt2$0 + 2 | 0;
 }
 $mul = $labelingThresh * 3 | 0;
 $sub9 = $div + -1 | 0;
 $i$1 = 0;
 $pnt1$1 = $0;
 $pnt2$1 = $0 + ($sub9 << 1) | 0;
 while (1) {
  if (($i$1 | 0) >= ($div1 | 0)) break;
  HEAP16[$pnt2$1 >> 1] = 0;
  HEAP16[$pnt1$1 >> 1] = 0;
  $i$1 = $i$1 + 1 | 0;
  $pnt1$1 = $pnt1$1 + ($div << 1) | 0;
  $pnt2$1 = $pnt2$1 + ($div << 1) | 0;
 }
 $arraydecay = $labelInfo + 1179664 | 0;
 $mul23 = $xsize << 1;
 $sub47 = 0 - $div | 0;
 $j$0 = 1;
 $pnt$0 = $image + (($xsize << 2) + 4) | 0;
 $pnt2$2 = $0 + ($div + 1 << 1) | 0;
 $wk_max$0 = 0;
 L9 : while (1) {
  if (($j$0 | 0) < ($sub | 0)) {
   $i$2 = 1;
   $pnt$1 = $pnt$0;
   $pnt2$3 = $pnt2$2;
   $wk_max$1 = $wk_max$0;
  } else {
   label = 56;
   break;
  }
  while (1) {
   if (($i$2 | 0) >= ($sub9 | 0)) break;
   $conv = HEAPU8[$pnt$1 >> 0] | 0;
   do if ((($conv & 240) + 24 + ($conv << 4 & 240) + (HEAP8[$pnt$1 + 1 >> 0] & -16 & 255) | 0) > ($mul | 0)) {
    $arrayidx48 = $pnt2$3 + ($sub47 << 1) | 0;
    $4 = HEAP16[$arrayidx48 >> 1] | 0;
    if ($4 << 16 >> 16 > 0) {
     HEAP16[$pnt2$3 >> 1] = $4;
     $5 = ($4 << 16 >> 16) * 7 | 0;
     $arrayidx57 = $labelInfo + 1310736 + ($5 + -7 << 2) | 0;
     HEAP32[$arrayidx57 >> 2] = (HEAP32[$arrayidx57 >> 2] | 0) + 1;
     $arrayidx60 = $labelInfo + 1310736 + ($5 + -6 << 2) | 0;
     HEAP32[$arrayidx60 >> 2] = (HEAP32[$arrayidx60 >> 2] | 0) + $i$2;
     $arrayidx63 = $labelInfo + 1310736 + ($5 + -5 << 2) | 0;
     HEAP32[$arrayidx63 >> 2] = (HEAP32[$arrayidx63 >> 2] | 0) + $j$0;
     HEAP32[$labelInfo + 1310736 + ($5 + -1 << 2) >> 2] = $j$0;
     $wk_max$3 = $wk_max$1;
     break;
    }
    $9 = HEAP16[$arrayidx48 + 2 >> 1] | 0;
    $10 = HEAP16[$arrayidx48 + -2 >> 1] | 0;
    $cmp74 = $10 << 16 >> 16 > 0;
    $add$ptr138 = $pnt2$3 + -2 | 0;
    $sub83 = ($10 << 16 >> 16) + -1 | 0;
    if ($9 << 16 >> 16 <= 0) {
     if ($cmp74) {
      HEAP16[$pnt2$3 >> 1] = $10;
      $mul237 = $sub83 * 7 | 0;
      $arrayidx239 = $labelInfo + 1310736 + ($mul237 << 2) | 0;
      HEAP32[$arrayidx239 >> 2] = (HEAP32[$arrayidx239 >> 2] | 0) + 1;
      $arrayidx242 = $labelInfo + 1310736 + ($mul237 + 1 << 2) | 0;
      HEAP32[$arrayidx242 >> 2] = (HEAP32[$arrayidx242 >> 2] | 0) + $i$2;
      $arrayidx245 = $labelInfo + 1310736 + ($mul237 + 2 << 2) | 0;
      HEAP32[$arrayidx245 >> 2] = (HEAP32[$arrayidx245 >> 2] | 0) + $j$0;
      $arrayidx248 = $labelInfo + 1310736 + ($mul237 + 4 << 2) | 0;
      if ((HEAP32[$arrayidx248 >> 2] | 0) < ($i$2 | 0)) HEAP32[$arrayidx248 >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($mul237 + 6 << 2) >> 2] = $j$0;
      $wk_max$3 = $wk_max$1;
      break;
     }
     $38 = HEAP16[$add$ptr138 >> 1] | 0;
     if ($38 << 16 >> 16 > 0) {
      HEAP16[$pnt2$3 >> 1] = $38;
      $39 = ($38 << 16 >> 16) * 7 | 0;
      $arrayidx268 = $labelInfo + 1310736 + ($39 + -7 << 2) | 0;
      HEAP32[$arrayidx268 >> 2] = (HEAP32[$arrayidx268 >> 2] | 0) + 1;
      $arrayidx271 = $labelInfo + 1310736 + ($39 + -6 << 2) | 0;
      HEAP32[$arrayidx271 >> 2] = (HEAP32[$arrayidx271 >> 2] | 0) + $i$2;
      $arrayidx274 = $labelInfo + 1310736 + ($39 + -5 << 2) | 0;
      HEAP32[$arrayidx274 >> 2] = (HEAP32[$arrayidx274 >> 2] | 0) + $j$0;
      $add276 = $39 + -3 | 0;
      if ((HEAP32[$labelInfo + 1310736 + ($add276 << 2) >> 2] | 0) < ($i$2 | 0)) {
       $$sink = $i$2;
       $add281$sink = $add276;
       $wk_max$2 = $wk_max$1;
      } else {
       $wk_max$3 = $wk_max$1;
       break;
      }
     } else {
      $inc285 = $wk_max$1 + 1 | 0;
      if (($wk_max$1 | 0) > 32767) {
       label = 50;
       break L9;
      }
      HEAP16[$pnt2$3 >> 1] = $inc285;
      HEAP32[$labelInfo + 1179664 + ($wk_max$1 << 2) >> 2] = $inc285 << 16 >> 16;
      $mul295 = $wk_max$1 * 7 | 0;
      HEAP32[$labelInfo + 1310736 + ($mul295 << 2) >> 2] = 1;
      HEAP32[$labelInfo + 1310736 + ($mul295 + 1 << 2) >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($mul295 + 2 << 2) >> 2] = $j$0;
      HEAP32[$labelInfo + 1310736 + ($mul295 + 3 << 2) >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($mul295 + 4 << 2) >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($mul295 + 5 << 2) >> 2] = $j$0;
      $$sink = $j$0;
      $add281$sink = $mul295 + 6 | 0;
      $wk_max$2 = $inc285;
     }
     HEAP32[$labelInfo + 1310736 + ($add281$sink << 2) >> 2] = $$sink;
     $wk_max$3 = $wk_max$2;
     break;
    }
    $sub79 = ($9 << 16 >> 16) + -1 | 0;
    $arrayidx80 = $labelInfo + 1179664 + ($sub79 << 2) | 0;
    if ($cmp74) {
     $11 = HEAP32[$arrayidx80 >> 2] | 0;
     $12 = HEAP32[$labelInfo + 1179664 + ($sub83 << 2) >> 2] | 0;
     L35 : do if (($11 | 0) > ($12 | 0)) {
      HEAP16[$pnt2$3 >> 1] = $12;
      $k$0 = 0;
      $wk$0 = $arraydecay;
      while (1) {
       if (($k$0 | 0) >= ($wk_max$1 | 0)) {
        $15 = $12;
        break L35;
       }
       if ((HEAP32[$wk$0 >> 2] | 0) == ($11 | 0)) HEAP32[$wk$0 >> 2] = $12;
       $k$0 = $k$0 + 1 | 0;
       $wk$0 = $wk$0 + 4 | 0;
      }
     } else {
      HEAP16[$pnt2$3 >> 1] = $11;
      if (($11 | 0) < ($12 | 0)) {
       $k$1 = 0;
       $wk$1 = $arraydecay;
       while (1) {
        if (($k$1 | 0) >= ($wk_max$1 | 0)) {
         $15 = $11;
         break L35;
        }
        if ((HEAP32[$wk$1 >> 2] | 0) == ($12 | 0)) HEAP32[$wk$1 >> 2] = $11;
        $k$1 = $k$1 + 1 | 0;
        $wk$1 = $wk$1 + 4 | 0;
       }
      } else $15 = $11;
     } while (0);
     $16 = ($15 << 16 >> 16) * 7 | 0;
     $arrayidx127 = $labelInfo + 1310736 + ($16 + -7 << 2) | 0;
     HEAP32[$arrayidx127 >> 2] = (HEAP32[$arrayidx127 >> 2] | 0) + 1;
     $arrayidx130 = $labelInfo + 1310736 + ($16 + -6 << 2) | 0;
     HEAP32[$arrayidx130 >> 2] = (HEAP32[$arrayidx130 >> 2] | 0) + $i$2;
     $arrayidx133 = $labelInfo + 1310736 + ($16 + -5 << 2) | 0;
     HEAP32[$arrayidx133 >> 2] = (HEAP32[$arrayidx133 >> 2] | 0) + $j$0;
     HEAP32[$labelInfo + 1310736 + ($16 + -1 << 2) >> 2] = $j$0;
     $wk_max$3 = $wk_max$1;
     break;
    }
    $20 = HEAP16[$add$ptr138 >> 1] | 0;
    if ($20 << 16 >> 16 <= 0) {
     HEAP16[$pnt2$3 >> 1] = $9;
     $mul206 = $sub79 * 7 | 0;
     $arrayidx208 = $labelInfo + 1310736 + ($mul206 << 2) | 0;
     HEAP32[$arrayidx208 >> 2] = (HEAP32[$arrayidx208 >> 2] | 0) + 1;
     $arrayidx211 = $labelInfo + 1310736 + ($mul206 + 1 << 2) | 0;
     HEAP32[$arrayidx211 >> 2] = (HEAP32[$arrayidx211 >> 2] | 0) + $i$2;
     $arrayidx214 = $labelInfo + 1310736 + ($mul206 + 2 << 2) | 0;
     HEAP32[$arrayidx214 >> 2] = (HEAP32[$arrayidx214 >> 2] | 0) + $j$0;
     $arrayidx217 = $labelInfo + 1310736 + ($mul206 + 3 << 2) | 0;
     if ((HEAP32[$arrayidx217 >> 2] | 0) > ($i$2 | 0)) HEAP32[$arrayidx217 >> 2] = $i$2;
     HEAP32[$labelInfo + 1310736 + ($mul206 + 6 << 2) >> 2] = $j$0;
     $wk_max$3 = $wk_max$1;
     break;
    }
    $21 = HEAP32[$arrayidx80 >> 2] | 0;
    $22 = HEAP32[$labelInfo + 1179664 + (($20 << 16 >> 16) + -1 << 2) >> 2] | 0;
    L58 : do if (($21 | 0) > ($22 | 0)) {
     HEAP16[$pnt2$3 >> 1] = $22;
     $k$2 = 0;
     $wk$2 = $arraydecay;
     while (1) {
      if (($k$2 | 0) >= ($wk_max$1 | 0)) {
       $25 = $22;
       break L58;
      }
      if ((HEAP32[$wk$2 >> 2] | 0) == ($21 | 0)) HEAP32[$wk$2 >> 2] = $22;
      $k$2 = $k$2 + 1 | 0;
      $wk$2 = $wk$2 + 4 | 0;
     }
    } else {
     HEAP16[$pnt2$3 >> 1] = $21;
     if (($21 | 0) < ($22 | 0)) {
      $k$3 = 0;
      $wk$3 = $arraydecay;
      while (1) {
       if (($k$3 | 0) >= ($wk_max$1 | 0)) {
        $25 = $21;
        break L58;
       }
       if ((HEAP32[$wk$3 >> 2] | 0) == ($22 | 0)) HEAP32[$wk$3 >> 2] = $21;
       $k$3 = $k$3 + 1 | 0;
       $wk$3 = $wk$3 + 4 | 0;
      }
     } else $25 = $21;
    } while (0);
    $26 = ($25 << 16 >> 16) * 7 | 0;
    $arrayidx194 = $labelInfo + 1310736 + ($26 + -7 << 2) | 0;
    HEAP32[$arrayidx194 >> 2] = (HEAP32[$arrayidx194 >> 2] | 0) + 1;
    $arrayidx197 = $labelInfo + 1310736 + ($26 + -6 << 2) | 0;
    HEAP32[$arrayidx197 >> 2] = (HEAP32[$arrayidx197 >> 2] | 0) + $i$2;
    $arrayidx200 = $labelInfo + 1310736 + ($26 + -5 << 2) | 0;
    HEAP32[$arrayidx200 >> 2] = (HEAP32[$arrayidx200 >> 2] | 0) + $j$0;
    $wk_max$3 = $wk_max$1;
   } else {
    HEAP16[$pnt2$3 >> 1] = 0;
    $wk_max$3 = $wk_max$1;
   } while (0);
   $i$2 = $i$2 + 1 | 0;
   $pnt$1 = $pnt$1 + 4 | 0;
   $pnt2$3 = $pnt2$3 + 2 | 0;
   $wk_max$1 = $wk_max$3;
  }
  $j$0 = $j$0 + 1 | 0;
  $pnt$0 = $pnt$1 + $mul23 + 8 | 0;
  $pnt2$2 = $pnt2$3 + 4 | 0;
  $wk_max$0 = $wk_max$1;
 }
 L77 : do if ((label | 0) == 50) {
  _arLog(3, 3256, $vararg_buffer);
  $retval$0 = -1;
 } else if ((label | 0) == 56) {
  $arrayidx330 = $labelInfo + 12 | 0;
  $i$3 = 1;
  $j$1 = 1;
  $wk$4 = $arraydecay;
  while (1) {
   if (($i$3 | 0) > ($wk_max$0 | 0)) break;
   $44 = HEAP32[$wk$4 >> 2] | 0;
   if (($44 | 0) == ($i$3 | 0)) {
    $cond = $j$1;
    $j$2 = $j$1 + 1 | 0;
   } else {
    $cond = HEAP32[$labelInfo + 1179664 + ($44 + -1 << 2) >> 2] | 0;
    $j$2 = $j$1;
   }
   HEAP32[$wk$4 >> 2] = $cond;
   $i$3 = $i$3 + 1 | 0;
   $j$1 = $j$2;
   $wk$4 = $wk$4 + 4 | 0;
  }
  $label_num328 = $labelInfo + 8 | 0;
  $sub351 = $j$1 + -1 | 0;
  HEAP32[$label_num328 >> 2] = $sub351;
  if (!$sub351) $retval$0 = 0; else {
   _memset($arrayidx330 | 0, 0, $sub351 << 2 | 0) | 0;
   _memset($labelInfo + 655376 | 0, 0, $sub351 << 4 | 0) | 0;
   $46 = $sub351;
   $i$4 = 0;
   while (1) {
    if (($i$4 | 0) >= ($46 | 0)) {
     $i$5 = 0;
     break;
    }
    $mul363 = $i$4 << 2;
    HEAP32[$labelInfo + 131084 + ($mul363 << 2) >> 2] = $div;
    HEAP32[$labelInfo + 131084 + (($mul363 | 1) << 2) >> 2] = 0;
    HEAP32[$labelInfo + 131084 + (($mul363 | 2) << 2) >> 2] = $div1;
    HEAP32[$labelInfo + 131084 + (($mul363 | 3) << 2) >> 2] = 0;
    $46 = HEAP32[$label_num328 >> 2] | 0;
    $i$4 = $i$4 + 1 | 0;
   }
   while (1) {
    if (($i$5 | 0) >= ($wk_max$0 | 0)) {
     $i$6 = 0;
     break;
    }
    $sub383 = (HEAP32[$labelInfo + 1179664 + ($i$5 << 2) >> 2] | 0) + -1 | 0;
    $mul384 = $i$5 * 7 | 0;
    $arrayidx387 = $labelInfo + 12 + ($sub383 << 2) | 0;
    HEAP32[$arrayidx387 >> 2] = (HEAP32[$arrayidx387 >> 2] | 0) + (HEAP32[$labelInfo + 1310736 + ($mul384 << 2) >> 2] | 0);
    $mul393 = $sub383 << 1;
    $arrayidx395 = $labelInfo + 655376 + ($mul393 << 3) | 0;
    HEAPF64[$arrayidx395 >> 3] = +HEAPF64[$arrayidx395 >> 3] + +(HEAP32[$labelInfo + 1310736 + ($mul384 + 1 << 2) >> 2] | 0);
    $arrayidx403 = $labelInfo + 655376 + (($mul393 | 1) << 3) | 0;
    HEAPF64[$arrayidx403 >> 3] = +HEAPF64[$arrayidx403 >> 3] + +(HEAP32[$labelInfo + 1310736 + ($mul384 + 2 << 2) >> 2] | 0);
    $mul405 = $sub383 << 2;
    $arrayidx407 = $labelInfo + 131084 + ($mul405 << 2) | 0;
    $55 = HEAP32[$labelInfo + 1310736 + ($mul384 + 3 << 2) >> 2] | 0;
    if ((HEAP32[$arrayidx407 >> 2] | 0) > ($55 | 0)) HEAP32[$arrayidx407 >> 2] = $55;
    $arrayidx423 = $labelInfo + 131084 + (($mul405 | 1) << 2) | 0;
    $57 = HEAP32[$labelInfo + 1310736 + ($mul384 + 4 << 2) >> 2] | 0;
    if ((HEAP32[$arrayidx423 >> 2] | 0) < ($57 | 0)) HEAP32[$arrayidx423 >> 2] = $57;
    $arrayidx439 = $labelInfo + 131084 + (($mul405 | 2) << 2) | 0;
    $59 = HEAP32[$labelInfo + 1310736 + ($mul384 + 5 << 2) >> 2] | 0;
    if ((HEAP32[$arrayidx439 >> 2] | 0) > ($59 | 0)) HEAP32[$arrayidx439 >> 2] = $59;
    $arrayidx455 = $labelInfo + 131084 + (($mul405 | 3) << 2) | 0;
    $61 = HEAP32[$labelInfo + 1310736 + ($mul384 + 6 << 2) >> 2] | 0;
    if ((HEAP32[$arrayidx455 >> 2] | 0) < ($61 | 0)) HEAP32[$arrayidx455 >> 2] = $61;
    $i$5 = $i$5 + 1 | 0;
   }
   while (1) {
    if (($i$6 | 0) >= (HEAP32[$label_num328 >> 2] | 0)) {
     $retval$0 = 0;
     break L77;
    }
    $arrayidx476 = $labelInfo + 12 + ($i$6 << 2) | 0;
    $mul478 = $i$6 << 1;
    $arrayidx480 = $labelInfo + 655376 + ($mul478 << 3) | 0;
    HEAPF64[$arrayidx480 >> 3] = +HEAPF64[$arrayidx480 >> 3] / +(HEAP32[$arrayidx476 >> 2] | 0);
    $arrayidx486 = $labelInfo + 655376 + (($mul478 | 1) << 3) | 0;
    HEAPF64[$arrayidx486 >> 3] = +HEAPF64[$arrayidx486 >> 3] / +(HEAP32[$arrayidx476 >> 2] | 0);
    $i$6 = $i$6 + 1 | 0;
   }
  }
 } while (0);
 STACKTOP = sp;
 return $retval$0 | 0;
}

function _arLabelingSubDBI3CA4444($image, $xsize, $ysize, $labelingThresh, $labelInfo) {
 $image = $image | 0;
 $xsize = $xsize | 0;
 $ysize = $ysize | 0;
 $labelingThresh = $labelingThresh | 0;
 $labelInfo = $labelInfo | 0;
 var $$sink = 0, $0 = 0, $10 = 0, $11 = 0, $12 = 0, $15 = 0, $16 = 0, $20 = 0, $21 = 0, $22 = 0, $25 = 0, $26 = 0, $38 = 0, $39 = 0, $4 = 0, $44 = 0, $46 = 0, $5 = 0, $55 = 0, $57 = 0, $59 = 0, $61 = 0, $9 = 0, $add$ptr138 = 0, $add276 = 0, $add281$sink = 0, $arraydecay = 0, $arrayidx127 = 0, $arrayidx130 = 0, $arrayidx133 = 0, $arrayidx194 = 0, $arrayidx197 = 0, $arrayidx200 = 0, $arrayidx208 = 0, $arrayidx211 = 0, $arrayidx214 = 0, $arrayidx217 = 0, $arrayidx239 = 0, $arrayidx242 = 0, $arrayidx245 = 0, $arrayidx248 = 0, $arrayidx268 = 0, $arrayidx271 = 0, $arrayidx274 = 0, $arrayidx330 = 0, $arrayidx387 = 0, $arrayidx395 = 0, $arrayidx403 = 0, $arrayidx407 = 0, $arrayidx423 = 0, $arrayidx439 = 0, $arrayidx455 = 0, $arrayidx476 = 0, $arrayidx48 = 0, $arrayidx480 = 0, $arrayidx486 = 0, $arrayidx57 = 0, $arrayidx60 = 0, $arrayidx63 = 0, $arrayidx80 = 0, $cmp74 = 0, $cond = 0, $conv = 0, $div = 0, $div1 = 0, $i$0 = 0, $i$1 = 0, $i$2 = 0, $i$3 = 0, $i$4 = 0, $i$5 = 0, $i$6 = 0, $inc285 = 0, $j$0 = 0, $j$1 = 0, $j$2 = 0, $k$0 = 0, $k$1 = 0, $k$2 = 0, $k$3 = 0, $label_num328 = 0, $mul = 0, $mul206 = 0, $mul23 = 0, $mul237 = 0, $mul295 = 0, $mul363 = 0, $mul384 = 0, $mul393 = 0, $mul405 = 0, $mul478 = 0, $pnt$0 = 0, $pnt$1 = 0, $pnt1$0 = 0, $pnt1$1 = 0, $pnt2$0 = 0, $pnt2$1 = 0, $pnt2$2 = 0, $pnt2$3 = 0, $retval$0 = 0, $sub = 0, $sub351 = 0, $sub383 = 0, $sub47 = 0, $sub79 = 0, $sub83 = 0, $sub9 = 0, $vararg_buffer = 0, $wk$0 = 0, $wk$1 = 0, $wk$2 = 0, $wk$3 = 0, $wk$4 = 0, $wk_max$0 = 0, $wk_max$1 = 0, $wk_max$2 = 0, $wk_max$3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $vararg_buffer = sp;
 $div = ($xsize | 0) / 2 | 0;
 $div1 = ($ysize | 0) / 2 | 0;
 $0 = HEAP32[$labelInfo >> 2] | 0;
 $sub = $div1 + -1 | 0;
 $i$0 = 0;
 $pnt1$0 = $0;
 $pnt2$0 = $0 + ((Math_imul($sub, $div) | 0) << 1) | 0;
 while (1) {
  if (($i$0 | 0) >= ($div | 0)) break;
  HEAP16[$pnt2$0 >> 1] = 0;
  HEAP16[$pnt1$0 >> 1] = 0;
  $i$0 = $i$0 + 1 | 0;
  $pnt1$0 = $pnt1$0 + 2 | 0;
  $pnt2$0 = $pnt2$0 + 2 | 0;
 }
 $mul = $labelingThresh * 3 | 0;
 $sub9 = $div + -1 | 0;
 $i$1 = 0;
 $pnt1$1 = $0;
 $pnt2$1 = $0 + ($sub9 << 1) | 0;
 while (1) {
  if (($i$1 | 0) >= ($div1 | 0)) break;
  HEAP16[$pnt2$1 >> 1] = 0;
  HEAP16[$pnt1$1 >> 1] = 0;
  $i$1 = $i$1 + 1 | 0;
  $pnt1$1 = $pnt1$1 + ($div << 1) | 0;
  $pnt2$1 = $pnt2$1 + ($div << 1) | 0;
 }
 $arraydecay = $labelInfo + 1179664 | 0;
 $mul23 = $xsize << 1;
 $sub47 = 0 - $div | 0;
 $j$0 = 1;
 $pnt$0 = $image + (($xsize << 2) + 4) | 0;
 $pnt2$2 = $0 + ($div + 1 << 1) | 0;
 $wk_max$0 = 0;
 L9 : while (1) {
  if (($j$0 | 0) < ($sub | 0)) {
   $i$2 = 1;
   $pnt$1 = $pnt$0;
   $pnt2$3 = $pnt2$2;
   $wk_max$1 = $wk_max$0;
  } else {
   label = 56;
   break;
  }
  while (1) {
   if (($i$2 | 0) >= ($sub9 | 0)) break;
   $conv = HEAPU8[$pnt$1 >> 0] | 0;
   do if ((($conv & 240) + 24 + ($conv << 4 & 240) + (HEAP8[$pnt$1 + 1 >> 0] & -16 & 255) | 0) > ($mul | 0)) {
    HEAP16[$pnt2$3 >> 1] = 0;
    $wk_max$3 = $wk_max$1;
   } else {
    $arrayidx48 = $pnt2$3 + ($sub47 << 1) | 0;
    $4 = HEAP16[$arrayidx48 >> 1] | 0;
    if ($4 << 16 >> 16 > 0) {
     HEAP16[$pnt2$3 >> 1] = $4;
     $5 = ($4 << 16 >> 16) * 7 | 0;
     $arrayidx57 = $labelInfo + 1310736 + ($5 + -7 << 2) | 0;
     HEAP32[$arrayidx57 >> 2] = (HEAP32[$arrayidx57 >> 2] | 0) + 1;
     $arrayidx60 = $labelInfo + 1310736 + ($5 + -6 << 2) | 0;
     HEAP32[$arrayidx60 >> 2] = (HEAP32[$arrayidx60 >> 2] | 0) + $i$2;
     $arrayidx63 = $labelInfo + 1310736 + ($5 + -5 << 2) | 0;
     HEAP32[$arrayidx63 >> 2] = (HEAP32[$arrayidx63 >> 2] | 0) + $j$0;
     HEAP32[$labelInfo + 1310736 + ($5 + -1 << 2) >> 2] = $j$0;
     $wk_max$3 = $wk_max$1;
     break;
    }
    $9 = HEAP16[$arrayidx48 + 2 >> 1] | 0;
    $10 = HEAP16[$arrayidx48 + -2 >> 1] | 0;
    $cmp74 = $10 << 16 >> 16 > 0;
    $add$ptr138 = $pnt2$3 + -2 | 0;
    $sub83 = ($10 << 16 >> 16) + -1 | 0;
    if ($9 << 16 >> 16 <= 0) {
     if ($cmp74) {
      HEAP16[$pnt2$3 >> 1] = $10;
      $mul237 = $sub83 * 7 | 0;
      $arrayidx239 = $labelInfo + 1310736 + ($mul237 << 2) | 0;
      HEAP32[$arrayidx239 >> 2] = (HEAP32[$arrayidx239 >> 2] | 0) + 1;
      $arrayidx242 = $labelInfo + 1310736 + ($mul237 + 1 << 2) | 0;
      HEAP32[$arrayidx242 >> 2] = (HEAP32[$arrayidx242 >> 2] | 0) + $i$2;
      $arrayidx245 = $labelInfo + 1310736 + ($mul237 + 2 << 2) | 0;
      HEAP32[$arrayidx245 >> 2] = (HEAP32[$arrayidx245 >> 2] | 0) + $j$0;
      $arrayidx248 = $labelInfo + 1310736 + ($mul237 + 4 << 2) | 0;
      if ((HEAP32[$arrayidx248 >> 2] | 0) < ($i$2 | 0)) HEAP32[$arrayidx248 >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($mul237 + 6 << 2) >> 2] = $j$0;
      $wk_max$3 = $wk_max$1;
      break;
     }
     $38 = HEAP16[$add$ptr138 >> 1] | 0;
     if ($38 << 16 >> 16 > 0) {
      HEAP16[$pnt2$3 >> 1] = $38;
      $39 = ($38 << 16 >> 16) * 7 | 0;
      $arrayidx268 = $labelInfo + 1310736 + ($39 + -7 << 2) | 0;
      HEAP32[$arrayidx268 >> 2] = (HEAP32[$arrayidx268 >> 2] | 0) + 1;
      $arrayidx271 = $labelInfo + 1310736 + ($39 + -6 << 2) | 0;
      HEAP32[$arrayidx271 >> 2] = (HEAP32[$arrayidx271 >> 2] | 0) + $i$2;
      $arrayidx274 = $labelInfo + 1310736 + ($39 + -5 << 2) | 0;
      HEAP32[$arrayidx274 >> 2] = (HEAP32[$arrayidx274 >> 2] | 0) + $j$0;
      $add276 = $39 + -3 | 0;
      if ((HEAP32[$labelInfo + 1310736 + ($add276 << 2) >> 2] | 0) < ($i$2 | 0)) {
       $$sink = $i$2;
       $add281$sink = $add276;
       $wk_max$2 = $wk_max$1;
      } else {
       $wk_max$3 = $wk_max$1;
       break;
      }
     } else {
      $inc285 = $wk_max$1 + 1 | 0;
      if (($wk_max$1 | 0) > 32767) {
       label = 50;
       break L9;
      }
      HEAP16[$pnt2$3 >> 1] = $inc285;
      HEAP32[$labelInfo + 1179664 + ($wk_max$1 << 2) >> 2] = $inc285 << 16 >> 16;
      $mul295 = $wk_max$1 * 7 | 0;
      HEAP32[$labelInfo + 1310736 + ($mul295 << 2) >> 2] = 1;
      HEAP32[$labelInfo + 1310736 + ($mul295 + 1 << 2) >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($mul295 + 2 << 2) >> 2] = $j$0;
      HEAP32[$labelInfo + 1310736 + ($mul295 + 3 << 2) >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($mul295 + 4 << 2) >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($mul295 + 5 << 2) >> 2] = $j$0;
      $$sink = $j$0;
      $add281$sink = $mul295 + 6 | 0;
      $wk_max$2 = $inc285;
     }
     HEAP32[$labelInfo + 1310736 + ($add281$sink << 2) >> 2] = $$sink;
     $wk_max$3 = $wk_max$2;
     break;
    }
    $sub79 = ($9 << 16 >> 16) + -1 | 0;
    $arrayidx80 = $labelInfo + 1179664 + ($sub79 << 2) | 0;
    if ($cmp74) {
     $11 = HEAP32[$arrayidx80 >> 2] | 0;
     $12 = HEAP32[$labelInfo + 1179664 + ($sub83 << 2) >> 2] | 0;
     L36 : do if (($11 | 0) > ($12 | 0)) {
      HEAP16[$pnt2$3 >> 1] = $12;
      $k$0 = 0;
      $wk$0 = $arraydecay;
      while (1) {
       if (($k$0 | 0) >= ($wk_max$1 | 0)) {
        $15 = $12;
        break L36;
       }
       if ((HEAP32[$wk$0 >> 2] | 0) == ($11 | 0)) HEAP32[$wk$0 >> 2] = $12;
       $k$0 = $k$0 + 1 | 0;
       $wk$0 = $wk$0 + 4 | 0;
      }
     } else {
      HEAP16[$pnt2$3 >> 1] = $11;
      if (($11 | 0) < ($12 | 0)) {
       $k$1 = 0;
       $wk$1 = $arraydecay;
       while (1) {
        if (($k$1 | 0) >= ($wk_max$1 | 0)) {
         $15 = $11;
         break L36;
        }
        if ((HEAP32[$wk$1 >> 2] | 0) == ($12 | 0)) HEAP32[$wk$1 >> 2] = $11;
        $k$1 = $k$1 + 1 | 0;
        $wk$1 = $wk$1 + 4 | 0;
       }
      } else $15 = $11;
     } while (0);
     $16 = ($15 << 16 >> 16) * 7 | 0;
     $arrayidx127 = $labelInfo + 1310736 + ($16 + -7 << 2) | 0;
     HEAP32[$arrayidx127 >> 2] = (HEAP32[$arrayidx127 >> 2] | 0) + 1;
     $arrayidx130 = $labelInfo + 1310736 + ($16 + -6 << 2) | 0;
     HEAP32[$arrayidx130 >> 2] = (HEAP32[$arrayidx130 >> 2] | 0) + $i$2;
     $arrayidx133 = $labelInfo + 1310736 + ($16 + -5 << 2) | 0;
     HEAP32[$arrayidx133 >> 2] = (HEAP32[$arrayidx133 >> 2] | 0) + $j$0;
     HEAP32[$labelInfo + 1310736 + ($16 + -1 << 2) >> 2] = $j$0;
     $wk_max$3 = $wk_max$1;
     break;
    }
    $20 = HEAP16[$add$ptr138 >> 1] | 0;
    if ($20 << 16 >> 16 <= 0) {
     HEAP16[$pnt2$3 >> 1] = $9;
     $mul206 = $sub79 * 7 | 0;
     $arrayidx208 = $labelInfo + 1310736 + ($mul206 << 2) | 0;
     HEAP32[$arrayidx208 >> 2] = (HEAP32[$arrayidx208 >> 2] | 0) + 1;
     $arrayidx211 = $labelInfo + 1310736 + ($mul206 + 1 << 2) | 0;
     HEAP32[$arrayidx211 >> 2] = (HEAP32[$arrayidx211 >> 2] | 0) + $i$2;
     $arrayidx214 = $labelInfo + 1310736 + ($mul206 + 2 << 2) | 0;
     HEAP32[$arrayidx214 >> 2] = (HEAP32[$arrayidx214 >> 2] | 0) + $j$0;
     $arrayidx217 = $labelInfo + 1310736 + ($mul206 + 3 << 2) | 0;
     if ((HEAP32[$arrayidx217 >> 2] | 0) > ($i$2 | 0)) HEAP32[$arrayidx217 >> 2] = $i$2;
     HEAP32[$labelInfo + 1310736 + ($mul206 + 6 << 2) >> 2] = $j$0;
     $wk_max$3 = $wk_max$1;
     break;
    }
    $21 = HEAP32[$arrayidx80 >> 2] | 0;
    $22 = HEAP32[$labelInfo + 1179664 + (($20 << 16 >> 16) + -1 << 2) >> 2] | 0;
    L59 : do if (($21 | 0) > ($22 | 0)) {
     HEAP16[$pnt2$3 >> 1] = $22;
     $k$2 = 0;
     $wk$2 = $arraydecay;
     while (1) {
      if (($k$2 | 0) >= ($wk_max$1 | 0)) {
       $25 = $22;
       break L59;
      }
      if ((HEAP32[$wk$2 >> 2] | 0) == ($21 | 0)) HEAP32[$wk$2 >> 2] = $22;
      $k$2 = $k$2 + 1 | 0;
      $wk$2 = $wk$2 + 4 | 0;
     }
    } else {
     HEAP16[$pnt2$3 >> 1] = $21;
     if (($21 | 0) < ($22 | 0)) {
      $k$3 = 0;
      $wk$3 = $arraydecay;
      while (1) {
       if (($k$3 | 0) >= ($wk_max$1 | 0)) {
        $25 = $21;
        break L59;
       }
       if ((HEAP32[$wk$3 >> 2] | 0) == ($22 | 0)) HEAP32[$wk$3 >> 2] = $21;
       $k$3 = $k$3 + 1 | 0;
       $wk$3 = $wk$3 + 4 | 0;
      }
     } else $25 = $21;
    } while (0);
    $26 = ($25 << 16 >> 16) * 7 | 0;
    $arrayidx194 = $labelInfo + 1310736 + ($26 + -7 << 2) | 0;
    HEAP32[$arrayidx194 >> 2] = (HEAP32[$arrayidx194 >> 2] | 0) + 1;
    $arrayidx197 = $labelInfo + 1310736 + ($26 + -6 << 2) | 0;
    HEAP32[$arrayidx197 >> 2] = (HEAP32[$arrayidx197 >> 2] | 0) + $i$2;
    $arrayidx200 = $labelInfo + 1310736 + ($26 + -5 << 2) | 0;
    HEAP32[$arrayidx200 >> 2] = (HEAP32[$arrayidx200 >> 2] | 0) + $j$0;
    $wk_max$3 = $wk_max$1;
   } while (0);
   $i$2 = $i$2 + 1 | 0;
   $pnt$1 = $pnt$1 + 4 | 0;
   $pnt2$3 = $pnt2$3 + 2 | 0;
   $wk_max$1 = $wk_max$3;
  }
  $j$0 = $j$0 + 1 | 0;
  $pnt$0 = $pnt$1 + $mul23 + 8 | 0;
  $pnt2$2 = $pnt2$3 + 4 | 0;
  $wk_max$0 = $wk_max$1;
 }
 L77 : do if ((label | 0) == 50) {
  _arLog(3, 3256, $vararg_buffer);
  $retval$0 = -1;
 } else if ((label | 0) == 56) {
  $arrayidx330 = $labelInfo + 12 | 0;
  $i$3 = 1;
  $j$1 = 1;
  $wk$4 = $arraydecay;
  while (1) {
   if (($i$3 | 0) > ($wk_max$0 | 0)) break;
   $44 = HEAP32[$wk$4 >> 2] | 0;
   if (($44 | 0) == ($i$3 | 0)) {
    $cond = $j$1;
    $j$2 = $j$1 + 1 | 0;
   } else {
    $cond = HEAP32[$labelInfo + 1179664 + ($44 + -1 << 2) >> 2] | 0;
    $j$2 = $j$1;
   }
   HEAP32[$wk$4 >> 2] = $cond;
   $i$3 = $i$3 + 1 | 0;
   $j$1 = $j$2;
   $wk$4 = $wk$4 + 4 | 0;
  }
  $label_num328 = $labelInfo + 8 | 0;
  $sub351 = $j$1 + -1 | 0;
  HEAP32[$label_num328 >> 2] = $sub351;
  if (!$sub351) $retval$0 = 0; else {
   _memset($arrayidx330 | 0, 0, $sub351 << 2 | 0) | 0;
   _memset($labelInfo + 655376 | 0, 0, $sub351 << 4 | 0) | 0;
   $46 = $sub351;
   $i$4 = 0;
   while (1) {
    if (($i$4 | 0) >= ($46 | 0)) {
     $i$5 = 0;
     break;
    }
    $mul363 = $i$4 << 2;
    HEAP32[$labelInfo + 131084 + ($mul363 << 2) >> 2] = $div;
    HEAP32[$labelInfo + 131084 + (($mul363 | 1) << 2) >> 2] = 0;
    HEAP32[$labelInfo + 131084 + (($mul363 | 2) << 2) >> 2] = $div1;
    HEAP32[$labelInfo + 131084 + (($mul363 | 3) << 2) >> 2] = 0;
    $46 = HEAP32[$label_num328 >> 2] | 0;
    $i$4 = $i$4 + 1 | 0;
   }
   while (1) {
    if (($i$5 | 0) >= ($wk_max$0 | 0)) {
     $i$6 = 0;
     break;
    }
    $sub383 = (HEAP32[$labelInfo + 1179664 + ($i$5 << 2) >> 2] | 0) + -1 | 0;
    $mul384 = $i$5 * 7 | 0;
    $arrayidx387 = $labelInfo + 12 + ($sub383 << 2) | 0;
    HEAP32[$arrayidx387 >> 2] = (HEAP32[$arrayidx387 >> 2] | 0) + (HEAP32[$labelInfo + 1310736 + ($mul384 << 2) >> 2] | 0);
    $mul393 = $sub383 << 1;
    $arrayidx395 = $labelInfo + 655376 + ($mul393 << 3) | 0;
    HEAPF64[$arrayidx395 >> 3] = +HEAPF64[$arrayidx395 >> 3] + +(HEAP32[$labelInfo + 1310736 + ($mul384 + 1 << 2) >> 2] | 0);
    $arrayidx403 = $labelInfo + 655376 + (($mul393 | 1) << 3) | 0;
    HEAPF64[$arrayidx403 >> 3] = +HEAPF64[$arrayidx403 >> 3] + +(HEAP32[$labelInfo + 1310736 + ($mul384 + 2 << 2) >> 2] | 0);
    $mul405 = $sub383 << 2;
    $arrayidx407 = $labelInfo + 131084 + ($mul405 << 2) | 0;
    $55 = HEAP32[$labelInfo + 1310736 + ($mul384 + 3 << 2) >> 2] | 0;
    if ((HEAP32[$arrayidx407 >> 2] | 0) > ($55 | 0)) HEAP32[$arrayidx407 >> 2] = $55;
    $arrayidx423 = $labelInfo + 131084 + (($mul405 | 1) << 2) | 0;
    $57 = HEAP32[$labelInfo + 1310736 + ($mul384 + 4 << 2) >> 2] | 0;
    if ((HEAP32[$arrayidx423 >> 2] | 0) < ($57 | 0)) HEAP32[$arrayidx423 >> 2] = $57;
    $arrayidx439 = $labelInfo + 131084 + (($mul405 | 2) << 2) | 0;
    $59 = HEAP32[$labelInfo + 1310736 + ($mul384 + 5 << 2) >> 2] | 0;
    if ((HEAP32[$arrayidx439 >> 2] | 0) > ($59 | 0)) HEAP32[$arrayidx439 >> 2] = $59;
    $arrayidx455 = $labelInfo + 131084 + (($mul405 | 3) << 2) | 0;
    $61 = HEAP32[$labelInfo + 1310736 + ($mul384 + 6 << 2) >> 2] | 0;
    if ((HEAP32[$arrayidx455 >> 2] | 0) < ($61 | 0)) HEAP32[$arrayidx455 >> 2] = $61;
    $i$5 = $i$5 + 1 | 0;
   }
   while (1) {
    if (($i$6 | 0) >= (HEAP32[$label_num328 >> 2] | 0)) {
     $retval$0 = 0;
     break L77;
    }
    $arrayidx476 = $labelInfo + 12 + ($i$6 << 2) | 0;
    $mul478 = $i$6 << 1;
    $arrayidx480 = $labelInfo + 655376 + ($mul478 << 3) | 0;
    HEAPF64[$arrayidx480 >> 3] = +HEAPF64[$arrayidx480 >> 3] / +(HEAP32[$arrayidx476 >> 2] | 0);
    $arrayidx486 = $labelInfo + 655376 + (($mul478 | 1) << 3) | 0;
    HEAPF64[$arrayidx486 >> 3] = +HEAPF64[$arrayidx486 >> 3] / +(HEAP32[$arrayidx476 >> 2] | 0);
    $i$6 = $i$6 + 1 | 0;
   }
  }
 } while (0);
 STACKTOP = sp;
 return $retval$0 | 0;
}

function _arLabelingSubEWRCY($image, $xsize, $ysize, $labelingThresh, $labelInfo) {
 $image = $image | 0;
 $xsize = $xsize | 0;
 $ysize = $ysize | 0;
 $labelingThresh = $labelingThresh | 0;
 $labelInfo = $labelInfo | 0;
 var $$sink = 0, $0 = 0, $10 = 0, $11 = 0, $14 = 0, $15 = 0, $19 = 0, $20 = 0, $21 = 0, $24 = 0, $25 = 0, $3 = 0, $37 = 0, $38 = 0, $4 = 0, $43 = 0, $45 = 0, $54 = 0, $56 = 0, $58 = 0, $60 = 0, $8 = 0, $9 = 0, $add = 0, $add$ptr128 = 0, $add266 = 0, $add271$sink = 0, $arraydecay = 0, $arrayidx117 = 0, $arrayidx120 = 0, $arrayidx123 = 0, $arrayidx184 = 0, $arrayidx187 = 0, $arrayidx190 = 0, $arrayidx198 = 0, $arrayidx201 = 0, $arrayidx204 = 0, $arrayidx207 = 0, $arrayidx229 = 0, $arrayidx232 = 0, $arrayidx235 = 0, $arrayidx238 = 0, $arrayidx258 = 0, $arrayidx261 = 0, $arrayidx264 = 0, $arrayidx320 = 0, $arrayidx377 = 0, $arrayidx38 = 0, $arrayidx385 = 0, $arrayidx393 = 0, $arrayidx397 = 0, $arrayidx413 = 0, $arrayidx429 = 0, $arrayidx445 = 0, $arrayidx466 = 0, $arrayidx47 = 0, $arrayidx470 = 0, $arrayidx475 = 0, $arrayidx50 = 0, $arrayidx53 = 0, $arrayidx70 = 0, $cmp64 = 0, $cond = 0, $dpnt$0 = 0, $dpnt$1 = 0, $i$0 = 0, $i$1 = 0, $i$2 = 0, $i$3 = 0, $i$4 = 0, $i$5 = 0, $i$6 = 0, $inc275 = 0, $j$0 = 0, $j$1 = 0, $j$2 = 0, $k$0 = 0, $k$1 = 0, $k$2 = 0, $k$3 = 0, $label_num318 = 0, $mul196 = 0, $mul227 = 0, $mul285 = 0, $mul353 = 0, $mul374 = 0, $mul383 = 0, $mul395 = 0, $mul468 = 0, $pnt$0 = 0, $pnt$1 = 0, $pnt1$0 = 0, $pnt1$1 = 0, $pnt2$0 = 0, $pnt2$1 = 0, $pnt2$2 = 0, $pnt2$3 = 0, $retval$0 = 0, $sub = 0, $sub341 = 0, $sub37 = 0, $sub373 = 0, $sub69 = 0, $sub7 = 0, $sub73 = 0, $vararg_buffer = 0, $wk$0 = 0, $wk$1 = 0, $wk$2 = 0, $wk$3 = 0, $wk$4 = 0, $wk_max$0 = 0, $wk_max$1 = 0, $wk_max$2 = 0, $wk_max$3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $vararg_buffer = sp;
 $0 = HEAP32[$labelInfo >> 2] | 0;
 $sub = $ysize + -1 | 0;
 $i$0 = 0;
 $pnt1$0 = $0;
 $pnt2$0 = $0 + ((Math_imul($sub, $xsize) | 0) << 1) | 0;
 while (1) {
  if (($i$0 | 0) >= ($xsize | 0)) break;
  HEAP16[$pnt2$0 >> 1] = 0;
  HEAP16[$pnt1$0 >> 1] = 0;
  $i$0 = $i$0 + 1 | 0;
  $pnt1$0 = $pnt1$0 + 2 | 0;
  $pnt2$0 = $pnt2$0 + 2 | 0;
 }
 $sub7 = $xsize + -1 | 0;
 $i$1 = 0;
 $pnt1$1 = $0;
 $pnt2$1 = $0 + ($sub7 << 1) | 0;
 while (1) {
  if (($i$1 | 0) >= ($ysize | 0)) break;
  HEAP16[$pnt2$1 >> 1] = 0;
  HEAP16[$pnt1$1 >> 1] = 0;
  $i$1 = $i$1 + 1 | 0;
  $pnt1$1 = $pnt1$1 + ($xsize << 1) | 0;
  $pnt2$1 = $pnt2$1 + ($xsize << 1) | 0;
 }
 $arraydecay = $labelInfo + 1179664 | 0;
 $add = $xsize + 1 | 0;
 $sub37 = 0 - $xsize | 0;
 $dpnt$0 = (HEAP32[$labelInfo + 4 >> 2] | 0) + $add | 0;
 $j$0 = 1;
 $pnt$0 = $image + ($add << 1) | 0;
 $pnt2$2 = $0 + ($add << 1) | 0;
 $wk_max$0 = 0;
 L9 : while (1) {
  if (($j$0 | 0) < ($sub | 0)) {
   $dpnt$1 = $dpnt$0;
   $i$2 = 1;
   $pnt$1 = $pnt$0;
   $pnt2$3 = $pnt2$2;
   $wk_max$1 = $wk_max$0;
  } else {
   label = 56;
   break;
  }
  while (1) {
   if (($i$2 | 0) >= ($sub7 | 0)) break;
   do if ((HEAPU8[$pnt$1 + 1 >> 0] | 0 | 0) > ($labelingThresh | 0)) {
    HEAP8[$dpnt$1 >> 0] = -1;
    $arrayidx38 = $pnt2$3 + ($sub37 << 1) | 0;
    $3 = HEAP16[$arrayidx38 >> 1] | 0;
    if ($3 << 16 >> 16 > 0) {
     HEAP16[$pnt2$3 >> 1] = $3;
     $4 = ($3 << 16 >> 16) * 7 | 0;
     $arrayidx47 = $labelInfo + 1310736 + ($4 + -7 << 2) | 0;
     HEAP32[$arrayidx47 >> 2] = (HEAP32[$arrayidx47 >> 2] | 0) + 1;
     $arrayidx50 = $labelInfo + 1310736 + ($4 + -6 << 2) | 0;
     HEAP32[$arrayidx50 >> 2] = (HEAP32[$arrayidx50 >> 2] | 0) + $i$2;
     $arrayidx53 = $labelInfo + 1310736 + ($4 + -5 << 2) | 0;
     HEAP32[$arrayidx53 >> 2] = (HEAP32[$arrayidx53 >> 2] | 0) + $j$0;
     HEAP32[$labelInfo + 1310736 + ($4 + -1 << 2) >> 2] = $j$0;
     $wk_max$3 = $wk_max$1;
     break;
    }
    $8 = HEAP16[$arrayidx38 + 2 >> 1] | 0;
    $9 = HEAP16[$arrayidx38 + -2 >> 1] | 0;
    $cmp64 = $9 << 16 >> 16 > 0;
    $add$ptr128 = $pnt2$3 + -2 | 0;
    $sub73 = ($9 << 16 >> 16) + -1 | 0;
    if ($8 << 16 >> 16 <= 0) {
     if ($cmp64) {
      HEAP16[$pnt2$3 >> 1] = $9;
      $mul227 = $sub73 * 7 | 0;
      $arrayidx229 = $labelInfo + 1310736 + ($mul227 << 2) | 0;
      HEAP32[$arrayidx229 >> 2] = (HEAP32[$arrayidx229 >> 2] | 0) + 1;
      $arrayidx232 = $labelInfo + 1310736 + ($mul227 + 1 << 2) | 0;
      HEAP32[$arrayidx232 >> 2] = (HEAP32[$arrayidx232 >> 2] | 0) + $i$2;
      $arrayidx235 = $labelInfo + 1310736 + ($mul227 + 2 << 2) | 0;
      HEAP32[$arrayidx235 >> 2] = (HEAP32[$arrayidx235 >> 2] | 0) + $j$0;
      $arrayidx238 = $labelInfo + 1310736 + ($mul227 + 4 << 2) | 0;
      if ((HEAP32[$arrayidx238 >> 2] | 0) < ($i$2 | 0)) HEAP32[$arrayidx238 >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($mul227 + 6 << 2) >> 2] = $j$0;
      $wk_max$3 = $wk_max$1;
      break;
     }
     $37 = HEAP16[$add$ptr128 >> 1] | 0;
     if ($37 << 16 >> 16 > 0) {
      HEAP16[$pnt2$3 >> 1] = $37;
      $38 = ($37 << 16 >> 16) * 7 | 0;
      $arrayidx258 = $labelInfo + 1310736 + ($38 + -7 << 2) | 0;
      HEAP32[$arrayidx258 >> 2] = (HEAP32[$arrayidx258 >> 2] | 0) + 1;
      $arrayidx261 = $labelInfo + 1310736 + ($38 + -6 << 2) | 0;
      HEAP32[$arrayidx261 >> 2] = (HEAP32[$arrayidx261 >> 2] | 0) + $i$2;
      $arrayidx264 = $labelInfo + 1310736 + ($38 + -5 << 2) | 0;
      HEAP32[$arrayidx264 >> 2] = (HEAP32[$arrayidx264 >> 2] | 0) + $j$0;
      $add266 = $38 + -3 | 0;
      if ((HEAP32[$labelInfo + 1310736 + ($add266 << 2) >> 2] | 0) < ($i$2 | 0)) {
       $$sink = $i$2;
       $add271$sink = $add266;
       $wk_max$2 = $wk_max$1;
      } else {
       $wk_max$3 = $wk_max$1;
       break;
      }
     } else {
      $inc275 = $wk_max$1 + 1 | 0;
      if (($wk_max$1 | 0) > 32767) {
       label = 50;
       break L9;
      }
      HEAP16[$pnt2$3 >> 1] = $inc275;
      HEAP32[$labelInfo + 1179664 + ($wk_max$1 << 2) >> 2] = $inc275 << 16 >> 16;
      $mul285 = $wk_max$1 * 7 | 0;
      HEAP32[$labelInfo + 1310736 + ($mul285 << 2) >> 2] = 1;
      HEAP32[$labelInfo + 1310736 + ($mul285 + 1 << 2) >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($mul285 + 2 << 2) >> 2] = $j$0;
      HEAP32[$labelInfo + 1310736 + ($mul285 + 3 << 2) >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($mul285 + 4 << 2) >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($mul285 + 5 << 2) >> 2] = $j$0;
      $$sink = $j$0;
      $add271$sink = $mul285 + 6 | 0;
      $wk_max$2 = $inc275;
     }
     HEAP32[$labelInfo + 1310736 + ($add271$sink << 2) >> 2] = $$sink;
     $wk_max$3 = $wk_max$2;
     break;
    }
    $sub69 = ($8 << 16 >> 16) + -1 | 0;
    $arrayidx70 = $labelInfo + 1179664 + ($sub69 << 2) | 0;
    if ($cmp64) {
     $10 = HEAP32[$arrayidx70 >> 2] | 0;
     $11 = HEAP32[$labelInfo + 1179664 + ($sub73 << 2) >> 2] | 0;
     L35 : do if (($10 | 0) > ($11 | 0)) {
      HEAP16[$pnt2$3 >> 1] = $11;
      $k$0 = 0;
      $wk$0 = $arraydecay;
      while (1) {
       if (($k$0 | 0) >= ($wk_max$1 | 0)) {
        $14 = $11;
        break L35;
       }
       if ((HEAP32[$wk$0 >> 2] | 0) == ($10 | 0)) HEAP32[$wk$0 >> 2] = $11;
       $k$0 = $k$0 + 1 | 0;
       $wk$0 = $wk$0 + 4 | 0;
      }
     } else {
      HEAP16[$pnt2$3 >> 1] = $10;
      if (($10 | 0) < ($11 | 0)) {
       $k$1 = 0;
       $wk$1 = $arraydecay;
       while (1) {
        if (($k$1 | 0) >= ($wk_max$1 | 0)) {
         $14 = $10;
         break L35;
        }
        if ((HEAP32[$wk$1 >> 2] | 0) == ($11 | 0)) HEAP32[$wk$1 >> 2] = $10;
        $k$1 = $k$1 + 1 | 0;
        $wk$1 = $wk$1 + 4 | 0;
       }
      } else $14 = $10;
     } while (0);
     $15 = ($14 << 16 >> 16) * 7 | 0;
     $arrayidx117 = $labelInfo + 1310736 + ($15 + -7 << 2) | 0;
     HEAP32[$arrayidx117 >> 2] = (HEAP32[$arrayidx117 >> 2] | 0) + 1;
     $arrayidx120 = $labelInfo + 1310736 + ($15 + -6 << 2) | 0;
     HEAP32[$arrayidx120 >> 2] = (HEAP32[$arrayidx120 >> 2] | 0) + $i$2;
     $arrayidx123 = $labelInfo + 1310736 + ($15 + -5 << 2) | 0;
     HEAP32[$arrayidx123 >> 2] = (HEAP32[$arrayidx123 >> 2] | 0) + $j$0;
     HEAP32[$labelInfo + 1310736 + ($15 + -1 << 2) >> 2] = $j$0;
     $wk_max$3 = $wk_max$1;
     break;
    }
    $19 = HEAP16[$add$ptr128 >> 1] | 0;
    if ($19 << 16 >> 16 <= 0) {
     HEAP16[$pnt2$3 >> 1] = $8;
     $mul196 = $sub69 * 7 | 0;
     $arrayidx198 = $labelInfo + 1310736 + ($mul196 << 2) | 0;
     HEAP32[$arrayidx198 >> 2] = (HEAP32[$arrayidx198 >> 2] | 0) + 1;
     $arrayidx201 = $labelInfo + 1310736 + ($mul196 + 1 << 2) | 0;
     HEAP32[$arrayidx201 >> 2] = (HEAP32[$arrayidx201 >> 2] | 0) + $i$2;
     $arrayidx204 = $labelInfo + 1310736 + ($mul196 + 2 << 2) | 0;
     HEAP32[$arrayidx204 >> 2] = (HEAP32[$arrayidx204 >> 2] | 0) + $j$0;
     $arrayidx207 = $labelInfo + 1310736 + ($mul196 + 3 << 2) | 0;
     if ((HEAP32[$arrayidx207 >> 2] | 0) > ($i$2 | 0)) HEAP32[$arrayidx207 >> 2] = $i$2;
     HEAP32[$labelInfo + 1310736 + ($mul196 + 6 << 2) >> 2] = $j$0;
     $wk_max$3 = $wk_max$1;
     break;
    }
    $20 = HEAP32[$arrayidx70 >> 2] | 0;
    $21 = HEAP32[$labelInfo + 1179664 + (($19 << 16 >> 16) + -1 << 2) >> 2] | 0;
    L58 : do if (($20 | 0) > ($21 | 0)) {
     HEAP16[$pnt2$3 >> 1] = $21;
     $k$2 = 0;
     $wk$2 = $arraydecay;
     while (1) {
      if (($k$2 | 0) >= ($wk_max$1 | 0)) {
       $24 = $21;
       break L58;
      }
      if ((HEAP32[$wk$2 >> 2] | 0) == ($20 | 0)) HEAP32[$wk$2 >> 2] = $21;
      $k$2 = $k$2 + 1 | 0;
      $wk$2 = $wk$2 + 4 | 0;
     }
    } else {
     HEAP16[$pnt2$3 >> 1] = $20;
     if (($20 | 0) < ($21 | 0)) {
      $k$3 = 0;
      $wk$3 = $arraydecay;
      while (1) {
       if (($k$3 | 0) >= ($wk_max$1 | 0)) {
        $24 = $20;
        break L58;
       }
       if ((HEAP32[$wk$3 >> 2] | 0) == ($21 | 0)) HEAP32[$wk$3 >> 2] = $20;
       $k$3 = $k$3 + 1 | 0;
       $wk$3 = $wk$3 + 4 | 0;
      }
     } else $24 = $20;
    } while (0);
    $25 = ($24 << 16 >> 16) * 7 | 0;
    $arrayidx184 = $labelInfo + 1310736 + ($25 + -7 << 2) | 0;
    HEAP32[$arrayidx184 >> 2] = (HEAP32[$arrayidx184 >> 2] | 0) + 1;
    $arrayidx187 = $labelInfo + 1310736 + ($25 + -6 << 2) | 0;
    HEAP32[$arrayidx187 >> 2] = (HEAP32[$arrayidx187 >> 2] | 0) + $i$2;
    $arrayidx190 = $labelInfo + 1310736 + ($25 + -5 << 2) | 0;
    HEAP32[$arrayidx190 >> 2] = (HEAP32[$arrayidx190 >> 2] | 0) + $j$0;
    $wk_max$3 = $wk_max$1;
   } else {
    HEAP16[$pnt2$3 >> 1] = 0;
    HEAP8[$dpnt$1 >> 0] = 0;
    $wk_max$3 = $wk_max$1;
   } while (0);
   $dpnt$1 = $dpnt$1 + 1 | 0;
   $i$2 = $i$2 + 1 | 0;
   $pnt$1 = $pnt$1 + 2 | 0;
   $pnt2$3 = $pnt2$3 + 2 | 0;
   $wk_max$1 = $wk_max$3;
  }
  $dpnt$0 = $dpnt$1 + 2 | 0;
  $j$0 = $j$0 + 1 | 0;
  $pnt$0 = $pnt$1 + 4 | 0;
  $pnt2$2 = $pnt2$3 + 4 | 0;
  $wk_max$0 = $wk_max$1;
 }
 L77 : do if ((label | 0) == 50) {
  _arLog(3, 3256, $vararg_buffer);
  $retval$0 = -1;
 } else if ((label | 0) == 56) {
  $arrayidx320 = $labelInfo + 12 | 0;
  $i$3 = 1;
  $j$1 = 1;
  $wk$4 = $arraydecay;
  while (1) {
   if (($i$3 | 0) > ($wk_max$0 | 0)) break;
   $43 = HEAP32[$wk$4 >> 2] | 0;
   if (($43 | 0) == ($i$3 | 0)) {
    $cond = $j$1;
    $j$2 = $j$1 + 1 | 0;
   } else {
    $cond = HEAP32[$labelInfo + 1179664 + ($43 + -1 << 2) >> 2] | 0;
    $j$2 = $j$1;
   }
   HEAP32[$wk$4 >> 2] = $cond;
   $i$3 = $i$3 + 1 | 0;
   $j$1 = $j$2;
   $wk$4 = $wk$4 + 4 | 0;
  }
  $label_num318 = $labelInfo + 8 | 0;
  $sub341 = $j$1 + -1 | 0;
  HEAP32[$label_num318 >> 2] = $sub341;
  if (!$sub341) $retval$0 = 0; else {
   _memset($arrayidx320 | 0, 0, $sub341 << 2 | 0) | 0;
   _memset($labelInfo + 655376 | 0, 0, $sub341 << 4 | 0) | 0;
   $45 = $sub341;
   $i$4 = 0;
   while (1) {
    if (($i$4 | 0) >= ($45 | 0)) {
     $i$5 = 0;
     break;
    }
    $mul353 = $i$4 << 2;
    HEAP32[$labelInfo + 131084 + ($mul353 << 2) >> 2] = $xsize;
    HEAP32[$labelInfo + 131084 + (($mul353 | 1) << 2) >> 2] = 0;
    HEAP32[$labelInfo + 131084 + (($mul353 | 2) << 2) >> 2] = $ysize;
    HEAP32[$labelInfo + 131084 + (($mul353 | 3) << 2) >> 2] = 0;
    $45 = HEAP32[$label_num318 >> 2] | 0;
    $i$4 = $i$4 + 1 | 0;
   }
   while (1) {
    if (($i$5 | 0) >= ($wk_max$0 | 0)) {
     $i$6 = 0;
     break;
    }
    $sub373 = (HEAP32[$labelInfo + 1179664 + ($i$5 << 2) >> 2] | 0) + -1 | 0;
    $mul374 = $i$5 * 7 | 0;
    $arrayidx377 = $labelInfo + 12 + ($sub373 << 2) | 0;
    HEAP32[$arrayidx377 >> 2] = (HEAP32[$arrayidx377 >> 2] | 0) + (HEAP32[$labelInfo + 1310736 + ($mul374 << 2) >> 2] | 0);
    $mul383 = $sub373 << 1;
    $arrayidx385 = $labelInfo + 655376 + ($mul383 << 3) | 0;
    HEAPF64[$arrayidx385 >> 3] = +HEAPF64[$arrayidx385 >> 3] + +(HEAP32[$labelInfo + 1310736 + ($mul374 + 1 << 2) >> 2] | 0);
    $arrayidx393 = $labelInfo + 655376 + (($mul383 | 1) << 3) | 0;
    HEAPF64[$arrayidx393 >> 3] = +HEAPF64[$arrayidx393 >> 3] + +(HEAP32[$labelInfo + 1310736 + ($mul374 + 2 << 2) >> 2] | 0);
    $mul395 = $sub373 << 2;
    $arrayidx397 = $labelInfo + 131084 + ($mul395 << 2) | 0;
    $54 = HEAP32[$labelInfo + 1310736 + ($mul374 + 3 << 2) >> 2] | 0;
    if ((HEAP32[$arrayidx397 >> 2] | 0) > ($54 | 0)) HEAP32[$arrayidx397 >> 2] = $54;
    $arrayidx413 = $labelInfo + 131084 + (($mul395 | 1) << 2) | 0;
    $56 = HEAP32[$labelInfo + 1310736 + ($mul374 + 4 << 2) >> 2] | 0;
    if ((HEAP32[$arrayidx413 >> 2] | 0) < ($56 | 0)) HEAP32[$arrayidx413 >> 2] = $56;
    $arrayidx429 = $labelInfo + 131084 + (($mul395 | 2) << 2) | 0;
    $58 = HEAP32[$labelInfo + 1310736 + ($mul374 + 5 << 2) >> 2] | 0;
    if ((HEAP32[$arrayidx429 >> 2] | 0) > ($58 | 0)) HEAP32[$arrayidx429 >> 2] = $58;
    $arrayidx445 = $labelInfo + 131084 + (($mul395 | 3) << 2) | 0;
    $60 = HEAP32[$labelInfo + 1310736 + ($mul374 + 6 << 2) >> 2] | 0;
    if ((HEAP32[$arrayidx445 >> 2] | 0) < ($60 | 0)) HEAP32[$arrayidx445 >> 2] = $60;
    $i$5 = $i$5 + 1 | 0;
   }
   while (1) {
    if (($i$6 | 0) >= (HEAP32[$label_num318 >> 2] | 0)) {
     $retval$0 = 0;
     break L77;
    }
    $arrayidx466 = $labelInfo + 12 + ($i$6 << 2) | 0;
    $mul468 = $i$6 << 1;
    $arrayidx470 = $labelInfo + 655376 + ($mul468 << 3) | 0;
    HEAPF64[$arrayidx470 >> 3] = +HEAPF64[$arrayidx470 >> 3] / +(HEAP32[$arrayidx466 >> 2] | 0);
    $arrayidx475 = $labelInfo + 655376 + (($mul468 | 1) << 3) | 0;
    HEAPF64[$arrayidx475 >> 3] = +HEAPF64[$arrayidx475 >> 3] / +(HEAP32[$arrayidx466 >> 2] | 0);
    $i$6 = $i$6 + 1 | 0;
   }
  }
 } while (0);
 STACKTOP = sp;
 return $retval$0 | 0;
}

function _arLabelingSubEBRCY($image, $xsize, $ysize, $labelingThresh, $labelInfo) {
 $image = $image | 0;
 $xsize = $xsize | 0;
 $ysize = $ysize | 0;
 $labelingThresh = $labelingThresh | 0;
 $labelInfo = $labelInfo | 0;
 var $$sink = 0, $0 = 0, $10 = 0, $11 = 0, $14 = 0, $15 = 0, $19 = 0, $20 = 0, $21 = 0, $24 = 0, $25 = 0, $3 = 0, $37 = 0, $38 = 0, $4 = 0, $43 = 0, $45 = 0, $54 = 0, $56 = 0, $58 = 0, $60 = 0, $8 = 0, $9 = 0, $add = 0, $add$ptr128 = 0, $add266 = 0, $add271$sink = 0, $arraydecay = 0, $arrayidx117 = 0, $arrayidx120 = 0, $arrayidx123 = 0, $arrayidx184 = 0, $arrayidx187 = 0, $arrayidx190 = 0, $arrayidx198 = 0, $arrayidx201 = 0, $arrayidx204 = 0, $arrayidx207 = 0, $arrayidx229 = 0, $arrayidx232 = 0, $arrayidx235 = 0, $arrayidx238 = 0, $arrayidx258 = 0, $arrayidx261 = 0, $arrayidx264 = 0, $arrayidx320 = 0, $arrayidx377 = 0, $arrayidx38 = 0, $arrayidx385 = 0, $arrayidx393 = 0, $arrayidx397 = 0, $arrayidx413 = 0, $arrayidx429 = 0, $arrayidx445 = 0, $arrayidx466 = 0, $arrayidx47 = 0, $arrayidx470 = 0, $arrayidx475 = 0, $arrayidx50 = 0, $arrayidx53 = 0, $arrayidx70 = 0, $cmp64 = 0, $cond = 0, $dpnt$0 = 0, $dpnt$1 = 0, $i$0 = 0, $i$1 = 0, $i$2 = 0, $i$3 = 0, $i$4 = 0, $i$5 = 0, $i$6 = 0, $inc275 = 0, $j$0 = 0, $j$1 = 0, $j$2 = 0, $k$0 = 0, $k$1 = 0, $k$2 = 0, $k$3 = 0, $label_num318 = 0, $mul196 = 0, $mul227 = 0, $mul285 = 0, $mul353 = 0, $mul374 = 0, $mul383 = 0, $mul395 = 0, $mul468 = 0, $pnt$0 = 0, $pnt$1 = 0, $pnt1$0 = 0, $pnt1$1 = 0, $pnt2$0 = 0, $pnt2$1 = 0, $pnt2$2 = 0, $pnt2$3 = 0, $retval$0 = 0, $sub = 0, $sub341 = 0, $sub37 = 0, $sub373 = 0, $sub69 = 0, $sub7 = 0, $sub73 = 0, $vararg_buffer = 0, $wk$0 = 0, $wk$1 = 0, $wk$2 = 0, $wk$3 = 0, $wk$4 = 0, $wk_max$0 = 0, $wk_max$1 = 0, $wk_max$2 = 0, $wk_max$3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $vararg_buffer = sp;
 $0 = HEAP32[$labelInfo >> 2] | 0;
 $sub = $ysize + -1 | 0;
 $i$0 = 0;
 $pnt1$0 = $0;
 $pnt2$0 = $0 + ((Math_imul($sub, $xsize) | 0) << 1) | 0;
 while (1) {
  if (($i$0 | 0) >= ($xsize | 0)) break;
  HEAP16[$pnt2$0 >> 1] = 0;
  HEAP16[$pnt1$0 >> 1] = 0;
  $i$0 = $i$0 + 1 | 0;
  $pnt1$0 = $pnt1$0 + 2 | 0;
  $pnt2$0 = $pnt2$0 + 2 | 0;
 }
 $sub7 = $xsize + -1 | 0;
 $i$1 = 0;
 $pnt1$1 = $0;
 $pnt2$1 = $0 + ($sub7 << 1) | 0;
 while (1) {
  if (($i$1 | 0) >= ($ysize | 0)) break;
  HEAP16[$pnt2$1 >> 1] = 0;
  HEAP16[$pnt1$1 >> 1] = 0;
  $i$1 = $i$1 + 1 | 0;
  $pnt1$1 = $pnt1$1 + ($xsize << 1) | 0;
  $pnt2$1 = $pnt2$1 + ($xsize << 1) | 0;
 }
 $arraydecay = $labelInfo + 1179664 | 0;
 $add = $xsize + 1 | 0;
 $sub37 = 0 - $xsize | 0;
 $dpnt$0 = (HEAP32[$labelInfo + 4 >> 2] | 0) + $add | 0;
 $j$0 = 1;
 $pnt$0 = $image + ($add << 1) | 0;
 $pnt2$2 = $0 + ($add << 1) | 0;
 $wk_max$0 = 0;
 L9 : while (1) {
  if (($j$0 | 0) < ($sub | 0)) {
   $dpnt$1 = $dpnt$0;
   $i$2 = 1;
   $pnt$1 = $pnt$0;
   $pnt2$3 = $pnt2$2;
   $wk_max$1 = $wk_max$0;
  } else {
   label = 56;
   break;
  }
  while (1) {
   if (($i$2 | 0) >= ($sub7 | 0)) break;
   do if ((HEAPU8[$pnt$1 + 1 >> 0] | 0 | 0) > ($labelingThresh | 0)) {
    HEAP16[$pnt2$3 >> 1] = 0;
    HEAP8[$dpnt$1 >> 0] = 0;
    $wk_max$3 = $wk_max$1;
   } else {
    HEAP8[$dpnt$1 >> 0] = -1;
    $arrayidx38 = $pnt2$3 + ($sub37 << 1) | 0;
    $3 = HEAP16[$arrayidx38 >> 1] | 0;
    if ($3 << 16 >> 16 > 0) {
     HEAP16[$pnt2$3 >> 1] = $3;
     $4 = ($3 << 16 >> 16) * 7 | 0;
     $arrayidx47 = $labelInfo + 1310736 + ($4 + -7 << 2) | 0;
     HEAP32[$arrayidx47 >> 2] = (HEAP32[$arrayidx47 >> 2] | 0) + 1;
     $arrayidx50 = $labelInfo + 1310736 + ($4 + -6 << 2) | 0;
     HEAP32[$arrayidx50 >> 2] = (HEAP32[$arrayidx50 >> 2] | 0) + $i$2;
     $arrayidx53 = $labelInfo + 1310736 + ($4 + -5 << 2) | 0;
     HEAP32[$arrayidx53 >> 2] = (HEAP32[$arrayidx53 >> 2] | 0) + $j$0;
     HEAP32[$labelInfo + 1310736 + ($4 + -1 << 2) >> 2] = $j$0;
     $wk_max$3 = $wk_max$1;
     break;
    }
    $8 = HEAP16[$arrayidx38 + 2 >> 1] | 0;
    $9 = HEAP16[$arrayidx38 + -2 >> 1] | 0;
    $cmp64 = $9 << 16 >> 16 > 0;
    $add$ptr128 = $pnt2$3 + -2 | 0;
    $sub73 = ($9 << 16 >> 16) + -1 | 0;
    if ($8 << 16 >> 16 <= 0) {
     if ($cmp64) {
      HEAP16[$pnt2$3 >> 1] = $9;
      $mul227 = $sub73 * 7 | 0;
      $arrayidx229 = $labelInfo + 1310736 + ($mul227 << 2) | 0;
      HEAP32[$arrayidx229 >> 2] = (HEAP32[$arrayidx229 >> 2] | 0) + 1;
      $arrayidx232 = $labelInfo + 1310736 + ($mul227 + 1 << 2) | 0;
      HEAP32[$arrayidx232 >> 2] = (HEAP32[$arrayidx232 >> 2] | 0) + $i$2;
      $arrayidx235 = $labelInfo + 1310736 + ($mul227 + 2 << 2) | 0;
      HEAP32[$arrayidx235 >> 2] = (HEAP32[$arrayidx235 >> 2] | 0) + $j$0;
      $arrayidx238 = $labelInfo + 1310736 + ($mul227 + 4 << 2) | 0;
      if ((HEAP32[$arrayidx238 >> 2] | 0) < ($i$2 | 0)) HEAP32[$arrayidx238 >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($mul227 + 6 << 2) >> 2] = $j$0;
      $wk_max$3 = $wk_max$1;
      break;
     }
     $37 = HEAP16[$add$ptr128 >> 1] | 0;
     if ($37 << 16 >> 16 > 0) {
      HEAP16[$pnt2$3 >> 1] = $37;
      $38 = ($37 << 16 >> 16) * 7 | 0;
      $arrayidx258 = $labelInfo + 1310736 + ($38 + -7 << 2) | 0;
      HEAP32[$arrayidx258 >> 2] = (HEAP32[$arrayidx258 >> 2] | 0) + 1;
      $arrayidx261 = $labelInfo + 1310736 + ($38 + -6 << 2) | 0;
      HEAP32[$arrayidx261 >> 2] = (HEAP32[$arrayidx261 >> 2] | 0) + $i$2;
      $arrayidx264 = $labelInfo + 1310736 + ($38 + -5 << 2) | 0;
      HEAP32[$arrayidx264 >> 2] = (HEAP32[$arrayidx264 >> 2] | 0) + $j$0;
      $add266 = $38 + -3 | 0;
      if ((HEAP32[$labelInfo + 1310736 + ($add266 << 2) >> 2] | 0) < ($i$2 | 0)) {
       $$sink = $i$2;
       $add271$sink = $add266;
       $wk_max$2 = $wk_max$1;
      } else {
       $wk_max$3 = $wk_max$1;
       break;
      }
     } else {
      $inc275 = $wk_max$1 + 1 | 0;
      if (($wk_max$1 | 0) > 32767) {
       label = 50;
       break L9;
      }
      HEAP16[$pnt2$3 >> 1] = $inc275;
      HEAP32[$labelInfo + 1179664 + ($wk_max$1 << 2) >> 2] = $inc275 << 16 >> 16;
      $mul285 = $wk_max$1 * 7 | 0;
      HEAP32[$labelInfo + 1310736 + ($mul285 << 2) >> 2] = 1;
      HEAP32[$labelInfo + 1310736 + ($mul285 + 1 << 2) >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($mul285 + 2 << 2) >> 2] = $j$0;
      HEAP32[$labelInfo + 1310736 + ($mul285 + 3 << 2) >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($mul285 + 4 << 2) >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($mul285 + 5 << 2) >> 2] = $j$0;
      $$sink = $j$0;
      $add271$sink = $mul285 + 6 | 0;
      $wk_max$2 = $inc275;
     }
     HEAP32[$labelInfo + 1310736 + ($add271$sink << 2) >> 2] = $$sink;
     $wk_max$3 = $wk_max$2;
     break;
    }
    $sub69 = ($8 << 16 >> 16) + -1 | 0;
    $arrayidx70 = $labelInfo + 1179664 + ($sub69 << 2) | 0;
    if ($cmp64) {
     $10 = HEAP32[$arrayidx70 >> 2] | 0;
     $11 = HEAP32[$labelInfo + 1179664 + ($sub73 << 2) >> 2] | 0;
     L36 : do if (($10 | 0) > ($11 | 0)) {
      HEAP16[$pnt2$3 >> 1] = $11;
      $k$0 = 0;
      $wk$0 = $arraydecay;
      while (1) {
       if (($k$0 | 0) >= ($wk_max$1 | 0)) {
        $14 = $11;
        break L36;
       }
       if ((HEAP32[$wk$0 >> 2] | 0) == ($10 | 0)) HEAP32[$wk$0 >> 2] = $11;
       $k$0 = $k$0 + 1 | 0;
       $wk$0 = $wk$0 + 4 | 0;
      }
     } else {
      HEAP16[$pnt2$3 >> 1] = $10;
      if (($10 | 0) < ($11 | 0)) {
       $k$1 = 0;
       $wk$1 = $arraydecay;
       while (1) {
        if (($k$1 | 0) >= ($wk_max$1 | 0)) {
         $14 = $10;
         break L36;
        }
        if ((HEAP32[$wk$1 >> 2] | 0) == ($11 | 0)) HEAP32[$wk$1 >> 2] = $10;
        $k$1 = $k$1 + 1 | 0;
        $wk$1 = $wk$1 + 4 | 0;
       }
      } else $14 = $10;
     } while (0);
     $15 = ($14 << 16 >> 16) * 7 | 0;
     $arrayidx117 = $labelInfo + 1310736 + ($15 + -7 << 2) | 0;
     HEAP32[$arrayidx117 >> 2] = (HEAP32[$arrayidx117 >> 2] | 0) + 1;
     $arrayidx120 = $labelInfo + 1310736 + ($15 + -6 << 2) | 0;
     HEAP32[$arrayidx120 >> 2] = (HEAP32[$arrayidx120 >> 2] | 0) + $i$2;
     $arrayidx123 = $labelInfo + 1310736 + ($15 + -5 << 2) | 0;
     HEAP32[$arrayidx123 >> 2] = (HEAP32[$arrayidx123 >> 2] | 0) + $j$0;
     HEAP32[$labelInfo + 1310736 + ($15 + -1 << 2) >> 2] = $j$0;
     $wk_max$3 = $wk_max$1;
     break;
    }
    $19 = HEAP16[$add$ptr128 >> 1] | 0;
    if ($19 << 16 >> 16 <= 0) {
     HEAP16[$pnt2$3 >> 1] = $8;
     $mul196 = $sub69 * 7 | 0;
     $arrayidx198 = $labelInfo + 1310736 + ($mul196 << 2) | 0;
     HEAP32[$arrayidx198 >> 2] = (HEAP32[$arrayidx198 >> 2] | 0) + 1;
     $arrayidx201 = $labelInfo + 1310736 + ($mul196 + 1 << 2) | 0;
     HEAP32[$arrayidx201 >> 2] = (HEAP32[$arrayidx201 >> 2] | 0) + $i$2;
     $arrayidx204 = $labelInfo + 1310736 + ($mul196 + 2 << 2) | 0;
     HEAP32[$arrayidx204 >> 2] = (HEAP32[$arrayidx204 >> 2] | 0) + $j$0;
     $arrayidx207 = $labelInfo + 1310736 + ($mul196 + 3 << 2) | 0;
     if ((HEAP32[$arrayidx207 >> 2] | 0) > ($i$2 | 0)) HEAP32[$arrayidx207 >> 2] = $i$2;
     HEAP32[$labelInfo + 1310736 + ($mul196 + 6 << 2) >> 2] = $j$0;
     $wk_max$3 = $wk_max$1;
     break;
    }
    $20 = HEAP32[$arrayidx70 >> 2] | 0;
    $21 = HEAP32[$labelInfo + 1179664 + (($19 << 16 >> 16) + -1 << 2) >> 2] | 0;
    L59 : do if (($20 | 0) > ($21 | 0)) {
     HEAP16[$pnt2$3 >> 1] = $21;
     $k$2 = 0;
     $wk$2 = $arraydecay;
     while (1) {
      if (($k$2 | 0) >= ($wk_max$1 | 0)) {
       $24 = $21;
       break L59;
      }
      if ((HEAP32[$wk$2 >> 2] | 0) == ($20 | 0)) HEAP32[$wk$2 >> 2] = $21;
      $k$2 = $k$2 + 1 | 0;
      $wk$2 = $wk$2 + 4 | 0;
     }
    } else {
     HEAP16[$pnt2$3 >> 1] = $20;
     if (($20 | 0) < ($21 | 0)) {
      $k$3 = 0;
      $wk$3 = $arraydecay;
      while (1) {
       if (($k$3 | 0) >= ($wk_max$1 | 0)) {
        $24 = $20;
        break L59;
       }
       if ((HEAP32[$wk$3 >> 2] | 0) == ($21 | 0)) HEAP32[$wk$3 >> 2] = $20;
       $k$3 = $k$3 + 1 | 0;
       $wk$3 = $wk$3 + 4 | 0;
      }
     } else $24 = $20;
    } while (0);
    $25 = ($24 << 16 >> 16) * 7 | 0;
    $arrayidx184 = $labelInfo + 1310736 + ($25 + -7 << 2) | 0;
    HEAP32[$arrayidx184 >> 2] = (HEAP32[$arrayidx184 >> 2] | 0) + 1;
    $arrayidx187 = $labelInfo + 1310736 + ($25 + -6 << 2) | 0;
    HEAP32[$arrayidx187 >> 2] = (HEAP32[$arrayidx187 >> 2] | 0) + $i$2;
    $arrayidx190 = $labelInfo + 1310736 + ($25 + -5 << 2) | 0;
    HEAP32[$arrayidx190 >> 2] = (HEAP32[$arrayidx190 >> 2] | 0) + $j$0;
    $wk_max$3 = $wk_max$1;
   } while (0);
   $dpnt$1 = $dpnt$1 + 1 | 0;
   $i$2 = $i$2 + 1 | 0;
   $pnt$1 = $pnt$1 + 2 | 0;
   $pnt2$3 = $pnt2$3 + 2 | 0;
   $wk_max$1 = $wk_max$3;
  }
  $dpnt$0 = $dpnt$1 + 2 | 0;
  $j$0 = $j$0 + 1 | 0;
  $pnt$0 = $pnt$1 + 4 | 0;
  $pnt2$2 = $pnt2$3 + 4 | 0;
  $wk_max$0 = $wk_max$1;
 }
 L77 : do if ((label | 0) == 50) {
  _arLog(3, 3256, $vararg_buffer);
  $retval$0 = -1;
 } else if ((label | 0) == 56) {
  $arrayidx320 = $labelInfo + 12 | 0;
  $i$3 = 1;
  $j$1 = 1;
  $wk$4 = $arraydecay;
  while (1) {
   if (($i$3 | 0) > ($wk_max$0 | 0)) break;
   $43 = HEAP32[$wk$4 >> 2] | 0;
   if (($43 | 0) == ($i$3 | 0)) {
    $cond = $j$1;
    $j$2 = $j$1 + 1 | 0;
   } else {
    $cond = HEAP32[$labelInfo + 1179664 + ($43 + -1 << 2) >> 2] | 0;
    $j$2 = $j$1;
   }
   HEAP32[$wk$4 >> 2] = $cond;
   $i$3 = $i$3 + 1 | 0;
   $j$1 = $j$2;
   $wk$4 = $wk$4 + 4 | 0;
  }
  $label_num318 = $labelInfo + 8 | 0;
  $sub341 = $j$1 + -1 | 0;
  HEAP32[$label_num318 >> 2] = $sub341;
  if (!$sub341) $retval$0 = 0; else {
   _memset($arrayidx320 | 0, 0, $sub341 << 2 | 0) | 0;
   _memset($labelInfo + 655376 | 0, 0, $sub341 << 4 | 0) | 0;
   $45 = $sub341;
   $i$4 = 0;
   while (1) {
    if (($i$4 | 0) >= ($45 | 0)) {
     $i$5 = 0;
     break;
    }
    $mul353 = $i$4 << 2;
    HEAP32[$labelInfo + 131084 + ($mul353 << 2) >> 2] = $xsize;
    HEAP32[$labelInfo + 131084 + (($mul353 | 1) << 2) >> 2] = 0;
    HEAP32[$labelInfo + 131084 + (($mul353 | 2) << 2) >> 2] = $ysize;
    HEAP32[$labelInfo + 131084 + (($mul353 | 3) << 2) >> 2] = 0;
    $45 = HEAP32[$label_num318 >> 2] | 0;
    $i$4 = $i$4 + 1 | 0;
   }
   while (1) {
    if (($i$5 | 0) >= ($wk_max$0 | 0)) {
     $i$6 = 0;
     break;
    }
    $sub373 = (HEAP32[$labelInfo + 1179664 + ($i$5 << 2) >> 2] | 0) + -1 | 0;
    $mul374 = $i$5 * 7 | 0;
    $arrayidx377 = $labelInfo + 12 + ($sub373 << 2) | 0;
    HEAP32[$arrayidx377 >> 2] = (HEAP32[$arrayidx377 >> 2] | 0) + (HEAP32[$labelInfo + 1310736 + ($mul374 << 2) >> 2] | 0);
    $mul383 = $sub373 << 1;
    $arrayidx385 = $labelInfo + 655376 + ($mul383 << 3) | 0;
    HEAPF64[$arrayidx385 >> 3] = +HEAPF64[$arrayidx385 >> 3] + +(HEAP32[$labelInfo + 1310736 + ($mul374 + 1 << 2) >> 2] | 0);
    $arrayidx393 = $labelInfo + 655376 + (($mul383 | 1) << 3) | 0;
    HEAPF64[$arrayidx393 >> 3] = +HEAPF64[$arrayidx393 >> 3] + +(HEAP32[$labelInfo + 1310736 + ($mul374 + 2 << 2) >> 2] | 0);
    $mul395 = $sub373 << 2;
    $arrayidx397 = $labelInfo + 131084 + ($mul395 << 2) | 0;
    $54 = HEAP32[$labelInfo + 1310736 + ($mul374 + 3 << 2) >> 2] | 0;
    if ((HEAP32[$arrayidx397 >> 2] | 0) > ($54 | 0)) HEAP32[$arrayidx397 >> 2] = $54;
    $arrayidx413 = $labelInfo + 131084 + (($mul395 | 1) << 2) | 0;
    $56 = HEAP32[$labelInfo + 1310736 + ($mul374 + 4 << 2) >> 2] | 0;
    if ((HEAP32[$arrayidx413 >> 2] | 0) < ($56 | 0)) HEAP32[$arrayidx413 >> 2] = $56;
    $arrayidx429 = $labelInfo + 131084 + (($mul395 | 2) << 2) | 0;
    $58 = HEAP32[$labelInfo + 1310736 + ($mul374 + 5 << 2) >> 2] | 0;
    if ((HEAP32[$arrayidx429 >> 2] | 0) > ($58 | 0)) HEAP32[$arrayidx429 >> 2] = $58;
    $arrayidx445 = $labelInfo + 131084 + (($mul395 | 3) << 2) | 0;
    $60 = HEAP32[$labelInfo + 1310736 + ($mul374 + 6 << 2) >> 2] | 0;
    if ((HEAP32[$arrayidx445 >> 2] | 0) < ($60 | 0)) HEAP32[$arrayidx445 >> 2] = $60;
    $i$5 = $i$5 + 1 | 0;
   }
   while (1) {
    if (($i$6 | 0) >= (HEAP32[$label_num318 >> 2] | 0)) {
     $retval$0 = 0;
     break L77;
    }
    $arrayidx466 = $labelInfo + 12 + ($i$6 << 2) | 0;
    $mul468 = $i$6 << 1;
    $arrayidx470 = $labelInfo + 655376 + ($mul468 << 3) | 0;
    HEAPF64[$arrayidx470 >> 3] = +HEAPF64[$arrayidx470 >> 3] / +(HEAP32[$arrayidx466 >> 2] | 0);
    $arrayidx475 = $labelInfo + 655376 + (($mul468 | 1) << 3) | 0;
    HEAPF64[$arrayidx475 >> 3] = +HEAPF64[$arrayidx475 >> 3] / +(HEAP32[$arrayidx466 >> 2] | 0);
    $i$6 = $i$6 + 1 | 0;
   }
  }
 } while (0);
 STACKTOP = sp;
 return $retval$0 | 0;
}

function _arLabelingSubEWRYC($image, $xsize, $ysize, $labelingThresh, $labelInfo) {
 $image = $image | 0;
 $xsize = $xsize | 0;
 $ysize = $ysize | 0;
 $labelingThresh = $labelingThresh | 0;
 $labelInfo = $labelInfo | 0;
 var $$sink = 0, $0 = 0, $10 = 0, $11 = 0, $14 = 0, $15 = 0, $19 = 0, $20 = 0, $21 = 0, $24 = 0, $25 = 0, $3 = 0, $37 = 0, $38 = 0, $4 = 0, $43 = 0, $45 = 0, $54 = 0, $56 = 0, $58 = 0, $60 = 0, $8 = 0, $9 = 0, $add = 0, $add$ptr127 = 0, $add265 = 0, $add270$sink = 0, $arraydecay = 0, $arrayidx116 = 0, $arrayidx119 = 0, $arrayidx122 = 0, $arrayidx183 = 0, $arrayidx186 = 0, $arrayidx189 = 0, $arrayidx197 = 0, $arrayidx200 = 0, $arrayidx203 = 0, $arrayidx206 = 0, $arrayidx228 = 0, $arrayidx231 = 0, $arrayidx234 = 0, $arrayidx237 = 0, $arrayidx257 = 0, $arrayidx260 = 0, $arrayidx263 = 0, $arrayidx319 = 0, $arrayidx37 = 0, $arrayidx376 = 0, $arrayidx384 = 0, $arrayidx392 = 0, $arrayidx396 = 0, $arrayidx412 = 0, $arrayidx428 = 0, $arrayidx444 = 0, $arrayidx46 = 0, $arrayidx465 = 0, $arrayidx469 = 0, $arrayidx474 = 0, $arrayidx49 = 0, $arrayidx52 = 0, $arrayidx69 = 0, $cmp63 = 0, $cond = 0, $dpnt$0 = 0, $dpnt$1 = 0, $i$0 = 0, $i$1 = 0, $i$2 = 0, $i$3 = 0, $i$4 = 0, $i$5 = 0, $i$6 = 0, $inc274 = 0, $j$0 = 0, $j$1 = 0, $j$2 = 0, $k$0 = 0, $k$1 = 0, $k$2 = 0, $k$3 = 0, $label_num317 = 0, $mul195 = 0, $mul226 = 0, $mul284 = 0, $mul352 = 0, $mul373 = 0, $mul382 = 0, $mul394 = 0, $mul467 = 0, $pnt$0 = 0, $pnt$1 = 0, $pnt1$0 = 0, $pnt1$1 = 0, $pnt2$0 = 0, $pnt2$1 = 0, $pnt2$2 = 0, $pnt2$3 = 0, $retval$0 = 0, $sub = 0, $sub340 = 0, $sub36 = 0, $sub372 = 0, $sub68 = 0, $sub7 = 0, $sub72 = 0, $vararg_buffer = 0, $wk$0 = 0, $wk$1 = 0, $wk$2 = 0, $wk$3 = 0, $wk$4 = 0, $wk_max$0 = 0, $wk_max$1 = 0, $wk_max$2 = 0, $wk_max$3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $vararg_buffer = sp;
 $0 = HEAP32[$labelInfo >> 2] | 0;
 $sub = $ysize + -1 | 0;
 $i$0 = 0;
 $pnt1$0 = $0;
 $pnt2$0 = $0 + ((Math_imul($sub, $xsize) | 0) << 1) | 0;
 while (1) {
  if (($i$0 | 0) >= ($xsize | 0)) break;
  HEAP16[$pnt2$0 >> 1] = 0;
  HEAP16[$pnt1$0 >> 1] = 0;
  $i$0 = $i$0 + 1 | 0;
  $pnt1$0 = $pnt1$0 + 2 | 0;
  $pnt2$0 = $pnt2$0 + 2 | 0;
 }
 $sub7 = $xsize + -1 | 0;
 $i$1 = 0;
 $pnt1$1 = $0;
 $pnt2$1 = $0 + ($sub7 << 1) | 0;
 while (1) {
  if (($i$1 | 0) >= ($ysize | 0)) break;
  HEAP16[$pnt2$1 >> 1] = 0;
  HEAP16[$pnt1$1 >> 1] = 0;
  $i$1 = $i$1 + 1 | 0;
  $pnt1$1 = $pnt1$1 + ($xsize << 1) | 0;
  $pnt2$1 = $pnt2$1 + ($xsize << 1) | 0;
 }
 $arraydecay = $labelInfo + 1179664 | 0;
 $add = $xsize + 1 | 0;
 $sub36 = 0 - $xsize | 0;
 $dpnt$0 = (HEAP32[$labelInfo + 4 >> 2] | 0) + $add | 0;
 $j$0 = 1;
 $pnt$0 = $image + ($add << 1) | 0;
 $pnt2$2 = $0 + ($add << 1) | 0;
 $wk_max$0 = 0;
 L9 : while (1) {
  if (($j$0 | 0) < ($sub | 0)) {
   $dpnt$1 = $dpnt$0;
   $i$2 = 1;
   $pnt$1 = $pnt$0;
   $pnt2$3 = $pnt2$2;
   $wk_max$1 = $wk_max$0;
  } else {
   label = 56;
   break;
  }
  while (1) {
   if (($i$2 | 0) >= ($sub7 | 0)) break;
   do if ((HEAPU8[$pnt$1 >> 0] | 0 | 0) > ($labelingThresh | 0)) {
    HEAP8[$dpnt$1 >> 0] = -1;
    $arrayidx37 = $pnt2$3 + ($sub36 << 1) | 0;
    $3 = HEAP16[$arrayidx37 >> 1] | 0;
    if ($3 << 16 >> 16 > 0) {
     HEAP16[$pnt2$3 >> 1] = $3;
     $4 = ($3 << 16 >> 16) * 7 | 0;
     $arrayidx46 = $labelInfo + 1310736 + ($4 + -7 << 2) | 0;
     HEAP32[$arrayidx46 >> 2] = (HEAP32[$arrayidx46 >> 2] | 0) + 1;
     $arrayidx49 = $labelInfo + 1310736 + ($4 + -6 << 2) | 0;
     HEAP32[$arrayidx49 >> 2] = (HEAP32[$arrayidx49 >> 2] | 0) + $i$2;
     $arrayidx52 = $labelInfo + 1310736 + ($4 + -5 << 2) | 0;
     HEAP32[$arrayidx52 >> 2] = (HEAP32[$arrayidx52 >> 2] | 0) + $j$0;
     HEAP32[$labelInfo + 1310736 + ($4 + -1 << 2) >> 2] = $j$0;
     $wk_max$3 = $wk_max$1;
     break;
    }
    $8 = HEAP16[$arrayidx37 + 2 >> 1] | 0;
    $9 = HEAP16[$arrayidx37 + -2 >> 1] | 0;
    $cmp63 = $9 << 16 >> 16 > 0;
    $sub72 = ($9 << 16 >> 16) + -1 | 0;
    $add$ptr127 = $pnt2$3 + -2 | 0;
    if ($8 << 16 >> 16 <= 0) {
     if ($cmp63) {
      HEAP16[$pnt2$3 >> 1] = $9;
      $mul226 = $sub72 * 7 | 0;
      $arrayidx228 = $labelInfo + 1310736 + ($mul226 << 2) | 0;
      HEAP32[$arrayidx228 >> 2] = (HEAP32[$arrayidx228 >> 2] | 0) + 1;
      $arrayidx231 = $labelInfo + 1310736 + ($mul226 + 1 << 2) | 0;
      HEAP32[$arrayidx231 >> 2] = (HEAP32[$arrayidx231 >> 2] | 0) + $i$2;
      $arrayidx234 = $labelInfo + 1310736 + ($mul226 + 2 << 2) | 0;
      HEAP32[$arrayidx234 >> 2] = (HEAP32[$arrayidx234 >> 2] | 0) + $j$0;
      $arrayidx237 = $labelInfo + 1310736 + ($mul226 + 4 << 2) | 0;
      if ((HEAP32[$arrayidx237 >> 2] | 0) < ($i$2 | 0)) HEAP32[$arrayidx237 >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($mul226 + 6 << 2) >> 2] = $j$0;
      $wk_max$3 = $wk_max$1;
      break;
     }
     $37 = HEAP16[$add$ptr127 >> 1] | 0;
     if ($37 << 16 >> 16 > 0) {
      HEAP16[$pnt2$3 >> 1] = $37;
      $38 = ($37 << 16 >> 16) * 7 | 0;
      $arrayidx257 = $labelInfo + 1310736 + ($38 + -7 << 2) | 0;
      HEAP32[$arrayidx257 >> 2] = (HEAP32[$arrayidx257 >> 2] | 0) + 1;
      $arrayidx260 = $labelInfo + 1310736 + ($38 + -6 << 2) | 0;
      HEAP32[$arrayidx260 >> 2] = (HEAP32[$arrayidx260 >> 2] | 0) + $i$2;
      $arrayidx263 = $labelInfo + 1310736 + ($38 + -5 << 2) | 0;
      HEAP32[$arrayidx263 >> 2] = (HEAP32[$arrayidx263 >> 2] | 0) + $j$0;
      $add265 = $38 + -3 | 0;
      if ((HEAP32[$labelInfo + 1310736 + ($add265 << 2) >> 2] | 0) < ($i$2 | 0)) {
       $$sink = $i$2;
       $add270$sink = $add265;
       $wk_max$2 = $wk_max$1;
      } else {
       $wk_max$3 = $wk_max$1;
       break;
      }
     } else {
      $inc274 = $wk_max$1 + 1 | 0;
      if (($wk_max$1 | 0) > 32767) {
       label = 50;
       break L9;
      }
      HEAP16[$pnt2$3 >> 1] = $inc274;
      HEAP32[$labelInfo + 1179664 + ($wk_max$1 << 2) >> 2] = $inc274 << 16 >> 16;
      $mul284 = $wk_max$1 * 7 | 0;
      HEAP32[$labelInfo + 1310736 + ($mul284 << 2) >> 2] = 1;
      HEAP32[$labelInfo + 1310736 + ($mul284 + 1 << 2) >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($mul284 + 2 << 2) >> 2] = $j$0;
      HEAP32[$labelInfo + 1310736 + ($mul284 + 3 << 2) >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($mul284 + 4 << 2) >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($mul284 + 5 << 2) >> 2] = $j$0;
      $$sink = $j$0;
      $add270$sink = $mul284 + 6 | 0;
      $wk_max$2 = $inc274;
     }
     HEAP32[$labelInfo + 1310736 + ($add270$sink << 2) >> 2] = $$sink;
     $wk_max$3 = $wk_max$2;
     break;
    }
    $sub68 = ($8 << 16 >> 16) + -1 | 0;
    $arrayidx69 = $labelInfo + 1179664 + ($sub68 << 2) | 0;
    if ($cmp63) {
     $10 = HEAP32[$arrayidx69 >> 2] | 0;
     $11 = HEAP32[$labelInfo + 1179664 + ($sub72 << 2) >> 2] | 0;
     L35 : do if (($10 | 0) > ($11 | 0)) {
      HEAP16[$pnt2$3 >> 1] = $11;
      $k$0 = 0;
      $wk$0 = $arraydecay;
      while (1) {
       if (($k$0 | 0) >= ($wk_max$1 | 0)) {
        $14 = $11;
        break L35;
       }
       if ((HEAP32[$wk$0 >> 2] | 0) == ($10 | 0)) HEAP32[$wk$0 >> 2] = $11;
       $k$0 = $k$0 + 1 | 0;
       $wk$0 = $wk$0 + 4 | 0;
      }
     } else {
      HEAP16[$pnt2$3 >> 1] = $10;
      if (($10 | 0) < ($11 | 0)) {
       $k$1 = 0;
       $wk$1 = $arraydecay;
       while (1) {
        if (($k$1 | 0) >= ($wk_max$1 | 0)) {
         $14 = $10;
         break L35;
        }
        if ((HEAP32[$wk$1 >> 2] | 0) == ($11 | 0)) HEAP32[$wk$1 >> 2] = $10;
        $k$1 = $k$1 + 1 | 0;
        $wk$1 = $wk$1 + 4 | 0;
       }
      } else $14 = $10;
     } while (0);
     $15 = ($14 << 16 >> 16) * 7 | 0;
     $arrayidx116 = $labelInfo + 1310736 + ($15 + -7 << 2) | 0;
     HEAP32[$arrayidx116 >> 2] = (HEAP32[$arrayidx116 >> 2] | 0) + 1;
     $arrayidx119 = $labelInfo + 1310736 + ($15 + -6 << 2) | 0;
     HEAP32[$arrayidx119 >> 2] = (HEAP32[$arrayidx119 >> 2] | 0) + $i$2;
     $arrayidx122 = $labelInfo + 1310736 + ($15 + -5 << 2) | 0;
     HEAP32[$arrayidx122 >> 2] = (HEAP32[$arrayidx122 >> 2] | 0) + $j$0;
     HEAP32[$labelInfo + 1310736 + ($15 + -1 << 2) >> 2] = $j$0;
     $wk_max$3 = $wk_max$1;
     break;
    }
    $19 = HEAP16[$add$ptr127 >> 1] | 0;
    if ($19 << 16 >> 16 <= 0) {
     HEAP16[$pnt2$3 >> 1] = $8;
     $mul195 = $sub68 * 7 | 0;
     $arrayidx197 = $labelInfo + 1310736 + ($mul195 << 2) | 0;
     HEAP32[$arrayidx197 >> 2] = (HEAP32[$arrayidx197 >> 2] | 0) + 1;
     $arrayidx200 = $labelInfo + 1310736 + ($mul195 + 1 << 2) | 0;
     HEAP32[$arrayidx200 >> 2] = (HEAP32[$arrayidx200 >> 2] | 0) + $i$2;
     $arrayidx203 = $labelInfo + 1310736 + ($mul195 + 2 << 2) | 0;
     HEAP32[$arrayidx203 >> 2] = (HEAP32[$arrayidx203 >> 2] | 0) + $j$0;
     $arrayidx206 = $labelInfo + 1310736 + ($mul195 + 3 << 2) | 0;
     if ((HEAP32[$arrayidx206 >> 2] | 0) > ($i$2 | 0)) HEAP32[$arrayidx206 >> 2] = $i$2;
     HEAP32[$labelInfo + 1310736 + ($mul195 + 6 << 2) >> 2] = $j$0;
     $wk_max$3 = $wk_max$1;
     break;
    }
    $20 = HEAP32[$arrayidx69 >> 2] | 0;
    $21 = HEAP32[$labelInfo + 1179664 + (($19 << 16 >> 16) + -1 << 2) >> 2] | 0;
    L58 : do if (($20 | 0) > ($21 | 0)) {
     HEAP16[$pnt2$3 >> 1] = $21;
     $k$2 = 0;
     $wk$2 = $arraydecay;
     while (1) {
      if (($k$2 | 0) >= ($wk_max$1 | 0)) {
       $24 = $21;
       break L58;
      }
      if ((HEAP32[$wk$2 >> 2] | 0) == ($20 | 0)) HEAP32[$wk$2 >> 2] = $21;
      $k$2 = $k$2 + 1 | 0;
      $wk$2 = $wk$2 + 4 | 0;
     }
    } else {
     HEAP16[$pnt2$3 >> 1] = $20;
     if (($20 | 0) < ($21 | 0)) {
      $k$3 = 0;
      $wk$3 = $arraydecay;
      while (1) {
       if (($k$3 | 0) >= ($wk_max$1 | 0)) {
        $24 = $20;
        break L58;
       }
       if ((HEAP32[$wk$3 >> 2] | 0) == ($21 | 0)) HEAP32[$wk$3 >> 2] = $20;
       $k$3 = $k$3 + 1 | 0;
       $wk$3 = $wk$3 + 4 | 0;
      }
     } else $24 = $20;
    } while (0);
    $25 = ($24 << 16 >> 16) * 7 | 0;
    $arrayidx183 = $labelInfo + 1310736 + ($25 + -7 << 2) | 0;
    HEAP32[$arrayidx183 >> 2] = (HEAP32[$arrayidx183 >> 2] | 0) + 1;
    $arrayidx186 = $labelInfo + 1310736 + ($25 + -6 << 2) | 0;
    HEAP32[$arrayidx186 >> 2] = (HEAP32[$arrayidx186 >> 2] | 0) + $i$2;
    $arrayidx189 = $labelInfo + 1310736 + ($25 + -5 << 2) | 0;
    HEAP32[$arrayidx189 >> 2] = (HEAP32[$arrayidx189 >> 2] | 0) + $j$0;
    $wk_max$3 = $wk_max$1;
   } else {
    HEAP16[$pnt2$3 >> 1] = 0;
    HEAP8[$dpnt$1 >> 0] = 0;
    $wk_max$3 = $wk_max$1;
   } while (0);
   $dpnt$1 = $dpnt$1 + 1 | 0;
   $i$2 = $i$2 + 1 | 0;
   $pnt$1 = $pnt$1 + 2 | 0;
   $pnt2$3 = $pnt2$3 + 2 | 0;
   $wk_max$1 = $wk_max$3;
  }
  $dpnt$0 = $dpnt$1 + 2 | 0;
  $j$0 = $j$0 + 1 | 0;
  $pnt$0 = $pnt$1 + 4 | 0;
  $pnt2$2 = $pnt2$3 + 4 | 0;
  $wk_max$0 = $wk_max$1;
 }
 L77 : do if ((label | 0) == 50) {
  _arLog(3, 3256, $vararg_buffer);
  $retval$0 = -1;
 } else if ((label | 0) == 56) {
  $arrayidx319 = $labelInfo + 12 | 0;
  $i$3 = 1;
  $j$1 = 1;
  $wk$4 = $arraydecay;
  while (1) {
   if (($i$3 | 0) > ($wk_max$0 | 0)) break;
   $43 = HEAP32[$wk$4 >> 2] | 0;
   if (($43 | 0) == ($i$3 | 0)) {
    $cond = $j$1;
    $j$2 = $j$1 + 1 | 0;
   } else {
    $cond = HEAP32[$labelInfo + 1179664 + ($43 + -1 << 2) >> 2] | 0;
    $j$2 = $j$1;
   }
   HEAP32[$wk$4 >> 2] = $cond;
   $i$3 = $i$3 + 1 | 0;
   $j$1 = $j$2;
   $wk$4 = $wk$4 + 4 | 0;
  }
  $label_num317 = $labelInfo + 8 | 0;
  $sub340 = $j$1 + -1 | 0;
  HEAP32[$label_num317 >> 2] = $sub340;
  if (!$sub340) $retval$0 = 0; else {
   _memset($arrayidx319 | 0, 0, $sub340 << 2 | 0) | 0;
   _memset($labelInfo + 655376 | 0, 0, $sub340 << 4 | 0) | 0;
   $45 = $sub340;
   $i$4 = 0;
   while (1) {
    if (($i$4 | 0) >= ($45 | 0)) {
     $i$5 = 0;
     break;
    }
    $mul352 = $i$4 << 2;
    HEAP32[$labelInfo + 131084 + ($mul352 << 2) >> 2] = $xsize;
    HEAP32[$labelInfo + 131084 + (($mul352 | 1) << 2) >> 2] = 0;
    HEAP32[$labelInfo + 131084 + (($mul352 | 2) << 2) >> 2] = $ysize;
    HEAP32[$labelInfo + 131084 + (($mul352 | 3) << 2) >> 2] = 0;
    $45 = HEAP32[$label_num317 >> 2] | 0;
    $i$4 = $i$4 + 1 | 0;
   }
   while (1) {
    if (($i$5 | 0) >= ($wk_max$0 | 0)) {
     $i$6 = 0;
     break;
    }
    $sub372 = (HEAP32[$labelInfo + 1179664 + ($i$5 << 2) >> 2] | 0) + -1 | 0;
    $mul373 = $i$5 * 7 | 0;
    $arrayidx376 = $labelInfo + 12 + ($sub372 << 2) | 0;
    HEAP32[$arrayidx376 >> 2] = (HEAP32[$arrayidx376 >> 2] | 0) + (HEAP32[$labelInfo + 1310736 + ($mul373 << 2) >> 2] | 0);
    $mul382 = $sub372 << 1;
    $arrayidx384 = $labelInfo + 655376 + ($mul382 << 3) | 0;
    HEAPF64[$arrayidx384 >> 3] = +HEAPF64[$arrayidx384 >> 3] + +(HEAP32[$labelInfo + 1310736 + ($mul373 + 1 << 2) >> 2] | 0);
    $arrayidx392 = $labelInfo + 655376 + (($mul382 | 1) << 3) | 0;
    HEAPF64[$arrayidx392 >> 3] = +HEAPF64[$arrayidx392 >> 3] + +(HEAP32[$labelInfo + 1310736 + ($mul373 + 2 << 2) >> 2] | 0);
    $mul394 = $sub372 << 2;
    $arrayidx396 = $labelInfo + 131084 + ($mul394 << 2) | 0;
    $54 = HEAP32[$labelInfo + 1310736 + ($mul373 + 3 << 2) >> 2] | 0;
    if ((HEAP32[$arrayidx396 >> 2] | 0) > ($54 | 0)) HEAP32[$arrayidx396 >> 2] = $54;
    $arrayidx412 = $labelInfo + 131084 + (($mul394 | 1) << 2) | 0;
    $56 = HEAP32[$labelInfo + 1310736 + ($mul373 + 4 << 2) >> 2] | 0;
    if ((HEAP32[$arrayidx412 >> 2] | 0) < ($56 | 0)) HEAP32[$arrayidx412 >> 2] = $56;
    $arrayidx428 = $labelInfo + 131084 + (($mul394 | 2) << 2) | 0;
    $58 = HEAP32[$labelInfo + 1310736 + ($mul373 + 5 << 2) >> 2] | 0;
    if ((HEAP32[$arrayidx428 >> 2] | 0) > ($58 | 0)) HEAP32[$arrayidx428 >> 2] = $58;
    $arrayidx444 = $labelInfo + 131084 + (($mul394 | 3) << 2) | 0;
    $60 = HEAP32[$labelInfo + 1310736 + ($mul373 + 6 << 2) >> 2] | 0;
    if ((HEAP32[$arrayidx444 >> 2] | 0) < ($60 | 0)) HEAP32[$arrayidx444 >> 2] = $60;
    $i$5 = $i$5 + 1 | 0;
   }
   while (1) {
    if (($i$6 | 0) >= (HEAP32[$label_num317 >> 2] | 0)) {
     $retval$0 = 0;
     break L77;
    }
    $arrayidx465 = $labelInfo + 12 + ($i$6 << 2) | 0;
    $mul467 = $i$6 << 1;
    $arrayidx469 = $labelInfo + 655376 + ($mul467 << 3) | 0;
    HEAPF64[$arrayidx469 >> 3] = +HEAPF64[$arrayidx469 >> 3] / +(HEAP32[$arrayidx465 >> 2] | 0);
    $arrayidx474 = $labelInfo + 655376 + (($mul467 | 1) << 3) | 0;
    HEAPF64[$arrayidx474 >> 3] = +HEAPF64[$arrayidx474 >> 3] / +(HEAP32[$arrayidx465 >> 2] | 0);
    $i$6 = $i$6 + 1 | 0;
   }
  }
 } while (0);
 STACKTOP = sp;
 return $retval$0 | 0;
}

function _arLabelingSubEBRYC($image, $xsize, $ysize, $labelingThresh, $labelInfo) {
 $image = $image | 0;
 $xsize = $xsize | 0;
 $ysize = $ysize | 0;
 $labelingThresh = $labelingThresh | 0;
 $labelInfo = $labelInfo | 0;
 var $$sink = 0, $0 = 0, $10 = 0, $11 = 0, $14 = 0, $15 = 0, $19 = 0, $20 = 0, $21 = 0, $24 = 0, $25 = 0, $3 = 0, $37 = 0, $38 = 0, $4 = 0, $43 = 0, $45 = 0, $54 = 0, $56 = 0, $58 = 0, $60 = 0, $8 = 0, $9 = 0, $add = 0, $add$ptr127 = 0, $add265 = 0, $add270$sink = 0, $arraydecay = 0, $arrayidx116 = 0, $arrayidx119 = 0, $arrayidx122 = 0, $arrayidx183 = 0, $arrayidx186 = 0, $arrayidx189 = 0, $arrayidx197 = 0, $arrayidx200 = 0, $arrayidx203 = 0, $arrayidx206 = 0, $arrayidx228 = 0, $arrayidx231 = 0, $arrayidx234 = 0, $arrayidx237 = 0, $arrayidx257 = 0, $arrayidx260 = 0, $arrayidx263 = 0, $arrayidx319 = 0, $arrayidx37 = 0, $arrayidx376 = 0, $arrayidx384 = 0, $arrayidx392 = 0, $arrayidx396 = 0, $arrayidx412 = 0, $arrayidx428 = 0, $arrayidx444 = 0, $arrayidx46 = 0, $arrayidx465 = 0, $arrayidx469 = 0, $arrayidx474 = 0, $arrayidx49 = 0, $arrayidx52 = 0, $arrayidx69 = 0, $cmp63 = 0, $cond = 0, $dpnt$0 = 0, $dpnt$1 = 0, $i$0 = 0, $i$1 = 0, $i$2 = 0, $i$3 = 0, $i$4 = 0, $i$5 = 0, $i$6 = 0, $inc274 = 0, $j$0 = 0, $j$1 = 0, $j$2 = 0, $k$0 = 0, $k$1 = 0, $k$2 = 0, $k$3 = 0, $label_num317 = 0, $mul195 = 0, $mul226 = 0, $mul284 = 0, $mul352 = 0, $mul373 = 0, $mul382 = 0, $mul394 = 0, $mul467 = 0, $pnt$0 = 0, $pnt$1 = 0, $pnt1$0 = 0, $pnt1$1 = 0, $pnt2$0 = 0, $pnt2$1 = 0, $pnt2$2 = 0, $pnt2$3 = 0, $retval$0 = 0, $sub = 0, $sub340 = 0, $sub36 = 0, $sub372 = 0, $sub68 = 0, $sub7 = 0, $sub72 = 0, $vararg_buffer = 0, $wk$0 = 0, $wk$1 = 0, $wk$2 = 0, $wk$3 = 0, $wk$4 = 0, $wk_max$0 = 0, $wk_max$1 = 0, $wk_max$2 = 0, $wk_max$3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $vararg_buffer = sp;
 $0 = HEAP32[$labelInfo >> 2] | 0;
 $sub = $ysize + -1 | 0;
 $i$0 = 0;
 $pnt1$0 = $0;
 $pnt2$0 = $0 + ((Math_imul($sub, $xsize) | 0) << 1) | 0;
 while (1) {
  if (($i$0 | 0) >= ($xsize | 0)) break;
  HEAP16[$pnt2$0 >> 1] = 0;
  HEAP16[$pnt1$0 >> 1] = 0;
  $i$0 = $i$0 + 1 | 0;
  $pnt1$0 = $pnt1$0 + 2 | 0;
  $pnt2$0 = $pnt2$0 + 2 | 0;
 }
 $sub7 = $xsize + -1 | 0;
 $i$1 = 0;
 $pnt1$1 = $0;
 $pnt2$1 = $0 + ($sub7 << 1) | 0;
 while (1) {
  if (($i$1 | 0) >= ($ysize | 0)) break;
  HEAP16[$pnt2$1 >> 1] = 0;
  HEAP16[$pnt1$1 >> 1] = 0;
  $i$1 = $i$1 + 1 | 0;
  $pnt1$1 = $pnt1$1 + ($xsize << 1) | 0;
  $pnt2$1 = $pnt2$1 + ($xsize << 1) | 0;
 }
 $arraydecay = $labelInfo + 1179664 | 0;
 $add = $xsize + 1 | 0;
 $sub36 = 0 - $xsize | 0;
 $dpnt$0 = (HEAP32[$labelInfo + 4 >> 2] | 0) + $add | 0;
 $j$0 = 1;
 $pnt$0 = $image + ($add << 1) | 0;
 $pnt2$2 = $0 + ($add << 1) | 0;
 $wk_max$0 = 0;
 L9 : while (1) {
  if (($j$0 | 0) < ($sub | 0)) {
   $dpnt$1 = $dpnt$0;
   $i$2 = 1;
   $pnt$1 = $pnt$0;
   $pnt2$3 = $pnt2$2;
   $wk_max$1 = $wk_max$0;
  } else {
   label = 56;
   break;
  }
  while (1) {
   if (($i$2 | 0) >= ($sub7 | 0)) break;
   do if ((HEAPU8[$pnt$1 >> 0] | 0 | 0) > ($labelingThresh | 0)) {
    HEAP16[$pnt2$3 >> 1] = 0;
    HEAP8[$dpnt$1 >> 0] = 0;
    $wk_max$3 = $wk_max$1;
   } else {
    HEAP8[$dpnt$1 >> 0] = -1;
    $arrayidx37 = $pnt2$3 + ($sub36 << 1) | 0;
    $3 = HEAP16[$arrayidx37 >> 1] | 0;
    if ($3 << 16 >> 16 > 0) {
     HEAP16[$pnt2$3 >> 1] = $3;
     $4 = ($3 << 16 >> 16) * 7 | 0;
     $arrayidx46 = $labelInfo + 1310736 + ($4 + -7 << 2) | 0;
     HEAP32[$arrayidx46 >> 2] = (HEAP32[$arrayidx46 >> 2] | 0) + 1;
     $arrayidx49 = $labelInfo + 1310736 + ($4 + -6 << 2) | 0;
     HEAP32[$arrayidx49 >> 2] = (HEAP32[$arrayidx49 >> 2] | 0) + $i$2;
     $arrayidx52 = $labelInfo + 1310736 + ($4 + -5 << 2) | 0;
     HEAP32[$arrayidx52 >> 2] = (HEAP32[$arrayidx52 >> 2] | 0) + $j$0;
     HEAP32[$labelInfo + 1310736 + ($4 + -1 << 2) >> 2] = $j$0;
     $wk_max$3 = $wk_max$1;
     break;
    }
    $8 = HEAP16[$arrayidx37 + 2 >> 1] | 0;
    $9 = HEAP16[$arrayidx37 + -2 >> 1] | 0;
    $cmp63 = $9 << 16 >> 16 > 0;
    $sub72 = ($9 << 16 >> 16) + -1 | 0;
    $add$ptr127 = $pnt2$3 + -2 | 0;
    if ($8 << 16 >> 16 <= 0) {
     if ($cmp63) {
      HEAP16[$pnt2$3 >> 1] = $9;
      $mul226 = $sub72 * 7 | 0;
      $arrayidx228 = $labelInfo + 1310736 + ($mul226 << 2) | 0;
      HEAP32[$arrayidx228 >> 2] = (HEAP32[$arrayidx228 >> 2] | 0) + 1;
      $arrayidx231 = $labelInfo + 1310736 + ($mul226 + 1 << 2) | 0;
      HEAP32[$arrayidx231 >> 2] = (HEAP32[$arrayidx231 >> 2] | 0) + $i$2;
      $arrayidx234 = $labelInfo + 1310736 + ($mul226 + 2 << 2) | 0;
      HEAP32[$arrayidx234 >> 2] = (HEAP32[$arrayidx234 >> 2] | 0) + $j$0;
      $arrayidx237 = $labelInfo + 1310736 + ($mul226 + 4 << 2) | 0;
      if ((HEAP32[$arrayidx237 >> 2] | 0) < ($i$2 | 0)) HEAP32[$arrayidx237 >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($mul226 + 6 << 2) >> 2] = $j$0;
      $wk_max$3 = $wk_max$1;
      break;
     }
     $37 = HEAP16[$add$ptr127 >> 1] | 0;
     if ($37 << 16 >> 16 > 0) {
      HEAP16[$pnt2$3 >> 1] = $37;
      $38 = ($37 << 16 >> 16) * 7 | 0;
      $arrayidx257 = $labelInfo + 1310736 + ($38 + -7 << 2) | 0;
      HEAP32[$arrayidx257 >> 2] = (HEAP32[$arrayidx257 >> 2] | 0) + 1;
      $arrayidx260 = $labelInfo + 1310736 + ($38 + -6 << 2) | 0;
      HEAP32[$arrayidx260 >> 2] = (HEAP32[$arrayidx260 >> 2] | 0) + $i$2;
      $arrayidx263 = $labelInfo + 1310736 + ($38 + -5 << 2) | 0;
      HEAP32[$arrayidx263 >> 2] = (HEAP32[$arrayidx263 >> 2] | 0) + $j$0;
      $add265 = $38 + -3 | 0;
      if ((HEAP32[$labelInfo + 1310736 + ($add265 << 2) >> 2] | 0) < ($i$2 | 0)) {
       $$sink = $i$2;
       $add270$sink = $add265;
       $wk_max$2 = $wk_max$1;
      } else {
       $wk_max$3 = $wk_max$1;
       break;
      }
     } else {
      $inc274 = $wk_max$1 + 1 | 0;
      if (($wk_max$1 | 0) > 32767) {
       label = 50;
       break L9;
      }
      HEAP16[$pnt2$3 >> 1] = $inc274;
      HEAP32[$labelInfo + 1179664 + ($wk_max$1 << 2) >> 2] = $inc274 << 16 >> 16;
      $mul284 = $wk_max$1 * 7 | 0;
      HEAP32[$labelInfo + 1310736 + ($mul284 << 2) >> 2] = 1;
      HEAP32[$labelInfo + 1310736 + ($mul284 + 1 << 2) >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($mul284 + 2 << 2) >> 2] = $j$0;
      HEAP32[$labelInfo + 1310736 + ($mul284 + 3 << 2) >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($mul284 + 4 << 2) >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($mul284 + 5 << 2) >> 2] = $j$0;
      $$sink = $j$0;
      $add270$sink = $mul284 + 6 | 0;
      $wk_max$2 = $inc274;
     }
     HEAP32[$labelInfo + 1310736 + ($add270$sink << 2) >> 2] = $$sink;
     $wk_max$3 = $wk_max$2;
     break;
    }
    $sub68 = ($8 << 16 >> 16) + -1 | 0;
    $arrayidx69 = $labelInfo + 1179664 + ($sub68 << 2) | 0;
    if ($cmp63) {
     $10 = HEAP32[$arrayidx69 >> 2] | 0;
     $11 = HEAP32[$labelInfo + 1179664 + ($sub72 << 2) >> 2] | 0;
     L36 : do if (($10 | 0) > ($11 | 0)) {
      HEAP16[$pnt2$3 >> 1] = $11;
      $k$0 = 0;
      $wk$0 = $arraydecay;
      while (1) {
       if (($k$0 | 0) >= ($wk_max$1 | 0)) {
        $14 = $11;
        break L36;
       }
       if ((HEAP32[$wk$0 >> 2] | 0) == ($10 | 0)) HEAP32[$wk$0 >> 2] = $11;
       $k$0 = $k$0 + 1 | 0;
       $wk$0 = $wk$0 + 4 | 0;
      }
     } else {
      HEAP16[$pnt2$3 >> 1] = $10;
      if (($10 | 0) < ($11 | 0)) {
       $k$1 = 0;
       $wk$1 = $arraydecay;
       while (1) {
        if (($k$1 | 0) >= ($wk_max$1 | 0)) {
         $14 = $10;
         break L36;
        }
        if ((HEAP32[$wk$1 >> 2] | 0) == ($11 | 0)) HEAP32[$wk$1 >> 2] = $10;
        $k$1 = $k$1 + 1 | 0;
        $wk$1 = $wk$1 + 4 | 0;
       }
      } else $14 = $10;
     } while (0);
     $15 = ($14 << 16 >> 16) * 7 | 0;
     $arrayidx116 = $labelInfo + 1310736 + ($15 + -7 << 2) | 0;
     HEAP32[$arrayidx116 >> 2] = (HEAP32[$arrayidx116 >> 2] | 0) + 1;
     $arrayidx119 = $labelInfo + 1310736 + ($15 + -6 << 2) | 0;
     HEAP32[$arrayidx119 >> 2] = (HEAP32[$arrayidx119 >> 2] | 0) + $i$2;
     $arrayidx122 = $labelInfo + 1310736 + ($15 + -5 << 2) | 0;
     HEAP32[$arrayidx122 >> 2] = (HEAP32[$arrayidx122 >> 2] | 0) + $j$0;
     HEAP32[$labelInfo + 1310736 + ($15 + -1 << 2) >> 2] = $j$0;
     $wk_max$3 = $wk_max$1;
     break;
    }
    $19 = HEAP16[$add$ptr127 >> 1] | 0;
    if ($19 << 16 >> 16 <= 0) {
     HEAP16[$pnt2$3 >> 1] = $8;
     $mul195 = $sub68 * 7 | 0;
     $arrayidx197 = $labelInfo + 1310736 + ($mul195 << 2) | 0;
     HEAP32[$arrayidx197 >> 2] = (HEAP32[$arrayidx197 >> 2] | 0) + 1;
     $arrayidx200 = $labelInfo + 1310736 + ($mul195 + 1 << 2) | 0;
     HEAP32[$arrayidx200 >> 2] = (HEAP32[$arrayidx200 >> 2] | 0) + $i$2;
     $arrayidx203 = $labelInfo + 1310736 + ($mul195 + 2 << 2) | 0;
     HEAP32[$arrayidx203 >> 2] = (HEAP32[$arrayidx203 >> 2] | 0) + $j$0;
     $arrayidx206 = $labelInfo + 1310736 + ($mul195 + 3 << 2) | 0;
     if ((HEAP32[$arrayidx206 >> 2] | 0) > ($i$2 | 0)) HEAP32[$arrayidx206 >> 2] = $i$2;
     HEAP32[$labelInfo + 1310736 + ($mul195 + 6 << 2) >> 2] = $j$0;
     $wk_max$3 = $wk_max$1;
     break;
    }
    $20 = HEAP32[$arrayidx69 >> 2] | 0;
    $21 = HEAP32[$labelInfo + 1179664 + (($19 << 16 >> 16) + -1 << 2) >> 2] | 0;
    L59 : do if (($20 | 0) > ($21 | 0)) {
     HEAP16[$pnt2$3 >> 1] = $21;
     $k$2 = 0;
     $wk$2 = $arraydecay;
     while (1) {
      if (($k$2 | 0) >= ($wk_max$1 | 0)) {
       $24 = $21;
       break L59;
      }
      if ((HEAP32[$wk$2 >> 2] | 0) == ($20 | 0)) HEAP32[$wk$2 >> 2] = $21;
      $k$2 = $k$2 + 1 | 0;
      $wk$2 = $wk$2 + 4 | 0;
     }
    } else {
     HEAP16[$pnt2$3 >> 1] = $20;
     if (($20 | 0) < ($21 | 0)) {
      $k$3 = 0;
      $wk$3 = $arraydecay;
      while (1) {
       if (($k$3 | 0) >= ($wk_max$1 | 0)) {
        $24 = $20;
        break L59;
       }
       if ((HEAP32[$wk$3 >> 2] | 0) == ($21 | 0)) HEAP32[$wk$3 >> 2] = $20;
       $k$3 = $k$3 + 1 | 0;
       $wk$3 = $wk$3 + 4 | 0;
      }
     } else $24 = $20;
    } while (0);
    $25 = ($24 << 16 >> 16) * 7 | 0;
    $arrayidx183 = $labelInfo + 1310736 + ($25 + -7 << 2) | 0;
    HEAP32[$arrayidx183 >> 2] = (HEAP32[$arrayidx183 >> 2] | 0) + 1;
    $arrayidx186 = $labelInfo + 1310736 + ($25 + -6 << 2) | 0;
    HEAP32[$arrayidx186 >> 2] = (HEAP32[$arrayidx186 >> 2] | 0) + $i$2;
    $arrayidx189 = $labelInfo + 1310736 + ($25 + -5 << 2) | 0;
    HEAP32[$arrayidx189 >> 2] = (HEAP32[$arrayidx189 >> 2] | 0) + $j$0;
    $wk_max$3 = $wk_max$1;
   } while (0);
   $dpnt$1 = $dpnt$1 + 1 | 0;
   $i$2 = $i$2 + 1 | 0;
   $pnt$1 = $pnt$1 + 2 | 0;
   $pnt2$3 = $pnt2$3 + 2 | 0;
   $wk_max$1 = $wk_max$3;
  }
  $dpnt$0 = $dpnt$1 + 2 | 0;
  $j$0 = $j$0 + 1 | 0;
  $pnt$0 = $pnt$1 + 4 | 0;
  $pnt2$2 = $pnt2$3 + 4 | 0;
  $wk_max$0 = $wk_max$1;
 }
 L77 : do if ((label | 0) == 50) {
  _arLog(3, 3256, $vararg_buffer);
  $retval$0 = -1;
 } else if ((label | 0) == 56) {
  $arrayidx319 = $labelInfo + 12 | 0;
  $i$3 = 1;
  $j$1 = 1;
  $wk$4 = $arraydecay;
  while (1) {
   if (($i$3 | 0) > ($wk_max$0 | 0)) break;
   $43 = HEAP32[$wk$4 >> 2] | 0;
   if (($43 | 0) == ($i$3 | 0)) {
    $cond = $j$1;
    $j$2 = $j$1 + 1 | 0;
   } else {
    $cond = HEAP32[$labelInfo + 1179664 + ($43 + -1 << 2) >> 2] | 0;
    $j$2 = $j$1;
   }
   HEAP32[$wk$4 >> 2] = $cond;
   $i$3 = $i$3 + 1 | 0;
   $j$1 = $j$2;
   $wk$4 = $wk$4 + 4 | 0;
  }
  $label_num317 = $labelInfo + 8 | 0;
  $sub340 = $j$1 + -1 | 0;
  HEAP32[$label_num317 >> 2] = $sub340;
  if (!$sub340) $retval$0 = 0; else {
   _memset($arrayidx319 | 0, 0, $sub340 << 2 | 0) | 0;
   _memset($labelInfo + 655376 | 0, 0, $sub340 << 4 | 0) | 0;
   $45 = $sub340;
   $i$4 = 0;
   while (1) {
    if (($i$4 | 0) >= ($45 | 0)) {
     $i$5 = 0;
     break;
    }
    $mul352 = $i$4 << 2;
    HEAP32[$labelInfo + 131084 + ($mul352 << 2) >> 2] = $xsize;
    HEAP32[$labelInfo + 131084 + (($mul352 | 1) << 2) >> 2] = 0;
    HEAP32[$labelInfo + 131084 + (($mul352 | 2) << 2) >> 2] = $ysize;
    HEAP32[$labelInfo + 131084 + (($mul352 | 3) << 2) >> 2] = 0;
    $45 = HEAP32[$label_num317 >> 2] | 0;
    $i$4 = $i$4 + 1 | 0;
   }
   while (1) {
    if (($i$5 | 0) >= ($wk_max$0 | 0)) {
     $i$6 = 0;
     break;
    }
    $sub372 = (HEAP32[$labelInfo + 1179664 + ($i$5 << 2) >> 2] | 0) + -1 | 0;
    $mul373 = $i$5 * 7 | 0;
    $arrayidx376 = $labelInfo + 12 + ($sub372 << 2) | 0;
    HEAP32[$arrayidx376 >> 2] = (HEAP32[$arrayidx376 >> 2] | 0) + (HEAP32[$labelInfo + 1310736 + ($mul373 << 2) >> 2] | 0);
    $mul382 = $sub372 << 1;
    $arrayidx384 = $labelInfo + 655376 + ($mul382 << 3) | 0;
    HEAPF64[$arrayidx384 >> 3] = +HEAPF64[$arrayidx384 >> 3] + +(HEAP32[$labelInfo + 1310736 + ($mul373 + 1 << 2) >> 2] | 0);
    $arrayidx392 = $labelInfo + 655376 + (($mul382 | 1) << 3) | 0;
    HEAPF64[$arrayidx392 >> 3] = +HEAPF64[$arrayidx392 >> 3] + +(HEAP32[$labelInfo + 1310736 + ($mul373 + 2 << 2) >> 2] | 0);
    $mul394 = $sub372 << 2;
    $arrayidx396 = $labelInfo + 131084 + ($mul394 << 2) | 0;
    $54 = HEAP32[$labelInfo + 1310736 + ($mul373 + 3 << 2) >> 2] | 0;
    if ((HEAP32[$arrayidx396 >> 2] | 0) > ($54 | 0)) HEAP32[$arrayidx396 >> 2] = $54;
    $arrayidx412 = $labelInfo + 131084 + (($mul394 | 1) << 2) | 0;
    $56 = HEAP32[$labelInfo + 1310736 + ($mul373 + 4 << 2) >> 2] | 0;
    if ((HEAP32[$arrayidx412 >> 2] | 0) < ($56 | 0)) HEAP32[$arrayidx412 >> 2] = $56;
    $arrayidx428 = $labelInfo + 131084 + (($mul394 | 2) << 2) | 0;
    $58 = HEAP32[$labelInfo + 1310736 + ($mul373 + 5 << 2) >> 2] | 0;
    if ((HEAP32[$arrayidx428 >> 2] | 0) > ($58 | 0)) HEAP32[$arrayidx428 >> 2] = $58;
    $arrayidx444 = $labelInfo + 131084 + (($mul394 | 3) << 2) | 0;
    $60 = HEAP32[$labelInfo + 1310736 + ($mul373 + 6 << 2) >> 2] | 0;
    if ((HEAP32[$arrayidx444 >> 2] | 0) < ($60 | 0)) HEAP32[$arrayidx444 >> 2] = $60;
    $i$5 = $i$5 + 1 | 0;
   }
   while (1) {
    if (($i$6 | 0) >= (HEAP32[$label_num317 >> 2] | 0)) {
     $retval$0 = 0;
     break L77;
    }
    $arrayidx465 = $labelInfo + 12 + ($i$6 << 2) | 0;
    $mul467 = $i$6 << 1;
    $arrayidx469 = $labelInfo + 655376 + ($mul467 << 3) | 0;
    HEAPF64[$arrayidx469 >> 3] = +HEAPF64[$arrayidx469 >> 3] / +(HEAP32[$arrayidx465 >> 2] | 0);
    $arrayidx474 = $labelInfo + 655376 + (($mul467 | 1) << 3) | 0;
    HEAPF64[$arrayidx474 >> 3] = +HEAPF64[$arrayidx474 >> 3] / +(HEAP32[$arrayidx465 >> 2] | 0);
    $i$6 = $i$6 + 1 | 0;
   }
  }
 } while (0);
 STACKTOP = sp;
 return $retval$0 | 0;
}

function _arLabelingSubEWRC($image, $xsize, $ysize, $labelingThresh, $labelInfo) {
 $image = $image | 0;
 $xsize = $xsize | 0;
 $ysize = $ysize | 0;
 $labelingThresh = $labelingThresh | 0;
 $labelInfo = $labelInfo | 0;
 var $$sink = 0, $0 = 0, $10 = 0, $11 = 0, $14 = 0, $15 = 0, $19 = 0, $20 = 0, $21 = 0, $24 = 0, $25 = 0, $3 = 0, $37 = 0, $38 = 0, $4 = 0, $43 = 0, $45 = 0, $54 = 0, $56 = 0, $58 = 0, $60 = 0, $8 = 0, $9 = 0, $add = 0, $add$ptr127 = 0, $add265 = 0, $add270$sink = 0, $arraydecay = 0, $arrayidx116 = 0, $arrayidx119 = 0, $arrayidx122 = 0, $arrayidx183 = 0, $arrayidx186 = 0, $arrayidx189 = 0, $arrayidx197 = 0, $arrayidx200 = 0, $arrayidx203 = 0, $arrayidx206 = 0, $arrayidx228 = 0, $arrayidx231 = 0, $arrayidx234 = 0, $arrayidx237 = 0, $arrayidx257 = 0, $arrayidx260 = 0, $arrayidx263 = 0, $arrayidx319 = 0, $arrayidx37 = 0, $arrayidx376 = 0, $arrayidx384 = 0, $arrayidx392 = 0, $arrayidx396 = 0, $arrayidx412 = 0, $arrayidx428 = 0, $arrayidx444 = 0, $arrayidx46 = 0, $arrayidx465 = 0, $arrayidx469 = 0, $arrayidx474 = 0, $arrayidx49 = 0, $arrayidx52 = 0, $arrayidx69 = 0, $cmp63 = 0, $cond = 0, $dpnt$0 = 0, $dpnt$1 = 0, $i$0 = 0, $i$1 = 0, $i$2 = 0, $i$3 = 0, $i$4 = 0, $i$5 = 0, $i$6 = 0, $inc274 = 0, $j$0 = 0, $j$1 = 0, $j$2 = 0, $k$0 = 0, $k$1 = 0, $k$2 = 0, $k$3 = 0, $label_num317 = 0, $mul195 = 0, $mul226 = 0, $mul284 = 0, $mul352 = 0, $mul373 = 0, $mul382 = 0, $mul394 = 0, $mul467 = 0, $pnt$0 = 0, $pnt$1 = 0, $pnt1$0 = 0, $pnt1$1 = 0, $pnt2$0 = 0, $pnt2$1 = 0, $pnt2$2 = 0, $pnt2$3 = 0, $retval$0 = 0, $sub = 0, $sub340 = 0, $sub36 = 0, $sub372 = 0, $sub68 = 0, $sub7 = 0, $sub72 = 0, $vararg_buffer = 0, $wk$0 = 0, $wk$1 = 0, $wk$2 = 0, $wk$3 = 0, $wk$4 = 0, $wk_max$0 = 0, $wk_max$1 = 0, $wk_max$2 = 0, $wk_max$3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $vararg_buffer = sp;
 $0 = HEAP32[$labelInfo >> 2] | 0;
 $sub = $ysize + -1 | 0;
 $i$0 = 0;
 $pnt1$0 = $0;
 $pnt2$0 = $0 + ((Math_imul($sub, $xsize) | 0) << 1) | 0;
 while (1) {
  if (($i$0 | 0) >= ($xsize | 0)) break;
  HEAP16[$pnt2$0 >> 1] = 0;
  HEAP16[$pnt1$0 >> 1] = 0;
  $i$0 = $i$0 + 1 | 0;
  $pnt1$0 = $pnt1$0 + 2 | 0;
  $pnt2$0 = $pnt2$0 + 2 | 0;
 }
 $sub7 = $xsize + -1 | 0;
 $i$1 = 0;
 $pnt1$1 = $0;
 $pnt2$1 = $0 + ($sub7 << 1) | 0;
 while (1) {
  if (($i$1 | 0) >= ($ysize | 0)) break;
  HEAP16[$pnt2$1 >> 1] = 0;
  HEAP16[$pnt1$1 >> 1] = 0;
  $i$1 = $i$1 + 1 | 0;
  $pnt1$1 = $pnt1$1 + ($xsize << 1) | 0;
  $pnt2$1 = $pnt2$1 + ($xsize << 1) | 0;
 }
 $arraydecay = $labelInfo + 1179664 | 0;
 $add = $xsize + 1 | 0;
 $sub36 = 0 - $xsize | 0;
 $dpnt$0 = (HEAP32[$labelInfo + 4 >> 2] | 0) + $add | 0;
 $j$0 = 1;
 $pnt$0 = $image + $add | 0;
 $pnt2$2 = $0 + ($add << 1) | 0;
 $wk_max$0 = 0;
 L9 : while (1) {
  if (($j$0 | 0) < ($sub | 0)) {
   $dpnt$1 = $dpnt$0;
   $i$2 = 1;
   $pnt$1 = $pnt$0;
   $pnt2$3 = $pnt2$2;
   $wk_max$1 = $wk_max$0;
  } else {
   label = 56;
   break;
  }
  while (1) {
   if (($i$2 | 0) >= ($sub7 | 0)) break;
   do if ((HEAPU8[$pnt$1 >> 0] | 0 | 0) > ($labelingThresh | 0)) {
    HEAP8[$dpnt$1 >> 0] = -1;
    $arrayidx37 = $pnt2$3 + ($sub36 << 1) | 0;
    $3 = HEAP16[$arrayidx37 >> 1] | 0;
    if ($3 << 16 >> 16 > 0) {
     HEAP16[$pnt2$3 >> 1] = $3;
     $4 = ($3 << 16 >> 16) * 7 | 0;
     $arrayidx46 = $labelInfo + 1310736 + ($4 + -7 << 2) | 0;
     HEAP32[$arrayidx46 >> 2] = (HEAP32[$arrayidx46 >> 2] | 0) + 1;
     $arrayidx49 = $labelInfo + 1310736 + ($4 + -6 << 2) | 0;
     HEAP32[$arrayidx49 >> 2] = (HEAP32[$arrayidx49 >> 2] | 0) + $i$2;
     $arrayidx52 = $labelInfo + 1310736 + ($4 + -5 << 2) | 0;
     HEAP32[$arrayidx52 >> 2] = (HEAP32[$arrayidx52 >> 2] | 0) + $j$0;
     HEAP32[$labelInfo + 1310736 + ($4 + -1 << 2) >> 2] = $j$0;
     $wk_max$3 = $wk_max$1;
     break;
    }
    $8 = HEAP16[$arrayidx37 + 2 >> 1] | 0;
    $9 = HEAP16[$arrayidx37 + -2 >> 1] | 0;
    $cmp63 = $9 << 16 >> 16 > 0;
    $add$ptr127 = $pnt2$3 + -2 | 0;
    $sub72 = ($9 << 16 >> 16) + -1 | 0;
    if ($8 << 16 >> 16 <= 0) {
     if ($cmp63) {
      HEAP16[$pnt2$3 >> 1] = $9;
      $mul226 = $sub72 * 7 | 0;
      $arrayidx228 = $labelInfo + 1310736 + ($mul226 << 2) | 0;
      HEAP32[$arrayidx228 >> 2] = (HEAP32[$arrayidx228 >> 2] | 0) + 1;
      $arrayidx231 = $labelInfo + 1310736 + ($mul226 + 1 << 2) | 0;
      HEAP32[$arrayidx231 >> 2] = (HEAP32[$arrayidx231 >> 2] | 0) + $i$2;
      $arrayidx234 = $labelInfo + 1310736 + ($mul226 + 2 << 2) | 0;
      HEAP32[$arrayidx234 >> 2] = (HEAP32[$arrayidx234 >> 2] | 0) + $j$0;
      $arrayidx237 = $labelInfo + 1310736 + ($mul226 + 4 << 2) | 0;
      if ((HEAP32[$arrayidx237 >> 2] | 0) < ($i$2 | 0)) HEAP32[$arrayidx237 >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($mul226 + 6 << 2) >> 2] = $j$0;
      $wk_max$3 = $wk_max$1;
      break;
     }
     $37 = HEAP16[$add$ptr127 >> 1] | 0;
     if ($37 << 16 >> 16 > 0) {
      HEAP16[$pnt2$3 >> 1] = $37;
      $38 = ($37 << 16 >> 16) * 7 | 0;
      $arrayidx257 = $labelInfo + 1310736 + ($38 + -7 << 2) | 0;
      HEAP32[$arrayidx257 >> 2] = (HEAP32[$arrayidx257 >> 2] | 0) + 1;
      $arrayidx260 = $labelInfo + 1310736 + ($38 + -6 << 2) | 0;
      HEAP32[$arrayidx260 >> 2] = (HEAP32[$arrayidx260 >> 2] | 0) + $i$2;
      $arrayidx263 = $labelInfo + 1310736 + ($38 + -5 << 2) | 0;
      HEAP32[$arrayidx263 >> 2] = (HEAP32[$arrayidx263 >> 2] | 0) + $j$0;
      $add265 = $38 + -3 | 0;
      if ((HEAP32[$labelInfo + 1310736 + ($add265 << 2) >> 2] | 0) < ($i$2 | 0)) {
       $$sink = $i$2;
       $add270$sink = $add265;
       $wk_max$2 = $wk_max$1;
      } else {
       $wk_max$3 = $wk_max$1;
       break;
      }
     } else {
      $inc274 = $wk_max$1 + 1 | 0;
      if (($wk_max$1 | 0) > 32767) {
       label = 50;
       break L9;
      }
      HEAP16[$pnt2$3 >> 1] = $inc274;
      HEAP32[$labelInfo + 1179664 + ($wk_max$1 << 2) >> 2] = $inc274 << 16 >> 16;
      $mul284 = $wk_max$1 * 7 | 0;
      HEAP32[$labelInfo + 1310736 + ($mul284 << 2) >> 2] = 1;
      HEAP32[$labelInfo + 1310736 + ($mul284 + 1 << 2) >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($mul284 + 2 << 2) >> 2] = $j$0;
      HEAP32[$labelInfo + 1310736 + ($mul284 + 3 << 2) >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($mul284 + 4 << 2) >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($mul284 + 5 << 2) >> 2] = $j$0;
      $$sink = $j$0;
      $add270$sink = $mul284 + 6 | 0;
      $wk_max$2 = $inc274;
     }
     HEAP32[$labelInfo + 1310736 + ($add270$sink << 2) >> 2] = $$sink;
     $wk_max$3 = $wk_max$2;
     break;
    }
    $sub68 = ($8 << 16 >> 16) + -1 | 0;
    $arrayidx69 = $labelInfo + 1179664 + ($sub68 << 2) | 0;
    if ($cmp63) {
     $10 = HEAP32[$arrayidx69 >> 2] | 0;
     $11 = HEAP32[$labelInfo + 1179664 + ($sub72 << 2) >> 2] | 0;
     L35 : do if (($10 | 0) > ($11 | 0)) {
      HEAP16[$pnt2$3 >> 1] = $11;
      $k$0 = 0;
      $wk$0 = $arraydecay;
      while (1) {
       if (($k$0 | 0) >= ($wk_max$1 | 0)) {
        $14 = $11;
        break L35;
       }
       if ((HEAP32[$wk$0 >> 2] | 0) == ($10 | 0)) HEAP32[$wk$0 >> 2] = $11;
       $k$0 = $k$0 + 1 | 0;
       $wk$0 = $wk$0 + 4 | 0;
      }
     } else {
      HEAP16[$pnt2$3 >> 1] = $10;
      if (($10 | 0) < ($11 | 0)) {
       $k$1 = 0;
       $wk$1 = $arraydecay;
       while (1) {
        if (($k$1 | 0) >= ($wk_max$1 | 0)) {
         $14 = $10;
         break L35;
        }
        if ((HEAP32[$wk$1 >> 2] | 0) == ($11 | 0)) HEAP32[$wk$1 >> 2] = $10;
        $k$1 = $k$1 + 1 | 0;
        $wk$1 = $wk$1 + 4 | 0;
       }
      } else $14 = $10;
     } while (0);
     $15 = ($14 << 16 >> 16) * 7 | 0;
     $arrayidx116 = $labelInfo + 1310736 + ($15 + -7 << 2) | 0;
     HEAP32[$arrayidx116 >> 2] = (HEAP32[$arrayidx116 >> 2] | 0) + 1;
     $arrayidx119 = $labelInfo + 1310736 + ($15 + -6 << 2) | 0;
     HEAP32[$arrayidx119 >> 2] = (HEAP32[$arrayidx119 >> 2] | 0) + $i$2;
     $arrayidx122 = $labelInfo + 1310736 + ($15 + -5 << 2) | 0;
     HEAP32[$arrayidx122 >> 2] = (HEAP32[$arrayidx122 >> 2] | 0) + $j$0;
     HEAP32[$labelInfo + 1310736 + ($15 + -1 << 2) >> 2] = $j$0;
     $wk_max$3 = $wk_max$1;
     break;
    }
    $19 = HEAP16[$add$ptr127 >> 1] | 0;
    if ($19 << 16 >> 16 <= 0) {
     HEAP16[$pnt2$3 >> 1] = $8;
     $mul195 = $sub68 * 7 | 0;
     $arrayidx197 = $labelInfo + 1310736 + ($mul195 << 2) | 0;
     HEAP32[$arrayidx197 >> 2] = (HEAP32[$arrayidx197 >> 2] | 0) + 1;
     $arrayidx200 = $labelInfo + 1310736 + ($mul195 + 1 << 2) | 0;
     HEAP32[$arrayidx200 >> 2] = (HEAP32[$arrayidx200 >> 2] | 0) + $i$2;
     $arrayidx203 = $labelInfo + 1310736 + ($mul195 + 2 << 2) | 0;
     HEAP32[$arrayidx203 >> 2] = (HEAP32[$arrayidx203 >> 2] | 0) + $j$0;
     $arrayidx206 = $labelInfo + 1310736 + ($mul195 + 3 << 2) | 0;
     if ((HEAP32[$arrayidx206 >> 2] | 0) > ($i$2 | 0)) HEAP32[$arrayidx206 >> 2] = $i$2;
     HEAP32[$labelInfo + 1310736 + ($mul195 + 6 << 2) >> 2] = $j$0;
     $wk_max$3 = $wk_max$1;
     break;
    }
    $20 = HEAP32[$arrayidx69 >> 2] | 0;
    $21 = HEAP32[$labelInfo + 1179664 + (($19 << 16 >> 16) + -1 << 2) >> 2] | 0;
    L58 : do if (($20 | 0) > ($21 | 0)) {
     HEAP16[$pnt2$3 >> 1] = $21;
     $k$2 = 0;
     $wk$2 = $arraydecay;
     while (1) {
      if (($k$2 | 0) >= ($wk_max$1 | 0)) {
       $24 = $21;
       break L58;
      }
      if ((HEAP32[$wk$2 >> 2] | 0) == ($20 | 0)) HEAP32[$wk$2 >> 2] = $21;
      $k$2 = $k$2 + 1 | 0;
      $wk$2 = $wk$2 + 4 | 0;
     }
    } else {
     HEAP16[$pnt2$3 >> 1] = $20;
     if (($20 | 0) < ($21 | 0)) {
      $k$3 = 0;
      $wk$3 = $arraydecay;
      while (1) {
       if (($k$3 | 0) >= ($wk_max$1 | 0)) {
        $24 = $20;
        break L58;
       }
       if ((HEAP32[$wk$3 >> 2] | 0) == ($21 | 0)) HEAP32[$wk$3 >> 2] = $20;
       $k$3 = $k$3 + 1 | 0;
       $wk$3 = $wk$3 + 4 | 0;
      }
     } else $24 = $20;
    } while (0);
    $25 = ($24 << 16 >> 16) * 7 | 0;
    $arrayidx183 = $labelInfo + 1310736 + ($25 + -7 << 2) | 0;
    HEAP32[$arrayidx183 >> 2] = (HEAP32[$arrayidx183 >> 2] | 0) + 1;
    $arrayidx186 = $labelInfo + 1310736 + ($25 + -6 << 2) | 0;
    HEAP32[$arrayidx186 >> 2] = (HEAP32[$arrayidx186 >> 2] | 0) + $i$2;
    $arrayidx189 = $labelInfo + 1310736 + ($25 + -5 << 2) | 0;
    HEAP32[$arrayidx189 >> 2] = (HEAP32[$arrayidx189 >> 2] | 0) + $j$0;
    $wk_max$3 = $wk_max$1;
   } else {
    HEAP16[$pnt2$3 >> 1] = 0;
    HEAP8[$dpnt$1 >> 0] = 0;
    $wk_max$3 = $wk_max$1;
   } while (0);
   $dpnt$1 = $dpnt$1 + 1 | 0;
   $i$2 = $i$2 + 1 | 0;
   $pnt$1 = $pnt$1 + 1 | 0;
   $pnt2$3 = $pnt2$3 + 2 | 0;
   $wk_max$1 = $wk_max$3;
  }
  $dpnt$0 = $dpnt$1 + 2 | 0;
  $j$0 = $j$0 + 1 | 0;
  $pnt$0 = $pnt$1 + 2 | 0;
  $pnt2$2 = $pnt2$3 + 4 | 0;
  $wk_max$0 = $wk_max$1;
 }
 L77 : do if ((label | 0) == 50) {
  _arLog(3, 3256, $vararg_buffer);
  $retval$0 = -1;
 } else if ((label | 0) == 56) {
  $arrayidx319 = $labelInfo + 12 | 0;
  $i$3 = 1;
  $j$1 = 1;
  $wk$4 = $arraydecay;
  while (1) {
   if (($i$3 | 0) > ($wk_max$0 | 0)) break;
   $43 = HEAP32[$wk$4 >> 2] | 0;
   if (($43 | 0) == ($i$3 | 0)) {
    $cond = $j$1;
    $j$2 = $j$1 + 1 | 0;
   } else {
    $cond = HEAP32[$labelInfo + 1179664 + ($43 + -1 << 2) >> 2] | 0;
    $j$2 = $j$1;
   }
   HEAP32[$wk$4 >> 2] = $cond;
   $i$3 = $i$3 + 1 | 0;
   $j$1 = $j$2;
   $wk$4 = $wk$4 + 4 | 0;
  }
  $label_num317 = $labelInfo + 8 | 0;
  $sub340 = $j$1 + -1 | 0;
  HEAP32[$label_num317 >> 2] = $sub340;
  if (!$sub340) $retval$0 = 0; else {
   _memset($arrayidx319 | 0, 0, $sub340 << 2 | 0) | 0;
   _memset($labelInfo + 655376 | 0, 0, $sub340 << 4 | 0) | 0;
   $45 = $sub340;
   $i$4 = 0;
   while (1) {
    if (($i$4 | 0) >= ($45 | 0)) {
     $i$5 = 0;
     break;
    }
    $mul352 = $i$4 << 2;
    HEAP32[$labelInfo + 131084 + ($mul352 << 2) >> 2] = $xsize;
    HEAP32[$labelInfo + 131084 + (($mul352 | 1) << 2) >> 2] = 0;
    HEAP32[$labelInfo + 131084 + (($mul352 | 2) << 2) >> 2] = $ysize;
    HEAP32[$labelInfo + 131084 + (($mul352 | 3) << 2) >> 2] = 0;
    $45 = HEAP32[$label_num317 >> 2] | 0;
    $i$4 = $i$4 + 1 | 0;
   }
   while (1) {
    if (($i$5 | 0) >= ($wk_max$0 | 0)) {
     $i$6 = 0;
     break;
    }
    $sub372 = (HEAP32[$labelInfo + 1179664 + ($i$5 << 2) >> 2] | 0) + -1 | 0;
    $mul373 = $i$5 * 7 | 0;
    $arrayidx376 = $labelInfo + 12 + ($sub372 << 2) | 0;
    HEAP32[$arrayidx376 >> 2] = (HEAP32[$arrayidx376 >> 2] | 0) + (HEAP32[$labelInfo + 1310736 + ($mul373 << 2) >> 2] | 0);
    $mul382 = $sub372 << 1;
    $arrayidx384 = $labelInfo + 655376 + ($mul382 << 3) | 0;
    HEAPF64[$arrayidx384 >> 3] = +HEAPF64[$arrayidx384 >> 3] + +(HEAP32[$labelInfo + 1310736 + ($mul373 + 1 << 2) >> 2] | 0);
    $arrayidx392 = $labelInfo + 655376 + (($mul382 | 1) << 3) | 0;
    HEAPF64[$arrayidx392 >> 3] = +HEAPF64[$arrayidx392 >> 3] + +(HEAP32[$labelInfo + 1310736 + ($mul373 + 2 << 2) >> 2] | 0);
    $mul394 = $sub372 << 2;
    $arrayidx396 = $labelInfo + 131084 + ($mul394 << 2) | 0;
    $54 = HEAP32[$labelInfo + 1310736 + ($mul373 + 3 << 2) >> 2] | 0;
    if ((HEAP32[$arrayidx396 >> 2] | 0) > ($54 | 0)) HEAP32[$arrayidx396 >> 2] = $54;
    $arrayidx412 = $labelInfo + 131084 + (($mul394 | 1) << 2) | 0;
    $56 = HEAP32[$labelInfo + 1310736 + ($mul373 + 4 << 2) >> 2] | 0;
    if ((HEAP32[$arrayidx412 >> 2] | 0) < ($56 | 0)) HEAP32[$arrayidx412 >> 2] = $56;
    $arrayidx428 = $labelInfo + 131084 + (($mul394 | 2) << 2) | 0;
    $58 = HEAP32[$labelInfo + 1310736 + ($mul373 + 5 << 2) >> 2] | 0;
    if ((HEAP32[$arrayidx428 >> 2] | 0) > ($58 | 0)) HEAP32[$arrayidx428 >> 2] = $58;
    $arrayidx444 = $labelInfo + 131084 + (($mul394 | 3) << 2) | 0;
    $60 = HEAP32[$labelInfo + 1310736 + ($mul373 + 6 << 2) >> 2] | 0;
    if ((HEAP32[$arrayidx444 >> 2] | 0) < ($60 | 0)) HEAP32[$arrayidx444 >> 2] = $60;
    $i$5 = $i$5 + 1 | 0;
   }
   while (1) {
    if (($i$6 | 0) >= (HEAP32[$label_num317 >> 2] | 0)) {
     $retval$0 = 0;
     break L77;
    }
    $arrayidx465 = $labelInfo + 12 + ($i$6 << 2) | 0;
    $mul467 = $i$6 << 1;
    $arrayidx469 = $labelInfo + 655376 + ($mul467 << 3) | 0;
    HEAPF64[$arrayidx469 >> 3] = +HEAPF64[$arrayidx469 >> 3] / +(HEAP32[$arrayidx465 >> 2] | 0);
    $arrayidx474 = $labelInfo + 655376 + (($mul467 | 1) << 3) | 0;
    HEAPF64[$arrayidx474 >> 3] = +HEAPF64[$arrayidx474 >> 3] / +(HEAP32[$arrayidx465 >> 2] | 0);
    $i$6 = $i$6 + 1 | 0;
   }
  }
 } while (0);
 STACKTOP = sp;
 return $retval$0 | 0;
}

function _arLabelingSubEBRC($image, $xsize, $ysize, $labelingThresh, $labelInfo) {
 $image = $image | 0;
 $xsize = $xsize | 0;
 $ysize = $ysize | 0;
 $labelingThresh = $labelingThresh | 0;
 $labelInfo = $labelInfo | 0;
 var $$sink = 0, $0 = 0, $10 = 0, $11 = 0, $14 = 0, $15 = 0, $19 = 0, $20 = 0, $21 = 0, $24 = 0, $25 = 0, $3 = 0, $37 = 0, $38 = 0, $4 = 0, $43 = 0, $45 = 0, $54 = 0, $56 = 0, $58 = 0, $60 = 0, $8 = 0, $9 = 0, $add = 0, $add$ptr127 = 0, $add265 = 0, $add270$sink = 0, $arraydecay = 0, $arrayidx116 = 0, $arrayidx119 = 0, $arrayidx122 = 0, $arrayidx183 = 0, $arrayidx186 = 0, $arrayidx189 = 0, $arrayidx197 = 0, $arrayidx200 = 0, $arrayidx203 = 0, $arrayidx206 = 0, $arrayidx228 = 0, $arrayidx231 = 0, $arrayidx234 = 0, $arrayidx237 = 0, $arrayidx257 = 0, $arrayidx260 = 0, $arrayidx263 = 0, $arrayidx319 = 0, $arrayidx37 = 0, $arrayidx376 = 0, $arrayidx384 = 0, $arrayidx392 = 0, $arrayidx396 = 0, $arrayidx412 = 0, $arrayidx428 = 0, $arrayidx444 = 0, $arrayidx46 = 0, $arrayidx465 = 0, $arrayidx469 = 0, $arrayidx474 = 0, $arrayidx49 = 0, $arrayidx52 = 0, $arrayidx69 = 0, $cmp63 = 0, $cond = 0, $dpnt$0 = 0, $dpnt$1 = 0, $i$0 = 0, $i$1 = 0, $i$2 = 0, $i$3 = 0, $i$4 = 0, $i$5 = 0, $i$6 = 0, $inc274 = 0, $j$0 = 0, $j$1 = 0, $j$2 = 0, $k$0 = 0, $k$1 = 0, $k$2 = 0, $k$3 = 0, $label_num317 = 0, $mul195 = 0, $mul226 = 0, $mul284 = 0, $mul352 = 0, $mul373 = 0, $mul382 = 0, $mul394 = 0, $mul467 = 0, $pnt$0 = 0, $pnt$1 = 0, $pnt1$0 = 0, $pnt1$1 = 0, $pnt2$0 = 0, $pnt2$1 = 0, $pnt2$2 = 0, $pnt2$3 = 0, $retval$0 = 0, $sub = 0, $sub340 = 0, $sub36 = 0, $sub372 = 0, $sub68 = 0, $sub7 = 0, $sub72 = 0, $vararg_buffer = 0, $wk$0 = 0, $wk$1 = 0, $wk$2 = 0, $wk$3 = 0, $wk$4 = 0, $wk_max$0 = 0, $wk_max$1 = 0, $wk_max$2 = 0, $wk_max$3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $vararg_buffer = sp;
 $0 = HEAP32[$labelInfo >> 2] | 0;
 $sub = $ysize + -1 | 0;
 $i$0 = 0;
 $pnt1$0 = $0;
 $pnt2$0 = $0 + ((Math_imul($sub, $xsize) | 0) << 1) | 0;
 while (1) {
  if (($i$0 | 0) >= ($xsize | 0)) break;
  HEAP16[$pnt2$0 >> 1] = 0;
  HEAP16[$pnt1$0 >> 1] = 0;
  $i$0 = $i$0 + 1 | 0;
  $pnt1$0 = $pnt1$0 + 2 | 0;
  $pnt2$0 = $pnt2$0 + 2 | 0;
 }
 $sub7 = $xsize + -1 | 0;
 $i$1 = 0;
 $pnt1$1 = $0;
 $pnt2$1 = $0 + ($sub7 << 1) | 0;
 while (1) {
  if (($i$1 | 0) >= ($ysize | 0)) break;
  HEAP16[$pnt2$1 >> 1] = 0;
  HEAP16[$pnt1$1 >> 1] = 0;
  $i$1 = $i$1 + 1 | 0;
  $pnt1$1 = $pnt1$1 + ($xsize << 1) | 0;
  $pnt2$1 = $pnt2$1 + ($xsize << 1) | 0;
 }
 $arraydecay = $labelInfo + 1179664 | 0;
 $add = $xsize + 1 | 0;
 $sub36 = 0 - $xsize | 0;
 $dpnt$0 = (HEAP32[$labelInfo + 4 >> 2] | 0) + $add | 0;
 $j$0 = 1;
 $pnt$0 = $image + $add | 0;
 $pnt2$2 = $0 + ($add << 1) | 0;
 $wk_max$0 = 0;
 L9 : while (1) {
  if (($j$0 | 0) < ($sub | 0)) {
   $dpnt$1 = $dpnt$0;
   $i$2 = 1;
   $pnt$1 = $pnt$0;
   $pnt2$3 = $pnt2$2;
   $wk_max$1 = $wk_max$0;
  } else {
   label = 56;
   break;
  }
  while (1) {
   if (($i$2 | 0) >= ($sub7 | 0)) break;
   do if ((HEAPU8[$pnt$1 >> 0] | 0 | 0) > ($labelingThresh | 0)) {
    HEAP16[$pnt2$3 >> 1] = 0;
    HEAP8[$dpnt$1 >> 0] = 0;
    $wk_max$3 = $wk_max$1;
   } else {
    HEAP8[$dpnt$1 >> 0] = -1;
    $arrayidx37 = $pnt2$3 + ($sub36 << 1) | 0;
    $3 = HEAP16[$arrayidx37 >> 1] | 0;
    if ($3 << 16 >> 16 > 0) {
     HEAP16[$pnt2$3 >> 1] = $3;
     $4 = ($3 << 16 >> 16) * 7 | 0;
     $arrayidx46 = $labelInfo + 1310736 + ($4 + -7 << 2) | 0;
     HEAP32[$arrayidx46 >> 2] = (HEAP32[$arrayidx46 >> 2] | 0) + 1;
     $arrayidx49 = $labelInfo + 1310736 + ($4 + -6 << 2) | 0;
     HEAP32[$arrayidx49 >> 2] = (HEAP32[$arrayidx49 >> 2] | 0) + $i$2;
     $arrayidx52 = $labelInfo + 1310736 + ($4 + -5 << 2) | 0;
     HEAP32[$arrayidx52 >> 2] = (HEAP32[$arrayidx52 >> 2] | 0) + $j$0;
     HEAP32[$labelInfo + 1310736 + ($4 + -1 << 2) >> 2] = $j$0;
     $wk_max$3 = $wk_max$1;
     break;
    }
    $8 = HEAP16[$arrayidx37 + 2 >> 1] | 0;
    $9 = HEAP16[$arrayidx37 + -2 >> 1] | 0;
    $cmp63 = $9 << 16 >> 16 > 0;
    $add$ptr127 = $pnt2$3 + -2 | 0;
    $sub72 = ($9 << 16 >> 16) + -1 | 0;
    if ($8 << 16 >> 16 <= 0) {
     if ($cmp63) {
      HEAP16[$pnt2$3 >> 1] = $9;
      $mul226 = $sub72 * 7 | 0;
      $arrayidx228 = $labelInfo + 1310736 + ($mul226 << 2) | 0;
      HEAP32[$arrayidx228 >> 2] = (HEAP32[$arrayidx228 >> 2] | 0) + 1;
      $arrayidx231 = $labelInfo + 1310736 + ($mul226 + 1 << 2) | 0;
      HEAP32[$arrayidx231 >> 2] = (HEAP32[$arrayidx231 >> 2] | 0) + $i$2;
      $arrayidx234 = $labelInfo + 1310736 + ($mul226 + 2 << 2) | 0;
      HEAP32[$arrayidx234 >> 2] = (HEAP32[$arrayidx234 >> 2] | 0) + $j$0;
      $arrayidx237 = $labelInfo + 1310736 + ($mul226 + 4 << 2) | 0;
      if ((HEAP32[$arrayidx237 >> 2] | 0) < ($i$2 | 0)) HEAP32[$arrayidx237 >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($mul226 + 6 << 2) >> 2] = $j$0;
      $wk_max$3 = $wk_max$1;
      break;
     }
     $37 = HEAP16[$add$ptr127 >> 1] | 0;
     if ($37 << 16 >> 16 > 0) {
      HEAP16[$pnt2$3 >> 1] = $37;
      $38 = ($37 << 16 >> 16) * 7 | 0;
      $arrayidx257 = $labelInfo + 1310736 + ($38 + -7 << 2) | 0;
      HEAP32[$arrayidx257 >> 2] = (HEAP32[$arrayidx257 >> 2] | 0) + 1;
      $arrayidx260 = $labelInfo + 1310736 + ($38 + -6 << 2) | 0;
      HEAP32[$arrayidx260 >> 2] = (HEAP32[$arrayidx260 >> 2] | 0) + $i$2;
      $arrayidx263 = $labelInfo + 1310736 + ($38 + -5 << 2) | 0;
      HEAP32[$arrayidx263 >> 2] = (HEAP32[$arrayidx263 >> 2] | 0) + $j$0;
      $add265 = $38 + -3 | 0;
      if ((HEAP32[$labelInfo + 1310736 + ($add265 << 2) >> 2] | 0) < ($i$2 | 0)) {
       $$sink = $i$2;
       $add270$sink = $add265;
       $wk_max$2 = $wk_max$1;
      } else {
       $wk_max$3 = $wk_max$1;
       break;
      }
     } else {
      $inc274 = $wk_max$1 + 1 | 0;
      if (($wk_max$1 | 0) > 32767) {
       label = 50;
       break L9;
      }
      HEAP16[$pnt2$3 >> 1] = $inc274;
      HEAP32[$labelInfo + 1179664 + ($wk_max$1 << 2) >> 2] = $inc274 << 16 >> 16;
      $mul284 = $wk_max$1 * 7 | 0;
      HEAP32[$labelInfo + 1310736 + ($mul284 << 2) >> 2] = 1;
      HEAP32[$labelInfo + 1310736 + ($mul284 + 1 << 2) >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($mul284 + 2 << 2) >> 2] = $j$0;
      HEAP32[$labelInfo + 1310736 + ($mul284 + 3 << 2) >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($mul284 + 4 << 2) >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($mul284 + 5 << 2) >> 2] = $j$0;
      $$sink = $j$0;
      $add270$sink = $mul284 + 6 | 0;
      $wk_max$2 = $inc274;
     }
     HEAP32[$labelInfo + 1310736 + ($add270$sink << 2) >> 2] = $$sink;
     $wk_max$3 = $wk_max$2;
     break;
    }
    $sub68 = ($8 << 16 >> 16) + -1 | 0;
    $arrayidx69 = $labelInfo + 1179664 + ($sub68 << 2) | 0;
    if ($cmp63) {
     $10 = HEAP32[$arrayidx69 >> 2] | 0;
     $11 = HEAP32[$labelInfo + 1179664 + ($sub72 << 2) >> 2] | 0;
     L36 : do if (($10 | 0) > ($11 | 0)) {
      HEAP16[$pnt2$3 >> 1] = $11;
      $k$0 = 0;
      $wk$0 = $arraydecay;
      while (1) {
       if (($k$0 | 0) >= ($wk_max$1 | 0)) {
        $14 = $11;
        break L36;
       }
       if ((HEAP32[$wk$0 >> 2] | 0) == ($10 | 0)) HEAP32[$wk$0 >> 2] = $11;
       $k$0 = $k$0 + 1 | 0;
       $wk$0 = $wk$0 + 4 | 0;
      }
     } else {
      HEAP16[$pnt2$3 >> 1] = $10;
      if (($10 | 0) < ($11 | 0)) {
       $k$1 = 0;
       $wk$1 = $arraydecay;
       while (1) {
        if (($k$1 | 0) >= ($wk_max$1 | 0)) {
         $14 = $10;
         break L36;
        }
        if ((HEAP32[$wk$1 >> 2] | 0) == ($11 | 0)) HEAP32[$wk$1 >> 2] = $10;
        $k$1 = $k$1 + 1 | 0;
        $wk$1 = $wk$1 + 4 | 0;
       }
      } else $14 = $10;
     } while (0);
     $15 = ($14 << 16 >> 16) * 7 | 0;
     $arrayidx116 = $labelInfo + 1310736 + ($15 + -7 << 2) | 0;
     HEAP32[$arrayidx116 >> 2] = (HEAP32[$arrayidx116 >> 2] | 0) + 1;
     $arrayidx119 = $labelInfo + 1310736 + ($15 + -6 << 2) | 0;
     HEAP32[$arrayidx119 >> 2] = (HEAP32[$arrayidx119 >> 2] | 0) + $i$2;
     $arrayidx122 = $labelInfo + 1310736 + ($15 + -5 << 2) | 0;
     HEAP32[$arrayidx122 >> 2] = (HEAP32[$arrayidx122 >> 2] | 0) + $j$0;
     HEAP32[$labelInfo + 1310736 + ($15 + -1 << 2) >> 2] = $j$0;
     $wk_max$3 = $wk_max$1;
     break;
    }
    $19 = HEAP16[$add$ptr127 >> 1] | 0;
    if ($19 << 16 >> 16 <= 0) {
     HEAP16[$pnt2$3 >> 1] = $8;
     $mul195 = $sub68 * 7 | 0;
     $arrayidx197 = $labelInfo + 1310736 + ($mul195 << 2) | 0;
     HEAP32[$arrayidx197 >> 2] = (HEAP32[$arrayidx197 >> 2] | 0) + 1;
     $arrayidx200 = $labelInfo + 1310736 + ($mul195 + 1 << 2) | 0;
     HEAP32[$arrayidx200 >> 2] = (HEAP32[$arrayidx200 >> 2] | 0) + $i$2;
     $arrayidx203 = $labelInfo + 1310736 + ($mul195 + 2 << 2) | 0;
     HEAP32[$arrayidx203 >> 2] = (HEAP32[$arrayidx203 >> 2] | 0) + $j$0;
     $arrayidx206 = $labelInfo + 1310736 + ($mul195 + 3 << 2) | 0;
     if ((HEAP32[$arrayidx206 >> 2] | 0) > ($i$2 | 0)) HEAP32[$arrayidx206 >> 2] = $i$2;
     HEAP32[$labelInfo + 1310736 + ($mul195 + 6 << 2) >> 2] = $j$0;
     $wk_max$3 = $wk_max$1;
     break;
    }
    $20 = HEAP32[$arrayidx69 >> 2] | 0;
    $21 = HEAP32[$labelInfo + 1179664 + (($19 << 16 >> 16) + -1 << 2) >> 2] | 0;
    L59 : do if (($20 | 0) > ($21 | 0)) {
     HEAP16[$pnt2$3 >> 1] = $21;
     $k$2 = 0;
     $wk$2 = $arraydecay;
     while (1) {
      if (($k$2 | 0) >= ($wk_max$1 | 0)) {
       $24 = $21;
       break L59;
      }
      if ((HEAP32[$wk$2 >> 2] | 0) == ($20 | 0)) HEAP32[$wk$2 >> 2] = $21;
      $k$2 = $k$2 + 1 | 0;
      $wk$2 = $wk$2 + 4 | 0;
     }
    } else {
     HEAP16[$pnt2$3 >> 1] = $20;
     if (($20 | 0) < ($21 | 0)) {
      $k$3 = 0;
      $wk$3 = $arraydecay;
      while (1) {
       if (($k$3 | 0) >= ($wk_max$1 | 0)) {
        $24 = $20;
        break L59;
       }
       if ((HEAP32[$wk$3 >> 2] | 0) == ($21 | 0)) HEAP32[$wk$3 >> 2] = $20;
       $k$3 = $k$3 + 1 | 0;
       $wk$3 = $wk$3 + 4 | 0;
      }
     } else $24 = $20;
    } while (0);
    $25 = ($24 << 16 >> 16) * 7 | 0;
    $arrayidx183 = $labelInfo + 1310736 + ($25 + -7 << 2) | 0;
    HEAP32[$arrayidx183 >> 2] = (HEAP32[$arrayidx183 >> 2] | 0) + 1;
    $arrayidx186 = $labelInfo + 1310736 + ($25 + -6 << 2) | 0;
    HEAP32[$arrayidx186 >> 2] = (HEAP32[$arrayidx186 >> 2] | 0) + $i$2;
    $arrayidx189 = $labelInfo + 1310736 + ($25 + -5 << 2) | 0;
    HEAP32[$arrayidx189 >> 2] = (HEAP32[$arrayidx189 >> 2] | 0) + $j$0;
    $wk_max$3 = $wk_max$1;
   } while (0);
   $dpnt$1 = $dpnt$1 + 1 | 0;
   $i$2 = $i$2 + 1 | 0;
   $pnt$1 = $pnt$1 + 1 | 0;
   $pnt2$3 = $pnt2$3 + 2 | 0;
   $wk_max$1 = $wk_max$3;
  }
  $dpnt$0 = $dpnt$1 + 2 | 0;
  $j$0 = $j$0 + 1 | 0;
  $pnt$0 = $pnt$1 + 2 | 0;
  $pnt2$2 = $pnt2$3 + 4 | 0;
  $wk_max$0 = $wk_max$1;
 }
 L77 : do if ((label | 0) == 50) {
  _arLog(3, 3256, $vararg_buffer);
  $retval$0 = -1;
 } else if ((label | 0) == 56) {
  $arrayidx319 = $labelInfo + 12 | 0;
  $i$3 = 1;
  $j$1 = 1;
  $wk$4 = $arraydecay;
  while (1) {
   if (($i$3 | 0) > ($wk_max$0 | 0)) break;
   $43 = HEAP32[$wk$4 >> 2] | 0;
   if (($43 | 0) == ($i$3 | 0)) {
    $cond = $j$1;
    $j$2 = $j$1 + 1 | 0;
   } else {
    $cond = HEAP32[$labelInfo + 1179664 + ($43 + -1 << 2) >> 2] | 0;
    $j$2 = $j$1;
   }
   HEAP32[$wk$4 >> 2] = $cond;
   $i$3 = $i$3 + 1 | 0;
   $j$1 = $j$2;
   $wk$4 = $wk$4 + 4 | 0;
  }
  $label_num317 = $labelInfo + 8 | 0;
  $sub340 = $j$1 + -1 | 0;
  HEAP32[$label_num317 >> 2] = $sub340;
  if (!$sub340) $retval$0 = 0; else {
   _memset($arrayidx319 | 0, 0, $sub340 << 2 | 0) | 0;
   _memset($labelInfo + 655376 | 0, 0, $sub340 << 4 | 0) | 0;
   $45 = $sub340;
   $i$4 = 0;
   while (1) {
    if (($i$4 | 0) >= ($45 | 0)) {
     $i$5 = 0;
     break;
    }
    $mul352 = $i$4 << 2;
    HEAP32[$labelInfo + 131084 + ($mul352 << 2) >> 2] = $xsize;
    HEAP32[$labelInfo + 131084 + (($mul352 | 1) << 2) >> 2] = 0;
    HEAP32[$labelInfo + 131084 + (($mul352 | 2) << 2) >> 2] = $ysize;
    HEAP32[$labelInfo + 131084 + (($mul352 | 3) << 2) >> 2] = 0;
    $45 = HEAP32[$label_num317 >> 2] | 0;
    $i$4 = $i$4 + 1 | 0;
   }
   while (1) {
    if (($i$5 | 0) >= ($wk_max$0 | 0)) {
     $i$6 = 0;
     break;
    }
    $sub372 = (HEAP32[$labelInfo + 1179664 + ($i$5 << 2) >> 2] | 0) + -1 | 0;
    $mul373 = $i$5 * 7 | 0;
    $arrayidx376 = $labelInfo + 12 + ($sub372 << 2) | 0;
    HEAP32[$arrayidx376 >> 2] = (HEAP32[$arrayidx376 >> 2] | 0) + (HEAP32[$labelInfo + 1310736 + ($mul373 << 2) >> 2] | 0);
    $mul382 = $sub372 << 1;
    $arrayidx384 = $labelInfo + 655376 + ($mul382 << 3) | 0;
    HEAPF64[$arrayidx384 >> 3] = +HEAPF64[$arrayidx384 >> 3] + +(HEAP32[$labelInfo + 1310736 + ($mul373 + 1 << 2) >> 2] | 0);
    $arrayidx392 = $labelInfo + 655376 + (($mul382 | 1) << 3) | 0;
    HEAPF64[$arrayidx392 >> 3] = +HEAPF64[$arrayidx392 >> 3] + +(HEAP32[$labelInfo + 1310736 + ($mul373 + 2 << 2) >> 2] | 0);
    $mul394 = $sub372 << 2;
    $arrayidx396 = $labelInfo + 131084 + ($mul394 << 2) | 0;
    $54 = HEAP32[$labelInfo + 1310736 + ($mul373 + 3 << 2) >> 2] | 0;
    if ((HEAP32[$arrayidx396 >> 2] | 0) > ($54 | 0)) HEAP32[$arrayidx396 >> 2] = $54;
    $arrayidx412 = $labelInfo + 131084 + (($mul394 | 1) << 2) | 0;
    $56 = HEAP32[$labelInfo + 1310736 + ($mul373 + 4 << 2) >> 2] | 0;
    if ((HEAP32[$arrayidx412 >> 2] | 0) < ($56 | 0)) HEAP32[$arrayidx412 >> 2] = $56;
    $arrayidx428 = $labelInfo + 131084 + (($mul394 | 2) << 2) | 0;
    $58 = HEAP32[$labelInfo + 1310736 + ($mul373 + 5 << 2) >> 2] | 0;
    if ((HEAP32[$arrayidx428 >> 2] | 0) > ($58 | 0)) HEAP32[$arrayidx428 >> 2] = $58;
    $arrayidx444 = $labelInfo + 131084 + (($mul394 | 3) << 2) | 0;
    $60 = HEAP32[$labelInfo + 1310736 + ($mul373 + 6 << 2) >> 2] | 0;
    if ((HEAP32[$arrayidx444 >> 2] | 0) < ($60 | 0)) HEAP32[$arrayidx444 >> 2] = $60;
    $i$5 = $i$5 + 1 | 0;
   }
   while (1) {
    if (($i$6 | 0) >= (HEAP32[$label_num317 >> 2] | 0)) {
     $retval$0 = 0;
     break L77;
    }
    $arrayidx465 = $labelInfo + 12 + ($i$6 << 2) | 0;
    $mul467 = $i$6 << 1;
    $arrayidx469 = $labelInfo + 655376 + ($mul467 << 3) | 0;
    HEAPF64[$arrayidx469 >> 3] = +HEAPF64[$arrayidx469 >> 3] / +(HEAP32[$arrayidx465 >> 2] | 0);
    $arrayidx474 = $labelInfo + 655376 + (($mul467 | 1) << 3) | 0;
    HEAPF64[$arrayidx474 >> 3] = +HEAPF64[$arrayidx474 >> 3] / +(HEAP32[$arrayidx465 >> 2] | 0);
    $i$6 = $i$6 + 1 | 0;
   }
  }
 } while (0);
 STACKTOP = sp;
 return $retval$0 | 0;
}

function _arLabelingSubDWI3C($image, $xsize, $ysize, $labelingThresh, $labelInfo) {
 $image = $image | 0;
 $xsize = $xsize | 0;
 $ysize = $ysize | 0;
 $labelingThresh = $labelingThresh | 0;
 $labelInfo = $labelInfo | 0;
 var $$sink = 0, $0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $16 = 0, $17 = 0, $21 = 0, $22 = 0, $23 = 0, $26 = 0, $27 = 0, $39 = 0, $40 = 0, $45 = 0, $47 = 0, $5 = 0, $56 = 0, $58 = 0, $6 = 0, $60 = 0, $62 = 0, $add$ptr135 = 0, $add273 = 0, $add278$sink = 0, $arraydecay = 0, $arrayidx124 = 0, $arrayidx127 = 0, $arrayidx130 = 0, $arrayidx191 = 0, $arrayidx194 = 0, $arrayidx197 = 0, $arrayidx205 = 0, $arrayidx208 = 0, $arrayidx211 = 0, $arrayidx214 = 0, $arrayidx236 = 0, $arrayidx239 = 0, $arrayidx242 = 0, $arrayidx245 = 0, $arrayidx265 = 0, $arrayidx268 = 0, $arrayidx271 = 0, $arrayidx327 = 0, $arrayidx384 = 0, $arrayidx392 = 0, $arrayidx400 = 0, $arrayidx404 = 0, $arrayidx420 = 0, $arrayidx436 = 0, $arrayidx45 = 0, $arrayidx452 = 0, $arrayidx473 = 0, $arrayidx477 = 0, $arrayidx483 = 0, $arrayidx54 = 0, $arrayidx57 = 0, $arrayidx60 = 0, $arrayidx77 = 0, $cmp71 = 0, $cond = 0, $div = 0, $div1 = 0, $i$0 = 0, $i$1 = 0, $i$2 = 0, $i$3 = 0, $i$4 = 0, $i$5 = 0, $i$6 = 0, $inc282 = 0, $j$0 = 0, $j$1 = 0, $j$2 = 0, $k$0 = 0, $k$1 = 0, $k$2 = 0, $k$3 = 0, $label_num325 = 0, $mul = 0, $mul203 = 0, $mul234 = 0, $mul292 = 0, $mul318 = 0, $mul360 = 0, $mul381 = 0, $mul390 = 0, $mul402 = 0, $mul475 = 0, $pnt$0 = 0, $pnt$1 = 0, $pnt1$0 = 0, $pnt1$1 = 0, $pnt2$0 = 0, $pnt2$1 = 0, $pnt2$2 = 0, $pnt2$3 = 0, $retval$0 = 0, $sub = 0, $sub348 = 0, $sub380 = 0, $sub44 = 0, $sub76 = 0, $sub80 = 0, $sub9 = 0, $vararg_buffer = 0, $wk$0 = 0, $wk$1 = 0, $wk$2 = 0, $wk$3 = 0, $wk$4 = 0, $wk_max$0 = 0, $wk_max$1 = 0, $wk_max$2 = 0, $wk_max$3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $vararg_buffer = sp;
 $div = ($xsize | 0) / 2 | 0;
 $div1 = ($ysize | 0) / 2 | 0;
 $0 = HEAP32[$labelInfo >> 2] | 0;
 $sub = $div1 + -1 | 0;
 $i$0 = 0;
 $pnt1$0 = $0;
 $pnt2$0 = $0 + ((Math_imul($sub, $div) | 0) << 1) | 0;
 while (1) {
  if (($i$0 | 0) >= ($div | 0)) break;
  HEAP16[$pnt2$0 >> 1] = 0;
  HEAP16[$pnt1$0 >> 1] = 0;
  $i$0 = $i$0 + 1 | 0;
  $pnt1$0 = $pnt1$0 + 2 | 0;
  $pnt2$0 = $pnt2$0 + 2 | 0;
 }
 $mul = $labelingThresh * 3 | 0;
 $sub9 = $div + -1 | 0;
 $i$1 = 0;
 $pnt1$1 = $0;
 $pnt2$1 = $0 + ($sub9 << 1) | 0;
 while (1) {
  if (($i$1 | 0) >= ($div1 | 0)) break;
  HEAP16[$pnt2$1 >> 1] = 0;
  HEAP16[$pnt1$1 >> 1] = 0;
  $i$1 = $i$1 + 1 | 0;
  $pnt1$1 = $pnt1$1 + ($div << 1) | 0;
  $pnt2$1 = $pnt2$1 + ($div << 1) | 0;
 }
 $arraydecay = $labelInfo + 1179664 | 0;
 $sub44 = 0 - $div | 0;
 $mul318 = $xsize * 3 | 0;
 $j$0 = 1;
 $pnt$0 = $image + (($xsize * 6 | 0) + 6) | 0;
 $pnt2$2 = $0 + ($div + 1 << 1) | 0;
 $wk_max$0 = 0;
 L9 : while (1) {
  if (($j$0 | 0) < ($sub | 0)) {
   $i$2 = 1;
   $pnt$1 = $pnt$0;
   $pnt2$3 = $pnt2$2;
   $wk_max$1 = $wk_max$0;
  } else {
   label = 56;
   break;
  }
  while (1) {
   if (($i$2 | 0) >= ($sub9 | 0)) break;
   do if (((HEAPU8[$pnt$1 + 1 >> 0] | 0) + (HEAPU8[$pnt$1 >> 0] | 0) + (HEAPU8[$pnt$1 + 2 >> 0] | 0) | 0) > ($mul | 0)) {
    $arrayidx45 = $pnt2$3 + ($sub44 << 1) | 0;
    $5 = HEAP16[$arrayidx45 >> 1] | 0;
    if ($5 << 16 >> 16 > 0) {
     HEAP16[$pnt2$3 >> 1] = $5;
     $6 = ($5 << 16 >> 16) * 7 | 0;
     $arrayidx54 = $labelInfo + 1310736 + ($6 + -7 << 2) | 0;
     HEAP32[$arrayidx54 >> 2] = (HEAP32[$arrayidx54 >> 2] | 0) + 1;
     $arrayidx57 = $labelInfo + 1310736 + ($6 + -6 << 2) | 0;
     HEAP32[$arrayidx57 >> 2] = (HEAP32[$arrayidx57 >> 2] | 0) + $i$2;
     $arrayidx60 = $labelInfo + 1310736 + ($6 + -5 << 2) | 0;
     HEAP32[$arrayidx60 >> 2] = (HEAP32[$arrayidx60 >> 2] | 0) + $j$0;
     HEAP32[$labelInfo + 1310736 + ($6 + -1 << 2) >> 2] = $j$0;
     $wk_max$3 = $wk_max$1;
     break;
    }
    $10 = HEAP16[$arrayidx45 + 2 >> 1] | 0;
    $11 = HEAP16[$arrayidx45 + -2 >> 1] | 0;
    $cmp71 = $11 << 16 >> 16 > 0;
    $add$ptr135 = $pnt2$3 + -2 | 0;
    $sub80 = ($11 << 16 >> 16) + -1 | 0;
    if ($10 << 16 >> 16 <= 0) {
     if ($cmp71) {
      HEAP16[$pnt2$3 >> 1] = $11;
      $mul234 = $sub80 * 7 | 0;
      $arrayidx236 = $labelInfo + 1310736 + ($mul234 << 2) | 0;
      HEAP32[$arrayidx236 >> 2] = (HEAP32[$arrayidx236 >> 2] | 0) + 1;
      $arrayidx239 = $labelInfo + 1310736 + ($mul234 + 1 << 2) | 0;
      HEAP32[$arrayidx239 >> 2] = (HEAP32[$arrayidx239 >> 2] | 0) + $i$2;
      $arrayidx242 = $labelInfo + 1310736 + ($mul234 + 2 << 2) | 0;
      HEAP32[$arrayidx242 >> 2] = (HEAP32[$arrayidx242 >> 2] | 0) + $j$0;
      $arrayidx245 = $labelInfo + 1310736 + ($mul234 + 4 << 2) | 0;
      if ((HEAP32[$arrayidx245 >> 2] | 0) < ($i$2 | 0)) HEAP32[$arrayidx245 >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($mul234 + 6 << 2) >> 2] = $j$0;
      $wk_max$3 = $wk_max$1;
      break;
     }
     $39 = HEAP16[$add$ptr135 >> 1] | 0;
     if ($39 << 16 >> 16 > 0) {
      HEAP16[$pnt2$3 >> 1] = $39;
      $40 = ($39 << 16 >> 16) * 7 | 0;
      $arrayidx265 = $labelInfo + 1310736 + ($40 + -7 << 2) | 0;
      HEAP32[$arrayidx265 >> 2] = (HEAP32[$arrayidx265 >> 2] | 0) + 1;
      $arrayidx268 = $labelInfo + 1310736 + ($40 + -6 << 2) | 0;
      HEAP32[$arrayidx268 >> 2] = (HEAP32[$arrayidx268 >> 2] | 0) + $i$2;
      $arrayidx271 = $labelInfo + 1310736 + ($40 + -5 << 2) | 0;
      HEAP32[$arrayidx271 >> 2] = (HEAP32[$arrayidx271 >> 2] | 0) + $j$0;
      $add273 = $40 + -3 | 0;
      if ((HEAP32[$labelInfo + 1310736 + ($add273 << 2) >> 2] | 0) < ($i$2 | 0)) {
       $$sink = $i$2;
       $add278$sink = $add273;
       $wk_max$2 = $wk_max$1;
      } else {
       $wk_max$3 = $wk_max$1;
       break;
      }
     } else {
      $inc282 = $wk_max$1 + 1 | 0;
      if (($wk_max$1 | 0) > 32767) {
       label = 50;
       break L9;
      }
      HEAP16[$pnt2$3 >> 1] = $inc282;
      HEAP32[$labelInfo + 1179664 + ($wk_max$1 << 2) >> 2] = $inc282 << 16 >> 16;
      $mul292 = $wk_max$1 * 7 | 0;
      HEAP32[$labelInfo + 1310736 + ($mul292 << 2) >> 2] = 1;
      HEAP32[$labelInfo + 1310736 + ($mul292 + 1 << 2) >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($mul292 + 2 << 2) >> 2] = $j$0;
      HEAP32[$labelInfo + 1310736 + ($mul292 + 3 << 2) >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($mul292 + 4 << 2) >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($mul292 + 5 << 2) >> 2] = $j$0;
      $$sink = $j$0;
      $add278$sink = $mul292 + 6 | 0;
      $wk_max$2 = $inc282;
     }
     HEAP32[$labelInfo + 1310736 + ($add278$sink << 2) >> 2] = $$sink;
     $wk_max$3 = $wk_max$2;
     break;
    }
    $sub76 = ($10 << 16 >> 16) + -1 | 0;
    $arrayidx77 = $labelInfo + 1179664 + ($sub76 << 2) | 0;
    if ($cmp71) {
     $12 = HEAP32[$arrayidx77 >> 2] | 0;
     $13 = HEAP32[$labelInfo + 1179664 + ($sub80 << 2) >> 2] | 0;
     L35 : do if (($12 | 0) > ($13 | 0)) {
      HEAP16[$pnt2$3 >> 1] = $13;
      $k$0 = 0;
      $wk$0 = $arraydecay;
      while (1) {
       if (($k$0 | 0) >= ($wk_max$1 | 0)) {
        $16 = $13;
        break L35;
       }
       if ((HEAP32[$wk$0 >> 2] | 0) == ($12 | 0)) HEAP32[$wk$0 >> 2] = $13;
       $k$0 = $k$0 + 1 | 0;
       $wk$0 = $wk$0 + 4 | 0;
      }
     } else {
      HEAP16[$pnt2$3 >> 1] = $12;
      if (($12 | 0) < ($13 | 0)) {
       $k$1 = 0;
       $wk$1 = $arraydecay;
       while (1) {
        if (($k$1 | 0) >= ($wk_max$1 | 0)) {
         $16 = $12;
         break L35;
        }
        if ((HEAP32[$wk$1 >> 2] | 0) == ($13 | 0)) HEAP32[$wk$1 >> 2] = $12;
        $k$1 = $k$1 + 1 | 0;
        $wk$1 = $wk$1 + 4 | 0;
       }
      } else $16 = $12;
     } while (0);
     $17 = ($16 << 16 >> 16) * 7 | 0;
     $arrayidx124 = $labelInfo + 1310736 + ($17 + -7 << 2) | 0;
     HEAP32[$arrayidx124 >> 2] = (HEAP32[$arrayidx124 >> 2] | 0) + 1;
     $arrayidx127 = $labelInfo + 1310736 + ($17 + -6 << 2) | 0;
     HEAP32[$arrayidx127 >> 2] = (HEAP32[$arrayidx127 >> 2] | 0) + $i$2;
     $arrayidx130 = $labelInfo + 1310736 + ($17 + -5 << 2) | 0;
     HEAP32[$arrayidx130 >> 2] = (HEAP32[$arrayidx130 >> 2] | 0) + $j$0;
     HEAP32[$labelInfo + 1310736 + ($17 + -1 << 2) >> 2] = $j$0;
     $wk_max$3 = $wk_max$1;
     break;
    }
    $21 = HEAP16[$add$ptr135 >> 1] | 0;
    if ($21 << 16 >> 16 <= 0) {
     HEAP16[$pnt2$3 >> 1] = $10;
     $mul203 = $sub76 * 7 | 0;
     $arrayidx205 = $labelInfo + 1310736 + ($mul203 << 2) | 0;
     HEAP32[$arrayidx205 >> 2] = (HEAP32[$arrayidx205 >> 2] | 0) + 1;
     $arrayidx208 = $labelInfo + 1310736 + ($mul203 + 1 << 2) | 0;
     HEAP32[$arrayidx208 >> 2] = (HEAP32[$arrayidx208 >> 2] | 0) + $i$2;
     $arrayidx211 = $labelInfo + 1310736 + ($mul203 + 2 << 2) | 0;
     HEAP32[$arrayidx211 >> 2] = (HEAP32[$arrayidx211 >> 2] | 0) + $j$0;
     $arrayidx214 = $labelInfo + 1310736 + ($mul203 + 3 << 2) | 0;
     if ((HEAP32[$arrayidx214 >> 2] | 0) > ($i$2 | 0)) HEAP32[$arrayidx214 >> 2] = $i$2;
     HEAP32[$labelInfo + 1310736 + ($mul203 + 6 << 2) >> 2] = $j$0;
     $wk_max$3 = $wk_max$1;
     break;
    }
    $22 = HEAP32[$arrayidx77 >> 2] | 0;
    $23 = HEAP32[$labelInfo + 1179664 + (($21 << 16 >> 16) + -1 << 2) >> 2] | 0;
    L58 : do if (($22 | 0) > ($23 | 0)) {
     HEAP16[$pnt2$3 >> 1] = $23;
     $k$2 = 0;
     $wk$2 = $arraydecay;
     while (1) {
      if (($k$2 | 0) >= ($wk_max$1 | 0)) {
       $26 = $23;
       break L58;
      }
      if ((HEAP32[$wk$2 >> 2] | 0) == ($22 | 0)) HEAP32[$wk$2 >> 2] = $23;
      $k$2 = $k$2 + 1 | 0;
      $wk$2 = $wk$2 + 4 | 0;
     }
    } else {
     HEAP16[$pnt2$3 >> 1] = $22;
     if (($22 | 0) < ($23 | 0)) {
      $k$3 = 0;
      $wk$3 = $arraydecay;
      while (1) {
       if (($k$3 | 0) >= ($wk_max$1 | 0)) {
        $26 = $22;
        break L58;
       }
       if ((HEAP32[$wk$3 >> 2] | 0) == ($23 | 0)) HEAP32[$wk$3 >> 2] = $22;
       $k$3 = $k$3 + 1 | 0;
       $wk$3 = $wk$3 + 4 | 0;
      }
     } else $26 = $22;
    } while (0);
    $27 = ($26 << 16 >> 16) * 7 | 0;
    $arrayidx191 = $labelInfo + 1310736 + ($27 + -7 << 2) | 0;
    HEAP32[$arrayidx191 >> 2] = (HEAP32[$arrayidx191 >> 2] | 0) + 1;
    $arrayidx194 = $labelInfo + 1310736 + ($27 + -6 << 2) | 0;
    HEAP32[$arrayidx194 >> 2] = (HEAP32[$arrayidx194 >> 2] | 0) + $i$2;
    $arrayidx197 = $labelInfo + 1310736 + ($27 + -5 << 2) | 0;
    HEAP32[$arrayidx197 >> 2] = (HEAP32[$arrayidx197 >> 2] | 0) + $j$0;
    $wk_max$3 = $wk_max$1;
   } else {
    HEAP16[$pnt2$3 >> 1] = 0;
    $wk_max$3 = $wk_max$1;
   } while (0);
   $i$2 = $i$2 + 1 | 0;
   $pnt$1 = $pnt$1 + 6 | 0;
   $pnt2$3 = $pnt2$3 + 2 | 0;
   $wk_max$1 = $wk_max$3;
  }
  $j$0 = $j$0 + 1 | 0;
  $pnt$0 = $pnt$1 + $mul318 + 12 | 0;
  $pnt2$2 = $pnt2$3 + 4 | 0;
  $wk_max$0 = $wk_max$1;
 }
 L77 : do if ((label | 0) == 50) {
  _arLog(3, 3256, $vararg_buffer);
  $retval$0 = -1;
 } else if ((label | 0) == 56) {
  $arrayidx327 = $labelInfo + 12 | 0;
  $i$3 = 1;
  $j$1 = 1;
  $wk$4 = $arraydecay;
  while (1) {
   if (($i$3 | 0) > ($wk_max$0 | 0)) break;
   $45 = HEAP32[$wk$4 >> 2] | 0;
   if (($45 | 0) == ($i$3 | 0)) {
    $cond = $j$1;
    $j$2 = $j$1 + 1 | 0;
   } else {
    $cond = HEAP32[$labelInfo + 1179664 + ($45 + -1 << 2) >> 2] | 0;
    $j$2 = $j$1;
   }
   HEAP32[$wk$4 >> 2] = $cond;
   $i$3 = $i$3 + 1 | 0;
   $j$1 = $j$2;
   $wk$4 = $wk$4 + 4 | 0;
  }
  $label_num325 = $labelInfo + 8 | 0;
  $sub348 = $j$1 + -1 | 0;
  HEAP32[$label_num325 >> 2] = $sub348;
  if (!$sub348) $retval$0 = 0; else {
   _memset($arrayidx327 | 0, 0, $sub348 << 2 | 0) | 0;
   _memset($labelInfo + 655376 | 0, 0, $sub348 << 4 | 0) | 0;
   $47 = $sub348;
   $i$4 = 0;
   while (1) {
    if (($i$4 | 0) >= ($47 | 0)) {
     $i$5 = 0;
     break;
    }
    $mul360 = $i$4 << 2;
    HEAP32[$labelInfo + 131084 + ($mul360 << 2) >> 2] = $div;
    HEAP32[$labelInfo + 131084 + (($mul360 | 1) << 2) >> 2] = 0;
    HEAP32[$labelInfo + 131084 + (($mul360 | 2) << 2) >> 2] = $div1;
    HEAP32[$labelInfo + 131084 + (($mul360 | 3) << 2) >> 2] = 0;
    $47 = HEAP32[$label_num325 >> 2] | 0;
    $i$4 = $i$4 + 1 | 0;
   }
   while (1) {
    if (($i$5 | 0) >= ($wk_max$0 | 0)) {
     $i$6 = 0;
     break;
    }
    $sub380 = (HEAP32[$labelInfo + 1179664 + ($i$5 << 2) >> 2] | 0) + -1 | 0;
    $mul381 = $i$5 * 7 | 0;
    $arrayidx384 = $labelInfo + 12 + ($sub380 << 2) | 0;
    HEAP32[$arrayidx384 >> 2] = (HEAP32[$arrayidx384 >> 2] | 0) + (HEAP32[$labelInfo + 1310736 + ($mul381 << 2) >> 2] | 0);
    $mul390 = $sub380 << 1;
    $arrayidx392 = $labelInfo + 655376 + ($mul390 << 3) | 0;
    HEAPF64[$arrayidx392 >> 3] = +HEAPF64[$arrayidx392 >> 3] + +(HEAP32[$labelInfo + 1310736 + ($mul381 + 1 << 2) >> 2] | 0);
    $arrayidx400 = $labelInfo + 655376 + (($mul390 | 1) << 3) | 0;
    HEAPF64[$arrayidx400 >> 3] = +HEAPF64[$arrayidx400 >> 3] + +(HEAP32[$labelInfo + 1310736 + ($mul381 + 2 << 2) >> 2] | 0);
    $mul402 = $sub380 << 2;
    $arrayidx404 = $labelInfo + 131084 + ($mul402 << 2) | 0;
    $56 = HEAP32[$labelInfo + 1310736 + ($mul381 + 3 << 2) >> 2] | 0;
    if ((HEAP32[$arrayidx404 >> 2] | 0) > ($56 | 0)) HEAP32[$arrayidx404 >> 2] = $56;
    $arrayidx420 = $labelInfo + 131084 + (($mul402 | 1) << 2) | 0;
    $58 = HEAP32[$labelInfo + 1310736 + ($mul381 + 4 << 2) >> 2] | 0;
    if ((HEAP32[$arrayidx420 >> 2] | 0) < ($58 | 0)) HEAP32[$arrayidx420 >> 2] = $58;
    $arrayidx436 = $labelInfo + 131084 + (($mul402 | 2) << 2) | 0;
    $60 = HEAP32[$labelInfo + 1310736 + ($mul381 + 5 << 2) >> 2] | 0;
    if ((HEAP32[$arrayidx436 >> 2] | 0) > ($60 | 0)) HEAP32[$arrayidx436 >> 2] = $60;
    $arrayidx452 = $labelInfo + 131084 + (($mul402 | 3) << 2) | 0;
    $62 = HEAP32[$labelInfo + 1310736 + ($mul381 + 6 << 2) >> 2] | 0;
    if ((HEAP32[$arrayidx452 >> 2] | 0) < ($62 | 0)) HEAP32[$arrayidx452 >> 2] = $62;
    $i$5 = $i$5 + 1 | 0;
   }
   while (1) {
    if (($i$6 | 0) >= (HEAP32[$label_num325 >> 2] | 0)) {
     $retval$0 = 0;
     break L77;
    }
    $arrayidx473 = $labelInfo + 12 + ($i$6 << 2) | 0;
    $mul475 = $i$6 << 1;
    $arrayidx477 = $labelInfo + 655376 + ($mul475 << 3) | 0;
    HEAPF64[$arrayidx477 >> 3] = +HEAPF64[$arrayidx477 >> 3] / +(HEAP32[$arrayidx473 >> 2] | 0);
    $arrayidx483 = $labelInfo + 655376 + (($mul475 | 1) << 3) | 0;
    HEAPF64[$arrayidx483 >> 3] = +HEAPF64[$arrayidx483 >> 3] / +(HEAP32[$arrayidx473 >> 2] | 0);
    $i$6 = $i$6 + 1 | 0;
   }
  }
 } while (0);
 STACKTOP = sp;
 return $retval$0 | 0;
}

function _arLabelingSubDBI3C($image, $xsize, $ysize, $labelingThresh, $labelInfo) {
 $image = $image | 0;
 $xsize = $xsize | 0;
 $ysize = $ysize | 0;
 $labelingThresh = $labelingThresh | 0;
 $labelInfo = $labelInfo | 0;
 var $$sink = 0, $0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $16 = 0, $17 = 0, $21 = 0, $22 = 0, $23 = 0, $26 = 0, $27 = 0, $39 = 0, $40 = 0, $45 = 0, $47 = 0, $5 = 0, $56 = 0, $58 = 0, $6 = 0, $60 = 0, $62 = 0, $add$ptr135 = 0, $add273 = 0, $add278$sink = 0, $arraydecay = 0, $arrayidx124 = 0, $arrayidx127 = 0, $arrayidx130 = 0, $arrayidx191 = 0, $arrayidx194 = 0, $arrayidx197 = 0, $arrayidx205 = 0, $arrayidx208 = 0, $arrayidx211 = 0, $arrayidx214 = 0, $arrayidx236 = 0, $arrayidx239 = 0, $arrayidx242 = 0, $arrayidx245 = 0, $arrayidx265 = 0, $arrayidx268 = 0, $arrayidx271 = 0, $arrayidx327 = 0, $arrayidx384 = 0, $arrayidx392 = 0, $arrayidx400 = 0, $arrayidx404 = 0, $arrayidx420 = 0, $arrayidx436 = 0, $arrayidx45 = 0, $arrayidx452 = 0, $arrayidx473 = 0, $arrayidx477 = 0, $arrayidx483 = 0, $arrayidx54 = 0, $arrayidx57 = 0, $arrayidx60 = 0, $arrayidx77 = 0, $cmp71 = 0, $cond = 0, $div = 0, $div1 = 0, $i$0 = 0, $i$1 = 0, $i$2 = 0, $i$3 = 0, $i$4 = 0, $i$5 = 0, $i$6 = 0, $inc282 = 0, $j$0 = 0, $j$1 = 0, $j$2 = 0, $k$0 = 0, $k$1 = 0, $k$2 = 0, $k$3 = 0, $label_num325 = 0, $mul = 0, $mul203 = 0, $mul234 = 0, $mul292 = 0, $mul318 = 0, $mul360 = 0, $mul381 = 0, $mul390 = 0, $mul402 = 0, $mul475 = 0, $pnt$0 = 0, $pnt$1 = 0, $pnt1$0 = 0, $pnt1$1 = 0, $pnt2$0 = 0, $pnt2$1 = 0, $pnt2$2 = 0, $pnt2$3 = 0, $retval$0 = 0, $sub = 0, $sub348 = 0, $sub380 = 0, $sub44 = 0, $sub76 = 0, $sub80 = 0, $sub9 = 0, $vararg_buffer = 0, $wk$0 = 0, $wk$1 = 0, $wk$2 = 0, $wk$3 = 0, $wk$4 = 0, $wk_max$0 = 0, $wk_max$1 = 0, $wk_max$2 = 0, $wk_max$3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $vararg_buffer = sp;
 $div = ($xsize | 0) / 2 | 0;
 $div1 = ($ysize | 0) / 2 | 0;
 $0 = HEAP32[$labelInfo >> 2] | 0;
 $sub = $div1 + -1 | 0;
 $i$0 = 0;
 $pnt1$0 = $0;
 $pnt2$0 = $0 + ((Math_imul($sub, $div) | 0) << 1) | 0;
 while (1) {
  if (($i$0 | 0) >= ($div | 0)) break;
  HEAP16[$pnt2$0 >> 1] = 0;
  HEAP16[$pnt1$0 >> 1] = 0;
  $i$0 = $i$0 + 1 | 0;
  $pnt1$0 = $pnt1$0 + 2 | 0;
  $pnt2$0 = $pnt2$0 + 2 | 0;
 }
 $mul = $labelingThresh * 3 | 0;
 $sub9 = $div + -1 | 0;
 $i$1 = 0;
 $pnt1$1 = $0;
 $pnt2$1 = $0 + ($sub9 << 1) | 0;
 while (1) {
  if (($i$1 | 0) >= ($div1 | 0)) break;
  HEAP16[$pnt2$1 >> 1] = 0;
  HEAP16[$pnt1$1 >> 1] = 0;
  $i$1 = $i$1 + 1 | 0;
  $pnt1$1 = $pnt1$1 + ($div << 1) | 0;
  $pnt2$1 = $pnt2$1 + ($div << 1) | 0;
 }
 $arraydecay = $labelInfo + 1179664 | 0;
 $sub44 = 0 - $div | 0;
 $mul318 = $xsize * 3 | 0;
 $j$0 = 1;
 $pnt$0 = $image + (($xsize * 6 | 0) + 6) | 0;
 $pnt2$2 = $0 + ($div + 1 << 1) | 0;
 $wk_max$0 = 0;
 L9 : while (1) {
  if (($j$0 | 0) < ($sub | 0)) {
   $i$2 = 1;
   $pnt$1 = $pnt$0;
   $pnt2$3 = $pnt2$2;
   $wk_max$1 = $wk_max$0;
  } else {
   label = 56;
   break;
  }
  while (1) {
   if (($i$2 | 0) >= ($sub9 | 0)) break;
   do if (((HEAPU8[$pnt$1 + 1 >> 0] | 0) + (HEAPU8[$pnt$1 >> 0] | 0) + (HEAPU8[$pnt$1 + 2 >> 0] | 0) | 0) > ($mul | 0)) {
    HEAP16[$pnt2$3 >> 1] = 0;
    $wk_max$3 = $wk_max$1;
   } else {
    $arrayidx45 = $pnt2$3 + ($sub44 << 1) | 0;
    $5 = HEAP16[$arrayidx45 >> 1] | 0;
    if ($5 << 16 >> 16 > 0) {
     HEAP16[$pnt2$3 >> 1] = $5;
     $6 = ($5 << 16 >> 16) * 7 | 0;
     $arrayidx54 = $labelInfo + 1310736 + ($6 + -7 << 2) | 0;
     HEAP32[$arrayidx54 >> 2] = (HEAP32[$arrayidx54 >> 2] | 0) + 1;
     $arrayidx57 = $labelInfo + 1310736 + ($6 + -6 << 2) | 0;
     HEAP32[$arrayidx57 >> 2] = (HEAP32[$arrayidx57 >> 2] | 0) + $i$2;
     $arrayidx60 = $labelInfo + 1310736 + ($6 + -5 << 2) | 0;
     HEAP32[$arrayidx60 >> 2] = (HEAP32[$arrayidx60 >> 2] | 0) + $j$0;
     HEAP32[$labelInfo + 1310736 + ($6 + -1 << 2) >> 2] = $j$0;
     $wk_max$3 = $wk_max$1;
     break;
    }
    $10 = HEAP16[$arrayidx45 + 2 >> 1] | 0;
    $11 = HEAP16[$arrayidx45 + -2 >> 1] | 0;
    $cmp71 = $11 << 16 >> 16 > 0;
    $add$ptr135 = $pnt2$3 + -2 | 0;
    $sub80 = ($11 << 16 >> 16) + -1 | 0;
    if ($10 << 16 >> 16 <= 0) {
     if ($cmp71) {
      HEAP16[$pnt2$3 >> 1] = $11;
      $mul234 = $sub80 * 7 | 0;
      $arrayidx236 = $labelInfo + 1310736 + ($mul234 << 2) | 0;
      HEAP32[$arrayidx236 >> 2] = (HEAP32[$arrayidx236 >> 2] | 0) + 1;
      $arrayidx239 = $labelInfo + 1310736 + ($mul234 + 1 << 2) | 0;
      HEAP32[$arrayidx239 >> 2] = (HEAP32[$arrayidx239 >> 2] | 0) + $i$2;
      $arrayidx242 = $labelInfo + 1310736 + ($mul234 + 2 << 2) | 0;
      HEAP32[$arrayidx242 >> 2] = (HEAP32[$arrayidx242 >> 2] | 0) + $j$0;
      $arrayidx245 = $labelInfo + 1310736 + ($mul234 + 4 << 2) | 0;
      if ((HEAP32[$arrayidx245 >> 2] | 0) < ($i$2 | 0)) HEAP32[$arrayidx245 >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($mul234 + 6 << 2) >> 2] = $j$0;
      $wk_max$3 = $wk_max$1;
      break;
     }
     $39 = HEAP16[$add$ptr135 >> 1] | 0;
     if ($39 << 16 >> 16 > 0) {
      HEAP16[$pnt2$3 >> 1] = $39;
      $40 = ($39 << 16 >> 16) * 7 | 0;
      $arrayidx265 = $labelInfo + 1310736 + ($40 + -7 << 2) | 0;
      HEAP32[$arrayidx265 >> 2] = (HEAP32[$arrayidx265 >> 2] | 0) + 1;
      $arrayidx268 = $labelInfo + 1310736 + ($40 + -6 << 2) | 0;
      HEAP32[$arrayidx268 >> 2] = (HEAP32[$arrayidx268 >> 2] | 0) + $i$2;
      $arrayidx271 = $labelInfo + 1310736 + ($40 + -5 << 2) | 0;
      HEAP32[$arrayidx271 >> 2] = (HEAP32[$arrayidx271 >> 2] | 0) + $j$0;
      $add273 = $40 + -3 | 0;
      if ((HEAP32[$labelInfo + 1310736 + ($add273 << 2) >> 2] | 0) < ($i$2 | 0)) {
       $$sink = $i$2;
       $add278$sink = $add273;
       $wk_max$2 = $wk_max$1;
      } else {
       $wk_max$3 = $wk_max$1;
       break;
      }
     } else {
      $inc282 = $wk_max$1 + 1 | 0;
      if (($wk_max$1 | 0) > 32767) {
       label = 50;
       break L9;
      }
      HEAP16[$pnt2$3 >> 1] = $inc282;
      HEAP32[$labelInfo + 1179664 + ($wk_max$1 << 2) >> 2] = $inc282 << 16 >> 16;
      $mul292 = $wk_max$1 * 7 | 0;
      HEAP32[$labelInfo + 1310736 + ($mul292 << 2) >> 2] = 1;
      HEAP32[$labelInfo + 1310736 + ($mul292 + 1 << 2) >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($mul292 + 2 << 2) >> 2] = $j$0;
      HEAP32[$labelInfo + 1310736 + ($mul292 + 3 << 2) >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($mul292 + 4 << 2) >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($mul292 + 5 << 2) >> 2] = $j$0;
      $$sink = $j$0;
      $add278$sink = $mul292 + 6 | 0;
      $wk_max$2 = $inc282;
     }
     HEAP32[$labelInfo + 1310736 + ($add278$sink << 2) >> 2] = $$sink;
     $wk_max$3 = $wk_max$2;
     break;
    }
    $sub76 = ($10 << 16 >> 16) + -1 | 0;
    $arrayidx77 = $labelInfo + 1179664 + ($sub76 << 2) | 0;
    if ($cmp71) {
     $12 = HEAP32[$arrayidx77 >> 2] | 0;
     $13 = HEAP32[$labelInfo + 1179664 + ($sub80 << 2) >> 2] | 0;
     L36 : do if (($12 | 0) > ($13 | 0)) {
      HEAP16[$pnt2$3 >> 1] = $13;
      $k$0 = 0;
      $wk$0 = $arraydecay;
      while (1) {
       if (($k$0 | 0) >= ($wk_max$1 | 0)) {
        $16 = $13;
        break L36;
       }
       if ((HEAP32[$wk$0 >> 2] | 0) == ($12 | 0)) HEAP32[$wk$0 >> 2] = $13;
       $k$0 = $k$0 + 1 | 0;
       $wk$0 = $wk$0 + 4 | 0;
      }
     } else {
      HEAP16[$pnt2$3 >> 1] = $12;
      if (($12 | 0) < ($13 | 0)) {
       $k$1 = 0;
       $wk$1 = $arraydecay;
       while (1) {
        if (($k$1 | 0) >= ($wk_max$1 | 0)) {
         $16 = $12;
         break L36;
        }
        if ((HEAP32[$wk$1 >> 2] | 0) == ($13 | 0)) HEAP32[$wk$1 >> 2] = $12;
        $k$1 = $k$1 + 1 | 0;
        $wk$1 = $wk$1 + 4 | 0;
       }
      } else $16 = $12;
     } while (0);
     $17 = ($16 << 16 >> 16) * 7 | 0;
     $arrayidx124 = $labelInfo + 1310736 + ($17 + -7 << 2) | 0;
     HEAP32[$arrayidx124 >> 2] = (HEAP32[$arrayidx124 >> 2] | 0) + 1;
     $arrayidx127 = $labelInfo + 1310736 + ($17 + -6 << 2) | 0;
     HEAP32[$arrayidx127 >> 2] = (HEAP32[$arrayidx127 >> 2] | 0) + $i$2;
     $arrayidx130 = $labelInfo + 1310736 + ($17 + -5 << 2) | 0;
     HEAP32[$arrayidx130 >> 2] = (HEAP32[$arrayidx130 >> 2] | 0) + $j$0;
     HEAP32[$labelInfo + 1310736 + ($17 + -1 << 2) >> 2] = $j$0;
     $wk_max$3 = $wk_max$1;
     break;
    }
    $21 = HEAP16[$add$ptr135 >> 1] | 0;
    if ($21 << 16 >> 16 <= 0) {
     HEAP16[$pnt2$3 >> 1] = $10;
     $mul203 = $sub76 * 7 | 0;
     $arrayidx205 = $labelInfo + 1310736 + ($mul203 << 2) | 0;
     HEAP32[$arrayidx205 >> 2] = (HEAP32[$arrayidx205 >> 2] | 0) + 1;
     $arrayidx208 = $labelInfo + 1310736 + ($mul203 + 1 << 2) | 0;
     HEAP32[$arrayidx208 >> 2] = (HEAP32[$arrayidx208 >> 2] | 0) + $i$2;
     $arrayidx211 = $labelInfo + 1310736 + ($mul203 + 2 << 2) | 0;
     HEAP32[$arrayidx211 >> 2] = (HEAP32[$arrayidx211 >> 2] | 0) + $j$0;
     $arrayidx214 = $labelInfo + 1310736 + ($mul203 + 3 << 2) | 0;
     if ((HEAP32[$arrayidx214 >> 2] | 0) > ($i$2 | 0)) HEAP32[$arrayidx214 >> 2] = $i$2;
     HEAP32[$labelInfo + 1310736 + ($mul203 + 6 << 2) >> 2] = $j$0;
     $wk_max$3 = $wk_max$1;
     break;
    }
    $22 = HEAP32[$arrayidx77 >> 2] | 0;
    $23 = HEAP32[$labelInfo + 1179664 + (($21 << 16 >> 16) + -1 << 2) >> 2] | 0;
    L59 : do if (($22 | 0) > ($23 | 0)) {
     HEAP16[$pnt2$3 >> 1] = $23;
     $k$2 = 0;
     $wk$2 = $arraydecay;
     while (1) {
      if (($k$2 | 0) >= ($wk_max$1 | 0)) {
       $26 = $23;
       break L59;
      }
      if ((HEAP32[$wk$2 >> 2] | 0) == ($22 | 0)) HEAP32[$wk$2 >> 2] = $23;
      $k$2 = $k$2 + 1 | 0;
      $wk$2 = $wk$2 + 4 | 0;
     }
    } else {
     HEAP16[$pnt2$3 >> 1] = $22;
     if (($22 | 0) < ($23 | 0)) {
      $k$3 = 0;
      $wk$3 = $arraydecay;
      while (1) {
       if (($k$3 | 0) >= ($wk_max$1 | 0)) {
        $26 = $22;
        break L59;
       }
       if ((HEAP32[$wk$3 >> 2] | 0) == ($23 | 0)) HEAP32[$wk$3 >> 2] = $22;
       $k$3 = $k$3 + 1 | 0;
       $wk$3 = $wk$3 + 4 | 0;
      }
     } else $26 = $22;
    } while (0);
    $27 = ($26 << 16 >> 16) * 7 | 0;
    $arrayidx191 = $labelInfo + 1310736 + ($27 + -7 << 2) | 0;
    HEAP32[$arrayidx191 >> 2] = (HEAP32[$arrayidx191 >> 2] | 0) + 1;
    $arrayidx194 = $labelInfo + 1310736 + ($27 + -6 << 2) | 0;
    HEAP32[$arrayidx194 >> 2] = (HEAP32[$arrayidx194 >> 2] | 0) + $i$2;
    $arrayidx197 = $labelInfo + 1310736 + ($27 + -5 << 2) | 0;
    HEAP32[$arrayidx197 >> 2] = (HEAP32[$arrayidx197 >> 2] | 0) + $j$0;
    $wk_max$3 = $wk_max$1;
   } while (0);
   $i$2 = $i$2 + 1 | 0;
   $pnt$1 = $pnt$1 + 6 | 0;
   $pnt2$3 = $pnt2$3 + 2 | 0;
   $wk_max$1 = $wk_max$3;
  }
  $j$0 = $j$0 + 1 | 0;
  $pnt$0 = $pnt$1 + $mul318 + 12 | 0;
  $pnt2$2 = $pnt2$3 + 4 | 0;
  $wk_max$0 = $wk_max$1;
 }
 L77 : do if ((label | 0) == 50) {
  _arLog(3, 3256, $vararg_buffer);
  $retval$0 = -1;
 } else if ((label | 0) == 56) {
  $arrayidx327 = $labelInfo + 12 | 0;
  $i$3 = 1;
  $j$1 = 1;
  $wk$4 = $arraydecay;
  while (1) {
   if (($i$3 | 0) > ($wk_max$0 | 0)) break;
   $45 = HEAP32[$wk$4 >> 2] | 0;
   if (($45 | 0) == ($i$3 | 0)) {
    $cond = $j$1;
    $j$2 = $j$1 + 1 | 0;
   } else {
    $cond = HEAP32[$labelInfo + 1179664 + ($45 + -1 << 2) >> 2] | 0;
    $j$2 = $j$1;
   }
   HEAP32[$wk$4 >> 2] = $cond;
   $i$3 = $i$3 + 1 | 0;
   $j$1 = $j$2;
   $wk$4 = $wk$4 + 4 | 0;
  }
  $label_num325 = $labelInfo + 8 | 0;
  $sub348 = $j$1 + -1 | 0;
  HEAP32[$label_num325 >> 2] = $sub348;
  if (!$sub348) $retval$0 = 0; else {
   _memset($arrayidx327 | 0, 0, $sub348 << 2 | 0) | 0;
   _memset($labelInfo + 655376 | 0, 0, $sub348 << 4 | 0) | 0;
   $47 = $sub348;
   $i$4 = 0;
   while (1) {
    if (($i$4 | 0) >= ($47 | 0)) {
     $i$5 = 0;
     break;
    }
    $mul360 = $i$4 << 2;
    HEAP32[$labelInfo + 131084 + ($mul360 << 2) >> 2] = $div;
    HEAP32[$labelInfo + 131084 + (($mul360 | 1) << 2) >> 2] = 0;
    HEAP32[$labelInfo + 131084 + (($mul360 | 2) << 2) >> 2] = $div1;
    HEAP32[$labelInfo + 131084 + (($mul360 | 3) << 2) >> 2] = 0;
    $47 = HEAP32[$label_num325 >> 2] | 0;
    $i$4 = $i$4 + 1 | 0;
   }
   while (1) {
    if (($i$5 | 0) >= ($wk_max$0 | 0)) {
     $i$6 = 0;
     break;
    }
    $sub380 = (HEAP32[$labelInfo + 1179664 + ($i$5 << 2) >> 2] | 0) + -1 | 0;
    $mul381 = $i$5 * 7 | 0;
    $arrayidx384 = $labelInfo + 12 + ($sub380 << 2) | 0;
    HEAP32[$arrayidx384 >> 2] = (HEAP32[$arrayidx384 >> 2] | 0) + (HEAP32[$labelInfo + 1310736 + ($mul381 << 2) >> 2] | 0);
    $mul390 = $sub380 << 1;
    $arrayidx392 = $labelInfo + 655376 + ($mul390 << 3) | 0;
    HEAPF64[$arrayidx392 >> 3] = +HEAPF64[$arrayidx392 >> 3] + +(HEAP32[$labelInfo + 1310736 + ($mul381 + 1 << 2) >> 2] | 0);
    $arrayidx400 = $labelInfo + 655376 + (($mul390 | 1) << 3) | 0;
    HEAPF64[$arrayidx400 >> 3] = +HEAPF64[$arrayidx400 >> 3] + +(HEAP32[$labelInfo + 1310736 + ($mul381 + 2 << 2) >> 2] | 0);
    $mul402 = $sub380 << 2;
    $arrayidx404 = $labelInfo + 131084 + ($mul402 << 2) | 0;
    $56 = HEAP32[$labelInfo + 1310736 + ($mul381 + 3 << 2) >> 2] | 0;
    if ((HEAP32[$arrayidx404 >> 2] | 0) > ($56 | 0)) HEAP32[$arrayidx404 >> 2] = $56;
    $arrayidx420 = $labelInfo + 131084 + (($mul402 | 1) << 2) | 0;
    $58 = HEAP32[$labelInfo + 1310736 + ($mul381 + 4 << 2) >> 2] | 0;
    if ((HEAP32[$arrayidx420 >> 2] | 0) < ($58 | 0)) HEAP32[$arrayidx420 >> 2] = $58;
    $arrayidx436 = $labelInfo + 131084 + (($mul402 | 2) << 2) | 0;
    $60 = HEAP32[$labelInfo + 1310736 + ($mul381 + 5 << 2) >> 2] | 0;
    if ((HEAP32[$arrayidx436 >> 2] | 0) > ($60 | 0)) HEAP32[$arrayidx436 >> 2] = $60;
    $arrayidx452 = $labelInfo + 131084 + (($mul402 | 3) << 2) | 0;
    $62 = HEAP32[$labelInfo + 1310736 + ($mul381 + 6 << 2) >> 2] | 0;
    if ((HEAP32[$arrayidx452 >> 2] | 0) < ($62 | 0)) HEAP32[$arrayidx452 >> 2] = $62;
    $i$5 = $i$5 + 1 | 0;
   }
   while (1) {
    if (($i$6 | 0) >= (HEAP32[$label_num325 >> 2] | 0)) {
     $retval$0 = 0;
     break L77;
    }
    $arrayidx473 = $labelInfo + 12 + ($i$6 << 2) | 0;
    $mul475 = $i$6 << 1;
    $arrayidx477 = $labelInfo + 655376 + ($mul475 << 3) | 0;
    HEAPF64[$arrayidx477 >> 3] = +HEAPF64[$arrayidx477 >> 3] / +(HEAP32[$arrayidx473 >> 2] | 0);
    $arrayidx483 = $labelInfo + 655376 + (($mul475 | 1) << 3) | 0;
    HEAPF64[$arrayidx483 >> 3] = +HEAPF64[$arrayidx483 >> 3] / +(HEAP32[$arrayidx473 >> 2] | 0);
    $i$6 = $i$6 + 1 | 0;
   }
  }
 } while (0);
 STACKTOP = sp;
 return $retval$0 | 0;
}

function _arLabelingSubDWR3CA5551($image, $xsize, $ysize, $labelingThresh, $labelInfo) {
 $image = $image | 0;
 $xsize = $xsize | 0;
 $ysize = $ysize | 0;
 $labelingThresh = $labelingThresh | 0;
 $labelInfo = $labelInfo | 0;
 var $$sink = 0, $0 = 0, $10 = 0, $11 = 0, $14 = 0, $15 = 0, $19 = 0, $20 = 0, $21 = 0, $24 = 0, $25 = 0, $3 = 0, $37 = 0, $38 = 0, $4 = 0, $43 = 0, $45 = 0, $54 = 0, $56 = 0, $58 = 0, $60 = 0, $8 = 0, $9 = 0, $add = 0, $add$ptr141 = 0, $add279 = 0, $add284$sink = 0, $arraydecay = 0, $arrayidx130 = 0, $arrayidx133 = 0, $arrayidx136 = 0, $arrayidx197 = 0, $arrayidx200 = 0, $arrayidx203 = 0, $arrayidx211 = 0, $arrayidx214 = 0, $arrayidx217 = 0, $arrayidx220 = 0, $arrayidx242 = 0, $arrayidx245 = 0, $arrayidx248 = 0, $arrayidx251 = 0, $arrayidx271 = 0, $arrayidx274 = 0, $arrayidx277 = 0, $arrayidx331 = 0, $arrayidx388 = 0, $arrayidx396 = 0, $arrayidx404 = 0, $arrayidx408 = 0, $arrayidx424 = 0, $arrayidx440 = 0, $arrayidx456 = 0, $arrayidx477 = 0, $arrayidx481 = 0, $arrayidx486 = 0, $arrayidx51 = 0, $arrayidx60 = 0, $arrayidx63 = 0, $arrayidx66 = 0, $arrayidx83 = 0, $cmp77 = 0, $cond = 0, $conv = 0, $conv39 = 0, $i$0 = 0, $i$1 = 0, $i$2 = 0, $i$3 = 0, $i$4 = 0, $i$5 = 0, $i$6 = 0, $inc288 = 0, $j$0 = 0, $j$1 = 0, $j$2 = 0, $k$0 = 0, $k$1 = 0, $k$2 = 0, $k$3 = 0, $label_num329 = 0, $mul = 0, $mul209 = 0, $mul240 = 0, $mul298 = 0, $mul364 = 0, $mul385 = 0, $mul394 = 0, $mul406 = 0, $mul479 = 0, $pnt$0 = 0, $pnt$1 = 0, $pnt1$0 = 0, $pnt1$1 = 0, $pnt2$0 = 0, $pnt2$1 = 0, $pnt2$2 = 0, $pnt2$3 = 0, $retval$0 = 0, $sub = 0, $sub352 = 0, $sub384 = 0, $sub50 = 0, $sub8 = 0, $sub82 = 0, $sub86 = 0, $vararg_buffer = 0, $wk$0 = 0, $wk$1 = 0, $wk$2 = 0, $wk$3 = 0, $wk$4 = 0, $wk_max$0 = 0, $wk_max$1 = 0, $wk_max$2 = 0, $wk_max$3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $vararg_buffer = sp;
 $0 = HEAP32[$labelInfo >> 2] | 0;
 $sub = $ysize + -1 | 0;
 $i$0 = 0;
 $pnt1$0 = $0;
 $pnt2$0 = $0 + ((Math_imul($sub, $xsize) | 0) << 1) | 0;
 while (1) {
  if (($i$0 | 0) >= ($xsize | 0)) break;
  HEAP16[$pnt2$0 >> 1] = 0;
  HEAP16[$pnt1$0 >> 1] = 0;
  $i$0 = $i$0 + 1 | 0;
  $pnt1$0 = $pnt1$0 + 2 | 0;
  $pnt2$0 = $pnt2$0 + 2 | 0;
 }
 $mul = $labelingThresh * 3 | 0;
 $sub8 = $xsize + -1 | 0;
 $i$1 = 0;
 $pnt1$1 = $0;
 $pnt2$1 = $0 + ($sub8 << 1) | 0;
 while (1) {
  if (($i$1 | 0) >= ($ysize | 0)) break;
  HEAP16[$pnt2$1 >> 1] = 0;
  HEAP16[$pnt1$1 >> 1] = 0;
  $i$1 = $i$1 + 1 | 0;
  $pnt1$1 = $pnt1$1 + ($xsize << 1) | 0;
  $pnt2$1 = $pnt2$1 + ($xsize << 1) | 0;
 }
 $arraydecay = $labelInfo + 1179664 | 0;
 $add = $xsize + 1 | 0;
 $sub50 = 0 - $xsize | 0;
 $j$0 = 1;
 $pnt$0 = $image + ($add << 1) | 0;
 $pnt2$2 = $0 + ($add << 1) | 0;
 $wk_max$0 = 0;
 L9 : while (1) {
  if (($j$0 | 0) < ($sub | 0)) {
   $i$2 = 1;
   $pnt$1 = $pnt$0;
   $pnt2$3 = $pnt2$2;
   $wk_max$1 = $wk_max$0;
  } else {
   label = 56;
   break;
  }
  while (1) {
   if (($i$2 | 0) >= ($sub8 | 0)) break;
   $conv = HEAPU8[$pnt$1 >> 0] | 0;
   $conv39 = HEAPU8[$pnt$1 + 1 >> 0] | 0;
   do if ((($conv & 248) + 12 + ($conv << 5 & 224) + ($conv39 >>> 3 & 24) + ($conv39 << 2 & 248) | 0) > ($mul | 0)) {
    $arrayidx51 = $pnt2$3 + ($sub50 << 1) | 0;
    $3 = HEAP16[$arrayidx51 >> 1] | 0;
    if ($3 << 16 >> 16 > 0) {
     HEAP16[$pnt2$3 >> 1] = $3;
     $4 = ($3 << 16 >> 16) * 7 | 0;
     $arrayidx60 = $labelInfo + 1310736 + ($4 + -7 << 2) | 0;
     HEAP32[$arrayidx60 >> 2] = (HEAP32[$arrayidx60 >> 2] | 0) + 1;
     $arrayidx63 = $labelInfo + 1310736 + ($4 + -6 << 2) | 0;
     HEAP32[$arrayidx63 >> 2] = (HEAP32[$arrayidx63 >> 2] | 0) + $i$2;
     $arrayidx66 = $labelInfo + 1310736 + ($4 + -5 << 2) | 0;
     HEAP32[$arrayidx66 >> 2] = (HEAP32[$arrayidx66 >> 2] | 0) + $j$0;
     HEAP32[$labelInfo + 1310736 + ($4 + -1 << 2) >> 2] = $j$0;
     $wk_max$3 = $wk_max$1;
     break;
    }
    $8 = HEAP16[$arrayidx51 + 2 >> 1] | 0;
    $9 = HEAP16[$arrayidx51 + -2 >> 1] | 0;
    $cmp77 = $9 << 16 >> 16 > 0;
    $add$ptr141 = $pnt2$3 + -2 | 0;
    $sub86 = ($9 << 16 >> 16) + -1 | 0;
    if ($8 << 16 >> 16 <= 0) {
     if ($cmp77) {
      HEAP16[$pnt2$3 >> 1] = $9;
      $mul240 = $sub86 * 7 | 0;
      $arrayidx242 = $labelInfo + 1310736 + ($mul240 << 2) | 0;
      HEAP32[$arrayidx242 >> 2] = (HEAP32[$arrayidx242 >> 2] | 0) + 1;
      $arrayidx245 = $labelInfo + 1310736 + ($mul240 + 1 << 2) | 0;
      HEAP32[$arrayidx245 >> 2] = (HEAP32[$arrayidx245 >> 2] | 0) + $i$2;
      $arrayidx248 = $labelInfo + 1310736 + ($mul240 + 2 << 2) | 0;
      HEAP32[$arrayidx248 >> 2] = (HEAP32[$arrayidx248 >> 2] | 0) + $j$0;
      $arrayidx251 = $labelInfo + 1310736 + ($mul240 + 4 << 2) | 0;
      if ((HEAP32[$arrayidx251 >> 2] | 0) < ($i$2 | 0)) HEAP32[$arrayidx251 >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($mul240 + 6 << 2) >> 2] = $j$0;
      $wk_max$3 = $wk_max$1;
      break;
     }
     $37 = HEAP16[$add$ptr141 >> 1] | 0;
     if ($37 << 16 >> 16 > 0) {
      HEAP16[$pnt2$3 >> 1] = $37;
      $38 = ($37 << 16 >> 16) * 7 | 0;
      $arrayidx271 = $labelInfo + 1310736 + ($38 + -7 << 2) | 0;
      HEAP32[$arrayidx271 >> 2] = (HEAP32[$arrayidx271 >> 2] | 0) + 1;
      $arrayidx274 = $labelInfo + 1310736 + ($38 + -6 << 2) | 0;
      HEAP32[$arrayidx274 >> 2] = (HEAP32[$arrayidx274 >> 2] | 0) + $i$2;
      $arrayidx277 = $labelInfo + 1310736 + ($38 + -5 << 2) | 0;
      HEAP32[$arrayidx277 >> 2] = (HEAP32[$arrayidx277 >> 2] | 0) + $j$0;
      $add279 = $38 + -3 | 0;
      if ((HEAP32[$labelInfo + 1310736 + ($add279 << 2) >> 2] | 0) < ($i$2 | 0)) {
       $$sink = $i$2;
       $add284$sink = $add279;
       $wk_max$2 = $wk_max$1;
      } else {
       $wk_max$3 = $wk_max$1;
       break;
      }
     } else {
      $inc288 = $wk_max$1 + 1 | 0;
      if (($wk_max$1 | 0) > 32767) {
       label = 50;
       break L9;
      }
      HEAP16[$pnt2$3 >> 1] = $inc288;
      HEAP32[$labelInfo + 1179664 + ($wk_max$1 << 2) >> 2] = $inc288 << 16 >> 16;
      $mul298 = $wk_max$1 * 7 | 0;
      HEAP32[$labelInfo + 1310736 + ($mul298 << 2) >> 2] = 1;
      HEAP32[$labelInfo + 1310736 + ($mul298 + 1 << 2) >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($mul298 + 2 << 2) >> 2] = $j$0;
      HEAP32[$labelInfo + 1310736 + ($mul298 + 3 << 2) >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($mul298 + 4 << 2) >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($mul298 + 5 << 2) >> 2] = $j$0;
      $$sink = $j$0;
      $add284$sink = $mul298 + 6 | 0;
      $wk_max$2 = $inc288;
     }
     HEAP32[$labelInfo + 1310736 + ($add284$sink << 2) >> 2] = $$sink;
     $wk_max$3 = $wk_max$2;
     break;
    }
    $sub82 = ($8 << 16 >> 16) + -1 | 0;
    $arrayidx83 = $labelInfo + 1179664 + ($sub82 << 2) | 0;
    if ($cmp77) {
     $10 = HEAP32[$arrayidx83 >> 2] | 0;
     $11 = HEAP32[$labelInfo + 1179664 + ($sub86 << 2) >> 2] | 0;
     L35 : do if (($10 | 0) > ($11 | 0)) {
      HEAP16[$pnt2$3 >> 1] = $11;
      $k$0 = 0;
      $wk$0 = $arraydecay;
      while (1) {
       if (($k$0 | 0) >= ($wk_max$1 | 0)) {
        $14 = $11;
        break L35;
       }
       if ((HEAP32[$wk$0 >> 2] | 0) == ($10 | 0)) HEAP32[$wk$0 >> 2] = $11;
       $k$0 = $k$0 + 1 | 0;
       $wk$0 = $wk$0 + 4 | 0;
      }
     } else {
      HEAP16[$pnt2$3 >> 1] = $10;
      if (($10 | 0) < ($11 | 0)) {
       $k$1 = 0;
       $wk$1 = $arraydecay;
       while (1) {
        if (($k$1 | 0) >= ($wk_max$1 | 0)) {
         $14 = $10;
         break L35;
        }
        if ((HEAP32[$wk$1 >> 2] | 0) == ($11 | 0)) HEAP32[$wk$1 >> 2] = $10;
        $k$1 = $k$1 + 1 | 0;
        $wk$1 = $wk$1 + 4 | 0;
       }
      } else $14 = $10;
     } while (0);
     $15 = ($14 << 16 >> 16) * 7 | 0;
     $arrayidx130 = $labelInfo + 1310736 + ($15 + -7 << 2) | 0;
     HEAP32[$arrayidx130 >> 2] = (HEAP32[$arrayidx130 >> 2] | 0) + 1;
     $arrayidx133 = $labelInfo + 1310736 + ($15 + -6 << 2) | 0;
     HEAP32[$arrayidx133 >> 2] = (HEAP32[$arrayidx133 >> 2] | 0) + $i$2;
     $arrayidx136 = $labelInfo + 1310736 + ($15 + -5 << 2) | 0;
     HEAP32[$arrayidx136 >> 2] = (HEAP32[$arrayidx136 >> 2] | 0) + $j$0;
     HEAP32[$labelInfo + 1310736 + ($15 + -1 << 2) >> 2] = $j$0;
     $wk_max$3 = $wk_max$1;
     break;
    }
    $19 = HEAP16[$add$ptr141 >> 1] | 0;
    if ($19 << 16 >> 16 <= 0) {
     HEAP16[$pnt2$3 >> 1] = $8;
     $mul209 = $sub82 * 7 | 0;
     $arrayidx211 = $labelInfo + 1310736 + ($mul209 << 2) | 0;
     HEAP32[$arrayidx211 >> 2] = (HEAP32[$arrayidx211 >> 2] | 0) + 1;
     $arrayidx214 = $labelInfo + 1310736 + ($mul209 + 1 << 2) | 0;
     HEAP32[$arrayidx214 >> 2] = (HEAP32[$arrayidx214 >> 2] | 0) + $i$2;
     $arrayidx217 = $labelInfo + 1310736 + ($mul209 + 2 << 2) | 0;
     HEAP32[$arrayidx217 >> 2] = (HEAP32[$arrayidx217 >> 2] | 0) + $j$0;
     $arrayidx220 = $labelInfo + 1310736 + ($mul209 + 3 << 2) | 0;
     if ((HEAP32[$arrayidx220 >> 2] | 0) > ($i$2 | 0)) HEAP32[$arrayidx220 >> 2] = $i$2;
     HEAP32[$labelInfo + 1310736 + ($mul209 + 6 << 2) >> 2] = $j$0;
     $wk_max$3 = $wk_max$1;
     break;
    }
    $20 = HEAP32[$arrayidx83 >> 2] | 0;
    $21 = HEAP32[$labelInfo + 1179664 + (($19 << 16 >> 16) + -1 << 2) >> 2] | 0;
    L58 : do if (($20 | 0) > ($21 | 0)) {
     HEAP16[$pnt2$3 >> 1] = $21;
     $k$2 = 0;
     $wk$2 = $arraydecay;
     while (1) {
      if (($k$2 | 0) >= ($wk_max$1 | 0)) {
       $24 = $21;
       break L58;
      }
      if ((HEAP32[$wk$2 >> 2] | 0) == ($20 | 0)) HEAP32[$wk$2 >> 2] = $21;
      $k$2 = $k$2 + 1 | 0;
      $wk$2 = $wk$2 + 4 | 0;
     }
    } else {
     HEAP16[$pnt2$3 >> 1] = $20;
     if (($20 | 0) < ($21 | 0)) {
      $k$3 = 0;
      $wk$3 = $arraydecay;
      while (1) {
       if (($k$3 | 0) >= ($wk_max$1 | 0)) {
        $24 = $20;
        break L58;
       }
       if ((HEAP32[$wk$3 >> 2] | 0) == ($21 | 0)) HEAP32[$wk$3 >> 2] = $20;
       $k$3 = $k$3 + 1 | 0;
       $wk$3 = $wk$3 + 4 | 0;
      }
     } else $24 = $20;
    } while (0);
    $25 = ($24 << 16 >> 16) * 7 | 0;
    $arrayidx197 = $labelInfo + 1310736 + ($25 + -7 << 2) | 0;
    HEAP32[$arrayidx197 >> 2] = (HEAP32[$arrayidx197 >> 2] | 0) + 1;
    $arrayidx200 = $labelInfo + 1310736 + ($25 + -6 << 2) | 0;
    HEAP32[$arrayidx200 >> 2] = (HEAP32[$arrayidx200 >> 2] | 0) + $i$2;
    $arrayidx203 = $labelInfo + 1310736 + ($25 + -5 << 2) | 0;
    HEAP32[$arrayidx203 >> 2] = (HEAP32[$arrayidx203 >> 2] | 0) + $j$0;
    $wk_max$3 = $wk_max$1;
   } else {
    HEAP16[$pnt2$3 >> 1] = 0;
    $wk_max$3 = $wk_max$1;
   } while (0);
   $i$2 = $i$2 + 1 | 0;
   $pnt$1 = $pnt$1 + 2 | 0;
   $pnt2$3 = $pnt2$3 + 2 | 0;
   $wk_max$1 = $wk_max$3;
  }
  $j$0 = $j$0 + 1 | 0;
  $pnt$0 = $pnt$1 + 4 | 0;
  $pnt2$2 = $pnt2$3 + 4 | 0;
  $wk_max$0 = $wk_max$1;
 }
 L77 : do if ((label | 0) == 50) {
  _arLog(3, 3256, $vararg_buffer);
  $retval$0 = -1;
 } else if ((label | 0) == 56) {
  $arrayidx331 = $labelInfo + 12 | 0;
  $i$3 = 1;
  $j$1 = 1;
  $wk$4 = $arraydecay;
  while (1) {
   if (($i$3 | 0) > ($wk_max$0 | 0)) break;
   $43 = HEAP32[$wk$4 >> 2] | 0;
   if (($43 | 0) == ($i$3 | 0)) {
    $cond = $j$1;
    $j$2 = $j$1 + 1 | 0;
   } else {
    $cond = HEAP32[$labelInfo + 1179664 + ($43 + -1 << 2) >> 2] | 0;
    $j$2 = $j$1;
   }
   HEAP32[$wk$4 >> 2] = $cond;
   $i$3 = $i$3 + 1 | 0;
   $j$1 = $j$2;
   $wk$4 = $wk$4 + 4 | 0;
  }
  $label_num329 = $labelInfo + 8 | 0;
  $sub352 = $j$1 + -1 | 0;
  HEAP32[$label_num329 >> 2] = $sub352;
  if (!$sub352) $retval$0 = 0; else {
   _memset($arrayidx331 | 0, 0, $sub352 << 2 | 0) | 0;
   _memset($labelInfo + 655376 | 0, 0, $sub352 << 4 | 0) | 0;
   $45 = $sub352;
   $i$4 = 0;
   while (1) {
    if (($i$4 | 0) >= ($45 | 0)) {
     $i$5 = 0;
     break;
    }
    $mul364 = $i$4 << 2;
    HEAP32[$labelInfo + 131084 + ($mul364 << 2) >> 2] = $xsize;
    HEAP32[$labelInfo + 131084 + (($mul364 | 1) << 2) >> 2] = 0;
    HEAP32[$labelInfo + 131084 + (($mul364 | 2) << 2) >> 2] = $ysize;
    HEAP32[$labelInfo + 131084 + (($mul364 | 3) << 2) >> 2] = 0;
    $45 = HEAP32[$label_num329 >> 2] | 0;
    $i$4 = $i$4 + 1 | 0;
   }
   while (1) {
    if (($i$5 | 0) >= ($wk_max$0 | 0)) {
     $i$6 = 0;
     break;
    }
    $sub384 = (HEAP32[$labelInfo + 1179664 + ($i$5 << 2) >> 2] | 0) + -1 | 0;
    $mul385 = $i$5 * 7 | 0;
    $arrayidx388 = $labelInfo + 12 + ($sub384 << 2) | 0;
    HEAP32[$arrayidx388 >> 2] = (HEAP32[$arrayidx388 >> 2] | 0) + (HEAP32[$labelInfo + 1310736 + ($mul385 << 2) >> 2] | 0);
    $mul394 = $sub384 << 1;
    $arrayidx396 = $labelInfo + 655376 + ($mul394 << 3) | 0;
    HEAPF64[$arrayidx396 >> 3] = +HEAPF64[$arrayidx396 >> 3] + +(HEAP32[$labelInfo + 1310736 + ($mul385 + 1 << 2) >> 2] | 0);
    $arrayidx404 = $labelInfo + 655376 + (($mul394 | 1) << 3) | 0;
    HEAPF64[$arrayidx404 >> 3] = +HEAPF64[$arrayidx404 >> 3] + +(HEAP32[$labelInfo + 1310736 + ($mul385 + 2 << 2) >> 2] | 0);
    $mul406 = $sub384 << 2;
    $arrayidx408 = $labelInfo + 131084 + ($mul406 << 2) | 0;
    $54 = HEAP32[$labelInfo + 1310736 + ($mul385 + 3 << 2) >> 2] | 0;
    if ((HEAP32[$arrayidx408 >> 2] | 0) > ($54 | 0)) HEAP32[$arrayidx408 >> 2] = $54;
    $arrayidx424 = $labelInfo + 131084 + (($mul406 | 1) << 2) | 0;
    $56 = HEAP32[$labelInfo + 1310736 + ($mul385 + 4 << 2) >> 2] | 0;
    if ((HEAP32[$arrayidx424 >> 2] | 0) < ($56 | 0)) HEAP32[$arrayidx424 >> 2] = $56;
    $arrayidx440 = $labelInfo + 131084 + (($mul406 | 2) << 2) | 0;
    $58 = HEAP32[$labelInfo + 1310736 + ($mul385 + 5 << 2) >> 2] | 0;
    if ((HEAP32[$arrayidx440 >> 2] | 0) > ($58 | 0)) HEAP32[$arrayidx440 >> 2] = $58;
    $arrayidx456 = $labelInfo + 131084 + (($mul406 | 3) << 2) | 0;
    $60 = HEAP32[$labelInfo + 1310736 + ($mul385 + 6 << 2) >> 2] | 0;
    if ((HEAP32[$arrayidx456 >> 2] | 0) < ($60 | 0)) HEAP32[$arrayidx456 >> 2] = $60;
    $i$5 = $i$5 + 1 | 0;
   }
   while (1) {
    if (($i$6 | 0) >= (HEAP32[$label_num329 >> 2] | 0)) {
     $retval$0 = 0;
     break L77;
    }
    $arrayidx477 = $labelInfo + 12 + ($i$6 << 2) | 0;
    $mul479 = $i$6 << 1;
    $arrayidx481 = $labelInfo + 655376 + ($mul479 << 3) | 0;
    HEAPF64[$arrayidx481 >> 3] = +HEAPF64[$arrayidx481 >> 3] / +(HEAP32[$arrayidx477 >> 2] | 0);
    $arrayidx486 = $labelInfo + 655376 + (($mul479 | 1) << 3) | 0;
    HEAPF64[$arrayidx486 >> 3] = +HEAPF64[$arrayidx486 >> 3] / +(HEAP32[$arrayidx477 >> 2] | 0);
    $i$6 = $i$6 + 1 | 0;
   }
  }
 } while (0);
 STACKTOP = sp;
 return $retval$0 | 0;
}

function _arLabelingSubDBR3CA5551($image, $xsize, $ysize, $labelingThresh, $labelInfo) {
 $image = $image | 0;
 $xsize = $xsize | 0;
 $ysize = $ysize | 0;
 $labelingThresh = $labelingThresh | 0;
 $labelInfo = $labelInfo | 0;
 var $$sink = 0, $0 = 0, $10 = 0, $11 = 0, $14 = 0, $15 = 0, $19 = 0, $20 = 0, $21 = 0, $24 = 0, $25 = 0, $3 = 0, $37 = 0, $38 = 0, $4 = 0, $43 = 0, $45 = 0, $54 = 0, $56 = 0, $58 = 0, $60 = 0, $8 = 0, $9 = 0, $add = 0, $add$ptr141 = 0, $add279 = 0, $add284$sink = 0, $arraydecay = 0, $arrayidx130 = 0, $arrayidx133 = 0, $arrayidx136 = 0, $arrayidx197 = 0, $arrayidx200 = 0, $arrayidx203 = 0, $arrayidx211 = 0, $arrayidx214 = 0, $arrayidx217 = 0, $arrayidx220 = 0, $arrayidx242 = 0, $arrayidx245 = 0, $arrayidx248 = 0, $arrayidx251 = 0, $arrayidx271 = 0, $arrayidx274 = 0, $arrayidx277 = 0, $arrayidx331 = 0, $arrayidx388 = 0, $arrayidx396 = 0, $arrayidx404 = 0, $arrayidx408 = 0, $arrayidx424 = 0, $arrayidx440 = 0, $arrayidx456 = 0, $arrayidx477 = 0, $arrayidx481 = 0, $arrayidx486 = 0, $arrayidx51 = 0, $arrayidx60 = 0, $arrayidx63 = 0, $arrayidx66 = 0, $arrayidx83 = 0, $cmp77 = 0, $cond = 0, $conv = 0, $conv39 = 0, $i$0 = 0, $i$1 = 0, $i$2 = 0, $i$3 = 0, $i$4 = 0, $i$5 = 0, $i$6 = 0, $inc288 = 0, $j$0 = 0, $j$1 = 0, $j$2 = 0, $k$0 = 0, $k$1 = 0, $k$2 = 0, $k$3 = 0, $label_num329 = 0, $mul = 0, $mul209 = 0, $mul240 = 0, $mul298 = 0, $mul364 = 0, $mul385 = 0, $mul394 = 0, $mul406 = 0, $mul479 = 0, $pnt$0 = 0, $pnt$1 = 0, $pnt1$0 = 0, $pnt1$1 = 0, $pnt2$0 = 0, $pnt2$1 = 0, $pnt2$2 = 0, $pnt2$3 = 0, $retval$0 = 0, $sub = 0, $sub352 = 0, $sub384 = 0, $sub50 = 0, $sub8 = 0, $sub82 = 0, $sub86 = 0, $vararg_buffer = 0, $wk$0 = 0, $wk$1 = 0, $wk$2 = 0, $wk$3 = 0, $wk$4 = 0, $wk_max$0 = 0, $wk_max$1 = 0, $wk_max$2 = 0, $wk_max$3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $vararg_buffer = sp;
 $0 = HEAP32[$labelInfo >> 2] | 0;
 $sub = $ysize + -1 | 0;
 $i$0 = 0;
 $pnt1$0 = $0;
 $pnt2$0 = $0 + ((Math_imul($sub, $xsize) | 0) << 1) | 0;
 while (1) {
  if (($i$0 | 0) >= ($xsize | 0)) break;
  HEAP16[$pnt2$0 >> 1] = 0;
  HEAP16[$pnt1$0 >> 1] = 0;
  $i$0 = $i$0 + 1 | 0;
  $pnt1$0 = $pnt1$0 + 2 | 0;
  $pnt2$0 = $pnt2$0 + 2 | 0;
 }
 $mul = $labelingThresh * 3 | 0;
 $sub8 = $xsize + -1 | 0;
 $i$1 = 0;
 $pnt1$1 = $0;
 $pnt2$1 = $0 + ($sub8 << 1) | 0;
 while (1) {
  if (($i$1 | 0) >= ($ysize | 0)) break;
  HEAP16[$pnt2$1 >> 1] = 0;
  HEAP16[$pnt1$1 >> 1] = 0;
  $i$1 = $i$1 + 1 | 0;
  $pnt1$1 = $pnt1$1 + ($xsize << 1) | 0;
  $pnt2$1 = $pnt2$1 + ($xsize << 1) | 0;
 }
 $arraydecay = $labelInfo + 1179664 | 0;
 $add = $xsize + 1 | 0;
 $sub50 = 0 - $xsize | 0;
 $j$0 = 1;
 $pnt$0 = $image + ($add << 1) | 0;
 $pnt2$2 = $0 + ($add << 1) | 0;
 $wk_max$0 = 0;
 L9 : while (1) {
  if (($j$0 | 0) < ($sub | 0)) {
   $i$2 = 1;
   $pnt$1 = $pnt$0;
   $pnt2$3 = $pnt2$2;
   $wk_max$1 = $wk_max$0;
  } else {
   label = 56;
   break;
  }
  while (1) {
   if (($i$2 | 0) >= ($sub8 | 0)) break;
   $conv = HEAPU8[$pnt$1 >> 0] | 0;
   $conv39 = HEAPU8[$pnt$1 + 1 >> 0] | 0;
   do if ((($conv & 248) + 12 + ($conv << 5 & 224) + ($conv39 >>> 3 & 24) + ($conv39 << 2 & 248) | 0) > ($mul | 0)) {
    HEAP16[$pnt2$3 >> 1] = 0;
    $wk_max$3 = $wk_max$1;
   } else {
    $arrayidx51 = $pnt2$3 + ($sub50 << 1) | 0;
    $3 = HEAP16[$arrayidx51 >> 1] | 0;
    if ($3 << 16 >> 16 > 0) {
     HEAP16[$pnt2$3 >> 1] = $3;
     $4 = ($3 << 16 >> 16) * 7 | 0;
     $arrayidx60 = $labelInfo + 1310736 + ($4 + -7 << 2) | 0;
     HEAP32[$arrayidx60 >> 2] = (HEAP32[$arrayidx60 >> 2] | 0) + 1;
     $arrayidx63 = $labelInfo + 1310736 + ($4 + -6 << 2) | 0;
     HEAP32[$arrayidx63 >> 2] = (HEAP32[$arrayidx63 >> 2] | 0) + $i$2;
     $arrayidx66 = $labelInfo + 1310736 + ($4 + -5 << 2) | 0;
     HEAP32[$arrayidx66 >> 2] = (HEAP32[$arrayidx66 >> 2] | 0) + $j$0;
     HEAP32[$labelInfo + 1310736 + ($4 + -1 << 2) >> 2] = $j$0;
     $wk_max$3 = $wk_max$1;
     break;
    }
    $8 = HEAP16[$arrayidx51 + 2 >> 1] | 0;
    $9 = HEAP16[$arrayidx51 + -2 >> 1] | 0;
    $cmp77 = $9 << 16 >> 16 > 0;
    $add$ptr141 = $pnt2$3 + -2 | 0;
    $sub86 = ($9 << 16 >> 16) + -1 | 0;
    if ($8 << 16 >> 16 <= 0) {
     if ($cmp77) {
      HEAP16[$pnt2$3 >> 1] = $9;
      $mul240 = $sub86 * 7 | 0;
      $arrayidx242 = $labelInfo + 1310736 + ($mul240 << 2) | 0;
      HEAP32[$arrayidx242 >> 2] = (HEAP32[$arrayidx242 >> 2] | 0) + 1;
      $arrayidx245 = $labelInfo + 1310736 + ($mul240 + 1 << 2) | 0;
      HEAP32[$arrayidx245 >> 2] = (HEAP32[$arrayidx245 >> 2] | 0) + $i$2;
      $arrayidx248 = $labelInfo + 1310736 + ($mul240 + 2 << 2) | 0;
      HEAP32[$arrayidx248 >> 2] = (HEAP32[$arrayidx248 >> 2] | 0) + $j$0;
      $arrayidx251 = $labelInfo + 1310736 + ($mul240 + 4 << 2) | 0;
      if ((HEAP32[$arrayidx251 >> 2] | 0) < ($i$2 | 0)) HEAP32[$arrayidx251 >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($mul240 + 6 << 2) >> 2] = $j$0;
      $wk_max$3 = $wk_max$1;
      break;
     }
     $37 = HEAP16[$add$ptr141 >> 1] | 0;
     if ($37 << 16 >> 16 > 0) {
      HEAP16[$pnt2$3 >> 1] = $37;
      $38 = ($37 << 16 >> 16) * 7 | 0;
      $arrayidx271 = $labelInfo + 1310736 + ($38 + -7 << 2) | 0;
      HEAP32[$arrayidx271 >> 2] = (HEAP32[$arrayidx271 >> 2] | 0) + 1;
      $arrayidx274 = $labelInfo + 1310736 + ($38 + -6 << 2) | 0;
      HEAP32[$arrayidx274 >> 2] = (HEAP32[$arrayidx274 >> 2] | 0) + $i$2;
      $arrayidx277 = $labelInfo + 1310736 + ($38 + -5 << 2) | 0;
      HEAP32[$arrayidx277 >> 2] = (HEAP32[$arrayidx277 >> 2] | 0) + $j$0;
      $add279 = $38 + -3 | 0;
      if ((HEAP32[$labelInfo + 1310736 + ($add279 << 2) >> 2] | 0) < ($i$2 | 0)) {
       $$sink = $i$2;
       $add284$sink = $add279;
       $wk_max$2 = $wk_max$1;
      } else {
       $wk_max$3 = $wk_max$1;
       break;
      }
     } else {
      $inc288 = $wk_max$1 + 1 | 0;
      if (($wk_max$1 | 0) > 32767) {
       label = 50;
       break L9;
      }
      HEAP16[$pnt2$3 >> 1] = $inc288;
      HEAP32[$labelInfo + 1179664 + ($wk_max$1 << 2) >> 2] = $inc288 << 16 >> 16;
      $mul298 = $wk_max$1 * 7 | 0;
      HEAP32[$labelInfo + 1310736 + ($mul298 << 2) >> 2] = 1;
      HEAP32[$labelInfo + 1310736 + ($mul298 + 1 << 2) >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($mul298 + 2 << 2) >> 2] = $j$0;
      HEAP32[$labelInfo + 1310736 + ($mul298 + 3 << 2) >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($mul298 + 4 << 2) >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($mul298 + 5 << 2) >> 2] = $j$0;
      $$sink = $j$0;
      $add284$sink = $mul298 + 6 | 0;
      $wk_max$2 = $inc288;
     }
     HEAP32[$labelInfo + 1310736 + ($add284$sink << 2) >> 2] = $$sink;
     $wk_max$3 = $wk_max$2;
     break;
    }
    $sub82 = ($8 << 16 >> 16) + -1 | 0;
    $arrayidx83 = $labelInfo + 1179664 + ($sub82 << 2) | 0;
    if ($cmp77) {
     $10 = HEAP32[$arrayidx83 >> 2] | 0;
     $11 = HEAP32[$labelInfo + 1179664 + ($sub86 << 2) >> 2] | 0;
     L36 : do if (($10 | 0) > ($11 | 0)) {
      HEAP16[$pnt2$3 >> 1] = $11;
      $k$0 = 0;
      $wk$0 = $arraydecay;
      while (1) {
       if (($k$0 | 0) >= ($wk_max$1 | 0)) {
        $14 = $11;
        break L36;
       }
       if ((HEAP32[$wk$0 >> 2] | 0) == ($10 | 0)) HEAP32[$wk$0 >> 2] = $11;
       $k$0 = $k$0 + 1 | 0;
       $wk$0 = $wk$0 + 4 | 0;
      }
     } else {
      HEAP16[$pnt2$3 >> 1] = $10;
      if (($10 | 0) < ($11 | 0)) {
       $k$1 = 0;
       $wk$1 = $arraydecay;
       while (1) {
        if (($k$1 | 0) >= ($wk_max$1 | 0)) {
         $14 = $10;
         break L36;
        }
        if ((HEAP32[$wk$1 >> 2] | 0) == ($11 | 0)) HEAP32[$wk$1 >> 2] = $10;
        $k$1 = $k$1 + 1 | 0;
        $wk$1 = $wk$1 + 4 | 0;
       }
      } else $14 = $10;
     } while (0);
     $15 = ($14 << 16 >> 16) * 7 | 0;
     $arrayidx130 = $labelInfo + 1310736 + ($15 + -7 << 2) | 0;
     HEAP32[$arrayidx130 >> 2] = (HEAP32[$arrayidx130 >> 2] | 0) + 1;
     $arrayidx133 = $labelInfo + 1310736 + ($15 + -6 << 2) | 0;
     HEAP32[$arrayidx133 >> 2] = (HEAP32[$arrayidx133 >> 2] | 0) + $i$2;
     $arrayidx136 = $labelInfo + 1310736 + ($15 + -5 << 2) | 0;
     HEAP32[$arrayidx136 >> 2] = (HEAP32[$arrayidx136 >> 2] | 0) + $j$0;
     HEAP32[$labelInfo + 1310736 + ($15 + -1 << 2) >> 2] = $j$0;
     $wk_max$3 = $wk_max$1;
     break;
    }
    $19 = HEAP16[$add$ptr141 >> 1] | 0;
    if ($19 << 16 >> 16 <= 0) {
     HEAP16[$pnt2$3 >> 1] = $8;
     $mul209 = $sub82 * 7 | 0;
     $arrayidx211 = $labelInfo + 1310736 + ($mul209 << 2) | 0;
     HEAP32[$arrayidx211 >> 2] = (HEAP32[$arrayidx211 >> 2] | 0) + 1;
     $arrayidx214 = $labelInfo + 1310736 + ($mul209 + 1 << 2) | 0;
     HEAP32[$arrayidx214 >> 2] = (HEAP32[$arrayidx214 >> 2] | 0) + $i$2;
     $arrayidx217 = $labelInfo + 1310736 + ($mul209 + 2 << 2) | 0;
     HEAP32[$arrayidx217 >> 2] = (HEAP32[$arrayidx217 >> 2] | 0) + $j$0;
     $arrayidx220 = $labelInfo + 1310736 + ($mul209 + 3 << 2) | 0;
     if ((HEAP32[$arrayidx220 >> 2] | 0) > ($i$2 | 0)) HEAP32[$arrayidx220 >> 2] = $i$2;
     HEAP32[$labelInfo + 1310736 + ($mul209 + 6 << 2) >> 2] = $j$0;
     $wk_max$3 = $wk_max$1;
     break;
    }
    $20 = HEAP32[$arrayidx83 >> 2] | 0;
    $21 = HEAP32[$labelInfo + 1179664 + (($19 << 16 >> 16) + -1 << 2) >> 2] | 0;
    L59 : do if (($20 | 0) > ($21 | 0)) {
     HEAP16[$pnt2$3 >> 1] = $21;
     $k$2 = 0;
     $wk$2 = $arraydecay;
     while (1) {
      if (($k$2 | 0) >= ($wk_max$1 | 0)) {
       $24 = $21;
       break L59;
      }
      if ((HEAP32[$wk$2 >> 2] | 0) == ($20 | 0)) HEAP32[$wk$2 >> 2] = $21;
      $k$2 = $k$2 + 1 | 0;
      $wk$2 = $wk$2 + 4 | 0;
     }
    } else {
     HEAP16[$pnt2$3 >> 1] = $20;
     if (($20 | 0) < ($21 | 0)) {
      $k$3 = 0;
      $wk$3 = $arraydecay;
      while (1) {
       if (($k$3 | 0) >= ($wk_max$1 | 0)) {
        $24 = $20;
        break L59;
       }
       if ((HEAP32[$wk$3 >> 2] | 0) == ($21 | 0)) HEAP32[$wk$3 >> 2] = $20;
       $k$3 = $k$3 + 1 | 0;
       $wk$3 = $wk$3 + 4 | 0;
      }
     } else $24 = $20;
    } while (0);
    $25 = ($24 << 16 >> 16) * 7 | 0;
    $arrayidx197 = $labelInfo + 1310736 + ($25 + -7 << 2) | 0;
    HEAP32[$arrayidx197 >> 2] = (HEAP32[$arrayidx197 >> 2] | 0) + 1;
    $arrayidx200 = $labelInfo + 1310736 + ($25 + -6 << 2) | 0;
    HEAP32[$arrayidx200 >> 2] = (HEAP32[$arrayidx200 >> 2] | 0) + $i$2;
    $arrayidx203 = $labelInfo + 1310736 + ($25 + -5 << 2) | 0;
    HEAP32[$arrayidx203 >> 2] = (HEAP32[$arrayidx203 >> 2] | 0) + $j$0;
    $wk_max$3 = $wk_max$1;
   } while (0);
   $i$2 = $i$2 + 1 | 0;
   $pnt$1 = $pnt$1 + 2 | 0;
   $pnt2$3 = $pnt2$3 + 2 | 0;
   $wk_max$1 = $wk_max$3;
  }
  $j$0 = $j$0 + 1 | 0;
  $pnt$0 = $pnt$1 + 4 | 0;
  $pnt2$2 = $pnt2$3 + 4 | 0;
  $wk_max$0 = $wk_max$1;
 }
 L77 : do if ((label | 0) == 50) {
  _arLog(3, 3256, $vararg_buffer);
  $retval$0 = -1;
 } else if ((label | 0) == 56) {
  $arrayidx331 = $labelInfo + 12 | 0;
  $i$3 = 1;
  $j$1 = 1;
  $wk$4 = $arraydecay;
  while (1) {
   if (($i$3 | 0) > ($wk_max$0 | 0)) break;
   $43 = HEAP32[$wk$4 >> 2] | 0;
   if (($43 | 0) == ($i$3 | 0)) {
    $cond = $j$1;
    $j$2 = $j$1 + 1 | 0;
   } else {
    $cond = HEAP32[$labelInfo + 1179664 + ($43 + -1 << 2) >> 2] | 0;
    $j$2 = $j$1;
   }
   HEAP32[$wk$4 >> 2] = $cond;
   $i$3 = $i$3 + 1 | 0;
   $j$1 = $j$2;
   $wk$4 = $wk$4 + 4 | 0;
  }
  $label_num329 = $labelInfo + 8 | 0;
  $sub352 = $j$1 + -1 | 0;
  HEAP32[$label_num329 >> 2] = $sub352;
  if (!$sub352) $retval$0 = 0; else {
   _memset($arrayidx331 | 0, 0, $sub352 << 2 | 0) | 0;
   _memset($labelInfo + 655376 | 0, 0, $sub352 << 4 | 0) | 0;
   $45 = $sub352;
   $i$4 = 0;
   while (1) {
    if (($i$4 | 0) >= ($45 | 0)) {
     $i$5 = 0;
     break;
    }
    $mul364 = $i$4 << 2;
    HEAP32[$labelInfo + 131084 + ($mul364 << 2) >> 2] = $xsize;
    HEAP32[$labelInfo + 131084 + (($mul364 | 1) << 2) >> 2] = 0;
    HEAP32[$labelInfo + 131084 + (($mul364 | 2) << 2) >> 2] = $ysize;
    HEAP32[$labelInfo + 131084 + (($mul364 | 3) << 2) >> 2] = 0;
    $45 = HEAP32[$label_num329 >> 2] | 0;
    $i$4 = $i$4 + 1 | 0;
   }
   while (1) {
    if (($i$5 | 0) >= ($wk_max$0 | 0)) {
     $i$6 = 0;
     break;
    }
    $sub384 = (HEAP32[$labelInfo + 1179664 + ($i$5 << 2) >> 2] | 0) + -1 | 0;
    $mul385 = $i$5 * 7 | 0;
    $arrayidx388 = $labelInfo + 12 + ($sub384 << 2) | 0;
    HEAP32[$arrayidx388 >> 2] = (HEAP32[$arrayidx388 >> 2] | 0) + (HEAP32[$labelInfo + 1310736 + ($mul385 << 2) >> 2] | 0);
    $mul394 = $sub384 << 1;
    $arrayidx396 = $labelInfo + 655376 + ($mul394 << 3) | 0;
    HEAPF64[$arrayidx396 >> 3] = +HEAPF64[$arrayidx396 >> 3] + +(HEAP32[$labelInfo + 1310736 + ($mul385 + 1 << 2) >> 2] | 0);
    $arrayidx404 = $labelInfo + 655376 + (($mul394 | 1) << 3) | 0;
    HEAPF64[$arrayidx404 >> 3] = +HEAPF64[$arrayidx404 >> 3] + +(HEAP32[$labelInfo + 1310736 + ($mul385 + 2 << 2) >> 2] | 0);
    $mul406 = $sub384 << 2;
    $arrayidx408 = $labelInfo + 131084 + ($mul406 << 2) | 0;
    $54 = HEAP32[$labelInfo + 1310736 + ($mul385 + 3 << 2) >> 2] | 0;
    if ((HEAP32[$arrayidx408 >> 2] | 0) > ($54 | 0)) HEAP32[$arrayidx408 >> 2] = $54;
    $arrayidx424 = $labelInfo + 131084 + (($mul406 | 1) << 2) | 0;
    $56 = HEAP32[$labelInfo + 1310736 + ($mul385 + 4 << 2) >> 2] | 0;
    if ((HEAP32[$arrayidx424 >> 2] | 0) < ($56 | 0)) HEAP32[$arrayidx424 >> 2] = $56;
    $arrayidx440 = $labelInfo + 131084 + (($mul406 | 2) << 2) | 0;
    $58 = HEAP32[$labelInfo + 1310736 + ($mul385 + 5 << 2) >> 2] | 0;
    if ((HEAP32[$arrayidx440 >> 2] | 0) > ($58 | 0)) HEAP32[$arrayidx440 >> 2] = $58;
    $arrayidx456 = $labelInfo + 131084 + (($mul406 | 3) << 2) | 0;
    $60 = HEAP32[$labelInfo + 1310736 + ($mul385 + 6 << 2) >> 2] | 0;
    if ((HEAP32[$arrayidx456 >> 2] | 0) < ($60 | 0)) HEAP32[$arrayidx456 >> 2] = $60;
    $i$5 = $i$5 + 1 | 0;
   }
   while (1) {
    if (($i$6 | 0) >= (HEAP32[$label_num329 >> 2] | 0)) {
     $retval$0 = 0;
     break L77;
    }
    $arrayidx477 = $labelInfo + 12 + ($i$6 << 2) | 0;
    $mul479 = $i$6 << 1;
    $arrayidx481 = $labelInfo + 655376 + ($mul479 << 3) | 0;
    HEAPF64[$arrayidx481 >> 3] = +HEAPF64[$arrayidx481 >> 3] / +(HEAP32[$arrayidx477 >> 2] | 0);
    $arrayidx486 = $labelInfo + 655376 + (($mul479 | 1) << 3) | 0;
    HEAPF64[$arrayidx486 >> 3] = +HEAPF64[$arrayidx486 >> 3] / +(HEAP32[$arrayidx477 >> 2] | 0);
    $i$6 = $i$6 + 1 | 0;
   }
  }
 } while (0);
 STACKTOP = sp;
 return $retval$0 | 0;
}

function _arLabelingSubDWR3C565($image, $xsize, $ysize, $labelingThresh, $labelInfo) {
 $image = $image | 0;
 $xsize = $xsize | 0;
 $ysize = $ysize | 0;
 $labelingThresh = $labelingThresh | 0;
 $labelInfo = $labelInfo | 0;
 var $$sink = 0, $0 = 0, $10 = 0, $11 = 0, $14 = 0, $15 = 0, $19 = 0, $20 = 0, $21 = 0, $24 = 0, $25 = 0, $3 = 0, $37 = 0, $38 = 0, $4 = 0, $43 = 0, $45 = 0, $54 = 0, $56 = 0, $58 = 0, $60 = 0, $8 = 0, $9 = 0, $add = 0, $add$ptr141 = 0, $add279 = 0, $add284$sink = 0, $arraydecay = 0, $arrayidx130 = 0, $arrayidx133 = 0, $arrayidx136 = 0, $arrayidx197 = 0, $arrayidx200 = 0, $arrayidx203 = 0, $arrayidx211 = 0, $arrayidx214 = 0, $arrayidx217 = 0, $arrayidx220 = 0, $arrayidx242 = 0, $arrayidx245 = 0, $arrayidx248 = 0, $arrayidx251 = 0, $arrayidx271 = 0, $arrayidx274 = 0, $arrayidx277 = 0, $arrayidx331 = 0, $arrayidx388 = 0, $arrayidx396 = 0, $arrayidx404 = 0, $arrayidx408 = 0, $arrayidx424 = 0, $arrayidx440 = 0, $arrayidx456 = 0, $arrayidx477 = 0, $arrayidx481 = 0, $arrayidx486 = 0, $arrayidx51 = 0, $arrayidx60 = 0, $arrayidx63 = 0, $arrayidx66 = 0, $arrayidx83 = 0, $cmp77 = 0, $cond = 0, $conv = 0, $conv39 = 0, $i$0 = 0, $i$1 = 0, $i$2 = 0, $i$3 = 0, $i$4 = 0, $i$5 = 0, $i$6 = 0, $inc288 = 0, $j$0 = 0, $j$1 = 0, $j$2 = 0, $k$0 = 0, $k$1 = 0, $k$2 = 0, $k$3 = 0, $label_num329 = 0, $mul = 0, $mul209 = 0, $mul240 = 0, $mul298 = 0, $mul364 = 0, $mul385 = 0, $mul394 = 0, $mul406 = 0, $mul479 = 0, $pnt$0 = 0, $pnt$1 = 0, $pnt1$0 = 0, $pnt1$1 = 0, $pnt2$0 = 0, $pnt2$1 = 0, $pnt2$2 = 0, $pnt2$3 = 0, $retval$0 = 0, $sub = 0, $sub352 = 0, $sub384 = 0, $sub50 = 0, $sub8 = 0, $sub82 = 0, $sub86 = 0, $vararg_buffer = 0, $wk$0 = 0, $wk$1 = 0, $wk$2 = 0, $wk$3 = 0, $wk$4 = 0, $wk_max$0 = 0, $wk_max$1 = 0, $wk_max$2 = 0, $wk_max$3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $vararg_buffer = sp;
 $0 = HEAP32[$labelInfo >> 2] | 0;
 $sub = $ysize + -1 | 0;
 $i$0 = 0;
 $pnt1$0 = $0;
 $pnt2$0 = $0 + ((Math_imul($sub, $xsize) | 0) << 1) | 0;
 while (1) {
  if (($i$0 | 0) >= ($xsize | 0)) break;
  HEAP16[$pnt2$0 >> 1] = 0;
  HEAP16[$pnt1$0 >> 1] = 0;
  $i$0 = $i$0 + 1 | 0;
  $pnt1$0 = $pnt1$0 + 2 | 0;
  $pnt2$0 = $pnt2$0 + 2 | 0;
 }
 $mul = $labelingThresh * 3 | 0;
 $sub8 = $xsize + -1 | 0;
 $i$1 = 0;
 $pnt1$1 = $0;
 $pnt2$1 = $0 + ($sub8 << 1) | 0;
 while (1) {
  if (($i$1 | 0) >= ($ysize | 0)) break;
  HEAP16[$pnt2$1 >> 1] = 0;
  HEAP16[$pnt1$1 >> 1] = 0;
  $i$1 = $i$1 + 1 | 0;
  $pnt1$1 = $pnt1$1 + ($xsize << 1) | 0;
  $pnt2$1 = $pnt2$1 + ($xsize << 1) | 0;
 }
 $arraydecay = $labelInfo + 1179664 | 0;
 $add = $xsize + 1 | 0;
 $sub50 = 0 - $xsize | 0;
 $j$0 = 1;
 $pnt$0 = $image + ($add << 1) | 0;
 $pnt2$2 = $0 + ($add << 1) | 0;
 $wk_max$0 = 0;
 L9 : while (1) {
  if (($j$0 | 0) < ($sub | 0)) {
   $i$2 = 1;
   $pnt$1 = $pnt$0;
   $pnt2$3 = $pnt2$2;
   $wk_max$1 = $wk_max$0;
  } else {
   label = 56;
   break;
  }
  while (1) {
   if (($i$2 | 0) >= ($sub8 | 0)) break;
   $conv = HEAPU8[$pnt$1 >> 0] | 0;
   $conv39 = HEAPU8[$pnt$1 + 1 >> 0] | 0;
   do if ((($conv & 248) + 10 + ($conv << 5 & 224) + ($conv39 >>> 3 & 28) + ($conv39 << 3 & 248) | 0) > ($mul | 0)) {
    $arrayidx51 = $pnt2$3 + ($sub50 << 1) | 0;
    $3 = HEAP16[$arrayidx51 >> 1] | 0;
    if ($3 << 16 >> 16 > 0) {
     HEAP16[$pnt2$3 >> 1] = $3;
     $4 = ($3 << 16 >> 16) * 7 | 0;
     $arrayidx60 = $labelInfo + 1310736 + ($4 + -7 << 2) | 0;
     HEAP32[$arrayidx60 >> 2] = (HEAP32[$arrayidx60 >> 2] | 0) + 1;
     $arrayidx63 = $labelInfo + 1310736 + ($4 + -6 << 2) | 0;
     HEAP32[$arrayidx63 >> 2] = (HEAP32[$arrayidx63 >> 2] | 0) + $i$2;
     $arrayidx66 = $labelInfo + 1310736 + ($4 + -5 << 2) | 0;
     HEAP32[$arrayidx66 >> 2] = (HEAP32[$arrayidx66 >> 2] | 0) + $j$0;
     HEAP32[$labelInfo + 1310736 + ($4 + -1 << 2) >> 2] = $j$0;
     $wk_max$3 = $wk_max$1;
     break;
    }
    $8 = HEAP16[$arrayidx51 + 2 >> 1] | 0;
    $9 = HEAP16[$arrayidx51 + -2 >> 1] | 0;
    $cmp77 = $9 << 16 >> 16 > 0;
    $add$ptr141 = $pnt2$3 + -2 | 0;
    $sub86 = ($9 << 16 >> 16) + -1 | 0;
    if ($8 << 16 >> 16 <= 0) {
     if ($cmp77) {
      HEAP16[$pnt2$3 >> 1] = $9;
      $mul240 = $sub86 * 7 | 0;
      $arrayidx242 = $labelInfo + 1310736 + ($mul240 << 2) | 0;
      HEAP32[$arrayidx242 >> 2] = (HEAP32[$arrayidx242 >> 2] | 0) + 1;
      $arrayidx245 = $labelInfo + 1310736 + ($mul240 + 1 << 2) | 0;
      HEAP32[$arrayidx245 >> 2] = (HEAP32[$arrayidx245 >> 2] | 0) + $i$2;
      $arrayidx248 = $labelInfo + 1310736 + ($mul240 + 2 << 2) | 0;
      HEAP32[$arrayidx248 >> 2] = (HEAP32[$arrayidx248 >> 2] | 0) + $j$0;
      $arrayidx251 = $labelInfo + 1310736 + ($mul240 + 4 << 2) | 0;
      if ((HEAP32[$arrayidx251 >> 2] | 0) < ($i$2 | 0)) HEAP32[$arrayidx251 >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($mul240 + 6 << 2) >> 2] = $j$0;
      $wk_max$3 = $wk_max$1;
      break;
     }
     $37 = HEAP16[$add$ptr141 >> 1] | 0;
     if ($37 << 16 >> 16 > 0) {
      HEAP16[$pnt2$3 >> 1] = $37;
      $38 = ($37 << 16 >> 16) * 7 | 0;
      $arrayidx271 = $labelInfo + 1310736 + ($38 + -7 << 2) | 0;
      HEAP32[$arrayidx271 >> 2] = (HEAP32[$arrayidx271 >> 2] | 0) + 1;
      $arrayidx274 = $labelInfo + 1310736 + ($38 + -6 << 2) | 0;
      HEAP32[$arrayidx274 >> 2] = (HEAP32[$arrayidx274 >> 2] | 0) + $i$2;
      $arrayidx277 = $labelInfo + 1310736 + ($38 + -5 << 2) | 0;
      HEAP32[$arrayidx277 >> 2] = (HEAP32[$arrayidx277 >> 2] | 0) + $j$0;
      $add279 = $38 + -3 | 0;
      if ((HEAP32[$labelInfo + 1310736 + ($add279 << 2) >> 2] | 0) < ($i$2 | 0)) {
       $$sink = $i$2;
       $add284$sink = $add279;
       $wk_max$2 = $wk_max$1;
      } else {
       $wk_max$3 = $wk_max$1;
       break;
      }
     } else {
      $inc288 = $wk_max$1 + 1 | 0;
      if (($wk_max$1 | 0) > 32767) {
       label = 50;
       break L9;
      }
      HEAP16[$pnt2$3 >> 1] = $inc288;
      HEAP32[$labelInfo + 1179664 + ($wk_max$1 << 2) >> 2] = $inc288 << 16 >> 16;
      $mul298 = $wk_max$1 * 7 | 0;
      HEAP32[$labelInfo + 1310736 + ($mul298 << 2) >> 2] = 1;
      HEAP32[$labelInfo + 1310736 + ($mul298 + 1 << 2) >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($mul298 + 2 << 2) >> 2] = $j$0;
      HEAP32[$labelInfo + 1310736 + ($mul298 + 3 << 2) >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($mul298 + 4 << 2) >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($mul298 + 5 << 2) >> 2] = $j$0;
      $$sink = $j$0;
      $add284$sink = $mul298 + 6 | 0;
      $wk_max$2 = $inc288;
     }
     HEAP32[$labelInfo + 1310736 + ($add284$sink << 2) >> 2] = $$sink;
     $wk_max$3 = $wk_max$2;
     break;
    }
    $sub82 = ($8 << 16 >> 16) + -1 | 0;
    $arrayidx83 = $labelInfo + 1179664 + ($sub82 << 2) | 0;
    if ($cmp77) {
     $10 = HEAP32[$arrayidx83 >> 2] | 0;
     $11 = HEAP32[$labelInfo + 1179664 + ($sub86 << 2) >> 2] | 0;
     L35 : do if (($10 | 0) > ($11 | 0)) {
      HEAP16[$pnt2$3 >> 1] = $11;
      $k$0 = 0;
      $wk$0 = $arraydecay;
      while (1) {
       if (($k$0 | 0) >= ($wk_max$1 | 0)) {
        $14 = $11;
        break L35;
       }
       if ((HEAP32[$wk$0 >> 2] | 0) == ($10 | 0)) HEAP32[$wk$0 >> 2] = $11;
       $k$0 = $k$0 + 1 | 0;
       $wk$0 = $wk$0 + 4 | 0;
      }
     } else {
      HEAP16[$pnt2$3 >> 1] = $10;
      if (($10 | 0) < ($11 | 0)) {
       $k$1 = 0;
       $wk$1 = $arraydecay;
       while (1) {
        if (($k$1 | 0) >= ($wk_max$1 | 0)) {
         $14 = $10;
         break L35;
        }
        if ((HEAP32[$wk$1 >> 2] | 0) == ($11 | 0)) HEAP32[$wk$1 >> 2] = $10;
        $k$1 = $k$1 + 1 | 0;
        $wk$1 = $wk$1 + 4 | 0;
       }
      } else $14 = $10;
     } while (0);
     $15 = ($14 << 16 >> 16) * 7 | 0;
     $arrayidx130 = $labelInfo + 1310736 + ($15 + -7 << 2) | 0;
     HEAP32[$arrayidx130 >> 2] = (HEAP32[$arrayidx130 >> 2] | 0) + 1;
     $arrayidx133 = $labelInfo + 1310736 + ($15 + -6 << 2) | 0;
     HEAP32[$arrayidx133 >> 2] = (HEAP32[$arrayidx133 >> 2] | 0) + $i$2;
     $arrayidx136 = $labelInfo + 1310736 + ($15 + -5 << 2) | 0;
     HEAP32[$arrayidx136 >> 2] = (HEAP32[$arrayidx136 >> 2] | 0) + $j$0;
     HEAP32[$labelInfo + 1310736 + ($15 + -1 << 2) >> 2] = $j$0;
     $wk_max$3 = $wk_max$1;
     break;
    }
    $19 = HEAP16[$add$ptr141 >> 1] | 0;
    if ($19 << 16 >> 16 <= 0) {
     HEAP16[$pnt2$3 >> 1] = $8;
     $mul209 = $sub82 * 7 | 0;
     $arrayidx211 = $labelInfo + 1310736 + ($mul209 << 2) | 0;
     HEAP32[$arrayidx211 >> 2] = (HEAP32[$arrayidx211 >> 2] | 0) + 1;
     $arrayidx214 = $labelInfo + 1310736 + ($mul209 + 1 << 2) | 0;
     HEAP32[$arrayidx214 >> 2] = (HEAP32[$arrayidx214 >> 2] | 0) + $i$2;
     $arrayidx217 = $labelInfo + 1310736 + ($mul209 + 2 << 2) | 0;
     HEAP32[$arrayidx217 >> 2] = (HEAP32[$arrayidx217 >> 2] | 0) + $j$0;
     $arrayidx220 = $labelInfo + 1310736 + ($mul209 + 3 << 2) | 0;
     if ((HEAP32[$arrayidx220 >> 2] | 0) > ($i$2 | 0)) HEAP32[$arrayidx220 >> 2] = $i$2;
     HEAP32[$labelInfo + 1310736 + ($mul209 + 6 << 2) >> 2] = $j$0;
     $wk_max$3 = $wk_max$1;
     break;
    }
    $20 = HEAP32[$arrayidx83 >> 2] | 0;
    $21 = HEAP32[$labelInfo + 1179664 + (($19 << 16 >> 16) + -1 << 2) >> 2] | 0;
    L58 : do if (($20 | 0) > ($21 | 0)) {
     HEAP16[$pnt2$3 >> 1] = $21;
     $k$2 = 0;
     $wk$2 = $arraydecay;
     while (1) {
      if (($k$2 | 0) >= ($wk_max$1 | 0)) {
       $24 = $21;
       break L58;
      }
      if ((HEAP32[$wk$2 >> 2] | 0) == ($20 | 0)) HEAP32[$wk$2 >> 2] = $21;
      $k$2 = $k$2 + 1 | 0;
      $wk$2 = $wk$2 + 4 | 0;
     }
    } else {
     HEAP16[$pnt2$3 >> 1] = $20;
     if (($20 | 0) < ($21 | 0)) {
      $k$3 = 0;
      $wk$3 = $arraydecay;
      while (1) {
       if (($k$3 | 0) >= ($wk_max$1 | 0)) {
        $24 = $20;
        break L58;
       }
       if ((HEAP32[$wk$3 >> 2] | 0) == ($21 | 0)) HEAP32[$wk$3 >> 2] = $20;
       $k$3 = $k$3 + 1 | 0;
       $wk$3 = $wk$3 + 4 | 0;
      }
     } else $24 = $20;
    } while (0);
    $25 = ($24 << 16 >> 16) * 7 | 0;
    $arrayidx197 = $labelInfo + 1310736 + ($25 + -7 << 2) | 0;
    HEAP32[$arrayidx197 >> 2] = (HEAP32[$arrayidx197 >> 2] | 0) + 1;
    $arrayidx200 = $labelInfo + 1310736 + ($25 + -6 << 2) | 0;
    HEAP32[$arrayidx200 >> 2] = (HEAP32[$arrayidx200 >> 2] | 0) + $i$2;
    $arrayidx203 = $labelInfo + 1310736 + ($25 + -5 << 2) | 0;
    HEAP32[$arrayidx203 >> 2] = (HEAP32[$arrayidx203 >> 2] | 0) + $j$0;
    $wk_max$3 = $wk_max$1;
   } else {
    HEAP16[$pnt2$3 >> 1] = 0;
    $wk_max$3 = $wk_max$1;
   } while (0);
   $i$2 = $i$2 + 1 | 0;
   $pnt$1 = $pnt$1 + 2 | 0;
   $pnt2$3 = $pnt2$3 + 2 | 0;
   $wk_max$1 = $wk_max$3;
  }
  $j$0 = $j$0 + 1 | 0;
  $pnt$0 = $pnt$1 + 4 | 0;
  $pnt2$2 = $pnt2$3 + 4 | 0;
  $wk_max$0 = $wk_max$1;
 }
 L77 : do if ((label | 0) == 50) {
  _arLog(3, 3256, $vararg_buffer);
  $retval$0 = -1;
 } else if ((label | 0) == 56) {
  $arrayidx331 = $labelInfo + 12 | 0;
  $i$3 = 1;
  $j$1 = 1;
  $wk$4 = $arraydecay;
  while (1) {
   if (($i$3 | 0) > ($wk_max$0 | 0)) break;
   $43 = HEAP32[$wk$4 >> 2] | 0;
   if (($43 | 0) == ($i$3 | 0)) {
    $cond = $j$1;
    $j$2 = $j$1 + 1 | 0;
   } else {
    $cond = HEAP32[$labelInfo + 1179664 + ($43 + -1 << 2) >> 2] | 0;
    $j$2 = $j$1;
   }
   HEAP32[$wk$4 >> 2] = $cond;
   $i$3 = $i$3 + 1 | 0;
   $j$1 = $j$2;
   $wk$4 = $wk$4 + 4 | 0;
  }
  $label_num329 = $labelInfo + 8 | 0;
  $sub352 = $j$1 + -1 | 0;
  HEAP32[$label_num329 >> 2] = $sub352;
  if (!$sub352) $retval$0 = 0; else {
   _memset($arrayidx331 | 0, 0, $sub352 << 2 | 0) | 0;
   _memset($labelInfo + 655376 | 0, 0, $sub352 << 4 | 0) | 0;
   $45 = $sub352;
   $i$4 = 0;
   while (1) {
    if (($i$4 | 0) >= ($45 | 0)) {
     $i$5 = 0;
     break;
    }
    $mul364 = $i$4 << 2;
    HEAP32[$labelInfo + 131084 + ($mul364 << 2) >> 2] = $xsize;
    HEAP32[$labelInfo + 131084 + (($mul364 | 1) << 2) >> 2] = 0;
    HEAP32[$labelInfo + 131084 + (($mul364 | 2) << 2) >> 2] = $ysize;
    HEAP32[$labelInfo + 131084 + (($mul364 | 3) << 2) >> 2] = 0;
    $45 = HEAP32[$label_num329 >> 2] | 0;
    $i$4 = $i$4 + 1 | 0;
   }
   while (1) {
    if (($i$5 | 0) >= ($wk_max$0 | 0)) {
     $i$6 = 0;
     break;
    }
    $sub384 = (HEAP32[$labelInfo + 1179664 + ($i$5 << 2) >> 2] | 0) + -1 | 0;
    $mul385 = $i$5 * 7 | 0;
    $arrayidx388 = $labelInfo + 12 + ($sub384 << 2) | 0;
    HEAP32[$arrayidx388 >> 2] = (HEAP32[$arrayidx388 >> 2] | 0) + (HEAP32[$labelInfo + 1310736 + ($mul385 << 2) >> 2] | 0);
    $mul394 = $sub384 << 1;
    $arrayidx396 = $labelInfo + 655376 + ($mul394 << 3) | 0;
    HEAPF64[$arrayidx396 >> 3] = +HEAPF64[$arrayidx396 >> 3] + +(HEAP32[$labelInfo + 1310736 + ($mul385 + 1 << 2) >> 2] | 0);
    $arrayidx404 = $labelInfo + 655376 + (($mul394 | 1) << 3) | 0;
    HEAPF64[$arrayidx404 >> 3] = +HEAPF64[$arrayidx404 >> 3] + +(HEAP32[$labelInfo + 1310736 + ($mul385 + 2 << 2) >> 2] | 0);
    $mul406 = $sub384 << 2;
    $arrayidx408 = $labelInfo + 131084 + ($mul406 << 2) | 0;
    $54 = HEAP32[$labelInfo + 1310736 + ($mul385 + 3 << 2) >> 2] | 0;
    if ((HEAP32[$arrayidx408 >> 2] | 0) > ($54 | 0)) HEAP32[$arrayidx408 >> 2] = $54;
    $arrayidx424 = $labelInfo + 131084 + (($mul406 | 1) << 2) | 0;
    $56 = HEAP32[$labelInfo + 1310736 + ($mul385 + 4 << 2) >> 2] | 0;
    if ((HEAP32[$arrayidx424 >> 2] | 0) < ($56 | 0)) HEAP32[$arrayidx424 >> 2] = $56;
    $arrayidx440 = $labelInfo + 131084 + (($mul406 | 2) << 2) | 0;
    $58 = HEAP32[$labelInfo + 1310736 + ($mul385 + 5 << 2) >> 2] | 0;
    if ((HEAP32[$arrayidx440 >> 2] | 0) > ($58 | 0)) HEAP32[$arrayidx440 >> 2] = $58;
    $arrayidx456 = $labelInfo + 131084 + (($mul406 | 3) << 2) | 0;
    $60 = HEAP32[$labelInfo + 1310736 + ($mul385 + 6 << 2) >> 2] | 0;
    if ((HEAP32[$arrayidx456 >> 2] | 0) < ($60 | 0)) HEAP32[$arrayidx456 >> 2] = $60;
    $i$5 = $i$5 + 1 | 0;
   }
   while (1) {
    if (($i$6 | 0) >= (HEAP32[$label_num329 >> 2] | 0)) {
     $retval$0 = 0;
     break L77;
    }
    $arrayidx477 = $labelInfo + 12 + ($i$6 << 2) | 0;
    $mul479 = $i$6 << 1;
    $arrayidx481 = $labelInfo + 655376 + ($mul479 << 3) | 0;
    HEAPF64[$arrayidx481 >> 3] = +HEAPF64[$arrayidx481 >> 3] / +(HEAP32[$arrayidx477 >> 2] | 0);
    $arrayidx486 = $labelInfo + 655376 + (($mul479 | 1) << 3) | 0;
    HEAPF64[$arrayidx486 >> 3] = +HEAPF64[$arrayidx486 >> 3] / +(HEAP32[$arrayidx477 >> 2] | 0);
    $i$6 = $i$6 + 1 | 0;
   }
  }
 } while (0);
 STACKTOP = sp;
 return $retval$0 | 0;
}

function _arLabelingSubDWIA3C($image, $xsize, $ysize, $labelingThresh, $labelInfo) {
 $image = $image | 0;
 $xsize = $xsize | 0;
 $ysize = $ysize | 0;
 $labelingThresh = $labelingThresh | 0;
 $labelInfo = $labelInfo | 0;
 var $$sink = 0, $0 = 0, $10 = 0, $11 = 0, $12 = 0, $15 = 0, $16 = 0, $20 = 0, $21 = 0, $22 = 0, $25 = 0, $26 = 0, $38 = 0, $39 = 0, $4 = 0, $44 = 0, $46 = 0, $5 = 0, $55 = 0, $57 = 0, $59 = 0, $61 = 0, $9 = 0, $add$ptr135 = 0, $add273 = 0, $add278$sink = 0, $arraydecay = 0, $arrayidx124 = 0, $arrayidx127 = 0, $arrayidx130 = 0, $arrayidx191 = 0, $arrayidx194 = 0, $arrayidx197 = 0, $arrayidx205 = 0, $arrayidx208 = 0, $arrayidx211 = 0, $arrayidx214 = 0, $arrayidx236 = 0, $arrayidx239 = 0, $arrayidx242 = 0, $arrayidx245 = 0, $arrayidx265 = 0, $arrayidx268 = 0, $arrayidx271 = 0, $arrayidx327 = 0, $arrayidx384 = 0, $arrayidx392 = 0, $arrayidx400 = 0, $arrayidx404 = 0, $arrayidx420 = 0, $arrayidx436 = 0, $arrayidx45 = 0, $arrayidx452 = 0, $arrayidx473 = 0, $arrayidx477 = 0, $arrayidx483 = 0, $arrayidx54 = 0, $arrayidx57 = 0, $arrayidx60 = 0, $arrayidx77 = 0, $cmp71 = 0, $cond = 0, $div = 0, $div1 = 0, $i$0 = 0, $i$1 = 0, $i$2 = 0, $i$3 = 0, $i$4 = 0, $i$5 = 0, $i$6 = 0, $inc282 = 0, $j$0 = 0, $j$1 = 0, $j$2 = 0, $k$0 = 0, $k$1 = 0, $k$2 = 0, $k$3 = 0, $label_num325 = 0, $mul = 0, $mul203 = 0, $mul234 = 0, $mul292 = 0, $mul318 = 0, $mul360 = 0, $mul381 = 0, $mul390 = 0, $mul402 = 0, $mul475 = 0, $pnt$0 = 0, $pnt$1 = 0, $pnt1$0 = 0, $pnt1$1 = 0, $pnt2$0 = 0, $pnt2$1 = 0, $pnt2$2 = 0, $pnt2$3 = 0, $retval$0 = 0, $sub = 0, $sub348 = 0, $sub380 = 0, $sub44 = 0, $sub76 = 0, $sub80 = 0, $sub9 = 0, $vararg_buffer = 0, $wk$0 = 0, $wk$1 = 0, $wk$2 = 0, $wk$3 = 0, $wk$4 = 0, $wk_max$0 = 0, $wk_max$1 = 0, $wk_max$2 = 0, $wk_max$3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $vararg_buffer = sp;
 $div = ($xsize | 0) / 2 | 0;
 $div1 = ($ysize | 0) / 2 | 0;
 $0 = HEAP32[$labelInfo >> 2] | 0;
 $sub = $div1 + -1 | 0;
 $i$0 = 0;
 $pnt1$0 = $0;
 $pnt2$0 = $0 + ((Math_imul($sub, $div) | 0) << 1) | 0;
 while (1) {
  if (($i$0 | 0) >= ($div | 0)) break;
  HEAP16[$pnt2$0 >> 1] = 0;
  HEAP16[$pnt1$0 >> 1] = 0;
  $i$0 = $i$0 + 1 | 0;
  $pnt1$0 = $pnt1$0 + 2 | 0;
  $pnt2$0 = $pnt2$0 + 2 | 0;
 }
 $mul = $labelingThresh * 3 | 0;
 $sub9 = $div + -1 | 0;
 $i$1 = 0;
 $pnt1$1 = $0;
 $pnt2$1 = $0 + ($sub9 << 1) | 0;
 while (1) {
  if (($i$1 | 0) >= ($div1 | 0)) break;
  HEAP16[$pnt2$1 >> 1] = 0;
  HEAP16[$pnt1$1 >> 1] = 0;
  $i$1 = $i$1 + 1 | 0;
  $pnt1$1 = $pnt1$1 + ($div << 1) | 0;
  $pnt2$1 = $pnt2$1 + ($div << 1) | 0;
 }
 $arraydecay = $labelInfo + 1179664 | 0;
 $sub44 = 0 - $div | 0;
 $mul318 = $xsize << 2;
 $j$0 = 1;
 $pnt$0 = $image + (($xsize << 3) + 8) | 0;
 $pnt2$2 = $0 + ($div + 1 << 1) | 0;
 $wk_max$0 = 0;
 L9 : while (1) {
  if (($j$0 | 0) < ($sub | 0)) {
   $i$2 = 1;
   $pnt$1 = $pnt$0;
   $pnt2$3 = $pnt2$2;
   $wk_max$1 = $wk_max$0;
  } else {
   label = 56;
   break;
  }
  while (1) {
   if (($i$2 | 0) >= ($sub9 | 0)) break;
   do if (((HEAPU8[$pnt$1 + 2 >> 0] | 0) + (HEAPU8[$pnt$1 + 1 >> 0] | 0) + (HEAPU8[$pnt$1 + 3 >> 0] | 0) | 0) > ($mul | 0)) {
    $arrayidx45 = $pnt2$3 + ($sub44 << 1) | 0;
    $4 = HEAP16[$arrayidx45 >> 1] | 0;
    if ($4 << 16 >> 16 > 0) {
     HEAP16[$pnt2$3 >> 1] = $4;
     $5 = ($4 << 16 >> 16) * 7 | 0;
     $arrayidx54 = $labelInfo + 1310736 + ($5 + -7 << 2) | 0;
     HEAP32[$arrayidx54 >> 2] = (HEAP32[$arrayidx54 >> 2] | 0) + 1;
     $arrayidx57 = $labelInfo + 1310736 + ($5 + -6 << 2) | 0;
     HEAP32[$arrayidx57 >> 2] = (HEAP32[$arrayidx57 >> 2] | 0) + $i$2;
     $arrayidx60 = $labelInfo + 1310736 + ($5 + -5 << 2) | 0;
     HEAP32[$arrayidx60 >> 2] = (HEAP32[$arrayidx60 >> 2] | 0) + $j$0;
     HEAP32[$labelInfo + 1310736 + ($5 + -1 << 2) >> 2] = $j$0;
     $wk_max$3 = $wk_max$1;
     break;
    }
    $9 = HEAP16[$arrayidx45 + 2 >> 1] | 0;
    $10 = HEAP16[$arrayidx45 + -2 >> 1] | 0;
    $cmp71 = $10 << 16 >> 16 > 0;
    $sub80 = ($10 << 16 >> 16) + -1 | 0;
    $add$ptr135 = $pnt2$3 + -2 | 0;
    if ($9 << 16 >> 16 <= 0) {
     if ($cmp71) {
      HEAP16[$pnt2$3 >> 1] = $10;
      $mul234 = $sub80 * 7 | 0;
      $arrayidx236 = $labelInfo + 1310736 + ($mul234 << 2) | 0;
      HEAP32[$arrayidx236 >> 2] = (HEAP32[$arrayidx236 >> 2] | 0) + 1;
      $arrayidx239 = $labelInfo + 1310736 + ($mul234 + 1 << 2) | 0;
      HEAP32[$arrayidx239 >> 2] = (HEAP32[$arrayidx239 >> 2] | 0) + $i$2;
      $arrayidx242 = $labelInfo + 1310736 + ($mul234 + 2 << 2) | 0;
      HEAP32[$arrayidx242 >> 2] = (HEAP32[$arrayidx242 >> 2] | 0) + $j$0;
      $arrayidx245 = $labelInfo + 1310736 + ($mul234 + 4 << 2) | 0;
      if ((HEAP32[$arrayidx245 >> 2] | 0) < ($i$2 | 0)) HEAP32[$arrayidx245 >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($mul234 + 6 << 2) >> 2] = $j$0;
      $wk_max$3 = $wk_max$1;
      break;
     }
     $38 = HEAP16[$add$ptr135 >> 1] | 0;
     if ($38 << 16 >> 16 > 0) {
      HEAP16[$pnt2$3 >> 1] = $38;
      $39 = ($38 << 16 >> 16) * 7 | 0;
      $arrayidx265 = $labelInfo + 1310736 + ($39 + -7 << 2) | 0;
      HEAP32[$arrayidx265 >> 2] = (HEAP32[$arrayidx265 >> 2] | 0) + 1;
      $arrayidx268 = $labelInfo + 1310736 + ($39 + -6 << 2) | 0;
      HEAP32[$arrayidx268 >> 2] = (HEAP32[$arrayidx268 >> 2] | 0) + $i$2;
      $arrayidx271 = $labelInfo + 1310736 + ($39 + -5 << 2) | 0;
      HEAP32[$arrayidx271 >> 2] = (HEAP32[$arrayidx271 >> 2] | 0) + $j$0;
      $add273 = $39 + -3 | 0;
      if ((HEAP32[$labelInfo + 1310736 + ($add273 << 2) >> 2] | 0) < ($i$2 | 0)) {
       $$sink = $i$2;
       $add278$sink = $add273;
       $wk_max$2 = $wk_max$1;
      } else {
       $wk_max$3 = $wk_max$1;
       break;
      }
     } else {
      $inc282 = $wk_max$1 + 1 | 0;
      if (($wk_max$1 | 0) > 32767) {
       label = 50;
       break L9;
      }
      HEAP16[$pnt2$3 >> 1] = $inc282;
      HEAP32[$labelInfo + 1179664 + ($wk_max$1 << 2) >> 2] = $inc282 << 16 >> 16;
      $mul292 = $wk_max$1 * 7 | 0;
      HEAP32[$labelInfo + 1310736 + ($mul292 << 2) >> 2] = 1;
      HEAP32[$labelInfo + 1310736 + ($mul292 + 1 << 2) >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($mul292 + 2 << 2) >> 2] = $j$0;
      HEAP32[$labelInfo + 1310736 + ($mul292 + 3 << 2) >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($mul292 + 4 << 2) >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($mul292 + 5 << 2) >> 2] = $j$0;
      $$sink = $j$0;
      $add278$sink = $mul292 + 6 | 0;
      $wk_max$2 = $inc282;
     }
     HEAP32[$labelInfo + 1310736 + ($add278$sink << 2) >> 2] = $$sink;
     $wk_max$3 = $wk_max$2;
     break;
    }
    $sub76 = ($9 << 16 >> 16) + -1 | 0;
    $arrayidx77 = $labelInfo + 1179664 + ($sub76 << 2) | 0;
    if ($cmp71) {
     $11 = HEAP32[$arrayidx77 >> 2] | 0;
     $12 = HEAP32[$labelInfo + 1179664 + ($sub80 << 2) >> 2] | 0;
     L35 : do if (($11 | 0) > ($12 | 0)) {
      HEAP16[$pnt2$3 >> 1] = $12;
      $k$0 = 0;
      $wk$0 = $arraydecay;
      while (1) {
       if (($k$0 | 0) >= ($wk_max$1 | 0)) {
        $15 = $12;
        break L35;
       }
       if ((HEAP32[$wk$0 >> 2] | 0) == ($11 | 0)) HEAP32[$wk$0 >> 2] = $12;
       $k$0 = $k$0 + 1 | 0;
       $wk$0 = $wk$0 + 4 | 0;
      }
     } else {
      HEAP16[$pnt2$3 >> 1] = $11;
      if (($11 | 0) < ($12 | 0)) {
       $k$1 = 0;
       $wk$1 = $arraydecay;
       while (1) {
        if (($k$1 | 0) >= ($wk_max$1 | 0)) {
         $15 = $11;
         break L35;
        }
        if ((HEAP32[$wk$1 >> 2] | 0) == ($12 | 0)) HEAP32[$wk$1 >> 2] = $11;
        $k$1 = $k$1 + 1 | 0;
        $wk$1 = $wk$1 + 4 | 0;
       }
      } else $15 = $11;
     } while (0);
     $16 = ($15 << 16 >> 16) * 7 | 0;
     $arrayidx124 = $labelInfo + 1310736 + ($16 + -7 << 2) | 0;
     HEAP32[$arrayidx124 >> 2] = (HEAP32[$arrayidx124 >> 2] | 0) + 1;
     $arrayidx127 = $labelInfo + 1310736 + ($16 + -6 << 2) | 0;
     HEAP32[$arrayidx127 >> 2] = (HEAP32[$arrayidx127 >> 2] | 0) + $i$2;
     $arrayidx130 = $labelInfo + 1310736 + ($16 + -5 << 2) | 0;
     HEAP32[$arrayidx130 >> 2] = (HEAP32[$arrayidx130 >> 2] | 0) + $j$0;
     HEAP32[$labelInfo + 1310736 + ($16 + -1 << 2) >> 2] = $j$0;
     $wk_max$3 = $wk_max$1;
     break;
    }
    $20 = HEAP16[$add$ptr135 >> 1] | 0;
    if ($20 << 16 >> 16 <= 0) {
     HEAP16[$pnt2$3 >> 1] = $9;
     $mul203 = $sub76 * 7 | 0;
     $arrayidx205 = $labelInfo + 1310736 + ($mul203 << 2) | 0;
     HEAP32[$arrayidx205 >> 2] = (HEAP32[$arrayidx205 >> 2] | 0) + 1;
     $arrayidx208 = $labelInfo + 1310736 + ($mul203 + 1 << 2) | 0;
     HEAP32[$arrayidx208 >> 2] = (HEAP32[$arrayidx208 >> 2] | 0) + $i$2;
     $arrayidx211 = $labelInfo + 1310736 + ($mul203 + 2 << 2) | 0;
     HEAP32[$arrayidx211 >> 2] = (HEAP32[$arrayidx211 >> 2] | 0) + $j$0;
     $arrayidx214 = $labelInfo + 1310736 + ($mul203 + 3 << 2) | 0;
     if ((HEAP32[$arrayidx214 >> 2] | 0) > ($i$2 | 0)) HEAP32[$arrayidx214 >> 2] = $i$2;
     HEAP32[$labelInfo + 1310736 + ($mul203 + 6 << 2) >> 2] = $j$0;
     $wk_max$3 = $wk_max$1;
     break;
    }
    $21 = HEAP32[$arrayidx77 >> 2] | 0;
    $22 = HEAP32[$labelInfo + 1179664 + (($20 << 16 >> 16) + -1 << 2) >> 2] | 0;
    L58 : do if (($21 | 0) > ($22 | 0)) {
     HEAP16[$pnt2$3 >> 1] = $22;
     $k$2 = 0;
     $wk$2 = $arraydecay;
     while (1) {
      if (($k$2 | 0) >= ($wk_max$1 | 0)) {
       $25 = $22;
       break L58;
      }
      if ((HEAP32[$wk$2 >> 2] | 0) == ($21 | 0)) HEAP32[$wk$2 >> 2] = $22;
      $k$2 = $k$2 + 1 | 0;
      $wk$2 = $wk$2 + 4 | 0;
     }
    } else {
     HEAP16[$pnt2$3 >> 1] = $21;
     if (($21 | 0) < ($22 | 0)) {
      $k$3 = 0;
      $wk$3 = $arraydecay;
      while (1) {
       if (($k$3 | 0) >= ($wk_max$1 | 0)) {
        $25 = $21;
        break L58;
       }
       if ((HEAP32[$wk$3 >> 2] | 0) == ($22 | 0)) HEAP32[$wk$3 >> 2] = $21;
       $k$3 = $k$3 + 1 | 0;
       $wk$3 = $wk$3 + 4 | 0;
      }
     } else $25 = $21;
    } while (0);
    $26 = ($25 << 16 >> 16) * 7 | 0;
    $arrayidx191 = $labelInfo + 1310736 + ($26 + -7 << 2) | 0;
    HEAP32[$arrayidx191 >> 2] = (HEAP32[$arrayidx191 >> 2] | 0) + 1;
    $arrayidx194 = $labelInfo + 1310736 + ($26 + -6 << 2) | 0;
    HEAP32[$arrayidx194 >> 2] = (HEAP32[$arrayidx194 >> 2] | 0) + $i$2;
    $arrayidx197 = $labelInfo + 1310736 + ($26 + -5 << 2) | 0;
    HEAP32[$arrayidx197 >> 2] = (HEAP32[$arrayidx197 >> 2] | 0) + $j$0;
    $wk_max$3 = $wk_max$1;
   } else {
    HEAP16[$pnt2$3 >> 1] = 0;
    $wk_max$3 = $wk_max$1;
   } while (0);
   $i$2 = $i$2 + 1 | 0;
   $pnt$1 = $pnt$1 + 8 | 0;
   $pnt2$3 = $pnt2$3 + 2 | 0;
   $wk_max$1 = $wk_max$3;
  }
  $j$0 = $j$0 + 1 | 0;
  $pnt$0 = $pnt$1 + $mul318 + 16 | 0;
  $pnt2$2 = $pnt2$3 + 4 | 0;
  $wk_max$0 = $wk_max$1;
 }
 L77 : do if ((label | 0) == 50) {
  _arLog(3, 3256, $vararg_buffer);
  $retval$0 = -1;
 } else if ((label | 0) == 56) {
  $arrayidx327 = $labelInfo + 12 | 0;
  $i$3 = 1;
  $j$1 = 1;
  $wk$4 = $arraydecay;
  while (1) {
   if (($i$3 | 0) > ($wk_max$0 | 0)) break;
   $44 = HEAP32[$wk$4 >> 2] | 0;
   if (($44 | 0) == ($i$3 | 0)) {
    $cond = $j$1;
    $j$2 = $j$1 + 1 | 0;
   } else {
    $cond = HEAP32[$labelInfo + 1179664 + ($44 + -1 << 2) >> 2] | 0;
    $j$2 = $j$1;
   }
   HEAP32[$wk$4 >> 2] = $cond;
   $i$3 = $i$3 + 1 | 0;
   $j$1 = $j$2;
   $wk$4 = $wk$4 + 4 | 0;
  }
  $label_num325 = $labelInfo + 8 | 0;
  $sub348 = $j$1 + -1 | 0;
  HEAP32[$label_num325 >> 2] = $sub348;
  if (!$sub348) $retval$0 = 0; else {
   _memset($arrayidx327 | 0, 0, $sub348 << 2 | 0) | 0;
   _memset($labelInfo + 655376 | 0, 0, $sub348 << 4 | 0) | 0;
   $46 = $sub348;
   $i$4 = 0;
   while (1) {
    if (($i$4 | 0) >= ($46 | 0)) {
     $i$5 = 0;
     break;
    }
    $mul360 = $i$4 << 2;
    HEAP32[$labelInfo + 131084 + ($mul360 << 2) >> 2] = $div;
    HEAP32[$labelInfo + 131084 + (($mul360 | 1) << 2) >> 2] = 0;
    HEAP32[$labelInfo + 131084 + (($mul360 | 2) << 2) >> 2] = $div1;
    HEAP32[$labelInfo + 131084 + (($mul360 | 3) << 2) >> 2] = 0;
    $46 = HEAP32[$label_num325 >> 2] | 0;
    $i$4 = $i$4 + 1 | 0;
   }
   while (1) {
    if (($i$5 | 0) >= ($wk_max$0 | 0)) {
     $i$6 = 0;
     break;
    }
    $sub380 = (HEAP32[$labelInfo + 1179664 + ($i$5 << 2) >> 2] | 0) + -1 | 0;
    $mul381 = $i$5 * 7 | 0;
    $arrayidx384 = $labelInfo + 12 + ($sub380 << 2) | 0;
    HEAP32[$arrayidx384 >> 2] = (HEAP32[$arrayidx384 >> 2] | 0) + (HEAP32[$labelInfo + 1310736 + ($mul381 << 2) >> 2] | 0);
    $mul390 = $sub380 << 1;
    $arrayidx392 = $labelInfo + 655376 + ($mul390 << 3) | 0;
    HEAPF64[$arrayidx392 >> 3] = +HEAPF64[$arrayidx392 >> 3] + +(HEAP32[$labelInfo + 1310736 + ($mul381 + 1 << 2) >> 2] | 0);
    $arrayidx400 = $labelInfo + 655376 + (($mul390 | 1) << 3) | 0;
    HEAPF64[$arrayidx400 >> 3] = +HEAPF64[$arrayidx400 >> 3] + +(HEAP32[$labelInfo + 1310736 + ($mul381 + 2 << 2) >> 2] | 0);
    $mul402 = $sub380 << 2;
    $arrayidx404 = $labelInfo + 131084 + ($mul402 << 2) | 0;
    $55 = HEAP32[$labelInfo + 1310736 + ($mul381 + 3 << 2) >> 2] | 0;
    if ((HEAP32[$arrayidx404 >> 2] | 0) > ($55 | 0)) HEAP32[$arrayidx404 >> 2] = $55;
    $arrayidx420 = $labelInfo + 131084 + (($mul402 | 1) << 2) | 0;
    $57 = HEAP32[$labelInfo + 1310736 + ($mul381 + 4 << 2) >> 2] | 0;
    if ((HEAP32[$arrayidx420 >> 2] | 0) < ($57 | 0)) HEAP32[$arrayidx420 >> 2] = $57;
    $arrayidx436 = $labelInfo + 131084 + (($mul402 | 2) << 2) | 0;
    $59 = HEAP32[$labelInfo + 1310736 + ($mul381 + 5 << 2) >> 2] | 0;
    if ((HEAP32[$arrayidx436 >> 2] | 0) > ($59 | 0)) HEAP32[$arrayidx436 >> 2] = $59;
    $arrayidx452 = $labelInfo + 131084 + (($mul402 | 3) << 2) | 0;
    $61 = HEAP32[$labelInfo + 1310736 + ($mul381 + 6 << 2) >> 2] | 0;
    if ((HEAP32[$arrayidx452 >> 2] | 0) < ($61 | 0)) HEAP32[$arrayidx452 >> 2] = $61;
    $i$5 = $i$5 + 1 | 0;
   }
   while (1) {
    if (($i$6 | 0) >= (HEAP32[$label_num325 >> 2] | 0)) {
     $retval$0 = 0;
     break L77;
    }
    $arrayidx473 = $labelInfo + 12 + ($i$6 << 2) | 0;
    $mul475 = $i$6 << 1;
    $arrayidx477 = $labelInfo + 655376 + ($mul475 << 3) | 0;
    HEAPF64[$arrayidx477 >> 3] = +HEAPF64[$arrayidx477 >> 3] / +(HEAP32[$arrayidx473 >> 2] | 0);
    $arrayidx483 = $labelInfo + 655376 + (($mul475 | 1) << 3) | 0;
    HEAPF64[$arrayidx483 >> 3] = +HEAPF64[$arrayidx483 >> 3] / +(HEAP32[$arrayidx473 >> 2] | 0);
    $i$6 = $i$6 + 1 | 0;
   }
  }
 } while (0);
 STACKTOP = sp;
 return $retval$0 | 0;
}

function _arLabelingSubDBR3C565($image, $xsize, $ysize, $labelingThresh, $labelInfo) {
 $image = $image | 0;
 $xsize = $xsize | 0;
 $ysize = $ysize | 0;
 $labelingThresh = $labelingThresh | 0;
 $labelInfo = $labelInfo | 0;
 var $$sink = 0, $0 = 0, $10 = 0, $11 = 0, $14 = 0, $15 = 0, $19 = 0, $20 = 0, $21 = 0, $24 = 0, $25 = 0, $3 = 0, $37 = 0, $38 = 0, $4 = 0, $43 = 0, $45 = 0, $54 = 0, $56 = 0, $58 = 0, $60 = 0, $8 = 0, $9 = 0, $add = 0, $add$ptr141 = 0, $add279 = 0, $add284$sink = 0, $arraydecay = 0, $arrayidx130 = 0, $arrayidx133 = 0, $arrayidx136 = 0, $arrayidx197 = 0, $arrayidx200 = 0, $arrayidx203 = 0, $arrayidx211 = 0, $arrayidx214 = 0, $arrayidx217 = 0, $arrayidx220 = 0, $arrayidx242 = 0, $arrayidx245 = 0, $arrayidx248 = 0, $arrayidx251 = 0, $arrayidx271 = 0, $arrayidx274 = 0, $arrayidx277 = 0, $arrayidx331 = 0, $arrayidx388 = 0, $arrayidx396 = 0, $arrayidx404 = 0, $arrayidx408 = 0, $arrayidx424 = 0, $arrayidx440 = 0, $arrayidx456 = 0, $arrayidx477 = 0, $arrayidx481 = 0, $arrayidx486 = 0, $arrayidx51 = 0, $arrayidx60 = 0, $arrayidx63 = 0, $arrayidx66 = 0, $arrayidx83 = 0, $cmp77 = 0, $cond = 0, $conv = 0, $conv39 = 0, $i$0 = 0, $i$1 = 0, $i$2 = 0, $i$3 = 0, $i$4 = 0, $i$5 = 0, $i$6 = 0, $inc288 = 0, $j$0 = 0, $j$1 = 0, $j$2 = 0, $k$0 = 0, $k$1 = 0, $k$2 = 0, $k$3 = 0, $label_num329 = 0, $mul = 0, $mul209 = 0, $mul240 = 0, $mul298 = 0, $mul364 = 0, $mul385 = 0, $mul394 = 0, $mul406 = 0, $mul479 = 0, $pnt$0 = 0, $pnt$1 = 0, $pnt1$0 = 0, $pnt1$1 = 0, $pnt2$0 = 0, $pnt2$1 = 0, $pnt2$2 = 0, $pnt2$3 = 0, $retval$0 = 0, $sub = 0, $sub352 = 0, $sub384 = 0, $sub50 = 0, $sub8 = 0, $sub82 = 0, $sub86 = 0, $vararg_buffer = 0, $wk$0 = 0, $wk$1 = 0, $wk$2 = 0, $wk$3 = 0, $wk$4 = 0, $wk_max$0 = 0, $wk_max$1 = 0, $wk_max$2 = 0, $wk_max$3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $vararg_buffer = sp;
 $0 = HEAP32[$labelInfo >> 2] | 0;
 $sub = $ysize + -1 | 0;
 $i$0 = 0;
 $pnt1$0 = $0;
 $pnt2$0 = $0 + ((Math_imul($sub, $xsize) | 0) << 1) | 0;
 while (1) {
  if (($i$0 | 0) >= ($xsize | 0)) break;
  HEAP16[$pnt2$0 >> 1] = 0;
  HEAP16[$pnt1$0 >> 1] = 0;
  $i$0 = $i$0 + 1 | 0;
  $pnt1$0 = $pnt1$0 + 2 | 0;
  $pnt2$0 = $pnt2$0 + 2 | 0;
 }
 $mul = $labelingThresh * 3 | 0;
 $sub8 = $xsize + -1 | 0;
 $i$1 = 0;
 $pnt1$1 = $0;
 $pnt2$1 = $0 + ($sub8 << 1) | 0;
 while (1) {
  if (($i$1 | 0) >= ($ysize | 0)) break;
  HEAP16[$pnt2$1 >> 1] = 0;
  HEAP16[$pnt1$1 >> 1] = 0;
  $i$1 = $i$1 + 1 | 0;
  $pnt1$1 = $pnt1$1 + ($xsize << 1) | 0;
  $pnt2$1 = $pnt2$1 + ($xsize << 1) | 0;
 }
 $arraydecay = $labelInfo + 1179664 | 0;
 $add = $xsize + 1 | 0;
 $sub50 = 0 - $xsize | 0;
 $j$0 = 1;
 $pnt$0 = $image + ($add << 1) | 0;
 $pnt2$2 = $0 + ($add << 1) | 0;
 $wk_max$0 = 0;
 L9 : while (1) {
  if (($j$0 | 0) < ($sub | 0)) {
   $i$2 = 1;
   $pnt$1 = $pnt$0;
   $pnt2$3 = $pnt2$2;
   $wk_max$1 = $wk_max$0;
  } else {
   label = 56;
   break;
  }
  while (1) {
   if (($i$2 | 0) >= ($sub8 | 0)) break;
   $conv = HEAPU8[$pnt$1 >> 0] | 0;
   $conv39 = HEAPU8[$pnt$1 + 1 >> 0] | 0;
   do if ((($conv & 248) + 10 + ($conv << 5 & 224) + ($conv39 >>> 3 & 28) + ($conv39 << 3 & 248) | 0) > ($mul | 0)) {
    HEAP16[$pnt2$3 >> 1] = 0;
    $wk_max$3 = $wk_max$1;
   } else {
    $arrayidx51 = $pnt2$3 + ($sub50 << 1) | 0;
    $3 = HEAP16[$arrayidx51 >> 1] | 0;
    if ($3 << 16 >> 16 > 0) {
     HEAP16[$pnt2$3 >> 1] = $3;
     $4 = ($3 << 16 >> 16) * 7 | 0;
     $arrayidx60 = $labelInfo + 1310736 + ($4 + -7 << 2) | 0;
     HEAP32[$arrayidx60 >> 2] = (HEAP32[$arrayidx60 >> 2] | 0) + 1;
     $arrayidx63 = $labelInfo + 1310736 + ($4 + -6 << 2) | 0;
     HEAP32[$arrayidx63 >> 2] = (HEAP32[$arrayidx63 >> 2] | 0) + $i$2;
     $arrayidx66 = $labelInfo + 1310736 + ($4 + -5 << 2) | 0;
     HEAP32[$arrayidx66 >> 2] = (HEAP32[$arrayidx66 >> 2] | 0) + $j$0;
     HEAP32[$labelInfo + 1310736 + ($4 + -1 << 2) >> 2] = $j$0;
     $wk_max$3 = $wk_max$1;
     break;
    }
    $8 = HEAP16[$arrayidx51 + 2 >> 1] | 0;
    $9 = HEAP16[$arrayidx51 + -2 >> 1] | 0;
    $cmp77 = $9 << 16 >> 16 > 0;
    $add$ptr141 = $pnt2$3 + -2 | 0;
    $sub86 = ($9 << 16 >> 16) + -1 | 0;
    if ($8 << 16 >> 16 <= 0) {
     if ($cmp77) {
      HEAP16[$pnt2$3 >> 1] = $9;
      $mul240 = $sub86 * 7 | 0;
      $arrayidx242 = $labelInfo + 1310736 + ($mul240 << 2) | 0;
      HEAP32[$arrayidx242 >> 2] = (HEAP32[$arrayidx242 >> 2] | 0) + 1;
      $arrayidx245 = $labelInfo + 1310736 + ($mul240 + 1 << 2) | 0;
      HEAP32[$arrayidx245 >> 2] = (HEAP32[$arrayidx245 >> 2] | 0) + $i$2;
      $arrayidx248 = $labelInfo + 1310736 + ($mul240 + 2 << 2) | 0;
      HEAP32[$arrayidx248 >> 2] = (HEAP32[$arrayidx248 >> 2] | 0) + $j$0;
      $arrayidx251 = $labelInfo + 1310736 + ($mul240 + 4 << 2) | 0;
      if ((HEAP32[$arrayidx251 >> 2] | 0) < ($i$2 | 0)) HEAP32[$arrayidx251 >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($mul240 + 6 << 2) >> 2] = $j$0;
      $wk_max$3 = $wk_max$1;
      break;
     }
     $37 = HEAP16[$add$ptr141 >> 1] | 0;
     if ($37 << 16 >> 16 > 0) {
      HEAP16[$pnt2$3 >> 1] = $37;
      $38 = ($37 << 16 >> 16) * 7 | 0;
      $arrayidx271 = $labelInfo + 1310736 + ($38 + -7 << 2) | 0;
      HEAP32[$arrayidx271 >> 2] = (HEAP32[$arrayidx271 >> 2] | 0) + 1;
      $arrayidx274 = $labelInfo + 1310736 + ($38 + -6 << 2) | 0;
      HEAP32[$arrayidx274 >> 2] = (HEAP32[$arrayidx274 >> 2] | 0) + $i$2;
      $arrayidx277 = $labelInfo + 1310736 + ($38 + -5 << 2) | 0;
      HEAP32[$arrayidx277 >> 2] = (HEAP32[$arrayidx277 >> 2] | 0) + $j$0;
      $add279 = $38 + -3 | 0;
      if ((HEAP32[$labelInfo + 1310736 + ($add279 << 2) >> 2] | 0) < ($i$2 | 0)) {
       $$sink = $i$2;
       $add284$sink = $add279;
       $wk_max$2 = $wk_max$1;
      } else {
       $wk_max$3 = $wk_max$1;
       break;
      }
     } else {
      $inc288 = $wk_max$1 + 1 | 0;
      if (($wk_max$1 | 0) > 32767) {
       label = 50;
       break L9;
      }
      HEAP16[$pnt2$3 >> 1] = $inc288;
      HEAP32[$labelInfo + 1179664 + ($wk_max$1 << 2) >> 2] = $inc288 << 16 >> 16;
      $mul298 = $wk_max$1 * 7 | 0;
      HEAP32[$labelInfo + 1310736 + ($mul298 << 2) >> 2] = 1;
      HEAP32[$labelInfo + 1310736 + ($mul298 + 1 << 2) >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($mul298 + 2 << 2) >> 2] = $j$0;
      HEAP32[$labelInfo + 1310736 + ($mul298 + 3 << 2) >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($mul298 + 4 << 2) >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($mul298 + 5 << 2) >> 2] = $j$0;
      $$sink = $j$0;
      $add284$sink = $mul298 + 6 | 0;
      $wk_max$2 = $inc288;
     }
     HEAP32[$labelInfo + 1310736 + ($add284$sink << 2) >> 2] = $$sink;
     $wk_max$3 = $wk_max$2;
     break;
    }
    $sub82 = ($8 << 16 >> 16) + -1 | 0;
    $arrayidx83 = $labelInfo + 1179664 + ($sub82 << 2) | 0;
    if ($cmp77) {
     $10 = HEAP32[$arrayidx83 >> 2] | 0;
     $11 = HEAP32[$labelInfo + 1179664 + ($sub86 << 2) >> 2] | 0;
     L36 : do if (($10 | 0) > ($11 | 0)) {
      HEAP16[$pnt2$3 >> 1] = $11;
      $k$0 = 0;
      $wk$0 = $arraydecay;
      while (1) {
       if (($k$0 | 0) >= ($wk_max$1 | 0)) {
        $14 = $11;
        break L36;
       }
       if ((HEAP32[$wk$0 >> 2] | 0) == ($10 | 0)) HEAP32[$wk$0 >> 2] = $11;
       $k$0 = $k$0 + 1 | 0;
       $wk$0 = $wk$0 + 4 | 0;
      }
     } else {
      HEAP16[$pnt2$3 >> 1] = $10;
      if (($10 | 0) < ($11 | 0)) {
       $k$1 = 0;
       $wk$1 = $arraydecay;
       while (1) {
        if (($k$1 | 0) >= ($wk_max$1 | 0)) {
         $14 = $10;
         break L36;
        }
        if ((HEAP32[$wk$1 >> 2] | 0) == ($11 | 0)) HEAP32[$wk$1 >> 2] = $10;
        $k$1 = $k$1 + 1 | 0;
        $wk$1 = $wk$1 + 4 | 0;
       }
      } else $14 = $10;
     } while (0);
     $15 = ($14 << 16 >> 16) * 7 | 0;
     $arrayidx130 = $labelInfo + 1310736 + ($15 + -7 << 2) | 0;
     HEAP32[$arrayidx130 >> 2] = (HEAP32[$arrayidx130 >> 2] | 0) + 1;
     $arrayidx133 = $labelInfo + 1310736 + ($15 + -6 << 2) | 0;
     HEAP32[$arrayidx133 >> 2] = (HEAP32[$arrayidx133 >> 2] | 0) + $i$2;
     $arrayidx136 = $labelInfo + 1310736 + ($15 + -5 << 2) | 0;
     HEAP32[$arrayidx136 >> 2] = (HEAP32[$arrayidx136 >> 2] | 0) + $j$0;
     HEAP32[$labelInfo + 1310736 + ($15 + -1 << 2) >> 2] = $j$0;
     $wk_max$3 = $wk_max$1;
     break;
    }
    $19 = HEAP16[$add$ptr141 >> 1] | 0;
    if ($19 << 16 >> 16 <= 0) {
     HEAP16[$pnt2$3 >> 1] = $8;
     $mul209 = $sub82 * 7 | 0;
     $arrayidx211 = $labelInfo + 1310736 + ($mul209 << 2) | 0;
     HEAP32[$arrayidx211 >> 2] = (HEAP32[$arrayidx211 >> 2] | 0) + 1;
     $arrayidx214 = $labelInfo + 1310736 + ($mul209 + 1 << 2) | 0;
     HEAP32[$arrayidx214 >> 2] = (HEAP32[$arrayidx214 >> 2] | 0) + $i$2;
     $arrayidx217 = $labelInfo + 1310736 + ($mul209 + 2 << 2) | 0;
     HEAP32[$arrayidx217 >> 2] = (HEAP32[$arrayidx217 >> 2] | 0) + $j$0;
     $arrayidx220 = $labelInfo + 1310736 + ($mul209 + 3 << 2) | 0;
     if ((HEAP32[$arrayidx220 >> 2] | 0) > ($i$2 | 0)) HEAP32[$arrayidx220 >> 2] = $i$2;
     HEAP32[$labelInfo + 1310736 + ($mul209 + 6 << 2) >> 2] = $j$0;
     $wk_max$3 = $wk_max$1;
     break;
    }
    $20 = HEAP32[$arrayidx83 >> 2] | 0;
    $21 = HEAP32[$labelInfo + 1179664 + (($19 << 16 >> 16) + -1 << 2) >> 2] | 0;
    L59 : do if (($20 | 0) > ($21 | 0)) {
     HEAP16[$pnt2$3 >> 1] = $21;
     $k$2 = 0;
     $wk$2 = $arraydecay;
     while (1) {
      if (($k$2 | 0) >= ($wk_max$1 | 0)) {
       $24 = $21;
       break L59;
      }
      if ((HEAP32[$wk$2 >> 2] | 0) == ($20 | 0)) HEAP32[$wk$2 >> 2] = $21;
      $k$2 = $k$2 + 1 | 0;
      $wk$2 = $wk$2 + 4 | 0;
     }
    } else {
     HEAP16[$pnt2$3 >> 1] = $20;
     if (($20 | 0) < ($21 | 0)) {
      $k$3 = 0;
      $wk$3 = $arraydecay;
      while (1) {
       if (($k$3 | 0) >= ($wk_max$1 | 0)) {
        $24 = $20;
        break L59;
       }
       if ((HEAP32[$wk$3 >> 2] | 0) == ($21 | 0)) HEAP32[$wk$3 >> 2] = $20;
       $k$3 = $k$3 + 1 | 0;
       $wk$3 = $wk$3 + 4 | 0;
      }
     } else $24 = $20;
    } while (0);
    $25 = ($24 << 16 >> 16) * 7 | 0;
    $arrayidx197 = $labelInfo + 1310736 + ($25 + -7 << 2) | 0;
    HEAP32[$arrayidx197 >> 2] = (HEAP32[$arrayidx197 >> 2] | 0) + 1;
    $arrayidx200 = $labelInfo + 1310736 + ($25 + -6 << 2) | 0;
    HEAP32[$arrayidx200 >> 2] = (HEAP32[$arrayidx200 >> 2] | 0) + $i$2;
    $arrayidx203 = $labelInfo + 1310736 + ($25 + -5 << 2) | 0;
    HEAP32[$arrayidx203 >> 2] = (HEAP32[$arrayidx203 >> 2] | 0) + $j$0;
    $wk_max$3 = $wk_max$1;
   } while (0);
   $i$2 = $i$2 + 1 | 0;
   $pnt$1 = $pnt$1 + 2 | 0;
   $pnt2$3 = $pnt2$3 + 2 | 0;
   $wk_max$1 = $wk_max$3;
  }
  $j$0 = $j$0 + 1 | 0;
  $pnt$0 = $pnt$1 + 4 | 0;
  $pnt2$2 = $pnt2$3 + 4 | 0;
  $wk_max$0 = $wk_max$1;
 }
 L77 : do if ((label | 0) == 50) {
  _arLog(3, 3256, $vararg_buffer);
  $retval$0 = -1;
 } else if ((label | 0) == 56) {
  $arrayidx331 = $labelInfo + 12 | 0;
  $i$3 = 1;
  $j$1 = 1;
  $wk$4 = $arraydecay;
  while (1) {
   if (($i$3 | 0) > ($wk_max$0 | 0)) break;
   $43 = HEAP32[$wk$4 >> 2] | 0;
   if (($43 | 0) == ($i$3 | 0)) {
    $cond = $j$1;
    $j$2 = $j$1 + 1 | 0;
   } else {
    $cond = HEAP32[$labelInfo + 1179664 + ($43 + -1 << 2) >> 2] | 0;
    $j$2 = $j$1;
   }
   HEAP32[$wk$4 >> 2] = $cond;
   $i$3 = $i$3 + 1 | 0;
   $j$1 = $j$2;
   $wk$4 = $wk$4 + 4 | 0;
  }
  $label_num329 = $labelInfo + 8 | 0;
  $sub352 = $j$1 + -1 | 0;
  HEAP32[$label_num329 >> 2] = $sub352;
  if (!$sub352) $retval$0 = 0; else {
   _memset($arrayidx331 | 0, 0, $sub352 << 2 | 0) | 0;
   _memset($labelInfo + 655376 | 0, 0, $sub352 << 4 | 0) | 0;
   $45 = $sub352;
   $i$4 = 0;
   while (1) {
    if (($i$4 | 0) >= ($45 | 0)) {
     $i$5 = 0;
     break;
    }
    $mul364 = $i$4 << 2;
    HEAP32[$labelInfo + 131084 + ($mul364 << 2) >> 2] = $xsize;
    HEAP32[$labelInfo + 131084 + (($mul364 | 1) << 2) >> 2] = 0;
    HEAP32[$labelInfo + 131084 + (($mul364 | 2) << 2) >> 2] = $ysize;
    HEAP32[$labelInfo + 131084 + (($mul364 | 3) << 2) >> 2] = 0;
    $45 = HEAP32[$label_num329 >> 2] | 0;
    $i$4 = $i$4 + 1 | 0;
   }
   while (1) {
    if (($i$5 | 0) >= ($wk_max$0 | 0)) {
     $i$6 = 0;
     break;
    }
    $sub384 = (HEAP32[$labelInfo + 1179664 + ($i$5 << 2) >> 2] | 0) + -1 | 0;
    $mul385 = $i$5 * 7 | 0;
    $arrayidx388 = $labelInfo + 12 + ($sub384 << 2) | 0;
    HEAP32[$arrayidx388 >> 2] = (HEAP32[$arrayidx388 >> 2] | 0) + (HEAP32[$labelInfo + 1310736 + ($mul385 << 2) >> 2] | 0);
    $mul394 = $sub384 << 1;
    $arrayidx396 = $labelInfo + 655376 + ($mul394 << 3) | 0;
    HEAPF64[$arrayidx396 >> 3] = +HEAPF64[$arrayidx396 >> 3] + +(HEAP32[$labelInfo + 1310736 + ($mul385 + 1 << 2) >> 2] | 0);
    $arrayidx404 = $labelInfo + 655376 + (($mul394 | 1) << 3) | 0;
    HEAPF64[$arrayidx404 >> 3] = +HEAPF64[$arrayidx404 >> 3] + +(HEAP32[$labelInfo + 1310736 + ($mul385 + 2 << 2) >> 2] | 0);
    $mul406 = $sub384 << 2;
    $arrayidx408 = $labelInfo + 131084 + ($mul406 << 2) | 0;
    $54 = HEAP32[$labelInfo + 1310736 + ($mul385 + 3 << 2) >> 2] | 0;
    if ((HEAP32[$arrayidx408 >> 2] | 0) > ($54 | 0)) HEAP32[$arrayidx408 >> 2] = $54;
    $arrayidx424 = $labelInfo + 131084 + (($mul406 | 1) << 2) | 0;
    $56 = HEAP32[$labelInfo + 1310736 + ($mul385 + 4 << 2) >> 2] | 0;
    if ((HEAP32[$arrayidx424 >> 2] | 0) < ($56 | 0)) HEAP32[$arrayidx424 >> 2] = $56;
    $arrayidx440 = $labelInfo + 131084 + (($mul406 | 2) << 2) | 0;
    $58 = HEAP32[$labelInfo + 1310736 + ($mul385 + 5 << 2) >> 2] | 0;
    if ((HEAP32[$arrayidx440 >> 2] | 0) > ($58 | 0)) HEAP32[$arrayidx440 >> 2] = $58;
    $arrayidx456 = $labelInfo + 131084 + (($mul406 | 3) << 2) | 0;
    $60 = HEAP32[$labelInfo + 1310736 + ($mul385 + 6 << 2) >> 2] | 0;
    if ((HEAP32[$arrayidx456 >> 2] | 0) < ($60 | 0)) HEAP32[$arrayidx456 >> 2] = $60;
    $i$5 = $i$5 + 1 | 0;
   }
   while (1) {
    if (($i$6 | 0) >= (HEAP32[$label_num329 >> 2] | 0)) {
     $retval$0 = 0;
     break L77;
    }
    $arrayidx477 = $labelInfo + 12 + ($i$6 << 2) | 0;
    $mul479 = $i$6 << 1;
    $arrayidx481 = $labelInfo + 655376 + ($mul479 << 3) | 0;
    HEAPF64[$arrayidx481 >> 3] = +HEAPF64[$arrayidx481 >> 3] / +(HEAP32[$arrayidx477 >> 2] | 0);
    $arrayidx486 = $labelInfo + 655376 + (($mul479 | 1) << 3) | 0;
    HEAPF64[$arrayidx486 >> 3] = +HEAPF64[$arrayidx486 >> 3] / +(HEAP32[$arrayidx477 >> 2] | 0);
    $i$6 = $i$6 + 1 | 0;
   }
  }
 } while (0);
 STACKTOP = sp;
 return $retval$0 | 0;
}

function _arLabelingSubDBIA3C($image, $xsize, $ysize, $labelingThresh, $labelInfo) {
 $image = $image | 0;
 $xsize = $xsize | 0;
 $ysize = $ysize | 0;
 $labelingThresh = $labelingThresh | 0;
 $labelInfo = $labelInfo | 0;
 var $$sink = 0, $0 = 0, $10 = 0, $11 = 0, $12 = 0, $15 = 0, $16 = 0, $20 = 0, $21 = 0, $22 = 0, $25 = 0, $26 = 0, $38 = 0, $39 = 0, $4 = 0, $44 = 0, $46 = 0, $5 = 0, $55 = 0, $57 = 0, $59 = 0, $61 = 0, $9 = 0, $add$ptr135 = 0, $add273 = 0, $add278$sink = 0, $arraydecay = 0, $arrayidx124 = 0, $arrayidx127 = 0, $arrayidx130 = 0, $arrayidx191 = 0, $arrayidx194 = 0, $arrayidx197 = 0, $arrayidx205 = 0, $arrayidx208 = 0, $arrayidx211 = 0, $arrayidx214 = 0, $arrayidx236 = 0, $arrayidx239 = 0, $arrayidx242 = 0, $arrayidx245 = 0, $arrayidx265 = 0, $arrayidx268 = 0, $arrayidx271 = 0, $arrayidx327 = 0, $arrayidx384 = 0, $arrayidx392 = 0, $arrayidx400 = 0, $arrayidx404 = 0, $arrayidx420 = 0, $arrayidx436 = 0, $arrayidx45 = 0, $arrayidx452 = 0, $arrayidx473 = 0, $arrayidx477 = 0, $arrayidx483 = 0, $arrayidx54 = 0, $arrayidx57 = 0, $arrayidx60 = 0, $arrayidx77 = 0, $cmp71 = 0, $cond = 0, $div = 0, $div1 = 0, $i$0 = 0, $i$1 = 0, $i$2 = 0, $i$3 = 0, $i$4 = 0, $i$5 = 0, $i$6 = 0, $inc282 = 0, $j$0 = 0, $j$1 = 0, $j$2 = 0, $k$0 = 0, $k$1 = 0, $k$2 = 0, $k$3 = 0, $label_num325 = 0, $mul = 0, $mul203 = 0, $mul234 = 0, $mul292 = 0, $mul318 = 0, $mul360 = 0, $mul381 = 0, $mul390 = 0, $mul402 = 0, $mul475 = 0, $pnt$0 = 0, $pnt$1 = 0, $pnt1$0 = 0, $pnt1$1 = 0, $pnt2$0 = 0, $pnt2$1 = 0, $pnt2$2 = 0, $pnt2$3 = 0, $retval$0 = 0, $sub = 0, $sub348 = 0, $sub380 = 0, $sub44 = 0, $sub76 = 0, $sub80 = 0, $sub9 = 0, $vararg_buffer = 0, $wk$0 = 0, $wk$1 = 0, $wk$2 = 0, $wk$3 = 0, $wk$4 = 0, $wk_max$0 = 0, $wk_max$1 = 0, $wk_max$2 = 0, $wk_max$3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $vararg_buffer = sp;
 $div = ($xsize | 0) / 2 | 0;
 $div1 = ($ysize | 0) / 2 | 0;
 $0 = HEAP32[$labelInfo >> 2] | 0;
 $sub = $div1 + -1 | 0;
 $i$0 = 0;
 $pnt1$0 = $0;
 $pnt2$0 = $0 + ((Math_imul($sub, $div) | 0) << 1) | 0;
 while (1) {
  if (($i$0 | 0) >= ($div | 0)) break;
  HEAP16[$pnt2$0 >> 1] = 0;
  HEAP16[$pnt1$0 >> 1] = 0;
  $i$0 = $i$0 + 1 | 0;
  $pnt1$0 = $pnt1$0 + 2 | 0;
  $pnt2$0 = $pnt2$0 + 2 | 0;
 }
 $mul = $labelingThresh * 3 | 0;
 $sub9 = $div + -1 | 0;
 $i$1 = 0;
 $pnt1$1 = $0;
 $pnt2$1 = $0 + ($sub9 << 1) | 0;
 while (1) {
  if (($i$1 | 0) >= ($div1 | 0)) break;
  HEAP16[$pnt2$1 >> 1] = 0;
  HEAP16[$pnt1$1 >> 1] = 0;
  $i$1 = $i$1 + 1 | 0;
  $pnt1$1 = $pnt1$1 + ($div << 1) | 0;
  $pnt2$1 = $pnt2$1 + ($div << 1) | 0;
 }
 $arraydecay = $labelInfo + 1179664 | 0;
 $sub44 = 0 - $div | 0;
 $mul318 = $xsize << 2;
 $j$0 = 1;
 $pnt$0 = $image + (($xsize << 3) + 8) | 0;
 $pnt2$2 = $0 + ($div + 1 << 1) | 0;
 $wk_max$0 = 0;
 L9 : while (1) {
  if (($j$0 | 0) < ($sub | 0)) {
   $i$2 = 1;
   $pnt$1 = $pnt$0;
   $pnt2$3 = $pnt2$2;
   $wk_max$1 = $wk_max$0;
  } else {
   label = 56;
   break;
  }
  while (1) {
   if (($i$2 | 0) >= ($sub9 | 0)) break;
   do if (((HEAPU8[$pnt$1 + 2 >> 0] | 0) + (HEAPU8[$pnt$1 + 1 >> 0] | 0) + (HEAPU8[$pnt$1 + 3 >> 0] | 0) | 0) > ($mul | 0)) {
    HEAP16[$pnt2$3 >> 1] = 0;
    $wk_max$3 = $wk_max$1;
   } else {
    $arrayidx45 = $pnt2$3 + ($sub44 << 1) | 0;
    $4 = HEAP16[$arrayidx45 >> 1] | 0;
    if ($4 << 16 >> 16 > 0) {
     HEAP16[$pnt2$3 >> 1] = $4;
     $5 = ($4 << 16 >> 16) * 7 | 0;
     $arrayidx54 = $labelInfo + 1310736 + ($5 + -7 << 2) | 0;
     HEAP32[$arrayidx54 >> 2] = (HEAP32[$arrayidx54 >> 2] | 0) + 1;
     $arrayidx57 = $labelInfo + 1310736 + ($5 + -6 << 2) | 0;
     HEAP32[$arrayidx57 >> 2] = (HEAP32[$arrayidx57 >> 2] | 0) + $i$2;
     $arrayidx60 = $labelInfo + 1310736 + ($5 + -5 << 2) | 0;
     HEAP32[$arrayidx60 >> 2] = (HEAP32[$arrayidx60 >> 2] | 0) + $j$0;
     HEAP32[$labelInfo + 1310736 + ($5 + -1 << 2) >> 2] = $j$0;
     $wk_max$3 = $wk_max$1;
     break;
    }
    $9 = HEAP16[$arrayidx45 + 2 >> 1] | 0;
    $10 = HEAP16[$arrayidx45 + -2 >> 1] | 0;
    $cmp71 = $10 << 16 >> 16 > 0;
    $sub80 = ($10 << 16 >> 16) + -1 | 0;
    $add$ptr135 = $pnt2$3 + -2 | 0;
    if ($9 << 16 >> 16 <= 0) {
     if ($cmp71) {
      HEAP16[$pnt2$3 >> 1] = $10;
      $mul234 = $sub80 * 7 | 0;
      $arrayidx236 = $labelInfo + 1310736 + ($mul234 << 2) | 0;
      HEAP32[$arrayidx236 >> 2] = (HEAP32[$arrayidx236 >> 2] | 0) + 1;
      $arrayidx239 = $labelInfo + 1310736 + ($mul234 + 1 << 2) | 0;
      HEAP32[$arrayidx239 >> 2] = (HEAP32[$arrayidx239 >> 2] | 0) + $i$2;
      $arrayidx242 = $labelInfo + 1310736 + ($mul234 + 2 << 2) | 0;
      HEAP32[$arrayidx242 >> 2] = (HEAP32[$arrayidx242 >> 2] | 0) + $j$0;
      $arrayidx245 = $labelInfo + 1310736 + ($mul234 + 4 << 2) | 0;
      if ((HEAP32[$arrayidx245 >> 2] | 0) < ($i$2 | 0)) HEAP32[$arrayidx245 >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($mul234 + 6 << 2) >> 2] = $j$0;
      $wk_max$3 = $wk_max$1;
      break;
     }
     $38 = HEAP16[$add$ptr135 >> 1] | 0;
     if ($38 << 16 >> 16 > 0) {
      HEAP16[$pnt2$3 >> 1] = $38;
      $39 = ($38 << 16 >> 16) * 7 | 0;
      $arrayidx265 = $labelInfo + 1310736 + ($39 + -7 << 2) | 0;
      HEAP32[$arrayidx265 >> 2] = (HEAP32[$arrayidx265 >> 2] | 0) + 1;
      $arrayidx268 = $labelInfo + 1310736 + ($39 + -6 << 2) | 0;
      HEAP32[$arrayidx268 >> 2] = (HEAP32[$arrayidx268 >> 2] | 0) + $i$2;
      $arrayidx271 = $labelInfo + 1310736 + ($39 + -5 << 2) | 0;
      HEAP32[$arrayidx271 >> 2] = (HEAP32[$arrayidx271 >> 2] | 0) + $j$0;
      $add273 = $39 + -3 | 0;
      if ((HEAP32[$labelInfo + 1310736 + ($add273 << 2) >> 2] | 0) < ($i$2 | 0)) {
       $$sink = $i$2;
       $add278$sink = $add273;
       $wk_max$2 = $wk_max$1;
      } else {
       $wk_max$3 = $wk_max$1;
       break;
      }
     } else {
      $inc282 = $wk_max$1 + 1 | 0;
      if (($wk_max$1 | 0) > 32767) {
       label = 50;
       break L9;
      }
      HEAP16[$pnt2$3 >> 1] = $inc282;
      HEAP32[$labelInfo + 1179664 + ($wk_max$1 << 2) >> 2] = $inc282 << 16 >> 16;
      $mul292 = $wk_max$1 * 7 | 0;
      HEAP32[$labelInfo + 1310736 + ($mul292 << 2) >> 2] = 1;
      HEAP32[$labelInfo + 1310736 + ($mul292 + 1 << 2) >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($mul292 + 2 << 2) >> 2] = $j$0;
      HEAP32[$labelInfo + 1310736 + ($mul292 + 3 << 2) >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($mul292 + 4 << 2) >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($mul292 + 5 << 2) >> 2] = $j$0;
      $$sink = $j$0;
      $add278$sink = $mul292 + 6 | 0;
      $wk_max$2 = $inc282;
     }
     HEAP32[$labelInfo + 1310736 + ($add278$sink << 2) >> 2] = $$sink;
     $wk_max$3 = $wk_max$2;
     break;
    }
    $sub76 = ($9 << 16 >> 16) + -1 | 0;
    $arrayidx77 = $labelInfo + 1179664 + ($sub76 << 2) | 0;
    if ($cmp71) {
     $11 = HEAP32[$arrayidx77 >> 2] | 0;
     $12 = HEAP32[$labelInfo + 1179664 + ($sub80 << 2) >> 2] | 0;
     L36 : do if (($11 | 0) > ($12 | 0)) {
      HEAP16[$pnt2$3 >> 1] = $12;
      $k$0 = 0;
      $wk$0 = $arraydecay;
      while (1) {
       if (($k$0 | 0) >= ($wk_max$1 | 0)) {
        $15 = $12;
        break L36;
       }
       if ((HEAP32[$wk$0 >> 2] | 0) == ($11 | 0)) HEAP32[$wk$0 >> 2] = $12;
       $k$0 = $k$0 + 1 | 0;
       $wk$0 = $wk$0 + 4 | 0;
      }
     } else {
      HEAP16[$pnt2$3 >> 1] = $11;
      if (($11 | 0) < ($12 | 0)) {
       $k$1 = 0;
       $wk$1 = $arraydecay;
       while (1) {
        if (($k$1 | 0) >= ($wk_max$1 | 0)) {
         $15 = $11;
         break L36;
        }
        if ((HEAP32[$wk$1 >> 2] | 0) == ($12 | 0)) HEAP32[$wk$1 >> 2] = $11;
        $k$1 = $k$1 + 1 | 0;
        $wk$1 = $wk$1 + 4 | 0;
       }
      } else $15 = $11;
     } while (0);
     $16 = ($15 << 16 >> 16) * 7 | 0;
     $arrayidx124 = $labelInfo + 1310736 + ($16 + -7 << 2) | 0;
     HEAP32[$arrayidx124 >> 2] = (HEAP32[$arrayidx124 >> 2] | 0) + 1;
     $arrayidx127 = $labelInfo + 1310736 + ($16 + -6 << 2) | 0;
     HEAP32[$arrayidx127 >> 2] = (HEAP32[$arrayidx127 >> 2] | 0) + $i$2;
     $arrayidx130 = $labelInfo + 1310736 + ($16 + -5 << 2) | 0;
     HEAP32[$arrayidx130 >> 2] = (HEAP32[$arrayidx130 >> 2] | 0) + $j$0;
     HEAP32[$labelInfo + 1310736 + ($16 + -1 << 2) >> 2] = $j$0;
     $wk_max$3 = $wk_max$1;
     break;
    }
    $20 = HEAP16[$add$ptr135 >> 1] | 0;
    if ($20 << 16 >> 16 <= 0) {
     HEAP16[$pnt2$3 >> 1] = $9;
     $mul203 = $sub76 * 7 | 0;
     $arrayidx205 = $labelInfo + 1310736 + ($mul203 << 2) | 0;
     HEAP32[$arrayidx205 >> 2] = (HEAP32[$arrayidx205 >> 2] | 0) + 1;
     $arrayidx208 = $labelInfo + 1310736 + ($mul203 + 1 << 2) | 0;
     HEAP32[$arrayidx208 >> 2] = (HEAP32[$arrayidx208 >> 2] | 0) + $i$2;
     $arrayidx211 = $labelInfo + 1310736 + ($mul203 + 2 << 2) | 0;
     HEAP32[$arrayidx211 >> 2] = (HEAP32[$arrayidx211 >> 2] | 0) + $j$0;
     $arrayidx214 = $labelInfo + 1310736 + ($mul203 + 3 << 2) | 0;
     if ((HEAP32[$arrayidx214 >> 2] | 0) > ($i$2 | 0)) HEAP32[$arrayidx214 >> 2] = $i$2;
     HEAP32[$labelInfo + 1310736 + ($mul203 + 6 << 2) >> 2] = $j$0;
     $wk_max$3 = $wk_max$1;
     break;
    }
    $21 = HEAP32[$arrayidx77 >> 2] | 0;
    $22 = HEAP32[$labelInfo + 1179664 + (($20 << 16 >> 16) + -1 << 2) >> 2] | 0;
    L59 : do if (($21 | 0) > ($22 | 0)) {
     HEAP16[$pnt2$3 >> 1] = $22;
     $k$2 = 0;
     $wk$2 = $arraydecay;
     while (1) {
      if (($k$2 | 0) >= ($wk_max$1 | 0)) {
       $25 = $22;
       break L59;
      }
      if ((HEAP32[$wk$2 >> 2] | 0) == ($21 | 0)) HEAP32[$wk$2 >> 2] = $22;
      $k$2 = $k$2 + 1 | 0;
      $wk$2 = $wk$2 + 4 | 0;
     }
    } else {
     HEAP16[$pnt2$3 >> 1] = $21;
     if (($21 | 0) < ($22 | 0)) {
      $k$3 = 0;
      $wk$3 = $arraydecay;
      while (1) {
       if (($k$3 | 0) >= ($wk_max$1 | 0)) {
        $25 = $21;
        break L59;
       }
       if ((HEAP32[$wk$3 >> 2] | 0) == ($22 | 0)) HEAP32[$wk$3 >> 2] = $21;
       $k$3 = $k$3 + 1 | 0;
       $wk$3 = $wk$3 + 4 | 0;
      }
     } else $25 = $21;
    } while (0);
    $26 = ($25 << 16 >> 16) * 7 | 0;
    $arrayidx191 = $labelInfo + 1310736 + ($26 + -7 << 2) | 0;
    HEAP32[$arrayidx191 >> 2] = (HEAP32[$arrayidx191 >> 2] | 0) + 1;
    $arrayidx194 = $labelInfo + 1310736 + ($26 + -6 << 2) | 0;
    HEAP32[$arrayidx194 >> 2] = (HEAP32[$arrayidx194 >> 2] | 0) + $i$2;
    $arrayidx197 = $labelInfo + 1310736 + ($26 + -5 << 2) | 0;
    HEAP32[$arrayidx197 >> 2] = (HEAP32[$arrayidx197 >> 2] | 0) + $j$0;
    $wk_max$3 = $wk_max$1;
   } while (0);
   $i$2 = $i$2 + 1 | 0;
   $pnt$1 = $pnt$1 + 8 | 0;
   $pnt2$3 = $pnt2$3 + 2 | 0;
   $wk_max$1 = $wk_max$3;
  }
  $j$0 = $j$0 + 1 | 0;
  $pnt$0 = $pnt$1 + $mul318 + 16 | 0;
  $pnt2$2 = $pnt2$3 + 4 | 0;
  $wk_max$0 = $wk_max$1;
 }
 L77 : do if ((label | 0) == 50) {
  _arLog(3, 3256, $vararg_buffer);
  $retval$0 = -1;
 } else if ((label | 0) == 56) {
  $arrayidx327 = $labelInfo + 12 | 0;
  $i$3 = 1;
  $j$1 = 1;
  $wk$4 = $arraydecay;
  while (1) {
   if (($i$3 | 0) > ($wk_max$0 | 0)) break;
   $44 = HEAP32[$wk$4 >> 2] | 0;
   if (($44 | 0) == ($i$3 | 0)) {
    $cond = $j$1;
    $j$2 = $j$1 + 1 | 0;
   } else {
    $cond = HEAP32[$labelInfo + 1179664 + ($44 + -1 << 2) >> 2] | 0;
    $j$2 = $j$1;
   }
   HEAP32[$wk$4 >> 2] = $cond;
   $i$3 = $i$3 + 1 | 0;
   $j$1 = $j$2;
   $wk$4 = $wk$4 + 4 | 0;
  }
  $label_num325 = $labelInfo + 8 | 0;
  $sub348 = $j$1 + -1 | 0;
  HEAP32[$label_num325 >> 2] = $sub348;
  if (!$sub348) $retval$0 = 0; else {
   _memset($arrayidx327 | 0, 0, $sub348 << 2 | 0) | 0;
   _memset($labelInfo + 655376 | 0, 0, $sub348 << 4 | 0) | 0;
   $46 = $sub348;
   $i$4 = 0;
   while (1) {
    if (($i$4 | 0) >= ($46 | 0)) {
     $i$5 = 0;
     break;
    }
    $mul360 = $i$4 << 2;
    HEAP32[$labelInfo + 131084 + ($mul360 << 2) >> 2] = $div;
    HEAP32[$labelInfo + 131084 + (($mul360 | 1) << 2) >> 2] = 0;
    HEAP32[$labelInfo + 131084 + (($mul360 | 2) << 2) >> 2] = $div1;
    HEAP32[$labelInfo + 131084 + (($mul360 | 3) << 2) >> 2] = 0;
    $46 = HEAP32[$label_num325 >> 2] | 0;
    $i$4 = $i$4 + 1 | 0;
   }
   while (1) {
    if (($i$5 | 0) >= ($wk_max$0 | 0)) {
     $i$6 = 0;
     break;
    }
    $sub380 = (HEAP32[$labelInfo + 1179664 + ($i$5 << 2) >> 2] | 0) + -1 | 0;
    $mul381 = $i$5 * 7 | 0;
    $arrayidx384 = $labelInfo + 12 + ($sub380 << 2) | 0;
    HEAP32[$arrayidx384 >> 2] = (HEAP32[$arrayidx384 >> 2] | 0) + (HEAP32[$labelInfo + 1310736 + ($mul381 << 2) >> 2] | 0);
    $mul390 = $sub380 << 1;
    $arrayidx392 = $labelInfo + 655376 + ($mul390 << 3) | 0;
    HEAPF64[$arrayidx392 >> 3] = +HEAPF64[$arrayidx392 >> 3] + +(HEAP32[$labelInfo + 1310736 + ($mul381 + 1 << 2) >> 2] | 0);
    $arrayidx400 = $labelInfo + 655376 + (($mul390 | 1) << 3) | 0;
    HEAPF64[$arrayidx400 >> 3] = +HEAPF64[$arrayidx400 >> 3] + +(HEAP32[$labelInfo + 1310736 + ($mul381 + 2 << 2) >> 2] | 0);
    $mul402 = $sub380 << 2;
    $arrayidx404 = $labelInfo + 131084 + ($mul402 << 2) | 0;
    $55 = HEAP32[$labelInfo + 1310736 + ($mul381 + 3 << 2) >> 2] | 0;
    if ((HEAP32[$arrayidx404 >> 2] | 0) > ($55 | 0)) HEAP32[$arrayidx404 >> 2] = $55;
    $arrayidx420 = $labelInfo + 131084 + (($mul402 | 1) << 2) | 0;
    $57 = HEAP32[$labelInfo + 1310736 + ($mul381 + 4 << 2) >> 2] | 0;
    if ((HEAP32[$arrayidx420 >> 2] | 0) < ($57 | 0)) HEAP32[$arrayidx420 >> 2] = $57;
    $arrayidx436 = $labelInfo + 131084 + (($mul402 | 2) << 2) | 0;
    $59 = HEAP32[$labelInfo + 1310736 + ($mul381 + 5 << 2) >> 2] | 0;
    if ((HEAP32[$arrayidx436 >> 2] | 0) > ($59 | 0)) HEAP32[$arrayidx436 >> 2] = $59;
    $arrayidx452 = $labelInfo + 131084 + (($mul402 | 3) << 2) | 0;
    $61 = HEAP32[$labelInfo + 1310736 + ($mul381 + 6 << 2) >> 2] | 0;
    if ((HEAP32[$arrayidx452 >> 2] | 0) < ($61 | 0)) HEAP32[$arrayidx452 >> 2] = $61;
    $i$5 = $i$5 + 1 | 0;
   }
   while (1) {
    if (($i$6 | 0) >= (HEAP32[$label_num325 >> 2] | 0)) {
     $retval$0 = 0;
     break L77;
    }
    $arrayidx473 = $labelInfo + 12 + ($i$6 << 2) | 0;
    $mul475 = $i$6 << 1;
    $arrayidx477 = $labelInfo + 655376 + ($mul475 << 3) | 0;
    HEAPF64[$arrayidx477 >> 3] = +HEAPF64[$arrayidx477 >> 3] / +(HEAP32[$arrayidx473 >> 2] | 0);
    $arrayidx483 = $labelInfo + 655376 + (($mul475 | 1) << 3) | 0;
    HEAPF64[$arrayidx483 >> 3] = +HEAPF64[$arrayidx483 >> 3] / +(HEAP32[$arrayidx473 >> 2] | 0);
    $i$6 = $i$6 + 1 | 0;
   }
  }
 } while (0);
 STACKTOP = sp;
 return $retval$0 | 0;
}

function _arLabelingSubDBI3CA($image, $xsize, $ysize, $labelingThresh, $labelInfo) {
 $image = $image | 0;
 $xsize = $xsize | 0;
 $ysize = $ysize | 0;
 $labelingThresh = $labelingThresh | 0;
 $labelInfo = $labelInfo | 0;
 var $$sink = 0, $0 = 0, $10 = 0, $11 = 0, $12 = 0, $15 = 0, $16 = 0, $20 = 0, $21 = 0, $22 = 0, $25 = 0, $26 = 0, $38 = 0, $39 = 0, $4 = 0, $44 = 0, $46 = 0, $5 = 0, $55 = 0, $57 = 0, $59 = 0, $61 = 0, $9 = 0, $add$ptr135 = 0, $add273 = 0, $add278$sink = 0, $arraydecay = 0, $arrayidx124 = 0, $arrayidx127 = 0, $arrayidx130 = 0, $arrayidx191 = 0, $arrayidx194 = 0, $arrayidx197 = 0, $arrayidx205 = 0, $arrayidx208 = 0, $arrayidx211 = 0, $arrayidx214 = 0, $arrayidx236 = 0, $arrayidx239 = 0, $arrayidx242 = 0, $arrayidx245 = 0, $arrayidx265 = 0, $arrayidx268 = 0, $arrayidx271 = 0, $arrayidx327 = 0, $arrayidx384 = 0, $arrayidx392 = 0, $arrayidx400 = 0, $arrayidx404 = 0, $arrayidx420 = 0, $arrayidx436 = 0, $arrayidx45 = 0, $arrayidx452 = 0, $arrayidx473 = 0, $arrayidx477 = 0, $arrayidx483 = 0, $arrayidx54 = 0, $arrayidx57 = 0, $arrayidx60 = 0, $arrayidx77 = 0, $cmp71 = 0, $cond = 0, $div = 0, $div1 = 0, $i$0 = 0, $i$1 = 0, $i$2 = 0, $i$3 = 0, $i$4 = 0, $i$5 = 0, $i$6 = 0, $inc282 = 0, $j$0 = 0, $j$1 = 0, $j$2 = 0, $k$0 = 0, $k$1 = 0, $k$2 = 0, $k$3 = 0, $label_num325 = 0, $mul = 0, $mul203 = 0, $mul234 = 0, $mul292 = 0, $mul318 = 0, $mul360 = 0, $mul381 = 0, $mul390 = 0, $mul402 = 0, $mul475 = 0, $pnt$0 = 0, $pnt$1 = 0, $pnt1$0 = 0, $pnt1$1 = 0, $pnt2$0 = 0, $pnt2$1 = 0, $pnt2$2 = 0, $pnt2$3 = 0, $retval$0 = 0, $sub = 0, $sub348 = 0, $sub380 = 0, $sub44 = 0, $sub76 = 0, $sub80 = 0, $sub9 = 0, $vararg_buffer = 0, $wk$0 = 0, $wk$1 = 0, $wk$2 = 0, $wk$3 = 0, $wk$4 = 0, $wk_max$0 = 0, $wk_max$1 = 0, $wk_max$2 = 0, $wk_max$3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $vararg_buffer = sp;
 $div = ($xsize | 0) / 2 | 0;
 $div1 = ($ysize | 0) / 2 | 0;
 $0 = HEAP32[$labelInfo >> 2] | 0;
 $sub = $div1 + -1 | 0;
 $i$0 = 0;
 $pnt1$0 = $0;
 $pnt2$0 = $0 + ((Math_imul($sub, $div) | 0) << 1) | 0;
 while (1) {
  if (($i$0 | 0) >= ($div | 0)) break;
  HEAP16[$pnt2$0 >> 1] = 0;
  HEAP16[$pnt1$0 >> 1] = 0;
  $i$0 = $i$0 + 1 | 0;
  $pnt1$0 = $pnt1$0 + 2 | 0;
  $pnt2$0 = $pnt2$0 + 2 | 0;
 }
 $mul = $labelingThresh * 3 | 0;
 $sub9 = $div + -1 | 0;
 $i$1 = 0;
 $pnt1$1 = $0;
 $pnt2$1 = $0 + ($sub9 << 1) | 0;
 while (1) {
  if (($i$1 | 0) >= ($div1 | 0)) break;
  HEAP16[$pnt2$1 >> 1] = 0;
  HEAP16[$pnt1$1 >> 1] = 0;
  $i$1 = $i$1 + 1 | 0;
  $pnt1$1 = $pnt1$1 + ($div << 1) | 0;
  $pnt2$1 = $pnt2$1 + ($div << 1) | 0;
 }
 $arraydecay = $labelInfo + 1179664 | 0;
 $sub44 = 0 - $div | 0;
 $mul318 = $xsize << 2;
 $j$0 = 1;
 $pnt$0 = $image + (($xsize << 3) + 8) | 0;
 $pnt2$2 = $0 + ($div + 1 << 1) | 0;
 $wk_max$0 = 0;
 L9 : while (1) {
  if (($j$0 | 0) < ($sub | 0)) {
   $i$2 = 1;
   $pnt$1 = $pnt$0;
   $pnt2$3 = $pnt2$2;
   $wk_max$1 = $wk_max$0;
  } else {
   label = 56;
   break;
  }
  while (1) {
   if (($i$2 | 0) >= ($sub9 | 0)) break;
   do if (((HEAPU8[$pnt$1 + 1 >> 0] | 0) + (HEAPU8[$pnt$1 >> 0] | 0) + (HEAPU8[$pnt$1 + 2 >> 0] | 0) | 0) > ($mul | 0)) {
    HEAP16[$pnt2$3 >> 1] = 0;
    $wk_max$3 = $wk_max$1;
   } else {
    $arrayidx45 = $pnt2$3 + ($sub44 << 1) | 0;
    $4 = HEAP16[$arrayidx45 >> 1] | 0;
    if ($4 << 16 >> 16 > 0) {
     HEAP16[$pnt2$3 >> 1] = $4;
     $5 = ($4 << 16 >> 16) * 7 | 0;
     $arrayidx54 = $labelInfo + 1310736 + ($5 + -7 << 2) | 0;
     HEAP32[$arrayidx54 >> 2] = (HEAP32[$arrayidx54 >> 2] | 0) + 1;
     $arrayidx57 = $labelInfo + 1310736 + ($5 + -6 << 2) | 0;
     HEAP32[$arrayidx57 >> 2] = (HEAP32[$arrayidx57 >> 2] | 0) + $i$2;
     $arrayidx60 = $labelInfo + 1310736 + ($5 + -5 << 2) | 0;
     HEAP32[$arrayidx60 >> 2] = (HEAP32[$arrayidx60 >> 2] | 0) + $j$0;
     HEAP32[$labelInfo + 1310736 + ($5 + -1 << 2) >> 2] = $j$0;
     $wk_max$3 = $wk_max$1;
     break;
    }
    $9 = HEAP16[$arrayidx45 + 2 >> 1] | 0;
    $10 = HEAP16[$arrayidx45 + -2 >> 1] | 0;
    $cmp71 = $10 << 16 >> 16 > 0;
    $add$ptr135 = $pnt2$3 + -2 | 0;
    $sub80 = ($10 << 16 >> 16) + -1 | 0;
    if ($9 << 16 >> 16 <= 0) {
     if ($cmp71) {
      HEAP16[$pnt2$3 >> 1] = $10;
      $mul234 = $sub80 * 7 | 0;
      $arrayidx236 = $labelInfo + 1310736 + ($mul234 << 2) | 0;
      HEAP32[$arrayidx236 >> 2] = (HEAP32[$arrayidx236 >> 2] | 0) + 1;
      $arrayidx239 = $labelInfo + 1310736 + ($mul234 + 1 << 2) | 0;
      HEAP32[$arrayidx239 >> 2] = (HEAP32[$arrayidx239 >> 2] | 0) + $i$2;
      $arrayidx242 = $labelInfo + 1310736 + ($mul234 + 2 << 2) | 0;
      HEAP32[$arrayidx242 >> 2] = (HEAP32[$arrayidx242 >> 2] | 0) + $j$0;
      $arrayidx245 = $labelInfo + 1310736 + ($mul234 + 4 << 2) | 0;
      if ((HEAP32[$arrayidx245 >> 2] | 0) < ($i$2 | 0)) HEAP32[$arrayidx245 >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($mul234 + 6 << 2) >> 2] = $j$0;
      $wk_max$3 = $wk_max$1;
      break;
     }
     $38 = HEAP16[$add$ptr135 >> 1] | 0;
     if ($38 << 16 >> 16 > 0) {
      HEAP16[$pnt2$3 >> 1] = $38;
      $39 = ($38 << 16 >> 16) * 7 | 0;
      $arrayidx265 = $labelInfo + 1310736 + ($39 + -7 << 2) | 0;
      HEAP32[$arrayidx265 >> 2] = (HEAP32[$arrayidx265 >> 2] | 0) + 1;
      $arrayidx268 = $labelInfo + 1310736 + ($39 + -6 << 2) | 0;
      HEAP32[$arrayidx268 >> 2] = (HEAP32[$arrayidx268 >> 2] | 0) + $i$2;
      $arrayidx271 = $labelInfo + 1310736 + ($39 + -5 << 2) | 0;
      HEAP32[$arrayidx271 >> 2] = (HEAP32[$arrayidx271 >> 2] | 0) + $j$0;
      $add273 = $39 + -3 | 0;
      if ((HEAP32[$labelInfo + 1310736 + ($add273 << 2) >> 2] | 0) < ($i$2 | 0)) {
       $$sink = $i$2;
       $add278$sink = $add273;
       $wk_max$2 = $wk_max$1;
      } else {
       $wk_max$3 = $wk_max$1;
       break;
      }
     } else {
      $inc282 = $wk_max$1 + 1 | 0;
      if (($wk_max$1 | 0) > 32767) {
       label = 50;
       break L9;
      }
      HEAP16[$pnt2$3 >> 1] = $inc282;
      HEAP32[$labelInfo + 1179664 + ($wk_max$1 << 2) >> 2] = $inc282 << 16 >> 16;
      $mul292 = $wk_max$1 * 7 | 0;
      HEAP32[$labelInfo + 1310736 + ($mul292 << 2) >> 2] = 1;
      HEAP32[$labelInfo + 1310736 + ($mul292 + 1 << 2) >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($mul292 + 2 << 2) >> 2] = $j$0;
      HEAP32[$labelInfo + 1310736 + ($mul292 + 3 << 2) >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($mul292 + 4 << 2) >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($mul292 + 5 << 2) >> 2] = $j$0;
      $$sink = $j$0;
      $add278$sink = $mul292 + 6 | 0;
      $wk_max$2 = $inc282;
     }
     HEAP32[$labelInfo + 1310736 + ($add278$sink << 2) >> 2] = $$sink;
     $wk_max$3 = $wk_max$2;
     break;
    }
    $sub76 = ($9 << 16 >> 16) + -1 | 0;
    $arrayidx77 = $labelInfo + 1179664 + ($sub76 << 2) | 0;
    if ($cmp71) {
     $11 = HEAP32[$arrayidx77 >> 2] | 0;
     $12 = HEAP32[$labelInfo + 1179664 + ($sub80 << 2) >> 2] | 0;
     L36 : do if (($11 | 0) > ($12 | 0)) {
      HEAP16[$pnt2$3 >> 1] = $12;
      $k$0 = 0;
      $wk$0 = $arraydecay;
      while (1) {
       if (($k$0 | 0) >= ($wk_max$1 | 0)) {
        $15 = $12;
        break L36;
       }
       if ((HEAP32[$wk$0 >> 2] | 0) == ($11 | 0)) HEAP32[$wk$0 >> 2] = $12;
       $k$0 = $k$0 + 1 | 0;
       $wk$0 = $wk$0 + 4 | 0;
      }
     } else {
      HEAP16[$pnt2$3 >> 1] = $11;
      if (($11 | 0) < ($12 | 0)) {
       $k$1 = 0;
       $wk$1 = $arraydecay;
       while (1) {
        if (($k$1 | 0) >= ($wk_max$1 | 0)) {
         $15 = $11;
         break L36;
        }
        if ((HEAP32[$wk$1 >> 2] | 0) == ($12 | 0)) HEAP32[$wk$1 >> 2] = $11;
        $k$1 = $k$1 + 1 | 0;
        $wk$1 = $wk$1 + 4 | 0;
       }
      } else $15 = $11;
     } while (0);
     $16 = ($15 << 16 >> 16) * 7 | 0;
     $arrayidx124 = $labelInfo + 1310736 + ($16 + -7 << 2) | 0;
     HEAP32[$arrayidx124 >> 2] = (HEAP32[$arrayidx124 >> 2] | 0) + 1;
     $arrayidx127 = $labelInfo + 1310736 + ($16 + -6 << 2) | 0;
     HEAP32[$arrayidx127 >> 2] = (HEAP32[$arrayidx127 >> 2] | 0) + $i$2;
     $arrayidx130 = $labelInfo + 1310736 + ($16 + -5 << 2) | 0;
     HEAP32[$arrayidx130 >> 2] = (HEAP32[$arrayidx130 >> 2] | 0) + $j$0;
     HEAP32[$labelInfo + 1310736 + ($16 + -1 << 2) >> 2] = $j$0;
     $wk_max$3 = $wk_max$1;
     break;
    }
    $20 = HEAP16[$add$ptr135 >> 1] | 0;
    if ($20 << 16 >> 16 <= 0) {
     HEAP16[$pnt2$3 >> 1] = $9;
     $mul203 = $sub76 * 7 | 0;
     $arrayidx205 = $labelInfo + 1310736 + ($mul203 << 2) | 0;
     HEAP32[$arrayidx205 >> 2] = (HEAP32[$arrayidx205 >> 2] | 0) + 1;
     $arrayidx208 = $labelInfo + 1310736 + ($mul203 + 1 << 2) | 0;
     HEAP32[$arrayidx208 >> 2] = (HEAP32[$arrayidx208 >> 2] | 0) + $i$2;
     $arrayidx211 = $labelInfo + 1310736 + ($mul203 + 2 << 2) | 0;
     HEAP32[$arrayidx211 >> 2] = (HEAP32[$arrayidx211 >> 2] | 0) + $j$0;
     $arrayidx214 = $labelInfo + 1310736 + ($mul203 + 3 << 2) | 0;
     if ((HEAP32[$arrayidx214 >> 2] | 0) > ($i$2 | 0)) HEAP32[$arrayidx214 >> 2] = $i$2;
     HEAP32[$labelInfo + 1310736 + ($mul203 + 6 << 2) >> 2] = $j$0;
     $wk_max$3 = $wk_max$1;
     break;
    }
    $21 = HEAP32[$arrayidx77 >> 2] | 0;
    $22 = HEAP32[$labelInfo + 1179664 + (($20 << 16 >> 16) + -1 << 2) >> 2] | 0;
    L59 : do if (($21 | 0) > ($22 | 0)) {
     HEAP16[$pnt2$3 >> 1] = $22;
     $k$2 = 0;
     $wk$2 = $arraydecay;
     while (1) {
      if (($k$2 | 0) >= ($wk_max$1 | 0)) {
       $25 = $22;
       break L59;
      }
      if ((HEAP32[$wk$2 >> 2] | 0) == ($21 | 0)) HEAP32[$wk$2 >> 2] = $22;
      $k$2 = $k$2 + 1 | 0;
      $wk$2 = $wk$2 + 4 | 0;
     }
    } else {
     HEAP16[$pnt2$3 >> 1] = $21;
     if (($21 | 0) < ($22 | 0)) {
      $k$3 = 0;
      $wk$3 = $arraydecay;
      while (1) {
       if (($k$3 | 0) >= ($wk_max$1 | 0)) {
        $25 = $21;
        break L59;
       }
       if ((HEAP32[$wk$3 >> 2] | 0) == ($22 | 0)) HEAP32[$wk$3 >> 2] = $21;
       $k$3 = $k$3 + 1 | 0;
       $wk$3 = $wk$3 + 4 | 0;
      }
     } else $25 = $21;
    } while (0);
    $26 = ($25 << 16 >> 16) * 7 | 0;
    $arrayidx191 = $labelInfo + 1310736 + ($26 + -7 << 2) | 0;
    HEAP32[$arrayidx191 >> 2] = (HEAP32[$arrayidx191 >> 2] | 0) + 1;
    $arrayidx194 = $labelInfo + 1310736 + ($26 + -6 << 2) | 0;
    HEAP32[$arrayidx194 >> 2] = (HEAP32[$arrayidx194 >> 2] | 0) + $i$2;
    $arrayidx197 = $labelInfo + 1310736 + ($26 + -5 << 2) | 0;
    HEAP32[$arrayidx197 >> 2] = (HEAP32[$arrayidx197 >> 2] | 0) + $j$0;
    $wk_max$3 = $wk_max$1;
   } while (0);
   $i$2 = $i$2 + 1 | 0;
   $pnt$1 = $pnt$1 + 8 | 0;
   $pnt2$3 = $pnt2$3 + 2 | 0;
   $wk_max$1 = $wk_max$3;
  }
  $j$0 = $j$0 + 1 | 0;
  $pnt$0 = $pnt$1 + $mul318 + 16 | 0;
  $pnt2$2 = $pnt2$3 + 4 | 0;
  $wk_max$0 = $wk_max$1;
 }
 L77 : do if ((label | 0) == 50) {
  _arLog(3, 3256, $vararg_buffer);
  $retval$0 = -1;
 } else if ((label | 0) == 56) {
  $arrayidx327 = $labelInfo + 12 | 0;
  $i$3 = 1;
  $j$1 = 1;
  $wk$4 = $arraydecay;
  while (1) {
   if (($i$3 | 0) > ($wk_max$0 | 0)) break;
   $44 = HEAP32[$wk$4 >> 2] | 0;
   if (($44 | 0) == ($i$3 | 0)) {
    $cond = $j$1;
    $j$2 = $j$1 + 1 | 0;
   } else {
    $cond = HEAP32[$labelInfo + 1179664 + ($44 + -1 << 2) >> 2] | 0;
    $j$2 = $j$1;
   }
   HEAP32[$wk$4 >> 2] = $cond;
   $i$3 = $i$3 + 1 | 0;
   $j$1 = $j$2;
   $wk$4 = $wk$4 + 4 | 0;
  }
  $label_num325 = $labelInfo + 8 | 0;
  $sub348 = $j$1 + -1 | 0;
  HEAP32[$label_num325 >> 2] = $sub348;
  if (!$sub348) $retval$0 = 0; else {
   _memset($arrayidx327 | 0, 0, $sub348 << 2 | 0) | 0;
   _memset($labelInfo + 655376 | 0, 0, $sub348 << 4 | 0) | 0;
   $46 = $sub348;
   $i$4 = 0;
   while (1) {
    if (($i$4 | 0) >= ($46 | 0)) {
     $i$5 = 0;
     break;
    }
    $mul360 = $i$4 << 2;
    HEAP32[$labelInfo + 131084 + ($mul360 << 2) >> 2] = $div;
    HEAP32[$labelInfo + 131084 + (($mul360 | 1) << 2) >> 2] = 0;
    HEAP32[$labelInfo + 131084 + (($mul360 | 2) << 2) >> 2] = $div1;
    HEAP32[$labelInfo + 131084 + (($mul360 | 3) << 2) >> 2] = 0;
    $46 = HEAP32[$label_num325 >> 2] | 0;
    $i$4 = $i$4 + 1 | 0;
   }
   while (1) {
    if (($i$5 | 0) >= ($wk_max$0 | 0)) {
     $i$6 = 0;
     break;
    }
    $sub380 = (HEAP32[$labelInfo + 1179664 + ($i$5 << 2) >> 2] | 0) + -1 | 0;
    $mul381 = $i$5 * 7 | 0;
    $arrayidx384 = $labelInfo + 12 + ($sub380 << 2) | 0;
    HEAP32[$arrayidx384 >> 2] = (HEAP32[$arrayidx384 >> 2] | 0) + (HEAP32[$labelInfo + 1310736 + ($mul381 << 2) >> 2] | 0);
    $mul390 = $sub380 << 1;
    $arrayidx392 = $labelInfo + 655376 + ($mul390 << 3) | 0;
    HEAPF64[$arrayidx392 >> 3] = +HEAPF64[$arrayidx392 >> 3] + +(HEAP32[$labelInfo + 1310736 + ($mul381 + 1 << 2) >> 2] | 0);
    $arrayidx400 = $labelInfo + 655376 + (($mul390 | 1) << 3) | 0;
    HEAPF64[$arrayidx400 >> 3] = +HEAPF64[$arrayidx400 >> 3] + +(HEAP32[$labelInfo + 1310736 + ($mul381 + 2 << 2) >> 2] | 0);
    $mul402 = $sub380 << 2;
    $arrayidx404 = $labelInfo + 131084 + ($mul402 << 2) | 0;
    $55 = HEAP32[$labelInfo + 1310736 + ($mul381 + 3 << 2) >> 2] | 0;
    if ((HEAP32[$arrayidx404 >> 2] | 0) > ($55 | 0)) HEAP32[$arrayidx404 >> 2] = $55;
    $arrayidx420 = $labelInfo + 131084 + (($mul402 | 1) << 2) | 0;
    $57 = HEAP32[$labelInfo + 1310736 + ($mul381 + 4 << 2) >> 2] | 0;
    if ((HEAP32[$arrayidx420 >> 2] | 0) < ($57 | 0)) HEAP32[$arrayidx420 >> 2] = $57;
    $arrayidx436 = $labelInfo + 131084 + (($mul402 | 2) << 2) | 0;
    $59 = HEAP32[$labelInfo + 1310736 + ($mul381 + 5 << 2) >> 2] | 0;
    if ((HEAP32[$arrayidx436 >> 2] | 0) > ($59 | 0)) HEAP32[$arrayidx436 >> 2] = $59;
    $arrayidx452 = $labelInfo + 131084 + (($mul402 | 3) << 2) | 0;
    $61 = HEAP32[$labelInfo + 1310736 + ($mul381 + 6 << 2) >> 2] | 0;
    if ((HEAP32[$arrayidx452 >> 2] | 0) < ($61 | 0)) HEAP32[$arrayidx452 >> 2] = $61;
    $i$5 = $i$5 + 1 | 0;
   }
   while (1) {
    if (($i$6 | 0) >= (HEAP32[$label_num325 >> 2] | 0)) {
     $retval$0 = 0;
     break L77;
    }
    $arrayidx473 = $labelInfo + 12 + ($i$6 << 2) | 0;
    $mul475 = $i$6 << 1;
    $arrayidx477 = $labelInfo + 655376 + ($mul475 << 3) | 0;
    HEAPF64[$arrayidx477 >> 3] = +HEAPF64[$arrayidx477 >> 3] / +(HEAP32[$arrayidx473 >> 2] | 0);
    $arrayidx483 = $labelInfo + 655376 + (($mul475 | 1) << 3) | 0;
    HEAPF64[$arrayidx483 >> 3] = +HEAPF64[$arrayidx483 >> 3] / +(HEAP32[$arrayidx473 >> 2] | 0);
    $i$6 = $i$6 + 1 | 0;
   }
  }
 } while (0);
 STACKTOP = sp;
 return $retval$0 | 0;
}
function _arLabelingSubDWI3CA($image, $xsize, $ysize, $labelingThresh, $labelInfo) {
 $image = $image | 0;
 $xsize = $xsize | 0;
 $ysize = $ysize | 0;
 $labelingThresh = $labelingThresh | 0;
 $labelInfo = $labelInfo | 0;
 var $$sink = 0, $0 = 0, $10 = 0, $11 = 0, $12 = 0, $15 = 0, $16 = 0, $20 = 0, $21 = 0, $22 = 0, $25 = 0, $26 = 0, $38 = 0, $39 = 0, $4 = 0, $44 = 0, $46 = 0, $5 = 0, $55 = 0, $57 = 0, $59 = 0, $61 = 0, $9 = 0, $add$ptr135 = 0, $add273 = 0, $add278$sink = 0, $arraydecay = 0, $arrayidx124 = 0, $arrayidx127 = 0, $arrayidx130 = 0, $arrayidx191 = 0, $arrayidx194 = 0, $arrayidx197 = 0, $arrayidx205 = 0, $arrayidx208 = 0, $arrayidx211 = 0, $arrayidx214 = 0, $arrayidx236 = 0, $arrayidx239 = 0, $arrayidx242 = 0, $arrayidx245 = 0, $arrayidx265 = 0, $arrayidx268 = 0, $arrayidx271 = 0, $arrayidx327 = 0, $arrayidx384 = 0, $arrayidx392 = 0, $arrayidx400 = 0, $arrayidx404 = 0, $arrayidx420 = 0, $arrayidx436 = 0, $arrayidx45 = 0, $arrayidx452 = 0, $arrayidx473 = 0, $arrayidx477 = 0, $arrayidx483 = 0, $arrayidx54 = 0, $arrayidx57 = 0, $arrayidx60 = 0, $arrayidx77 = 0, $cmp71 = 0, $cond = 0, $div = 0, $div1 = 0, $i$0 = 0, $i$1 = 0, $i$2 = 0, $i$3 = 0, $i$4 = 0, $i$5 = 0, $i$6 = 0, $inc282 = 0, $j$0 = 0, $j$1 = 0, $j$2 = 0, $k$0 = 0, $k$1 = 0, $k$2 = 0, $k$3 = 0, $label_num325 = 0, $mul = 0, $mul203 = 0, $mul234 = 0, $mul292 = 0, $mul318 = 0, $mul360 = 0, $mul381 = 0, $mul390 = 0, $mul402 = 0, $mul475 = 0, $pnt$0 = 0, $pnt$1 = 0, $pnt1$0 = 0, $pnt1$1 = 0, $pnt2$0 = 0, $pnt2$1 = 0, $pnt2$2 = 0, $pnt2$3 = 0, $retval$0 = 0, $sub = 0, $sub348 = 0, $sub380 = 0, $sub44 = 0, $sub76 = 0, $sub80 = 0, $sub9 = 0, $vararg_buffer = 0, $wk$0 = 0, $wk$1 = 0, $wk$2 = 0, $wk$3 = 0, $wk$4 = 0, $wk_max$0 = 0, $wk_max$1 = 0, $wk_max$2 = 0, $wk_max$3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $vararg_buffer = sp;
 $div = ($xsize | 0) / 2 | 0;
 $div1 = ($ysize | 0) / 2 | 0;
 $0 = HEAP32[$labelInfo >> 2] | 0;
 $sub = $div1 + -1 | 0;
 $i$0 = 0;
 $pnt1$0 = $0;
 $pnt2$0 = $0 + ((Math_imul($sub, $div) | 0) << 1) | 0;
 while (1) {
  if (($i$0 | 0) >= ($div | 0)) break;
  HEAP16[$pnt2$0 >> 1] = 0;
  HEAP16[$pnt1$0 >> 1] = 0;
  $i$0 = $i$0 + 1 | 0;
  $pnt1$0 = $pnt1$0 + 2 | 0;
  $pnt2$0 = $pnt2$0 + 2 | 0;
 }
 $mul = $labelingThresh * 3 | 0;
 $sub9 = $div + -1 | 0;
 $i$1 = 0;
 $pnt1$1 = $0;
 $pnt2$1 = $0 + ($sub9 << 1) | 0;
 while (1) {
  if (($i$1 | 0) >= ($div1 | 0)) break;
  HEAP16[$pnt2$1 >> 1] = 0;
  HEAP16[$pnt1$1 >> 1] = 0;
  $i$1 = $i$1 + 1 | 0;
  $pnt1$1 = $pnt1$1 + ($div << 1) | 0;
  $pnt2$1 = $pnt2$1 + ($div << 1) | 0;
 }
 $arraydecay = $labelInfo + 1179664 | 0;
 $sub44 = 0 - $div | 0;
 $mul318 = $xsize << 2;
 $j$0 = 1;
 $pnt$0 = $image + (($xsize << 3) + 8) | 0;
 $pnt2$2 = $0 + ($div + 1 << 1) | 0;
 $wk_max$0 = 0;
 L9 : while (1) {
  if (($j$0 | 0) < ($sub | 0)) {
   $i$2 = 1;
   $pnt$1 = $pnt$0;
   $pnt2$3 = $pnt2$2;
   $wk_max$1 = $wk_max$0;
  } else {
   label = 56;
   break;
  }
  while (1) {
   if (($i$2 | 0) >= ($sub9 | 0)) break;
   do if (((HEAPU8[$pnt$1 + 1 >> 0] | 0) + (HEAPU8[$pnt$1 >> 0] | 0) + (HEAPU8[$pnt$1 + 2 >> 0] | 0) | 0) > ($mul | 0)) {
    $arrayidx45 = $pnt2$3 + ($sub44 << 1) | 0;
    $4 = HEAP16[$arrayidx45 >> 1] | 0;
    if ($4 << 16 >> 16 > 0) {
     HEAP16[$pnt2$3 >> 1] = $4;
     $5 = ($4 << 16 >> 16) * 7 | 0;
     $arrayidx54 = $labelInfo + 1310736 + ($5 + -7 << 2) | 0;
     HEAP32[$arrayidx54 >> 2] = (HEAP32[$arrayidx54 >> 2] | 0) + 1;
     $arrayidx57 = $labelInfo + 1310736 + ($5 + -6 << 2) | 0;
     HEAP32[$arrayidx57 >> 2] = (HEAP32[$arrayidx57 >> 2] | 0) + $i$2;
     $arrayidx60 = $labelInfo + 1310736 + ($5 + -5 << 2) | 0;
     HEAP32[$arrayidx60 >> 2] = (HEAP32[$arrayidx60 >> 2] | 0) + $j$0;
     HEAP32[$labelInfo + 1310736 + ($5 + -1 << 2) >> 2] = $j$0;
     $wk_max$3 = $wk_max$1;
     break;
    }
    $9 = HEAP16[$arrayidx45 + 2 >> 1] | 0;
    $10 = HEAP16[$arrayidx45 + -2 >> 1] | 0;
    $cmp71 = $10 << 16 >> 16 > 0;
    $add$ptr135 = $pnt2$3 + -2 | 0;
    $sub80 = ($10 << 16 >> 16) + -1 | 0;
    if ($9 << 16 >> 16 <= 0) {
     if ($cmp71) {
      HEAP16[$pnt2$3 >> 1] = $10;
      $mul234 = $sub80 * 7 | 0;
      $arrayidx236 = $labelInfo + 1310736 + ($mul234 << 2) | 0;
      HEAP32[$arrayidx236 >> 2] = (HEAP32[$arrayidx236 >> 2] | 0) + 1;
      $arrayidx239 = $labelInfo + 1310736 + ($mul234 + 1 << 2) | 0;
      HEAP32[$arrayidx239 >> 2] = (HEAP32[$arrayidx239 >> 2] | 0) + $i$2;
      $arrayidx242 = $labelInfo + 1310736 + ($mul234 + 2 << 2) | 0;
      HEAP32[$arrayidx242 >> 2] = (HEAP32[$arrayidx242 >> 2] | 0) + $j$0;
      $arrayidx245 = $labelInfo + 1310736 + ($mul234 + 4 << 2) | 0;
      if ((HEAP32[$arrayidx245 >> 2] | 0) < ($i$2 | 0)) HEAP32[$arrayidx245 >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($mul234 + 6 << 2) >> 2] = $j$0;
      $wk_max$3 = $wk_max$1;
      break;
     }
     $38 = HEAP16[$add$ptr135 >> 1] | 0;
     if ($38 << 16 >> 16 > 0) {
      HEAP16[$pnt2$3 >> 1] = $38;
      $39 = ($38 << 16 >> 16) * 7 | 0;
      $arrayidx265 = $labelInfo + 1310736 + ($39 + -7 << 2) | 0;
      HEAP32[$arrayidx265 >> 2] = (HEAP32[$arrayidx265 >> 2] | 0) + 1;
      $arrayidx268 = $labelInfo + 1310736 + ($39 + -6 << 2) | 0;
      HEAP32[$arrayidx268 >> 2] = (HEAP32[$arrayidx268 >> 2] | 0) + $i$2;
      $arrayidx271 = $labelInfo + 1310736 + ($39 + -5 << 2) | 0;
      HEAP32[$arrayidx271 >> 2] = (HEAP32[$arrayidx271 >> 2] | 0) + $j$0;
      $add273 = $39 + -3 | 0;
      if ((HEAP32[$labelInfo + 1310736 + ($add273 << 2) >> 2] | 0) < ($i$2 | 0)) {
       $$sink = $i$2;
       $add278$sink = $add273;
       $wk_max$2 = $wk_max$1;
      } else {
       $wk_max$3 = $wk_max$1;
       break;
      }
     } else {
      $inc282 = $wk_max$1 + 1 | 0;
      if (($wk_max$1 | 0) > 32767) {
       label = 50;
       break L9;
      }
      HEAP16[$pnt2$3 >> 1] = $inc282;
      HEAP32[$labelInfo + 1179664 + ($wk_max$1 << 2) >> 2] = $inc282 << 16 >> 16;
      $mul292 = $wk_max$1 * 7 | 0;
      HEAP32[$labelInfo + 1310736 + ($mul292 << 2) >> 2] = 1;
      HEAP32[$labelInfo + 1310736 + ($mul292 + 1 << 2) >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($mul292 + 2 << 2) >> 2] = $j$0;
      HEAP32[$labelInfo + 1310736 + ($mul292 + 3 << 2) >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($mul292 + 4 << 2) >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($mul292 + 5 << 2) >> 2] = $j$0;
      $$sink = $j$0;
      $add278$sink = $mul292 + 6 | 0;
      $wk_max$2 = $inc282;
     }
     HEAP32[$labelInfo + 1310736 + ($add278$sink << 2) >> 2] = $$sink;
     $wk_max$3 = $wk_max$2;
     break;
    }
    $sub76 = ($9 << 16 >> 16) + -1 | 0;
    $arrayidx77 = $labelInfo + 1179664 + ($sub76 << 2) | 0;
    if ($cmp71) {
     $11 = HEAP32[$arrayidx77 >> 2] | 0;
     $12 = HEAP32[$labelInfo + 1179664 + ($sub80 << 2) >> 2] | 0;
     L35 : do if (($11 | 0) > ($12 | 0)) {
      HEAP16[$pnt2$3 >> 1] = $12;
      $k$0 = 0;
      $wk$0 = $arraydecay;
      while (1) {
       if (($k$0 | 0) >= ($wk_max$1 | 0)) {
        $15 = $12;
        break L35;
       }
       if ((HEAP32[$wk$0 >> 2] | 0) == ($11 | 0)) HEAP32[$wk$0 >> 2] = $12;
       $k$0 = $k$0 + 1 | 0;
       $wk$0 = $wk$0 + 4 | 0;
      }
     } else {
      HEAP16[$pnt2$3 >> 1] = $11;
      if (($11 | 0) < ($12 | 0)) {
       $k$1 = 0;
       $wk$1 = $arraydecay;
       while (1) {
        if (($k$1 | 0) >= ($wk_max$1 | 0)) {
         $15 = $11;
         break L35;
        }
        if ((HEAP32[$wk$1 >> 2] | 0) == ($12 | 0)) HEAP32[$wk$1 >> 2] = $11;
        $k$1 = $k$1 + 1 | 0;
        $wk$1 = $wk$1 + 4 | 0;
       }
      } else $15 = $11;
     } while (0);
     $16 = ($15 << 16 >> 16) * 7 | 0;
     $arrayidx124 = $labelInfo + 1310736 + ($16 + -7 << 2) | 0;
     HEAP32[$arrayidx124 >> 2] = (HEAP32[$arrayidx124 >> 2] | 0) + 1;
     $arrayidx127 = $labelInfo + 1310736 + ($16 + -6 << 2) | 0;
     HEAP32[$arrayidx127 >> 2] = (HEAP32[$arrayidx127 >> 2] | 0) + $i$2;
     $arrayidx130 = $labelInfo + 1310736 + ($16 + -5 << 2) | 0;
     HEAP32[$arrayidx130 >> 2] = (HEAP32[$arrayidx130 >> 2] | 0) + $j$0;
     HEAP32[$labelInfo + 1310736 + ($16 + -1 << 2) >> 2] = $j$0;
     $wk_max$3 = $wk_max$1;
     break;
    }
    $20 = HEAP16[$add$ptr135 >> 1] | 0;
    if ($20 << 16 >> 16 <= 0) {
     HEAP16[$pnt2$3 >> 1] = $9;
     $mul203 = $sub76 * 7 | 0;
     $arrayidx205 = $labelInfo + 1310736 + ($mul203 << 2) | 0;
     HEAP32[$arrayidx205 >> 2] = (HEAP32[$arrayidx205 >> 2] | 0) + 1;
     $arrayidx208 = $labelInfo + 1310736 + ($mul203 + 1 << 2) | 0;
     HEAP32[$arrayidx208 >> 2] = (HEAP32[$arrayidx208 >> 2] | 0) + $i$2;
     $arrayidx211 = $labelInfo + 1310736 + ($mul203 + 2 << 2) | 0;
     HEAP32[$arrayidx211 >> 2] = (HEAP32[$arrayidx211 >> 2] | 0) + $j$0;
     $arrayidx214 = $labelInfo + 1310736 + ($mul203 + 3 << 2) | 0;
     if ((HEAP32[$arrayidx214 >> 2] | 0) > ($i$2 | 0)) HEAP32[$arrayidx214 >> 2] = $i$2;
     HEAP32[$labelInfo + 1310736 + ($mul203 + 6 << 2) >> 2] = $j$0;
     $wk_max$3 = $wk_max$1;
     break;
    }
    $21 = HEAP32[$arrayidx77 >> 2] | 0;
    $22 = HEAP32[$labelInfo + 1179664 + (($20 << 16 >> 16) + -1 << 2) >> 2] | 0;
    L58 : do if (($21 | 0) > ($22 | 0)) {
     HEAP16[$pnt2$3 >> 1] = $22;
     $k$2 = 0;
     $wk$2 = $arraydecay;
     while (1) {
      if (($k$2 | 0) >= ($wk_max$1 | 0)) {
       $25 = $22;
       break L58;
      }
      if ((HEAP32[$wk$2 >> 2] | 0) == ($21 | 0)) HEAP32[$wk$2 >> 2] = $22;
      $k$2 = $k$2 + 1 | 0;
      $wk$2 = $wk$2 + 4 | 0;
     }
    } else {
     HEAP16[$pnt2$3 >> 1] = $21;
     if (($21 | 0) < ($22 | 0)) {
      $k$3 = 0;
      $wk$3 = $arraydecay;
      while (1) {
       if (($k$3 | 0) >= ($wk_max$1 | 0)) {
        $25 = $21;
        break L58;
       }
       if ((HEAP32[$wk$3 >> 2] | 0) == ($22 | 0)) HEAP32[$wk$3 >> 2] = $21;
       $k$3 = $k$3 + 1 | 0;
       $wk$3 = $wk$3 + 4 | 0;
      }
     } else $25 = $21;
    } while (0);
    $26 = ($25 << 16 >> 16) * 7 | 0;
    $arrayidx191 = $labelInfo + 1310736 + ($26 + -7 << 2) | 0;
    HEAP32[$arrayidx191 >> 2] = (HEAP32[$arrayidx191 >> 2] | 0) + 1;
    $arrayidx194 = $labelInfo + 1310736 + ($26 + -6 << 2) | 0;
    HEAP32[$arrayidx194 >> 2] = (HEAP32[$arrayidx194 >> 2] | 0) + $i$2;
    $arrayidx197 = $labelInfo + 1310736 + ($26 + -5 << 2) | 0;
    HEAP32[$arrayidx197 >> 2] = (HEAP32[$arrayidx197 >> 2] | 0) + $j$0;
    $wk_max$3 = $wk_max$1;
   } else {
    HEAP16[$pnt2$3 >> 1] = 0;
    $wk_max$3 = $wk_max$1;
   } while (0);
   $i$2 = $i$2 + 1 | 0;
   $pnt$1 = $pnt$1 + 8 | 0;
   $pnt2$3 = $pnt2$3 + 2 | 0;
   $wk_max$1 = $wk_max$3;
  }
  $j$0 = $j$0 + 1 | 0;
  $pnt$0 = $pnt$1 + $mul318 + 16 | 0;
  $pnt2$2 = $pnt2$3 + 4 | 0;
  $wk_max$0 = $wk_max$1;
 }
 L77 : do if ((label | 0) == 50) {
  _arLog(3, 3256, $vararg_buffer);
  $retval$0 = -1;
 } else if ((label | 0) == 56) {
  $arrayidx327 = $labelInfo + 12 | 0;
  $i$3 = 1;
  $j$1 = 1;
  $wk$4 = $arraydecay;
  while (1) {
   if (($i$3 | 0) > ($wk_max$0 | 0)) break;
   $44 = HEAP32[$wk$4 >> 2] | 0;
   if (($44 | 0) == ($i$3 | 0)) {
    $cond = $j$1;
    $j$2 = $j$1 + 1 | 0;
   } else {
    $cond = HEAP32[$labelInfo + 1179664 + ($44 + -1 << 2) >> 2] | 0;
    $j$2 = $j$1;
   }
   HEAP32[$wk$4 >> 2] = $cond;
   $i$3 = $i$3 + 1 | 0;
   $j$1 = $j$2;
   $wk$4 = $wk$4 + 4 | 0;
  }
  $label_num325 = $labelInfo + 8 | 0;
  $sub348 = $j$1 + -1 | 0;
  HEAP32[$label_num325 >> 2] = $sub348;
  if (!$sub348) $retval$0 = 0; else {
   _memset($arrayidx327 | 0, 0, $sub348 << 2 | 0) | 0;
   _memset($labelInfo + 655376 | 0, 0, $sub348 << 4 | 0) | 0;
   $46 = $sub348;
   $i$4 = 0;
   while (1) {
    if (($i$4 | 0) >= ($46 | 0)) {
     $i$5 = 0;
     break;
    }
    $mul360 = $i$4 << 2;
    HEAP32[$labelInfo + 131084 + ($mul360 << 2) >> 2] = $div;
    HEAP32[$labelInfo + 131084 + (($mul360 | 1) << 2) >> 2] = 0;
    HEAP32[$labelInfo + 131084 + (($mul360 | 2) << 2) >> 2] = $div1;
    HEAP32[$labelInfo + 131084 + (($mul360 | 3) << 2) >> 2] = 0;
    $46 = HEAP32[$label_num325 >> 2] | 0;
    $i$4 = $i$4 + 1 | 0;
   }
   while (1) {
    if (($i$5 | 0) >= ($wk_max$0 | 0)) {
     $i$6 = 0;
     break;
    }
    $sub380 = (HEAP32[$labelInfo + 1179664 + ($i$5 << 2) >> 2] | 0) + -1 | 0;
    $mul381 = $i$5 * 7 | 0;
    $arrayidx384 = $labelInfo + 12 + ($sub380 << 2) | 0;
    HEAP32[$arrayidx384 >> 2] = (HEAP32[$arrayidx384 >> 2] | 0) + (HEAP32[$labelInfo + 1310736 + ($mul381 << 2) >> 2] | 0);
    $mul390 = $sub380 << 1;
    $arrayidx392 = $labelInfo + 655376 + ($mul390 << 3) | 0;
    HEAPF64[$arrayidx392 >> 3] = +HEAPF64[$arrayidx392 >> 3] + +(HEAP32[$labelInfo + 1310736 + ($mul381 + 1 << 2) >> 2] | 0);
    $arrayidx400 = $labelInfo + 655376 + (($mul390 | 1) << 3) | 0;
    HEAPF64[$arrayidx400 >> 3] = +HEAPF64[$arrayidx400 >> 3] + +(HEAP32[$labelInfo + 1310736 + ($mul381 + 2 << 2) >> 2] | 0);
    $mul402 = $sub380 << 2;
    $arrayidx404 = $labelInfo + 131084 + ($mul402 << 2) | 0;
    $55 = HEAP32[$labelInfo + 1310736 + ($mul381 + 3 << 2) >> 2] | 0;
    if ((HEAP32[$arrayidx404 >> 2] | 0) > ($55 | 0)) HEAP32[$arrayidx404 >> 2] = $55;
    $arrayidx420 = $labelInfo + 131084 + (($mul402 | 1) << 2) | 0;
    $57 = HEAP32[$labelInfo + 1310736 + ($mul381 + 4 << 2) >> 2] | 0;
    if ((HEAP32[$arrayidx420 >> 2] | 0) < ($57 | 0)) HEAP32[$arrayidx420 >> 2] = $57;
    $arrayidx436 = $labelInfo + 131084 + (($mul402 | 2) << 2) | 0;
    $59 = HEAP32[$labelInfo + 1310736 + ($mul381 + 5 << 2) >> 2] | 0;
    if ((HEAP32[$arrayidx436 >> 2] | 0) > ($59 | 0)) HEAP32[$arrayidx436 >> 2] = $59;
    $arrayidx452 = $labelInfo + 131084 + (($mul402 | 3) << 2) | 0;
    $61 = HEAP32[$labelInfo + 1310736 + ($mul381 + 6 << 2) >> 2] | 0;
    if ((HEAP32[$arrayidx452 >> 2] | 0) < ($61 | 0)) HEAP32[$arrayidx452 >> 2] = $61;
    $i$5 = $i$5 + 1 | 0;
   }
   while (1) {
    if (($i$6 | 0) >= (HEAP32[$label_num325 >> 2] | 0)) {
     $retval$0 = 0;
     break L77;
    }
    $arrayidx473 = $labelInfo + 12 + ($i$6 << 2) | 0;
    $mul475 = $i$6 << 1;
    $arrayidx477 = $labelInfo + 655376 + ($mul475 << 3) | 0;
    HEAPF64[$arrayidx477 >> 3] = +HEAPF64[$arrayidx477 >> 3] / +(HEAP32[$arrayidx473 >> 2] | 0);
    $arrayidx483 = $labelInfo + 655376 + (($mul475 | 1) << 3) | 0;
    HEAPF64[$arrayidx483 >> 3] = +HEAPF64[$arrayidx483 >> 3] / +(HEAP32[$arrayidx473 >> 2] | 0);
    $i$6 = $i$6 + 1 | 0;
   }
  }
 } while (0);
 STACKTOP = sp;
 return $retval$0 | 0;
}

function _arLabelingSubDWZ($image, $xsize, $ysize, $image_thresh, $labelInfo) {
 $image = $image | 0;
 $xsize = $xsize | 0;
 $ysize = $ysize | 0;
 $image_thresh = $image_thresh | 0;
 $labelInfo = $labelInfo | 0;
 var $$sink = 0, $0 = 0, $10 = 0, $11 = 0, $14 = 0, $15 = 0, $19 = 0, $20 = 0, $21 = 0, $24 = 0, $25 = 0, $3 = 0, $37 = 0, $38 = 0, $4 = 0, $43 = 0, $45 = 0, $54 = 0, $56 = 0, $58 = 0, $60 = 0, $8 = 0, $9 = 0, $add = 0, $add$ptr129 = 0, $add267 = 0, $add272$sink = 0, $arraydecay = 0, $arrayidx118 = 0, $arrayidx121 = 0, $arrayidx124 = 0, $arrayidx185 = 0, $arrayidx188 = 0, $arrayidx191 = 0, $arrayidx199 = 0, $arrayidx202 = 0, $arrayidx205 = 0, $arrayidx208 = 0, $arrayidx230 = 0, $arrayidx233 = 0, $arrayidx236 = 0, $arrayidx239 = 0, $arrayidx259 = 0, $arrayidx262 = 0, $arrayidx265 = 0, $arrayidx321 = 0, $arrayidx378 = 0, $arrayidx386 = 0, $arrayidx39 = 0, $arrayidx394 = 0, $arrayidx398 = 0, $arrayidx414 = 0, $arrayidx430 = 0, $arrayidx446 = 0, $arrayidx467 = 0, $arrayidx471 = 0, $arrayidx476 = 0, $arrayidx48 = 0, $arrayidx51 = 0, $arrayidx54 = 0, $arrayidx71 = 0, $cmp65 = 0, $cond = 0, $i$0 = 0, $i$1 = 0, $i$2 = 0, $i$3 = 0, $i$4 = 0, $i$5 = 0, $i$6 = 0, $inc276 = 0, $j$0 = 0, $j$1 = 0, $j$2 = 0, $k$0 = 0, $k$1 = 0, $k$2 = 0, $k$3 = 0, $label_num319 = 0, $mul197 = 0, $mul228 = 0, $mul286 = 0, $mul354 = 0, $mul375 = 0, $mul384 = 0, $mul396 = 0, $mul469 = 0, $pnt$0 = 0, $pnt$1 = 0, $pnt1$0 = 0, $pnt1$1 = 0, $pnt2$0 = 0, $pnt2$1 = 0, $pnt2$2 = 0, $pnt2$3 = 0, $pnt_thresh$0 = 0, $pnt_thresh$1 = 0, $retval$0 = 0, $sub = 0, $sub342 = 0, $sub374 = 0, $sub38 = 0, $sub7 = 0, $sub70 = 0, $sub74 = 0, $vararg_buffer = 0, $wk$0 = 0, $wk$1 = 0, $wk$2 = 0, $wk$3 = 0, $wk$4 = 0, $wk_max$0 = 0, $wk_max$1 = 0, $wk_max$2 = 0, $wk_max$3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $vararg_buffer = sp;
 $0 = HEAP32[$labelInfo >> 2] | 0;
 $sub = $ysize + -1 | 0;
 $i$0 = 0;
 $pnt1$0 = $0;
 $pnt2$0 = $0 + ((Math_imul($sub, $xsize) | 0) << 1) | 0;
 while (1) {
  if (($i$0 | 0) >= ($xsize | 0)) break;
  HEAP16[$pnt2$0 >> 1] = 0;
  HEAP16[$pnt1$0 >> 1] = 0;
  $i$0 = $i$0 + 1 | 0;
  $pnt1$0 = $pnt1$0 + 2 | 0;
  $pnt2$0 = $pnt2$0 + 2 | 0;
 }
 $sub7 = $xsize + -1 | 0;
 $i$1 = 0;
 $pnt1$1 = $0;
 $pnt2$1 = $0 + ($sub7 << 1) | 0;
 while (1) {
  if (($i$1 | 0) >= ($ysize | 0)) break;
  HEAP16[$pnt2$1 >> 1] = 0;
  HEAP16[$pnt1$1 >> 1] = 0;
  $i$1 = $i$1 + 1 | 0;
  $pnt1$1 = $pnt1$1 + ($xsize << 1) | 0;
  $pnt2$1 = $pnt2$1 + ($xsize << 1) | 0;
 }
 $arraydecay = $labelInfo + 1179664 | 0;
 $add = $xsize + 1 | 0;
 $sub38 = 0 - $xsize | 0;
 $j$0 = 1;
 $pnt$0 = $image + $add | 0;
 $pnt2$2 = $0 + ($add << 1) | 0;
 $pnt_thresh$0 = $image_thresh + $add | 0;
 $wk_max$0 = 0;
 L9 : while (1) {
  if (($j$0 | 0) < ($sub | 0)) {
   $i$2 = 1;
   $pnt$1 = $pnt$0;
   $pnt2$3 = $pnt2$2;
   $pnt_thresh$1 = $pnt_thresh$0;
   $wk_max$1 = $wk_max$0;
  } else {
   label = 56;
   break;
  }
  while (1) {
   if (($i$2 | 0) >= ($sub7 | 0)) break;
   do if ((HEAPU8[$pnt$1 >> 0] | 0) > (HEAPU8[$pnt_thresh$1 >> 0] | 0)) {
    $arrayidx39 = $pnt2$3 + ($sub38 << 1) | 0;
    $3 = HEAP16[$arrayidx39 >> 1] | 0;
    if ($3 << 16 >> 16 > 0) {
     HEAP16[$pnt2$3 >> 1] = $3;
     $4 = ($3 << 16 >> 16) * 7 | 0;
     $arrayidx48 = $labelInfo + 1310736 + ($4 + -7 << 2) | 0;
     HEAP32[$arrayidx48 >> 2] = (HEAP32[$arrayidx48 >> 2] | 0) + 1;
     $arrayidx51 = $labelInfo + 1310736 + ($4 + -6 << 2) | 0;
     HEAP32[$arrayidx51 >> 2] = (HEAP32[$arrayidx51 >> 2] | 0) + $i$2;
     $arrayidx54 = $labelInfo + 1310736 + ($4 + -5 << 2) | 0;
     HEAP32[$arrayidx54 >> 2] = (HEAP32[$arrayidx54 >> 2] | 0) + $j$0;
     HEAP32[$labelInfo + 1310736 + ($4 + -1 << 2) >> 2] = $j$0;
     $wk_max$3 = $wk_max$1;
     break;
    }
    $8 = HEAP16[$arrayidx39 + 2 >> 1] | 0;
    $9 = HEAP16[$arrayidx39 + -2 >> 1] | 0;
    $cmp65 = $9 << 16 >> 16 > 0;
    $sub74 = ($9 << 16 >> 16) + -1 | 0;
    $add$ptr129 = $pnt2$3 + -2 | 0;
    if ($8 << 16 >> 16 <= 0) {
     if ($cmp65) {
      HEAP16[$pnt2$3 >> 1] = $9;
      $mul228 = $sub74 * 7 | 0;
      $arrayidx230 = $labelInfo + 1310736 + ($mul228 << 2) | 0;
      HEAP32[$arrayidx230 >> 2] = (HEAP32[$arrayidx230 >> 2] | 0) + 1;
      $arrayidx233 = $labelInfo + 1310736 + ($mul228 + 1 << 2) | 0;
      HEAP32[$arrayidx233 >> 2] = (HEAP32[$arrayidx233 >> 2] | 0) + $i$2;
      $arrayidx236 = $labelInfo + 1310736 + ($mul228 + 2 << 2) | 0;
      HEAP32[$arrayidx236 >> 2] = (HEAP32[$arrayidx236 >> 2] | 0) + $j$0;
      $arrayidx239 = $labelInfo + 1310736 + ($mul228 + 4 << 2) | 0;
      if ((HEAP32[$arrayidx239 >> 2] | 0) < ($i$2 | 0)) HEAP32[$arrayidx239 >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($mul228 + 6 << 2) >> 2] = $j$0;
      $wk_max$3 = $wk_max$1;
      break;
     }
     $37 = HEAP16[$add$ptr129 >> 1] | 0;
     if ($37 << 16 >> 16 > 0) {
      HEAP16[$pnt2$3 >> 1] = $37;
      $38 = ($37 << 16 >> 16) * 7 | 0;
      $arrayidx259 = $labelInfo + 1310736 + ($38 + -7 << 2) | 0;
      HEAP32[$arrayidx259 >> 2] = (HEAP32[$arrayidx259 >> 2] | 0) + 1;
      $arrayidx262 = $labelInfo + 1310736 + ($38 + -6 << 2) | 0;
      HEAP32[$arrayidx262 >> 2] = (HEAP32[$arrayidx262 >> 2] | 0) + $i$2;
      $arrayidx265 = $labelInfo + 1310736 + ($38 + -5 << 2) | 0;
      HEAP32[$arrayidx265 >> 2] = (HEAP32[$arrayidx265 >> 2] | 0) + $j$0;
      $add267 = $38 + -3 | 0;
      if ((HEAP32[$labelInfo + 1310736 + ($add267 << 2) >> 2] | 0) < ($i$2 | 0)) {
       $$sink = $i$2;
       $add272$sink = $add267;
       $wk_max$2 = $wk_max$1;
      } else {
       $wk_max$3 = $wk_max$1;
       break;
      }
     } else {
      $inc276 = $wk_max$1 + 1 | 0;
      if (($wk_max$1 | 0) > 32767) {
       label = 50;
       break L9;
      }
      HEAP16[$pnt2$3 >> 1] = $inc276;
      HEAP32[$labelInfo + 1179664 + ($wk_max$1 << 2) >> 2] = $inc276 << 16 >> 16;
      $mul286 = $wk_max$1 * 7 | 0;
      HEAP32[$labelInfo + 1310736 + ($mul286 << 2) >> 2] = 1;
      HEAP32[$labelInfo + 1310736 + ($mul286 + 1 << 2) >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($mul286 + 2 << 2) >> 2] = $j$0;
      HEAP32[$labelInfo + 1310736 + ($mul286 + 3 << 2) >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($mul286 + 4 << 2) >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($mul286 + 5 << 2) >> 2] = $j$0;
      $$sink = $j$0;
      $add272$sink = $mul286 + 6 | 0;
      $wk_max$2 = $inc276;
     }
     HEAP32[$labelInfo + 1310736 + ($add272$sink << 2) >> 2] = $$sink;
     $wk_max$3 = $wk_max$2;
     break;
    }
    $sub70 = ($8 << 16 >> 16) + -1 | 0;
    $arrayidx71 = $labelInfo + 1179664 + ($sub70 << 2) | 0;
    if ($cmp65) {
     $10 = HEAP32[$arrayidx71 >> 2] | 0;
     $11 = HEAP32[$labelInfo + 1179664 + ($sub74 << 2) >> 2] | 0;
     L35 : do if (($10 | 0) > ($11 | 0)) {
      HEAP16[$pnt2$3 >> 1] = $11;
      $k$0 = 0;
      $wk$0 = $arraydecay;
      while (1) {
       if (($k$0 | 0) >= ($wk_max$1 | 0)) {
        $14 = $11;
        break L35;
       }
       if ((HEAP32[$wk$0 >> 2] | 0) == ($10 | 0)) HEAP32[$wk$0 >> 2] = $11;
       $k$0 = $k$0 + 1 | 0;
       $wk$0 = $wk$0 + 4 | 0;
      }
     } else {
      HEAP16[$pnt2$3 >> 1] = $10;
      if (($10 | 0) < ($11 | 0)) {
       $k$1 = 0;
       $wk$1 = $arraydecay;
       while (1) {
        if (($k$1 | 0) >= ($wk_max$1 | 0)) {
         $14 = $10;
         break L35;
        }
        if ((HEAP32[$wk$1 >> 2] | 0) == ($11 | 0)) HEAP32[$wk$1 >> 2] = $10;
        $k$1 = $k$1 + 1 | 0;
        $wk$1 = $wk$1 + 4 | 0;
       }
      } else $14 = $10;
     } while (0);
     $15 = ($14 << 16 >> 16) * 7 | 0;
     $arrayidx118 = $labelInfo + 1310736 + ($15 + -7 << 2) | 0;
     HEAP32[$arrayidx118 >> 2] = (HEAP32[$arrayidx118 >> 2] | 0) + 1;
     $arrayidx121 = $labelInfo + 1310736 + ($15 + -6 << 2) | 0;
     HEAP32[$arrayidx121 >> 2] = (HEAP32[$arrayidx121 >> 2] | 0) + $i$2;
     $arrayidx124 = $labelInfo + 1310736 + ($15 + -5 << 2) | 0;
     HEAP32[$arrayidx124 >> 2] = (HEAP32[$arrayidx124 >> 2] | 0) + $j$0;
     HEAP32[$labelInfo + 1310736 + ($15 + -1 << 2) >> 2] = $j$0;
     $wk_max$3 = $wk_max$1;
     break;
    }
    $19 = HEAP16[$add$ptr129 >> 1] | 0;
    if ($19 << 16 >> 16 <= 0) {
     HEAP16[$pnt2$3 >> 1] = $8;
     $mul197 = $sub70 * 7 | 0;
     $arrayidx199 = $labelInfo + 1310736 + ($mul197 << 2) | 0;
     HEAP32[$arrayidx199 >> 2] = (HEAP32[$arrayidx199 >> 2] | 0) + 1;
     $arrayidx202 = $labelInfo + 1310736 + ($mul197 + 1 << 2) | 0;
     HEAP32[$arrayidx202 >> 2] = (HEAP32[$arrayidx202 >> 2] | 0) + $i$2;
     $arrayidx205 = $labelInfo + 1310736 + ($mul197 + 2 << 2) | 0;
     HEAP32[$arrayidx205 >> 2] = (HEAP32[$arrayidx205 >> 2] | 0) + $j$0;
     $arrayidx208 = $labelInfo + 1310736 + ($mul197 + 3 << 2) | 0;
     if ((HEAP32[$arrayidx208 >> 2] | 0) > ($i$2 | 0)) HEAP32[$arrayidx208 >> 2] = $i$2;
     HEAP32[$labelInfo + 1310736 + ($mul197 + 6 << 2) >> 2] = $j$0;
     $wk_max$3 = $wk_max$1;
     break;
    }
    $20 = HEAP32[$arrayidx71 >> 2] | 0;
    $21 = HEAP32[$labelInfo + 1179664 + (($19 << 16 >> 16) + -1 << 2) >> 2] | 0;
    L58 : do if (($20 | 0) > ($21 | 0)) {
     HEAP16[$pnt2$3 >> 1] = $21;
     $k$2 = 0;
     $wk$2 = $arraydecay;
     while (1) {
      if (($k$2 | 0) >= ($wk_max$1 | 0)) {
       $24 = $21;
       break L58;
      }
      if ((HEAP32[$wk$2 >> 2] | 0) == ($20 | 0)) HEAP32[$wk$2 >> 2] = $21;
      $k$2 = $k$2 + 1 | 0;
      $wk$2 = $wk$2 + 4 | 0;
     }
    } else {
     HEAP16[$pnt2$3 >> 1] = $20;
     if (($20 | 0) < ($21 | 0)) {
      $k$3 = 0;
      $wk$3 = $arraydecay;
      while (1) {
       if (($k$3 | 0) >= ($wk_max$1 | 0)) {
        $24 = $20;
        break L58;
       }
       if ((HEAP32[$wk$3 >> 2] | 0) == ($21 | 0)) HEAP32[$wk$3 >> 2] = $20;
       $k$3 = $k$3 + 1 | 0;
       $wk$3 = $wk$3 + 4 | 0;
      }
     } else $24 = $20;
    } while (0);
    $25 = ($24 << 16 >> 16) * 7 | 0;
    $arrayidx185 = $labelInfo + 1310736 + ($25 + -7 << 2) | 0;
    HEAP32[$arrayidx185 >> 2] = (HEAP32[$arrayidx185 >> 2] | 0) + 1;
    $arrayidx188 = $labelInfo + 1310736 + ($25 + -6 << 2) | 0;
    HEAP32[$arrayidx188 >> 2] = (HEAP32[$arrayidx188 >> 2] | 0) + $i$2;
    $arrayidx191 = $labelInfo + 1310736 + ($25 + -5 << 2) | 0;
    HEAP32[$arrayidx191 >> 2] = (HEAP32[$arrayidx191 >> 2] | 0) + $j$0;
    $wk_max$3 = $wk_max$1;
   } else {
    HEAP16[$pnt2$3 >> 1] = 0;
    $wk_max$3 = $wk_max$1;
   } while (0);
   $i$2 = $i$2 + 1 | 0;
   $pnt$1 = $pnt$1 + 1 | 0;
   $pnt2$3 = $pnt2$3 + 2 | 0;
   $pnt_thresh$1 = $pnt_thresh$1 + 1 | 0;
   $wk_max$1 = $wk_max$3;
  }
  $j$0 = $j$0 + 1 | 0;
  $pnt$0 = $pnt$1 + 2 | 0;
  $pnt2$2 = $pnt2$3 + 4 | 0;
  $pnt_thresh$0 = $pnt_thresh$1 + 2 | 0;
  $wk_max$0 = $wk_max$1;
 }
 L77 : do if ((label | 0) == 50) {
  _arLog(3, 3256, $vararg_buffer);
  $retval$0 = -1;
 } else if ((label | 0) == 56) {
  $arrayidx321 = $labelInfo + 12 | 0;
  $i$3 = 1;
  $j$1 = 1;
  $wk$4 = $arraydecay;
  while (1) {
   if (($i$3 | 0) > ($wk_max$0 | 0)) break;
   $43 = HEAP32[$wk$4 >> 2] | 0;
   if (($43 | 0) == ($i$3 | 0)) {
    $cond = $j$1;
    $j$2 = $j$1 + 1 | 0;
   } else {
    $cond = HEAP32[$labelInfo + 1179664 + ($43 + -1 << 2) >> 2] | 0;
    $j$2 = $j$1;
   }
   HEAP32[$wk$4 >> 2] = $cond;
   $i$3 = $i$3 + 1 | 0;
   $j$1 = $j$2;
   $wk$4 = $wk$4 + 4 | 0;
  }
  $label_num319 = $labelInfo + 8 | 0;
  $sub342 = $j$1 + -1 | 0;
  HEAP32[$label_num319 >> 2] = $sub342;
  if (!$sub342) $retval$0 = 0; else {
   _memset($arrayidx321 | 0, 0, $sub342 << 2 | 0) | 0;
   _memset($labelInfo + 655376 | 0, 0, $sub342 << 4 | 0) | 0;
   $45 = $sub342;
   $i$4 = 0;
   while (1) {
    if (($i$4 | 0) >= ($45 | 0)) {
     $i$5 = 0;
     break;
    }
    $mul354 = $i$4 << 2;
    HEAP32[$labelInfo + 131084 + ($mul354 << 2) >> 2] = $xsize;
    HEAP32[$labelInfo + 131084 + (($mul354 | 1) << 2) >> 2] = 0;
    HEAP32[$labelInfo + 131084 + (($mul354 | 2) << 2) >> 2] = $ysize;
    HEAP32[$labelInfo + 131084 + (($mul354 | 3) << 2) >> 2] = 0;
    $45 = HEAP32[$label_num319 >> 2] | 0;
    $i$4 = $i$4 + 1 | 0;
   }
   while (1) {
    if (($i$5 | 0) >= ($wk_max$0 | 0)) {
     $i$6 = 0;
     break;
    }
    $sub374 = (HEAP32[$labelInfo + 1179664 + ($i$5 << 2) >> 2] | 0) + -1 | 0;
    $mul375 = $i$5 * 7 | 0;
    $arrayidx378 = $labelInfo + 12 + ($sub374 << 2) | 0;
    HEAP32[$arrayidx378 >> 2] = (HEAP32[$arrayidx378 >> 2] | 0) + (HEAP32[$labelInfo + 1310736 + ($mul375 << 2) >> 2] | 0);
    $mul384 = $sub374 << 1;
    $arrayidx386 = $labelInfo + 655376 + ($mul384 << 3) | 0;
    HEAPF64[$arrayidx386 >> 3] = +HEAPF64[$arrayidx386 >> 3] + +(HEAP32[$labelInfo + 1310736 + ($mul375 + 1 << 2) >> 2] | 0);
    $arrayidx394 = $labelInfo + 655376 + (($mul384 | 1) << 3) | 0;
    HEAPF64[$arrayidx394 >> 3] = +HEAPF64[$arrayidx394 >> 3] + +(HEAP32[$labelInfo + 1310736 + ($mul375 + 2 << 2) >> 2] | 0);
    $mul396 = $sub374 << 2;
    $arrayidx398 = $labelInfo + 131084 + ($mul396 << 2) | 0;
    $54 = HEAP32[$labelInfo + 1310736 + ($mul375 + 3 << 2) >> 2] | 0;
    if ((HEAP32[$arrayidx398 >> 2] | 0) > ($54 | 0)) HEAP32[$arrayidx398 >> 2] = $54;
    $arrayidx414 = $labelInfo + 131084 + (($mul396 | 1) << 2) | 0;
    $56 = HEAP32[$labelInfo + 1310736 + ($mul375 + 4 << 2) >> 2] | 0;
    if ((HEAP32[$arrayidx414 >> 2] | 0) < ($56 | 0)) HEAP32[$arrayidx414 >> 2] = $56;
    $arrayidx430 = $labelInfo + 131084 + (($mul396 | 2) << 2) | 0;
    $58 = HEAP32[$labelInfo + 1310736 + ($mul375 + 5 << 2) >> 2] | 0;
    if ((HEAP32[$arrayidx430 >> 2] | 0) > ($58 | 0)) HEAP32[$arrayidx430 >> 2] = $58;
    $arrayidx446 = $labelInfo + 131084 + (($mul396 | 3) << 2) | 0;
    $60 = HEAP32[$labelInfo + 1310736 + ($mul375 + 6 << 2) >> 2] | 0;
    if ((HEAP32[$arrayidx446 >> 2] | 0) < ($60 | 0)) HEAP32[$arrayidx446 >> 2] = $60;
    $i$5 = $i$5 + 1 | 0;
   }
   while (1) {
    if (($i$6 | 0) >= (HEAP32[$label_num319 >> 2] | 0)) {
     $retval$0 = 0;
     break L77;
    }
    $arrayidx467 = $labelInfo + 12 + ($i$6 << 2) | 0;
    $mul469 = $i$6 << 1;
    $arrayidx471 = $labelInfo + 655376 + ($mul469 << 3) | 0;
    HEAPF64[$arrayidx471 >> 3] = +HEAPF64[$arrayidx471 >> 3] / +(HEAP32[$arrayidx467 >> 2] | 0);
    $arrayidx476 = $labelInfo + 655376 + (($mul469 | 1) << 3) | 0;
    HEAPF64[$arrayidx476 >> 3] = +HEAPF64[$arrayidx476 >> 3] / +(HEAP32[$arrayidx467 >> 2] | 0);
    $i$6 = $i$6 + 1 | 0;
   }
  }
 } while (0);
 STACKTOP = sp;
 return $retval$0 | 0;
}

function _arLabelingSubDBZ($image, $xsize, $ysize, $image_thresh, $labelInfo) {
 $image = $image | 0;
 $xsize = $xsize | 0;
 $ysize = $ysize | 0;
 $image_thresh = $image_thresh | 0;
 $labelInfo = $labelInfo | 0;
 var $$sink = 0, $0 = 0, $10 = 0, $11 = 0, $14 = 0, $15 = 0, $19 = 0, $20 = 0, $21 = 0, $24 = 0, $25 = 0, $3 = 0, $37 = 0, $38 = 0, $4 = 0, $43 = 0, $45 = 0, $54 = 0, $56 = 0, $58 = 0, $60 = 0, $8 = 0, $9 = 0, $add = 0, $add$ptr129 = 0, $add267 = 0, $add272$sink = 0, $arraydecay = 0, $arrayidx118 = 0, $arrayidx121 = 0, $arrayidx124 = 0, $arrayidx185 = 0, $arrayidx188 = 0, $arrayidx191 = 0, $arrayidx199 = 0, $arrayidx202 = 0, $arrayidx205 = 0, $arrayidx208 = 0, $arrayidx230 = 0, $arrayidx233 = 0, $arrayidx236 = 0, $arrayidx239 = 0, $arrayidx259 = 0, $arrayidx262 = 0, $arrayidx265 = 0, $arrayidx321 = 0, $arrayidx378 = 0, $arrayidx386 = 0, $arrayidx39 = 0, $arrayidx394 = 0, $arrayidx398 = 0, $arrayidx414 = 0, $arrayidx430 = 0, $arrayidx446 = 0, $arrayidx467 = 0, $arrayidx471 = 0, $arrayidx476 = 0, $arrayidx48 = 0, $arrayidx51 = 0, $arrayidx54 = 0, $arrayidx71 = 0, $cmp65 = 0, $cond = 0, $i$0 = 0, $i$1 = 0, $i$2 = 0, $i$3 = 0, $i$4 = 0, $i$5 = 0, $i$6 = 0, $inc276 = 0, $j$0 = 0, $j$1 = 0, $j$2 = 0, $k$0 = 0, $k$1 = 0, $k$2 = 0, $k$3 = 0, $label_num319 = 0, $mul197 = 0, $mul228 = 0, $mul286 = 0, $mul354 = 0, $mul375 = 0, $mul384 = 0, $mul396 = 0, $mul469 = 0, $pnt$0 = 0, $pnt$1 = 0, $pnt1$0 = 0, $pnt1$1 = 0, $pnt2$0 = 0, $pnt2$1 = 0, $pnt2$2 = 0, $pnt2$3 = 0, $pnt_thresh$0 = 0, $pnt_thresh$1 = 0, $retval$0 = 0, $sub = 0, $sub342 = 0, $sub374 = 0, $sub38 = 0, $sub7 = 0, $sub70 = 0, $sub74 = 0, $vararg_buffer = 0, $wk$0 = 0, $wk$1 = 0, $wk$2 = 0, $wk$3 = 0, $wk$4 = 0, $wk_max$0 = 0, $wk_max$1 = 0, $wk_max$2 = 0, $wk_max$3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $vararg_buffer = sp;
 $0 = HEAP32[$labelInfo >> 2] | 0;
 $sub = $ysize + -1 | 0;
 $i$0 = 0;
 $pnt1$0 = $0;
 $pnt2$0 = $0 + ((Math_imul($sub, $xsize) | 0) << 1) | 0;
 while (1) {
  if (($i$0 | 0) >= ($xsize | 0)) break;
  HEAP16[$pnt2$0 >> 1] = 0;
  HEAP16[$pnt1$0 >> 1] = 0;
  $i$0 = $i$0 + 1 | 0;
  $pnt1$0 = $pnt1$0 + 2 | 0;
  $pnt2$0 = $pnt2$0 + 2 | 0;
 }
 $sub7 = $xsize + -1 | 0;
 $i$1 = 0;
 $pnt1$1 = $0;
 $pnt2$1 = $0 + ($sub7 << 1) | 0;
 while (1) {
  if (($i$1 | 0) >= ($ysize | 0)) break;
  HEAP16[$pnt2$1 >> 1] = 0;
  HEAP16[$pnt1$1 >> 1] = 0;
  $i$1 = $i$1 + 1 | 0;
  $pnt1$1 = $pnt1$1 + ($xsize << 1) | 0;
  $pnt2$1 = $pnt2$1 + ($xsize << 1) | 0;
 }
 $arraydecay = $labelInfo + 1179664 | 0;
 $add = $xsize + 1 | 0;
 $sub38 = 0 - $xsize | 0;
 $j$0 = 1;
 $pnt$0 = $image + $add | 0;
 $pnt2$2 = $0 + ($add << 1) | 0;
 $pnt_thresh$0 = $image_thresh + $add | 0;
 $wk_max$0 = 0;
 L9 : while (1) {
  if (($j$0 | 0) < ($sub | 0)) {
   $i$2 = 1;
   $pnt$1 = $pnt$0;
   $pnt2$3 = $pnt2$2;
   $pnt_thresh$1 = $pnt_thresh$0;
   $wk_max$1 = $wk_max$0;
  } else {
   label = 56;
   break;
  }
  while (1) {
   if (($i$2 | 0) >= ($sub7 | 0)) break;
   do if ((HEAPU8[$pnt$1 >> 0] | 0) > (HEAPU8[$pnt_thresh$1 >> 0] | 0)) {
    HEAP16[$pnt2$3 >> 1] = 0;
    $wk_max$3 = $wk_max$1;
   } else {
    $arrayidx39 = $pnt2$3 + ($sub38 << 1) | 0;
    $3 = HEAP16[$arrayidx39 >> 1] | 0;
    if ($3 << 16 >> 16 > 0) {
     HEAP16[$pnt2$3 >> 1] = $3;
     $4 = ($3 << 16 >> 16) * 7 | 0;
     $arrayidx48 = $labelInfo + 1310736 + ($4 + -7 << 2) | 0;
     HEAP32[$arrayidx48 >> 2] = (HEAP32[$arrayidx48 >> 2] | 0) + 1;
     $arrayidx51 = $labelInfo + 1310736 + ($4 + -6 << 2) | 0;
     HEAP32[$arrayidx51 >> 2] = (HEAP32[$arrayidx51 >> 2] | 0) + $i$2;
     $arrayidx54 = $labelInfo + 1310736 + ($4 + -5 << 2) | 0;
     HEAP32[$arrayidx54 >> 2] = (HEAP32[$arrayidx54 >> 2] | 0) + $j$0;
     HEAP32[$labelInfo + 1310736 + ($4 + -1 << 2) >> 2] = $j$0;
     $wk_max$3 = $wk_max$1;
     break;
    }
    $8 = HEAP16[$arrayidx39 + 2 >> 1] | 0;
    $9 = HEAP16[$arrayidx39 + -2 >> 1] | 0;
    $cmp65 = $9 << 16 >> 16 > 0;
    $sub74 = ($9 << 16 >> 16) + -1 | 0;
    $add$ptr129 = $pnt2$3 + -2 | 0;
    if ($8 << 16 >> 16 <= 0) {
     if ($cmp65) {
      HEAP16[$pnt2$3 >> 1] = $9;
      $mul228 = $sub74 * 7 | 0;
      $arrayidx230 = $labelInfo + 1310736 + ($mul228 << 2) | 0;
      HEAP32[$arrayidx230 >> 2] = (HEAP32[$arrayidx230 >> 2] | 0) + 1;
      $arrayidx233 = $labelInfo + 1310736 + ($mul228 + 1 << 2) | 0;
      HEAP32[$arrayidx233 >> 2] = (HEAP32[$arrayidx233 >> 2] | 0) + $i$2;
      $arrayidx236 = $labelInfo + 1310736 + ($mul228 + 2 << 2) | 0;
      HEAP32[$arrayidx236 >> 2] = (HEAP32[$arrayidx236 >> 2] | 0) + $j$0;
      $arrayidx239 = $labelInfo + 1310736 + ($mul228 + 4 << 2) | 0;
      if ((HEAP32[$arrayidx239 >> 2] | 0) < ($i$2 | 0)) HEAP32[$arrayidx239 >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($mul228 + 6 << 2) >> 2] = $j$0;
      $wk_max$3 = $wk_max$1;
      break;
     }
     $37 = HEAP16[$add$ptr129 >> 1] | 0;
     if ($37 << 16 >> 16 > 0) {
      HEAP16[$pnt2$3 >> 1] = $37;
      $38 = ($37 << 16 >> 16) * 7 | 0;
      $arrayidx259 = $labelInfo + 1310736 + ($38 + -7 << 2) | 0;
      HEAP32[$arrayidx259 >> 2] = (HEAP32[$arrayidx259 >> 2] | 0) + 1;
      $arrayidx262 = $labelInfo + 1310736 + ($38 + -6 << 2) | 0;
      HEAP32[$arrayidx262 >> 2] = (HEAP32[$arrayidx262 >> 2] | 0) + $i$2;
      $arrayidx265 = $labelInfo + 1310736 + ($38 + -5 << 2) | 0;
      HEAP32[$arrayidx265 >> 2] = (HEAP32[$arrayidx265 >> 2] | 0) + $j$0;
      $add267 = $38 + -3 | 0;
      if ((HEAP32[$labelInfo + 1310736 + ($add267 << 2) >> 2] | 0) < ($i$2 | 0)) {
       $$sink = $i$2;
       $add272$sink = $add267;
       $wk_max$2 = $wk_max$1;
      } else {
       $wk_max$3 = $wk_max$1;
       break;
      }
     } else {
      $inc276 = $wk_max$1 + 1 | 0;
      if (($wk_max$1 | 0) > 32767) {
       label = 50;
       break L9;
      }
      HEAP16[$pnt2$3 >> 1] = $inc276;
      HEAP32[$labelInfo + 1179664 + ($wk_max$1 << 2) >> 2] = $inc276 << 16 >> 16;
      $mul286 = $wk_max$1 * 7 | 0;
      HEAP32[$labelInfo + 1310736 + ($mul286 << 2) >> 2] = 1;
      HEAP32[$labelInfo + 1310736 + ($mul286 + 1 << 2) >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($mul286 + 2 << 2) >> 2] = $j$0;
      HEAP32[$labelInfo + 1310736 + ($mul286 + 3 << 2) >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($mul286 + 4 << 2) >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($mul286 + 5 << 2) >> 2] = $j$0;
      $$sink = $j$0;
      $add272$sink = $mul286 + 6 | 0;
      $wk_max$2 = $inc276;
     }
     HEAP32[$labelInfo + 1310736 + ($add272$sink << 2) >> 2] = $$sink;
     $wk_max$3 = $wk_max$2;
     break;
    }
    $sub70 = ($8 << 16 >> 16) + -1 | 0;
    $arrayidx71 = $labelInfo + 1179664 + ($sub70 << 2) | 0;
    if ($cmp65) {
     $10 = HEAP32[$arrayidx71 >> 2] | 0;
     $11 = HEAP32[$labelInfo + 1179664 + ($sub74 << 2) >> 2] | 0;
     L36 : do if (($10 | 0) > ($11 | 0)) {
      HEAP16[$pnt2$3 >> 1] = $11;
      $k$0 = 0;
      $wk$0 = $arraydecay;
      while (1) {
       if (($k$0 | 0) >= ($wk_max$1 | 0)) {
        $14 = $11;
        break L36;
       }
       if ((HEAP32[$wk$0 >> 2] | 0) == ($10 | 0)) HEAP32[$wk$0 >> 2] = $11;
       $k$0 = $k$0 + 1 | 0;
       $wk$0 = $wk$0 + 4 | 0;
      }
     } else {
      HEAP16[$pnt2$3 >> 1] = $10;
      if (($10 | 0) < ($11 | 0)) {
       $k$1 = 0;
       $wk$1 = $arraydecay;
       while (1) {
        if (($k$1 | 0) >= ($wk_max$1 | 0)) {
         $14 = $10;
         break L36;
        }
        if ((HEAP32[$wk$1 >> 2] | 0) == ($11 | 0)) HEAP32[$wk$1 >> 2] = $10;
        $k$1 = $k$1 + 1 | 0;
        $wk$1 = $wk$1 + 4 | 0;
       }
      } else $14 = $10;
     } while (0);
     $15 = ($14 << 16 >> 16) * 7 | 0;
     $arrayidx118 = $labelInfo + 1310736 + ($15 + -7 << 2) | 0;
     HEAP32[$arrayidx118 >> 2] = (HEAP32[$arrayidx118 >> 2] | 0) + 1;
     $arrayidx121 = $labelInfo + 1310736 + ($15 + -6 << 2) | 0;
     HEAP32[$arrayidx121 >> 2] = (HEAP32[$arrayidx121 >> 2] | 0) + $i$2;
     $arrayidx124 = $labelInfo + 1310736 + ($15 + -5 << 2) | 0;
     HEAP32[$arrayidx124 >> 2] = (HEAP32[$arrayidx124 >> 2] | 0) + $j$0;
     HEAP32[$labelInfo + 1310736 + ($15 + -1 << 2) >> 2] = $j$0;
     $wk_max$3 = $wk_max$1;
     break;
    }
    $19 = HEAP16[$add$ptr129 >> 1] | 0;
    if ($19 << 16 >> 16 <= 0) {
     HEAP16[$pnt2$3 >> 1] = $8;
     $mul197 = $sub70 * 7 | 0;
     $arrayidx199 = $labelInfo + 1310736 + ($mul197 << 2) | 0;
     HEAP32[$arrayidx199 >> 2] = (HEAP32[$arrayidx199 >> 2] | 0) + 1;
     $arrayidx202 = $labelInfo + 1310736 + ($mul197 + 1 << 2) | 0;
     HEAP32[$arrayidx202 >> 2] = (HEAP32[$arrayidx202 >> 2] | 0) + $i$2;
     $arrayidx205 = $labelInfo + 1310736 + ($mul197 + 2 << 2) | 0;
     HEAP32[$arrayidx205 >> 2] = (HEAP32[$arrayidx205 >> 2] | 0) + $j$0;
     $arrayidx208 = $labelInfo + 1310736 + ($mul197 + 3 << 2) | 0;
     if ((HEAP32[$arrayidx208 >> 2] | 0) > ($i$2 | 0)) HEAP32[$arrayidx208 >> 2] = $i$2;
     HEAP32[$labelInfo + 1310736 + ($mul197 + 6 << 2) >> 2] = $j$0;
     $wk_max$3 = $wk_max$1;
     break;
    }
    $20 = HEAP32[$arrayidx71 >> 2] | 0;
    $21 = HEAP32[$labelInfo + 1179664 + (($19 << 16 >> 16) + -1 << 2) >> 2] | 0;
    L59 : do if (($20 | 0) > ($21 | 0)) {
     HEAP16[$pnt2$3 >> 1] = $21;
     $k$2 = 0;
     $wk$2 = $arraydecay;
     while (1) {
      if (($k$2 | 0) >= ($wk_max$1 | 0)) {
       $24 = $21;
       break L59;
      }
      if ((HEAP32[$wk$2 >> 2] | 0) == ($20 | 0)) HEAP32[$wk$2 >> 2] = $21;
      $k$2 = $k$2 + 1 | 0;
      $wk$2 = $wk$2 + 4 | 0;
     }
    } else {
     HEAP16[$pnt2$3 >> 1] = $20;
     if (($20 | 0) < ($21 | 0)) {
      $k$3 = 0;
      $wk$3 = $arraydecay;
      while (1) {
       if (($k$3 | 0) >= ($wk_max$1 | 0)) {
        $24 = $20;
        break L59;
       }
       if ((HEAP32[$wk$3 >> 2] | 0) == ($21 | 0)) HEAP32[$wk$3 >> 2] = $20;
       $k$3 = $k$3 + 1 | 0;
       $wk$3 = $wk$3 + 4 | 0;
      }
     } else $24 = $20;
    } while (0);
    $25 = ($24 << 16 >> 16) * 7 | 0;
    $arrayidx185 = $labelInfo + 1310736 + ($25 + -7 << 2) | 0;
    HEAP32[$arrayidx185 >> 2] = (HEAP32[$arrayidx185 >> 2] | 0) + 1;
    $arrayidx188 = $labelInfo + 1310736 + ($25 + -6 << 2) | 0;
    HEAP32[$arrayidx188 >> 2] = (HEAP32[$arrayidx188 >> 2] | 0) + $i$2;
    $arrayidx191 = $labelInfo + 1310736 + ($25 + -5 << 2) | 0;
    HEAP32[$arrayidx191 >> 2] = (HEAP32[$arrayidx191 >> 2] | 0) + $j$0;
    $wk_max$3 = $wk_max$1;
   } while (0);
   $i$2 = $i$2 + 1 | 0;
   $pnt$1 = $pnt$1 + 1 | 0;
   $pnt2$3 = $pnt2$3 + 2 | 0;
   $pnt_thresh$1 = $pnt_thresh$1 + 1 | 0;
   $wk_max$1 = $wk_max$3;
  }
  $j$0 = $j$0 + 1 | 0;
  $pnt$0 = $pnt$1 + 2 | 0;
  $pnt2$2 = $pnt2$3 + 4 | 0;
  $pnt_thresh$0 = $pnt_thresh$1 + 2 | 0;
  $wk_max$0 = $wk_max$1;
 }
 L77 : do if ((label | 0) == 50) {
  _arLog(3, 3256, $vararg_buffer);
  $retval$0 = -1;
 } else if ((label | 0) == 56) {
  $arrayidx321 = $labelInfo + 12 | 0;
  $i$3 = 1;
  $j$1 = 1;
  $wk$4 = $arraydecay;
  while (1) {
   if (($i$3 | 0) > ($wk_max$0 | 0)) break;
   $43 = HEAP32[$wk$4 >> 2] | 0;
   if (($43 | 0) == ($i$3 | 0)) {
    $cond = $j$1;
    $j$2 = $j$1 + 1 | 0;
   } else {
    $cond = HEAP32[$labelInfo + 1179664 + ($43 + -1 << 2) >> 2] | 0;
    $j$2 = $j$1;
   }
   HEAP32[$wk$4 >> 2] = $cond;
   $i$3 = $i$3 + 1 | 0;
   $j$1 = $j$2;
   $wk$4 = $wk$4 + 4 | 0;
  }
  $label_num319 = $labelInfo + 8 | 0;
  $sub342 = $j$1 + -1 | 0;
  HEAP32[$label_num319 >> 2] = $sub342;
  if (!$sub342) $retval$0 = 0; else {
   _memset($arrayidx321 | 0, 0, $sub342 << 2 | 0) | 0;
   _memset($labelInfo + 655376 | 0, 0, $sub342 << 4 | 0) | 0;
   $45 = $sub342;
   $i$4 = 0;
   while (1) {
    if (($i$4 | 0) >= ($45 | 0)) {
     $i$5 = 0;
     break;
    }
    $mul354 = $i$4 << 2;
    HEAP32[$labelInfo + 131084 + ($mul354 << 2) >> 2] = $xsize;
    HEAP32[$labelInfo + 131084 + (($mul354 | 1) << 2) >> 2] = 0;
    HEAP32[$labelInfo + 131084 + (($mul354 | 2) << 2) >> 2] = $ysize;
    HEAP32[$labelInfo + 131084 + (($mul354 | 3) << 2) >> 2] = 0;
    $45 = HEAP32[$label_num319 >> 2] | 0;
    $i$4 = $i$4 + 1 | 0;
   }
   while (1) {
    if (($i$5 | 0) >= ($wk_max$0 | 0)) {
     $i$6 = 0;
     break;
    }
    $sub374 = (HEAP32[$labelInfo + 1179664 + ($i$5 << 2) >> 2] | 0) + -1 | 0;
    $mul375 = $i$5 * 7 | 0;
    $arrayidx378 = $labelInfo + 12 + ($sub374 << 2) | 0;
    HEAP32[$arrayidx378 >> 2] = (HEAP32[$arrayidx378 >> 2] | 0) + (HEAP32[$labelInfo + 1310736 + ($mul375 << 2) >> 2] | 0);
    $mul384 = $sub374 << 1;
    $arrayidx386 = $labelInfo + 655376 + ($mul384 << 3) | 0;
    HEAPF64[$arrayidx386 >> 3] = +HEAPF64[$arrayidx386 >> 3] + +(HEAP32[$labelInfo + 1310736 + ($mul375 + 1 << 2) >> 2] | 0);
    $arrayidx394 = $labelInfo + 655376 + (($mul384 | 1) << 3) | 0;
    HEAPF64[$arrayidx394 >> 3] = +HEAPF64[$arrayidx394 >> 3] + +(HEAP32[$labelInfo + 1310736 + ($mul375 + 2 << 2) >> 2] | 0);
    $mul396 = $sub374 << 2;
    $arrayidx398 = $labelInfo + 131084 + ($mul396 << 2) | 0;
    $54 = HEAP32[$labelInfo + 1310736 + ($mul375 + 3 << 2) >> 2] | 0;
    if ((HEAP32[$arrayidx398 >> 2] | 0) > ($54 | 0)) HEAP32[$arrayidx398 >> 2] = $54;
    $arrayidx414 = $labelInfo + 131084 + (($mul396 | 1) << 2) | 0;
    $56 = HEAP32[$labelInfo + 1310736 + ($mul375 + 4 << 2) >> 2] | 0;
    if ((HEAP32[$arrayidx414 >> 2] | 0) < ($56 | 0)) HEAP32[$arrayidx414 >> 2] = $56;
    $arrayidx430 = $labelInfo + 131084 + (($mul396 | 2) << 2) | 0;
    $58 = HEAP32[$labelInfo + 1310736 + ($mul375 + 5 << 2) >> 2] | 0;
    if ((HEAP32[$arrayidx430 >> 2] | 0) > ($58 | 0)) HEAP32[$arrayidx430 >> 2] = $58;
    $arrayidx446 = $labelInfo + 131084 + (($mul396 | 3) << 2) | 0;
    $60 = HEAP32[$labelInfo + 1310736 + ($mul375 + 6 << 2) >> 2] | 0;
    if ((HEAP32[$arrayidx446 >> 2] | 0) < ($60 | 0)) HEAP32[$arrayidx446 >> 2] = $60;
    $i$5 = $i$5 + 1 | 0;
   }
   while (1) {
    if (($i$6 | 0) >= (HEAP32[$label_num319 >> 2] | 0)) {
     $retval$0 = 0;
     break L77;
    }
    $arrayidx467 = $labelInfo + 12 + ($i$6 << 2) | 0;
    $mul469 = $i$6 << 1;
    $arrayidx471 = $labelInfo + 655376 + ($mul469 << 3) | 0;
    HEAPF64[$arrayidx471 >> 3] = +HEAPF64[$arrayidx471 >> 3] / +(HEAP32[$arrayidx467 >> 2] | 0);
    $arrayidx476 = $labelInfo + 655376 + (($mul469 | 1) << 3) | 0;
    HEAPF64[$arrayidx476 >> 3] = +HEAPF64[$arrayidx476 >> 3] / +(HEAP32[$arrayidx467 >> 2] | 0);
    $i$6 = $i$6 + 1 | 0;
   }
  }
 } while (0);
 STACKTOP = sp;
 return $retval$0 | 0;
}

function _arLabelingSubDWR3CA4444($image, $xsize, $ysize, $labelingThresh, $labelInfo) {
 $image = $image | 0;
 $xsize = $xsize | 0;
 $ysize = $ysize | 0;
 $labelingThresh = $labelingThresh | 0;
 $labelInfo = $labelInfo | 0;
 var $$sink = 0, $0 = 0, $10 = 0, $11 = 0, $12 = 0, $15 = 0, $16 = 0, $20 = 0, $21 = 0, $22 = 0, $25 = 0, $26 = 0, $38 = 0, $39 = 0, $4 = 0, $44 = 0, $46 = 0, $5 = 0, $55 = 0, $57 = 0, $59 = 0, $61 = 0, $9 = 0, $add = 0, $add$ptr136 = 0, $add274 = 0, $add279$sink = 0, $arraydecay = 0, $arrayidx125 = 0, $arrayidx128 = 0, $arrayidx131 = 0, $arrayidx192 = 0, $arrayidx195 = 0, $arrayidx198 = 0, $arrayidx206 = 0, $arrayidx209 = 0, $arrayidx212 = 0, $arrayidx215 = 0, $arrayidx237 = 0, $arrayidx240 = 0, $arrayidx243 = 0, $arrayidx246 = 0, $arrayidx266 = 0, $arrayidx269 = 0, $arrayidx272 = 0, $arrayidx326 = 0, $arrayidx383 = 0, $arrayidx391 = 0, $arrayidx399 = 0, $arrayidx403 = 0, $arrayidx419 = 0, $arrayidx435 = 0, $arrayidx451 = 0, $arrayidx46 = 0, $arrayidx472 = 0, $arrayidx476 = 0, $arrayidx481 = 0, $arrayidx55 = 0, $arrayidx58 = 0, $arrayidx61 = 0, $arrayidx78 = 0, $cmp72 = 0, $cond = 0, $conv = 0, $i$0 = 0, $i$1 = 0, $i$2 = 0, $i$3 = 0, $i$4 = 0, $i$5 = 0, $i$6 = 0, $inc283 = 0, $j$0 = 0, $j$1 = 0, $j$2 = 0, $k$0 = 0, $k$1 = 0, $k$2 = 0, $k$3 = 0, $label_num324 = 0, $mul = 0, $mul204 = 0, $mul235 = 0, $mul293 = 0, $mul359 = 0, $mul380 = 0, $mul389 = 0, $mul401 = 0, $mul474 = 0, $pnt$0 = 0, $pnt$1 = 0, $pnt1$0 = 0, $pnt1$1 = 0, $pnt2$0 = 0, $pnt2$1 = 0, $pnt2$2 = 0, $pnt2$3 = 0, $retval$0 = 0, $sub = 0, $sub347 = 0, $sub379 = 0, $sub45 = 0, $sub77 = 0, $sub8 = 0, $sub81 = 0, $vararg_buffer = 0, $wk$0 = 0, $wk$1 = 0, $wk$2 = 0, $wk$3 = 0, $wk$4 = 0, $wk_max$0 = 0, $wk_max$1 = 0, $wk_max$2 = 0, $wk_max$3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $vararg_buffer = sp;
 $0 = HEAP32[$labelInfo >> 2] | 0;
 $sub = $ysize + -1 | 0;
 $i$0 = 0;
 $pnt1$0 = $0;
 $pnt2$0 = $0 + ((Math_imul($sub, $xsize) | 0) << 1) | 0;
 while (1) {
  if (($i$0 | 0) >= ($xsize | 0)) break;
  HEAP16[$pnt2$0 >> 1] = 0;
  HEAP16[$pnt1$0 >> 1] = 0;
  $i$0 = $i$0 + 1 | 0;
  $pnt1$0 = $pnt1$0 + 2 | 0;
  $pnt2$0 = $pnt2$0 + 2 | 0;
 }
 $mul = $labelingThresh * 3 | 0;
 $sub8 = $xsize + -1 | 0;
 $i$1 = 0;
 $pnt1$1 = $0;
 $pnt2$1 = $0 + ($sub8 << 1) | 0;
 while (1) {
  if (($i$1 | 0) >= ($ysize | 0)) break;
  HEAP16[$pnt2$1 >> 1] = 0;
  HEAP16[$pnt1$1 >> 1] = 0;
  $i$1 = $i$1 + 1 | 0;
  $pnt1$1 = $pnt1$1 + ($xsize << 1) | 0;
  $pnt2$1 = $pnt2$1 + ($xsize << 1) | 0;
 }
 $arraydecay = $labelInfo + 1179664 | 0;
 $add = $xsize + 1 | 0;
 $sub45 = 0 - $xsize | 0;
 $j$0 = 1;
 $pnt$0 = $image + ($add << 1) | 0;
 $pnt2$2 = $0 + ($add << 1) | 0;
 $wk_max$0 = 0;
 L9 : while (1) {
  if (($j$0 | 0) < ($sub | 0)) {
   $i$2 = 1;
   $pnt$1 = $pnt$0;
   $pnt2$3 = $pnt2$2;
   $wk_max$1 = $wk_max$0;
  } else {
   label = 56;
   break;
  }
  while (1) {
   if (($i$2 | 0) >= ($sub8 | 0)) break;
   $conv = HEAPU8[$pnt$1 >> 0] | 0;
   do if ((($conv & 240) + 24 + ($conv << 4 & 240) + (HEAP8[$pnt$1 + 1 >> 0] & -16 & 255) | 0) > ($mul | 0)) {
    $arrayidx46 = $pnt2$3 + ($sub45 << 1) | 0;
    $4 = HEAP16[$arrayidx46 >> 1] | 0;
    if ($4 << 16 >> 16 > 0) {
     HEAP16[$pnt2$3 >> 1] = $4;
     $5 = ($4 << 16 >> 16) * 7 | 0;
     $arrayidx55 = $labelInfo + 1310736 + ($5 + -7 << 2) | 0;
     HEAP32[$arrayidx55 >> 2] = (HEAP32[$arrayidx55 >> 2] | 0) + 1;
     $arrayidx58 = $labelInfo + 1310736 + ($5 + -6 << 2) | 0;
     HEAP32[$arrayidx58 >> 2] = (HEAP32[$arrayidx58 >> 2] | 0) + $i$2;
     $arrayidx61 = $labelInfo + 1310736 + ($5 + -5 << 2) | 0;
     HEAP32[$arrayidx61 >> 2] = (HEAP32[$arrayidx61 >> 2] | 0) + $j$0;
     HEAP32[$labelInfo + 1310736 + ($5 + -1 << 2) >> 2] = $j$0;
     $wk_max$3 = $wk_max$1;
     break;
    }
    $9 = HEAP16[$arrayidx46 + 2 >> 1] | 0;
    $10 = HEAP16[$arrayidx46 + -2 >> 1] | 0;
    $cmp72 = $10 << 16 >> 16 > 0;
    $add$ptr136 = $pnt2$3 + -2 | 0;
    $sub81 = ($10 << 16 >> 16) + -1 | 0;
    if ($9 << 16 >> 16 <= 0) {
     if ($cmp72) {
      HEAP16[$pnt2$3 >> 1] = $10;
      $mul235 = $sub81 * 7 | 0;
      $arrayidx237 = $labelInfo + 1310736 + ($mul235 << 2) | 0;
      HEAP32[$arrayidx237 >> 2] = (HEAP32[$arrayidx237 >> 2] | 0) + 1;
      $arrayidx240 = $labelInfo + 1310736 + ($mul235 + 1 << 2) | 0;
      HEAP32[$arrayidx240 >> 2] = (HEAP32[$arrayidx240 >> 2] | 0) + $i$2;
      $arrayidx243 = $labelInfo + 1310736 + ($mul235 + 2 << 2) | 0;
      HEAP32[$arrayidx243 >> 2] = (HEAP32[$arrayidx243 >> 2] | 0) + $j$0;
      $arrayidx246 = $labelInfo + 1310736 + ($mul235 + 4 << 2) | 0;
      if ((HEAP32[$arrayidx246 >> 2] | 0) < ($i$2 | 0)) HEAP32[$arrayidx246 >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($mul235 + 6 << 2) >> 2] = $j$0;
      $wk_max$3 = $wk_max$1;
      break;
     }
     $38 = HEAP16[$add$ptr136 >> 1] | 0;
     if ($38 << 16 >> 16 > 0) {
      HEAP16[$pnt2$3 >> 1] = $38;
      $39 = ($38 << 16 >> 16) * 7 | 0;
      $arrayidx266 = $labelInfo + 1310736 + ($39 + -7 << 2) | 0;
      HEAP32[$arrayidx266 >> 2] = (HEAP32[$arrayidx266 >> 2] | 0) + 1;
      $arrayidx269 = $labelInfo + 1310736 + ($39 + -6 << 2) | 0;
      HEAP32[$arrayidx269 >> 2] = (HEAP32[$arrayidx269 >> 2] | 0) + $i$2;
      $arrayidx272 = $labelInfo + 1310736 + ($39 + -5 << 2) | 0;
      HEAP32[$arrayidx272 >> 2] = (HEAP32[$arrayidx272 >> 2] | 0) + $j$0;
      $add274 = $39 + -3 | 0;
      if ((HEAP32[$labelInfo + 1310736 + ($add274 << 2) >> 2] | 0) < ($i$2 | 0)) {
       $$sink = $i$2;
       $add279$sink = $add274;
       $wk_max$2 = $wk_max$1;
      } else {
       $wk_max$3 = $wk_max$1;
       break;
      }
     } else {
      $inc283 = $wk_max$1 + 1 | 0;
      if (($wk_max$1 | 0) > 32767) {
       label = 50;
       break L9;
      }
      HEAP16[$pnt2$3 >> 1] = $inc283;
      HEAP32[$labelInfo + 1179664 + ($wk_max$1 << 2) >> 2] = $inc283 << 16 >> 16;
      $mul293 = $wk_max$1 * 7 | 0;
      HEAP32[$labelInfo + 1310736 + ($mul293 << 2) >> 2] = 1;
      HEAP32[$labelInfo + 1310736 + ($mul293 + 1 << 2) >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($mul293 + 2 << 2) >> 2] = $j$0;
      HEAP32[$labelInfo + 1310736 + ($mul293 + 3 << 2) >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($mul293 + 4 << 2) >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($mul293 + 5 << 2) >> 2] = $j$0;
      $$sink = $j$0;
      $add279$sink = $mul293 + 6 | 0;
      $wk_max$2 = $inc283;
     }
     HEAP32[$labelInfo + 1310736 + ($add279$sink << 2) >> 2] = $$sink;
     $wk_max$3 = $wk_max$2;
     break;
    }
    $sub77 = ($9 << 16 >> 16) + -1 | 0;
    $arrayidx78 = $labelInfo + 1179664 + ($sub77 << 2) | 0;
    if ($cmp72) {
     $11 = HEAP32[$arrayidx78 >> 2] | 0;
     $12 = HEAP32[$labelInfo + 1179664 + ($sub81 << 2) >> 2] | 0;
     L35 : do if (($11 | 0) > ($12 | 0)) {
      HEAP16[$pnt2$3 >> 1] = $12;
      $k$0 = 0;
      $wk$0 = $arraydecay;
      while (1) {
       if (($k$0 | 0) >= ($wk_max$1 | 0)) {
        $15 = $12;
        break L35;
       }
       if ((HEAP32[$wk$0 >> 2] | 0) == ($11 | 0)) HEAP32[$wk$0 >> 2] = $12;
       $k$0 = $k$0 + 1 | 0;
       $wk$0 = $wk$0 + 4 | 0;
      }
     } else {
      HEAP16[$pnt2$3 >> 1] = $11;
      if (($11 | 0) < ($12 | 0)) {
       $k$1 = 0;
       $wk$1 = $arraydecay;
       while (1) {
        if (($k$1 | 0) >= ($wk_max$1 | 0)) {
         $15 = $11;
         break L35;
        }
        if ((HEAP32[$wk$1 >> 2] | 0) == ($12 | 0)) HEAP32[$wk$1 >> 2] = $11;
        $k$1 = $k$1 + 1 | 0;
        $wk$1 = $wk$1 + 4 | 0;
       }
      } else $15 = $11;
     } while (0);
     $16 = ($15 << 16 >> 16) * 7 | 0;
     $arrayidx125 = $labelInfo + 1310736 + ($16 + -7 << 2) | 0;
     HEAP32[$arrayidx125 >> 2] = (HEAP32[$arrayidx125 >> 2] | 0) + 1;
     $arrayidx128 = $labelInfo + 1310736 + ($16 + -6 << 2) | 0;
     HEAP32[$arrayidx128 >> 2] = (HEAP32[$arrayidx128 >> 2] | 0) + $i$2;
     $arrayidx131 = $labelInfo + 1310736 + ($16 + -5 << 2) | 0;
     HEAP32[$arrayidx131 >> 2] = (HEAP32[$arrayidx131 >> 2] | 0) + $j$0;
     HEAP32[$labelInfo + 1310736 + ($16 + -1 << 2) >> 2] = $j$0;
     $wk_max$3 = $wk_max$1;
     break;
    }
    $20 = HEAP16[$add$ptr136 >> 1] | 0;
    if ($20 << 16 >> 16 <= 0) {
     HEAP16[$pnt2$3 >> 1] = $9;
     $mul204 = $sub77 * 7 | 0;
     $arrayidx206 = $labelInfo + 1310736 + ($mul204 << 2) | 0;
     HEAP32[$arrayidx206 >> 2] = (HEAP32[$arrayidx206 >> 2] | 0) + 1;
     $arrayidx209 = $labelInfo + 1310736 + ($mul204 + 1 << 2) | 0;
     HEAP32[$arrayidx209 >> 2] = (HEAP32[$arrayidx209 >> 2] | 0) + $i$2;
     $arrayidx212 = $labelInfo + 1310736 + ($mul204 + 2 << 2) | 0;
     HEAP32[$arrayidx212 >> 2] = (HEAP32[$arrayidx212 >> 2] | 0) + $j$0;
     $arrayidx215 = $labelInfo + 1310736 + ($mul204 + 3 << 2) | 0;
     if ((HEAP32[$arrayidx215 >> 2] | 0) > ($i$2 | 0)) HEAP32[$arrayidx215 >> 2] = $i$2;
     HEAP32[$labelInfo + 1310736 + ($mul204 + 6 << 2) >> 2] = $j$0;
     $wk_max$3 = $wk_max$1;
     break;
    }
    $21 = HEAP32[$arrayidx78 >> 2] | 0;
    $22 = HEAP32[$labelInfo + 1179664 + (($20 << 16 >> 16) + -1 << 2) >> 2] | 0;
    L58 : do if (($21 | 0) > ($22 | 0)) {
     HEAP16[$pnt2$3 >> 1] = $22;
     $k$2 = 0;
     $wk$2 = $arraydecay;
     while (1) {
      if (($k$2 | 0) >= ($wk_max$1 | 0)) {
       $25 = $22;
       break L58;
      }
      if ((HEAP32[$wk$2 >> 2] | 0) == ($21 | 0)) HEAP32[$wk$2 >> 2] = $22;
      $k$2 = $k$2 + 1 | 0;
      $wk$2 = $wk$2 + 4 | 0;
     }
    } else {
     HEAP16[$pnt2$3 >> 1] = $21;
     if (($21 | 0) < ($22 | 0)) {
      $k$3 = 0;
      $wk$3 = $arraydecay;
      while (1) {
       if (($k$3 | 0) >= ($wk_max$1 | 0)) {
        $25 = $21;
        break L58;
       }
       if ((HEAP32[$wk$3 >> 2] | 0) == ($22 | 0)) HEAP32[$wk$3 >> 2] = $21;
       $k$3 = $k$3 + 1 | 0;
       $wk$3 = $wk$3 + 4 | 0;
      }
     } else $25 = $21;
    } while (0);
    $26 = ($25 << 16 >> 16) * 7 | 0;
    $arrayidx192 = $labelInfo + 1310736 + ($26 + -7 << 2) | 0;
    HEAP32[$arrayidx192 >> 2] = (HEAP32[$arrayidx192 >> 2] | 0) + 1;
    $arrayidx195 = $labelInfo + 1310736 + ($26 + -6 << 2) | 0;
    HEAP32[$arrayidx195 >> 2] = (HEAP32[$arrayidx195 >> 2] | 0) + $i$2;
    $arrayidx198 = $labelInfo + 1310736 + ($26 + -5 << 2) | 0;
    HEAP32[$arrayidx198 >> 2] = (HEAP32[$arrayidx198 >> 2] | 0) + $j$0;
    $wk_max$3 = $wk_max$1;
   } else {
    HEAP16[$pnt2$3 >> 1] = 0;
    $wk_max$3 = $wk_max$1;
   } while (0);
   $i$2 = $i$2 + 1 | 0;
   $pnt$1 = $pnt$1 + 2 | 0;
   $pnt2$3 = $pnt2$3 + 2 | 0;
   $wk_max$1 = $wk_max$3;
  }
  $j$0 = $j$0 + 1 | 0;
  $pnt$0 = $pnt$1 + 4 | 0;
  $pnt2$2 = $pnt2$3 + 4 | 0;
  $wk_max$0 = $wk_max$1;
 }
 L77 : do if ((label | 0) == 50) {
  _arLog(3, 3256, $vararg_buffer);
  $retval$0 = -1;
 } else if ((label | 0) == 56) {
  $arrayidx326 = $labelInfo + 12 | 0;
  $i$3 = 1;
  $j$1 = 1;
  $wk$4 = $arraydecay;
  while (1) {
   if (($i$3 | 0) > ($wk_max$0 | 0)) break;
   $44 = HEAP32[$wk$4 >> 2] | 0;
   if (($44 | 0) == ($i$3 | 0)) {
    $cond = $j$1;
    $j$2 = $j$1 + 1 | 0;
   } else {
    $cond = HEAP32[$labelInfo + 1179664 + ($44 + -1 << 2) >> 2] | 0;
    $j$2 = $j$1;
   }
   HEAP32[$wk$4 >> 2] = $cond;
   $i$3 = $i$3 + 1 | 0;
   $j$1 = $j$2;
   $wk$4 = $wk$4 + 4 | 0;
  }
  $label_num324 = $labelInfo + 8 | 0;
  $sub347 = $j$1 + -1 | 0;
  HEAP32[$label_num324 >> 2] = $sub347;
  if (!$sub347) $retval$0 = 0; else {
   _memset($arrayidx326 | 0, 0, $sub347 << 2 | 0) | 0;
   _memset($labelInfo + 655376 | 0, 0, $sub347 << 4 | 0) | 0;
   $46 = $sub347;
   $i$4 = 0;
   while (1) {
    if (($i$4 | 0) >= ($46 | 0)) {
     $i$5 = 0;
     break;
    }
    $mul359 = $i$4 << 2;
    HEAP32[$labelInfo + 131084 + ($mul359 << 2) >> 2] = $xsize;
    HEAP32[$labelInfo + 131084 + (($mul359 | 1) << 2) >> 2] = 0;
    HEAP32[$labelInfo + 131084 + (($mul359 | 2) << 2) >> 2] = $ysize;
    HEAP32[$labelInfo + 131084 + (($mul359 | 3) << 2) >> 2] = 0;
    $46 = HEAP32[$label_num324 >> 2] | 0;
    $i$4 = $i$4 + 1 | 0;
   }
   while (1) {
    if (($i$5 | 0) >= ($wk_max$0 | 0)) {
     $i$6 = 0;
     break;
    }
    $sub379 = (HEAP32[$labelInfo + 1179664 + ($i$5 << 2) >> 2] | 0) + -1 | 0;
    $mul380 = $i$5 * 7 | 0;
    $arrayidx383 = $labelInfo + 12 + ($sub379 << 2) | 0;
    HEAP32[$arrayidx383 >> 2] = (HEAP32[$arrayidx383 >> 2] | 0) + (HEAP32[$labelInfo + 1310736 + ($mul380 << 2) >> 2] | 0);
    $mul389 = $sub379 << 1;
    $arrayidx391 = $labelInfo + 655376 + ($mul389 << 3) | 0;
    HEAPF64[$arrayidx391 >> 3] = +HEAPF64[$arrayidx391 >> 3] + +(HEAP32[$labelInfo + 1310736 + ($mul380 + 1 << 2) >> 2] | 0);
    $arrayidx399 = $labelInfo + 655376 + (($mul389 | 1) << 3) | 0;
    HEAPF64[$arrayidx399 >> 3] = +HEAPF64[$arrayidx399 >> 3] + +(HEAP32[$labelInfo + 1310736 + ($mul380 + 2 << 2) >> 2] | 0);
    $mul401 = $sub379 << 2;
    $arrayidx403 = $labelInfo + 131084 + ($mul401 << 2) | 0;
    $55 = HEAP32[$labelInfo + 1310736 + ($mul380 + 3 << 2) >> 2] | 0;
    if ((HEAP32[$arrayidx403 >> 2] | 0) > ($55 | 0)) HEAP32[$arrayidx403 >> 2] = $55;
    $arrayidx419 = $labelInfo + 131084 + (($mul401 | 1) << 2) | 0;
    $57 = HEAP32[$labelInfo + 1310736 + ($mul380 + 4 << 2) >> 2] | 0;
    if ((HEAP32[$arrayidx419 >> 2] | 0) < ($57 | 0)) HEAP32[$arrayidx419 >> 2] = $57;
    $arrayidx435 = $labelInfo + 131084 + (($mul401 | 2) << 2) | 0;
    $59 = HEAP32[$labelInfo + 1310736 + ($mul380 + 5 << 2) >> 2] | 0;
    if ((HEAP32[$arrayidx435 >> 2] | 0) > ($59 | 0)) HEAP32[$arrayidx435 >> 2] = $59;
    $arrayidx451 = $labelInfo + 131084 + (($mul401 | 3) << 2) | 0;
    $61 = HEAP32[$labelInfo + 1310736 + ($mul380 + 6 << 2) >> 2] | 0;
    if ((HEAP32[$arrayidx451 >> 2] | 0) < ($61 | 0)) HEAP32[$arrayidx451 >> 2] = $61;
    $i$5 = $i$5 + 1 | 0;
   }
   while (1) {
    if (($i$6 | 0) >= (HEAP32[$label_num324 >> 2] | 0)) {
     $retval$0 = 0;
     break L77;
    }
    $arrayidx472 = $labelInfo + 12 + ($i$6 << 2) | 0;
    $mul474 = $i$6 << 1;
    $arrayidx476 = $labelInfo + 655376 + ($mul474 << 3) | 0;
    HEAPF64[$arrayidx476 >> 3] = +HEAPF64[$arrayidx476 >> 3] / +(HEAP32[$arrayidx472 >> 2] | 0);
    $arrayidx481 = $labelInfo + 655376 + (($mul474 | 1) << 3) | 0;
    HEAPF64[$arrayidx481 >> 3] = +HEAPF64[$arrayidx481 >> 3] / +(HEAP32[$arrayidx472 >> 2] | 0);
    $i$6 = $i$6 + 1 | 0;
   }
  }
 } while (0);
 STACKTOP = sp;
 return $retval$0 | 0;
}

function _arLabelingSubDBR3CA4444($image, $xsize, $ysize, $labelingThresh, $labelInfo) {
 $image = $image | 0;
 $xsize = $xsize | 0;
 $ysize = $ysize | 0;
 $labelingThresh = $labelingThresh | 0;
 $labelInfo = $labelInfo | 0;
 var $$sink = 0, $0 = 0, $10 = 0, $11 = 0, $12 = 0, $15 = 0, $16 = 0, $20 = 0, $21 = 0, $22 = 0, $25 = 0, $26 = 0, $38 = 0, $39 = 0, $4 = 0, $44 = 0, $46 = 0, $5 = 0, $55 = 0, $57 = 0, $59 = 0, $61 = 0, $9 = 0, $add = 0, $add$ptr136 = 0, $add274 = 0, $add279$sink = 0, $arraydecay = 0, $arrayidx125 = 0, $arrayidx128 = 0, $arrayidx131 = 0, $arrayidx192 = 0, $arrayidx195 = 0, $arrayidx198 = 0, $arrayidx206 = 0, $arrayidx209 = 0, $arrayidx212 = 0, $arrayidx215 = 0, $arrayidx237 = 0, $arrayidx240 = 0, $arrayidx243 = 0, $arrayidx246 = 0, $arrayidx266 = 0, $arrayidx269 = 0, $arrayidx272 = 0, $arrayidx326 = 0, $arrayidx383 = 0, $arrayidx391 = 0, $arrayidx399 = 0, $arrayidx403 = 0, $arrayidx419 = 0, $arrayidx435 = 0, $arrayidx451 = 0, $arrayidx46 = 0, $arrayidx472 = 0, $arrayidx476 = 0, $arrayidx481 = 0, $arrayidx55 = 0, $arrayidx58 = 0, $arrayidx61 = 0, $arrayidx78 = 0, $cmp72 = 0, $cond = 0, $conv = 0, $i$0 = 0, $i$1 = 0, $i$2 = 0, $i$3 = 0, $i$4 = 0, $i$5 = 0, $i$6 = 0, $inc283 = 0, $j$0 = 0, $j$1 = 0, $j$2 = 0, $k$0 = 0, $k$1 = 0, $k$2 = 0, $k$3 = 0, $label_num324 = 0, $mul = 0, $mul204 = 0, $mul235 = 0, $mul293 = 0, $mul359 = 0, $mul380 = 0, $mul389 = 0, $mul401 = 0, $mul474 = 0, $pnt$0 = 0, $pnt$1 = 0, $pnt1$0 = 0, $pnt1$1 = 0, $pnt2$0 = 0, $pnt2$1 = 0, $pnt2$2 = 0, $pnt2$3 = 0, $retval$0 = 0, $sub = 0, $sub347 = 0, $sub379 = 0, $sub45 = 0, $sub77 = 0, $sub8 = 0, $sub81 = 0, $vararg_buffer = 0, $wk$0 = 0, $wk$1 = 0, $wk$2 = 0, $wk$3 = 0, $wk$4 = 0, $wk_max$0 = 0, $wk_max$1 = 0, $wk_max$2 = 0, $wk_max$3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $vararg_buffer = sp;
 $0 = HEAP32[$labelInfo >> 2] | 0;
 $sub = $ysize + -1 | 0;
 $i$0 = 0;
 $pnt1$0 = $0;
 $pnt2$0 = $0 + ((Math_imul($sub, $xsize) | 0) << 1) | 0;
 while (1) {
  if (($i$0 | 0) >= ($xsize | 0)) break;
  HEAP16[$pnt2$0 >> 1] = 0;
  HEAP16[$pnt1$0 >> 1] = 0;
  $i$0 = $i$0 + 1 | 0;
  $pnt1$0 = $pnt1$0 + 2 | 0;
  $pnt2$0 = $pnt2$0 + 2 | 0;
 }
 $mul = $labelingThresh * 3 | 0;
 $sub8 = $xsize + -1 | 0;
 $i$1 = 0;
 $pnt1$1 = $0;
 $pnt2$1 = $0 + ($sub8 << 1) | 0;
 while (1) {
  if (($i$1 | 0) >= ($ysize | 0)) break;
  HEAP16[$pnt2$1 >> 1] = 0;
  HEAP16[$pnt1$1 >> 1] = 0;
  $i$1 = $i$1 + 1 | 0;
  $pnt1$1 = $pnt1$1 + ($xsize << 1) | 0;
  $pnt2$1 = $pnt2$1 + ($xsize << 1) | 0;
 }
 $arraydecay = $labelInfo + 1179664 | 0;
 $add = $xsize + 1 | 0;
 $sub45 = 0 - $xsize | 0;
 $j$0 = 1;
 $pnt$0 = $image + ($add << 1) | 0;
 $pnt2$2 = $0 + ($add << 1) | 0;
 $wk_max$0 = 0;
 L9 : while (1) {
  if (($j$0 | 0) < ($sub | 0)) {
   $i$2 = 1;
   $pnt$1 = $pnt$0;
   $pnt2$3 = $pnt2$2;
   $wk_max$1 = $wk_max$0;
  } else {
   label = 56;
   break;
  }
  while (1) {
   if (($i$2 | 0) >= ($sub8 | 0)) break;
   $conv = HEAPU8[$pnt$1 >> 0] | 0;
   do if ((($conv & 240) + 24 + ($conv << 4 & 240) + (HEAP8[$pnt$1 + 1 >> 0] & -16 & 255) | 0) > ($mul | 0)) {
    HEAP16[$pnt2$3 >> 1] = 0;
    $wk_max$3 = $wk_max$1;
   } else {
    $arrayidx46 = $pnt2$3 + ($sub45 << 1) | 0;
    $4 = HEAP16[$arrayidx46 >> 1] | 0;
    if ($4 << 16 >> 16 > 0) {
     HEAP16[$pnt2$3 >> 1] = $4;
     $5 = ($4 << 16 >> 16) * 7 | 0;
     $arrayidx55 = $labelInfo + 1310736 + ($5 + -7 << 2) | 0;
     HEAP32[$arrayidx55 >> 2] = (HEAP32[$arrayidx55 >> 2] | 0) + 1;
     $arrayidx58 = $labelInfo + 1310736 + ($5 + -6 << 2) | 0;
     HEAP32[$arrayidx58 >> 2] = (HEAP32[$arrayidx58 >> 2] | 0) + $i$2;
     $arrayidx61 = $labelInfo + 1310736 + ($5 + -5 << 2) | 0;
     HEAP32[$arrayidx61 >> 2] = (HEAP32[$arrayidx61 >> 2] | 0) + $j$0;
     HEAP32[$labelInfo + 1310736 + ($5 + -1 << 2) >> 2] = $j$0;
     $wk_max$3 = $wk_max$1;
     break;
    }
    $9 = HEAP16[$arrayidx46 + 2 >> 1] | 0;
    $10 = HEAP16[$arrayidx46 + -2 >> 1] | 0;
    $cmp72 = $10 << 16 >> 16 > 0;
    $add$ptr136 = $pnt2$3 + -2 | 0;
    $sub81 = ($10 << 16 >> 16) + -1 | 0;
    if ($9 << 16 >> 16 <= 0) {
     if ($cmp72) {
      HEAP16[$pnt2$3 >> 1] = $10;
      $mul235 = $sub81 * 7 | 0;
      $arrayidx237 = $labelInfo + 1310736 + ($mul235 << 2) | 0;
      HEAP32[$arrayidx237 >> 2] = (HEAP32[$arrayidx237 >> 2] | 0) + 1;
      $arrayidx240 = $labelInfo + 1310736 + ($mul235 + 1 << 2) | 0;
      HEAP32[$arrayidx240 >> 2] = (HEAP32[$arrayidx240 >> 2] | 0) + $i$2;
      $arrayidx243 = $labelInfo + 1310736 + ($mul235 + 2 << 2) | 0;
      HEAP32[$arrayidx243 >> 2] = (HEAP32[$arrayidx243 >> 2] | 0) + $j$0;
      $arrayidx246 = $labelInfo + 1310736 + ($mul235 + 4 << 2) | 0;
      if ((HEAP32[$arrayidx246 >> 2] | 0) < ($i$2 | 0)) HEAP32[$arrayidx246 >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($mul235 + 6 << 2) >> 2] = $j$0;
      $wk_max$3 = $wk_max$1;
      break;
     }
     $38 = HEAP16[$add$ptr136 >> 1] | 0;
     if ($38 << 16 >> 16 > 0) {
      HEAP16[$pnt2$3 >> 1] = $38;
      $39 = ($38 << 16 >> 16) * 7 | 0;
      $arrayidx266 = $labelInfo + 1310736 + ($39 + -7 << 2) | 0;
      HEAP32[$arrayidx266 >> 2] = (HEAP32[$arrayidx266 >> 2] | 0) + 1;
      $arrayidx269 = $labelInfo + 1310736 + ($39 + -6 << 2) | 0;
      HEAP32[$arrayidx269 >> 2] = (HEAP32[$arrayidx269 >> 2] | 0) + $i$2;
      $arrayidx272 = $labelInfo + 1310736 + ($39 + -5 << 2) | 0;
      HEAP32[$arrayidx272 >> 2] = (HEAP32[$arrayidx272 >> 2] | 0) + $j$0;
      $add274 = $39 + -3 | 0;
      if ((HEAP32[$labelInfo + 1310736 + ($add274 << 2) >> 2] | 0) < ($i$2 | 0)) {
       $$sink = $i$2;
       $add279$sink = $add274;
       $wk_max$2 = $wk_max$1;
      } else {
       $wk_max$3 = $wk_max$1;
       break;
      }
     } else {
      $inc283 = $wk_max$1 + 1 | 0;
      if (($wk_max$1 | 0) > 32767) {
       label = 50;
       break L9;
      }
      HEAP16[$pnt2$3 >> 1] = $inc283;
      HEAP32[$labelInfo + 1179664 + ($wk_max$1 << 2) >> 2] = $inc283 << 16 >> 16;
      $mul293 = $wk_max$1 * 7 | 0;
      HEAP32[$labelInfo + 1310736 + ($mul293 << 2) >> 2] = 1;
      HEAP32[$labelInfo + 1310736 + ($mul293 + 1 << 2) >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($mul293 + 2 << 2) >> 2] = $j$0;
      HEAP32[$labelInfo + 1310736 + ($mul293 + 3 << 2) >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($mul293 + 4 << 2) >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($mul293 + 5 << 2) >> 2] = $j$0;
      $$sink = $j$0;
      $add279$sink = $mul293 + 6 | 0;
      $wk_max$2 = $inc283;
     }
     HEAP32[$labelInfo + 1310736 + ($add279$sink << 2) >> 2] = $$sink;
     $wk_max$3 = $wk_max$2;
     break;
    }
    $sub77 = ($9 << 16 >> 16) + -1 | 0;
    $arrayidx78 = $labelInfo + 1179664 + ($sub77 << 2) | 0;
    if ($cmp72) {
     $11 = HEAP32[$arrayidx78 >> 2] | 0;
     $12 = HEAP32[$labelInfo + 1179664 + ($sub81 << 2) >> 2] | 0;
     L36 : do if (($11 | 0) > ($12 | 0)) {
      HEAP16[$pnt2$3 >> 1] = $12;
      $k$0 = 0;
      $wk$0 = $arraydecay;
      while (1) {
       if (($k$0 | 0) >= ($wk_max$1 | 0)) {
        $15 = $12;
        break L36;
       }
       if ((HEAP32[$wk$0 >> 2] | 0) == ($11 | 0)) HEAP32[$wk$0 >> 2] = $12;
       $k$0 = $k$0 + 1 | 0;
       $wk$0 = $wk$0 + 4 | 0;
      }
     } else {
      HEAP16[$pnt2$3 >> 1] = $11;
      if (($11 | 0) < ($12 | 0)) {
       $k$1 = 0;
       $wk$1 = $arraydecay;
       while (1) {
        if (($k$1 | 0) >= ($wk_max$1 | 0)) {
         $15 = $11;
         break L36;
        }
        if ((HEAP32[$wk$1 >> 2] | 0) == ($12 | 0)) HEAP32[$wk$1 >> 2] = $11;
        $k$1 = $k$1 + 1 | 0;
        $wk$1 = $wk$1 + 4 | 0;
       }
      } else $15 = $11;
     } while (0);
     $16 = ($15 << 16 >> 16) * 7 | 0;
     $arrayidx125 = $labelInfo + 1310736 + ($16 + -7 << 2) | 0;
     HEAP32[$arrayidx125 >> 2] = (HEAP32[$arrayidx125 >> 2] | 0) + 1;
     $arrayidx128 = $labelInfo + 1310736 + ($16 + -6 << 2) | 0;
     HEAP32[$arrayidx128 >> 2] = (HEAP32[$arrayidx128 >> 2] | 0) + $i$2;
     $arrayidx131 = $labelInfo + 1310736 + ($16 + -5 << 2) | 0;
     HEAP32[$arrayidx131 >> 2] = (HEAP32[$arrayidx131 >> 2] | 0) + $j$0;
     HEAP32[$labelInfo + 1310736 + ($16 + -1 << 2) >> 2] = $j$0;
     $wk_max$3 = $wk_max$1;
     break;
    }
    $20 = HEAP16[$add$ptr136 >> 1] | 0;
    if ($20 << 16 >> 16 <= 0) {
     HEAP16[$pnt2$3 >> 1] = $9;
     $mul204 = $sub77 * 7 | 0;
     $arrayidx206 = $labelInfo + 1310736 + ($mul204 << 2) | 0;
     HEAP32[$arrayidx206 >> 2] = (HEAP32[$arrayidx206 >> 2] | 0) + 1;
     $arrayidx209 = $labelInfo + 1310736 + ($mul204 + 1 << 2) | 0;
     HEAP32[$arrayidx209 >> 2] = (HEAP32[$arrayidx209 >> 2] | 0) + $i$2;
     $arrayidx212 = $labelInfo + 1310736 + ($mul204 + 2 << 2) | 0;
     HEAP32[$arrayidx212 >> 2] = (HEAP32[$arrayidx212 >> 2] | 0) + $j$0;
     $arrayidx215 = $labelInfo + 1310736 + ($mul204 + 3 << 2) | 0;
     if ((HEAP32[$arrayidx215 >> 2] | 0) > ($i$2 | 0)) HEAP32[$arrayidx215 >> 2] = $i$2;
     HEAP32[$labelInfo + 1310736 + ($mul204 + 6 << 2) >> 2] = $j$0;
     $wk_max$3 = $wk_max$1;
     break;
    }
    $21 = HEAP32[$arrayidx78 >> 2] | 0;
    $22 = HEAP32[$labelInfo + 1179664 + (($20 << 16 >> 16) + -1 << 2) >> 2] | 0;
    L59 : do if (($21 | 0) > ($22 | 0)) {
     HEAP16[$pnt2$3 >> 1] = $22;
     $k$2 = 0;
     $wk$2 = $arraydecay;
     while (1) {
      if (($k$2 | 0) >= ($wk_max$1 | 0)) {
       $25 = $22;
       break L59;
      }
      if ((HEAP32[$wk$2 >> 2] | 0) == ($21 | 0)) HEAP32[$wk$2 >> 2] = $22;
      $k$2 = $k$2 + 1 | 0;
      $wk$2 = $wk$2 + 4 | 0;
     }
    } else {
     HEAP16[$pnt2$3 >> 1] = $21;
     if (($21 | 0) < ($22 | 0)) {
      $k$3 = 0;
      $wk$3 = $arraydecay;
      while (1) {
       if (($k$3 | 0) >= ($wk_max$1 | 0)) {
        $25 = $21;
        break L59;
       }
       if ((HEAP32[$wk$3 >> 2] | 0) == ($22 | 0)) HEAP32[$wk$3 >> 2] = $21;
       $k$3 = $k$3 + 1 | 0;
       $wk$3 = $wk$3 + 4 | 0;
      }
     } else $25 = $21;
    } while (0);
    $26 = ($25 << 16 >> 16) * 7 | 0;
    $arrayidx192 = $labelInfo + 1310736 + ($26 + -7 << 2) | 0;
    HEAP32[$arrayidx192 >> 2] = (HEAP32[$arrayidx192 >> 2] | 0) + 1;
    $arrayidx195 = $labelInfo + 1310736 + ($26 + -6 << 2) | 0;
    HEAP32[$arrayidx195 >> 2] = (HEAP32[$arrayidx195 >> 2] | 0) + $i$2;
    $arrayidx198 = $labelInfo + 1310736 + ($26 + -5 << 2) | 0;
    HEAP32[$arrayidx198 >> 2] = (HEAP32[$arrayidx198 >> 2] | 0) + $j$0;
    $wk_max$3 = $wk_max$1;
   } while (0);
   $i$2 = $i$2 + 1 | 0;
   $pnt$1 = $pnt$1 + 2 | 0;
   $pnt2$3 = $pnt2$3 + 2 | 0;
   $wk_max$1 = $wk_max$3;
  }
  $j$0 = $j$0 + 1 | 0;
  $pnt$0 = $pnt$1 + 4 | 0;
  $pnt2$2 = $pnt2$3 + 4 | 0;
  $wk_max$0 = $wk_max$1;
 }
 L77 : do if ((label | 0) == 50) {
  _arLog(3, 3256, $vararg_buffer);
  $retval$0 = -1;
 } else if ((label | 0) == 56) {
  $arrayidx326 = $labelInfo + 12 | 0;
  $i$3 = 1;
  $j$1 = 1;
  $wk$4 = $arraydecay;
  while (1) {
   if (($i$3 | 0) > ($wk_max$0 | 0)) break;
   $44 = HEAP32[$wk$4 >> 2] | 0;
   if (($44 | 0) == ($i$3 | 0)) {
    $cond = $j$1;
    $j$2 = $j$1 + 1 | 0;
   } else {
    $cond = HEAP32[$labelInfo + 1179664 + ($44 + -1 << 2) >> 2] | 0;
    $j$2 = $j$1;
   }
   HEAP32[$wk$4 >> 2] = $cond;
   $i$3 = $i$3 + 1 | 0;
   $j$1 = $j$2;
   $wk$4 = $wk$4 + 4 | 0;
  }
  $label_num324 = $labelInfo + 8 | 0;
  $sub347 = $j$1 + -1 | 0;
  HEAP32[$label_num324 >> 2] = $sub347;
  if (!$sub347) $retval$0 = 0; else {
   _memset($arrayidx326 | 0, 0, $sub347 << 2 | 0) | 0;
   _memset($labelInfo + 655376 | 0, 0, $sub347 << 4 | 0) | 0;
   $46 = $sub347;
   $i$4 = 0;
   while (1) {
    if (($i$4 | 0) >= ($46 | 0)) {
     $i$5 = 0;
     break;
    }
    $mul359 = $i$4 << 2;
    HEAP32[$labelInfo + 131084 + ($mul359 << 2) >> 2] = $xsize;
    HEAP32[$labelInfo + 131084 + (($mul359 | 1) << 2) >> 2] = 0;
    HEAP32[$labelInfo + 131084 + (($mul359 | 2) << 2) >> 2] = $ysize;
    HEAP32[$labelInfo + 131084 + (($mul359 | 3) << 2) >> 2] = 0;
    $46 = HEAP32[$label_num324 >> 2] | 0;
    $i$4 = $i$4 + 1 | 0;
   }
   while (1) {
    if (($i$5 | 0) >= ($wk_max$0 | 0)) {
     $i$6 = 0;
     break;
    }
    $sub379 = (HEAP32[$labelInfo + 1179664 + ($i$5 << 2) >> 2] | 0) + -1 | 0;
    $mul380 = $i$5 * 7 | 0;
    $arrayidx383 = $labelInfo + 12 + ($sub379 << 2) | 0;
    HEAP32[$arrayidx383 >> 2] = (HEAP32[$arrayidx383 >> 2] | 0) + (HEAP32[$labelInfo + 1310736 + ($mul380 << 2) >> 2] | 0);
    $mul389 = $sub379 << 1;
    $arrayidx391 = $labelInfo + 655376 + ($mul389 << 3) | 0;
    HEAPF64[$arrayidx391 >> 3] = +HEAPF64[$arrayidx391 >> 3] + +(HEAP32[$labelInfo + 1310736 + ($mul380 + 1 << 2) >> 2] | 0);
    $arrayidx399 = $labelInfo + 655376 + (($mul389 | 1) << 3) | 0;
    HEAPF64[$arrayidx399 >> 3] = +HEAPF64[$arrayidx399 >> 3] + +(HEAP32[$labelInfo + 1310736 + ($mul380 + 2 << 2) >> 2] | 0);
    $mul401 = $sub379 << 2;
    $arrayidx403 = $labelInfo + 131084 + ($mul401 << 2) | 0;
    $55 = HEAP32[$labelInfo + 1310736 + ($mul380 + 3 << 2) >> 2] | 0;
    if ((HEAP32[$arrayidx403 >> 2] | 0) > ($55 | 0)) HEAP32[$arrayidx403 >> 2] = $55;
    $arrayidx419 = $labelInfo + 131084 + (($mul401 | 1) << 2) | 0;
    $57 = HEAP32[$labelInfo + 1310736 + ($mul380 + 4 << 2) >> 2] | 0;
    if ((HEAP32[$arrayidx419 >> 2] | 0) < ($57 | 0)) HEAP32[$arrayidx419 >> 2] = $57;
    $arrayidx435 = $labelInfo + 131084 + (($mul401 | 2) << 2) | 0;
    $59 = HEAP32[$labelInfo + 1310736 + ($mul380 + 5 << 2) >> 2] | 0;
    if ((HEAP32[$arrayidx435 >> 2] | 0) > ($59 | 0)) HEAP32[$arrayidx435 >> 2] = $59;
    $arrayidx451 = $labelInfo + 131084 + (($mul401 | 3) << 2) | 0;
    $61 = HEAP32[$labelInfo + 1310736 + ($mul380 + 6 << 2) >> 2] | 0;
    if ((HEAP32[$arrayidx451 >> 2] | 0) < ($61 | 0)) HEAP32[$arrayidx451 >> 2] = $61;
    $i$5 = $i$5 + 1 | 0;
   }
   while (1) {
    if (($i$6 | 0) >= (HEAP32[$label_num324 >> 2] | 0)) {
     $retval$0 = 0;
     break L77;
    }
    $arrayidx472 = $labelInfo + 12 + ($i$6 << 2) | 0;
    $mul474 = $i$6 << 1;
    $arrayidx476 = $labelInfo + 655376 + ($mul474 << 3) | 0;
    HEAPF64[$arrayidx476 >> 3] = +HEAPF64[$arrayidx476 >> 3] / +(HEAP32[$arrayidx472 >> 2] | 0);
    $arrayidx481 = $labelInfo + 655376 + (($mul474 | 1) << 3) | 0;
    HEAPF64[$arrayidx481 >> 3] = +HEAPF64[$arrayidx481 >> 3] / +(HEAP32[$arrayidx472 >> 2] | 0);
    $i$6 = $i$6 + 1 | 0;
   }
  }
 } while (0);
 STACKTOP = sp;
 return $retval$0 | 0;
}

function _arLabelingSubDWRA3C($image, $xsize, $ysize, $labelingThresh, $labelInfo) {
 $image = $image | 0;
 $xsize = $xsize | 0;
 $ysize = $ysize | 0;
 $labelingThresh = $labelingThresh | 0;
 $labelInfo = $labelInfo | 0;
 var $$sink = 0, $0 = 0, $10 = 0, $11 = 0, $12 = 0, $15 = 0, $16 = 0, $20 = 0, $21 = 0, $22 = 0, $25 = 0, $26 = 0, $38 = 0, $39 = 0, $4 = 0, $44 = 0, $46 = 0, $5 = 0, $55 = 0, $57 = 0, $59 = 0, $61 = 0, $9 = 0, $add = 0, $add$ptr133 = 0, $add271 = 0, $add276$sink = 0, $arraydecay = 0, $arrayidx122 = 0, $arrayidx125 = 0, $arrayidx128 = 0, $arrayidx189 = 0, $arrayidx192 = 0, $arrayidx195 = 0, $arrayidx203 = 0, $arrayidx206 = 0, $arrayidx209 = 0, $arrayidx212 = 0, $arrayidx234 = 0, $arrayidx237 = 0, $arrayidx240 = 0, $arrayidx243 = 0, $arrayidx263 = 0, $arrayidx266 = 0, $arrayidx269 = 0, $arrayidx323 = 0, $arrayidx380 = 0, $arrayidx388 = 0, $arrayidx396 = 0, $arrayidx400 = 0, $arrayidx416 = 0, $arrayidx43 = 0, $arrayidx432 = 0, $arrayidx448 = 0, $arrayidx469 = 0, $arrayidx473 = 0, $arrayidx478 = 0, $arrayidx52 = 0, $arrayidx55 = 0, $arrayidx58 = 0, $arrayidx75 = 0, $cmp69 = 0, $cond = 0, $i$0 = 0, $i$1 = 0, $i$2 = 0, $i$3 = 0, $i$4 = 0, $i$5 = 0, $i$6 = 0, $inc280 = 0, $j$0 = 0, $j$1 = 0, $j$2 = 0, $k$0 = 0, $k$1 = 0, $k$2 = 0, $k$3 = 0, $label_num321 = 0, $mul = 0, $mul201 = 0, $mul232 = 0, $mul290 = 0, $mul356 = 0, $mul377 = 0, $mul386 = 0, $mul398 = 0, $mul471 = 0, $pnt$0 = 0, $pnt$1 = 0, $pnt1$0 = 0, $pnt1$1 = 0, $pnt2$0 = 0, $pnt2$1 = 0, $pnt2$2 = 0, $pnt2$3 = 0, $retval$0 = 0, $sub = 0, $sub344 = 0, $sub376 = 0, $sub42 = 0, $sub74 = 0, $sub78 = 0, $sub8 = 0, $vararg_buffer = 0, $wk$0 = 0, $wk$1 = 0, $wk$2 = 0, $wk$3 = 0, $wk$4 = 0, $wk_max$0 = 0, $wk_max$1 = 0, $wk_max$2 = 0, $wk_max$3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $vararg_buffer = sp;
 $0 = HEAP32[$labelInfo >> 2] | 0;
 $sub = $ysize + -1 | 0;
 $i$0 = 0;
 $pnt1$0 = $0;
 $pnt2$0 = $0 + ((Math_imul($sub, $xsize) | 0) << 1) | 0;
 while (1) {
  if (($i$0 | 0) >= ($xsize | 0)) break;
  HEAP16[$pnt2$0 >> 1] = 0;
  HEAP16[$pnt1$0 >> 1] = 0;
  $i$0 = $i$0 + 1 | 0;
  $pnt1$0 = $pnt1$0 + 2 | 0;
  $pnt2$0 = $pnt2$0 + 2 | 0;
 }
 $mul = $labelingThresh * 3 | 0;
 $sub8 = $xsize + -1 | 0;
 $i$1 = 0;
 $pnt1$1 = $0;
 $pnt2$1 = $0 + ($sub8 << 1) | 0;
 while (1) {
  if (($i$1 | 0) >= ($ysize | 0)) break;
  HEAP16[$pnt2$1 >> 1] = 0;
  HEAP16[$pnt1$1 >> 1] = 0;
  $i$1 = $i$1 + 1 | 0;
  $pnt1$1 = $pnt1$1 + ($xsize << 1) | 0;
  $pnt2$1 = $pnt2$1 + ($xsize << 1) | 0;
 }
 $arraydecay = $labelInfo + 1179664 | 0;
 $add = $xsize + 1 | 0;
 $sub42 = 0 - $xsize | 0;
 $j$0 = 1;
 $pnt$0 = $image + ($add << 2) | 0;
 $pnt2$2 = $0 + ($add << 1) | 0;
 $wk_max$0 = 0;
 L9 : while (1) {
  if (($j$0 | 0) < ($sub | 0)) {
   $i$2 = 1;
   $pnt$1 = $pnt$0;
   $pnt2$3 = $pnt2$2;
   $wk_max$1 = $wk_max$0;
  } else {
   label = 56;
   break;
  }
  while (1) {
   if (($i$2 | 0) >= ($sub8 | 0)) break;
   do if (((HEAPU8[$pnt$1 + 2 >> 0] | 0) + (HEAPU8[$pnt$1 + 1 >> 0] | 0) + (HEAPU8[$pnt$1 + 3 >> 0] | 0) | 0) > ($mul | 0)) {
    $arrayidx43 = $pnt2$3 + ($sub42 << 1) | 0;
    $4 = HEAP16[$arrayidx43 >> 1] | 0;
    if ($4 << 16 >> 16 > 0) {
     HEAP16[$pnt2$3 >> 1] = $4;
     $5 = ($4 << 16 >> 16) * 7 | 0;
     $arrayidx52 = $labelInfo + 1310736 + ($5 + -7 << 2) | 0;
     HEAP32[$arrayidx52 >> 2] = (HEAP32[$arrayidx52 >> 2] | 0) + 1;
     $arrayidx55 = $labelInfo + 1310736 + ($5 + -6 << 2) | 0;
     HEAP32[$arrayidx55 >> 2] = (HEAP32[$arrayidx55 >> 2] | 0) + $i$2;
     $arrayidx58 = $labelInfo + 1310736 + ($5 + -5 << 2) | 0;
     HEAP32[$arrayidx58 >> 2] = (HEAP32[$arrayidx58 >> 2] | 0) + $j$0;
     HEAP32[$labelInfo + 1310736 + ($5 + -1 << 2) >> 2] = $j$0;
     $wk_max$3 = $wk_max$1;
     break;
    }
    $9 = HEAP16[$arrayidx43 + 2 >> 1] | 0;
    $10 = HEAP16[$arrayidx43 + -2 >> 1] | 0;
    $cmp69 = $10 << 16 >> 16 > 0;
    $sub78 = ($10 << 16 >> 16) + -1 | 0;
    $add$ptr133 = $pnt2$3 + -2 | 0;
    if ($9 << 16 >> 16 <= 0) {
     if ($cmp69) {
      HEAP16[$pnt2$3 >> 1] = $10;
      $mul232 = $sub78 * 7 | 0;
      $arrayidx234 = $labelInfo + 1310736 + ($mul232 << 2) | 0;
      HEAP32[$arrayidx234 >> 2] = (HEAP32[$arrayidx234 >> 2] | 0) + 1;
      $arrayidx237 = $labelInfo + 1310736 + ($mul232 + 1 << 2) | 0;
      HEAP32[$arrayidx237 >> 2] = (HEAP32[$arrayidx237 >> 2] | 0) + $i$2;
      $arrayidx240 = $labelInfo + 1310736 + ($mul232 + 2 << 2) | 0;
      HEAP32[$arrayidx240 >> 2] = (HEAP32[$arrayidx240 >> 2] | 0) + $j$0;
      $arrayidx243 = $labelInfo + 1310736 + ($mul232 + 4 << 2) | 0;
      if ((HEAP32[$arrayidx243 >> 2] | 0) < ($i$2 | 0)) HEAP32[$arrayidx243 >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($mul232 + 6 << 2) >> 2] = $j$0;
      $wk_max$3 = $wk_max$1;
      break;
     }
     $38 = HEAP16[$add$ptr133 >> 1] | 0;
     if ($38 << 16 >> 16 > 0) {
      HEAP16[$pnt2$3 >> 1] = $38;
      $39 = ($38 << 16 >> 16) * 7 | 0;
      $arrayidx263 = $labelInfo + 1310736 + ($39 + -7 << 2) | 0;
      HEAP32[$arrayidx263 >> 2] = (HEAP32[$arrayidx263 >> 2] | 0) + 1;
      $arrayidx266 = $labelInfo + 1310736 + ($39 + -6 << 2) | 0;
      HEAP32[$arrayidx266 >> 2] = (HEAP32[$arrayidx266 >> 2] | 0) + $i$2;
      $arrayidx269 = $labelInfo + 1310736 + ($39 + -5 << 2) | 0;
      HEAP32[$arrayidx269 >> 2] = (HEAP32[$arrayidx269 >> 2] | 0) + $j$0;
      $add271 = $39 + -3 | 0;
      if ((HEAP32[$labelInfo + 1310736 + ($add271 << 2) >> 2] | 0) < ($i$2 | 0)) {
       $$sink = $i$2;
       $add276$sink = $add271;
       $wk_max$2 = $wk_max$1;
      } else {
       $wk_max$3 = $wk_max$1;
       break;
      }
     } else {
      $inc280 = $wk_max$1 + 1 | 0;
      if (($wk_max$1 | 0) > 32767) {
       label = 50;
       break L9;
      }
      HEAP16[$pnt2$3 >> 1] = $inc280;
      HEAP32[$labelInfo + 1179664 + ($wk_max$1 << 2) >> 2] = $inc280 << 16 >> 16;
      $mul290 = $wk_max$1 * 7 | 0;
      HEAP32[$labelInfo + 1310736 + ($mul290 << 2) >> 2] = 1;
      HEAP32[$labelInfo + 1310736 + ($mul290 + 1 << 2) >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($mul290 + 2 << 2) >> 2] = $j$0;
      HEAP32[$labelInfo + 1310736 + ($mul290 + 3 << 2) >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($mul290 + 4 << 2) >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($mul290 + 5 << 2) >> 2] = $j$0;
      $$sink = $j$0;
      $add276$sink = $mul290 + 6 | 0;
      $wk_max$2 = $inc280;
     }
     HEAP32[$labelInfo + 1310736 + ($add276$sink << 2) >> 2] = $$sink;
     $wk_max$3 = $wk_max$2;
     break;
    }
    $sub74 = ($9 << 16 >> 16) + -1 | 0;
    $arrayidx75 = $labelInfo + 1179664 + ($sub74 << 2) | 0;
    if ($cmp69) {
     $11 = HEAP32[$arrayidx75 >> 2] | 0;
     $12 = HEAP32[$labelInfo + 1179664 + ($sub78 << 2) >> 2] | 0;
     L35 : do if (($11 | 0) > ($12 | 0)) {
      HEAP16[$pnt2$3 >> 1] = $12;
      $k$0 = 0;
      $wk$0 = $arraydecay;
      while (1) {
       if (($k$0 | 0) >= ($wk_max$1 | 0)) {
        $15 = $12;
        break L35;
       }
       if ((HEAP32[$wk$0 >> 2] | 0) == ($11 | 0)) HEAP32[$wk$0 >> 2] = $12;
       $k$0 = $k$0 + 1 | 0;
       $wk$0 = $wk$0 + 4 | 0;
      }
     } else {
      HEAP16[$pnt2$3 >> 1] = $11;
      if (($11 | 0) < ($12 | 0)) {
       $k$1 = 0;
       $wk$1 = $arraydecay;
       while (1) {
        if (($k$1 | 0) >= ($wk_max$1 | 0)) {
         $15 = $11;
         break L35;
        }
        if ((HEAP32[$wk$1 >> 2] | 0) == ($12 | 0)) HEAP32[$wk$1 >> 2] = $11;
        $k$1 = $k$1 + 1 | 0;
        $wk$1 = $wk$1 + 4 | 0;
       }
      } else $15 = $11;
     } while (0);
     $16 = ($15 << 16 >> 16) * 7 | 0;
     $arrayidx122 = $labelInfo + 1310736 + ($16 + -7 << 2) | 0;
     HEAP32[$arrayidx122 >> 2] = (HEAP32[$arrayidx122 >> 2] | 0) + 1;
     $arrayidx125 = $labelInfo + 1310736 + ($16 + -6 << 2) | 0;
     HEAP32[$arrayidx125 >> 2] = (HEAP32[$arrayidx125 >> 2] | 0) + $i$2;
     $arrayidx128 = $labelInfo + 1310736 + ($16 + -5 << 2) | 0;
     HEAP32[$arrayidx128 >> 2] = (HEAP32[$arrayidx128 >> 2] | 0) + $j$0;
     HEAP32[$labelInfo + 1310736 + ($16 + -1 << 2) >> 2] = $j$0;
     $wk_max$3 = $wk_max$1;
     break;
    }
    $20 = HEAP16[$add$ptr133 >> 1] | 0;
    if ($20 << 16 >> 16 <= 0) {
     HEAP16[$pnt2$3 >> 1] = $9;
     $mul201 = $sub74 * 7 | 0;
     $arrayidx203 = $labelInfo + 1310736 + ($mul201 << 2) | 0;
     HEAP32[$arrayidx203 >> 2] = (HEAP32[$arrayidx203 >> 2] | 0) + 1;
     $arrayidx206 = $labelInfo + 1310736 + ($mul201 + 1 << 2) | 0;
     HEAP32[$arrayidx206 >> 2] = (HEAP32[$arrayidx206 >> 2] | 0) + $i$2;
     $arrayidx209 = $labelInfo + 1310736 + ($mul201 + 2 << 2) | 0;
     HEAP32[$arrayidx209 >> 2] = (HEAP32[$arrayidx209 >> 2] | 0) + $j$0;
     $arrayidx212 = $labelInfo + 1310736 + ($mul201 + 3 << 2) | 0;
     if ((HEAP32[$arrayidx212 >> 2] | 0) > ($i$2 | 0)) HEAP32[$arrayidx212 >> 2] = $i$2;
     HEAP32[$labelInfo + 1310736 + ($mul201 + 6 << 2) >> 2] = $j$0;
     $wk_max$3 = $wk_max$1;
     break;
    }
    $21 = HEAP32[$arrayidx75 >> 2] | 0;
    $22 = HEAP32[$labelInfo + 1179664 + (($20 << 16 >> 16) + -1 << 2) >> 2] | 0;
    L58 : do if (($21 | 0) > ($22 | 0)) {
     HEAP16[$pnt2$3 >> 1] = $22;
     $k$2 = 0;
     $wk$2 = $arraydecay;
     while (1) {
      if (($k$2 | 0) >= ($wk_max$1 | 0)) {
       $25 = $22;
       break L58;
      }
      if ((HEAP32[$wk$2 >> 2] | 0) == ($21 | 0)) HEAP32[$wk$2 >> 2] = $22;
      $k$2 = $k$2 + 1 | 0;
      $wk$2 = $wk$2 + 4 | 0;
     }
    } else {
     HEAP16[$pnt2$3 >> 1] = $21;
     if (($21 | 0) < ($22 | 0)) {
      $k$3 = 0;
      $wk$3 = $arraydecay;
      while (1) {
       if (($k$3 | 0) >= ($wk_max$1 | 0)) {
        $25 = $21;
        break L58;
       }
       if ((HEAP32[$wk$3 >> 2] | 0) == ($22 | 0)) HEAP32[$wk$3 >> 2] = $21;
       $k$3 = $k$3 + 1 | 0;
       $wk$3 = $wk$3 + 4 | 0;
      }
     } else $25 = $21;
    } while (0);
    $26 = ($25 << 16 >> 16) * 7 | 0;
    $arrayidx189 = $labelInfo + 1310736 + ($26 + -7 << 2) | 0;
    HEAP32[$arrayidx189 >> 2] = (HEAP32[$arrayidx189 >> 2] | 0) + 1;
    $arrayidx192 = $labelInfo + 1310736 + ($26 + -6 << 2) | 0;
    HEAP32[$arrayidx192 >> 2] = (HEAP32[$arrayidx192 >> 2] | 0) + $i$2;
    $arrayidx195 = $labelInfo + 1310736 + ($26 + -5 << 2) | 0;
    HEAP32[$arrayidx195 >> 2] = (HEAP32[$arrayidx195 >> 2] | 0) + $j$0;
    $wk_max$3 = $wk_max$1;
   } else {
    HEAP16[$pnt2$3 >> 1] = 0;
    $wk_max$3 = $wk_max$1;
   } while (0);
   $i$2 = $i$2 + 1 | 0;
   $pnt$1 = $pnt$1 + 4 | 0;
   $pnt2$3 = $pnt2$3 + 2 | 0;
   $wk_max$1 = $wk_max$3;
  }
  $j$0 = $j$0 + 1 | 0;
  $pnt$0 = $pnt$1 + 8 | 0;
  $pnt2$2 = $pnt2$3 + 4 | 0;
  $wk_max$0 = $wk_max$1;
 }
 L77 : do if ((label | 0) == 50) {
  _arLog(3, 3256, $vararg_buffer);
  $retval$0 = -1;
 } else if ((label | 0) == 56) {
  $arrayidx323 = $labelInfo + 12 | 0;
  $i$3 = 1;
  $j$1 = 1;
  $wk$4 = $arraydecay;
  while (1) {
   if (($i$3 | 0) > ($wk_max$0 | 0)) break;
   $44 = HEAP32[$wk$4 >> 2] | 0;
   if (($44 | 0) == ($i$3 | 0)) {
    $cond = $j$1;
    $j$2 = $j$1 + 1 | 0;
   } else {
    $cond = HEAP32[$labelInfo + 1179664 + ($44 + -1 << 2) >> 2] | 0;
    $j$2 = $j$1;
   }
   HEAP32[$wk$4 >> 2] = $cond;
   $i$3 = $i$3 + 1 | 0;
   $j$1 = $j$2;
   $wk$4 = $wk$4 + 4 | 0;
  }
  $label_num321 = $labelInfo + 8 | 0;
  $sub344 = $j$1 + -1 | 0;
  HEAP32[$label_num321 >> 2] = $sub344;
  if (!$sub344) $retval$0 = 0; else {
   _memset($arrayidx323 | 0, 0, $sub344 << 2 | 0) | 0;
   _memset($labelInfo + 655376 | 0, 0, $sub344 << 4 | 0) | 0;
   $46 = $sub344;
   $i$4 = 0;
   while (1) {
    if (($i$4 | 0) >= ($46 | 0)) {
     $i$5 = 0;
     break;
    }
    $mul356 = $i$4 << 2;
    HEAP32[$labelInfo + 131084 + ($mul356 << 2) >> 2] = $xsize;
    HEAP32[$labelInfo + 131084 + (($mul356 | 1) << 2) >> 2] = 0;
    HEAP32[$labelInfo + 131084 + (($mul356 | 2) << 2) >> 2] = $ysize;
    HEAP32[$labelInfo + 131084 + (($mul356 | 3) << 2) >> 2] = 0;
    $46 = HEAP32[$label_num321 >> 2] | 0;
    $i$4 = $i$4 + 1 | 0;
   }
   while (1) {
    if (($i$5 | 0) >= ($wk_max$0 | 0)) {
     $i$6 = 0;
     break;
    }
    $sub376 = (HEAP32[$labelInfo + 1179664 + ($i$5 << 2) >> 2] | 0) + -1 | 0;
    $mul377 = $i$5 * 7 | 0;
    $arrayidx380 = $labelInfo + 12 + ($sub376 << 2) | 0;
    HEAP32[$arrayidx380 >> 2] = (HEAP32[$arrayidx380 >> 2] | 0) + (HEAP32[$labelInfo + 1310736 + ($mul377 << 2) >> 2] | 0);
    $mul386 = $sub376 << 1;
    $arrayidx388 = $labelInfo + 655376 + ($mul386 << 3) | 0;
    HEAPF64[$arrayidx388 >> 3] = +HEAPF64[$arrayidx388 >> 3] + +(HEAP32[$labelInfo + 1310736 + ($mul377 + 1 << 2) >> 2] | 0);
    $arrayidx396 = $labelInfo + 655376 + (($mul386 | 1) << 3) | 0;
    HEAPF64[$arrayidx396 >> 3] = +HEAPF64[$arrayidx396 >> 3] + +(HEAP32[$labelInfo + 1310736 + ($mul377 + 2 << 2) >> 2] | 0);
    $mul398 = $sub376 << 2;
    $arrayidx400 = $labelInfo + 131084 + ($mul398 << 2) | 0;
    $55 = HEAP32[$labelInfo + 1310736 + ($mul377 + 3 << 2) >> 2] | 0;
    if ((HEAP32[$arrayidx400 >> 2] | 0) > ($55 | 0)) HEAP32[$arrayidx400 >> 2] = $55;
    $arrayidx416 = $labelInfo + 131084 + (($mul398 | 1) << 2) | 0;
    $57 = HEAP32[$labelInfo + 1310736 + ($mul377 + 4 << 2) >> 2] | 0;
    if ((HEAP32[$arrayidx416 >> 2] | 0) < ($57 | 0)) HEAP32[$arrayidx416 >> 2] = $57;
    $arrayidx432 = $labelInfo + 131084 + (($mul398 | 2) << 2) | 0;
    $59 = HEAP32[$labelInfo + 1310736 + ($mul377 + 5 << 2) >> 2] | 0;
    if ((HEAP32[$arrayidx432 >> 2] | 0) > ($59 | 0)) HEAP32[$arrayidx432 >> 2] = $59;
    $arrayidx448 = $labelInfo + 131084 + (($mul398 | 3) << 2) | 0;
    $61 = HEAP32[$labelInfo + 1310736 + ($mul377 + 6 << 2) >> 2] | 0;
    if ((HEAP32[$arrayidx448 >> 2] | 0) < ($61 | 0)) HEAP32[$arrayidx448 >> 2] = $61;
    $i$5 = $i$5 + 1 | 0;
   }
   while (1) {
    if (($i$6 | 0) >= (HEAP32[$label_num321 >> 2] | 0)) {
     $retval$0 = 0;
     break L77;
    }
    $arrayidx469 = $labelInfo + 12 + ($i$6 << 2) | 0;
    $mul471 = $i$6 << 1;
    $arrayidx473 = $labelInfo + 655376 + ($mul471 << 3) | 0;
    HEAPF64[$arrayidx473 >> 3] = +HEAPF64[$arrayidx473 >> 3] / +(HEAP32[$arrayidx469 >> 2] | 0);
    $arrayidx478 = $labelInfo + 655376 + (($mul471 | 1) << 3) | 0;
    HEAPF64[$arrayidx478 >> 3] = +HEAPF64[$arrayidx478 >> 3] / +(HEAP32[$arrayidx469 >> 2] | 0);
    $i$6 = $i$6 + 1 | 0;
   }
  }
 } while (0);
 STACKTOP = sp;
 return $retval$0 | 0;
}

function _arLabelingSubDBRA3C($image, $xsize, $ysize, $labelingThresh, $labelInfo) {
 $image = $image | 0;
 $xsize = $xsize | 0;
 $ysize = $ysize | 0;
 $labelingThresh = $labelingThresh | 0;
 $labelInfo = $labelInfo | 0;
 var $$sink = 0, $0 = 0, $10 = 0, $11 = 0, $12 = 0, $15 = 0, $16 = 0, $20 = 0, $21 = 0, $22 = 0, $25 = 0, $26 = 0, $38 = 0, $39 = 0, $4 = 0, $44 = 0, $46 = 0, $5 = 0, $55 = 0, $57 = 0, $59 = 0, $61 = 0, $9 = 0, $add = 0, $add$ptr133 = 0, $add271 = 0, $add276$sink = 0, $arraydecay = 0, $arrayidx122 = 0, $arrayidx125 = 0, $arrayidx128 = 0, $arrayidx189 = 0, $arrayidx192 = 0, $arrayidx195 = 0, $arrayidx203 = 0, $arrayidx206 = 0, $arrayidx209 = 0, $arrayidx212 = 0, $arrayidx234 = 0, $arrayidx237 = 0, $arrayidx240 = 0, $arrayidx243 = 0, $arrayidx263 = 0, $arrayidx266 = 0, $arrayidx269 = 0, $arrayidx323 = 0, $arrayidx380 = 0, $arrayidx388 = 0, $arrayidx396 = 0, $arrayidx400 = 0, $arrayidx416 = 0, $arrayidx43 = 0, $arrayidx432 = 0, $arrayidx448 = 0, $arrayidx469 = 0, $arrayidx473 = 0, $arrayidx478 = 0, $arrayidx52 = 0, $arrayidx55 = 0, $arrayidx58 = 0, $arrayidx75 = 0, $cmp69 = 0, $cond = 0, $i$0 = 0, $i$1 = 0, $i$2 = 0, $i$3 = 0, $i$4 = 0, $i$5 = 0, $i$6 = 0, $inc280 = 0, $j$0 = 0, $j$1 = 0, $j$2 = 0, $k$0 = 0, $k$1 = 0, $k$2 = 0, $k$3 = 0, $label_num321 = 0, $mul = 0, $mul201 = 0, $mul232 = 0, $mul290 = 0, $mul356 = 0, $mul377 = 0, $mul386 = 0, $mul398 = 0, $mul471 = 0, $pnt$0 = 0, $pnt$1 = 0, $pnt1$0 = 0, $pnt1$1 = 0, $pnt2$0 = 0, $pnt2$1 = 0, $pnt2$2 = 0, $pnt2$3 = 0, $retval$0 = 0, $sub = 0, $sub344 = 0, $sub376 = 0, $sub42 = 0, $sub74 = 0, $sub78 = 0, $sub8 = 0, $vararg_buffer = 0, $wk$0 = 0, $wk$1 = 0, $wk$2 = 0, $wk$3 = 0, $wk$4 = 0, $wk_max$0 = 0, $wk_max$1 = 0, $wk_max$2 = 0, $wk_max$3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $vararg_buffer = sp;
 $0 = HEAP32[$labelInfo >> 2] | 0;
 $sub = $ysize + -1 | 0;
 $i$0 = 0;
 $pnt1$0 = $0;
 $pnt2$0 = $0 + ((Math_imul($sub, $xsize) | 0) << 1) | 0;
 while (1) {
  if (($i$0 | 0) >= ($xsize | 0)) break;
  HEAP16[$pnt2$0 >> 1] = 0;
  HEAP16[$pnt1$0 >> 1] = 0;
  $i$0 = $i$0 + 1 | 0;
  $pnt1$0 = $pnt1$0 + 2 | 0;
  $pnt2$0 = $pnt2$0 + 2 | 0;
 }
 $mul = $labelingThresh * 3 | 0;
 $sub8 = $xsize + -1 | 0;
 $i$1 = 0;
 $pnt1$1 = $0;
 $pnt2$1 = $0 + ($sub8 << 1) | 0;
 while (1) {
  if (($i$1 | 0) >= ($ysize | 0)) break;
  HEAP16[$pnt2$1 >> 1] = 0;
  HEAP16[$pnt1$1 >> 1] = 0;
  $i$1 = $i$1 + 1 | 0;
  $pnt1$1 = $pnt1$1 + ($xsize << 1) | 0;
  $pnt2$1 = $pnt2$1 + ($xsize << 1) | 0;
 }
 $arraydecay = $labelInfo + 1179664 | 0;
 $add = $xsize + 1 | 0;
 $sub42 = 0 - $xsize | 0;
 $j$0 = 1;
 $pnt$0 = $image + ($add << 2) | 0;
 $pnt2$2 = $0 + ($add << 1) | 0;
 $wk_max$0 = 0;
 L9 : while (1) {
  if (($j$0 | 0) < ($sub | 0)) {
   $i$2 = 1;
   $pnt$1 = $pnt$0;
   $pnt2$3 = $pnt2$2;
   $wk_max$1 = $wk_max$0;
  } else {
   label = 56;
   break;
  }
  while (1) {
   if (($i$2 | 0) >= ($sub8 | 0)) break;
   do if (((HEAPU8[$pnt$1 + 2 >> 0] | 0) + (HEAPU8[$pnt$1 + 1 >> 0] | 0) + (HEAPU8[$pnt$1 + 3 >> 0] | 0) | 0) > ($mul | 0)) {
    HEAP16[$pnt2$3 >> 1] = 0;
    $wk_max$3 = $wk_max$1;
   } else {
    $arrayidx43 = $pnt2$3 + ($sub42 << 1) | 0;
    $4 = HEAP16[$arrayidx43 >> 1] | 0;
    if ($4 << 16 >> 16 > 0) {
     HEAP16[$pnt2$3 >> 1] = $4;
     $5 = ($4 << 16 >> 16) * 7 | 0;
     $arrayidx52 = $labelInfo + 1310736 + ($5 + -7 << 2) | 0;
     HEAP32[$arrayidx52 >> 2] = (HEAP32[$arrayidx52 >> 2] | 0) + 1;
     $arrayidx55 = $labelInfo + 1310736 + ($5 + -6 << 2) | 0;
     HEAP32[$arrayidx55 >> 2] = (HEAP32[$arrayidx55 >> 2] | 0) + $i$2;
     $arrayidx58 = $labelInfo + 1310736 + ($5 + -5 << 2) | 0;
     HEAP32[$arrayidx58 >> 2] = (HEAP32[$arrayidx58 >> 2] | 0) + $j$0;
     HEAP32[$labelInfo + 1310736 + ($5 + -1 << 2) >> 2] = $j$0;
     $wk_max$3 = $wk_max$1;
     break;
    }
    $9 = HEAP16[$arrayidx43 + 2 >> 1] | 0;
    $10 = HEAP16[$arrayidx43 + -2 >> 1] | 0;
    $cmp69 = $10 << 16 >> 16 > 0;
    $sub78 = ($10 << 16 >> 16) + -1 | 0;
    $add$ptr133 = $pnt2$3 + -2 | 0;
    if ($9 << 16 >> 16 <= 0) {
     if ($cmp69) {
      HEAP16[$pnt2$3 >> 1] = $10;
      $mul232 = $sub78 * 7 | 0;
      $arrayidx234 = $labelInfo + 1310736 + ($mul232 << 2) | 0;
      HEAP32[$arrayidx234 >> 2] = (HEAP32[$arrayidx234 >> 2] | 0) + 1;
      $arrayidx237 = $labelInfo + 1310736 + ($mul232 + 1 << 2) | 0;
      HEAP32[$arrayidx237 >> 2] = (HEAP32[$arrayidx237 >> 2] | 0) + $i$2;
      $arrayidx240 = $labelInfo + 1310736 + ($mul232 + 2 << 2) | 0;
      HEAP32[$arrayidx240 >> 2] = (HEAP32[$arrayidx240 >> 2] | 0) + $j$0;
      $arrayidx243 = $labelInfo + 1310736 + ($mul232 + 4 << 2) | 0;
      if ((HEAP32[$arrayidx243 >> 2] | 0) < ($i$2 | 0)) HEAP32[$arrayidx243 >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($mul232 + 6 << 2) >> 2] = $j$0;
      $wk_max$3 = $wk_max$1;
      break;
     }
     $38 = HEAP16[$add$ptr133 >> 1] | 0;
     if ($38 << 16 >> 16 > 0) {
      HEAP16[$pnt2$3 >> 1] = $38;
      $39 = ($38 << 16 >> 16) * 7 | 0;
      $arrayidx263 = $labelInfo + 1310736 + ($39 + -7 << 2) | 0;
      HEAP32[$arrayidx263 >> 2] = (HEAP32[$arrayidx263 >> 2] | 0) + 1;
      $arrayidx266 = $labelInfo + 1310736 + ($39 + -6 << 2) | 0;
      HEAP32[$arrayidx266 >> 2] = (HEAP32[$arrayidx266 >> 2] | 0) + $i$2;
      $arrayidx269 = $labelInfo + 1310736 + ($39 + -5 << 2) | 0;
      HEAP32[$arrayidx269 >> 2] = (HEAP32[$arrayidx269 >> 2] | 0) + $j$0;
      $add271 = $39 + -3 | 0;
      if ((HEAP32[$labelInfo + 1310736 + ($add271 << 2) >> 2] | 0) < ($i$2 | 0)) {
       $$sink = $i$2;
       $add276$sink = $add271;
       $wk_max$2 = $wk_max$1;
      } else {
       $wk_max$3 = $wk_max$1;
       break;
      }
     } else {
      $inc280 = $wk_max$1 + 1 | 0;
      if (($wk_max$1 | 0) > 32767) {
       label = 50;
       break L9;
      }
      HEAP16[$pnt2$3 >> 1] = $inc280;
      HEAP32[$labelInfo + 1179664 + ($wk_max$1 << 2) >> 2] = $inc280 << 16 >> 16;
      $mul290 = $wk_max$1 * 7 | 0;
      HEAP32[$labelInfo + 1310736 + ($mul290 << 2) >> 2] = 1;
      HEAP32[$labelInfo + 1310736 + ($mul290 + 1 << 2) >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($mul290 + 2 << 2) >> 2] = $j$0;
      HEAP32[$labelInfo + 1310736 + ($mul290 + 3 << 2) >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($mul290 + 4 << 2) >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($mul290 + 5 << 2) >> 2] = $j$0;
      $$sink = $j$0;
      $add276$sink = $mul290 + 6 | 0;
      $wk_max$2 = $inc280;
     }
     HEAP32[$labelInfo + 1310736 + ($add276$sink << 2) >> 2] = $$sink;
     $wk_max$3 = $wk_max$2;
     break;
    }
    $sub74 = ($9 << 16 >> 16) + -1 | 0;
    $arrayidx75 = $labelInfo + 1179664 + ($sub74 << 2) | 0;
    if ($cmp69) {
     $11 = HEAP32[$arrayidx75 >> 2] | 0;
     $12 = HEAP32[$labelInfo + 1179664 + ($sub78 << 2) >> 2] | 0;
     L36 : do if (($11 | 0) > ($12 | 0)) {
      HEAP16[$pnt2$3 >> 1] = $12;
      $k$0 = 0;
      $wk$0 = $arraydecay;
      while (1) {
       if (($k$0 | 0) >= ($wk_max$1 | 0)) {
        $15 = $12;
        break L36;
       }
       if ((HEAP32[$wk$0 >> 2] | 0) == ($11 | 0)) HEAP32[$wk$0 >> 2] = $12;
       $k$0 = $k$0 + 1 | 0;
       $wk$0 = $wk$0 + 4 | 0;
      }
     } else {
      HEAP16[$pnt2$3 >> 1] = $11;
      if (($11 | 0) < ($12 | 0)) {
       $k$1 = 0;
       $wk$1 = $arraydecay;
       while (1) {
        if (($k$1 | 0) >= ($wk_max$1 | 0)) {
         $15 = $11;
         break L36;
        }
        if ((HEAP32[$wk$1 >> 2] | 0) == ($12 | 0)) HEAP32[$wk$1 >> 2] = $11;
        $k$1 = $k$1 + 1 | 0;
        $wk$1 = $wk$1 + 4 | 0;
       }
      } else $15 = $11;
     } while (0);
     $16 = ($15 << 16 >> 16) * 7 | 0;
     $arrayidx122 = $labelInfo + 1310736 + ($16 + -7 << 2) | 0;
     HEAP32[$arrayidx122 >> 2] = (HEAP32[$arrayidx122 >> 2] | 0) + 1;
     $arrayidx125 = $labelInfo + 1310736 + ($16 + -6 << 2) | 0;
     HEAP32[$arrayidx125 >> 2] = (HEAP32[$arrayidx125 >> 2] | 0) + $i$2;
     $arrayidx128 = $labelInfo + 1310736 + ($16 + -5 << 2) | 0;
     HEAP32[$arrayidx128 >> 2] = (HEAP32[$arrayidx128 >> 2] | 0) + $j$0;
     HEAP32[$labelInfo + 1310736 + ($16 + -1 << 2) >> 2] = $j$0;
     $wk_max$3 = $wk_max$1;
     break;
    }
    $20 = HEAP16[$add$ptr133 >> 1] | 0;
    if ($20 << 16 >> 16 <= 0) {
     HEAP16[$pnt2$3 >> 1] = $9;
     $mul201 = $sub74 * 7 | 0;
     $arrayidx203 = $labelInfo + 1310736 + ($mul201 << 2) | 0;
     HEAP32[$arrayidx203 >> 2] = (HEAP32[$arrayidx203 >> 2] | 0) + 1;
     $arrayidx206 = $labelInfo + 1310736 + ($mul201 + 1 << 2) | 0;
     HEAP32[$arrayidx206 >> 2] = (HEAP32[$arrayidx206 >> 2] | 0) + $i$2;
     $arrayidx209 = $labelInfo + 1310736 + ($mul201 + 2 << 2) | 0;
     HEAP32[$arrayidx209 >> 2] = (HEAP32[$arrayidx209 >> 2] | 0) + $j$0;
     $arrayidx212 = $labelInfo + 1310736 + ($mul201 + 3 << 2) | 0;
     if ((HEAP32[$arrayidx212 >> 2] | 0) > ($i$2 | 0)) HEAP32[$arrayidx212 >> 2] = $i$2;
     HEAP32[$labelInfo + 1310736 + ($mul201 + 6 << 2) >> 2] = $j$0;
     $wk_max$3 = $wk_max$1;
     break;
    }
    $21 = HEAP32[$arrayidx75 >> 2] | 0;
    $22 = HEAP32[$labelInfo + 1179664 + (($20 << 16 >> 16) + -1 << 2) >> 2] | 0;
    L59 : do if (($21 | 0) > ($22 | 0)) {
     HEAP16[$pnt2$3 >> 1] = $22;
     $k$2 = 0;
     $wk$2 = $arraydecay;
     while (1) {
      if (($k$2 | 0) >= ($wk_max$1 | 0)) {
       $25 = $22;
       break L59;
      }
      if ((HEAP32[$wk$2 >> 2] | 0) == ($21 | 0)) HEAP32[$wk$2 >> 2] = $22;
      $k$2 = $k$2 + 1 | 0;
      $wk$2 = $wk$2 + 4 | 0;
     }
    } else {
     HEAP16[$pnt2$3 >> 1] = $21;
     if (($21 | 0) < ($22 | 0)) {
      $k$3 = 0;
      $wk$3 = $arraydecay;
      while (1) {
       if (($k$3 | 0) >= ($wk_max$1 | 0)) {
        $25 = $21;
        break L59;
       }
       if ((HEAP32[$wk$3 >> 2] | 0) == ($22 | 0)) HEAP32[$wk$3 >> 2] = $21;
       $k$3 = $k$3 + 1 | 0;
       $wk$3 = $wk$3 + 4 | 0;
      }
     } else $25 = $21;
    } while (0);
    $26 = ($25 << 16 >> 16) * 7 | 0;
    $arrayidx189 = $labelInfo + 1310736 + ($26 + -7 << 2) | 0;
    HEAP32[$arrayidx189 >> 2] = (HEAP32[$arrayidx189 >> 2] | 0) + 1;
    $arrayidx192 = $labelInfo + 1310736 + ($26 + -6 << 2) | 0;
    HEAP32[$arrayidx192 >> 2] = (HEAP32[$arrayidx192 >> 2] | 0) + $i$2;
    $arrayidx195 = $labelInfo + 1310736 + ($26 + -5 << 2) | 0;
    HEAP32[$arrayidx195 >> 2] = (HEAP32[$arrayidx195 >> 2] | 0) + $j$0;
    $wk_max$3 = $wk_max$1;
   } while (0);
   $i$2 = $i$2 + 1 | 0;
   $pnt$1 = $pnt$1 + 4 | 0;
   $pnt2$3 = $pnt2$3 + 2 | 0;
   $wk_max$1 = $wk_max$3;
  }
  $j$0 = $j$0 + 1 | 0;
  $pnt$0 = $pnt$1 + 8 | 0;
  $pnt2$2 = $pnt2$3 + 4 | 0;
  $wk_max$0 = $wk_max$1;
 }
 L77 : do if ((label | 0) == 50) {
  _arLog(3, 3256, $vararg_buffer);
  $retval$0 = -1;
 } else if ((label | 0) == 56) {
  $arrayidx323 = $labelInfo + 12 | 0;
  $i$3 = 1;
  $j$1 = 1;
  $wk$4 = $arraydecay;
  while (1) {
   if (($i$3 | 0) > ($wk_max$0 | 0)) break;
   $44 = HEAP32[$wk$4 >> 2] | 0;
   if (($44 | 0) == ($i$3 | 0)) {
    $cond = $j$1;
    $j$2 = $j$1 + 1 | 0;
   } else {
    $cond = HEAP32[$labelInfo + 1179664 + ($44 + -1 << 2) >> 2] | 0;
    $j$2 = $j$1;
   }
   HEAP32[$wk$4 >> 2] = $cond;
   $i$3 = $i$3 + 1 | 0;
   $j$1 = $j$2;
   $wk$4 = $wk$4 + 4 | 0;
  }
  $label_num321 = $labelInfo + 8 | 0;
  $sub344 = $j$1 + -1 | 0;
  HEAP32[$label_num321 >> 2] = $sub344;
  if (!$sub344) $retval$0 = 0; else {
   _memset($arrayidx323 | 0, 0, $sub344 << 2 | 0) | 0;
   _memset($labelInfo + 655376 | 0, 0, $sub344 << 4 | 0) | 0;
   $46 = $sub344;
   $i$4 = 0;
   while (1) {
    if (($i$4 | 0) >= ($46 | 0)) {
     $i$5 = 0;
     break;
    }
    $mul356 = $i$4 << 2;
    HEAP32[$labelInfo + 131084 + ($mul356 << 2) >> 2] = $xsize;
    HEAP32[$labelInfo + 131084 + (($mul356 | 1) << 2) >> 2] = 0;
    HEAP32[$labelInfo + 131084 + (($mul356 | 2) << 2) >> 2] = $ysize;
    HEAP32[$labelInfo + 131084 + (($mul356 | 3) << 2) >> 2] = 0;
    $46 = HEAP32[$label_num321 >> 2] | 0;
    $i$4 = $i$4 + 1 | 0;
   }
   while (1) {
    if (($i$5 | 0) >= ($wk_max$0 | 0)) {
     $i$6 = 0;
     break;
    }
    $sub376 = (HEAP32[$labelInfo + 1179664 + ($i$5 << 2) >> 2] | 0) + -1 | 0;
    $mul377 = $i$5 * 7 | 0;
    $arrayidx380 = $labelInfo + 12 + ($sub376 << 2) | 0;
    HEAP32[$arrayidx380 >> 2] = (HEAP32[$arrayidx380 >> 2] | 0) + (HEAP32[$labelInfo + 1310736 + ($mul377 << 2) >> 2] | 0);
    $mul386 = $sub376 << 1;
    $arrayidx388 = $labelInfo + 655376 + ($mul386 << 3) | 0;
    HEAPF64[$arrayidx388 >> 3] = +HEAPF64[$arrayidx388 >> 3] + +(HEAP32[$labelInfo + 1310736 + ($mul377 + 1 << 2) >> 2] | 0);
    $arrayidx396 = $labelInfo + 655376 + (($mul386 | 1) << 3) | 0;
    HEAPF64[$arrayidx396 >> 3] = +HEAPF64[$arrayidx396 >> 3] + +(HEAP32[$labelInfo + 1310736 + ($mul377 + 2 << 2) >> 2] | 0);
    $mul398 = $sub376 << 2;
    $arrayidx400 = $labelInfo + 131084 + ($mul398 << 2) | 0;
    $55 = HEAP32[$labelInfo + 1310736 + ($mul377 + 3 << 2) >> 2] | 0;
    if ((HEAP32[$arrayidx400 >> 2] | 0) > ($55 | 0)) HEAP32[$arrayidx400 >> 2] = $55;
    $arrayidx416 = $labelInfo + 131084 + (($mul398 | 1) << 2) | 0;
    $57 = HEAP32[$labelInfo + 1310736 + ($mul377 + 4 << 2) >> 2] | 0;
    if ((HEAP32[$arrayidx416 >> 2] | 0) < ($57 | 0)) HEAP32[$arrayidx416 >> 2] = $57;
    $arrayidx432 = $labelInfo + 131084 + (($mul398 | 2) << 2) | 0;
    $59 = HEAP32[$labelInfo + 1310736 + ($mul377 + 5 << 2) >> 2] | 0;
    if ((HEAP32[$arrayidx432 >> 2] | 0) > ($59 | 0)) HEAP32[$arrayidx432 >> 2] = $59;
    $arrayidx448 = $labelInfo + 131084 + (($mul398 | 3) << 2) | 0;
    $61 = HEAP32[$labelInfo + 1310736 + ($mul377 + 6 << 2) >> 2] | 0;
    if ((HEAP32[$arrayidx448 >> 2] | 0) < ($61 | 0)) HEAP32[$arrayidx448 >> 2] = $61;
    $i$5 = $i$5 + 1 | 0;
   }
   while (1) {
    if (($i$6 | 0) >= (HEAP32[$label_num321 >> 2] | 0)) {
     $retval$0 = 0;
     break L77;
    }
    $arrayidx469 = $labelInfo + 12 + ($i$6 << 2) | 0;
    $mul471 = $i$6 << 1;
    $arrayidx473 = $labelInfo + 655376 + ($mul471 << 3) | 0;
    HEAPF64[$arrayidx473 >> 3] = +HEAPF64[$arrayidx473 >> 3] / +(HEAP32[$arrayidx469 >> 2] | 0);
    $arrayidx478 = $labelInfo + 655376 + (($mul471 | 1) << 3) | 0;
    HEAPF64[$arrayidx478 >> 3] = +HEAPF64[$arrayidx478 >> 3] / +(HEAP32[$arrayidx469 >> 2] | 0);
    $i$6 = $i$6 + 1 | 0;
   }
  }
 } while (0);
 STACKTOP = sp;
 return $retval$0 | 0;
}

function _arLabelingSubDWR3C($image, $xsize, $ysize, $labelingThresh, $labelInfo) {
 $image = $image | 0;
 $xsize = $xsize | 0;
 $ysize = $ysize | 0;
 $labelingThresh = $labelingThresh | 0;
 $labelInfo = $labelInfo | 0;
 var $$sink = 0, $0 = 0, $10 = 0, $11 = 0, $12 = 0, $15 = 0, $16 = 0, $20 = 0, $21 = 0, $22 = 0, $25 = 0, $26 = 0, $38 = 0, $39 = 0, $4 = 0, $44 = 0, $46 = 0, $5 = 0, $55 = 0, $57 = 0, $59 = 0, $61 = 0, $9 = 0, $add = 0, $add$ptr133 = 0, $add271 = 0, $add276$sink = 0, $arraydecay = 0, $arrayidx122 = 0, $arrayidx125 = 0, $arrayidx128 = 0, $arrayidx189 = 0, $arrayidx192 = 0, $arrayidx195 = 0, $arrayidx203 = 0, $arrayidx206 = 0, $arrayidx209 = 0, $arrayidx212 = 0, $arrayidx234 = 0, $arrayidx237 = 0, $arrayidx240 = 0, $arrayidx243 = 0, $arrayidx263 = 0, $arrayidx266 = 0, $arrayidx269 = 0, $arrayidx323 = 0, $arrayidx380 = 0, $arrayidx388 = 0, $arrayidx396 = 0, $arrayidx400 = 0, $arrayidx416 = 0, $arrayidx43 = 0, $arrayidx432 = 0, $arrayidx448 = 0, $arrayidx469 = 0, $arrayidx473 = 0, $arrayidx478 = 0, $arrayidx52 = 0, $arrayidx55 = 0, $arrayidx58 = 0, $arrayidx75 = 0, $cmp69 = 0, $cond = 0, $i$0 = 0, $i$1 = 0, $i$2 = 0, $i$3 = 0, $i$4 = 0, $i$5 = 0, $i$6 = 0, $inc280 = 0, $j$0 = 0, $j$1 = 0, $j$2 = 0, $k$0 = 0, $k$1 = 0, $k$2 = 0, $k$3 = 0, $label_num321 = 0, $mul = 0, $mul201 = 0, $mul232 = 0, $mul290 = 0, $mul356 = 0, $mul377 = 0, $mul386 = 0, $mul398 = 0, $mul471 = 0, $pnt$0 = 0, $pnt$1 = 0, $pnt1$0 = 0, $pnt1$1 = 0, $pnt2$0 = 0, $pnt2$1 = 0, $pnt2$2 = 0, $pnt2$3 = 0, $retval$0 = 0, $sub = 0, $sub344 = 0, $sub376 = 0, $sub42 = 0, $sub74 = 0, $sub78 = 0, $sub8 = 0, $vararg_buffer = 0, $wk$0 = 0, $wk$1 = 0, $wk$2 = 0, $wk$3 = 0, $wk$4 = 0, $wk_max$0 = 0, $wk_max$1 = 0, $wk_max$2 = 0, $wk_max$3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $vararg_buffer = sp;
 $0 = HEAP32[$labelInfo >> 2] | 0;
 $sub = $ysize + -1 | 0;
 $i$0 = 0;
 $pnt1$0 = $0;
 $pnt2$0 = $0 + ((Math_imul($sub, $xsize) | 0) << 1) | 0;
 while (1) {
  if (($i$0 | 0) >= ($xsize | 0)) break;
  HEAP16[$pnt2$0 >> 1] = 0;
  HEAP16[$pnt1$0 >> 1] = 0;
  $i$0 = $i$0 + 1 | 0;
  $pnt1$0 = $pnt1$0 + 2 | 0;
  $pnt2$0 = $pnt2$0 + 2 | 0;
 }
 $mul = $labelingThresh * 3 | 0;
 $sub8 = $xsize + -1 | 0;
 $i$1 = 0;
 $pnt1$1 = $0;
 $pnt2$1 = $0 + ($sub8 << 1) | 0;
 while (1) {
  if (($i$1 | 0) >= ($ysize | 0)) break;
  HEAP16[$pnt2$1 >> 1] = 0;
  HEAP16[$pnt1$1 >> 1] = 0;
  $i$1 = $i$1 + 1 | 0;
  $pnt1$1 = $pnt1$1 + ($xsize << 1) | 0;
  $pnt2$1 = $pnt2$1 + ($xsize << 1) | 0;
 }
 $arraydecay = $labelInfo + 1179664 | 0;
 $add = $xsize + 1 | 0;
 $sub42 = 0 - $xsize | 0;
 $j$0 = 1;
 $pnt$0 = $image + ($add * 3 | 0) | 0;
 $pnt2$2 = $0 + ($add << 1) | 0;
 $wk_max$0 = 0;
 L9 : while (1) {
  if (($j$0 | 0) < ($sub | 0)) {
   $i$2 = 1;
   $pnt$1 = $pnt$0;
   $pnt2$3 = $pnt2$2;
   $wk_max$1 = $wk_max$0;
  } else {
   label = 56;
   break;
  }
  while (1) {
   if (($i$2 | 0) >= ($sub8 | 0)) break;
   do if (((HEAPU8[$pnt$1 + 1 >> 0] | 0) + (HEAPU8[$pnt$1 >> 0] | 0) + (HEAPU8[$pnt$1 + 2 >> 0] | 0) | 0) > ($mul | 0)) {
    $arrayidx43 = $pnt2$3 + ($sub42 << 1) | 0;
    $4 = HEAP16[$arrayidx43 >> 1] | 0;
    if ($4 << 16 >> 16 > 0) {
     HEAP16[$pnt2$3 >> 1] = $4;
     $5 = ($4 << 16 >> 16) * 7 | 0;
     $arrayidx52 = $labelInfo + 1310736 + ($5 + -7 << 2) | 0;
     HEAP32[$arrayidx52 >> 2] = (HEAP32[$arrayidx52 >> 2] | 0) + 1;
     $arrayidx55 = $labelInfo + 1310736 + ($5 + -6 << 2) | 0;
     HEAP32[$arrayidx55 >> 2] = (HEAP32[$arrayidx55 >> 2] | 0) + $i$2;
     $arrayidx58 = $labelInfo + 1310736 + ($5 + -5 << 2) | 0;
     HEAP32[$arrayidx58 >> 2] = (HEAP32[$arrayidx58 >> 2] | 0) + $j$0;
     HEAP32[$labelInfo + 1310736 + ($5 + -1 << 2) >> 2] = $j$0;
     $wk_max$3 = $wk_max$1;
     break;
    }
    $9 = HEAP16[$arrayidx43 + 2 >> 1] | 0;
    $10 = HEAP16[$arrayidx43 + -2 >> 1] | 0;
    $cmp69 = $10 << 16 >> 16 > 0;
    $add$ptr133 = $pnt2$3 + -2 | 0;
    $sub78 = ($10 << 16 >> 16) + -1 | 0;
    if ($9 << 16 >> 16 <= 0) {
     if ($cmp69) {
      HEAP16[$pnt2$3 >> 1] = $10;
      $mul232 = $sub78 * 7 | 0;
      $arrayidx234 = $labelInfo + 1310736 + ($mul232 << 2) | 0;
      HEAP32[$arrayidx234 >> 2] = (HEAP32[$arrayidx234 >> 2] | 0) + 1;
      $arrayidx237 = $labelInfo + 1310736 + ($mul232 + 1 << 2) | 0;
      HEAP32[$arrayidx237 >> 2] = (HEAP32[$arrayidx237 >> 2] | 0) + $i$2;
      $arrayidx240 = $labelInfo + 1310736 + ($mul232 + 2 << 2) | 0;
      HEAP32[$arrayidx240 >> 2] = (HEAP32[$arrayidx240 >> 2] | 0) + $j$0;
      $arrayidx243 = $labelInfo + 1310736 + ($mul232 + 4 << 2) | 0;
      if ((HEAP32[$arrayidx243 >> 2] | 0) < ($i$2 | 0)) HEAP32[$arrayidx243 >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($mul232 + 6 << 2) >> 2] = $j$0;
      $wk_max$3 = $wk_max$1;
      break;
     }
     $38 = HEAP16[$add$ptr133 >> 1] | 0;
     if ($38 << 16 >> 16 > 0) {
      HEAP16[$pnt2$3 >> 1] = $38;
      $39 = ($38 << 16 >> 16) * 7 | 0;
      $arrayidx263 = $labelInfo + 1310736 + ($39 + -7 << 2) | 0;
      HEAP32[$arrayidx263 >> 2] = (HEAP32[$arrayidx263 >> 2] | 0) + 1;
      $arrayidx266 = $labelInfo + 1310736 + ($39 + -6 << 2) | 0;
      HEAP32[$arrayidx266 >> 2] = (HEAP32[$arrayidx266 >> 2] | 0) + $i$2;
      $arrayidx269 = $labelInfo + 1310736 + ($39 + -5 << 2) | 0;
      HEAP32[$arrayidx269 >> 2] = (HEAP32[$arrayidx269 >> 2] | 0) + $j$0;
      $add271 = $39 + -3 | 0;
      if ((HEAP32[$labelInfo + 1310736 + ($add271 << 2) >> 2] | 0) < ($i$2 | 0)) {
       $$sink = $i$2;
       $add276$sink = $add271;
       $wk_max$2 = $wk_max$1;
      } else {
       $wk_max$3 = $wk_max$1;
       break;
      }
     } else {
      $inc280 = $wk_max$1 + 1 | 0;
      if (($wk_max$1 | 0) > 32767) {
       label = 50;
       break L9;
      }
      HEAP16[$pnt2$3 >> 1] = $inc280;
      HEAP32[$labelInfo + 1179664 + ($wk_max$1 << 2) >> 2] = $inc280 << 16 >> 16;
      $mul290 = $wk_max$1 * 7 | 0;
      HEAP32[$labelInfo + 1310736 + ($mul290 << 2) >> 2] = 1;
      HEAP32[$labelInfo + 1310736 + ($mul290 + 1 << 2) >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($mul290 + 2 << 2) >> 2] = $j$0;
      HEAP32[$labelInfo + 1310736 + ($mul290 + 3 << 2) >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($mul290 + 4 << 2) >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($mul290 + 5 << 2) >> 2] = $j$0;
      $$sink = $j$0;
      $add276$sink = $mul290 + 6 | 0;
      $wk_max$2 = $inc280;
     }
     HEAP32[$labelInfo + 1310736 + ($add276$sink << 2) >> 2] = $$sink;
     $wk_max$3 = $wk_max$2;
     break;
    }
    $sub74 = ($9 << 16 >> 16) + -1 | 0;
    $arrayidx75 = $labelInfo + 1179664 + ($sub74 << 2) | 0;
    if ($cmp69) {
     $11 = HEAP32[$arrayidx75 >> 2] | 0;
     $12 = HEAP32[$labelInfo + 1179664 + ($sub78 << 2) >> 2] | 0;
     L35 : do if (($11 | 0) > ($12 | 0)) {
      HEAP16[$pnt2$3 >> 1] = $12;
      $k$0 = 0;
      $wk$0 = $arraydecay;
      while (1) {
       if (($k$0 | 0) >= ($wk_max$1 | 0)) {
        $15 = $12;
        break L35;
       }
       if ((HEAP32[$wk$0 >> 2] | 0) == ($11 | 0)) HEAP32[$wk$0 >> 2] = $12;
       $k$0 = $k$0 + 1 | 0;
       $wk$0 = $wk$0 + 4 | 0;
      }
     } else {
      HEAP16[$pnt2$3 >> 1] = $11;
      if (($11 | 0) < ($12 | 0)) {
       $k$1 = 0;
       $wk$1 = $arraydecay;
       while (1) {
        if (($k$1 | 0) >= ($wk_max$1 | 0)) {
         $15 = $11;
         break L35;
        }
        if ((HEAP32[$wk$1 >> 2] | 0) == ($12 | 0)) HEAP32[$wk$1 >> 2] = $11;
        $k$1 = $k$1 + 1 | 0;
        $wk$1 = $wk$1 + 4 | 0;
       }
      } else $15 = $11;
     } while (0);
     $16 = ($15 << 16 >> 16) * 7 | 0;
     $arrayidx122 = $labelInfo + 1310736 + ($16 + -7 << 2) | 0;
     HEAP32[$arrayidx122 >> 2] = (HEAP32[$arrayidx122 >> 2] | 0) + 1;
     $arrayidx125 = $labelInfo + 1310736 + ($16 + -6 << 2) | 0;
     HEAP32[$arrayidx125 >> 2] = (HEAP32[$arrayidx125 >> 2] | 0) + $i$2;
     $arrayidx128 = $labelInfo + 1310736 + ($16 + -5 << 2) | 0;
     HEAP32[$arrayidx128 >> 2] = (HEAP32[$arrayidx128 >> 2] | 0) + $j$0;
     HEAP32[$labelInfo + 1310736 + ($16 + -1 << 2) >> 2] = $j$0;
     $wk_max$3 = $wk_max$1;
     break;
    }
    $20 = HEAP16[$add$ptr133 >> 1] | 0;
    if ($20 << 16 >> 16 <= 0) {
     HEAP16[$pnt2$3 >> 1] = $9;
     $mul201 = $sub74 * 7 | 0;
     $arrayidx203 = $labelInfo + 1310736 + ($mul201 << 2) | 0;
     HEAP32[$arrayidx203 >> 2] = (HEAP32[$arrayidx203 >> 2] | 0) + 1;
     $arrayidx206 = $labelInfo + 1310736 + ($mul201 + 1 << 2) | 0;
     HEAP32[$arrayidx206 >> 2] = (HEAP32[$arrayidx206 >> 2] | 0) + $i$2;
     $arrayidx209 = $labelInfo + 1310736 + ($mul201 + 2 << 2) | 0;
     HEAP32[$arrayidx209 >> 2] = (HEAP32[$arrayidx209 >> 2] | 0) + $j$0;
     $arrayidx212 = $labelInfo + 1310736 + ($mul201 + 3 << 2) | 0;
     if ((HEAP32[$arrayidx212 >> 2] | 0) > ($i$2 | 0)) HEAP32[$arrayidx212 >> 2] = $i$2;
     HEAP32[$labelInfo + 1310736 + ($mul201 + 6 << 2) >> 2] = $j$0;
     $wk_max$3 = $wk_max$1;
     break;
    }
    $21 = HEAP32[$arrayidx75 >> 2] | 0;
    $22 = HEAP32[$labelInfo + 1179664 + (($20 << 16 >> 16) + -1 << 2) >> 2] | 0;
    L58 : do if (($21 | 0) > ($22 | 0)) {
     HEAP16[$pnt2$3 >> 1] = $22;
     $k$2 = 0;
     $wk$2 = $arraydecay;
     while (1) {
      if (($k$2 | 0) >= ($wk_max$1 | 0)) {
       $25 = $22;
       break L58;
      }
      if ((HEAP32[$wk$2 >> 2] | 0) == ($21 | 0)) HEAP32[$wk$2 >> 2] = $22;
      $k$2 = $k$2 + 1 | 0;
      $wk$2 = $wk$2 + 4 | 0;
     }
    } else {
     HEAP16[$pnt2$3 >> 1] = $21;
     if (($21 | 0) < ($22 | 0)) {
      $k$3 = 0;
      $wk$3 = $arraydecay;
      while (1) {
       if (($k$3 | 0) >= ($wk_max$1 | 0)) {
        $25 = $21;
        break L58;
       }
       if ((HEAP32[$wk$3 >> 2] | 0) == ($22 | 0)) HEAP32[$wk$3 >> 2] = $21;
       $k$3 = $k$3 + 1 | 0;
       $wk$3 = $wk$3 + 4 | 0;
      }
     } else $25 = $21;
    } while (0);
    $26 = ($25 << 16 >> 16) * 7 | 0;
    $arrayidx189 = $labelInfo + 1310736 + ($26 + -7 << 2) | 0;
    HEAP32[$arrayidx189 >> 2] = (HEAP32[$arrayidx189 >> 2] | 0) + 1;
    $arrayidx192 = $labelInfo + 1310736 + ($26 + -6 << 2) | 0;
    HEAP32[$arrayidx192 >> 2] = (HEAP32[$arrayidx192 >> 2] | 0) + $i$2;
    $arrayidx195 = $labelInfo + 1310736 + ($26 + -5 << 2) | 0;
    HEAP32[$arrayidx195 >> 2] = (HEAP32[$arrayidx195 >> 2] | 0) + $j$0;
    $wk_max$3 = $wk_max$1;
   } else {
    HEAP16[$pnt2$3 >> 1] = 0;
    $wk_max$3 = $wk_max$1;
   } while (0);
   $i$2 = $i$2 + 1 | 0;
   $pnt$1 = $pnt$1 + 3 | 0;
   $pnt2$3 = $pnt2$3 + 2 | 0;
   $wk_max$1 = $wk_max$3;
  }
  $j$0 = $j$0 + 1 | 0;
  $pnt$0 = $pnt$1 + 6 | 0;
  $pnt2$2 = $pnt2$3 + 4 | 0;
  $wk_max$0 = $wk_max$1;
 }
 L77 : do if ((label | 0) == 50) {
  _arLog(3, 3256, $vararg_buffer);
  $retval$0 = -1;
 } else if ((label | 0) == 56) {
  $arrayidx323 = $labelInfo + 12 | 0;
  $i$3 = 1;
  $j$1 = 1;
  $wk$4 = $arraydecay;
  while (1) {
   if (($i$3 | 0) > ($wk_max$0 | 0)) break;
   $44 = HEAP32[$wk$4 >> 2] | 0;
   if (($44 | 0) == ($i$3 | 0)) {
    $cond = $j$1;
    $j$2 = $j$1 + 1 | 0;
   } else {
    $cond = HEAP32[$labelInfo + 1179664 + ($44 + -1 << 2) >> 2] | 0;
    $j$2 = $j$1;
   }
   HEAP32[$wk$4 >> 2] = $cond;
   $i$3 = $i$3 + 1 | 0;
   $j$1 = $j$2;
   $wk$4 = $wk$4 + 4 | 0;
  }
  $label_num321 = $labelInfo + 8 | 0;
  $sub344 = $j$1 + -1 | 0;
  HEAP32[$label_num321 >> 2] = $sub344;
  if (!$sub344) $retval$0 = 0; else {
   _memset($arrayidx323 | 0, 0, $sub344 << 2 | 0) | 0;
   _memset($labelInfo + 655376 | 0, 0, $sub344 << 4 | 0) | 0;
   $46 = $sub344;
   $i$4 = 0;
   while (1) {
    if (($i$4 | 0) >= ($46 | 0)) {
     $i$5 = 0;
     break;
    }
    $mul356 = $i$4 << 2;
    HEAP32[$labelInfo + 131084 + ($mul356 << 2) >> 2] = $xsize;
    HEAP32[$labelInfo + 131084 + (($mul356 | 1) << 2) >> 2] = 0;
    HEAP32[$labelInfo + 131084 + (($mul356 | 2) << 2) >> 2] = $ysize;
    HEAP32[$labelInfo + 131084 + (($mul356 | 3) << 2) >> 2] = 0;
    $46 = HEAP32[$label_num321 >> 2] | 0;
    $i$4 = $i$4 + 1 | 0;
   }
   while (1) {
    if (($i$5 | 0) >= ($wk_max$0 | 0)) {
     $i$6 = 0;
     break;
    }
    $sub376 = (HEAP32[$labelInfo + 1179664 + ($i$5 << 2) >> 2] | 0) + -1 | 0;
    $mul377 = $i$5 * 7 | 0;
    $arrayidx380 = $labelInfo + 12 + ($sub376 << 2) | 0;
    HEAP32[$arrayidx380 >> 2] = (HEAP32[$arrayidx380 >> 2] | 0) + (HEAP32[$labelInfo + 1310736 + ($mul377 << 2) >> 2] | 0);
    $mul386 = $sub376 << 1;
    $arrayidx388 = $labelInfo + 655376 + ($mul386 << 3) | 0;
    HEAPF64[$arrayidx388 >> 3] = +HEAPF64[$arrayidx388 >> 3] + +(HEAP32[$labelInfo + 1310736 + ($mul377 + 1 << 2) >> 2] | 0);
    $arrayidx396 = $labelInfo + 655376 + (($mul386 | 1) << 3) | 0;
    HEAPF64[$arrayidx396 >> 3] = +HEAPF64[$arrayidx396 >> 3] + +(HEAP32[$labelInfo + 1310736 + ($mul377 + 2 << 2) >> 2] | 0);
    $mul398 = $sub376 << 2;
    $arrayidx400 = $labelInfo + 131084 + ($mul398 << 2) | 0;
    $55 = HEAP32[$labelInfo + 1310736 + ($mul377 + 3 << 2) >> 2] | 0;
    if ((HEAP32[$arrayidx400 >> 2] | 0) > ($55 | 0)) HEAP32[$arrayidx400 >> 2] = $55;
    $arrayidx416 = $labelInfo + 131084 + (($mul398 | 1) << 2) | 0;
    $57 = HEAP32[$labelInfo + 1310736 + ($mul377 + 4 << 2) >> 2] | 0;
    if ((HEAP32[$arrayidx416 >> 2] | 0) < ($57 | 0)) HEAP32[$arrayidx416 >> 2] = $57;
    $arrayidx432 = $labelInfo + 131084 + (($mul398 | 2) << 2) | 0;
    $59 = HEAP32[$labelInfo + 1310736 + ($mul377 + 5 << 2) >> 2] | 0;
    if ((HEAP32[$arrayidx432 >> 2] | 0) > ($59 | 0)) HEAP32[$arrayidx432 >> 2] = $59;
    $arrayidx448 = $labelInfo + 131084 + (($mul398 | 3) << 2) | 0;
    $61 = HEAP32[$labelInfo + 1310736 + ($mul377 + 6 << 2) >> 2] | 0;
    if ((HEAP32[$arrayidx448 >> 2] | 0) < ($61 | 0)) HEAP32[$arrayidx448 >> 2] = $61;
    $i$5 = $i$5 + 1 | 0;
   }
   while (1) {
    if (($i$6 | 0) >= (HEAP32[$label_num321 >> 2] | 0)) {
     $retval$0 = 0;
     break L77;
    }
    $arrayidx469 = $labelInfo + 12 + ($i$6 << 2) | 0;
    $mul471 = $i$6 << 1;
    $arrayidx473 = $labelInfo + 655376 + ($mul471 << 3) | 0;
    HEAPF64[$arrayidx473 >> 3] = +HEAPF64[$arrayidx473 >> 3] / +(HEAP32[$arrayidx469 >> 2] | 0);
    $arrayidx478 = $labelInfo + 655376 + (($mul471 | 1) << 3) | 0;
    HEAPF64[$arrayidx478 >> 3] = +HEAPF64[$arrayidx478 >> 3] / +(HEAP32[$arrayidx469 >> 2] | 0);
    $i$6 = $i$6 + 1 | 0;
   }
  }
 } while (0);
 STACKTOP = sp;
 return $retval$0 | 0;
}

function _arLabelingSubDBR3C($image, $xsize, $ysize, $labelingThresh, $labelInfo) {
 $image = $image | 0;
 $xsize = $xsize | 0;
 $ysize = $ysize | 0;
 $labelingThresh = $labelingThresh | 0;
 $labelInfo = $labelInfo | 0;
 var $$sink = 0, $0 = 0, $10 = 0, $11 = 0, $12 = 0, $15 = 0, $16 = 0, $20 = 0, $21 = 0, $22 = 0, $25 = 0, $26 = 0, $38 = 0, $39 = 0, $4 = 0, $44 = 0, $46 = 0, $5 = 0, $55 = 0, $57 = 0, $59 = 0, $61 = 0, $9 = 0, $add = 0, $add$ptr133 = 0, $add271 = 0, $add276$sink = 0, $arraydecay = 0, $arrayidx122 = 0, $arrayidx125 = 0, $arrayidx128 = 0, $arrayidx189 = 0, $arrayidx192 = 0, $arrayidx195 = 0, $arrayidx203 = 0, $arrayidx206 = 0, $arrayidx209 = 0, $arrayidx212 = 0, $arrayidx234 = 0, $arrayidx237 = 0, $arrayidx240 = 0, $arrayidx243 = 0, $arrayidx263 = 0, $arrayidx266 = 0, $arrayidx269 = 0, $arrayidx323 = 0, $arrayidx380 = 0, $arrayidx388 = 0, $arrayidx396 = 0, $arrayidx400 = 0, $arrayidx416 = 0, $arrayidx43 = 0, $arrayidx432 = 0, $arrayidx448 = 0, $arrayidx469 = 0, $arrayidx473 = 0, $arrayidx478 = 0, $arrayidx52 = 0, $arrayidx55 = 0, $arrayidx58 = 0, $arrayidx75 = 0, $cmp69 = 0, $cond = 0, $i$0 = 0, $i$1 = 0, $i$2 = 0, $i$3 = 0, $i$4 = 0, $i$5 = 0, $i$6 = 0, $inc280 = 0, $j$0 = 0, $j$1 = 0, $j$2 = 0, $k$0 = 0, $k$1 = 0, $k$2 = 0, $k$3 = 0, $label_num321 = 0, $mul = 0, $mul201 = 0, $mul232 = 0, $mul290 = 0, $mul356 = 0, $mul377 = 0, $mul386 = 0, $mul398 = 0, $mul471 = 0, $pnt$0 = 0, $pnt$1 = 0, $pnt1$0 = 0, $pnt1$1 = 0, $pnt2$0 = 0, $pnt2$1 = 0, $pnt2$2 = 0, $pnt2$3 = 0, $retval$0 = 0, $sub = 0, $sub344 = 0, $sub376 = 0, $sub42 = 0, $sub74 = 0, $sub78 = 0, $sub8 = 0, $vararg_buffer = 0, $wk$0 = 0, $wk$1 = 0, $wk$2 = 0, $wk$3 = 0, $wk$4 = 0, $wk_max$0 = 0, $wk_max$1 = 0, $wk_max$2 = 0, $wk_max$3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $vararg_buffer = sp;
 $0 = HEAP32[$labelInfo >> 2] | 0;
 $sub = $ysize + -1 | 0;
 $i$0 = 0;
 $pnt1$0 = $0;
 $pnt2$0 = $0 + ((Math_imul($sub, $xsize) | 0) << 1) | 0;
 while (1) {
  if (($i$0 | 0) >= ($xsize | 0)) break;
  HEAP16[$pnt2$0 >> 1] = 0;
  HEAP16[$pnt1$0 >> 1] = 0;
  $i$0 = $i$0 + 1 | 0;
  $pnt1$0 = $pnt1$0 + 2 | 0;
  $pnt2$0 = $pnt2$0 + 2 | 0;
 }
 $mul = $labelingThresh * 3 | 0;
 $sub8 = $xsize + -1 | 0;
 $i$1 = 0;
 $pnt1$1 = $0;
 $pnt2$1 = $0 + ($sub8 << 1) | 0;
 while (1) {
  if (($i$1 | 0) >= ($ysize | 0)) break;
  HEAP16[$pnt2$1 >> 1] = 0;
  HEAP16[$pnt1$1 >> 1] = 0;
  $i$1 = $i$1 + 1 | 0;
  $pnt1$1 = $pnt1$1 + ($xsize << 1) | 0;
  $pnt2$1 = $pnt2$1 + ($xsize << 1) | 0;
 }
 $arraydecay = $labelInfo + 1179664 | 0;
 $add = $xsize + 1 | 0;
 $sub42 = 0 - $xsize | 0;
 $j$0 = 1;
 $pnt$0 = $image + ($add * 3 | 0) | 0;
 $pnt2$2 = $0 + ($add << 1) | 0;
 $wk_max$0 = 0;
 L9 : while (1) {
  if (($j$0 | 0) < ($sub | 0)) {
   $i$2 = 1;
   $pnt$1 = $pnt$0;
   $pnt2$3 = $pnt2$2;
   $wk_max$1 = $wk_max$0;
  } else {
   label = 56;
   break;
  }
  while (1) {
   if (($i$2 | 0) >= ($sub8 | 0)) break;
   do if (((HEAPU8[$pnt$1 + 1 >> 0] | 0) + (HEAPU8[$pnt$1 >> 0] | 0) + (HEAPU8[$pnt$1 + 2 >> 0] | 0) | 0) > ($mul | 0)) {
    HEAP16[$pnt2$3 >> 1] = 0;
    $wk_max$3 = $wk_max$1;
   } else {
    $arrayidx43 = $pnt2$3 + ($sub42 << 1) | 0;
    $4 = HEAP16[$arrayidx43 >> 1] | 0;
    if ($4 << 16 >> 16 > 0) {
     HEAP16[$pnt2$3 >> 1] = $4;
     $5 = ($4 << 16 >> 16) * 7 | 0;
     $arrayidx52 = $labelInfo + 1310736 + ($5 + -7 << 2) | 0;
     HEAP32[$arrayidx52 >> 2] = (HEAP32[$arrayidx52 >> 2] | 0) + 1;
     $arrayidx55 = $labelInfo + 1310736 + ($5 + -6 << 2) | 0;
     HEAP32[$arrayidx55 >> 2] = (HEAP32[$arrayidx55 >> 2] | 0) + $i$2;
     $arrayidx58 = $labelInfo + 1310736 + ($5 + -5 << 2) | 0;
     HEAP32[$arrayidx58 >> 2] = (HEAP32[$arrayidx58 >> 2] | 0) + $j$0;
     HEAP32[$labelInfo + 1310736 + ($5 + -1 << 2) >> 2] = $j$0;
     $wk_max$3 = $wk_max$1;
     break;
    }
    $9 = HEAP16[$arrayidx43 + 2 >> 1] | 0;
    $10 = HEAP16[$arrayidx43 + -2 >> 1] | 0;
    $cmp69 = $10 << 16 >> 16 > 0;
    $add$ptr133 = $pnt2$3 + -2 | 0;
    $sub78 = ($10 << 16 >> 16) + -1 | 0;
    if ($9 << 16 >> 16 <= 0) {
     if ($cmp69) {
      HEAP16[$pnt2$3 >> 1] = $10;
      $mul232 = $sub78 * 7 | 0;
      $arrayidx234 = $labelInfo + 1310736 + ($mul232 << 2) | 0;
      HEAP32[$arrayidx234 >> 2] = (HEAP32[$arrayidx234 >> 2] | 0) + 1;
      $arrayidx237 = $labelInfo + 1310736 + ($mul232 + 1 << 2) | 0;
      HEAP32[$arrayidx237 >> 2] = (HEAP32[$arrayidx237 >> 2] | 0) + $i$2;
      $arrayidx240 = $labelInfo + 1310736 + ($mul232 + 2 << 2) | 0;
      HEAP32[$arrayidx240 >> 2] = (HEAP32[$arrayidx240 >> 2] | 0) + $j$0;
      $arrayidx243 = $labelInfo + 1310736 + ($mul232 + 4 << 2) | 0;
      if ((HEAP32[$arrayidx243 >> 2] | 0) < ($i$2 | 0)) HEAP32[$arrayidx243 >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($mul232 + 6 << 2) >> 2] = $j$0;
      $wk_max$3 = $wk_max$1;
      break;
     }
     $38 = HEAP16[$add$ptr133 >> 1] | 0;
     if ($38 << 16 >> 16 > 0) {
      HEAP16[$pnt2$3 >> 1] = $38;
      $39 = ($38 << 16 >> 16) * 7 | 0;
      $arrayidx263 = $labelInfo + 1310736 + ($39 + -7 << 2) | 0;
      HEAP32[$arrayidx263 >> 2] = (HEAP32[$arrayidx263 >> 2] | 0) + 1;
      $arrayidx266 = $labelInfo + 1310736 + ($39 + -6 << 2) | 0;
      HEAP32[$arrayidx266 >> 2] = (HEAP32[$arrayidx266 >> 2] | 0) + $i$2;
      $arrayidx269 = $labelInfo + 1310736 + ($39 + -5 << 2) | 0;
      HEAP32[$arrayidx269 >> 2] = (HEAP32[$arrayidx269 >> 2] | 0) + $j$0;
      $add271 = $39 + -3 | 0;
      if ((HEAP32[$labelInfo + 1310736 + ($add271 << 2) >> 2] | 0) < ($i$2 | 0)) {
       $$sink = $i$2;
       $add276$sink = $add271;
       $wk_max$2 = $wk_max$1;
      } else {
       $wk_max$3 = $wk_max$1;
       break;
      }
     } else {
      $inc280 = $wk_max$1 + 1 | 0;
      if (($wk_max$1 | 0) > 32767) {
       label = 50;
       break L9;
      }
      HEAP16[$pnt2$3 >> 1] = $inc280;
      HEAP32[$labelInfo + 1179664 + ($wk_max$1 << 2) >> 2] = $inc280 << 16 >> 16;
      $mul290 = $wk_max$1 * 7 | 0;
      HEAP32[$labelInfo + 1310736 + ($mul290 << 2) >> 2] = 1;
      HEAP32[$labelInfo + 1310736 + ($mul290 + 1 << 2) >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($mul290 + 2 << 2) >> 2] = $j$0;
      HEAP32[$labelInfo + 1310736 + ($mul290 + 3 << 2) >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($mul290 + 4 << 2) >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($mul290 + 5 << 2) >> 2] = $j$0;
      $$sink = $j$0;
      $add276$sink = $mul290 + 6 | 0;
      $wk_max$2 = $inc280;
     }
     HEAP32[$labelInfo + 1310736 + ($add276$sink << 2) >> 2] = $$sink;
     $wk_max$3 = $wk_max$2;
     break;
    }
    $sub74 = ($9 << 16 >> 16) + -1 | 0;
    $arrayidx75 = $labelInfo + 1179664 + ($sub74 << 2) | 0;
    if ($cmp69) {
     $11 = HEAP32[$arrayidx75 >> 2] | 0;
     $12 = HEAP32[$labelInfo + 1179664 + ($sub78 << 2) >> 2] | 0;
     L36 : do if (($11 | 0) > ($12 | 0)) {
      HEAP16[$pnt2$3 >> 1] = $12;
      $k$0 = 0;
      $wk$0 = $arraydecay;
      while (1) {
       if (($k$0 | 0) >= ($wk_max$1 | 0)) {
        $15 = $12;
        break L36;
       }
       if ((HEAP32[$wk$0 >> 2] | 0) == ($11 | 0)) HEAP32[$wk$0 >> 2] = $12;
       $k$0 = $k$0 + 1 | 0;
       $wk$0 = $wk$0 + 4 | 0;
      }
     } else {
      HEAP16[$pnt2$3 >> 1] = $11;
      if (($11 | 0) < ($12 | 0)) {
       $k$1 = 0;
       $wk$1 = $arraydecay;
       while (1) {
        if (($k$1 | 0) >= ($wk_max$1 | 0)) {
         $15 = $11;
         break L36;
        }
        if ((HEAP32[$wk$1 >> 2] | 0) == ($12 | 0)) HEAP32[$wk$1 >> 2] = $11;
        $k$1 = $k$1 + 1 | 0;
        $wk$1 = $wk$1 + 4 | 0;
       }
      } else $15 = $11;
     } while (0);
     $16 = ($15 << 16 >> 16) * 7 | 0;
     $arrayidx122 = $labelInfo + 1310736 + ($16 + -7 << 2) | 0;
     HEAP32[$arrayidx122 >> 2] = (HEAP32[$arrayidx122 >> 2] | 0) + 1;
     $arrayidx125 = $labelInfo + 1310736 + ($16 + -6 << 2) | 0;
     HEAP32[$arrayidx125 >> 2] = (HEAP32[$arrayidx125 >> 2] | 0) + $i$2;
     $arrayidx128 = $labelInfo + 1310736 + ($16 + -5 << 2) | 0;
     HEAP32[$arrayidx128 >> 2] = (HEAP32[$arrayidx128 >> 2] | 0) + $j$0;
     HEAP32[$labelInfo + 1310736 + ($16 + -1 << 2) >> 2] = $j$0;
     $wk_max$3 = $wk_max$1;
     break;
    }
    $20 = HEAP16[$add$ptr133 >> 1] | 0;
    if ($20 << 16 >> 16 <= 0) {
     HEAP16[$pnt2$3 >> 1] = $9;
     $mul201 = $sub74 * 7 | 0;
     $arrayidx203 = $labelInfo + 1310736 + ($mul201 << 2) | 0;
     HEAP32[$arrayidx203 >> 2] = (HEAP32[$arrayidx203 >> 2] | 0) + 1;
     $arrayidx206 = $labelInfo + 1310736 + ($mul201 + 1 << 2) | 0;
     HEAP32[$arrayidx206 >> 2] = (HEAP32[$arrayidx206 >> 2] | 0) + $i$2;
     $arrayidx209 = $labelInfo + 1310736 + ($mul201 + 2 << 2) | 0;
     HEAP32[$arrayidx209 >> 2] = (HEAP32[$arrayidx209 >> 2] | 0) + $j$0;
     $arrayidx212 = $labelInfo + 1310736 + ($mul201 + 3 << 2) | 0;
     if ((HEAP32[$arrayidx212 >> 2] | 0) > ($i$2 | 0)) HEAP32[$arrayidx212 >> 2] = $i$2;
     HEAP32[$labelInfo + 1310736 + ($mul201 + 6 << 2) >> 2] = $j$0;
     $wk_max$3 = $wk_max$1;
     break;
    }
    $21 = HEAP32[$arrayidx75 >> 2] | 0;
    $22 = HEAP32[$labelInfo + 1179664 + (($20 << 16 >> 16) + -1 << 2) >> 2] | 0;
    L59 : do if (($21 | 0) > ($22 | 0)) {
     HEAP16[$pnt2$3 >> 1] = $22;
     $k$2 = 0;
     $wk$2 = $arraydecay;
     while (1) {
      if (($k$2 | 0) >= ($wk_max$1 | 0)) {
       $25 = $22;
       break L59;
      }
      if ((HEAP32[$wk$2 >> 2] | 0) == ($21 | 0)) HEAP32[$wk$2 >> 2] = $22;
      $k$2 = $k$2 + 1 | 0;
      $wk$2 = $wk$2 + 4 | 0;
     }
    } else {
     HEAP16[$pnt2$3 >> 1] = $21;
     if (($21 | 0) < ($22 | 0)) {
      $k$3 = 0;
      $wk$3 = $arraydecay;
      while (1) {
       if (($k$3 | 0) >= ($wk_max$1 | 0)) {
        $25 = $21;
        break L59;
       }
       if ((HEAP32[$wk$3 >> 2] | 0) == ($22 | 0)) HEAP32[$wk$3 >> 2] = $21;
       $k$3 = $k$3 + 1 | 0;
       $wk$3 = $wk$3 + 4 | 0;
      }
     } else $25 = $21;
    } while (0);
    $26 = ($25 << 16 >> 16) * 7 | 0;
    $arrayidx189 = $labelInfo + 1310736 + ($26 + -7 << 2) | 0;
    HEAP32[$arrayidx189 >> 2] = (HEAP32[$arrayidx189 >> 2] | 0) + 1;
    $arrayidx192 = $labelInfo + 1310736 + ($26 + -6 << 2) | 0;
    HEAP32[$arrayidx192 >> 2] = (HEAP32[$arrayidx192 >> 2] | 0) + $i$2;
    $arrayidx195 = $labelInfo + 1310736 + ($26 + -5 << 2) | 0;
    HEAP32[$arrayidx195 >> 2] = (HEAP32[$arrayidx195 >> 2] | 0) + $j$0;
    $wk_max$3 = $wk_max$1;
   } while (0);
   $i$2 = $i$2 + 1 | 0;
   $pnt$1 = $pnt$1 + 3 | 0;
   $pnt2$3 = $pnt2$3 + 2 | 0;
   $wk_max$1 = $wk_max$3;
  }
  $j$0 = $j$0 + 1 | 0;
  $pnt$0 = $pnt$1 + 6 | 0;
  $pnt2$2 = $pnt2$3 + 4 | 0;
  $wk_max$0 = $wk_max$1;
 }
 L77 : do if ((label | 0) == 50) {
  _arLog(3, 3256, $vararg_buffer);
  $retval$0 = -1;
 } else if ((label | 0) == 56) {
  $arrayidx323 = $labelInfo + 12 | 0;
  $i$3 = 1;
  $j$1 = 1;
  $wk$4 = $arraydecay;
  while (1) {
   if (($i$3 | 0) > ($wk_max$0 | 0)) break;
   $44 = HEAP32[$wk$4 >> 2] | 0;
   if (($44 | 0) == ($i$3 | 0)) {
    $cond = $j$1;
    $j$2 = $j$1 + 1 | 0;
   } else {
    $cond = HEAP32[$labelInfo + 1179664 + ($44 + -1 << 2) >> 2] | 0;
    $j$2 = $j$1;
   }
   HEAP32[$wk$4 >> 2] = $cond;
   $i$3 = $i$3 + 1 | 0;
   $j$1 = $j$2;
   $wk$4 = $wk$4 + 4 | 0;
  }
  $label_num321 = $labelInfo + 8 | 0;
  $sub344 = $j$1 + -1 | 0;
  HEAP32[$label_num321 >> 2] = $sub344;
  if (!$sub344) $retval$0 = 0; else {
   _memset($arrayidx323 | 0, 0, $sub344 << 2 | 0) | 0;
   _memset($labelInfo + 655376 | 0, 0, $sub344 << 4 | 0) | 0;
   $46 = $sub344;
   $i$4 = 0;
   while (1) {
    if (($i$4 | 0) >= ($46 | 0)) {
     $i$5 = 0;
     break;
    }
    $mul356 = $i$4 << 2;
    HEAP32[$labelInfo + 131084 + ($mul356 << 2) >> 2] = $xsize;
    HEAP32[$labelInfo + 131084 + (($mul356 | 1) << 2) >> 2] = 0;
    HEAP32[$labelInfo + 131084 + (($mul356 | 2) << 2) >> 2] = $ysize;
    HEAP32[$labelInfo + 131084 + (($mul356 | 3) << 2) >> 2] = 0;
    $46 = HEAP32[$label_num321 >> 2] | 0;
    $i$4 = $i$4 + 1 | 0;
   }
   while (1) {
    if (($i$5 | 0) >= ($wk_max$0 | 0)) {
     $i$6 = 0;
     break;
    }
    $sub376 = (HEAP32[$labelInfo + 1179664 + ($i$5 << 2) >> 2] | 0) + -1 | 0;
    $mul377 = $i$5 * 7 | 0;
    $arrayidx380 = $labelInfo + 12 + ($sub376 << 2) | 0;
    HEAP32[$arrayidx380 >> 2] = (HEAP32[$arrayidx380 >> 2] | 0) + (HEAP32[$labelInfo + 1310736 + ($mul377 << 2) >> 2] | 0);
    $mul386 = $sub376 << 1;
    $arrayidx388 = $labelInfo + 655376 + ($mul386 << 3) | 0;
    HEAPF64[$arrayidx388 >> 3] = +HEAPF64[$arrayidx388 >> 3] + +(HEAP32[$labelInfo + 1310736 + ($mul377 + 1 << 2) >> 2] | 0);
    $arrayidx396 = $labelInfo + 655376 + (($mul386 | 1) << 3) | 0;
    HEAPF64[$arrayidx396 >> 3] = +HEAPF64[$arrayidx396 >> 3] + +(HEAP32[$labelInfo + 1310736 + ($mul377 + 2 << 2) >> 2] | 0);
    $mul398 = $sub376 << 2;
    $arrayidx400 = $labelInfo + 131084 + ($mul398 << 2) | 0;
    $55 = HEAP32[$labelInfo + 1310736 + ($mul377 + 3 << 2) >> 2] | 0;
    if ((HEAP32[$arrayidx400 >> 2] | 0) > ($55 | 0)) HEAP32[$arrayidx400 >> 2] = $55;
    $arrayidx416 = $labelInfo + 131084 + (($mul398 | 1) << 2) | 0;
    $57 = HEAP32[$labelInfo + 1310736 + ($mul377 + 4 << 2) >> 2] | 0;
    if ((HEAP32[$arrayidx416 >> 2] | 0) < ($57 | 0)) HEAP32[$arrayidx416 >> 2] = $57;
    $arrayidx432 = $labelInfo + 131084 + (($mul398 | 2) << 2) | 0;
    $59 = HEAP32[$labelInfo + 1310736 + ($mul377 + 5 << 2) >> 2] | 0;
    if ((HEAP32[$arrayidx432 >> 2] | 0) > ($59 | 0)) HEAP32[$arrayidx432 >> 2] = $59;
    $arrayidx448 = $labelInfo + 131084 + (($mul398 | 3) << 2) | 0;
    $61 = HEAP32[$labelInfo + 1310736 + ($mul377 + 6 << 2) >> 2] | 0;
    if ((HEAP32[$arrayidx448 >> 2] | 0) < ($61 | 0)) HEAP32[$arrayidx448 >> 2] = $61;
    $i$5 = $i$5 + 1 | 0;
   }
   while (1) {
    if (($i$6 | 0) >= (HEAP32[$label_num321 >> 2] | 0)) {
     $retval$0 = 0;
     break L77;
    }
    $arrayidx469 = $labelInfo + 12 + ($i$6 << 2) | 0;
    $mul471 = $i$6 << 1;
    $arrayidx473 = $labelInfo + 655376 + ($mul471 << 3) | 0;
    HEAPF64[$arrayidx473 >> 3] = +HEAPF64[$arrayidx473 >> 3] / +(HEAP32[$arrayidx469 >> 2] | 0);
    $arrayidx478 = $labelInfo + 655376 + (($mul471 | 1) << 3) | 0;
    HEAPF64[$arrayidx478 >> 3] = +HEAPF64[$arrayidx478 >> 3] / +(HEAP32[$arrayidx469 >> 2] | 0);
    $i$6 = $i$6 + 1 | 0;
   }
  }
 } while (0);
 STACKTOP = sp;
 return $retval$0 | 0;
}

function _arLabelingSubDWR3CA($image, $xsize, $ysize, $labelingThresh, $labelInfo) {
 $image = $image | 0;
 $xsize = $xsize | 0;
 $ysize = $ysize | 0;
 $labelingThresh = $labelingThresh | 0;
 $labelInfo = $labelInfo | 0;
 var $$sink = 0, $0 = 0, $10 = 0, $11 = 0, $12 = 0, $15 = 0, $16 = 0, $20 = 0, $21 = 0, $22 = 0, $25 = 0, $26 = 0, $38 = 0, $39 = 0, $4 = 0, $44 = 0, $46 = 0, $5 = 0, $55 = 0, $57 = 0, $59 = 0, $61 = 0, $9 = 0, $add = 0, $add$ptr133 = 0, $add271 = 0, $add276$sink = 0, $arraydecay = 0, $arrayidx122 = 0, $arrayidx125 = 0, $arrayidx128 = 0, $arrayidx189 = 0, $arrayidx192 = 0, $arrayidx195 = 0, $arrayidx203 = 0, $arrayidx206 = 0, $arrayidx209 = 0, $arrayidx212 = 0, $arrayidx234 = 0, $arrayidx237 = 0, $arrayidx240 = 0, $arrayidx243 = 0, $arrayidx263 = 0, $arrayidx266 = 0, $arrayidx269 = 0, $arrayidx323 = 0, $arrayidx380 = 0, $arrayidx388 = 0, $arrayidx396 = 0, $arrayidx400 = 0, $arrayidx416 = 0, $arrayidx43 = 0, $arrayidx432 = 0, $arrayidx448 = 0, $arrayidx469 = 0, $arrayidx473 = 0, $arrayidx478 = 0, $arrayidx52 = 0, $arrayidx55 = 0, $arrayidx58 = 0, $arrayidx75 = 0, $cmp69 = 0, $cond = 0, $i$0 = 0, $i$1 = 0, $i$2 = 0, $i$3 = 0, $i$4 = 0, $i$5 = 0, $i$6 = 0, $inc280 = 0, $j$0 = 0, $j$1 = 0, $j$2 = 0, $k$0 = 0, $k$1 = 0, $k$2 = 0, $k$3 = 0, $label_num321 = 0, $mul = 0, $mul201 = 0, $mul232 = 0, $mul290 = 0, $mul356 = 0, $mul377 = 0, $mul386 = 0, $mul398 = 0, $mul471 = 0, $pnt$0 = 0, $pnt$1 = 0, $pnt1$0 = 0, $pnt1$1 = 0, $pnt2$0 = 0, $pnt2$1 = 0, $pnt2$2 = 0, $pnt2$3 = 0, $retval$0 = 0, $sub = 0, $sub344 = 0, $sub376 = 0, $sub42 = 0, $sub74 = 0, $sub78 = 0, $sub8 = 0, $vararg_buffer = 0, $wk$0 = 0, $wk$1 = 0, $wk$2 = 0, $wk$3 = 0, $wk$4 = 0, $wk_max$0 = 0, $wk_max$1 = 0, $wk_max$2 = 0, $wk_max$3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $vararg_buffer = sp;
 $0 = HEAP32[$labelInfo >> 2] | 0;
 $sub = $ysize + -1 | 0;
 $i$0 = 0;
 $pnt1$0 = $0;
 $pnt2$0 = $0 + ((Math_imul($sub, $xsize) | 0) << 1) | 0;
 while (1) {
  if (($i$0 | 0) >= ($xsize | 0)) break;
  HEAP16[$pnt2$0 >> 1] = 0;
  HEAP16[$pnt1$0 >> 1] = 0;
  $i$0 = $i$0 + 1 | 0;
  $pnt1$0 = $pnt1$0 + 2 | 0;
  $pnt2$0 = $pnt2$0 + 2 | 0;
 }
 $mul = $labelingThresh * 3 | 0;
 $sub8 = $xsize + -1 | 0;
 $i$1 = 0;
 $pnt1$1 = $0;
 $pnt2$1 = $0 + ($sub8 << 1) | 0;
 while (1) {
  if (($i$1 | 0) >= ($ysize | 0)) break;
  HEAP16[$pnt2$1 >> 1] = 0;
  HEAP16[$pnt1$1 >> 1] = 0;
  $i$1 = $i$1 + 1 | 0;
  $pnt1$1 = $pnt1$1 + ($xsize << 1) | 0;
  $pnt2$1 = $pnt2$1 + ($xsize << 1) | 0;
 }
 $arraydecay = $labelInfo + 1179664 | 0;
 $add = $xsize + 1 | 0;
 $sub42 = 0 - $xsize | 0;
 $j$0 = 1;
 $pnt$0 = $image + ($add << 2) | 0;
 $pnt2$2 = $0 + ($add << 1) | 0;
 $wk_max$0 = 0;
 L9 : while (1) {
  if (($j$0 | 0) < ($sub | 0)) {
   $i$2 = 1;
   $pnt$1 = $pnt$0;
   $pnt2$3 = $pnt2$2;
   $wk_max$1 = $wk_max$0;
  } else {
   label = 56;
   break;
  }
  while (1) {
   if (($i$2 | 0) >= ($sub8 | 0)) break;
   do if (((HEAPU8[$pnt$1 + 1 >> 0] | 0) + (HEAPU8[$pnt$1 >> 0] | 0) + (HEAPU8[$pnt$1 + 2 >> 0] | 0) | 0) > ($mul | 0)) {
    $arrayidx43 = $pnt2$3 + ($sub42 << 1) | 0;
    $4 = HEAP16[$arrayidx43 >> 1] | 0;
    if ($4 << 16 >> 16 > 0) {
     HEAP16[$pnt2$3 >> 1] = $4;
     $5 = ($4 << 16 >> 16) * 7 | 0;
     $arrayidx52 = $labelInfo + 1310736 + ($5 + -7 << 2) | 0;
     HEAP32[$arrayidx52 >> 2] = (HEAP32[$arrayidx52 >> 2] | 0) + 1;
     $arrayidx55 = $labelInfo + 1310736 + ($5 + -6 << 2) | 0;
     HEAP32[$arrayidx55 >> 2] = (HEAP32[$arrayidx55 >> 2] | 0) + $i$2;
     $arrayidx58 = $labelInfo + 1310736 + ($5 + -5 << 2) | 0;
     HEAP32[$arrayidx58 >> 2] = (HEAP32[$arrayidx58 >> 2] | 0) + $j$0;
     HEAP32[$labelInfo + 1310736 + ($5 + -1 << 2) >> 2] = $j$0;
     $wk_max$3 = $wk_max$1;
     break;
    }
    $9 = HEAP16[$arrayidx43 + 2 >> 1] | 0;
    $10 = HEAP16[$arrayidx43 + -2 >> 1] | 0;
    $cmp69 = $10 << 16 >> 16 > 0;
    $sub78 = ($10 << 16 >> 16) + -1 | 0;
    $add$ptr133 = $pnt2$3 + -2 | 0;
    if ($9 << 16 >> 16 <= 0) {
     if ($cmp69) {
      HEAP16[$pnt2$3 >> 1] = $10;
      $mul232 = $sub78 * 7 | 0;
      $arrayidx234 = $labelInfo + 1310736 + ($mul232 << 2) | 0;
      HEAP32[$arrayidx234 >> 2] = (HEAP32[$arrayidx234 >> 2] | 0) + 1;
      $arrayidx237 = $labelInfo + 1310736 + ($mul232 + 1 << 2) | 0;
      HEAP32[$arrayidx237 >> 2] = (HEAP32[$arrayidx237 >> 2] | 0) + $i$2;
      $arrayidx240 = $labelInfo + 1310736 + ($mul232 + 2 << 2) | 0;
      HEAP32[$arrayidx240 >> 2] = (HEAP32[$arrayidx240 >> 2] | 0) + $j$0;
      $arrayidx243 = $labelInfo + 1310736 + ($mul232 + 4 << 2) | 0;
      if ((HEAP32[$arrayidx243 >> 2] | 0) < ($i$2 | 0)) HEAP32[$arrayidx243 >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($mul232 + 6 << 2) >> 2] = $j$0;
      $wk_max$3 = $wk_max$1;
      break;
     }
     $38 = HEAP16[$add$ptr133 >> 1] | 0;
     if ($38 << 16 >> 16 > 0) {
      HEAP16[$pnt2$3 >> 1] = $38;
      $39 = ($38 << 16 >> 16) * 7 | 0;
      $arrayidx263 = $labelInfo + 1310736 + ($39 + -7 << 2) | 0;
      HEAP32[$arrayidx263 >> 2] = (HEAP32[$arrayidx263 >> 2] | 0) + 1;
      $arrayidx266 = $labelInfo + 1310736 + ($39 + -6 << 2) | 0;
      HEAP32[$arrayidx266 >> 2] = (HEAP32[$arrayidx266 >> 2] | 0) + $i$2;
      $arrayidx269 = $labelInfo + 1310736 + ($39 + -5 << 2) | 0;
      HEAP32[$arrayidx269 >> 2] = (HEAP32[$arrayidx269 >> 2] | 0) + $j$0;
      $add271 = $39 + -3 | 0;
      if ((HEAP32[$labelInfo + 1310736 + ($add271 << 2) >> 2] | 0) < ($i$2 | 0)) {
       $$sink = $i$2;
       $add276$sink = $add271;
       $wk_max$2 = $wk_max$1;
      } else {
       $wk_max$3 = $wk_max$1;
       break;
      }
     } else {
      $inc280 = $wk_max$1 + 1 | 0;
      if (($wk_max$1 | 0) > 32767) {
       label = 50;
       break L9;
      }
      HEAP16[$pnt2$3 >> 1] = $inc280;
      HEAP32[$labelInfo + 1179664 + ($wk_max$1 << 2) >> 2] = $inc280 << 16 >> 16;
      $mul290 = $wk_max$1 * 7 | 0;
      HEAP32[$labelInfo + 1310736 + ($mul290 << 2) >> 2] = 1;
      HEAP32[$labelInfo + 1310736 + ($mul290 + 1 << 2) >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($mul290 + 2 << 2) >> 2] = $j$0;
      HEAP32[$labelInfo + 1310736 + ($mul290 + 3 << 2) >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($mul290 + 4 << 2) >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($mul290 + 5 << 2) >> 2] = $j$0;
      $$sink = $j$0;
      $add276$sink = $mul290 + 6 | 0;
      $wk_max$2 = $inc280;
     }
     HEAP32[$labelInfo + 1310736 + ($add276$sink << 2) >> 2] = $$sink;
     $wk_max$3 = $wk_max$2;
     break;
    }
    $sub74 = ($9 << 16 >> 16) + -1 | 0;
    $arrayidx75 = $labelInfo + 1179664 + ($sub74 << 2) | 0;
    if ($cmp69) {
     $11 = HEAP32[$arrayidx75 >> 2] | 0;
     $12 = HEAP32[$labelInfo + 1179664 + ($sub78 << 2) >> 2] | 0;
     L35 : do if (($11 | 0) > ($12 | 0)) {
      HEAP16[$pnt2$3 >> 1] = $12;
      $k$0 = 0;
      $wk$0 = $arraydecay;
      while (1) {
       if (($k$0 | 0) >= ($wk_max$1 | 0)) {
        $15 = $12;
        break L35;
       }
       if ((HEAP32[$wk$0 >> 2] | 0) == ($11 | 0)) HEAP32[$wk$0 >> 2] = $12;
       $k$0 = $k$0 + 1 | 0;
       $wk$0 = $wk$0 + 4 | 0;
      }
     } else {
      HEAP16[$pnt2$3 >> 1] = $11;
      if (($11 | 0) < ($12 | 0)) {
       $k$1 = 0;
       $wk$1 = $arraydecay;
       while (1) {
        if (($k$1 | 0) >= ($wk_max$1 | 0)) {
         $15 = $11;
         break L35;
        }
        if ((HEAP32[$wk$1 >> 2] | 0) == ($12 | 0)) HEAP32[$wk$1 >> 2] = $11;
        $k$1 = $k$1 + 1 | 0;
        $wk$1 = $wk$1 + 4 | 0;
       }
      } else $15 = $11;
     } while (0);
     $16 = ($15 << 16 >> 16) * 7 | 0;
     $arrayidx122 = $labelInfo + 1310736 + ($16 + -7 << 2) | 0;
     HEAP32[$arrayidx122 >> 2] = (HEAP32[$arrayidx122 >> 2] | 0) + 1;
     $arrayidx125 = $labelInfo + 1310736 + ($16 + -6 << 2) | 0;
     HEAP32[$arrayidx125 >> 2] = (HEAP32[$arrayidx125 >> 2] | 0) + $i$2;
     $arrayidx128 = $labelInfo + 1310736 + ($16 + -5 << 2) | 0;
     HEAP32[$arrayidx128 >> 2] = (HEAP32[$arrayidx128 >> 2] | 0) + $j$0;
     HEAP32[$labelInfo + 1310736 + ($16 + -1 << 2) >> 2] = $j$0;
     $wk_max$3 = $wk_max$1;
     break;
    }
    $20 = HEAP16[$add$ptr133 >> 1] | 0;
    if ($20 << 16 >> 16 <= 0) {
     HEAP16[$pnt2$3 >> 1] = $9;
     $mul201 = $sub74 * 7 | 0;
     $arrayidx203 = $labelInfo + 1310736 + ($mul201 << 2) | 0;
     HEAP32[$arrayidx203 >> 2] = (HEAP32[$arrayidx203 >> 2] | 0) + 1;
     $arrayidx206 = $labelInfo + 1310736 + ($mul201 + 1 << 2) | 0;
     HEAP32[$arrayidx206 >> 2] = (HEAP32[$arrayidx206 >> 2] | 0) + $i$2;
     $arrayidx209 = $labelInfo + 1310736 + ($mul201 + 2 << 2) | 0;
     HEAP32[$arrayidx209 >> 2] = (HEAP32[$arrayidx209 >> 2] | 0) + $j$0;
     $arrayidx212 = $labelInfo + 1310736 + ($mul201 + 3 << 2) | 0;
     if ((HEAP32[$arrayidx212 >> 2] | 0) > ($i$2 | 0)) HEAP32[$arrayidx212 >> 2] = $i$2;
     HEAP32[$labelInfo + 1310736 + ($mul201 + 6 << 2) >> 2] = $j$0;
     $wk_max$3 = $wk_max$1;
     break;
    }
    $21 = HEAP32[$arrayidx75 >> 2] | 0;
    $22 = HEAP32[$labelInfo + 1179664 + (($20 << 16 >> 16) + -1 << 2) >> 2] | 0;
    L58 : do if (($21 | 0) > ($22 | 0)) {
     HEAP16[$pnt2$3 >> 1] = $22;
     $k$2 = 0;
     $wk$2 = $arraydecay;
     while (1) {
      if (($k$2 | 0) >= ($wk_max$1 | 0)) {
       $25 = $22;
       break L58;
      }
      if ((HEAP32[$wk$2 >> 2] | 0) == ($21 | 0)) HEAP32[$wk$2 >> 2] = $22;
      $k$2 = $k$2 + 1 | 0;
      $wk$2 = $wk$2 + 4 | 0;
     }
    } else {
     HEAP16[$pnt2$3 >> 1] = $21;
     if (($21 | 0) < ($22 | 0)) {
      $k$3 = 0;
      $wk$3 = $arraydecay;
      while (1) {
       if (($k$3 | 0) >= ($wk_max$1 | 0)) {
        $25 = $21;
        break L58;
       }
       if ((HEAP32[$wk$3 >> 2] | 0) == ($22 | 0)) HEAP32[$wk$3 >> 2] = $21;
       $k$3 = $k$3 + 1 | 0;
       $wk$3 = $wk$3 + 4 | 0;
      }
     } else $25 = $21;
    } while (0);
    $26 = ($25 << 16 >> 16) * 7 | 0;
    $arrayidx189 = $labelInfo + 1310736 + ($26 + -7 << 2) | 0;
    HEAP32[$arrayidx189 >> 2] = (HEAP32[$arrayidx189 >> 2] | 0) + 1;
    $arrayidx192 = $labelInfo + 1310736 + ($26 + -6 << 2) | 0;
    HEAP32[$arrayidx192 >> 2] = (HEAP32[$arrayidx192 >> 2] | 0) + $i$2;
    $arrayidx195 = $labelInfo + 1310736 + ($26 + -5 << 2) | 0;
    HEAP32[$arrayidx195 >> 2] = (HEAP32[$arrayidx195 >> 2] | 0) + $j$0;
    $wk_max$3 = $wk_max$1;
   } else {
    HEAP16[$pnt2$3 >> 1] = 0;
    $wk_max$3 = $wk_max$1;
   } while (0);
   $i$2 = $i$2 + 1 | 0;
   $pnt$1 = $pnt$1 + 4 | 0;
   $pnt2$3 = $pnt2$3 + 2 | 0;
   $wk_max$1 = $wk_max$3;
  }
  $j$0 = $j$0 + 1 | 0;
  $pnt$0 = $pnt$1 + 8 | 0;
  $pnt2$2 = $pnt2$3 + 4 | 0;
  $wk_max$0 = $wk_max$1;
 }
 L77 : do if ((label | 0) == 50) {
  _arLog(3, 3256, $vararg_buffer);
  $retval$0 = -1;
 } else if ((label | 0) == 56) {
  $arrayidx323 = $labelInfo + 12 | 0;
  $i$3 = 1;
  $j$1 = 1;
  $wk$4 = $arraydecay;
  while (1) {
   if (($i$3 | 0) > ($wk_max$0 | 0)) break;
   $44 = HEAP32[$wk$4 >> 2] | 0;
   if (($44 | 0) == ($i$3 | 0)) {
    $cond = $j$1;
    $j$2 = $j$1 + 1 | 0;
   } else {
    $cond = HEAP32[$labelInfo + 1179664 + ($44 + -1 << 2) >> 2] | 0;
    $j$2 = $j$1;
   }
   HEAP32[$wk$4 >> 2] = $cond;
   $i$3 = $i$3 + 1 | 0;
   $j$1 = $j$2;
   $wk$4 = $wk$4 + 4 | 0;
  }
  $label_num321 = $labelInfo + 8 | 0;
  $sub344 = $j$1 + -1 | 0;
  HEAP32[$label_num321 >> 2] = $sub344;
  if (!$sub344) $retval$0 = 0; else {
   _memset($arrayidx323 | 0, 0, $sub344 << 2 | 0) | 0;
   _memset($labelInfo + 655376 | 0, 0, $sub344 << 4 | 0) | 0;
   $46 = $sub344;
   $i$4 = 0;
   while (1) {
    if (($i$4 | 0) >= ($46 | 0)) {
     $i$5 = 0;
     break;
    }
    $mul356 = $i$4 << 2;
    HEAP32[$labelInfo + 131084 + ($mul356 << 2) >> 2] = $xsize;
    HEAP32[$labelInfo + 131084 + (($mul356 | 1) << 2) >> 2] = 0;
    HEAP32[$labelInfo + 131084 + (($mul356 | 2) << 2) >> 2] = $ysize;
    HEAP32[$labelInfo + 131084 + (($mul356 | 3) << 2) >> 2] = 0;
    $46 = HEAP32[$label_num321 >> 2] | 0;
    $i$4 = $i$4 + 1 | 0;
   }
   while (1) {
    if (($i$5 | 0) >= ($wk_max$0 | 0)) {
     $i$6 = 0;
     break;
    }
    $sub376 = (HEAP32[$labelInfo + 1179664 + ($i$5 << 2) >> 2] | 0) + -1 | 0;
    $mul377 = $i$5 * 7 | 0;
    $arrayidx380 = $labelInfo + 12 + ($sub376 << 2) | 0;
    HEAP32[$arrayidx380 >> 2] = (HEAP32[$arrayidx380 >> 2] | 0) + (HEAP32[$labelInfo + 1310736 + ($mul377 << 2) >> 2] | 0);
    $mul386 = $sub376 << 1;
    $arrayidx388 = $labelInfo + 655376 + ($mul386 << 3) | 0;
    HEAPF64[$arrayidx388 >> 3] = +HEAPF64[$arrayidx388 >> 3] + +(HEAP32[$labelInfo + 1310736 + ($mul377 + 1 << 2) >> 2] | 0);
    $arrayidx396 = $labelInfo + 655376 + (($mul386 | 1) << 3) | 0;
    HEAPF64[$arrayidx396 >> 3] = +HEAPF64[$arrayidx396 >> 3] + +(HEAP32[$labelInfo + 1310736 + ($mul377 + 2 << 2) >> 2] | 0);
    $mul398 = $sub376 << 2;
    $arrayidx400 = $labelInfo + 131084 + ($mul398 << 2) | 0;
    $55 = HEAP32[$labelInfo + 1310736 + ($mul377 + 3 << 2) >> 2] | 0;
    if ((HEAP32[$arrayidx400 >> 2] | 0) > ($55 | 0)) HEAP32[$arrayidx400 >> 2] = $55;
    $arrayidx416 = $labelInfo + 131084 + (($mul398 | 1) << 2) | 0;
    $57 = HEAP32[$labelInfo + 1310736 + ($mul377 + 4 << 2) >> 2] | 0;
    if ((HEAP32[$arrayidx416 >> 2] | 0) < ($57 | 0)) HEAP32[$arrayidx416 >> 2] = $57;
    $arrayidx432 = $labelInfo + 131084 + (($mul398 | 2) << 2) | 0;
    $59 = HEAP32[$labelInfo + 1310736 + ($mul377 + 5 << 2) >> 2] | 0;
    if ((HEAP32[$arrayidx432 >> 2] | 0) > ($59 | 0)) HEAP32[$arrayidx432 >> 2] = $59;
    $arrayidx448 = $labelInfo + 131084 + (($mul398 | 3) << 2) | 0;
    $61 = HEAP32[$labelInfo + 1310736 + ($mul377 + 6 << 2) >> 2] | 0;
    if ((HEAP32[$arrayidx448 >> 2] | 0) < ($61 | 0)) HEAP32[$arrayidx448 >> 2] = $61;
    $i$5 = $i$5 + 1 | 0;
   }
   while (1) {
    if (($i$6 | 0) >= (HEAP32[$label_num321 >> 2] | 0)) {
     $retval$0 = 0;
     break L77;
    }
    $arrayidx469 = $labelInfo + 12 + ($i$6 << 2) | 0;
    $mul471 = $i$6 << 1;
    $arrayidx473 = $labelInfo + 655376 + ($mul471 << 3) | 0;
    HEAPF64[$arrayidx473 >> 3] = +HEAPF64[$arrayidx473 >> 3] / +(HEAP32[$arrayidx469 >> 2] | 0);
    $arrayidx478 = $labelInfo + 655376 + (($mul471 | 1) << 3) | 0;
    HEAPF64[$arrayidx478 >> 3] = +HEAPF64[$arrayidx478 >> 3] / +(HEAP32[$arrayidx469 >> 2] | 0);
    $i$6 = $i$6 + 1 | 0;
   }
  }
 } while (0);
 STACKTOP = sp;
 return $retval$0 | 0;
}

function _arLabelingSubDBR3CA($image, $xsize, $ysize, $labelingThresh, $labelInfo) {
 $image = $image | 0;
 $xsize = $xsize | 0;
 $ysize = $ysize | 0;
 $labelingThresh = $labelingThresh | 0;
 $labelInfo = $labelInfo | 0;
 var $$sink = 0, $0 = 0, $10 = 0, $11 = 0, $12 = 0, $15 = 0, $16 = 0, $20 = 0, $21 = 0, $22 = 0, $25 = 0, $26 = 0, $38 = 0, $39 = 0, $4 = 0, $44 = 0, $46 = 0, $5 = 0, $55 = 0, $57 = 0, $59 = 0, $61 = 0, $9 = 0, $add = 0, $add$ptr133 = 0, $add271 = 0, $add276$sink = 0, $arraydecay = 0, $arrayidx122 = 0, $arrayidx125 = 0, $arrayidx128 = 0, $arrayidx189 = 0, $arrayidx192 = 0, $arrayidx195 = 0, $arrayidx203 = 0, $arrayidx206 = 0, $arrayidx209 = 0, $arrayidx212 = 0, $arrayidx234 = 0, $arrayidx237 = 0, $arrayidx240 = 0, $arrayidx243 = 0, $arrayidx263 = 0, $arrayidx266 = 0, $arrayidx269 = 0, $arrayidx323 = 0, $arrayidx380 = 0, $arrayidx388 = 0, $arrayidx396 = 0, $arrayidx400 = 0, $arrayidx416 = 0, $arrayidx43 = 0, $arrayidx432 = 0, $arrayidx448 = 0, $arrayidx469 = 0, $arrayidx473 = 0, $arrayidx478 = 0, $arrayidx52 = 0, $arrayidx55 = 0, $arrayidx58 = 0, $arrayidx75 = 0, $cmp69 = 0, $cond = 0, $i$0 = 0, $i$1 = 0, $i$2 = 0, $i$3 = 0, $i$4 = 0, $i$5 = 0, $i$6 = 0, $inc280 = 0, $j$0 = 0, $j$1 = 0, $j$2 = 0, $k$0 = 0, $k$1 = 0, $k$2 = 0, $k$3 = 0, $label_num321 = 0, $mul = 0, $mul201 = 0, $mul232 = 0, $mul290 = 0, $mul356 = 0, $mul377 = 0, $mul386 = 0, $mul398 = 0, $mul471 = 0, $pnt$0 = 0, $pnt$1 = 0, $pnt1$0 = 0, $pnt1$1 = 0, $pnt2$0 = 0, $pnt2$1 = 0, $pnt2$2 = 0, $pnt2$3 = 0, $retval$0 = 0, $sub = 0, $sub344 = 0, $sub376 = 0, $sub42 = 0, $sub74 = 0, $sub78 = 0, $sub8 = 0, $vararg_buffer = 0, $wk$0 = 0, $wk$1 = 0, $wk$2 = 0, $wk$3 = 0, $wk$4 = 0, $wk_max$0 = 0, $wk_max$1 = 0, $wk_max$2 = 0, $wk_max$3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $vararg_buffer = sp;
 $0 = HEAP32[$labelInfo >> 2] | 0;
 $sub = $ysize + -1 | 0;
 $i$0 = 0;
 $pnt1$0 = $0;
 $pnt2$0 = $0 + ((Math_imul($sub, $xsize) | 0) << 1) | 0;
 while (1) {
  if (($i$0 | 0) >= ($xsize | 0)) break;
  HEAP16[$pnt2$0 >> 1] = 0;
  HEAP16[$pnt1$0 >> 1] = 0;
  $i$0 = $i$0 + 1 | 0;
  $pnt1$0 = $pnt1$0 + 2 | 0;
  $pnt2$0 = $pnt2$0 + 2 | 0;
 }
 $mul = $labelingThresh * 3 | 0;
 $sub8 = $xsize + -1 | 0;
 $i$1 = 0;
 $pnt1$1 = $0;
 $pnt2$1 = $0 + ($sub8 << 1) | 0;
 while (1) {
  if (($i$1 | 0) >= ($ysize | 0)) break;
  HEAP16[$pnt2$1 >> 1] = 0;
  HEAP16[$pnt1$1 >> 1] = 0;
  $i$1 = $i$1 + 1 | 0;
  $pnt1$1 = $pnt1$1 + ($xsize << 1) | 0;
  $pnt2$1 = $pnt2$1 + ($xsize << 1) | 0;
 }
 $arraydecay = $labelInfo + 1179664 | 0;
 $add = $xsize + 1 | 0;
 $sub42 = 0 - $xsize | 0;
 $j$0 = 1;
 $pnt$0 = $image + ($add << 2) | 0;
 $pnt2$2 = $0 + ($add << 1) | 0;
 $wk_max$0 = 0;
 L9 : while (1) {
  if (($j$0 | 0) < ($sub | 0)) {
   $i$2 = 1;
   $pnt$1 = $pnt$0;
   $pnt2$3 = $pnt2$2;
   $wk_max$1 = $wk_max$0;
  } else {
   label = 56;
   break;
  }
  while (1) {
   if (($i$2 | 0) >= ($sub8 | 0)) break;
   do if (((HEAPU8[$pnt$1 + 1 >> 0] | 0) + (HEAPU8[$pnt$1 >> 0] | 0) + (HEAPU8[$pnt$1 + 2 >> 0] | 0) | 0) > ($mul | 0)) {
    HEAP16[$pnt2$3 >> 1] = 0;
    $wk_max$3 = $wk_max$1;
   } else {
    $arrayidx43 = $pnt2$3 + ($sub42 << 1) | 0;
    $4 = HEAP16[$arrayidx43 >> 1] | 0;
    if ($4 << 16 >> 16 > 0) {
     HEAP16[$pnt2$3 >> 1] = $4;
     $5 = ($4 << 16 >> 16) * 7 | 0;
     $arrayidx52 = $labelInfo + 1310736 + ($5 + -7 << 2) | 0;
     HEAP32[$arrayidx52 >> 2] = (HEAP32[$arrayidx52 >> 2] | 0) + 1;
     $arrayidx55 = $labelInfo + 1310736 + ($5 + -6 << 2) | 0;
     HEAP32[$arrayidx55 >> 2] = (HEAP32[$arrayidx55 >> 2] | 0) + $i$2;
     $arrayidx58 = $labelInfo + 1310736 + ($5 + -5 << 2) | 0;
     HEAP32[$arrayidx58 >> 2] = (HEAP32[$arrayidx58 >> 2] | 0) + $j$0;
     HEAP32[$labelInfo + 1310736 + ($5 + -1 << 2) >> 2] = $j$0;
     $wk_max$3 = $wk_max$1;
     break;
    }
    $9 = HEAP16[$arrayidx43 + 2 >> 1] | 0;
    $10 = HEAP16[$arrayidx43 + -2 >> 1] | 0;
    $cmp69 = $10 << 16 >> 16 > 0;
    $sub78 = ($10 << 16 >> 16) + -1 | 0;
    $add$ptr133 = $pnt2$3 + -2 | 0;
    if ($9 << 16 >> 16 <= 0) {
     if ($cmp69) {
      HEAP16[$pnt2$3 >> 1] = $10;
      $mul232 = $sub78 * 7 | 0;
      $arrayidx234 = $labelInfo + 1310736 + ($mul232 << 2) | 0;
      HEAP32[$arrayidx234 >> 2] = (HEAP32[$arrayidx234 >> 2] | 0) + 1;
      $arrayidx237 = $labelInfo + 1310736 + ($mul232 + 1 << 2) | 0;
      HEAP32[$arrayidx237 >> 2] = (HEAP32[$arrayidx237 >> 2] | 0) + $i$2;
      $arrayidx240 = $labelInfo + 1310736 + ($mul232 + 2 << 2) | 0;
      HEAP32[$arrayidx240 >> 2] = (HEAP32[$arrayidx240 >> 2] | 0) + $j$0;
      $arrayidx243 = $labelInfo + 1310736 + ($mul232 + 4 << 2) | 0;
      if ((HEAP32[$arrayidx243 >> 2] | 0) < ($i$2 | 0)) HEAP32[$arrayidx243 >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($mul232 + 6 << 2) >> 2] = $j$0;
      $wk_max$3 = $wk_max$1;
      break;
     }
     $38 = HEAP16[$add$ptr133 >> 1] | 0;
     if ($38 << 16 >> 16 > 0) {
      HEAP16[$pnt2$3 >> 1] = $38;
      $39 = ($38 << 16 >> 16) * 7 | 0;
      $arrayidx263 = $labelInfo + 1310736 + ($39 + -7 << 2) | 0;
      HEAP32[$arrayidx263 >> 2] = (HEAP32[$arrayidx263 >> 2] | 0) + 1;
      $arrayidx266 = $labelInfo + 1310736 + ($39 + -6 << 2) | 0;
      HEAP32[$arrayidx266 >> 2] = (HEAP32[$arrayidx266 >> 2] | 0) + $i$2;
      $arrayidx269 = $labelInfo + 1310736 + ($39 + -5 << 2) | 0;
      HEAP32[$arrayidx269 >> 2] = (HEAP32[$arrayidx269 >> 2] | 0) + $j$0;
      $add271 = $39 + -3 | 0;
      if ((HEAP32[$labelInfo + 1310736 + ($add271 << 2) >> 2] | 0) < ($i$2 | 0)) {
       $$sink = $i$2;
       $add276$sink = $add271;
       $wk_max$2 = $wk_max$1;
      } else {
       $wk_max$3 = $wk_max$1;
       break;
      }
     } else {
      $inc280 = $wk_max$1 + 1 | 0;
      if (($wk_max$1 | 0) > 32767) {
       label = 50;
       break L9;
      }
      HEAP16[$pnt2$3 >> 1] = $inc280;
      HEAP32[$labelInfo + 1179664 + ($wk_max$1 << 2) >> 2] = $inc280 << 16 >> 16;
      $mul290 = $wk_max$1 * 7 | 0;
      HEAP32[$labelInfo + 1310736 + ($mul290 << 2) >> 2] = 1;
      HEAP32[$labelInfo + 1310736 + ($mul290 + 1 << 2) >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($mul290 + 2 << 2) >> 2] = $j$0;
      HEAP32[$labelInfo + 1310736 + ($mul290 + 3 << 2) >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($mul290 + 4 << 2) >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($mul290 + 5 << 2) >> 2] = $j$0;
      $$sink = $j$0;
      $add276$sink = $mul290 + 6 | 0;
      $wk_max$2 = $inc280;
     }
     HEAP32[$labelInfo + 1310736 + ($add276$sink << 2) >> 2] = $$sink;
     $wk_max$3 = $wk_max$2;
     break;
    }
    $sub74 = ($9 << 16 >> 16) + -1 | 0;
    $arrayidx75 = $labelInfo + 1179664 + ($sub74 << 2) | 0;
    if ($cmp69) {
     $11 = HEAP32[$arrayidx75 >> 2] | 0;
     $12 = HEAP32[$labelInfo + 1179664 + ($sub78 << 2) >> 2] | 0;
     L36 : do if (($11 | 0) > ($12 | 0)) {
      HEAP16[$pnt2$3 >> 1] = $12;
      $k$0 = 0;
      $wk$0 = $arraydecay;
      while (1) {
       if (($k$0 | 0) >= ($wk_max$1 | 0)) {
        $15 = $12;
        break L36;
       }
       if ((HEAP32[$wk$0 >> 2] | 0) == ($11 | 0)) HEAP32[$wk$0 >> 2] = $12;
       $k$0 = $k$0 + 1 | 0;
       $wk$0 = $wk$0 + 4 | 0;
      }
     } else {
      HEAP16[$pnt2$3 >> 1] = $11;
      if (($11 | 0) < ($12 | 0)) {
       $k$1 = 0;
       $wk$1 = $arraydecay;
       while (1) {
        if (($k$1 | 0) >= ($wk_max$1 | 0)) {
         $15 = $11;
         break L36;
        }
        if ((HEAP32[$wk$1 >> 2] | 0) == ($12 | 0)) HEAP32[$wk$1 >> 2] = $11;
        $k$1 = $k$1 + 1 | 0;
        $wk$1 = $wk$1 + 4 | 0;
       }
      } else $15 = $11;
     } while (0);
     $16 = ($15 << 16 >> 16) * 7 | 0;
     $arrayidx122 = $labelInfo + 1310736 + ($16 + -7 << 2) | 0;
     HEAP32[$arrayidx122 >> 2] = (HEAP32[$arrayidx122 >> 2] | 0) + 1;
     $arrayidx125 = $labelInfo + 1310736 + ($16 + -6 << 2) | 0;
     HEAP32[$arrayidx125 >> 2] = (HEAP32[$arrayidx125 >> 2] | 0) + $i$2;
     $arrayidx128 = $labelInfo + 1310736 + ($16 + -5 << 2) | 0;
     HEAP32[$arrayidx128 >> 2] = (HEAP32[$arrayidx128 >> 2] | 0) + $j$0;
     HEAP32[$labelInfo + 1310736 + ($16 + -1 << 2) >> 2] = $j$0;
     $wk_max$3 = $wk_max$1;
     break;
    }
    $20 = HEAP16[$add$ptr133 >> 1] | 0;
    if ($20 << 16 >> 16 <= 0) {
     HEAP16[$pnt2$3 >> 1] = $9;
     $mul201 = $sub74 * 7 | 0;
     $arrayidx203 = $labelInfo + 1310736 + ($mul201 << 2) | 0;
     HEAP32[$arrayidx203 >> 2] = (HEAP32[$arrayidx203 >> 2] | 0) + 1;
     $arrayidx206 = $labelInfo + 1310736 + ($mul201 + 1 << 2) | 0;
     HEAP32[$arrayidx206 >> 2] = (HEAP32[$arrayidx206 >> 2] | 0) + $i$2;
     $arrayidx209 = $labelInfo + 1310736 + ($mul201 + 2 << 2) | 0;
     HEAP32[$arrayidx209 >> 2] = (HEAP32[$arrayidx209 >> 2] | 0) + $j$0;
     $arrayidx212 = $labelInfo + 1310736 + ($mul201 + 3 << 2) | 0;
     if ((HEAP32[$arrayidx212 >> 2] | 0) > ($i$2 | 0)) HEAP32[$arrayidx212 >> 2] = $i$2;
     HEAP32[$labelInfo + 1310736 + ($mul201 + 6 << 2) >> 2] = $j$0;
     $wk_max$3 = $wk_max$1;
     break;
    }
    $21 = HEAP32[$arrayidx75 >> 2] | 0;
    $22 = HEAP32[$labelInfo + 1179664 + (($20 << 16 >> 16) + -1 << 2) >> 2] | 0;
    L59 : do if (($21 | 0) > ($22 | 0)) {
     HEAP16[$pnt2$3 >> 1] = $22;
     $k$2 = 0;
     $wk$2 = $arraydecay;
     while (1) {
      if (($k$2 | 0) >= ($wk_max$1 | 0)) {
       $25 = $22;
       break L59;
      }
      if ((HEAP32[$wk$2 >> 2] | 0) == ($21 | 0)) HEAP32[$wk$2 >> 2] = $22;
      $k$2 = $k$2 + 1 | 0;
      $wk$2 = $wk$2 + 4 | 0;
     }
    } else {
     HEAP16[$pnt2$3 >> 1] = $21;
     if (($21 | 0) < ($22 | 0)) {
      $k$3 = 0;
      $wk$3 = $arraydecay;
      while (1) {
       if (($k$3 | 0) >= ($wk_max$1 | 0)) {
        $25 = $21;
        break L59;
       }
       if ((HEAP32[$wk$3 >> 2] | 0) == ($22 | 0)) HEAP32[$wk$3 >> 2] = $21;
       $k$3 = $k$3 + 1 | 0;
       $wk$3 = $wk$3 + 4 | 0;
      }
     } else $25 = $21;
    } while (0);
    $26 = ($25 << 16 >> 16) * 7 | 0;
    $arrayidx189 = $labelInfo + 1310736 + ($26 + -7 << 2) | 0;
    HEAP32[$arrayidx189 >> 2] = (HEAP32[$arrayidx189 >> 2] | 0) + 1;
    $arrayidx192 = $labelInfo + 1310736 + ($26 + -6 << 2) | 0;
    HEAP32[$arrayidx192 >> 2] = (HEAP32[$arrayidx192 >> 2] | 0) + $i$2;
    $arrayidx195 = $labelInfo + 1310736 + ($26 + -5 << 2) | 0;
    HEAP32[$arrayidx195 >> 2] = (HEAP32[$arrayidx195 >> 2] | 0) + $j$0;
    $wk_max$3 = $wk_max$1;
   } while (0);
   $i$2 = $i$2 + 1 | 0;
   $pnt$1 = $pnt$1 + 4 | 0;
   $pnt2$3 = $pnt2$3 + 2 | 0;
   $wk_max$1 = $wk_max$3;
  }
  $j$0 = $j$0 + 1 | 0;
  $pnt$0 = $pnt$1 + 8 | 0;
  $pnt2$2 = $pnt2$3 + 4 | 0;
  $wk_max$0 = $wk_max$1;
 }
 L77 : do if ((label | 0) == 50) {
  _arLog(3, 3256, $vararg_buffer);
  $retval$0 = -1;
 } else if ((label | 0) == 56) {
  $arrayidx323 = $labelInfo + 12 | 0;
  $i$3 = 1;
  $j$1 = 1;
  $wk$4 = $arraydecay;
  while (1) {
   if (($i$3 | 0) > ($wk_max$0 | 0)) break;
   $44 = HEAP32[$wk$4 >> 2] | 0;
   if (($44 | 0) == ($i$3 | 0)) {
    $cond = $j$1;
    $j$2 = $j$1 + 1 | 0;
   } else {
    $cond = HEAP32[$labelInfo + 1179664 + ($44 + -1 << 2) >> 2] | 0;
    $j$2 = $j$1;
   }
   HEAP32[$wk$4 >> 2] = $cond;
   $i$3 = $i$3 + 1 | 0;
   $j$1 = $j$2;
   $wk$4 = $wk$4 + 4 | 0;
  }
  $label_num321 = $labelInfo + 8 | 0;
  $sub344 = $j$1 + -1 | 0;
  HEAP32[$label_num321 >> 2] = $sub344;
  if (!$sub344) $retval$0 = 0; else {
   _memset($arrayidx323 | 0, 0, $sub344 << 2 | 0) | 0;
   _memset($labelInfo + 655376 | 0, 0, $sub344 << 4 | 0) | 0;
   $46 = $sub344;
   $i$4 = 0;
   while (1) {
    if (($i$4 | 0) >= ($46 | 0)) {
     $i$5 = 0;
     break;
    }
    $mul356 = $i$4 << 2;
    HEAP32[$labelInfo + 131084 + ($mul356 << 2) >> 2] = $xsize;
    HEAP32[$labelInfo + 131084 + (($mul356 | 1) << 2) >> 2] = 0;
    HEAP32[$labelInfo + 131084 + (($mul356 | 2) << 2) >> 2] = $ysize;
    HEAP32[$labelInfo + 131084 + (($mul356 | 3) << 2) >> 2] = 0;
    $46 = HEAP32[$label_num321 >> 2] | 0;
    $i$4 = $i$4 + 1 | 0;
   }
   while (1) {
    if (($i$5 | 0) >= ($wk_max$0 | 0)) {
     $i$6 = 0;
     break;
    }
    $sub376 = (HEAP32[$labelInfo + 1179664 + ($i$5 << 2) >> 2] | 0) + -1 | 0;
    $mul377 = $i$5 * 7 | 0;
    $arrayidx380 = $labelInfo + 12 + ($sub376 << 2) | 0;
    HEAP32[$arrayidx380 >> 2] = (HEAP32[$arrayidx380 >> 2] | 0) + (HEAP32[$labelInfo + 1310736 + ($mul377 << 2) >> 2] | 0);
    $mul386 = $sub376 << 1;
    $arrayidx388 = $labelInfo + 655376 + ($mul386 << 3) | 0;
    HEAPF64[$arrayidx388 >> 3] = +HEAPF64[$arrayidx388 >> 3] + +(HEAP32[$labelInfo + 1310736 + ($mul377 + 1 << 2) >> 2] | 0);
    $arrayidx396 = $labelInfo + 655376 + (($mul386 | 1) << 3) | 0;
    HEAPF64[$arrayidx396 >> 3] = +HEAPF64[$arrayidx396 >> 3] + +(HEAP32[$labelInfo + 1310736 + ($mul377 + 2 << 2) >> 2] | 0);
    $mul398 = $sub376 << 2;
    $arrayidx400 = $labelInfo + 131084 + ($mul398 << 2) | 0;
    $55 = HEAP32[$labelInfo + 1310736 + ($mul377 + 3 << 2) >> 2] | 0;
    if ((HEAP32[$arrayidx400 >> 2] | 0) > ($55 | 0)) HEAP32[$arrayidx400 >> 2] = $55;
    $arrayidx416 = $labelInfo + 131084 + (($mul398 | 1) << 2) | 0;
    $57 = HEAP32[$labelInfo + 1310736 + ($mul377 + 4 << 2) >> 2] | 0;
    if ((HEAP32[$arrayidx416 >> 2] | 0) < ($57 | 0)) HEAP32[$arrayidx416 >> 2] = $57;
    $arrayidx432 = $labelInfo + 131084 + (($mul398 | 2) << 2) | 0;
    $59 = HEAP32[$labelInfo + 1310736 + ($mul377 + 5 << 2) >> 2] | 0;
    if ((HEAP32[$arrayidx432 >> 2] | 0) > ($59 | 0)) HEAP32[$arrayidx432 >> 2] = $59;
    $arrayidx448 = $labelInfo + 131084 + (($mul398 | 3) << 2) | 0;
    $61 = HEAP32[$labelInfo + 1310736 + ($mul377 + 6 << 2) >> 2] | 0;
    if ((HEAP32[$arrayidx448 >> 2] | 0) < ($61 | 0)) HEAP32[$arrayidx448 >> 2] = $61;
    $i$5 = $i$5 + 1 | 0;
   }
   while (1) {
    if (($i$6 | 0) >= (HEAP32[$label_num321 >> 2] | 0)) {
     $retval$0 = 0;
     break L77;
    }
    $arrayidx469 = $labelInfo + 12 + ($i$6 << 2) | 0;
    $mul471 = $i$6 << 1;
    $arrayidx473 = $labelInfo + 655376 + ($mul471 << 3) | 0;
    HEAPF64[$arrayidx473 >> 3] = +HEAPF64[$arrayidx473 >> 3] / +(HEAP32[$arrayidx469 >> 2] | 0);
    $arrayidx478 = $labelInfo + 655376 + (($mul471 | 1) << 3) | 0;
    HEAPF64[$arrayidx478 >> 3] = +HEAPF64[$arrayidx478 >> 3] / +(HEAP32[$arrayidx469 >> 2] | 0);
    $i$6 = $i$6 + 1 | 0;
   }
  }
 } while (0);
 STACKTOP = sp;
 return $retval$0 | 0;
}

function _arLabelingSubDWICY($image, $xsize, $ysize, $labelingThresh, $labelInfo) {
 $image = $image | 0;
 $xsize = $xsize | 0;
 $ysize = $ysize | 0;
 $labelingThresh = $labelingThresh | 0;
 $labelInfo = $labelInfo | 0;
 var $$sink = 0, $0 = 0, $10 = 0, $13 = 0, $14 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $23 = 0, $24 = 0, $3 = 0, $36 = 0, $37 = 0, $42 = 0, $44 = 0, $53 = 0, $55 = 0, $57 = 0, $59 = 0, $7 = 0, $8 = 0, $9 = 0, $add$ptr128 = 0, $add266 = 0, $add271$sink = 0, $arraydecay = 0, $arrayidx117 = 0, $arrayidx120 = 0, $arrayidx123 = 0, $arrayidx184 = 0, $arrayidx187 = 0, $arrayidx190 = 0, $arrayidx198 = 0, $arrayidx201 = 0, $arrayidx204 = 0, $arrayidx207 = 0, $arrayidx229 = 0, $arrayidx232 = 0, $arrayidx235 = 0, $arrayidx238 = 0, $arrayidx258 = 0, $arrayidx261 = 0, $arrayidx264 = 0, $arrayidx320 = 0, $arrayidx377 = 0, $arrayidx38 = 0, $arrayidx385 = 0, $arrayidx393 = 0, $arrayidx397 = 0, $arrayidx413 = 0, $arrayidx429 = 0, $arrayidx445 = 0, $arrayidx466 = 0, $arrayidx47 = 0, $arrayidx470 = 0, $arrayidx476 = 0, $arrayidx50 = 0, $arrayidx53 = 0, $arrayidx70 = 0, $cmp64 = 0, $cond = 0, $div = 0, $div1 = 0, $i$0 = 0, $i$1 = 0, $i$2 = 0, $i$3 = 0, $i$4 = 0, $i$5 = 0, $i$6 = 0, $inc275 = 0, $j$0 = 0, $j$1 = 0, $j$2 = 0, $k$0 = 0, $k$1 = 0, $k$2 = 0, $k$3 = 0, $label_num318 = 0, $mul196 = 0, $mul22 = 0, $mul227 = 0, $mul285 = 0, $mul353 = 0, $mul374 = 0, $mul383 = 0, $mul395 = 0, $mul468 = 0, $pnt$0 = 0, $pnt$1 = 0, $pnt1$0 = 0, $pnt1$1 = 0, $pnt2$0 = 0, $pnt2$1 = 0, $pnt2$2 = 0, $pnt2$3 = 0, $retval$0 = 0, $sub = 0, $sub341 = 0, $sub37 = 0, $sub373 = 0, $sub69 = 0, $sub73 = 0, $sub8 = 0, $vararg_buffer = 0, $wk$0 = 0, $wk$1 = 0, $wk$2 = 0, $wk$3 = 0, $wk$4 = 0, $wk_max$0 = 0, $wk_max$1 = 0, $wk_max$2 = 0, $wk_max$3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $vararg_buffer = sp;
 $div = ($xsize | 0) / 2 | 0;
 $div1 = ($ysize | 0) / 2 | 0;
 $0 = HEAP32[$labelInfo >> 2] | 0;
 $sub = $div1 + -1 | 0;
 $i$0 = 0;
 $pnt1$0 = $0;
 $pnt2$0 = $0 + ((Math_imul($sub, $div) | 0) << 1) | 0;
 while (1) {
  if (($i$0 | 0) >= ($div | 0)) break;
  HEAP16[$pnt2$0 >> 1] = 0;
  HEAP16[$pnt1$0 >> 1] = 0;
  $i$0 = $i$0 + 1 | 0;
  $pnt1$0 = $pnt1$0 + 2 | 0;
  $pnt2$0 = $pnt2$0 + 2 | 0;
 }
 $sub8 = $div + -1 | 0;
 $i$1 = 0;
 $pnt1$1 = $0;
 $pnt2$1 = $0 + ($sub8 << 1) | 0;
 while (1) {
  if (($i$1 | 0) >= ($div1 | 0)) break;
  HEAP16[$pnt2$1 >> 1] = 0;
  HEAP16[$pnt1$1 >> 1] = 0;
  $i$1 = $i$1 + 1 | 0;
  $pnt1$1 = $pnt1$1 + ($div << 1) | 0;
  $pnt2$1 = $pnt2$1 + ($div << 1) | 0;
 }
 $arraydecay = $labelInfo + 1179664 | 0;
 $mul22 = $xsize << 1;
 $sub37 = 0 - $div | 0;
 $j$0 = 1;
 $pnt$0 = $image + (($xsize << 2) + 4) | 0;
 $pnt2$2 = $0 + ($div + 1 << 1) | 0;
 $wk_max$0 = 0;
 L9 : while (1) {
  if (($j$0 | 0) < ($sub | 0)) {
   $i$2 = 1;
   $pnt$1 = $pnt$0;
   $pnt2$3 = $pnt2$2;
   $wk_max$1 = $wk_max$0;
  } else {
   label = 56;
   break;
  }
  while (1) {
   if (($i$2 | 0) >= ($sub8 | 0)) break;
   do if ((HEAPU8[$pnt$1 + 1 >> 0] | 0 | 0) > ($labelingThresh | 0)) {
    $arrayidx38 = $pnt2$3 + ($sub37 << 1) | 0;
    $2 = HEAP16[$arrayidx38 >> 1] | 0;
    if ($2 << 16 >> 16 > 0) {
     HEAP16[$pnt2$3 >> 1] = $2;
     $3 = ($2 << 16 >> 16) * 7 | 0;
     $arrayidx47 = $labelInfo + 1310736 + ($3 + -7 << 2) | 0;
     HEAP32[$arrayidx47 >> 2] = (HEAP32[$arrayidx47 >> 2] | 0) + 1;
     $arrayidx50 = $labelInfo + 1310736 + ($3 + -6 << 2) | 0;
     HEAP32[$arrayidx50 >> 2] = (HEAP32[$arrayidx50 >> 2] | 0) + $i$2;
     $arrayidx53 = $labelInfo + 1310736 + ($3 + -5 << 2) | 0;
     HEAP32[$arrayidx53 >> 2] = (HEAP32[$arrayidx53 >> 2] | 0) + $j$0;
     HEAP32[$labelInfo + 1310736 + ($3 + -1 << 2) >> 2] = $j$0;
     $wk_max$3 = $wk_max$1;
     break;
    }
    $7 = HEAP16[$arrayidx38 + 2 >> 1] | 0;
    $8 = HEAP16[$arrayidx38 + -2 >> 1] | 0;
    $cmp64 = $8 << 16 >> 16 > 0;
    $add$ptr128 = $pnt2$3 + -2 | 0;
    $sub73 = ($8 << 16 >> 16) + -1 | 0;
    if ($7 << 16 >> 16 <= 0) {
     if ($cmp64) {
      HEAP16[$pnt2$3 >> 1] = $8;
      $mul227 = $sub73 * 7 | 0;
      $arrayidx229 = $labelInfo + 1310736 + ($mul227 << 2) | 0;
      HEAP32[$arrayidx229 >> 2] = (HEAP32[$arrayidx229 >> 2] | 0) + 1;
      $arrayidx232 = $labelInfo + 1310736 + ($mul227 + 1 << 2) | 0;
      HEAP32[$arrayidx232 >> 2] = (HEAP32[$arrayidx232 >> 2] | 0) + $i$2;
      $arrayidx235 = $labelInfo + 1310736 + ($mul227 + 2 << 2) | 0;
      HEAP32[$arrayidx235 >> 2] = (HEAP32[$arrayidx235 >> 2] | 0) + $j$0;
      $arrayidx238 = $labelInfo + 1310736 + ($mul227 + 4 << 2) | 0;
      if ((HEAP32[$arrayidx238 >> 2] | 0) < ($i$2 | 0)) HEAP32[$arrayidx238 >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($mul227 + 6 << 2) >> 2] = $j$0;
      $wk_max$3 = $wk_max$1;
      break;
     }
     $36 = HEAP16[$add$ptr128 >> 1] | 0;
     if ($36 << 16 >> 16 > 0) {
      HEAP16[$pnt2$3 >> 1] = $36;
      $37 = ($36 << 16 >> 16) * 7 | 0;
      $arrayidx258 = $labelInfo + 1310736 + ($37 + -7 << 2) | 0;
      HEAP32[$arrayidx258 >> 2] = (HEAP32[$arrayidx258 >> 2] | 0) + 1;
      $arrayidx261 = $labelInfo + 1310736 + ($37 + -6 << 2) | 0;
      HEAP32[$arrayidx261 >> 2] = (HEAP32[$arrayidx261 >> 2] | 0) + $i$2;
      $arrayidx264 = $labelInfo + 1310736 + ($37 + -5 << 2) | 0;
      HEAP32[$arrayidx264 >> 2] = (HEAP32[$arrayidx264 >> 2] | 0) + $j$0;
      $add266 = $37 + -3 | 0;
      if ((HEAP32[$labelInfo + 1310736 + ($add266 << 2) >> 2] | 0) < ($i$2 | 0)) {
       $$sink = $i$2;
       $add271$sink = $add266;
       $wk_max$2 = $wk_max$1;
      } else {
       $wk_max$3 = $wk_max$1;
       break;
      }
     } else {
      $inc275 = $wk_max$1 + 1 | 0;
      if (($wk_max$1 | 0) > 32767) {
       label = 50;
       break L9;
      }
      HEAP16[$pnt2$3 >> 1] = $inc275;
      HEAP32[$labelInfo + 1179664 + ($wk_max$1 << 2) >> 2] = $inc275 << 16 >> 16;
      $mul285 = $wk_max$1 * 7 | 0;
      HEAP32[$labelInfo + 1310736 + ($mul285 << 2) >> 2] = 1;
      HEAP32[$labelInfo + 1310736 + ($mul285 + 1 << 2) >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($mul285 + 2 << 2) >> 2] = $j$0;
      HEAP32[$labelInfo + 1310736 + ($mul285 + 3 << 2) >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($mul285 + 4 << 2) >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($mul285 + 5 << 2) >> 2] = $j$0;
      $$sink = $j$0;
      $add271$sink = $mul285 + 6 | 0;
      $wk_max$2 = $inc275;
     }
     HEAP32[$labelInfo + 1310736 + ($add271$sink << 2) >> 2] = $$sink;
     $wk_max$3 = $wk_max$2;
     break;
    }
    $sub69 = ($7 << 16 >> 16) + -1 | 0;
    $arrayidx70 = $labelInfo + 1179664 + ($sub69 << 2) | 0;
    if ($cmp64) {
     $9 = HEAP32[$arrayidx70 >> 2] | 0;
     $10 = HEAP32[$labelInfo + 1179664 + ($sub73 << 2) >> 2] | 0;
     L35 : do if (($9 | 0) > ($10 | 0)) {
      HEAP16[$pnt2$3 >> 1] = $10;
      $k$0 = 0;
      $wk$0 = $arraydecay;
      while (1) {
       if (($k$0 | 0) >= ($wk_max$1 | 0)) {
        $13 = $10;
        break L35;
       }
       if ((HEAP32[$wk$0 >> 2] | 0) == ($9 | 0)) HEAP32[$wk$0 >> 2] = $10;
       $k$0 = $k$0 + 1 | 0;
       $wk$0 = $wk$0 + 4 | 0;
      }
     } else {
      HEAP16[$pnt2$3 >> 1] = $9;
      if (($9 | 0) < ($10 | 0)) {
       $k$1 = 0;
       $wk$1 = $arraydecay;
       while (1) {
        if (($k$1 | 0) >= ($wk_max$1 | 0)) {
         $13 = $9;
         break L35;
        }
        if ((HEAP32[$wk$1 >> 2] | 0) == ($10 | 0)) HEAP32[$wk$1 >> 2] = $9;
        $k$1 = $k$1 + 1 | 0;
        $wk$1 = $wk$1 + 4 | 0;
       }
      } else $13 = $9;
     } while (0);
     $14 = ($13 << 16 >> 16) * 7 | 0;
     $arrayidx117 = $labelInfo + 1310736 + ($14 + -7 << 2) | 0;
     HEAP32[$arrayidx117 >> 2] = (HEAP32[$arrayidx117 >> 2] | 0) + 1;
     $arrayidx120 = $labelInfo + 1310736 + ($14 + -6 << 2) | 0;
     HEAP32[$arrayidx120 >> 2] = (HEAP32[$arrayidx120 >> 2] | 0) + $i$2;
     $arrayidx123 = $labelInfo + 1310736 + ($14 + -5 << 2) | 0;
     HEAP32[$arrayidx123 >> 2] = (HEAP32[$arrayidx123 >> 2] | 0) + $j$0;
     HEAP32[$labelInfo + 1310736 + ($14 + -1 << 2) >> 2] = $j$0;
     $wk_max$3 = $wk_max$1;
     break;
    }
    $18 = HEAP16[$add$ptr128 >> 1] | 0;
    if ($18 << 16 >> 16 <= 0) {
     HEAP16[$pnt2$3 >> 1] = $7;
     $mul196 = $sub69 * 7 | 0;
     $arrayidx198 = $labelInfo + 1310736 + ($mul196 << 2) | 0;
     HEAP32[$arrayidx198 >> 2] = (HEAP32[$arrayidx198 >> 2] | 0) + 1;
     $arrayidx201 = $labelInfo + 1310736 + ($mul196 + 1 << 2) | 0;
     HEAP32[$arrayidx201 >> 2] = (HEAP32[$arrayidx201 >> 2] | 0) + $i$2;
     $arrayidx204 = $labelInfo + 1310736 + ($mul196 + 2 << 2) | 0;
     HEAP32[$arrayidx204 >> 2] = (HEAP32[$arrayidx204 >> 2] | 0) + $j$0;
     $arrayidx207 = $labelInfo + 1310736 + ($mul196 + 3 << 2) | 0;
     if ((HEAP32[$arrayidx207 >> 2] | 0) > ($i$2 | 0)) HEAP32[$arrayidx207 >> 2] = $i$2;
     HEAP32[$labelInfo + 1310736 + ($mul196 + 6 << 2) >> 2] = $j$0;
     $wk_max$3 = $wk_max$1;
     break;
    }
    $19 = HEAP32[$arrayidx70 >> 2] | 0;
    $20 = HEAP32[$labelInfo + 1179664 + (($18 << 16 >> 16) + -1 << 2) >> 2] | 0;
    L58 : do if (($19 | 0) > ($20 | 0)) {
     HEAP16[$pnt2$3 >> 1] = $20;
     $k$2 = 0;
     $wk$2 = $arraydecay;
     while (1) {
      if (($k$2 | 0) >= ($wk_max$1 | 0)) {
       $23 = $20;
       break L58;
      }
      if ((HEAP32[$wk$2 >> 2] | 0) == ($19 | 0)) HEAP32[$wk$2 >> 2] = $20;
      $k$2 = $k$2 + 1 | 0;
      $wk$2 = $wk$2 + 4 | 0;
     }
    } else {
     HEAP16[$pnt2$3 >> 1] = $19;
     if (($19 | 0) < ($20 | 0)) {
      $k$3 = 0;
      $wk$3 = $arraydecay;
      while (1) {
       if (($k$3 | 0) >= ($wk_max$1 | 0)) {
        $23 = $19;
        break L58;
       }
       if ((HEAP32[$wk$3 >> 2] | 0) == ($20 | 0)) HEAP32[$wk$3 >> 2] = $19;
       $k$3 = $k$3 + 1 | 0;
       $wk$3 = $wk$3 + 4 | 0;
      }
     } else $23 = $19;
    } while (0);
    $24 = ($23 << 16 >> 16) * 7 | 0;
    $arrayidx184 = $labelInfo + 1310736 + ($24 + -7 << 2) | 0;
    HEAP32[$arrayidx184 >> 2] = (HEAP32[$arrayidx184 >> 2] | 0) + 1;
    $arrayidx187 = $labelInfo + 1310736 + ($24 + -6 << 2) | 0;
    HEAP32[$arrayidx187 >> 2] = (HEAP32[$arrayidx187 >> 2] | 0) + $i$2;
    $arrayidx190 = $labelInfo + 1310736 + ($24 + -5 << 2) | 0;
    HEAP32[$arrayidx190 >> 2] = (HEAP32[$arrayidx190 >> 2] | 0) + $j$0;
    $wk_max$3 = $wk_max$1;
   } else {
    HEAP16[$pnt2$3 >> 1] = 0;
    $wk_max$3 = $wk_max$1;
   } while (0);
   $i$2 = $i$2 + 1 | 0;
   $pnt$1 = $pnt$1 + 4 | 0;
   $pnt2$3 = $pnt2$3 + 2 | 0;
   $wk_max$1 = $wk_max$3;
  }
  $j$0 = $j$0 + 1 | 0;
  $pnt$0 = $pnt$1 + $mul22 + 8 | 0;
  $pnt2$2 = $pnt2$3 + 4 | 0;
  $wk_max$0 = $wk_max$1;
 }
 L77 : do if ((label | 0) == 50) {
  _arLog(3, 3256, $vararg_buffer);
  $retval$0 = -1;
 } else if ((label | 0) == 56) {
  $arrayidx320 = $labelInfo + 12 | 0;
  $i$3 = 1;
  $j$1 = 1;
  $wk$4 = $arraydecay;
  while (1) {
   if (($i$3 | 0) > ($wk_max$0 | 0)) break;
   $42 = HEAP32[$wk$4 >> 2] | 0;
   if (($42 | 0) == ($i$3 | 0)) {
    $cond = $j$1;
    $j$2 = $j$1 + 1 | 0;
   } else {
    $cond = HEAP32[$labelInfo + 1179664 + ($42 + -1 << 2) >> 2] | 0;
    $j$2 = $j$1;
   }
   HEAP32[$wk$4 >> 2] = $cond;
   $i$3 = $i$3 + 1 | 0;
   $j$1 = $j$2;
   $wk$4 = $wk$4 + 4 | 0;
  }
  $label_num318 = $labelInfo + 8 | 0;
  $sub341 = $j$1 + -1 | 0;
  HEAP32[$label_num318 >> 2] = $sub341;
  if (!$sub341) $retval$0 = 0; else {
   _memset($arrayidx320 | 0, 0, $sub341 << 2 | 0) | 0;
   _memset($labelInfo + 655376 | 0, 0, $sub341 << 4 | 0) | 0;
   $44 = $sub341;
   $i$4 = 0;
   while (1) {
    if (($i$4 | 0) >= ($44 | 0)) {
     $i$5 = 0;
     break;
    }
    $mul353 = $i$4 << 2;
    HEAP32[$labelInfo + 131084 + ($mul353 << 2) >> 2] = $div;
    HEAP32[$labelInfo + 131084 + (($mul353 | 1) << 2) >> 2] = 0;
    HEAP32[$labelInfo + 131084 + (($mul353 | 2) << 2) >> 2] = $div1;
    HEAP32[$labelInfo + 131084 + (($mul353 | 3) << 2) >> 2] = 0;
    $44 = HEAP32[$label_num318 >> 2] | 0;
    $i$4 = $i$4 + 1 | 0;
   }
   while (1) {
    if (($i$5 | 0) >= ($wk_max$0 | 0)) {
     $i$6 = 0;
     break;
    }
    $sub373 = (HEAP32[$labelInfo + 1179664 + ($i$5 << 2) >> 2] | 0) + -1 | 0;
    $mul374 = $i$5 * 7 | 0;
    $arrayidx377 = $labelInfo + 12 + ($sub373 << 2) | 0;
    HEAP32[$arrayidx377 >> 2] = (HEAP32[$arrayidx377 >> 2] | 0) + (HEAP32[$labelInfo + 1310736 + ($mul374 << 2) >> 2] | 0);
    $mul383 = $sub373 << 1;
    $arrayidx385 = $labelInfo + 655376 + ($mul383 << 3) | 0;
    HEAPF64[$arrayidx385 >> 3] = +HEAPF64[$arrayidx385 >> 3] + +(HEAP32[$labelInfo + 1310736 + ($mul374 + 1 << 2) >> 2] | 0);
    $arrayidx393 = $labelInfo + 655376 + (($mul383 | 1) << 3) | 0;
    HEAPF64[$arrayidx393 >> 3] = +HEAPF64[$arrayidx393 >> 3] + +(HEAP32[$labelInfo + 1310736 + ($mul374 + 2 << 2) >> 2] | 0);
    $mul395 = $sub373 << 2;
    $arrayidx397 = $labelInfo + 131084 + ($mul395 << 2) | 0;
    $53 = HEAP32[$labelInfo + 1310736 + ($mul374 + 3 << 2) >> 2] | 0;
    if ((HEAP32[$arrayidx397 >> 2] | 0) > ($53 | 0)) HEAP32[$arrayidx397 >> 2] = $53;
    $arrayidx413 = $labelInfo + 131084 + (($mul395 | 1) << 2) | 0;
    $55 = HEAP32[$labelInfo + 1310736 + ($mul374 + 4 << 2) >> 2] | 0;
    if ((HEAP32[$arrayidx413 >> 2] | 0) < ($55 | 0)) HEAP32[$arrayidx413 >> 2] = $55;
    $arrayidx429 = $labelInfo + 131084 + (($mul395 | 2) << 2) | 0;
    $57 = HEAP32[$labelInfo + 1310736 + ($mul374 + 5 << 2) >> 2] | 0;
    if ((HEAP32[$arrayidx429 >> 2] | 0) > ($57 | 0)) HEAP32[$arrayidx429 >> 2] = $57;
    $arrayidx445 = $labelInfo + 131084 + (($mul395 | 3) << 2) | 0;
    $59 = HEAP32[$labelInfo + 1310736 + ($mul374 + 6 << 2) >> 2] | 0;
    if ((HEAP32[$arrayidx445 >> 2] | 0) < ($59 | 0)) HEAP32[$arrayidx445 >> 2] = $59;
    $i$5 = $i$5 + 1 | 0;
   }
   while (1) {
    if (($i$6 | 0) >= (HEAP32[$label_num318 >> 2] | 0)) {
     $retval$0 = 0;
     break L77;
    }
    $arrayidx466 = $labelInfo + 12 + ($i$6 << 2) | 0;
    $mul468 = $i$6 << 1;
    $arrayidx470 = $labelInfo + 655376 + ($mul468 << 3) | 0;
    HEAPF64[$arrayidx470 >> 3] = +HEAPF64[$arrayidx470 >> 3] / +(HEAP32[$arrayidx466 >> 2] | 0);
    $arrayidx476 = $labelInfo + 655376 + (($mul468 | 1) << 3) | 0;
    HEAPF64[$arrayidx476 >> 3] = +HEAPF64[$arrayidx476 >> 3] / +(HEAP32[$arrayidx466 >> 2] | 0);
    $i$6 = $i$6 + 1 | 0;
   }
  }
 } while (0);
 STACKTOP = sp;
 return $retval$0 | 0;
}

function _arLabelingSubDBICY($image, $xsize, $ysize, $labelingThresh, $labelInfo) {
 $image = $image | 0;
 $xsize = $xsize | 0;
 $ysize = $ysize | 0;
 $labelingThresh = $labelingThresh | 0;
 $labelInfo = $labelInfo | 0;
 var $$sink = 0, $0 = 0, $10 = 0, $13 = 0, $14 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $23 = 0, $24 = 0, $3 = 0, $36 = 0, $37 = 0, $42 = 0, $44 = 0, $53 = 0, $55 = 0, $57 = 0, $59 = 0, $7 = 0, $8 = 0, $9 = 0, $add$ptr128 = 0, $add266 = 0, $add271$sink = 0, $arraydecay = 0, $arrayidx117 = 0, $arrayidx120 = 0, $arrayidx123 = 0, $arrayidx184 = 0, $arrayidx187 = 0, $arrayidx190 = 0, $arrayidx198 = 0, $arrayidx201 = 0, $arrayidx204 = 0, $arrayidx207 = 0, $arrayidx229 = 0, $arrayidx232 = 0, $arrayidx235 = 0, $arrayidx238 = 0, $arrayidx258 = 0, $arrayidx261 = 0, $arrayidx264 = 0, $arrayidx320 = 0, $arrayidx377 = 0, $arrayidx38 = 0, $arrayidx385 = 0, $arrayidx393 = 0, $arrayidx397 = 0, $arrayidx413 = 0, $arrayidx429 = 0, $arrayidx445 = 0, $arrayidx466 = 0, $arrayidx47 = 0, $arrayidx470 = 0, $arrayidx476 = 0, $arrayidx50 = 0, $arrayidx53 = 0, $arrayidx70 = 0, $cmp64 = 0, $cond = 0, $div = 0, $div1 = 0, $i$0 = 0, $i$1 = 0, $i$2 = 0, $i$3 = 0, $i$4 = 0, $i$5 = 0, $i$6 = 0, $inc275 = 0, $j$0 = 0, $j$1 = 0, $j$2 = 0, $k$0 = 0, $k$1 = 0, $k$2 = 0, $k$3 = 0, $label_num318 = 0, $mul196 = 0, $mul22 = 0, $mul227 = 0, $mul285 = 0, $mul353 = 0, $mul374 = 0, $mul383 = 0, $mul395 = 0, $mul468 = 0, $pnt$0 = 0, $pnt$1 = 0, $pnt1$0 = 0, $pnt1$1 = 0, $pnt2$0 = 0, $pnt2$1 = 0, $pnt2$2 = 0, $pnt2$3 = 0, $retval$0 = 0, $sub = 0, $sub341 = 0, $sub37 = 0, $sub373 = 0, $sub69 = 0, $sub73 = 0, $sub8 = 0, $vararg_buffer = 0, $wk$0 = 0, $wk$1 = 0, $wk$2 = 0, $wk$3 = 0, $wk$4 = 0, $wk_max$0 = 0, $wk_max$1 = 0, $wk_max$2 = 0, $wk_max$3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $vararg_buffer = sp;
 $div = ($xsize | 0) / 2 | 0;
 $div1 = ($ysize | 0) / 2 | 0;
 $0 = HEAP32[$labelInfo >> 2] | 0;
 $sub = $div1 + -1 | 0;
 $i$0 = 0;
 $pnt1$0 = $0;
 $pnt2$0 = $0 + ((Math_imul($sub, $div) | 0) << 1) | 0;
 while (1) {
  if (($i$0 | 0) >= ($div | 0)) break;
  HEAP16[$pnt2$0 >> 1] = 0;
  HEAP16[$pnt1$0 >> 1] = 0;
  $i$0 = $i$0 + 1 | 0;
  $pnt1$0 = $pnt1$0 + 2 | 0;
  $pnt2$0 = $pnt2$0 + 2 | 0;
 }
 $sub8 = $div + -1 | 0;
 $i$1 = 0;
 $pnt1$1 = $0;
 $pnt2$1 = $0 + ($sub8 << 1) | 0;
 while (1) {
  if (($i$1 | 0) >= ($div1 | 0)) break;
  HEAP16[$pnt2$1 >> 1] = 0;
  HEAP16[$pnt1$1 >> 1] = 0;
  $i$1 = $i$1 + 1 | 0;
  $pnt1$1 = $pnt1$1 + ($div << 1) | 0;
  $pnt2$1 = $pnt2$1 + ($div << 1) | 0;
 }
 $arraydecay = $labelInfo + 1179664 | 0;
 $mul22 = $xsize << 1;
 $sub37 = 0 - $div | 0;
 $j$0 = 1;
 $pnt$0 = $image + (($xsize << 2) + 4) | 0;
 $pnt2$2 = $0 + ($div + 1 << 1) | 0;
 $wk_max$0 = 0;
 L9 : while (1) {
  if (($j$0 | 0) < ($sub | 0)) {
   $i$2 = 1;
   $pnt$1 = $pnt$0;
   $pnt2$3 = $pnt2$2;
   $wk_max$1 = $wk_max$0;
  } else {
   label = 56;
   break;
  }
  while (1) {
   if (($i$2 | 0) >= ($sub8 | 0)) break;
   do if ((HEAPU8[$pnt$1 + 1 >> 0] | 0 | 0) > ($labelingThresh | 0)) {
    HEAP16[$pnt2$3 >> 1] = 0;
    $wk_max$3 = $wk_max$1;
   } else {
    $arrayidx38 = $pnt2$3 + ($sub37 << 1) | 0;
    $2 = HEAP16[$arrayidx38 >> 1] | 0;
    if ($2 << 16 >> 16 > 0) {
     HEAP16[$pnt2$3 >> 1] = $2;
     $3 = ($2 << 16 >> 16) * 7 | 0;
     $arrayidx47 = $labelInfo + 1310736 + ($3 + -7 << 2) | 0;
     HEAP32[$arrayidx47 >> 2] = (HEAP32[$arrayidx47 >> 2] | 0) + 1;
     $arrayidx50 = $labelInfo + 1310736 + ($3 + -6 << 2) | 0;
     HEAP32[$arrayidx50 >> 2] = (HEAP32[$arrayidx50 >> 2] | 0) + $i$2;
     $arrayidx53 = $labelInfo + 1310736 + ($3 + -5 << 2) | 0;
     HEAP32[$arrayidx53 >> 2] = (HEAP32[$arrayidx53 >> 2] | 0) + $j$0;
     HEAP32[$labelInfo + 1310736 + ($3 + -1 << 2) >> 2] = $j$0;
     $wk_max$3 = $wk_max$1;
     break;
    }
    $7 = HEAP16[$arrayidx38 + 2 >> 1] | 0;
    $8 = HEAP16[$arrayidx38 + -2 >> 1] | 0;
    $cmp64 = $8 << 16 >> 16 > 0;
    $add$ptr128 = $pnt2$3 + -2 | 0;
    $sub73 = ($8 << 16 >> 16) + -1 | 0;
    if ($7 << 16 >> 16 <= 0) {
     if ($cmp64) {
      HEAP16[$pnt2$3 >> 1] = $8;
      $mul227 = $sub73 * 7 | 0;
      $arrayidx229 = $labelInfo + 1310736 + ($mul227 << 2) | 0;
      HEAP32[$arrayidx229 >> 2] = (HEAP32[$arrayidx229 >> 2] | 0) + 1;
      $arrayidx232 = $labelInfo + 1310736 + ($mul227 + 1 << 2) | 0;
      HEAP32[$arrayidx232 >> 2] = (HEAP32[$arrayidx232 >> 2] | 0) + $i$2;
      $arrayidx235 = $labelInfo + 1310736 + ($mul227 + 2 << 2) | 0;
      HEAP32[$arrayidx235 >> 2] = (HEAP32[$arrayidx235 >> 2] | 0) + $j$0;
      $arrayidx238 = $labelInfo + 1310736 + ($mul227 + 4 << 2) | 0;
      if ((HEAP32[$arrayidx238 >> 2] | 0) < ($i$2 | 0)) HEAP32[$arrayidx238 >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($mul227 + 6 << 2) >> 2] = $j$0;
      $wk_max$3 = $wk_max$1;
      break;
     }
     $36 = HEAP16[$add$ptr128 >> 1] | 0;
     if ($36 << 16 >> 16 > 0) {
      HEAP16[$pnt2$3 >> 1] = $36;
      $37 = ($36 << 16 >> 16) * 7 | 0;
      $arrayidx258 = $labelInfo + 1310736 + ($37 + -7 << 2) | 0;
      HEAP32[$arrayidx258 >> 2] = (HEAP32[$arrayidx258 >> 2] | 0) + 1;
      $arrayidx261 = $labelInfo + 1310736 + ($37 + -6 << 2) | 0;
      HEAP32[$arrayidx261 >> 2] = (HEAP32[$arrayidx261 >> 2] | 0) + $i$2;
      $arrayidx264 = $labelInfo + 1310736 + ($37 + -5 << 2) | 0;
      HEAP32[$arrayidx264 >> 2] = (HEAP32[$arrayidx264 >> 2] | 0) + $j$0;
      $add266 = $37 + -3 | 0;
      if ((HEAP32[$labelInfo + 1310736 + ($add266 << 2) >> 2] | 0) < ($i$2 | 0)) {
       $$sink = $i$2;
       $add271$sink = $add266;
       $wk_max$2 = $wk_max$1;
      } else {
       $wk_max$3 = $wk_max$1;
       break;
      }
     } else {
      $inc275 = $wk_max$1 + 1 | 0;
      if (($wk_max$1 | 0) > 32767) {
       label = 50;
       break L9;
      }
      HEAP16[$pnt2$3 >> 1] = $inc275;
      HEAP32[$labelInfo + 1179664 + ($wk_max$1 << 2) >> 2] = $inc275 << 16 >> 16;
      $mul285 = $wk_max$1 * 7 | 0;
      HEAP32[$labelInfo + 1310736 + ($mul285 << 2) >> 2] = 1;
      HEAP32[$labelInfo + 1310736 + ($mul285 + 1 << 2) >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($mul285 + 2 << 2) >> 2] = $j$0;
      HEAP32[$labelInfo + 1310736 + ($mul285 + 3 << 2) >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($mul285 + 4 << 2) >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($mul285 + 5 << 2) >> 2] = $j$0;
      $$sink = $j$0;
      $add271$sink = $mul285 + 6 | 0;
      $wk_max$2 = $inc275;
     }
     HEAP32[$labelInfo + 1310736 + ($add271$sink << 2) >> 2] = $$sink;
     $wk_max$3 = $wk_max$2;
     break;
    }
    $sub69 = ($7 << 16 >> 16) + -1 | 0;
    $arrayidx70 = $labelInfo + 1179664 + ($sub69 << 2) | 0;
    if ($cmp64) {
     $9 = HEAP32[$arrayidx70 >> 2] | 0;
     $10 = HEAP32[$labelInfo + 1179664 + ($sub73 << 2) >> 2] | 0;
     L36 : do if (($9 | 0) > ($10 | 0)) {
      HEAP16[$pnt2$3 >> 1] = $10;
      $k$0 = 0;
      $wk$0 = $arraydecay;
      while (1) {
       if (($k$0 | 0) >= ($wk_max$1 | 0)) {
        $13 = $10;
        break L36;
       }
       if ((HEAP32[$wk$0 >> 2] | 0) == ($9 | 0)) HEAP32[$wk$0 >> 2] = $10;
       $k$0 = $k$0 + 1 | 0;
       $wk$0 = $wk$0 + 4 | 0;
      }
     } else {
      HEAP16[$pnt2$3 >> 1] = $9;
      if (($9 | 0) < ($10 | 0)) {
       $k$1 = 0;
       $wk$1 = $arraydecay;
       while (1) {
        if (($k$1 | 0) >= ($wk_max$1 | 0)) {
         $13 = $9;
         break L36;
        }
        if ((HEAP32[$wk$1 >> 2] | 0) == ($10 | 0)) HEAP32[$wk$1 >> 2] = $9;
        $k$1 = $k$1 + 1 | 0;
        $wk$1 = $wk$1 + 4 | 0;
       }
      } else $13 = $9;
     } while (0);
     $14 = ($13 << 16 >> 16) * 7 | 0;
     $arrayidx117 = $labelInfo + 1310736 + ($14 + -7 << 2) | 0;
     HEAP32[$arrayidx117 >> 2] = (HEAP32[$arrayidx117 >> 2] | 0) + 1;
     $arrayidx120 = $labelInfo + 1310736 + ($14 + -6 << 2) | 0;
     HEAP32[$arrayidx120 >> 2] = (HEAP32[$arrayidx120 >> 2] | 0) + $i$2;
     $arrayidx123 = $labelInfo + 1310736 + ($14 + -5 << 2) | 0;
     HEAP32[$arrayidx123 >> 2] = (HEAP32[$arrayidx123 >> 2] | 0) + $j$0;
     HEAP32[$labelInfo + 1310736 + ($14 + -1 << 2) >> 2] = $j$0;
     $wk_max$3 = $wk_max$1;
     break;
    }
    $18 = HEAP16[$add$ptr128 >> 1] | 0;
    if ($18 << 16 >> 16 <= 0) {
     HEAP16[$pnt2$3 >> 1] = $7;
     $mul196 = $sub69 * 7 | 0;
     $arrayidx198 = $labelInfo + 1310736 + ($mul196 << 2) | 0;
     HEAP32[$arrayidx198 >> 2] = (HEAP32[$arrayidx198 >> 2] | 0) + 1;
     $arrayidx201 = $labelInfo + 1310736 + ($mul196 + 1 << 2) | 0;
     HEAP32[$arrayidx201 >> 2] = (HEAP32[$arrayidx201 >> 2] | 0) + $i$2;
     $arrayidx204 = $labelInfo + 1310736 + ($mul196 + 2 << 2) | 0;
     HEAP32[$arrayidx204 >> 2] = (HEAP32[$arrayidx204 >> 2] | 0) + $j$0;
     $arrayidx207 = $labelInfo + 1310736 + ($mul196 + 3 << 2) | 0;
     if ((HEAP32[$arrayidx207 >> 2] | 0) > ($i$2 | 0)) HEAP32[$arrayidx207 >> 2] = $i$2;
     HEAP32[$labelInfo + 1310736 + ($mul196 + 6 << 2) >> 2] = $j$0;
     $wk_max$3 = $wk_max$1;
     break;
    }
    $19 = HEAP32[$arrayidx70 >> 2] | 0;
    $20 = HEAP32[$labelInfo + 1179664 + (($18 << 16 >> 16) + -1 << 2) >> 2] | 0;
    L59 : do if (($19 | 0) > ($20 | 0)) {
     HEAP16[$pnt2$3 >> 1] = $20;
     $k$2 = 0;
     $wk$2 = $arraydecay;
     while (1) {
      if (($k$2 | 0) >= ($wk_max$1 | 0)) {
       $23 = $20;
       break L59;
      }
      if ((HEAP32[$wk$2 >> 2] | 0) == ($19 | 0)) HEAP32[$wk$2 >> 2] = $20;
      $k$2 = $k$2 + 1 | 0;
      $wk$2 = $wk$2 + 4 | 0;
     }
    } else {
     HEAP16[$pnt2$3 >> 1] = $19;
     if (($19 | 0) < ($20 | 0)) {
      $k$3 = 0;
      $wk$3 = $arraydecay;
      while (1) {
       if (($k$3 | 0) >= ($wk_max$1 | 0)) {
        $23 = $19;
        break L59;
       }
       if ((HEAP32[$wk$3 >> 2] | 0) == ($20 | 0)) HEAP32[$wk$3 >> 2] = $19;
       $k$3 = $k$3 + 1 | 0;
       $wk$3 = $wk$3 + 4 | 0;
      }
     } else $23 = $19;
    } while (0);
    $24 = ($23 << 16 >> 16) * 7 | 0;
    $arrayidx184 = $labelInfo + 1310736 + ($24 + -7 << 2) | 0;
    HEAP32[$arrayidx184 >> 2] = (HEAP32[$arrayidx184 >> 2] | 0) + 1;
    $arrayidx187 = $labelInfo + 1310736 + ($24 + -6 << 2) | 0;
    HEAP32[$arrayidx187 >> 2] = (HEAP32[$arrayidx187 >> 2] | 0) + $i$2;
    $arrayidx190 = $labelInfo + 1310736 + ($24 + -5 << 2) | 0;
    HEAP32[$arrayidx190 >> 2] = (HEAP32[$arrayidx190 >> 2] | 0) + $j$0;
    $wk_max$3 = $wk_max$1;
   } while (0);
   $i$2 = $i$2 + 1 | 0;
   $pnt$1 = $pnt$1 + 4 | 0;
   $pnt2$3 = $pnt2$3 + 2 | 0;
   $wk_max$1 = $wk_max$3;
  }
  $j$0 = $j$0 + 1 | 0;
  $pnt$0 = $pnt$1 + $mul22 + 8 | 0;
  $pnt2$2 = $pnt2$3 + 4 | 0;
  $wk_max$0 = $wk_max$1;
 }
 L77 : do if ((label | 0) == 50) {
  _arLog(3, 3256, $vararg_buffer);
  $retval$0 = -1;
 } else if ((label | 0) == 56) {
  $arrayidx320 = $labelInfo + 12 | 0;
  $i$3 = 1;
  $j$1 = 1;
  $wk$4 = $arraydecay;
  while (1) {
   if (($i$3 | 0) > ($wk_max$0 | 0)) break;
   $42 = HEAP32[$wk$4 >> 2] | 0;
   if (($42 | 0) == ($i$3 | 0)) {
    $cond = $j$1;
    $j$2 = $j$1 + 1 | 0;
   } else {
    $cond = HEAP32[$labelInfo + 1179664 + ($42 + -1 << 2) >> 2] | 0;
    $j$2 = $j$1;
   }
   HEAP32[$wk$4 >> 2] = $cond;
   $i$3 = $i$3 + 1 | 0;
   $j$1 = $j$2;
   $wk$4 = $wk$4 + 4 | 0;
  }
  $label_num318 = $labelInfo + 8 | 0;
  $sub341 = $j$1 + -1 | 0;
  HEAP32[$label_num318 >> 2] = $sub341;
  if (!$sub341) $retval$0 = 0; else {
   _memset($arrayidx320 | 0, 0, $sub341 << 2 | 0) | 0;
   _memset($labelInfo + 655376 | 0, 0, $sub341 << 4 | 0) | 0;
   $44 = $sub341;
   $i$4 = 0;
   while (1) {
    if (($i$4 | 0) >= ($44 | 0)) {
     $i$5 = 0;
     break;
    }
    $mul353 = $i$4 << 2;
    HEAP32[$labelInfo + 131084 + ($mul353 << 2) >> 2] = $div;
    HEAP32[$labelInfo + 131084 + (($mul353 | 1) << 2) >> 2] = 0;
    HEAP32[$labelInfo + 131084 + (($mul353 | 2) << 2) >> 2] = $div1;
    HEAP32[$labelInfo + 131084 + (($mul353 | 3) << 2) >> 2] = 0;
    $44 = HEAP32[$label_num318 >> 2] | 0;
    $i$4 = $i$4 + 1 | 0;
   }
   while (1) {
    if (($i$5 | 0) >= ($wk_max$0 | 0)) {
     $i$6 = 0;
     break;
    }
    $sub373 = (HEAP32[$labelInfo + 1179664 + ($i$5 << 2) >> 2] | 0) + -1 | 0;
    $mul374 = $i$5 * 7 | 0;
    $arrayidx377 = $labelInfo + 12 + ($sub373 << 2) | 0;
    HEAP32[$arrayidx377 >> 2] = (HEAP32[$arrayidx377 >> 2] | 0) + (HEAP32[$labelInfo + 1310736 + ($mul374 << 2) >> 2] | 0);
    $mul383 = $sub373 << 1;
    $arrayidx385 = $labelInfo + 655376 + ($mul383 << 3) | 0;
    HEAPF64[$arrayidx385 >> 3] = +HEAPF64[$arrayidx385 >> 3] + +(HEAP32[$labelInfo + 1310736 + ($mul374 + 1 << 2) >> 2] | 0);
    $arrayidx393 = $labelInfo + 655376 + (($mul383 | 1) << 3) | 0;
    HEAPF64[$arrayidx393 >> 3] = +HEAPF64[$arrayidx393 >> 3] + +(HEAP32[$labelInfo + 1310736 + ($mul374 + 2 << 2) >> 2] | 0);
    $mul395 = $sub373 << 2;
    $arrayidx397 = $labelInfo + 131084 + ($mul395 << 2) | 0;
    $53 = HEAP32[$labelInfo + 1310736 + ($mul374 + 3 << 2) >> 2] | 0;
    if ((HEAP32[$arrayidx397 >> 2] | 0) > ($53 | 0)) HEAP32[$arrayidx397 >> 2] = $53;
    $arrayidx413 = $labelInfo + 131084 + (($mul395 | 1) << 2) | 0;
    $55 = HEAP32[$labelInfo + 1310736 + ($mul374 + 4 << 2) >> 2] | 0;
    if ((HEAP32[$arrayidx413 >> 2] | 0) < ($55 | 0)) HEAP32[$arrayidx413 >> 2] = $55;
    $arrayidx429 = $labelInfo + 131084 + (($mul395 | 2) << 2) | 0;
    $57 = HEAP32[$labelInfo + 1310736 + ($mul374 + 5 << 2) >> 2] | 0;
    if ((HEAP32[$arrayidx429 >> 2] | 0) > ($57 | 0)) HEAP32[$arrayidx429 >> 2] = $57;
    $arrayidx445 = $labelInfo + 131084 + (($mul395 | 3) << 2) | 0;
    $59 = HEAP32[$labelInfo + 1310736 + ($mul374 + 6 << 2) >> 2] | 0;
    if ((HEAP32[$arrayidx445 >> 2] | 0) < ($59 | 0)) HEAP32[$arrayidx445 >> 2] = $59;
    $i$5 = $i$5 + 1 | 0;
   }
   while (1) {
    if (($i$6 | 0) >= (HEAP32[$label_num318 >> 2] | 0)) {
     $retval$0 = 0;
     break L77;
    }
    $arrayidx466 = $labelInfo + 12 + ($i$6 << 2) | 0;
    $mul468 = $i$6 << 1;
    $arrayidx470 = $labelInfo + 655376 + ($mul468 << 3) | 0;
    HEAPF64[$arrayidx470 >> 3] = +HEAPF64[$arrayidx470 >> 3] / +(HEAP32[$arrayidx466 >> 2] | 0);
    $arrayidx476 = $labelInfo + 655376 + (($mul468 | 1) << 3) | 0;
    HEAPF64[$arrayidx476 >> 3] = +HEAPF64[$arrayidx476 >> 3] / +(HEAP32[$arrayidx466 >> 2] | 0);
    $i$6 = $i$6 + 1 | 0;
   }
  }
 } while (0);
 STACKTOP = sp;
 return $retval$0 | 0;
}

function _arLabelingSubDWIYC($image, $xsize, $ysize, $labelingThresh, $labelInfo) {
 $image = $image | 0;
 $xsize = $xsize | 0;
 $ysize = $ysize | 0;
 $labelingThresh = $labelingThresh | 0;
 $labelInfo = $labelInfo | 0;
 var $$sink = 0, $0 = 0, $10 = 0, $13 = 0, $14 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $23 = 0, $24 = 0, $3 = 0, $36 = 0, $37 = 0, $42 = 0, $44 = 0, $53 = 0, $55 = 0, $57 = 0, $59 = 0, $7 = 0, $8 = 0, $9 = 0, $add$ptr127 = 0, $add265 = 0, $add270$sink = 0, $arraydecay = 0, $arrayidx116 = 0, $arrayidx119 = 0, $arrayidx122 = 0, $arrayidx183 = 0, $arrayidx186 = 0, $arrayidx189 = 0, $arrayidx197 = 0, $arrayidx200 = 0, $arrayidx203 = 0, $arrayidx206 = 0, $arrayidx228 = 0, $arrayidx231 = 0, $arrayidx234 = 0, $arrayidx237 = 0, $arrayidx257 = 0, $arrayidx260 = 0, $arrayidx263 = 0, $arrayidx319 = 0, $arrayidx37 = 0, $arrayidx376 = 0, $arrayidx384 = 0, $arrayidx392 = 0, $arrayidx396 = 0, $arrayidx412 = 0, $arrayidx428 = 0, $arrayidx444 = 0, $arrayidx46 = 0, $arrayidx465 = 0, $arrayidx469 = 0, $arrayidx475 = 0, $arrayidx49 = 0, $arrayidx52 = 0, $arrayidx69 = 0, $cmp63 = 0, $cond = 0, $div = 0, $div1 = 0, $i$0 = 0, $i$1 = 0, $i$2 = 0, $i$3 = 0, $i$4 = 0, $i$5 = 0, $i$6 = 0, $inc274 = 0, $j$0 = 0, $j$1 = 0, $j$2 = 0, $k$0 = 0, $k$1 = 0, $k$2 = 0, $k$3 = 0, $label_num317 = 0, $mul195 = 0, $mul22 = 0, $mul226 = 0, $mul284 = 0, $mul352 = 0, $mul373 = 0, $mul382 = 0, $mul394 = 0, $mul467 = 0, $pnt$0 = 0, $pnt$1 = 0, $pnt1$0 = 0, $pnt1$1 = 0, $pnt2$0 = 0, $pnt2$1 = 0, $pnt2$2 = 0, $pnt2$3 = 0, $retval$0 = 0, $sub = 0, $sub340 = 0, $sub36 = 0, $sub372 = 0, $sub68 = 0, $sub72 = 0, $sub8 = 0, $vararg_buffer = 0, $wk$0 = 0, $wk$1 = 0, $wk$2 = 0, $wk$3 = 0, $wk$4 = 0, $wk_max$0 = 0, $wk_max$1 = 0, $wk_max$2 = 0, $wk_max$3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $vararg_buffer = sp;
 $div = ($xsize | 0) / 2 | 0;
 $div1 = ($ysize | 0) / 2 | 0;
 $0 = HEAP32[$labelInfo >> 2] | 0;
 $sub = $div1 + -1 | 0;
 $i$0 = 0;
 $pnt1$0 = $0;
 $pnt2$0 = $0 + ((Math_imul($sub, $div) | 0) << 1) | 0;
 while (1) {
  if (($i$0 | 0) >= ($div | 0)) break;
  HEAP16[$pnt2$0 >> 1] = 0;
  HEAP16[$pnt1$0 >> 1] = 0;
  $i$0 = $i$0 + 1 | 0;
  $pnt1$0 = $pnt1$0 + 2 | 0;
  $pnt2$0 = $pnt2$0 + 2 | 0;
 }
 $sub8 = $div + -1 | 0;
 $i$1 = 0;
 $pnt1$1 = $0;
 $pnt2$1 = $0 + ($sub8 << 1) | 0;
 while (1) {
  if (($i$1 | 0) >= ($div1 | 0)) break;
  HEAP16[$pnt2$1 >> 1] = 0;
  HEAP16[$pnt1$1 >> 1] = 0;
  $i$1 = $i$1 + 1 | 0;
  $pnt1$1 = $pnt1$1 + ($div << 1) | 0;
  $pnt2$1 = $pnt2$1 + ($div << 1) | 0;
 }
 $arraydecay = $labelInfo + 1179664 | 0;
 $mul22 = $xsize << 1;
 $sub36 = 0 - $div | 0;
 $j$0 = 1;
 $pnt$0 = $image + (($xsize << 2) + 4) | 0;
 $pnt2$2 = $0 + ($div + 1 << 1) | 0;
 $wk_max$0 = 0;
 L9 : while (1) {
  if (($j$0 | 0) < ($sub | 0)) {
   $i$2 = 1;
   $pnt$1 = $pnt$0;
   $pnt2$3 = $pnt2$2;
   $wk_max$1 = $wk_max$0;
  } else {
   label = 56;
   break;
  }
  while (1) {
   if (($i$2 | 0) >= ($sub8 | 0)) break;
   do if ((HEAPU8[$pnt$1 >> 0] | 0 | 0) > ($labelingThresh | 0)) {
    $arrayidx37 = $pnt2$3 + ($sub36 << 1) | 0;
    $2 = HEAP16[$arrayidx37 >> 1] | 0;
    if ($2 << 16 >> 16 > 0) {
     HEAP16[$pnt2$3 >> 1] = $2;
     $3 = ($2 << 16 >> 16) * 7 | 0;
     $arrayidx46 = $labelInfo + 1310736 + ($3 + -7 << 2) | 0;
     HEAP32[$arrayidx46 >> 2] = (HEAP32[$arrayidx46 >> 2] | 0) + 1;
     $arrayidx49 = $labelInfo + 1310736 + ($3 + -6 << 2) | 0;
     HEAP32[$arrayidx49 >> 2] = (HEAP32[$arrayidx49 >> 2] | 0) + $i$2;
     $arrayidx52 = $labelInfo + 1310736 + ($3 + -5 << 2) | 0;
     HEAP32[$arrayidx52 >> 2] = (HEAP32[$arrayidx52 >> 2] | 0) + $j$0;
     HEAP32[$labelInfo + 1310736 + ($3 + -1 << 2) >> 2] = $j$0;
     $wk_max$3 = $wk_max$1;
     break;
    }
    $7 = HEAP16[$arrayidx37 + 2 >> 1] | 0;
    $8 = HEAP16[$arrayidx37 + -2 >> 1] | 0;
    $cmp63 = $8 << 16 >> 16 > 0;
    $sub72 = ($8 << 16 >> 16) + -1 | 0;
    $add$ptr127 = $pnt2$3 + -2 | 0;
    if ($7 << 16 >> 16 <= 0) {
     if ($cmp63) {
      HEAP16[$pnt2$3 >> 1] = $8;
      $mul226 = $sub72 * 7 | 0;
      $arrayidx228 = $labelInfo + 1310736 + ($mul226 << 2) | 0;
      HEAP32[$arrayidx228 >> 2] = (HEAP32[$arrayidx228 >> 2] | 0) + 1;
      $arrayidx231 = $labelInfo + 1310736 + ($mul226 + 1 << 2) | 0;
      HEAP32[$arrayidx231 >> 2] = (HEAP32[$arrayidx231 >> 2] | 0) + $i$2;
      $arrayidx234 = $labelInfo + 1310736 + ($mul226 + 2 << 2) | 0;
      HEAP32[$arrayidx234 >> 2] = (HEAP32[$arrayidx234 >> 2] | 0) + $j$0;
      $arrayidx237 = $labelInfo + 1310736 + ($mul226 + 4 << 2) | 0;
      if ((HEAP32[$arrayidx237 >> 2] | 0) < ($i$2 | 0)) HEAP32[$arrayidx237 >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($mul226 + 6 << 2) >> 2] = $j$0;
      $wk_max$3 = $wk_max$1;
      break;
     }
     $36 = HEAP16[$add$ptr127 >> 1] | 0;
     if ($36 << 16 >> 16 > 0) {
      HEAP16[$pnt2$3 >> 1] = $36;
      $37 = ($36 << 16 >> 16) * 7 | 0;
      $arrayidx257 = $labelInfo + 1310736 + ($37 + -7 << 2) | 0;
      HEAP32[$arrayidx257 >> 2] = (HEAP32[$arrayidx257 >> 2] | 0) + 1;
      $arrayidx260 = $labelInfo + 1310736 + ($37 + -6 << 2) | 0;
      HEAP32[$arrayidx260 >> 2] = (HEAP32[$arrayidx260 >> 2] | 0) + $i$2;
      $arrayidx263 = $labelInfo + 1310736 + ($37 + -5 << 2) | 0;
      HEAP32[$arrayidx263 >> 2] = (HEAP32[$arrayidx263 >> 2] | 0) + $j$0;
      $add265 = $37 + -3 | 0;
      if ((HEAP32[$labelInfo + 1310736 + ($add265 << 2) >> 2] | 0) < ($i$2 | 0)) {
       $$sink = $i$2;
       $add270$sink = $add265;
       $wk_max$2 = $wk_max$1;
      } else {
       $wk_max$3 = $wk_max$1;
       break;
      }
     } else {
      $inc274 = $wk_max$1 + 1 | 0;
      if (($wk_max$1 | 0) > 32767) {
       label = 50;
       break L9;
      }
      HEAP16[$pnt2$3 >> 1] = $inc274;
      HEAP32[$labelInfo + 1179664 + ($wk_max$1 << 2) >> 2] = $inc274 << 16 >> 16;
      $mul284 = $wk_max$1 * 7 | 0;
      HEAP32[$labelInfo + 1310736 + ($mul284 << 2) >> 2] = 1;
      HEAP32[$labelInfo + 1310736 + ($mul284 + 1 << 2) >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($mul284 + 2 << 2) >> 2] = $j$0;
      HEAP32[$labelInfo + 1310736 + ($mul284 + 3 << 2) >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($mul284 + 4 << 2) >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($mul284 + 5 << 2) >> 2] = $j$0;
      $$sink = $j$0;
      $add270$sink = $mul284 + 6 | 0;
      $wk_max$2 = $inc274;
     }
     HEAP32[$labelInfo + 1310736 + ($add270$sink << 2) >> 2] = $$sink;
     $wk_max$3 = $wk_max$2;
     break;
    }
    $sub68 = ($7 << 16 >> 16) + -1 | 0;
    $arrayidx69 = $labelInfo + 1179664 + ($sub68 << 2) | 0;
    if ($cmp63) {
     $9 = HEAP32[$arrayidx69 >> 2] | 0;
     $10 = HEAP32[$labelInfo + 1179664 + ($sub72 << 2) >> 2] | 0;
     L35 : do if (($9 | 0) > ($10 | 0)) {
      HEAP16[$pnt2$3 >> 1] = $10;
      $k$0 = 0;
      $wk$0 = $arraydecay;
      while (1) {
       if (($k$0 | 0) >= ($wk_max$1 | 0)) {
        $13 = $10;
        break L35;
       }
       if ((HEAP32[$wk$0 >> 2] | 0) == ($9 | 0)) HEAP32[$wk$0 >> 2] = $10;
       $k$0 = $k$0 + 1 | 0;
       $wk$0 = $wk$0 + 4 | 0;
      }
     } else {
      HEAP16[$pnt2$3 >> 1] = $9;
      if (($9 | 0) < ($10 | 0)) {
       $k$1 = 0;
       $wk$1 = $arraydecay;
       while (1) {
        if (($k$1 | 0) >= ($wk_max$1 | 0)) {
         $13 = $9;
         break L35;
        }
        if ((HEAP32[$wk$1 >> 2] | 0) == ($10 | 0)) HEAP32[$wk$1 >> 2] = $9;
        $k$1 = $k$1 + 1 | 0;
        $wk$1 = $wk$1 + 4 | 0;
       }
      } else $13 = $9;
     } while (0);
     $14 = ($13 << 16 >> 16) * 7 | 0;
     $arrayidx116 = $labelInfo + 1310736 + ($14 + -7 << 2) | 0;
     HEAP32[$arrayidx116 >> 2] = (HEAP32[$arrayidx116 >> 2] | 0) + 1;
     $arrayidx119 = $labelInfo + 1310736 + ($14 + -6 << 2) | 0;
     HEAP32[$arrayidx119 >> 2] = (HEAP32[$arrayidx119 >> 2] | 0) + $i$2;
     $arrayidx122 = $labelInfo + 1310736 + ($14 + -5 << 2) | 0;
     HEAP32[$arrayidx122 >> 2] = (HEAP32[$arrayidx122 >> 2] | 0) + $j$0;
     HEAP32[$labelInfo + 1310736 + ($14 + -1 << 2) >> 2] = $j$0;
     $wk_max$3 = $wk_max$1;
     break;
    }
    $18 = HEAP16[$add$ptr127 >> 1] | 0;
    if ($18 << 16 >> 16 <= 0) {
     HEAP16[$pnt2$3 >> 1] = $7;
     $mul195 = $sub68 * 7 | 0;
     $arrayidx197 = $labelInfo + 1310736 + ($mul195 << 2) | 0;
     HEAP32[$arrayidx197 >> 2] = (HEAP32[$arrayidx197 >> 2] | 0) + 1;
     $arrayidx200 = $labelInfo + 1310736 + ($mul195 + 1 << 2) | 0;
     HEAP32[$arrayidx200 >> 2] = (HEAP32[$arrayidx200 >> 2] | 0) + $i$2;
     $arrayidx203 = $labelInfo + 1310736 + ($mul195 + 2 << 2) | 0;
     HEAP32[$arrayidx203 >> 2] = (HEAP32[$arrayidx203 >> 2] | 0) + $j$0;
     $arrayidx206 = $labelInfo + 1310736 + ($mul195 + 3 << 2) | 0;
     if ((HEAP32[$arrayidx206 >> 2] | 0) > ($i$2 | 0)) HEAP32[$arrayidx206 >> 2] = $i$2;
     HEAP32[$labelInfo + 1310736 + ($mul195 + 6 << 2) >> 2] = $j$0;
     $wk_max$3 = $wk_max$1;
     break;
    }
    $19 = HEAP32[$arrayidx69 >> 2] | 0;
    $20 = HEAP32[$labelInfo + 1179664 + (($18 << 16 >> 16) + -1 << 2) >> 2] | 0;
    L58 : do if (($19 | 0) > ($20 | 0)) {
     HEAP16[$pnt2$3 >> 1] = $20;
     $k$2 = 0;
     $wk$2 = $arraydecay;
     while (1) {
      if (($k$2 | 0) >= ($wk_max$1 | 0)) {
       $23 = $20;
       break L58;
      }
      if ((HEAP32[$wk$2 >> 2] | 0) == ($19 | 0)) HEAP32[$wk$2 >> 2] = $20;
      $k$2 = $k$2 + 1 | 0;
      $wk$2 = $wk$2 + 4 | 0;
     }
    } else {
     HEAP16[$pnt2$3 >> 1] = $19;
     if (($19 | 0) < ($20 | 0)) {
      $k$3 = 0;
      $wk$3 = $arraydecay;
      while (1) {
       if (($k$3 | 0) >= ($wk_max$1 | 0)) {
        $23 = $19;
        break L58;
       }
       if ((HEAP32[$wk$3 >> 2] | 0) == ($20 | 0)) HEAP32[$wk$3 >> 2] = $19;
       $k$3 = $k$3 + 1 | 0;
       $wk$3 = $wk$3 + 4 | 0;
      }
     } else $23 = $19;
    } while (0);
    $24 = ($23 << 16 >> 16) * 7 | 0;
    $arrayidx183 = $labelInfo + 1310736 + ($24 + -7 << 2) | 0;
    HEAP32[$arrayidx183 >> 2] = (HEAP32[$arrayidx183 >> 2] | 0) + 1;
    $arrayidx186 = $labelInfo + 1310736 + ($24 + -6 << 2) | 0;
    HEAP32[$arrayidx186 >> 2] = (HEAP32[$arrayidx186 >> 2] | 0) + $i$2;
    $arrayidx189 = $labelInfo + 1310736 + ($24 + -5 << 2) | 0;
    HEAP32[$arrayidx189 >> 2] = (HEAP32[$arrayidx189 >> 2] | 0) + $j$0;
    $wk_max$3 = $wk_max$1;
   } else {
    HEAP16[$pnt2$3 >> 1] = 0;
    $wk_max$3 = $wk_max$1;
   } while (0);
   $i$2 = $i$2 + 1 | 0;
   $pnt$1 = $pnt$1 + 4 | 0;
   $pnt2$3 = $pnt2$3 + 2 | 0;
   $wk_max$1 = $wk_max$3;
  }
  $j$0 = $j$0 + 1 | 0;
  $pnt$0 = $pnt$1 + $mul22 + 8 | 0;
  $pnt2$2 = $pnt2$3 + 4 | 0;
  $wk_max$0 = $wk_max$1;
 }
 L77 : do if ((label | 0) == 50) {
  _arLog(3, 3256, $vararg_buffer);
  $retval$0 = -1;
 } else if ((label | 0) == 56) {
  $arrayidx319 = $labelInfo + 12 | 0;
  $i$3 = 1;
  $j$1 = 1;
  $wk$4 = $arraydecay;
  while (1) {
   if (($i$3 | 0) > ($wk_max$0 | 0)) break;
   $42 = HEAP32[$wk$4 >> 2] | 0;
   if (($42 | 0) == ($i$3 | 0)) {
    $cond = $j$1;
    $j$2 = $j$1 + 1 | 0;
   } else {
    $cond = HEAP32[$labelInfo + 1179664 + ($42 + -1 << 2) >> 2] | 0;
    $j$2 = $j$1;
   }
   HEAP32[$wk$4 >> 2] = $cond;
   $i$3 = $i$3 + 1 | 0;
   $j$1 = $j$2;
   $wk$4 = $wk$4 + 4 | 0;
  }
  $label_num317 = $labelInfo + 8 | 0;
  $sub340 = $j$1 + -1 | 0;
  HEAP32[$label_num317 >> 2] = $sub340;
  if (!$sub340) $retval$0 = 0; else {
   _memset($arrayidx319 | 0, 0, $sub340 << 2 | 0) | 0;
   _memset($labelInfo + 655376 | 0, 0, $sub340 << 4 | 0) | 0;
   $44 = $sub340;
   $i$4 = 0;
   while (1) {
    if (($i$4 | 0) >= ($44 | 0)) {
     $i$5 = 0;
     break;
    }
    $mul352 = $i$4 << 2;
    HEAP32[$labelInfo + 131084 + ($mul352 << 2) >> 2] = $div;
    HEAP32[$labelInfo + 131084 + (($mul352 | 1) << 2) >> 2] = 0;
    HEAP32[$labelInfo + 131084 + (($mul352 | 2) << 2) >> 2] = $div1;
    HEAP32[$labelInfo + 131084 + (($mul352 | 3) << 2) >> 2] = 0;
    $44 = HEAP32[$label_num317 >> 2] | 0;
    $i$4 = $i$4 + 1 | 0;
   }
   while (1) {
    if (($i$5 | 0) >= ($wk_max$0 | 0)) {
     $i$6 = 0;
     break;
    }
    $sub372 = (HEAP32[$labelInfo + 1179664 + ($i$5 << 2) >> 2] | 0) + -1 | 0;
    $mul373 = $i$5 * 7 | 0;
    $arrayidx376 = $labelInfo + 12 + ($sub372 << 2) | 0;
    HEAP32[$arrayidx376 >> 2] = (HEAP32[$arrayidx376 >> 2] | 0) + (HEAP32[$labelInfo + 1310736 + ($mul373 << 2) >> 2] | 0);
    $mul382 = $sub372 << 1;
    $arrayidx384 = $labelInfo + 655376 + ($mul382 << 3) | 0;
    HEAPF64[$arrayidx384 >> 3] = +HEAPF64[$arrayidx384 >> 3] + +(HEAP32[$labelInfo + 1310736 + ($mul373 + 1 << 2) >> 2] | 0);
    $arrayidx392 = $labelInfo + 655376 + (($mul382 | 1) << 3) | 0;
    HEAPF64[$arrayidx392 >> 3] = +HEAPF64[$arrayidx392 >> 3] + +(HEAP32[$labelInfo + 1310736 + ($mul373 + 2 << 2) >> 2] | 0);
    $mul394 = $sub372 << 2;
    $arrayidx396 = $labelInfo + 131084 + ($mul394 << 2) | 0;
    $53 = HEAP32[$labelInfo + 1310736 + ($mul373 + 3 << 2) >> 2] | 0;
    if ((HEAP32[$arrayidx396 >> 2] | 0) > ($53 | 0)) HEAP32[$arrayidx396 >> 2] = $53;
    $arrayidx412 = $labelInfo + 131084 + (($mul394 | 1) << 2) | 0;
    $55 = HEAP32[$labelInfo + 1310736 + ($mul373 + 4 << 2) >> 2] | 0;
    if ((HEAP32[$arrayidx412 >> 2] | 0) < ($55 | 0)) HEAP32[$arrayidx412 >> 2] = $55;
    $arrayidx428 = $labelInfo + 131084 + (($mul394 | 2) << 2) | 0;
    $57 = HEAP32[$labelInfo + 1310736 + ($mul373 + 5 << 2) >> 2] | 0;
    if ((HEAP32[$arrayidx428 >> 2] | 0) > ($57 | 0)) HEAP32[$arrayidx428 >> 2] = $57;
    $arrayidx444 = $labelInfo + 131084 + (($mul394 | 3) << 2) | 0;
    $59 = HEAP32[$labelInfo + 1310736 + ($mul373 + 6 << 2) >> 2] | 0;
    if ((HEAP32[$arrayidx444 >> 2] | 0) < ($59 | 0)) HEAP32[$arrayidx444 >> 2] = $59;
    $i$5 = $i$5 + 1 | 0;
   }
   while (1) {
    if (($i$6 | 0) >= (HEAP32[$label_num317 >> 2] | 0)) {
     $retval$0 = 0;
     break L77;
    }
    $arrayidx465 = $labelInfo + 12 + ($i$6 << 2) | 0;
    $mul467 = $i$6 << 1;
    $arrayidx469 = $labelInfo + 655376 + ($mul467 << 3) | 0;
    HEAPF64[$arrayidx469 >> 3] = +HEAPF64[$arrayidx469 >> 3] / +(HEAP32[$arrayidx465 >> 2] | 0);
    $arrayidx475 = $labelInfo + 655376 + (($mul467 | 1) << 3) | 0;
    HEAPF64[$arrayidx475 >> 3] = +HEAPF64[$arrayidx475 >> 3] / +(HEAP32[$arrayidx465 >> 2] | 0);
    $i$6 = $i$6 + 1 | 0;
   }
  }
 } while (0);
 STACKTOP = sp;
 return $retval$0 | 0;
}

function _arLabelingSubDBIYC($image, $xsize, $ysize, $labelingThresh, $labelInfo) {
 $image = $image | 0;
 $xsize = $xsize | 0;
 $ysize = $ysize | 0;
 $labelingThresh = $labelingThresh | 0;
 $labelInfo = $labelInfo | 0;
 var $$sink = 0, $0 = 0, $10 = 0, $13 = 0, $14 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $23 = 0, $24 = 0, $3 = 0, $36 = 0, $37 = 0, $42 = 0, $44 = 0, $53 = 0, $55 = 0, $57 = 0, $59 = 0, $7 = 0, $8 = 0, $9 = 0, $add$ptr127 = 0, $add265 = 0, $add270$sink = 0, $arraydecay = 0, $arrayidx116 = 0, $arrayidx119 = 0, $arrayidx122 = 0, $arrayidx183 = 0, $arrayidx186 = 0, $arrayidx189 = 0, $arrayidx197 = 0, $arrayidx200 = 0, $arrayidx203 = 0, $arrayidx206 = 0, $arrayidx228 = 0, $arrayidx231 = 0, $arrayidx234 = 0, $arrayidx237 = 0, $arrayidx257 = 0, $arrayidx260 = 0, $arrayidx263 = 0, $arrayidx319 = 0, $arrayidx37 = 0, $arrayidx376 = 0, $arrayidx384 = 0, $arrayidx392 = 0, $arrayidx396 = 0, $arrayidx412 = 0, $arrayidx428 = 0, $arrayidx444 = 0, $arrayidx46 = 0, $arrayidx465 = 0, $arrayidx469 = 0, $arrayidx475 = 0, $arrayidx49 = 0, $arrayidx52 = 0, $arrayidx69 = 0, $cmp63 = 0, $cond = 0, $div = 0, $div1 = 0, $i$0 = 0, $i$1 = 0, $i$2 = 0, $i$3 = 0, $i$4 = 0, $i$5 = 0, $i$6 = 0, $inc274 = 0, $j$0 = 0, $j$1 = 0, $j$2 = 0, $k$0 = 0, $k$1 = 0, $k$2 = 0, $k$3 = 0, $label_num317 = 0, $mul195 = 0, $mul22 = 0, $mul226 = 0, $mul284 = 0, $mul352 = 0, $mul373 = 0, $mul382 = 0, $mul394 = 0, $mul467 = 0, $pnt$0 = 0, $pnt$1 = 0, $pnt1$0 = 0, $pnt1$1 = 0, $pnt2$0 = 0, $pnt2$1 = 0, $pnt2$2 = 0, $pnt2$3 = 0, $retval$0 = 0, $sub = 0, $sub340 = 0, $sub36 = 0, $sub372 = 0, $sub68 = 0, $sub72 = 0, $sub8 = 0, $vararg_buffer = 0, $wk$0 = 0, $wk$1 = 0, $wk$2 = 0, $wk$3 = 0, $wk$4 = 0, $wk_max$0 = 0, $wk_max$1 = 0, $wk_max$2 = 0, $wk_max$3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $vararg_buffer = sp;
 $div = ($xsize | 0) / 2 | 0;
 $div1 = ($ysize | 0) / 2 | 0;
 $0 = HEAP32[$labelInfo >> 2] | 0;
 $sub = $div1 + -1 | 0;
 $i$0 = 0;
 $pnt1$0 = $0;
 $pnt2$0 = $0 + ((Math_imul($sub, $div) | 0) << 1) | 0;
 while (1) {
  if (($i$0 | 0) >= ($div | 0)) break;
  HEAP16[$pnt2$0 >> 1] = 0;
  HEAP16[$pnt1$0 >> 1] = 0;
  $i$0 = $i$0 + 1 | 0;
  $pnt1$0 = $pnt1$0 + 2 | 0;
  $pnt2$0 = $pnt2$0 + 2 | 0;
 }
 $sub8 = $div + -1 | 0;
 $i$1 = 0;
 $pnt1$1 = $0;
 $pnt2$1 = $0 + ($sub8 << 1) | 0;
 while (1) {
  if (($i$1 | 0) >= ($div1 | 0)) break;
  HEAP16[$pnt2$1 >> 1] = 0;
  HEAP16[$pnt1$1 >> 1] = 0;
  $i$1 = $i$1 + 1 | 0;
  $pnt1$1 = $pnt1$1 + ($div << 1) | 0;
  $pnt2$1 = $pnt2$1 + ($div << 1) | 0;
 }
 $arraydecay = $labelInfo + 1179664 | 0;
 $mul22 = $xsize << 1;
 $sub36 = 0 - $div | 0;
 $j$0 = 1;
 $pnt$0 = $image + (($xsize << 2) + 4) | 0;
 $pnt2$2 = $0 + ($div + 1 << 1) | 0;
 $wk_max$0 = 0;
 L9 : while (1) {
  if (($j$0 | 0) < ($sub | 0)) {
   $i$2 = 1;
   $pnt$1 = $pnt$0;
   $pnt2$3 = $pnt2$2;
   $wk_max$1 = $wk_max$0;
  } else {
   label = 56;
   break;
  }
  while (1) {
   if (($i$2 | 0) >= ($sub8 | 0)) break;
   do if ((HEAPU8[$pnt$1 >> 0] | 0 | 0) > ($labelingThresh | 0)) {
    HEAP16[$pnt2$3 >> 1] = 0;
    $wk_max$3 = $wk_max$1;
   } else {
    $arrayidx37 = $pnt2$3 + ($sub36 << 1) | 0;
    $2 = HEAP16[$arrayidx37 >> 1] | 0;
    if ($2 << 16 >> 16 > 0) {
     HEAP16[$pnt2$3 >> 1] = $2;
     $3 = ($2 << 16 >> 16) * 7 | 0;
     $arrayidx46 = $labelInfo + 1310736 + ($3 + -7 << 2) | 0;
     HEAP32[$arrayidx46 >> 2] = (HEAP32[$arrayidx46 >> 2] | 0) + 1;
     $arrayidx49 = $labelInfo + 1310736 + ($3 + -6 << 2) | 0;
     HEAP32[$arrayidx49 >> 2] = (HEAP32[$arrayidx49 >> 2] | 0) + $i$2;
     $arrayidx52 = $labelInfo + 1310736 + ($3 + -5 << 2) | 0;
     HEAP32[$arrayidx52 >> 2] = (HEAP32[$arrayidx52 >> 2] | 0) + $j$0;
     HEAP32[$labelInfo + 1310736 + ($3 + -1 << 2) >> 2] = $j$0;
     $wk_max$3 = $wk_max$1;
     break;
    }
    $7 = HEAP16[$arrayidx37 + 2 >> 1] | 0;
    $8 = HEAP16[$arrayidx37 + -2 >> 1] | 0;
    $cmp63 = $8 << 16 >> 16 > 0;
    $sub72 = ($8 << 16 >> 16) + -1 | 0;
    $add$ptr127 = $pnt2$3 + -2 | 0;
    if ($7 << 16 >> 16 <= 0) {
     if ($cmp63) {
      HEAP16[$pnt2$3 >> 1] = $8;
      $mul226 = $sub72 * 7 | 0;
      $arrayidx228 = $labelInfo + 1310736 + ($mul226 << 2) | 0;
      HEAP32[$arrayidx228 >> 2] = (HEAP32[$arrayidx228 >> 2] | 0) + 1;
      $arrayidx231 = $labelInfo + 1310736 + ($mul226 + 1 << 2) | 0;
      HEAP32[$arrayidx231 >> 2] = (HEAP32[$arrayidx231 >> 2] | 0) + $i$2;
      $arrayidx234 = $labelInfo + 1310736 + ($mul226 + 2 << 2) | 0;
      HEAP32[$arrayidx234 >> 2] = (HEAP32[$arrayidx234 >> 2] | 0) + $j$0;
      $arrayidx237 = $labelInfo + 1310736 + ($mul226 + 4 << 2) | 0;
      if ((HEAP32[$arrayidx237 >> 2] | 0) < ($i$2 | 0)) HEAP32[$arrayidx237 >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($mul226 + 6 << 2) >> 2] = $j$0;
      $wk_max$3 = $wk_max$1;
      break;
     }
     $36 = HEAP16[$add$ptr127 >> 1] | 0;
     if ($36 << 16 >> 16 > 0) {
      HEAP16[$pnt2$3 >> 1] = $36;
      $37 = ($36 << 16 >> 16) * 7 | 0;
      $arrayidx257 = $labelInfo + 1310736 + ($37 + -7 << 2) | 0;
      HEAP32[$arrayidx257 >> 2] = (HEAP32[$arrayidx257 >> 2] | 0) + 1;
      $arrayidx260 = $labelInfo + 1310736 + ($37 + -6 << 2) | 0;
      HEAP32[$arrayidx260 >> 2] = (HEAP32[$arrayidx260 >> 2] | 0) + $i$2;
      $arrayidx263 = $labelInfo + 1310736 + ($37 + -5 << 2) | 0;
      HEAP32[$arrayidx263 >> 2] = (HEAP32[$arrayidx263 >> 2] | 0) + $j$0;
      $add265 = $37 + -3 | 0;
      if ((HEAP32[$labelInfo + 1310736 + ($add265 << 2) >> 2] | 0) < ($i$2 | 0)) {
       $$sink = $i$2;
       $add270$sink = $add265;
       $wk_max$2 = $wk_max$1;
      } else {
       $wk_max$3 = $wk_max$1;
       break;
      }
     } else {
      $inc274 = $wk_max$1 + 1 | 0;
      if (($wk_max$1 | 0) > 32767) {
       label = 50;
       break L9;
      }
      HEAP16[$pnt2$3 >> 1] = $inc274;
      HEAP32[$labelInfo + 1179664 + ($wk_max$1 << 2) >> 2] = $inc274 << 16 >> 16;
      $mul284 = $wk_max$1 * 7 | 0;
      HEAP32[$labelInfo + 1310736 + ($mul284 << 2) >> 2] = 1;
      HEAP32[$labelInfo + 1310736 + ($mul284 + 1 << 2) >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($mul284 + 2 << 2) >> 2] = $j$0;
      HEAP32[$labelInfo + 1310736 + ($mul284 + 3 << 2) >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($mul284 + 4 << 2) >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($mul284 + 5 << 2) >> 2] = $j$0;
      $$sink = $j$0;
      $add270$sink = $mul284 + 6 | 0;
      $wk_max$2 = $inc274;
     }
     HEAP32[$labelInfo + 1310736 + ($add270$sink << 2) >> 2] = $$sink;
     $wk_max$3 = $wk_max$2;
     break;
    }
    $sub68 = ($7 << 16 >> 16) + -1 | 0;
    $arrayidx69 = $labelInfo + 1179664 + ($sub68 << 2) | 0;
    if ($cmp63) {
     $9 = HEAP32[$arrayidx69 >> 2] | 0;
     $10 = HEAP32[$labelInfo + 1179664 + ($sub72 << 2) >> 2] | 0;
     L36 : do if (($9 | 0) > ($10 | 0)) {
      HEAP16[$pnt2$3 >> 1] = $10;
      $k$0 = 0;
      $wk$0 = $arraydecay;
      while (1) {
       if (($k$0 | 0) >= ($wk_max$1 | 0)) {
        $13 = $10;
        break L36;
       }
       if ((HEAP32[$wk$0 >> 2] | 0) == ($9 | 0)) HEAP32[$wk$0 >> 2] = $10;
       $k$0 = $k$0 + 1 | 0;
       $wk$0 = $wk$0 + 4 | 0;
      }
     } else {
      HEAP16[$pnt2$3 >> 1] = $9;
      if (($9 | 0) < ($10 | 0)) {
       $k$1 = 0;
       $wk$1 = $arraydecay;
       while (1) {
        if (($k$1 | 0) >= ($wk_max$1 | 0)) {
         $13 = $9;
         break L36;
        }
        if ((HEAP32[$wk$1 >> 2] | 0) == ($10 | 0)) HEAP32[$wk$1 >> 2] = $9;
        $k$1 = $k$1 + 1 | 0;
        $wk$1 = $wk$1 + 4 | 0;
       }
      } else $13 = $9;
     } while (0);
     $14 = ($13 << 16 >> 16) * 7 | 0;
     $arrayidx116 = $labelInfo + 1310736 + ($14 + -7 << 2) | 0;
     HEAP32[$arrayidx116 >> 2] = (HEAP32[$arrayidx116 >> 2] | 0) + 1;
     $arrayidx119 = $labelInfo + 1310736 + ($14 + -6 << 2) | 0;
     HEAP32[$arrayidx119 >> 2] = (HEAP32[$arrayidx119 >> 2] | 0) + $i$2;
     $arrayidx122 = $labelInfo + 1310736 + ($14 + -5 << 2) | 0;
     HEAP32[$arrayidx122 >> 2] = (HEAP32[$arrayidx122 >> 2] | 0) + $j$0;
     HEAP32[$labelInfo + 1310736 + ($14 + -1 << 2) >> 2] = $j$0;
     $wk_max$3 = $wk_max$1;
     break;
    }
    $18 = HEAP16[$add$ptr127 >> 1] | 0;
    if ($18 << 16 >> 16 <= 0) {
     HEAP16[$pnt2$3 >> 1] = $7;
     $mul195 = $sub68 * 7 | 0;
     $arrayidx197 = $labelInfo + 1310736 + ($mul195 << 2) | 0;
     HEAP32[$arrayidx197 >> 2] = (HEAP32[$arrayidx197 >> 2] | 0) + 1;
     $arrayidx200 = $labelInfo + 1310736 + ($mul195 + 1 << 2) | 0;
     HEAP32[$arrayidx200 >> 2] = (HEAP32[$arrayidx200 >> 2] | 0) + $i$2;
     $arrayidx203 = $labelInfo + 1310736 + ($mul195 + 2 << 2) | 0;
     HEAP32[$arrayidx203 >> 2] = (HEAP32[$arrayidx203 >> 2] | 0) + $j$0;
     $arrayidx206 = $labelInfo + 1310736 + ($mul195 + 3 << 2) | 0;
     if ((HEAP32[$arrayidx206 >> 2] | 0) > ($i$2 | 0)) HEAP32[$arrayidx206 >> 2] = $i$2;
     HEAP32[$labelInfo + 1310736 + ($mul195 + 6 << 2) >> 2] = $j$0;
     $wk_max$3 = $wk_max$1;
     break;
    }
    $19 = HEAP32[$arrayidx69 >> 2] | 0;
    $20 = HEAP32[$labelInfo + 1179664 + (($18 << 16 >> 16) + -1 << 2) >> 2] | 0;
    L59 : do if (($19 | 0) > ($20 | 0)) {
     HEAP16[$pnt2$3 >> 1] = $20;
     $k$2 = 0;
     $wk$2 = $arraydecay;
     while (1) {
      if (($k$2 | 0) >= ($wk_max$1 | 0)) {
       $23 = $20;
       break L59;
      }
      if ((HEAP32[$wk$2 >> 2] | 0) == ($19 | 0)) HEAP32[$wk$2 >> 2] = $20;
      $k$2 = $k$2 + 1 | 0;
      $wk$2 = $wk$2 + 4 | 0;
     }
    } else {
     HEAP16[$pnt2$3 >> 1] = $19;
     if (($19 | 0) < ($20 | 0)) {
      $k$3 = 0;
      $wk$3 = $arraydecay;
      while (1) {
       if (($k$3 | 0) >= ($wk_max$1 | 0)) {
        $23 = $19;
        break L59;
       }
       if ((HEAP32[$wk$3 >> 2] | 0) == ($20 | 0)) HEAP32[$wk$3 >> 2] = $19;
       $k$3 = $k$3 + 1 | 0;
       $wk$3 = $wk$3 + 4 | 0;
      }
     } else $23 = $19;
    } while (0);
    $24 = ($23 << 16 >> 16) * 7 | 0;
    $arrayidx183 = $labelInfo + 1310736 + ($24 + -7 << 2) | 0;
    HEAP32[$arrayidx183 >> 2] = (HEAP32[$arrayidx183 >> 2] | 0) + 1;
    $arrayidx186 = $labelInfo + 1310736 + ($24 + -6 << 2) | 0;
    HEAP32[$arrayidx186 >> 2] = (HEAP32[$arrayidx186 >> 2] | 0) + $i$2;
    $arrayidx189 = $labelInfo + 1310736 + ($24 + -5 << 2) | 0;
    HEAP32[$arrayidx189 >> 2] = (HEAP32[$arrayidx189 >> 2] | 0) + $j$0;
    $wk_max$3 = $wk_max$1;
   } while (0);
   $i$2 = $i$2 + 1 | 0;
   $pnt$1 = $pnt$1 + 4 | 0;
   $pnt2$3 = $pnt2$3 + 2 | 0;
   $wk_max$1 = $wk_max$3;
  }
  $j$0 = $j$0 + 1 | 0;
  $pnt$0 = $pnt$1 + $mul22 + 8 | 0;
  $pnt2$2 = $pnt2$3 + 4 | 0;
  $wk_max$0 = $wk_max$1;
 }
 L77 : do if ((label | 0) == 50) {
  _arLog(3, 3256, $vararg_buffer);
  $retval$0 = -1;
 } else if ((label | 0) == 56) {
  $arrayidx319 = $labelInfo + 12 | 0;
  $i$3 = 1;
  $j$1 = 1;
  $wk$4 = $arraydecay;
  while (1) {
   if (($i$3 | 0) > ($wk_max$0 | 0)) break;
   $42 = HEAP32[$wk$4 >> 2] | 0;
   if (($42 | 0) == ($i$3 | 0)) {
    $cond = $j$1;
    $j$2 = $j$1 + 1 | 0;
   } else {
    $cond = HEAP32[$labelInfo + 1179664 + ($42 + -1 << 2) >> 2] | 0;
    $j$2 = $j$1;
   }
   HEAP32[$wk$4 >> 2] = $cond;
   $i$3 = $i$3 + 1 | 0;
   $j$1 = $j$2;
   $wk$4 = $wk$4 + 4 | 0;
  }
  $label_num317 = $labelInfo + 8 | 0;
  $sub340 = $j$1 + -1 | 0;
  HEAP32[$label_num317 >> 2] = $sub340;
  if (!$sub340) $retval$0 = 0; else {
   _memset($arrayidx319 | 0, 0, $sub340 << 2 | 0) | 0;
   _memset($labelInfo + 655376 | 0, 0, $sub340 << 4 | 0) | 0;
   $44 = $sub340;
   $i$4 = 0;
   while (1) {
    if (($i$4 | 0) >= ($44 | 0)) {
     $i$5 = 0;
     break;
    }
    $mul352 = $i$4 << 2;
    HEAP32[$labelInfo + 131084 + ($mul352 << 2) >> 2] = $div;
    HEAP32[$labelInfo + 131084 + (($mul352 | 1) << 2) >> 2] = 0;
    HEAP32[$labelInfo + 131084 + (($mul352 | 2) << 2) >> 2] = $div1;
    HEAP32[$labelInfo + 131084 + (($mul352 | 3) << 2) >> 2] = 0;
    $44 = HEAP32[$label_num317 >> 2] | 0;
    $i$4 = $i$4 + 1 | 0;
   }
   while (1) {
    if (($i$5 | 0) >= ($wk_max$0 | 0)) {
     $i$6 = 0;
     break;
    }
    $sub372 = (HEAP32[$labelInfo + 1179664 + ($i$5 << 2) >> 2] | 0) + -1 | 0;
    $mul373 = $i$5 * 7 | 0;
    $arrayidx376 = $labelInfo + 12 + ($sub372 << 2) | 0;
    HEAP32[$arrayidx376 >> 2] = (HEAP32[$arrayidx376 >> 2] | 0) + (HEAP32[$labelInfo + 1310736 + ($mul373 << 2) >> 2] | 0);
    $mul382 = $sub372 << 1;
    $arrayidx384 = $labelInfo + 655376 + ($mul382 << 3) | 0;
    HEAPF64[$arrayidx384 >> 3] = +HEAPF64[$arrayidx384 >> 3] + +(HEAP32[$labelInfo + 1310736 + ($mul373 + 1 << 2) >> 2] | 0);
    $arrayidx392 = $labelInfo + 655376 + (($mul382 | 1) << 3) | 0;
    HEAPF64[$arrayidx392 >> 3] = +HEAPF64[$arrayidx392 >> 3] + +(HEAP32[$labelInfo + 1310736 + ($mul373 + 2 << 2) >> 2] | 0);
    $mul394 = $sub372 << 2;
    $arrayidx396 = $labelInfo + 131084 + ($mul394 << 2) | 0;
    $53 = HEAP32[$labelInfo + 1310736 + ($mul373 + 3 << 2) >> 2] | 0;
    if ((HEAP32[$arrayidx396 >> 2] | 0) > ($53 | 0)) HEAP32[$arrayidx396 >> 2] = $53;
    $arrayidx412 = $labelInfo + 131084 + (($mul394 | 1) << 2) | 0;
    $55 = HEAP32[$labelInfo + 1310736 + ($mul373 + 4 << 2) >> 2] | 0;
    if ((HEAP32[$arrayidx412 >> 2] | 0) < ($55 | 0)) HEAP32[$arrayidx412 >> 2] = $55;
    $arrayidx428 = $labelInfo + 131084 + (($mul394 | 2) << 2) | 0;
    $57 = HEAP32[$labelInfo + 1310736 + ($mul373 + 5 << 2) >> 2] | 0;
    if ((HEAP32[$arrayidx428 >> 2] | 0) > ($57 | 0)) HEAP32[$arrayidx428 >> 2] = $57;
    $arrayidx444 = $labelInfo + 131084 + (($mul394 | 3) << 2) | 0;
    $59 = HEAP32[$labelInfo + 1310736 + ($mul373 + 6 << 2) >> 2] | 0;
    if ((HEAP32[$arrayidx444 >> 2] | 0) < ($59 | 0)) HEAP32[$arrayidx444 >> 2] = $59;
    $i$5 = $i$5 + 1 | 0;
   }
   while (1) {
    if (($i$6 | 0) >= (HEAP32[$label_num317 >> 2] | 0)) {
     $retval$0 = 0;
     break L77;
    }
    $arrayidx465 = $labelInfo + 12 + ($i$6 << 2) | 0;
    $mul467 = $i$6 << 1;
    $arrayidx469 = $labelInfo + 655376 + ($mul467 << 3) | 0;
    HEAPF64[$arrayidx469 >> 3] = +HEAPF64[$arrayidx469 >> 3] / +(HEAP32[$arrayidx465 >> 2] | 0);
    $arrayidx475 = $labelInfo + 655376 + (($mul467 | 1) << 3) | 0;
    HEAPF64[$arrayidx475 >> 3] = +HEAPF64[$arrayidx475 >> 3] / +(HEAP32[$arrayidx465 >> 2] | 0);
    $i$6 = $i$6 + 1 | 0;
   }
  }
 } while (0);
 STACKTOP = sp;
 return $retval$0 | 0;
}

function _arLabelingSubDWIC($image, $xsize, $ysize, $labelingThresh, $labelInfo) {
 $image = $image | 0;
 $xsize = $xsize | 0;
 $ysize = $ysize | 0;
 $labelingThresh = $labelingThresh | 0;
 $labelInfo = $labelInfo | 0;
 var $$sink = 0, $0 = 0, $10 = 0, $13 = 0, $14 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $23 = 0, $24 = 0, $3 = 0, $36 = 0, $37 = 0, $42 = 0, $44 = 0, $53 = 0, $55 = 0, $57 = 0, $59 = 0, $7 = 0, $8 = 0, $9 = 0, $add$ptr127 = 0, $add265 = 0, $add270$sink = 0, $arraydecay = 0, $arrayidx116 = 0, $arrayidx119 = 0, $arrayidx122 = 0, $arrayidx183 = 0, $arrayidx186 = 0, $arrayidx189 = 0, $arrayidx197 = 0, $arrayidx200 = 0, $arrayidx203 = 0, $arrayidx206 = 0, $arrayidx228 = 0, $arrayidx231 = 0, $arrayidx234 = 0, $arrayidx237 = 0, $arrayidx257 = 0, $arrayidx260 = 0, $arrayidx263 = 0, $arrayidx319 = 0, $arrayidx37 = 0, $arrayidx376 = 0, $arrayidx384 = 0, $arrayidx392 = 0, $arrayidx396 = 0, $arrayidx412 = 0, $arrayidx428 = 0, $arrayidx444 = 0, $arrayidx46 = 0, $arrayidx465 = 0, $arrayidx469 = 0, $arrayidx475 = 0, $arrayidx49 = 0, $arrayidx52 = 0, $arrayidx69 = 0, $cmp63 = 0, $cond = 0, $div = 0, $div1 = 0, $i$0 = 0, $i$1 = 0, $i$2 = 0, $i$3 = 0, $i$4 = 0, $i$5 = 0, $i$6 = 0, $inc274 = 0, $j$0 = 0, $j$1 = 0, $j$2 = 0, $k$0 = 0, $k$1 = 0, $k$2 = 0, $k$3 = 0, $label_num317 = 0, $mul195 = 0, $mul226 = 0, $mul284 = 0, $mul352 = 0, $mul373 = 0, $mul382 = 0, $mul394 = 0, $mul467 = 0, $pnt$0 = 0, $pnt$1 = 0, $pnt1$0 = 0, $pnt1$1 = 0, $pnt2$0 = 0, $pnt2$1 = 0, $pnt2$2 = 0, $pnt2$3 = 0, $retval$0 = 0, $sub = 0, $sub340 = 0, $sub36 = 0, $sub372 = 0, $sub68 = 0, $sub72 = 0, $sub8 = 0, $vararg_buffer = 0, $wk$0 = 0, $wk$1 = 0, $wk$2 = 0, $wk$3 = 0, $wk$4 = 0, $wk_max$0 = 0, $wk_max$1 = 0, $wk_max$2 = 0, $wk_max$3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $vararg_buffer = sp;
 $div = ($xsize | 0) / 2 | 0;
 $div1 = ($ysize | 0) / 2 | 0;
 $0 = HEAP32[$labelInfo >> 2] | 0;
 $sub = $div1 + -1 | 0;
 $i$0 = 0;
 $pnt1$0 = $0;
 $pnt2$0 = $0 + ((Math_imul($sub, $div) | 0) << 1) | 0;
 while (1) {
  if (($i$0 | 0) >= ($div | 0)) break;
  HEAP16[$pnt2$0 >> 1] = 0;
  HEAP16[$pnt1$0 >> 1] = 0;
  $i$0 = $i$0 + 1 | 0;
  $pnt1$0 = $pnt1$0 + 2 | 0;
  $pnt2$0 = $pnt2$0 + 2 | 0;
 }
 $sub8 = $div + -1 | 0;
 $i$1 = 0;
 $pnt1$1 = $0;
 $pnt2$1 = $0 + ($sub8 << 1) | 0;
 while (1) {
  if (($i$1 | 0) >= ($div1 | 0)) break;
  HEAP16[$pnt2$1 >> 1] = 0;
  HEAP16[$pnt1$1 >> 1] = 0;
  $i$1 = $i$1 + 1 | 0;
  $pnt1$1 = $pnt1$1 + ($div << 1) | 0;
  $pnt2$1 = $pnt2$1 + ($div << 1) | 0;
 }
 $arraydecay = $labelInfo + 1179664 | 0;
 $sub36 = 0 - $div | 0;
 $j$0 = 1;
 $pnt$0 = $image + (($xsize << 1) + 2) | 0;
 $pnt2$2 = $0 + ($div + 1 << 1) | 0;
 $wk_max$0 = 0;
 L9 : while (1) {
  if (($j$0 | 0) < ($sub | 0)) {
   $i$2 = 1;
   $pnt$1 = $pnt$0;
   $pnt2$3 = $pnt2$2;
   $wk_max$1 = $wk_max$0;
  } else {
   label = 56;
   break;
  }
  while (1) {
   if (($i$2 | 0) >= ($sub8 | 0)) break;
   do if ((HEAPU8[$pnt$1 >> 0] | 0 | 0) > ($labelingThresh | 0)) {
    $arrayidx37 = $pnt2$3 + ($sub36 << 1) | 0;
    $2 = HEAP16[$arrayidx37 >> 1] | 0;
    if ($2 << 16 >> 16 > 0) {
     HEAP16[$pnt2$3 >> 1] = $2;
     $3 = ($2 << 16 >> 16) * 7 | 0;
     $arrayidx46 = $labelInfo + 1310736 + ($3 + -7 << 2) | 0;
     HEAP32[$arrayidx46 >> 2] = (HEAP32[$arrayidx46 >> 2] | 0) + 1;
     $arrayidx49 = $labelInfo + 1310736 + ($3 + -6 << 2) | 0;
     HEAP32[$arrayidx49 >> 2] = (HEAP32[$arrayidx49 >> 2] | 0) + $i$2;
     $arrayidx52 = $labelInfo + 1310736 + ($3 + -5 << 2) | 0;
     HEAP32[$arrayidx52 >> 2] = (HEAP32[$arrayidx52 >> 2] | 0) + $j$0;
     HEAP32[$labelInfo + 1310736 + ($3 + -1 << 2) >> 2] = $j$0;
     $wk_max$3 = $wk_max$1;
     break;
    }
    $7 = HEAP16[$arrayidx37 + 2 >> 1] | 0;
    $8 = HEAP16[$arrayidx37 + -2 >> 1] | 0;
    $cmp63 = $8 << 16 >> 16 > 0;
    $sub72 = ($8 << 16 >> 16) + -1 | 0;
    $add$ptr127 = $pnt2$3 + -2 | 0;
    if ($7 << 16 >> 16 <= 0) {
     if ($cmp63) {
      HEAP16[$pnt2$3 >> 1] = $8;
      $mul226 = $sub72 * 7 | 0;
      $arrayidx228 = $labelInfo + 1310736 + ($mul226 << 2) | 0;
      HEAP32[$arrayidx228 >> 2] = (HEAP32[$arrayidx228 >> 2] | 0) + 1;
      $arrayidx231 = $labelInfo + 1310736 + ($mul226 + 1 << 2) | 0;
      HEAP32[$arrayidx231 >> 2] = (HEAP32[$arrayidx231 >> 2] | 0) + $i$2;
      $arrayidx234 = $labelInfo + 1310736 + ($mul226 + 2 << 2) | 0;
      HEAP32[$arrayidx234 >> 2] = (HEAP32[$arrayidx234 >> 2] | 0) + $j$0;
      $arrayidx237 = $labelInfo + 1310736 + ($mul226 + 4 << 2) | 0;
      if ((HEAP32[$arrayidx237 >> 2] | 0) < ($i$2 | 0)) HEAP32[$arrayidx237 >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($mul226 + 6 << 2) >> 2] = $j$0;
      $wk_max$3 = $wk_max$1;
      break;
     }
     $36 = HEAP16[$add$ptr127 >> 1] | 0;
     if ($36 << 16 >> 16 > 0) {
      HEAP16[$pnt2$3 >> 1] = $36;
      $37 = ($36 << 16 >> 16) * 7 | 0;
      $arrayidx257 = $labelInfo + 1310736 + ($37 + -7 << 2) | 0;
      HEAP32[$arrayidx257 >> 2] = (HEAP32[$arrayidx257 >> 2] | 0) + 1;
      $arrayidx260 = $labelInfo + 1310736 + ($37 + -6 << 2) | 0;
      HEAP32[$arrayidx260 >> 2] = (HEAP32[$arrayidx260 >> 2] | 0) + $i$2;
      $arrayidx263 = $labelInfo + 1310736 + ($37 + -5 << 2) | 0;
      HEAP32[$arrayidx263 >> 2] = (HEAP32[$arrayidx263 >> 2] | 0) + $j$0;
      $add265 = $37 + -3 | 0;
      if ((HEAP32[$labelInfo + 1310736 + ($add265 << 2) >> 2] | 0) < ($i$2 | 0)) {
       $$sink = $i$2;
       $add270$sink = $add265;
       $wk_max$2 = $wk_max$1;
      } else {
       $wk_max$3 = $wk_max$1;
       break;
      }
     } else {
      $inc274 = $wk_max$1 + 1 | 0;
      if (($wk_max$1 | 0) > 32767) {
       label = 50;
       break L9;
      }
      HEAP16[$pnt2$3 >> 1] = $inc274;
      HEAP32[$labelInfo + 1179664 + ($wk_max$1 << 2) >> 2] = $inc274 << 16 >> 16;
      $mul284 = $wk_max$1 * 7 | 0;
      HEAP32[$labelInfo + 1310736 + ($mul284 << 2) >> 2] = 1;
      HEAP32[$labelInfo + 1310736 + ($mul284 + 1 << 2) >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($mul284 + 2 << 2) >> 2] = $j$0;
      HEAP32[$labelInfo + 1310736 + ($mul284 + 3 << 2) >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($mul284 + 4 << 2) >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($mul284 + 5 << 2) >> 2] = $j$0;
      $$sink = $j$0;
      $add270$sink = $mul284 + 6 | 0;
      $wk_max$2 = $inc274;
     }
     HEAP32[$labelInfo + 1310736 + ($add270$sink << 2) >> 2] = $$sink;
     $wk_max$3 = $wk_max$2;
     break;
    }
    $sub68 = ($7 << 16 >> 16) + -1 | 0;
    $arrayidx69 = $labelInfo + 1179664 + ($sub68 << 2) | 0;
    if ($cmp63) {
     $9 = HEAP32[$arrayidx69 >> 2] | 0;
     $10 = HEAP32[$labelInfo + 1179664 + ($sub72 << 2) >> 2] | 0;
     L35 : do if (($9 | 0) > ($10 | 0)) {
      HEAP16[$pnt2$3 >> 1] = $10;
      $k$0 = 0;
      $wk$0 = $arraydecay;
      while (1) {
       if (($k$0 | 0) >= ($wk_max$1 | 0)) {
        $13 = $10;
        break L35;
       }
       if ((HEAP32[$wk$0 >> 2] | 0) == ($9 | 0)) HEAP32[$wk$0 >> 2] = $10;
       $k$0 = $k$0 + 1 | 0;
       $wk$0 = $wk$0 + 4 | 0;
      }
     } else {
      HEAP16[$pnt2$3 >> 1] = $9;
      if (($9 | 0) < ($10 | 0)) {
       $k$1 = 0;
       $wk$1 = $arraydecay;
       while (1) {
        if (($k$1 | 0) >= ($wk_max$1 | 0)) {
         $13 = $9;
         break L35;
        }
        if ((HEAP32[$wk$1 >> 2] | 0) == ($10 | 0)) HEAP32[$wk$1 >> 2] = $9;
        $k$1 = $k$1 + 1 | 0;
        $wk$1 = $wk$1 + 4 | 0;
       }
      } else $13 = $9;
     } while (0);
     $14 = ($13 << 16 >> 16) * 7 | 0;
     $arrayidx116 = $labelInfo + 1310736 + ($14 + -7 << 2) | 0;
     HEAP32[$arrayidx116 >> 2] = (HEAP32[$arrayidx116 >> 2] | 0) + 1;
     $arrayidx119 = $labelInfo + 1310736 + ($14 + -6 << 2) | 0;
     HEAP32[$arrayidx119 >> 2] = (HEAP32[$arrayidx119 >> 2] | 0) + $i$2;
     $arrayidx122 = $labelInfo + 1310736 + ($14 + -5 << 2) | 0;
     HEAP32[$arrayidx122 >> 2] = (HEAP32[$arrayidx122 >> 2] | 0) + $j$0;
     HEAP32[$labelInfo + 1310736 + ($14 + -1 << 2) >> 2] = $j$0;
     $wk_max$3 = $wk_max$1;
     break;
    }
    $18 = HEAP16[$add$ptr127 >> 1] | 0;
    if ($18 << 16 >> 16 <= 0) {
     HEAP16[$pnt2$3 >> 1] = $7;
     $mul195 = $sub68 * 7 | 0;
     $arrayidx197 = $labelInfo + 1310736 + ($mul195 << 2) | 0;
     HEAP32[$arrayidx197 >> 2] = (HEAP32[$arrayidx197 >> 2] | 0) + 1;
     $arrayidx200 = $labelInfo + 1310736 + ($mul195 + 1 << 2) | 0;
     HEAP32[$arrayidx200 >> 2] = (HEAP32[$arrayidx200 >> 2] | 0) + $i$2;
     $arrayidx203 = $labelInfo + 1310736 + ($mul195 + 2 << 2) | 0;
     HEAP32[$arrayidx203 >> 2] = (HEAP32[$arrayidx203 >> 2] | 0) + $j$0;
     $arrayidx206 = $labelInfo + 1310736 + ($mul195 + 3 << 2) | 0;
     if ((HEAP32[$arrayidx206 >> 2] | 0) > ($i$2 | 0)) HEAP32[$arrayidx206 >> 2] = $i$2;
     HEAP32[$labelInfo + 1310736 + ($mul195 + 6 << 2) >> 2] = $j$0;
     $wk_max$3 = $wk_max$1;
     break;
    }
    $19 = HEAP32[$arrayidx69 >> 2] | 0;
    $20 = HEAP32[$labelInfo + 1179664 + (($18 << 16 >> 16) + -1 << 2) >> 2] | 0;
    L58 : do if (($19 | 0) > ($20 | 0)) {
     HEAP16[$pnt2$3 >> 1] = $20;
     $k$2 = 0;
     $wk$2 = $arraydecay;
     while (1) {
      if (($k$2 | 0) >= ($wk_max$1 | 0)) {
       $23 = $20;
       break L58;
      }
      if ((HEAP32[$wk$2 >> 2] | 0) == ($19 | 0)) HEAP32[$wk$2 >> 2] = $20;
      $k$2 = $k$2 + 1 | 0;
      $wk$2 = $wk$2 + 4 | 0;
     }
    } else {
     HEAP16[$pnt2$3 >> 1] = $19;
     if (($19 | 0) < ($20 | 0)) {
      $k$3 = 0;
      $wk$3 = $arraydecay;
      while (1) {
       if (($k$3 | 0) >= ($wk_max$1 | 0)) {
        $23 = $19;
        break L58;
       }
       if ((HEAP32[$wk$3 >> 2] | 0) == ($20 | 0)) HEAP32[$wk$3 >> 2] = $19;
       $k$3 = $k$3 + 1 | 0;
       $wk$3 = $wk$3 + 4 | 0;
      }
     } else $23 = $19;
    } while (0);
    $24 = ($23 << 16 >> 16) * 7 | 0;
    $arrayidx183 = $labelInfo + 1310736 + ($24 + -7 << 2) | 0;
    HEAP32[$arrayidx183 >> 2] = (HEAP32[$arrayidx183 >> 2] | 0) + 1;
    $arrayidx186 = $labelInfo + 1310736 + ($24 + -6 << 2) | 0;
    HEAP32[$arrayidx186 >> 2] = (HEAP32[$arrayidx186 >> 2] | 0) + $i$2;
    $arrayidx189 = $labelInfo + 1310736 + ($24 + -5 << 2) | 0;
    HEAP32[$arrayidx189 >> 2] = (HEAP32[$arrayidx189 >> 2] | 0) + $j$0;
    $wk_max$3 = $wk_max$1;
   } else {
    HEAP16[$pnt2$3 >> 1] = 0;
    $wk_max$3 = $wk_max$1;
   } while (0);
   $i$2 = $i$2 + 1 | 0;
   $pnt$1 = $pnt$1 + 2 | 0;
   $pnt2$3 = $pnt2$3 + 2 | 0;
   $wk_max$1 = $wk_max$3;
  }
  $j$0 = $j$0 + 1 | 0;
  $pnt$0 = $pnt$1 + $xsize + 4 | 0;
  $pnt2$2 = $pnt2$3 + 4 | 0;
  $wk_max$0 = $wk_max$1;
 }
 L77 : do if ((label | 0) == 50) {
  _arLog(3, 3256, $vararg_buffer);
  $retval$0 = -1;
 } else if ((label | 0) == 56) {
  $arrayidx319 = $labelInfo + 12 | 0;
  $i$3 = 1;
  $j$1 = 1;
  $wk$4 = $arraydecay;
  while (1) {
   if (($i$3 | 0) > ($wk_max$0 | 0)) break;
   $42 = HEAP32[$wk$4 >> 2] | 0;
   if (($42 | 0) == ($i$3 | 0)) {
    $cond = $j$1;
    $j$2 = $j$1 + 1 | 0;
   } else {
    $cond = HEAP32[$labelInfo + 1179664 + ($42 + -1 << 2) >> 2] | 0;
    $j$2 = $j$1;
   }
   HEAP32[$wk$4 >> 2] = $cond;
   $i$3 = $i$3 + 1 | 0;
   $j$1 = $j$2;
   $wk$4 = $wk$4 + 4 | 0;
  }
  $label_num317 = $labelInfo + 8 | 0;
  $sub340 = $j$1 + -1 | 0;
  HEAP32[$label_num317 >> 2] = $sub340;
  if (!$sub340) $retval$0 = 0; else {
   _memset($arrayidx319 | 0, 0, $sub340 << 2 | 0) | 0;
   _memset($labelInfo + 655376 | 0, 0, $sub340 << 4 | 0) | 0;
   $44 = $sub340;
   $i$4 = 0;
   while (1) {
    if (($i$4 | 0) >= ($44 | 0)) {
     $i$5 = 0;
     break;
    }
    $mul352 = $i$4 << 2;
    HEAP32[$labelInfo + 131084 + ($mul352 << 2) >> 2] = $div;
    HEAP32[$labelInfo + 131084 + (($mul352 | 1) << 2) >> 2] = 0;
    HEAP32[$labelInfo + 131084 + (($mul352 | 2) << 2) >> 2] = $div1;
    HEAP32[$labelInfo + 131084 + (($mul352 | 3) << 2) >> 2] = 0;
    $44 = HEAP32[$label_num317 >> 2] | 0;
    $i$4 = $i$4 + 1 | 0;
   }
   while (1) {
    if (($i$5 | 0) >= ($wk_max$0 | 0)) {
     $i$6 = 0;
     break;
    }
    $sub372 = (HEAP32[$labelInfo + 1179664 + ($i$5 << 2) >> 2] | 0) + -1 | 0;
    $mul373 = $i$5 * 7 | 0;
    $arrayidx376 = $labelInfo + 12 + ($sub372 << 2) | 0;
    HEAP32[$arrayidx376 >> 2] = (HEAP32[$arrayidx376 >> 2] | 0) + (HEAP32[$labelInfo + 1310736 + ($mul373 << 2) >> 2] | 0);
    $mul382 = $sub372 << 1;
    $arrayidx384 = $labelInfo + 655376 + ($mul382 << 3) | 0;
    HEAPF64[$arrayidx384 >> 3] = +HEAPF64[$arrayidx384 >> 3] + +(HEAP32[$labelInfo + 1310736 + ($mul373 + 1 << 2) >> 2] | 0);
    $arrayidx392 = $labelInfo + 655376 + (($mul382 | 1) << 3) | 0;
    HEAPF64[$arrayidx392 >> 3] = +HEAPF64[$arrayidx392 >> 3] + +(HEAP32[$labelInfo + 1310736 + ($mul373 + 2 << 2) >> 2] | 0);
    $mul394 = $sub372 << 2;
    $arrayidx396 = $labelInfo + 131084 + ($mul394 << 2) | 0;
    $53 = HEAP32[$labelInfo + 1310736 + ($mul373 + 3 << 2) >> 2] | 0;
    if ((HEAP32[$arrayidx396 >> 2] | 0) > ($53 | 0)) HEAP32[$arrayidx396 >> 2] = $53;
    $arrayidx412 = $labelInfo + 131084 + (($mul394 | 1) << 2) | 0;
    $55 = HEAP32[$labelInfo + 1310736 + ($mul373 + 4 << 2) >> 2] | 0;
    if ((HEAP32[$arrayidx412 >> 2] | 0) < ($55 | 0)) HEAP32[$arrayidx412 >> 2] = $55;
    $arrayidx428 = $labelInfo + 131084 + (($mul394 | 2) << 2) | 0;
    $57 = HEAP32[$labelInfo + 1310736 + ($mul373 + 5 << 2) >> 2] | 0;
    if ((HEAP32[$arrayidx428 >> 2] | 0) > ($57 | 0)) HEAP32[$arrayidx428 >> 2] = $57;
    $arrayidx444 = $labelInfo + 131084 + (($mul394 | 3) << 2) | 0;
    $59 = HEAP32[$labelInfo + 1310736 + ($mul373 + 6 << 2) >> 2] | 0;
    if ((HEAP32[$arrayidx444 >> 2] | 0) < ($59 | 0)) HEAP32[$arrayidx444 >> 2] = $59;
    $i$5 = $i$5 + 1 | 0;
   }
   while (1) {
    if (($i$6 | 0) >= (HEAP32[$label_num317 >> 2] | 0)) {
     $retval$0 = 0;
     break L77;
    }
    $arrayidx465 = $labelInfo + 12 + ($i$6 << 2) | 0;
    $mul467 = $i$6 << 1;
    $arrayidx469 = $labelInfo + 655376 + ($mul467 << 3) | 0;
    HEAPF64[$arrayidx469 >> 3] = +HEAPF64[$arrayidx469 >> 3] / +(HEAP32[$arrayidx465 >> 2] | 0);
    $arrayidx475 = $labelInfo + 655376 + (($mul467 | 1) << 3) | 0;
    HEAPF64[$arrayidx475 >> 3] = +HEAPF64[$arrayidx475 >> 3] / +(HEAP32[$arrayidx465 >> 2] | 0);
    $i$6 = $i$6 + 1 | 0;
   }
  }
 } while (0);
 STACKTOP = sp;
 return $retval$0 | 0;
}

function _arLabelingSubDBIC($image, $xsize, $ysize, $labelingThresh, $labelInfo) {
 $image = $image | 0;
 $xsize = $xsize | 0;
 $ysize = $ysize | 0;
 $labelingThresh = $labelingThresh | 0;
 $labelInfo = $labelInfo | 0;
 var $$sink = 0, $0 = 0, $10 = 0, $13 = 0, $14 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $23 = 0, $24 = 0, $3 = 0, $36 = 0, $37 = 0, $42 = 0, $44 = 0, $53 = 0, $55 = 0, $57 = 0, $59 = 0, $7 = 0, $8 = 0, $9 = 0, $add$ptr127 = 0, $add265 = 0, $add270$sink = 0, $arraydecay = 0, $arrayidx116 = 0, $arrayidx119 = 0, $arrayidx122 = 0, $arrayidx183 = 0, $arrayidx186 = 0, $arrayidx189 = 0, $arrayidx197 = 0, $arrayidx200 = 0, $arrayidx203 = 0, $arrayidx206 = 0, $arrayidx228 = 0, $arrayidx231 = 0, $arrayidx234 = 0, $arrayidx237 = 0, $arrayidx257 = 0, $arrayidx260 = 0, $arrayidx263 = 0, $arrayidx319 = 0, $arrayidx37 = 0, $arrayidx376 = 0, $arrayidx384 = 0, $arrayidx392 = 0, $arrayidx396 = 0, $arrayidx412 = 0, $arrayidx428 = 0, $arrayidx444 = 0, $arrayidx46 = 0, $arrayidx465 = 0, $arrayidx469 = 0, $arrayidx475 = 0, $arrayidx49 = 0, $arrayidx52 = 0, $arrayidx69 = 0, $cmp63 = 0, $cond = 0, $div = 0, $div1 = 0, $i$0 = 0, $i$1 = 0, $i$2 = 0, $i$3 = 0, $i$4 = 0, $i$5 = 0, $i$6 = 0, $inc274 = 0, $j$0 = 0, $j$1 = 0, $j$2 = 0, $k$0 = 0, $k$1 = 0, $k$2 = 0, $k$3 = 0, $label_num317 = 0, $mul195 = 0, $mul226 = 0, $mul284 = 0, $mul352 = 0, $mul373 = 0, $mul382 = 0, $mul394 = 0, $mul467 = 0, $pnt$0 = 0, $pnt$1 = 0, $pnt1$0 = 0, $pnt1$1 = 0, $pnt2$0 = 0, $pnt2$1 = 0, $pnt2$2 = 0, $pnt2$3 = 0, $retval$0 = 0, $sub = 0, $sub340 = 0, $sub36 = 0, $sub372 = 0, $sub68 = 0, $sub72 = 0, $sub8 = 0, $vararg_buffer = 0, $wk$0 = 0, $wk$1 = 0, $wk$2 = 0, $wk$3 = 0, $wk$4 = 0, $wk_max$0 = 0, $wk_max$1 = 0, $wk_max$2 = 0, $wk_max$3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $vararg_buffer = sp;
 $div = ($xsize | 0) / 2 | 0;
 $div1 = ($ysize | 0) / 2 | 0;
 $0 = HEAP32[$labelInfo >> 2] | 0;
 $sub = $div1 + -1 | 0;
 $i$0 = 0;
 $pnt1$0 = $0;
 $pnt2$0 = $0 + ((Math_imul($sub, $div) | 0) << 1) | 0;
 while (1) {
  if (($i$0 | 0) >= ($div | 0)) break;
  HEAP16[$pnt2$0 >> 1] = 0;
  HEAP16[$pnt1$0 >> 1] = 0;
  $i$0 = $i$0 + 1 | 0;
  $pnt1$0 = $pnt1$0 + 2 | 0;
  $pnt2$0 = $pnt2$0 + 2 | 0;
 }
 $sub8 = $div + -1 | 0;
 $i$1 = 0;
 $pnt1$1 = $0;
 $pnt2$1 = $0 + ($sub8 << 1) | 0;
 while (1) {
  if (($i$1 | 0) >= ($div1 | 0)) break;
  HEAP16[$pnt2$1 >> 1] = 0;
  HEAP16[$pnt1$1 >> 1] = 0;
  $i$1 = $i$1 + 1 | 0;
  $pnt1$1 = $pnt1$1 + ($div << 1) | 0;
  $pnt2$1 = $pnt2$1 + ($div << 1) | 0;
 }
 $arraydecay = $labelInfo + 1179664 | 0;
 $sub36 = 0 - $div | 0;
 $j$0 = 1;
 $pnt$0 = $image + (($xsize << 1) + 2) | 0;
 $pnt2$2 = $0 + ($div + 1 << 1) | 0;
 $wk_max$0 = 0;
 L9 : while (1) {
  if (($j$0 | 0) < ($sub | 0)) {
   $i$2 = 1;
   $pnt$1 = $pnt$0;
   $pnt2$3 = $pnt2$2;
   $wk_max$1 = $wk_max$0;
  } else {
   label = 56;
   break;
  }
  while (1) {
   if (($i$2 | 0) >= ($sub8 | 0)) break;
   do if ((HEAPU8[$pnt$1 >> 0] | 0 | 0) > ($labelingThresh | 0)) {
    HEAP16[$pnt2$3 >> 1] = 0;
    $wk_max$3 = $wk_max$1;
   } else {
    $arrayidx37 = $pnt2$3 + ($sub36 << 1) | 0;
    $2 = HEAP16[$arrayidx37 >> 1] | 0;
    if ($2 << 16 >> 16 > 0) {
     HEAP16[$pnt2$3 >> 1] = $2;
     $3 = ($2 << 16 >> 16) * 7 | 0;
     $arrayidx46 = $labelInfo + 1310736 + ($3 + -7 << 2) | 0;
     HEAP32[$arrayidx46 >> 2] = (HEAP32[$arrayidx46 >> 2] | 0) + 1;
     $arrayidx49 = $labelInfo + 1310736 + ($3 + -6 << 2) | 0;
     HEAP32[$arrayidx49 >> 2] = (HEAP32[$arrayidx49 >> 2] | 0) + $i$2;
     $arrayidx52 = $labelInfo + 1310736 + ($3 + -5 << 2) | 0;
     HEAP32[$arrayidx52 >> 2] = (HEAP32[$arrayidx52 >> 2] | 0) + $j$0;
     HEAP32[$labelInfo + 1310736 + ($3 + -1 << 2) >> 2] = $j$0;
     $wk_max$3 = $wk_max$1;
     break;
    }
    $7 = HEAP16[$arrayidx37 + 2 >> 1] | 0;
    $8 = HEAP16[$arrayidx37 + -2 >> 1] | 0;
    $cmp63 = $8 << 16 >> 16 > 0;
    $sub72 = ($8 << 16 >> 16) + -1 | 0;
    $add$ptr127 = $pnt2$3 + -2 | 0;
    if ($7 << 16 >> 16 <= 0) {
     if ($cmp63) {
      HEAP16[$pnt2$3 >> 1] = $8;
      $mul226 = $sub72 * 7 | 0;
      $arrayidx228 = $labelInfo + 1310736 + ($mul226 << 2) | 0;
      HEAP32[$arrayidx228 >> 2] = (HEAP32[$arrayidx228 >> 2] | 0) + 1;
      $arrayidx231 = $labelInfo + 1310736 + ($mul226 + 1 << 2) | 0;
      HEAP32[$arrayidx231 >> 2] = (HEAP32[$arrayidx231 >> 2] | 0) + $i$2;
      $arrayidx234 = $labelInfo + 1310736 + ($mul226 + 2 << 2) | 0;
      HEAP32[$arrayidx234 >> 2] = (HEAP32[$arrayidx234 >> 2] | 0) + $j$0;
      $arrayidx237 = $labelInfo + 1310736 + ($mul226 + 4 << 2) | 0;
      if ((HEAP32[$arrayidx237 >> 2] | 0) < ($i$2 | 0)) HEAP32[$arrayidx237 >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($mul226 + 6 << 2) >> 2] = $j$0;
      $wk_max$3 = $wk_max$1;
      break;
     }
     $36 = HEAP16[$add$ptr127 >> 1] | 0;
     if ($36 << 16 >> 16 > 0) {
      HEAP16[$pnt2$3 >> 1] = $36;
      $37 = ($36 << 16 >> 16) * 7 | 0;
      $arrayidx257 = $labelInfo + 1310736 + ($37 + -7 << 2) | 0;
      HEAP32[$arrayidx257 >> 2] = (HEAP32[$arrayidx257 >> 2] | 0) + 1;
      $arrayidx260 = $labelInfo + 1310736 + ($37 + -6 << 2) | 0;
      HEAP32[$arrayidx260 >> 2] = (HEAP32[$arrayidx260 >> 2] | 0) + $i$2;
      $arrayidx263 = $labelInfo + 1310736 + ($37 + -5 << 2) | 0;
      HEAP32[$arrayidx263 >> 2] = (HEAP32[$arrayidx263 >> 2] | 0) + $j$0;
      $add265 = $37 + -3 | 0;
      if ((HEAP32[$labelInfo + 1310736 + ($add265 << 2) >> 2] | 0) < ($i$2 | 0)) {
       $$sink = $i$2;
       $add270$sink = $add265;
       $wk_max$2 = $wk_max$1;
      } else {
       $wk_max$3 = $wk_max$1;
       break;
      }
     } else {
      $inc274 = $wk_max$1 + 1 | 0;
      if (($wk_max$1 | 0) > 32767) {
       label = 50;
       break L9;
      }
      HEAP16[$pnt2$3 >> 1] = $inc274;
      HEAP32[$labelInfo + 1179664 + ($wk_max$1 << 2) >> 2] = $inc274 << 16 >> 16;
      $mul284 = $wk_max$1 * 7 | 0;
      HEAP32[$labelInfo + 1310736 + ($mul284 << 2) >> 2] = 1;
      HEAP32[$labelInfo + 1310736 + ($mul284 + 1 << 2) >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($mul284 + 2 << 2) >> 2] = $j$0;
      HEAP32[$labelInfo + 1310736 + ($mul284 + 3 << 2) >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($mul284 + 4 << 2) >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($mul284 + 5 << 2) >> 2] = $j$0;
      $$sink = $j$0;
      $add270$sink = $mul284 + 6 | 0;
      $wk_max$2 = $inc274;
     }
     HEAP32[$labelInfo + 1310736 + ($add270$sink << 2) >> 2] = $$sink;
     $wk_max$3 = $wk_max$2;
     break;
    }
    $sub68 = ($7 << 16 >> 16) + -1 | 0;
    $arrayidx69 = $labelInfo + 1179664 + ($sub68 << 2) | 0;
    if ($cmp63) {
     $9 = HEAP32[$arrayidx69 >> 2] | 0;
     $10 = HEAP32[$labelInfo + 1179664 + ($sub72 << 2) >> 2] | 0;
     L36 : do if (($9 | 0) > ($10 | 0)) {
      HEAP16[$pnt2$3 >> 1] = $10;
      $k$0 = 0;
      $wk$0 = $arraydecay;
      while (1) {
       if (($k$0 | 0) >= ($wk_max$1 | 0)) {
        $13 = $10;
        break L36;
       }
       if ((HEAP32[$wk$0 >> 2] | 0) == ($9 | 0)) HEAP32[$wk$0 >> 2] = $10;
       $k$0 = $k$0 + 1 | 0;
       $wk$0 = $wk$0 + 4 | 0;
      }
     } else {
      HEAP16[$pnt2$3 >> 1] = $9;
      if (($9 | 0) < ($10 | 0)) {
       $k$1 = 0;
       $wk$1 = $arraydecay;
       while (1) {
        if (($k$1 | 0) >= ($wk_max$1 | 0)) {
         $13 = $9;
         break L36;
        }
        if ((HEAP32[$wk$1 >> 2] | 0) == ($10 | 0)) HEAP32[$wk$1 >> 2] = $9;
        $k$1 = $k$1 + 1 | 0;
        $wk$1 = $wk$1 + 4 | 0;
       }
      } else $13 = $9;
     } while (0);
     $14 = ($13 << 16 >> 16) * 7 | 0;
     $arrayidx116 = $labelInfo + 1310736 + ($14 + -7 << 2) | 0;
     HEAP32[$arrayidx116 >> 2] = (HEAP32[$arrayidx116 >> 2] | 0) + 1;
     $arrayidx119 = $labelInfo + 1310736 + ($14 + -6 << 2) | 0;
     HEAP32[$arrayidx119 >> 2] = (HEAP32[$arrayidx119 >> 2] | 0) + $i$2;
     $arrayidx122 = $labelInfo + 1310736 + ($14 + -5 << 2) | 0;
     HEAP32[$arrayidx122 >> 2] = (HEAP32[$arrayidx122 >> 2] | 0) + $j$0;
     HEAP32[$labelInfo + 1310736 + ($14 + -1 << 2) >> 2] = $j$0;
     $wk_max$3 = $wk_max$1;
     break;
    }
    $18 = HEAP16[$add$ptr127 >> 1] | 0;
    if ($18 << 16 >> 16 <= 0) {
     HEAP16[$pnt2$3 >> 1] = $7;
     $mul195 = $sub68 * 7 | 0;
     $arrayidx197 = $labelInfo + 1310736 + ($mul195 << 2) | 0;
     HEAP32[$arrayidx197 >> 2] = (HEAP32[$arrayidx197 >> 2] | 0) + 1;
     $arrayidx200 = $labelInfo + 1310736 + ($mul195 + 1 << 2) | 0;
     HEAP32[$arrayidx200 >> 2] = (HEAP32[$arrayidx200 >> 2] | 0) + $i$2;
     $arrayidx203 = $labelInfo + 1310736 + ($mul195 + 2 << 2) | 0;
     HEAP32[$arrayidx203 >> 2] = (HEAP32[$arrayidx203 >> 2] | 0) + $j$0;
     $arrayidx206 = $labelInfo + 1310736 + ($mul195 + 3 << 2) | 0;
     if ((HEAP32[$arrayidx206 >> 2] | 0) > ($i$2 | 0)) HEAP32[$arrayidx206 >> 2] = $i$2;
     HEAP32[$labelInfo + 1310736 + ($mul195 + 6 << 2) >> 2] = $j$0;
     $wk_max$3 = $wk_max$1;
     break;
    }
    $19 = HEAP32[$arrayidx69 >> 2] | 0;
    $20 = HEAP32[$labelInfo + 1179664 + (($18 << 16 >> 16) + -1 << 2) >> 2] | 0;
    L59 : do if (($19 | 0) > ($20 | 0)) {
     HEAP16[$pnt2$3 >> 1] = $20;
     $k$2 = 0;
     $wk$2 = $arraydecay;
     while (1) {
      if (($k$2 | 0) >= ($wk_max$1 | 0)) {
       $23 = $20;
       break L59;
      }
      if ((HEAP32[$wk$2 >> 2] | 0) == ($19 | 0)) HEAP32[$wk$2 >> 2] = $20;
      $k$2 = $k$2 + 1 | 0;
      $wk$2 = $wk$2 + 4 | 0;
     }
    } else {
     HEAP16[$pnt2$3 >> 1] = $19;
     if (($19 | 0) < ($20 | 0)) {
      $k$3 = 0;
      $wk$3 = $arraydecay;
      while (1) {
       if (($k$3 | 0) >= ($wk_max$1 | 0)) {
        $23 = $19;
        break L59;
       }
       if ((HEAP32[$wk$3 >> 2] | 0) == ($20 | 0)) HEAP32[$wk$3 >> 2] = $19;
       $k$3 = $k$3 + 1 | 0;
       $wk$3 = $wk$3 + 4 | 0;
      }
     } else $23 = $19;
    } while (0);
    $24 = ($23 << 16 >> 16) * 7 | 0;
    $arrayidx183 = $labelInfo + 1310736 + ($24 + -7 << 2) | 0;
    HEAP32[$arrayidx183 >> 2] = (HEAP32[$arrayidx183 >> 2] | 0) + 1;
    $arrayidx186 = $labelInfo + 1310736 + ($24 + -6 << 2) | 0;
    HEAP32[$arrayidx186 >> 2] = (HEAP32[$arrayidx186 >> 2] | 0) + $i$2;
    $arrayidx189 = $labelInfo + 1310736 + ($24 + -5 << 2) | 0;
    HEAP32[$arrayidx189 >> 2] = (HEAP32[$arrayidx189 >> 2] | 0) + $j$0;
    $wk_max$3 = $wk_max$1;
   } while (0);
   $i$2 = $i$2 + 1 | 0;
   $pnt$1 = $pnt$1 + 2 | 0;
   $pnt2$3 = $pnt2$3 + 2 | 0;
   $wk_max$1 = $wk_max$3;
  }
  $j$0 = $j$0 + 1 | 0;
  $pnt$0 = $pnt$1 + $xsize + 4 | 0;
  $pnt2$2 = $pnt2$3 + 4 | 0;
  $wk_max$0 = $wk_max$1;
 }
 L77 : do if ((label | 0) == 50) {
  _arLog(3, 3256, $vararg_buffer);
  $retval$0 = -1;
 } else if ((label | 0) == 56) {
  $arrayidx319 = $labelInfo + 12 | 0;
  $i$3 = 1;
  $j$1 = 1;
  $wk$4 = $arraydecay;
  while (1) {
   if (($i$3 | 0) > ($wk_max$0 | 0)) break;
   $42 = HEAP32[$wk$4 >> 2] | 0;
   if (($42 | 0) == ($i$3 | 0)) {
    $cond = $j$1;
    $j$2 = $j$1 + 1 | 0;
   } else {
    $cond = HEAP32[$labelInfo + 1179664 + ($42 + -1 << 2) >> 2] | 0;
    $j$2 = $j$1;
   }
   HEAP32[$wk$4 >> 2] = $cond;
   $i$3 = $i$3 + 1 | 0;
   $j$1 = $j$2;
   $wk$4 = $wk$4 + 4 | 0;
  }
  $label_num317 = $labelInfo + 8 | 0;
  $sub340 = $j$1 + -1 | 0;
  HEAP32[$label_num317 >> 2] = $sub340;
  if (!$sub340) $retval$0 = 0; else {
   _memset($arrayidx319 | 0, 0, $sub340 << 2 | 0) | 0;
   _memset($labelInfo + 655376 | 0, 0, $sub340 << 4 | 0) | 0;
   $44 = $sub340;
   $i$4 = 0;
   while (1) {
    if (($i$4 | 0) >= ($44 | 0)) {
     $i$5 = 0;
     break;
    }
    $mul352 = $i$4 << 2;
    HEAP32[$labelInfo + 131084 + ($mul352 << 2) >> 2] = $div;
    HEAP32[$labelInfo + 131084 + (($mul352 | 1) << 2) >> 2] = 0;
    HEAP32[$labelInfo + 131084 + (($mul352 | 2) << 2) >> 2] = $div1;
    HEAP32[$labelInfo + 131084 + (($mul352 | 3) << 2) >> 2] = 0;
    $44 = HEAP32[$label_num317 >> 2] | 0;
    $i$4 = $i$4 + 1 | 0;
   }
   while (1) {
    if (($i$5 | 0) >= ($wk_max$0 | 0)) {
     $i$6 = 0;
     break;
    }
    $sub372 = (HEAP32[$labelInfo + 1179664 + ($i$5 << 2) >> 2] | 0) + -1 | 0;
    $mul373 = $i$5 * 7 | 0;
    $arrayidx376 = $labelInfo + 12 + ($sub372 << 2) | 0;
    HEAP32[$arrayidx376 >> 2] = (HEAP32[$arrayidx376 >> 2] | 0) + (HEAP32[$labelInfo + 1310736 + ($mul373 << 2) >> 2] | 0);
    $mul382 = $sub372 << 1;
    $arrayidx384 = $labelInfo + 655376 + ($mul382 << 3) | 0;
    HEAPF64[$arrayidx384 >> 3] = +HEAPF64[$arrayidx384 >> 3] + +(HEAP32[$labelInfo + 1310736 + ($mul373 + 1 << 2) >> 2] | 0);
    $arrayidx392 = $labelInfo + 655376 + (($mul382 | 1) << 3) | 0;
    HEAPF64[$arrayidx392 >> 3] = +HEAPF64[$arrayidx392 >> 3] + +(HEAP32[$labelInfo + 1310736 + ($mul373 + 2 << 2) >> 2] | 0);
    $mul394 = $sub372 << 2;
    $arrayidx396 = $labelInfo + 131084 + ($mul394 << 2) | 0;
    $53 = HEAP32[$labelInfo + 1310736 + ($mul373 + 3 << 2) >> 2] | 0;
    if ((HEAP32[$arrayidx396 >> 2] | 0) > ($53 | 0)) HEAP32[$arrayidx396 >> 2] = $53;
    $arrayidx412 = $labelInfo + 131084 + (($mul394 | 1) << 2) | 0;
    $55 = HEAP32[$labelInfo + 1310736 + ($mul373 + 4 << 2) >> 2] | 0;
    if ((HEAP32[$arrayidx412 >> 2] | 0) < ($55 | 0)) HEAP32[$arrayidx412 >> 2] = $55;
    $arrayidx428 = $labelInfo + 131084 + (($mul394 | 2) << 2) | 0;
    $57 = HEAP32[$labelInfo + 1310736 + ($mul373 + 5 << 2) >> 2] | 0;
    if ((HEAP32[$arrayidx428 >> 2] | 0) > ($57 | 0)) HEAP32[$arrayidx428 >> 2] = $57;
    $arrayidx444 = $labelInfo + 131084 + (($mul394 | 3) << 2) | 0;
    $59 = HEAP32[$labelInfo + 1310736 + ($mul373 + 6 << 2) >> 2] | 0;
    if ((HEAP32[$arrayidx444 >> 2] | 0) < ($59 | 0)) HEAP32[$arrayidx444 >> 2] = $59;
    $i$5 = $i$5 + 1 | 0;
   }
   while (1) {
    if (($i$6 | 0) >= (HEAP32[$label_num317 >> 2] | 0)) {
     $retval$0 = 0;
     break L77;
    }
    $arrayidx465 = $labelInfo + 12 + ($i$6 << 2) | 0;
    $mul467 = $i$6 << 1;
    $arrayidx469 = $labelInfo + 655376 + ($mul467 << 3) | 0;
    HEAPF64[$arrayidx469 >> 3] = +HEAPF64[$arrayidx469 >> 3] / +(HEAP32[$arrayidx465 >> 2] | 0);
    $arrayidx475 = $labelInfo + 655376 + (($mul467 | 1) << 3) | 0;
    HEAPF64[$arrayidx475 >> 3] = +HEAPF64[$arrayidx475 >> 3] / +(HEAP32[$arrayidx465 >> 2] | 0);
    $i$6 = $i$6 + 1 | 0;
   }
  }
 } while (0);
 STACKTOP = sp;
 return $retval$0 | 0;
}

function _arLabelingSubDWRCY($image, $xsize, $ysize, $labelingThresh, $labelInfo) {
 $image = $image | 0;
 $xsize = $xsize | 0;
 $ysize = $ysize | 0;
 $labelingThresh = $labelingThresh | 0;
 $labelInfo = $labelInfo | 0;
 var $$sink = 0, $0 = 0, $10 = 0, $13 = 0, $14 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $23 = 0, $24 = 0, $3 = 0, $36 = 0, $37 = 0, $42 = 0, $44 = 0, $53 = 0, $55 = 0, $57 = 0, $59 = 0, $7 = 0, $8 = 0, $9 = 0, $add = 0, $add$ptr126 = 0, $add264 = 0, $add269$sink = 0, $arraydecay = 0, $arrayidx115 = 0, $arrayidx118 = 0, $arrayidx121 = 0, $arrayidx182 = 0, $arrayidx185 = 0, $arrayidx188 = 0, $arrayidx196 = 0, $arrayidx199 = 0, $arrayidx202 = 0, $arrayidx205 = 0, $arrayidx227 = 0, $arrayidx230 = 0, $arrayidx233 = 0, $arrayidx236 = 0, $arrayidx256 = 0, $arrayidx259 = 0, $arrayidx262 = 0, $arrayidx316 = 0, $arrayidx36 = 0, $arrayidx373 = 0, $arrayidx381 = 0, $arrayidx389 = 0, $arrayidx393 = 0, $arrayidx409 = 0, $arrayidx425 = 0, $arrayidx441 = 0, $arrayidx45 = 0, $arrayidx462 = 0, $arrayidx466 = 0, $arrayidx471 = 0, $arrayidx48 = 0, $arrayidx51 = 0, $arrayidx68 = 0, $cmp62 = 0, $cond = 0, $i$0 = 0, $i$1 = 0, $i$2 = 0, $i$3 = 0, $i$4 = 0, $i$5 = 0, $i$6 = 0, $inc273 = 0, $j$0 = 0, $j$1 = 0, $j$2 = 0, $k$0 = 0, $k$1 = 0, $k$2 = 0, $k$3 = 0, $label_num314 = 0, $mul194 = 0, $mul225 = 0, $mul283 = 0, $mul349 = 0, $mul370 = 0, $mul379 = 0, $mul391 = 0, $mul464 = 0, $pnt$0 = 0, $pnt$1 = 0, $pnt1$0 = 0, $pnt1$1 = 0, $pnt2$0 = 0, $pnt2$1 = 0, $pnt2$2 = 0, $pnt2$3 = 0, $retval$0 = 0, $sub = 0, $sub337 = 0, $sub35 = 0, $sub369 = 0, $sub67 = 0, $sub7 = 0, $sub71 = 0, $vararg_buffer = 0, $wk$0 = 0, $wk$1 = 0, $wk$2 = 0, $wk$3 = 0, $wk$4 = 0, $wk_max$0 = 0, $wk_max$1 = 0, $wk_max$2 = 0, $wk_max$3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $vararg_buffer = sp;
 $0 = HEAP32[$labelInfo >> 2] | 0;
 $sub = $ysize + -1 | 0;
 $i$0 = 0;
 $pnt1$0 = $0;
 $pnt2$0 = $0 + ((Math_imul($sub, $xsize) | 0) << 1) | 0;
 while (1) {
  if (($i$0 | 0) >= ($xsize | 0)) break;
  HEAP16[$pnt2$0 >> 1] = 0;
  HEAP16[$pnt1$0 >> 1] = 0;
  $i$0 = $i$0 + 1 | 0;
  $pnt1$0 = $pnt1$0 + 2 | 0;
  $pnt2$0 = $pnt2$0 + 2 | 0;
 }
 $sub7 = $xsize + -1 | 0;
 $i$1 = 0;
 $pnt1$1 = $0;
 $pnt2$1 = $0 + ($sub7 << 1) | 0;
 while (1) {
  if (($i$1 | 0) >= ($ysize | 0)) break;
  HEAP16[$pnt2$1 >> 1] = 0;
  HEAP16[$pnt1$1 >> 1] = 0;
  $i$1 = $i$1 + 1 | 0;
  $pnt1$1 = $pnt1$1 + ($xsize << 1) | 0;
  $pnt2$1 = $pnt2$1 + ($xsize << 1) | 0;
 }
 $arraydecay = $labelInfo + 1179664 | 0;
 $add = $xsize + 1 | 0;
 $sub35 = 0 - $xsize | 0;
 $j$0 = 1;
 $pnt$0 = $image + ($add << 1) | 0;
 $pnt2$2 = $0 + ($add << 1) | 0;
 $wk_max$0 = 0;
 L9 : while (1) {
  if (($j$0 | 0) < ($sub | 0)) {
   $i$2 = 1;
   $pnt$1 = $pnt$0;
   $pnt2$3 = $pnt2$2;
   $wk_max$1 = $wk_max$0;
  } else {
   label = 56;
   break;
  }
  while (1) {
   if (($i$2 | 0) >= ($sub7 | 0)) break;
   do if ((HEAPU8[$pnt$1 + 1 >> 0] | 0 | 0) > ($labelingThresh | 0)) {
    $arrayidx36 = $pnt2$3 + ($sub35 << 1) | 0;
    $2 = HEAP16[$arrayidx36 >> 1] | 0;
    if ($2 << 16 >> 16 > 0) {
     HEAP16[$pnt2$3 >> 1] = $2;
     $3 = ($2 << 16 >> 16) * 7 | 0;
     $arrayidx45 = $labelInfo + 1310736 + ($3 + -7 << 2) | 0;
     HEAP32[$arrayidx45 >> 2] = (HEAP32[$arrayidx45 >> 2] | 0) + 1;
     $arrayidx48 = $labelInfo + 1310736 + ($3 + -6 << 2) | 0;
     HEAP32[$arrayidx48 >> 2] = (HEAP32[$arrayidx48 >> 2] | 0) + $i$2;
     $arrayidx51 = $labelInfo + 1310736 + ($3 + -5 << 2) | 0;
     HEAP32[$arrayidx51 >> 2] = (HEAP32[$arrayidx51 >> 2] | 0) + $j$0;
     HEAP32[$labelInfo + 1310736 + ($3 + -1 << 2) >> 2] = $j$0;
     $wk_max$3 = $wk_max$1;
     break;
    }
    $7 = HEAP16[$arrayidx36 + 2 >> 1] | 0;
    $8 = HEAP16[$arrayidx36 + -2 >> 1] | 0;
    $cmp62 = $8 << 16 >> 16 > 0;
    $add$ptr126 = $pnt2$3 + -2 | 0;
    $sub71 = ($8 << 16 >> 16) + -1 | 0;
    if ($7 << 16 >> 16 <= 0) {
     if ($cmp62) {
      HEAP16[$pnt2$3 >> 1] = $8;
      $mul225 = $sub71 * 7 | 0;
      $arrayidx227 = $labelInfo + 1310736 + ($mul225 << 2) | 0;
      HEAP32[$arrayidx227 >> 2] = (HEAP32[$arrayidx227 >> 2] | 0) + 1;
      $arrayidx230 = $labelInfo + 1310736 + ($mul225 + 1 << 2) | 0;
      HEAP32[$arrayidx230 >> 2] = (HEAP32[$arrayidx230 >> 2] | 0) + $i$2;
      $arrayidx233 = $labelInfo + 1310736 + ($mul225 + 2 << 2) | 0;
      HEAP32[$arrayidx233 >> 2] = (HEAP32[$arrayidx233 >> 2] | 0) + $j$0;
      $arrayidx236 = $labelInfo + 1310736 + ($mul225 + 4 << 2) | 0;
      if ((HEAP32[$arrayidx236 >> 2] | 0) < ($i$2 | 0)) HEAP32[$arrayidx236 >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($mul225 + 6 << 2) >> 2] = $j$0;
      $wk_max$3 = $wk_max$1;
      break;
     }
     $36 = HEAP16[$add$ptr126 >> 1] | 0;
     if ($36 << 16 >> 16 > 0) {
      HEAP16[$pnt2$3 >> 1] = $36;
      $37 = ($36 << 16 >> 16) * 7 | 0;
      $arrayidx256 = $labelInfo + 1310736 + ($37 + -7 << 2) | 0;
      HEAP32[$arrayidx256 >> 2] = (HEAP32[$arrayidx256 >> 2] | 0) + 1;
      $arrayidx259 = $labelInfo + 1310736 + ($37 + -6 << 2) | 0;
      HEAP32[$arrayidx259 >> 2] = (HEAP32[$arrayidx259 >> 2] | 0) + $i$2;
      $arrayidx262 = $labelInfo + 1310736 + ($37 + -5 << 2) | 0;
      HEAP32[$arrayidx262 >> 2] = (HEAP32[$arrayidx262 >> 2] | 0) + $j$0;
      $add264 = $37 + -3 | 0;
      if ((HEAP32[$labelInfo + 1310736 + ($add264 << 2) >> 2] | 0) < ($i$2 | 0)) {
       $$sink = $i$2;
       $add269$sink = $add264;
       $wk_max$2 = $wk_max$1;
      } else {
       $wk_max$3 = $wk_max$1;
       break;
      }
     } else {
      $inc273 = $wk_max$1 + 1 | 0;
      if (($wk_max$1 | 0) > 32767) {
       label = 50;
       break L9;
      }
      HEAP16[$pnt2$3 >> 1] = $inc273;
      HEAP32[$labelInfo + 1179664 + ($wk_max$1 << 2) >> 2] = $inc273 << 16 >> 16;
      $mul283 = $wk_max$1 * 7 | 0;
      HEAP32[$labelInfo + 1310736 + ($mul283 << 2) >> 2] = 1;
      HEAP32[$labelInfo + 1310736 + ($mul283 + 1 << 2) >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($mul283 + 2 << 2) >> 2] = $j$0;
      HEAP32[$labelInfo + 1310736 + ($mul283 + 3 << 2) >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($mul283 + 4 << 2) >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($mul283 + 5 << 2) >> 2] = $j$0;
      $$sink = $j$0;
      $add269$sink = $mul283 + 6 | 0;
      $wk_max$2 = $inc273;
     }
     HEAP32[$labelInfo + 1310736 + ($add269$sink << 2) >> 2] = $$sink;
     $wk_max$3 = $wk_max$2;
     break;
    }
    $sub67 = ($7 << 16 >> 16) + -1 | 0;
    $arrayidx68 = $labelInfo + 1179664 + ($sub67 << 2) | 0;
    if ($cmp62) {
     $9 = HEAP32[$arrayidx68 >> 2] | 0;
     $10 = HEAP32[$labelInfo + 1179664 + ($sub71 << 2) >> 2] | 0;
     L35 : do if (($9 | 0) > ($10 | 0)) {
      HEAP16[$pnt2$3 >> 1] = $10;
      $k$0 = 0;
      $wk$0 = $arraydecay;
      while (1) {
       if (($k$0 | 0) >= ($wk_max$1 | 0)) {
        $13 = $10;
        break L35;
       }
       if ((HEAP32[$wk$0 >> 2] | 0) == ($9 | 0)) HEAP32[$wk$0 >> 2] = $10;
       $k$0 = $k$0 + 1 | 0;
       $wk$0 = $wk$0 + 4 | 0;
      }
     } else {
      HEAP16[$pnt2$3 >> 1] = $9;
      if (($9 | 0) < ($10 | 0)) {
       $k$1 = 0;
       $wk$1 = $arraydecay;
       while (1) {
        if (($k$1 | 0) >= ($wk_max$1 | 0)) {
         $13 = $9;
         break L35;
        }
        if ((HEAP32[$wk$1 >> 2] | 0) == ($10 | 0)) HEAP32[$wk$1 >> 2] = $9;
        $k$1 = $k$1 + 1 | 0;
        $wk$1 = $wk$1 + 4 | 0;
       }
      } else $13 = $9;
     } while (0);
     $14 = ($13 << 16 >> 16) * 7 | 0;
     $arrayidx115 = $labelInfo + 1310736 + ($14 + -7 << 2) | 0;
     HEAP32[$arrayidx115 >> 2] = (HEAP32[$arrayidx115 >> 2] | 0) + 1;
     $arrayidx118 = $labelInfo + 1310736 + ($14 + -6 << 2) | 0;
     HEAP32[$arrayidx118 >> 2] = (HEAP32[$arrayidx118 >> 2] | 0) + $i$2;
     $arrayidx121 = $labelInfo + 1310736 + ($14 + -5 << 2) | 0;
     HEAP32[$arrayidx121 >> 2] = (HEAP32[$arrayidx121 >> 2] | 0) + $j$0;
     HEAP32[$labelInfo + 1310736 + ($14 + -1 << 2) >> 2] = $j$0;
     $wk_max$3 = $wk_max$1;
     break;
    }
    $18 = HEAP16[$add$ptr126 >> 1] | 0;
    if ($18 << 16 >> 16 <= 0) {
     HEAP16[$pnt2$3 >> 1] = $7;
     $mul194 = $sub67 * 7 | 0;
     $arrayidx196 = $labelInfo + 1310736 + ($mul194 << 2) | 0;
     HEAP32[$arrayidx196 >> 2] = (HEAP32[$arrayidx196 >> 2] | 0) + 1;
     $arrayidx199 = $labelInfo + 1310736 + ($mul194 + 1 << 2) | 0;
     HEAP32[$arrayidx199 >> 2] = (HEAP32[$arrayidx199 >> 2] | 0) + $i$2;
     $arrayidx202 = $labelInfo + 1310736 + ($mul194 + 2 << 2) | 0;
     HEAP32[$arrayidx202 >> 2] = (HEAP32[$arrayidx202 >> 2] | 0) + $j$0;
     $arrayidx205 = $labelInfo + 1310736 + ($mul194 + 3 << 2) | 0;
     if ((HEAP32[$arrayidx205 >> 2] | 0) > ($i$2 | 0)) HEAP32[$arrayidx205 >> 2] = $i$2;
     HEAP32[$labelInfo + 1310736 + ($mul194 + 6 << 2) >> 2] = $j$0;
     $wk_max$3 = $wk_max$1;
     break;
    }
    $19 = HEAP32[$arrayidx68 >> 2] | 0;
    $20 = HEAP32[$labelInfo + 1179664 + (($18 << 16 >> 16) + -1 << 2) >> 2] | 0;
    L58 : do if (($19 | 0) > ($20 | 0)) {
     HEAP16[$pnt2$3 >> 1] = $20;
     $k$2 = 0;
     $wk$2 = $arraydecay;
     while (1) {
      if (($k$2 | 0) >= ($wk_max$1 | 0)) {
       $23 = $20;
       break L58;
      }
      if ((HEAP32[$wk$2 >> 2] | 0) == ($19 | 0)) HEAP32[$wk$2 >> 2] = $20;
      $k$2 = $k$2 + 1 | 0;
      $wk$2 = $wk$2 + 4 | 0;
     }
    } else {
     HEAP16[$pnt2$3 >> 1] = $19;
     if (($19 | 0) < ($20 | 0)) {
      $k$3 = 0;
      $wk$3 = $arraydecay;
      while (1) {
       if (($k$3 | 0) >= ($wk_max$1 | 0)) {
        $23 = $19;
        break L58;
       }
       if ((HEAP32[$wk$3 >> 2] | 0) == ($20 | 0)) HEAP32[$wk$3 >> 2] = $19;
       $k$3 = $k$3 + 1 | 0;
       $wk$3 = $wk$3 + 4 | 0;
      }
     } else $23 = $19;
    } while (0);
    $24 = ($23 << 16 >> 16) * 7 | 0;
    $arrayidx182 = $labelInfo + 1310736 + ($24 + -7 << 2) | 0;
    HEAP32[$arrayidx182 >> 2] = (HEAP32[$arrayidx182 >> 2] | 0) + 1;
    $arrayidx185 = $labelInfo + 1310736 + ($24 + -6 << 2) | 0;
    HEAP32[$arrayidx185 >> 2] = (HEAP32[$arrayidx185 >> 2] | 0) + $i$2;
    $arrayidx188 = $labelInfo + 1310736 + ($24 + -5 << 2) | 0;
    HEAP32[$arrayidx188 >> 2] = (HEAP32[$arrayidx188 >> 2] | 0) + $j$0;
    $wk_max$3 = $wk_max$1;
   } else {
    HEAP16[$pnt2$3 >> 1] = 0;
    $wk_max$3 = $wk_max$1;
   } while (0);
   $i$2 = $i$2 + 1 | 0;
   $pnt$1 = $pnt$1 + 2 | 0;
   $pnt2$3 = $pnt2$3 + 2 | 0;
   $wk_max$1 = $wk_max$3;
  }
  $j$0 = $j$0 + 1 | 0;
  $pnt$0 = $pnt$1 + 4 | 0;
  $pnt2$2 = $pnt2$3 + 4 | 0;
  $wk_max$0 = $wk_max$1;
 }
 L77 : do if ((label | 0) == 50) {
  _arLog(3, 3256, $vararg_buffer);
  $retval$0 = -1;
 } else if ((label | 0) == 56) {
  $arrayidx316 = $labelInfo + 12 | 0;
  $i$3 = 1;
  $j$1 = 1;
  $wk$4 = $arraydecay;
  while (1) {
   if (($i$3 | 0) > ($wk_max$0 | 0)) break;
   $42 = HEAP32[$wk$4 >> 2] | 0;
   if (($42 | 0) == ($i$3 | 0)) {
    $cond = $j$1;
    $j$2 = $j$1 + 1 | 0;
   } else {
    $cond = HEAP32[$labelInfo + 1179664 + ($42 + -1 << 2) >> 2] | 0;
    $j$2 = $j$1;
   }
   HEAP32[$wk$4 >> 2] = $cond;
   $i$3 = $i$3 + 1 | 0;
   $j$1 = $j$2;
   $wk$4 = $wk$4 + 4 | 0;
  }
  $label_num314 = $labelInfo + 8 | 0;
  $sub337 = $j$1 + -1 | 0;
  HEAP32[$label_num314 >> 2] = $sub337;
  if (!$sub337) $retval$0 = 0; else {
   _memset($arrayidx316 | 0, 0, $sub337 << 2 | 0) | 0;
   _memset($labelInfo + 655376 | 0, 0, $sub337 << 4 | 0) | 0;
   $44 = $sub337;
   $i$4 = 0;
   while (1) {
    if (($i$4 | 0) >= ($44 | 0)) {
     $i$5 = 0;
     break;
    }
    $mul349 = $i$4 << 2;
    HEAP32[$labelInfo + 131084 + ($mul349 << 2) >> 2] = $xsize;
    HEAP32[$labelInfo + 131084 + (($mul349 | 1) << 2) >> 2] = 0;
    HEAP32[$labelInfo + 131084 + (($mul349 | 2) << 2) >> 2] = $ysize;
    HEAP32[$labelInfo + 131084 + (($mul349 | 3) << 2) >> 2] = 0;
    $44 = HEAP32[$label_num314 >> 2] | 0;
    $i$4 = $i$4 + 1 | 0;
   }
   while (1) {
    if (($i$5 | 0) >= ($wk_max$0 | 0)) {
     $i$6 = 0;
     break;
    }
    $sub369 = (HEAP32[$labelInfo + 1179664 + ($i$5 << 2) >> 2] | 0) + -1 | 0;
    $mul370 = $i$5 * 7 | 0;
    $arrayidx373 = $labelInfo + 12 + ($sub369 << 2) | 0;
    HEAP32[$arrayidx373 >> 2] = (HEAP32[$arrayidx373 >> 2] | 0) + (HEAP32[$labelInfo + 1310736 + ($mul370 << 2) >> 2] | 0);
    $mul379 = $sub369 << 1;
    $arrayidx381 = $labelInfo + 655376 + ($mul379 << 3) | 0;
    HEAPF64[$arrayidx381 >> 3] = +HEAPF64[$arrayidx381 >> 3] + +(HEAP32[$labelInfo + 1310736 + ($mul370 + 1 << 2) >> 2] | 0);
    $arrayidx389 = $labelInfo + 655376 + (($mul379 | 1) << 3) | 0;
    HEAPF64[$arrayidx389 >> 3] = +HEAPF64[$arrayidx389 >> 3] + +(HEAP32[$labelInfo + 1310736 + ($mul370 + 2 << 2) >> 2] | 0);
    $mul391 = $sub369 << 2;
    $arrayidx393 = $labelInfo + 131084 + ($mul391 << 2) | 0;
    $53 = HEAP32[$labelInfo + 1310736 + ($mul370 + 3 << 2) >> 2] | 0;
    if ((HEAP32[$arrayidx393 >> 2] | 0) > ($53 | 0)) HEAP32[$arrayidx393 >> 2] = $53;
    $arrayidx409 = $labelInfo + 131084 + (($mul391 | 1) << 2) | 0;
    $55 = HEAP32[$labelInfo + 1310736 + ($mul370 + 4 << 2) >> 2] | 0;
    if ((HEAP32[$arrayidx409 >> 2] | 0) < ($55 | 0)) HEAP32[$arrayidx409 >> 2] = $55;
    $arrayidx425 = $labelInfo + 131084 + (($mul391 | 2) << 2) | 0;
    $57 = HEAP32[$labelInfo + 1310736 + ($mul370 + 5 << 2) >> 2] | 0;
    if ((HEAP32[$arrayidx425 >> 2] | 0) > ($57 | 0)) HEAP32[$arrayidx425 >> 2] = $57;
    $arrayidx441 = $labelInfo + 131084 + (($mul391 | 3) << 2) | 0;
    $59 = HEAP32[$labelInfo + 1310736 + ($mul370 + 6 << 2) >> 2] | 0;
    if ((HEAP32[$arrayidx441 >> 2] | 0) < ($59 | 0)) HEAP32[$arrayidx441 >> 2] = $59;
    $i$5 = $i$5 + 1 | 0;
   }
   while (1) {
    if (($i$6 | 0) >= (HEAP32[$label_num314 >> 2] | 0)) {
     $retval$0 = 0;
     break L77;
    }
    $arrayidx462 = $labelInfo + 12 + ($i$6 << 2) | 0;
    $mul464 = $i$6 << 1;
    $arrayidx466 = $labelInfo + 655376 + ($mul464 << 3) | 0;
    HEAPF64[$arrayidx466 >> 3] = +HEAPF64[$arrayidx466 >> 3] / +(HEAP32[$arrayidx462 >> 2] | 0);
    $arrayidx471 = $labelInfo + 655376 + (($mul464 | 1) << 3) | 0;
    HEAPF64[$arrayidx471 >> 3] = +HEAPF64[$arrayidx471 >> 3] / +(HEAP32[$arrayidx462 >> 2] | 0);
    $i$6 = $i$6 + 1 | 0;
   }
  }
 } while (0);
 STACKTOP = sp;
 return $retval$0 | 0;
}

function _arLabelingSubDBRCY($image, $xsize, $ysize, $labelingThresh, $labelInfo) {
 $image = $image | 0;
 $xsize = $xsize | 0;
 $ysize = $ysize | 0;
 $labelingThresh = $labelingThresh | 0;
 $labelInfo = $labelInfo | 0;
 var $$sink = 0, $0 = 0, $10 = 0, $13 = 0, $14 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $23 = 0, $24 = 0, $3 = 0, $36 = 0, $37 = 0, $42 = 0, $44 = 0, $53 = 0, $55 = 0, $57 = 0, $59 = 0, $7 = 0, $8 = 0, $9 = 0, $add = 0, $add$ptr126 = 0, $add264 = 0, $add269$sink = 0, $arraydecay = 0, $arrayidx115 = 0, $arrayidx118 = 0, $arrayidx121 = 0, $arrayidx182 = 0, $arrayidx185 = 0, $arrayidx188 = 0, $arrayidx196 = 0, $arrayidx199 = 0, $arrayidx202 = 0, $arrayidx205 = 0, $arrayidx227 = 0, $arrayidx230 = 0, $arrayidx233 = 0, $arrayidx236 = 0, $arrayidx256 = 0, $arrayidx259 = 0, $arrayidx262 = 0, $arrayidx316 = 0, $arrayidx36 = 0, $arrayidx373 = 0, $arrayidx381 = 0, $arrayidx389 = 0, $arrayidx393 = 0, $arrayidx409 = 0, $arrayidx425 = 0, $arrayidx441 = 0, $arrayidx45 = 0, $arrayidx462 = 0, $arrayidx466 = 0, $arrayidx471 = 0, $arrayidx48 = 0, $arrayidx51 = 0, $arrayidx68 = 0, $cmp62 = 0, $cond = 0, $i$0 = 0, $i$1 = 0, $i$2 = 0, $i$3 = 0, $i$4 = 0, $i$5 = 0, $i$6 = 0, $inc273 = 0, $j$0 = 0, $j$1 = 0, $j$2 = 0, $k$0 = 0, $k$1 = 0, $k$2 = 0, $k$3 = 0, $label_num314 = 0, $mul194 = 0, $mul225 = 0, $mul283 = 0, $mul349 = 0, $mul370 = 0, $mul379 = 0, $mul391 = 0, $mul464 = 0, $pnt$0 = 0, $pnt$1 = 0, $pnt1$0 = 0, $pnt1$1 = 0, $pnt2$0 = 0, $pnt2$1 = 0, $pnt2$2 = 0, $pnt2$3 = 0, $retval$0 = 0, $sub = 0, $sub337 = 0, $sub35 = 0, $sub369 = 0, $sub67 = 0, $sub7 = 0, $sub71 = 0, $vararg_buffer = 0, $wk$0 = 0, $wk$1 = 0, $wk$2 = 0, $wk$3 = 0, $wk$4 = 0, $wk_max$0 = 0, $wk_max$1 = 0, $wk_max$2 = 0, $wk_max$3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $vararg_buffer = sp;
 $0 = HEAP32[$labelInfo >> 2] | 0;
 $sub = $ysize + -1 | 0;
 $i$0 = 0;
 $pnt1$0 = $0;
 $pnt2$0 = $0 + ((Math_imul($sub, $xsize) | 0) << 1) | 0;
 while (1) {
  if (($i$0 | 0) >= ($xsize | 0)) break;
  HEAP16[$pnt2$0 >> 1] = 0;
  HEAP16[$pnt1$0 >> 1] = 0;
  $i$0 = $i$0 + 1 | 0;
  $pnt1$0 = $pnt1$0 + 2 | 0;
  $pnt2$0 = $pnt2$0 + 2 | 0;
 }
 $sub7 = $xsize + -1 | 0;
 $i$1 = 0;
 $pnt1$1 = $0;
 $pnt2$1 = $0 + ($sub7 << 1) | 0;
 while (1) {
  if (($i$1 | 0) >= ($ysize | 0)) break;
  HEAP16[$pnt2$1 >> 1] = 0;
  HEAP16[$pnt1$1 >> 1] = 0;
  $i$1 = $i$1 + 1 | 0;
  $pnt1$1 = $pnt1$1 + ($xsize << 1) | 0;
  $pnt2$1 = $pnt2$1 + ($xsize << 1) | 0;
 }
 $arraydecay = $labelInfo + 1179664 | 0;
 $add = $xsize + 1 | 0;
 $sub35 = 0 - $xsize | 0;
 $j$0 = 1;
 $pnt$0 = $image + ($add << 1) | 0;
 $pnt2$2 = $0 + ($add << 1) | 0;
 $wk_max$0 = 0;
 L9 : while (1) {
  if (($j$0 | 0) < ($sub | 0)) {
   $i$2 = 1;
   $pnt$1 = $pnt$0;
   $pnt2$3 = $pnt2$2;
   $wk_max$1 = $wk_max$0;
  } else {
   label = 56;
   break;
  }
  while (1) {
   if (($i$2 | 0) >= ($sub7 | 0)) break;
   do if ((HEAPU8[$pnt$1 + 1 >> 0] | 0 | 0) > ($labelingThresh | 0)) {
    HEAP16[$pnt2$3 >> 1] = 0;
    $wk_max$3 = $wk_max$1;
   } else {
    $arrayidx36 = $pnt2$3 + ($sub35 << 1) | 0;
    $2 = HEAP16[$arrayidx36 >> 1] | 0;
    if ($2 << 16 >> 16 > 0) {
     HEAP16[$pnt2$3 >> 1] = $2;
     $3 = ($2 << 16 >> 16) * 7 | 0;
     $arrayidx45 = $labelInfo + 1310736 + ($3 + -7 << 2) | 0;
     HEAP32[$arrayidx45 >> 2] = (HEAP32[$arrayidx45 >> 2] | 0) + 1;
     $arrayidx48 = $labelInfo + 1310736 + ($3 + -6 << 2) | 0;
     HEAP32[$arrayidx48 >> 2] = (HEAP32[$arrayidx48 >> 2] | 0) + $i$2;
     $arrayidx51 = $labelInfo + 1310736 + ($3 + -5 << 2) | 0;
     HEAP32[$arrayidx51 >> 2] = (HEAP32[$arrayidx51 >> 2] | 0) + $j$0;
     HEAP32[$labelInfo + 1310736 + ($3 + -1 << 2) >> 2] = $j$0;
     $wk_max$3 = $wk_max$1;
     break;
    }
    $7 = HEAP16[$arrayidx36 + 2 >> 1] | 0;
    $8 = HEAP16[$arrayidx36 + -2 >> 1] | 0;
    $cmp62 = $8 << 16 >> 16 > 0;
    $add$ptr126 = $pnt2$3 + -2 | 0;
    $sub71 = ($8 << 16 >> 16) + -1 | 0;
    if ($7 << 16 >> 16 <= 0) {
     if ($cmp62) {
      HEAP16[$pnt2$3 >> 1] = $8;
      $mul225 = $sub71 * 7 | 0;
      $arrayidx227 = $labelInfo + 1310736 + ($mul225 << 2) | 0;
      HEAP32[$arrayidx227 >> 2] = (HEAP32[$arrayidx227 >> 2] | 0) + 1;
      $arrayidx230 = $labelInfo + 1310736 + ($mul225 + 1 << 2) | 0;
      HEAP32[$arrayidx230 >> 2] = (HEAP32[$arrayidx230 >> 2] | 0) + $i$2;
      $arrayidx233 = $labelInfo + 1310736 + ($mul225 + 2 << 2) | 0;
      HEAP32[$arrayidx233 >> 2] = (HEAP32[$arrayidx233 >> 2] | 0) + $j$0;
      $arrayidx236 = $labelInfo + 1310736 + ($mul225 + 4 << 2) | 0;
      if ((HEAP32[$arrayidx236 >> 2] | 0) < ($i$2 | 0)) HEAP32[$arrayidx236 >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($mul225 + 6 << 2) >> 2] = $j$0;
      $wk_max$3 = $wk_max$1;
      break;
     }
     $36 = HEAP16[$add$ptr126 >> 1] | 0;
     if ($36 << 16 >> 16 > 0) {
      HEAP16[$pnt2$3 >> 1] = $36;
      $37 = ($36 << 16 >> 16) * 7 | 0;
      $arrayidx256 = $labelInfo + 1310736 + ($37 + -7 << 2) | 0;
      HEAP32[$arrayidx256 >> 2] = (HEAP32[$arrayidx256 >> 2] | 0) + 1;
      $arrayidx259 = $labelInfo + 1310736 + ($37 + -6 << 2) | 0;
      HEAP32[$arrayidx259 >> 2] = (HEAP32[$arrayidx259 >> 2] | 0) + $i$2;
      $arrayidx262 = $labelInfo + 1310736 + ($37 + -5 << 2) | 0;
      HEAP32[$arrayidx262 >> 2] = (HEAP32[$arrayidx262 >> 2] | 0) + $j$0;
      $add264 = $37 + -3 | 0;
      if ((HEAP32[$labelInfo + 1310736 + ($add264 << 2) >> 2] | 0) < ($i$2 | 0)) {
       $$sink = $i$2;
       $add269$sink = $add264;
       $wk_max$2 = $wk_max$1;
      } else {
       $wk_max$3 = $wk_max$1;
       break;
      }
     } else {
      $inc273 = $wk_max$1 + 1 | 0;
      if (($wk_max$1 | 0) > 32767) {
       label = 50;
       break L9;
      }
      HEAP16[$pnt2$3 >> 1] = $inc273;
      HEAP32[$labelInfo + 1179664 + ($wk_max$1 << 2) >> 2] = $inc273 << 16 >> 16;
      $mul283 = $wk_max$1 * 7 | 0;
      HEAP32[$labelInfo + 1310736 + ($mul283 << 2) >> 2] = 1;
      HEAP32[$labelInfo + 1310736 + ($mul283 + 1 << 2) >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($mul283 + 2 << 2) >> 2] = $j$0;
      HEAP32[$labelInfo + 1310736 + ($mul283 + 3 << 2) >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($mul283 + 4 << 2) >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($mul283 + 5 << 2) >> 2] = $j$0;
      $$sink = $j$0;
      $add269$sink = $mul283 + 6 | 0;
      $wk_max$2 = $inc273;
     }
     HEAP32[$labelInfo + 1310736 + ($add269$sink << 2) >> 2] = $$sink;
     $wk_max$3 = $wk_max$2;
     break;
    }
    $sub67 = ($7 << 16 >> 16) + -1 | 0;
    $arrayidx68 = $labelInfo + 1179664 + ($sub67 << 2) | 0;
    if ($cmp62) {
     $9 = HEAP32[$arrayidx68 >> 2] | 0;
     $10 = HEAP32[$labelInfo + 1179664 + ($sub71 << 2) >> 2] | 0;
     L36 : do if (($9 | 0) > ($10 | 0)) {
      HEAP16[$pnt2$3 >> 1] = $10;
      $k$0 = 0;
      $wk$0 = $arraydecay;
      while (1) {
       if (($k$0 | 0) >= ($wk_max$1 | 0)) {
        $13 = $10;
        break L36;
       }
       if ((HEAP32[$wk$0 >> 2] | 0) == ($9 | 0)) HEAP32[$wk$0 >> 2] = $10;
       $k$0 = $k$0 + 1 | 0;
       $wk$0 = $wk$0 + 4 | 0;
      }
     } else {
      HEAP16[$pnt2$3 >> 1] = $9;
      if (($9 | 0) < ($10 | 0)) {
       $k$1 = 0;
       $wk$1 = $arraydecay;
       while (1) {
        if (($k$1 | 0) >= ($wk_max$1 | 0)) {
         $13 = $9;
         break L36;
        }
        if ((HEAP32[$wk$1 >> 2] | 0) == ($10 | 0)) HEAP32[$wk$1 >> 2] = $9;
        $k$1 = $k$1 + 1 | 0;
        $wk$1 = $wk$1 + 4 | 0;
       }
      } else $13 = $9;
     } while (0);
     $14 = ($13 << 16 >> 16) * 7 | 0;
     $arrayidx115 = $labelInfo + 1310736 + ($14 + -7 << 2) | 0;
     HEAP32[$arrayidx115 >> 2] = (HEAP32[$arrayidx115 >> 2] | 0) + 1;
     $arrayidx118 = $labelInfo + 1310736 + ($14 + -6 << 2) | 0;
     HEAP32[$arrayidx118 >> 2] = (HEAP32[$arrayidx118 >> 2] | 0) + $i$2;
     $arrayidx121 = $labelInfo + 1310736 + ($14 + -5 << 2) | 0;
     HEAP32[$arrayidx121 >> 2] = (HEAP32[$arrayidx121 >> 2] | 0) + $j$0;
     HEAP32[$labelInfo + 1310736 + ($14 + -1 << 2) >> 2] = $j$0;
     $wk_max$3 = $wk_max$1;
     break;
    }
    $18 = HEAP16[$add$ptr126 >> 1] | 0;
    if ($18 << 16 >> 16 <= 0) {
     HEAP16[$pnt2$3 >> 1] = $7;
     $mul194 = $sub67 * 7 | 0;
     $arrayidx196 = $labelInfo + 1310736 + ($mul194 << 2) | 0;
     HEAP32[$arrayidx196 >> 2] = (HEAP32[$arrayidx196 >> 2] | 0) + 1;
     $arrayidx199 = $labelInfo + 1310736 + ($mul194 + 1 << 2) | 0;
     HEAP32[$arrayidx199 >> 2] = (HEAP32[$arrayidx199 >> 2] | 0) + $i$2;
     $arrayidx202 = $labelInfo + 1310736 + ($mul194 + 2 << 2) | 0;
     HEAP32[$arrayidx202 >> 2] = (HEAP32[$arrayidx202 >> 2] | 0) + $j$0;
     $arrayidx205 = $labelInfo + 1310736 + ($mul194 + 3 << 2) | 0;
     if ((HEAP32[$arrayidx205 >> 2] | 0) > ($i$2 | 0)) HEAP32[$arrayidx205 >> 2] = $i$2;
     HEAP32[$labelInfo + 1310736 + ($mul194 + 6 << 2) >> 2] = $j$0;
     $wk_max$3 = $wk_max$1;
     break;
    }
    $19 = HEAP32[$arrayidx68 >> 2] | 0;
    $20 = HEAP32[$labelInfo + 1179664 + (($18 << 16 >> 16) + -1 << 2) >> 2] | 0;
    L59 : do if (($19 | 0) > ($20 | 0)) {
     HEAP16[$pnt2$3 >> 1] = $20;
     $k$2 = 0;
     $wk$2 = $arraydecay;
     while (1) {
      if (($k$2 | 0) >= ($wk_max$1 | 0)) {
       $23 = $20;
       break L59;
      }
      if ((HEAP32[$wk$2 >> 2] | 0) == ($19 | 0)) HEAP32[$wk$2 >> 2] = $20;
      $k$2 = $k$2 + 1 | 0;
      $wk$2 = $wk$2 + 4 | 0;
     }
    } else {
     HEAP16[$pnt2$3 >> 1] = $19;
     if (($19 | 0) < ($20 | 0)) {
      $k$3 = 0;
      $wk$3 = $arraydecay;
      while (1) {
       if (($k$3 | 0) >= ($wk_max$1 | 0)) {
        $23 = $19;
        break L59;
       }
       if ((HEAP32[$wk$3 >> 2] | 0) == ($20 | 0)) HEAP32[$wk$3 >> 2] = $19;
       $k$3 = $k$3 + 1 | 0;
       $wk$3 = $wk$3 + 4 | 0;
      }
     } else $23 = $19;
    } while (0);
    $24 = ($23 << 16 >> 16) * 7 | 0;
    $arrayidx182 = $labelInfo + 1310736 + ($24 + -7 << 2) | 0;
    HEAP32[$arrayidx182 >> 2] = (HEAP32[$arrayidx182 >> 2] | 0) + 1;
    $arrayidx185 = $labelInfo + 1310736 + ($24 + -6 << 2) | 0;
    HEAP32[$arrayidx185 >> 2] = (HEAP32[$arrayidx185 >> 2] | 0) + $i$2;
    $arrayidx188 = $labelInfo + 1310736 + ($24 + -5 << 2) | 0;
    HEAP32[$arrayidx188 >> 2] = (HEAP32[$arrayidx188 >> 2] | 0) + $j$0;
    $wk_max$3 = $wk_max$1;
   } while (0);
   $i$2 = $i$2 + 1 | 0;
   $pnt$1 = $pnt$1 + 2 | 0;
   $pnt2$3 = $pnt2$3 + 2 | 0;
   $wk_max$1 = $wk_max$3;
  }
  $j$0 = $j$0 + 1 | 0;
  $pnt$0 = $pnt$1 + 4 | 0;
  $pnt2$2 = $pnt2$3 + 4 | 0;
  $wk_max$0 = $wk_max$1;
 }
 L77 : do if ((label | 0) == 50) {
  _arLog(3, 3256, $vararg_buffer);
  $retval$0 = -1;
 } else if ((label | 0) == 56) {
  $arrayidx316 = $labelInfo + 12 | 0;
  $i$3 = 1;
  $j$1 = 1;
  $wk$4 = $arraydecay;
  while (1) {
   if (($i$3 | 0) > ($wk_max$0 | 0)) break;
   $42 = HEAP32[$wk$4 >> 2] | 0;
   if (($42 | 0) == ($i$3 | 0)) {
    $cond = $j$1;
    $j$2 = $j$1 + 1 | 0;
   } else {
    $cond = HEAP32[$labelInfo + 1179664 + ($42 + -1 << 2) >> 2] | 0;
    $j$2 = $j$1;
   }
   HEAP32[$wk$4 >> 2] = $cond;
   $i$3 = $i$3 + 1 | 0;
   $j$1 = $j$2;
   $wk$4 = $wk$4 + 4 | 0;
  }
  $label_num314 = $labelInfo + 8 | 0;
  $sub337 = $j$1 + -1 | 0;
  HEAP32[$label_num314 >> 2] = $sub337;
  if (!$sub337) $retval$0 = 0; else {
   _memset($arrayidx316 | 0, 0, $sub337 << 2 | 0) | 0;
   _memset($labelInfo + 655376 | 0, 0, $sub337 << 4 | 0) | 0;
   $44 = $sub337;
   $i$4 = 0;
   while (1) {
    if (($i$4 | 0) >= ($44 | 0)) {
     $i$5 = 0;
     break;
    }
    $mul349 = $i$4 << 2;
    HEAP32[$labelInfo + 131084 + ($mul349 << 2) >> 2] = $xsize;
    HEAP32[$labelInfo + 131084 + (($mul349 | 1) << 2) >> 2] = 0;
    HEAP32[$labelInfo + 131084 + (($mul349 | 2) << 2) >> 2] = $ysize;
    HEAP32[$labelInfo + 131084 + (($mul349 | 3) << 2) >> 2] = 0;
    $44 = HEAP32[$label_num314 >> 2] | 0;
    $i$4 = $i$4 + 1 | 0;
   }
   while (1) {
    if (($i$5 | 0) >= ($wk_max$0 | 0)) {
     $i$6 = 0;
     break;
    }
    $sub369 = (HEAP32[$labelInfo + 1179664 + ($i$5 << 2) >> 2] | 0) + -1 | 0;
    $mul370 = $i$5 * 7 | 0;
    $arrayidx373 = $labelInfo + 12 + ($sub369 << 2) | 0;
    HEAP32[$arrayidx373 >> 2] = (HEAP32[$arrayidx373 >> 2] | 0) + (HEAP32[$labelInfo + 1310736 + ($mul370 << 2) >> 2] | 0);
    $mul379 = $sub369 << 1;
    $arrayidx381 = $labelInfo + 655376 + ($mul379 << 3) | 0;
    HEAPF64[$arrayidx381 >> 3] = +HEAPF64[$arrayidx381 >> 3] + +(HEAP32[$labelInfo + 1310736 + ($mul370 + 1 << 2) >> 2] | 0);
    $arrayidx389 = $labelInfo + 655376 + (($mul379 | 1) << 3) | 0;
    HEAPF64[$arrayidx389 >> 3] = +HEAPF64[$arrayidx389 >> 3] + +(HEAP32[$labelInfo + 1310736 + ($mul370 + 2 << 2) >> 2] | 0);
    $mul391 = $sub369 << 2;
    $arrayidx393 = $labelInfo + 131084 + ($mul391 << 2) | 0;
    $53 = HEAP32[$labelInfo + 1310736 + ($mul370 + 3 << 2) >> 2] | 0;
    if ((HEAP32[$arrayidx393 >> 2] | 0) > ($53 | 0)) HEAP32[$arrayidx393 >> 2] = $53;
    $arrayidx409 = $labelInfo + 131084 + (($mul391 | 1) << 2) | 0;
    $55 = HEAP32[$labelInfo + 1310736 + ($mul370 + 4 << 2) >> 2] | 0;
    if ((HEAP32[$arrayidx409 >> 2] | 0) < ($55 | 0)) HEAP32[$arrayidx409 >> 2] = $55;
    $arrayidx425 = $labelInfo + 131084 + (($mul391 | 2) << 2) | 0;
    $57 = HEAP32[$labelInfo + 1310736 + ($mul370 + 5 << 2) >> 2] | 0;
    if ((HEAP32[$arrayidx425 >> 2] | 0) > ($57 | 0)) HEAP32[$arrayidx425 >> 2] = $57;
    $arrayidx441 = $labelInfo + 131084 + (($mul391 | 3) << 2) | 0;
    $59 = HEAP32[$labelInfo + 1310736 + ($mul370 + 6 << 2) >> 2] | 0;
    if ((HEAP32[$arrayidx441 >> 2] | 0) < ($59 | 0)) HEAP32[$arrayidx441 >> 2] = $59;
    $i$5 = $i$5 + 1 | 0;
   }
   while (1) {
    if (($i$6 | 0) >= (HEAP32[$label_num314 >> 2] | 0)) {
     $retval$0 = 0;
     break L77;
    }
    $arrayidx462 = $labelInfo + 12 + ($i$6 << 2) | 0;
    $mul464 = $i$6 << 1;
    $arrayidx466 = $labelInfo + 655376 + ($mul464 << 3) | 0;
    HEAPF64[$arrayidx466 >> 3] = +HEAPF64[$arrayidx466 >> 3] / +(HEAP32[$arrayidx462 >> 2] | 0);
    $arrayidx471 = $labelInfo + 655376 + (($mul464 | 1) << 3) | 0;
    HEAPF64[$arrayidx471 >> 3] = +HEAPF64[$arrayidx471 >> 3] / +(HEAP32[$arrayidx462 >> 2] | 0);
    $i$6 = $i$6 + 1 | 0;
   }
  }
 } while (0);
 STACKTOP = sp;
 return $retval$0 | 0;
}

function _arLabelingSubDWRYC($image, $xsize, $ysize, $labelingThresh, $labelInfo) {
 $image = $image | 0;
 $xsize = $xsize | 0;
 $ysize = $ysize | 0;
 $labelingThresh = $labelingThresh | 0;
 $labelInfo = $labelInfo | 0;
 var $$sink = 0, $0 = 0, $10 = 0, $13 = 0, $14 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $23 = 0, $24 = 0, $3 = 0, $36 = 0, $37 = 0, $42 = 0, $44 = 0, $53 = 0, $55 = 0, $57 = 0, $59 = 0, $7 = 0, $8 = 0, $9 = 0, $add = 0, $add$ptr125 = 0, $add263 = 0, $add268$sink = 0, $arraydecay = 0, $arrayidx114 = 0, $arrayidx117 = 0, $arrayidx120 = 0, $arrayidx181 = 0, $arrayidx184 = 0, $arrayidx187 = 0, $arrayidx195 = 0, $arrayidx198 = 0, $arrayidx201 = 0, $arrayidx204 = 0, $arrayidx226 = 0, $arrayidx229 = 0, $arrayidx232 = 0, $arrayidx235 = 0, $arrayidx255 = 0, $arrayidx258 = 0, $arrayidx261 = 0, $arrayidx315 = 0, $arrayidx35 = 0, $arrayidx372 = 0, $arrayidx380 = 0, $arrayidx388 = 0, $arrayidx392 = 0, $arrayidx408 = 0, $arrayidx424 = 0, $arrayidx44 = 0, $arrayidx440 = 0, $arrayidx461 = 0, $arrayidx465 = 0, $arrayidx47 = 0, $arrayidx470 = 0, $arrayidx50 = 0, $arrayidx67 = 0, $cmp61 = 0, $cond = 0, $i$0 = 0, $i$1 = 0, $i$2 = 0, $i$3 = 0, $i$4 = 0, $i$5 = 0, $i$6 = 0, $inc272 = 0, $j$0 = 0, $j$1 = 0, $j$2 = 0, $k$0 = 0, $k$1 = 0, $k$2 = 0, $k$3 = 0, $label_num313 = 0, $mul193 = 0, $mul224 = 0, $mul282 = 0, $mul348 = 0, $mul369 = 0, $mul378 = 0, $mul390 = 0, $mul463 = 0, $pnt$0 = 0, $pnt$1 = 0, $pnt1$0 = 0, $pnt1$1 = 0, $pnt2$0 = 0, $pnt2$1 = 0, $pnt2$2 = 0, $pnt2$3 = 0, $retval$0 = 0, $sub = 0, $sub336 = 0, $sub34 = 0, $sub368 = 0, $sub66 = 0, $sub7 = 0, $sub70 = 0, $vararg_buffer = 0, $wk$0 = 0, $wk$1 = 0, $wk$2 = 0, $wk$3 = 0, $wk$4 = 0, $wk_max$0 = 0, $wk_max$1 = 0, $wk_max$2 = 0, $wk_max$3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $vararg_buffer = sp;
 $0 = HEAP32[$labelInfo >> 2] | 0;
 $sub = $ysize + -1 | 0;
 $i$0 = 0;
 $pnt1$0 = $0;
 $pnt2$0 = $0 + ((Math_imul($sub, $xsize) | 0) << 1) | 0;
 while (1) {
  if (($i$0 | 0) >= ($xsize | 0)) break;
  HEAP16[$pnt2$0 >> 1] = 0;
  HEAP16[$pnt1$0 >> 1] = 0;
  $i$0 = $i$0 + 1 | 0;
  $pnt1$0 = $pnt1$0 + 2 | 0;
  $pnt2$0 = $pnt2$0 + 2 | 0;
 }
 $sub7 = $xsize + -1 | 0;
 $i$1 = 0;
 $pnt1$1 = $0;
 $pnt2$1 = $0 + ($sub7 << 1) | 0;
 while (1) {
  if (($i$1 | 0) >= ($ysize | 0)) break;
  HEAP16[$pnt2$1 >> 1] = 0;
  HEAP16[$pnt1$1 >> 1] = 0;
  $i$1 = $i$1 + 1 | 0;
  $pnt1$1 = $pnt1$1 + ($xsize << 1) | 0;
  $pnt2$1 = $pnt2$1 + ($xsize << 1) | 0;
 }
 $arraydecay = $labelInfo + 1179664 | 0;
 $add = $xsize + 1 | 0;
 $sub34 = 0 - $xsize | 0;
 $j$0 = 1;
 $pnt$0 = $image + ($add << 1) | 0;
 $pnt2$2 = $0 + ($add << 1) | 0;
 $wk_max$0 = 0;
 L9 : while (1) {
  if (($j$0 | 0) < ($sub | 0)) {
   $i$2 = 1;
   $pnt$1 = $pnt$0;
   $pnt2$3 = $pnt2$2;
   $wk_max$1 = $wk_max$0;
  } else {
   label = 56;
   break;
  }
  while (1) {
   if (($i$2 | 0) >= ($sub7 | 0)) break;
   do if ((HEAPU8[$pnt$1 >> 0] | 0 | 0) > ($labelingThresh | 0)) {
    $arrayidx35 = $pnt2$3 + ($sub34 << 1) | 0;
    $2 = HEAP16[$arrayidx35 >> 1] | 0;
    if ($2 << 16 >> 16 > 0) {
     HEAP16[$pnt2$3 >> 1] = $2;
     $3 = ($2 << 16 >> 16) * 7 | 0;
     $arrayidx44 = $labelInfo + 1310736 + ($3 + -7 << 2) | 0;
     HEAP32[$arrayidx44 >> 2] = (HEAP32[$arrayidx44 >> 2] | 0) + 1;
     $arrayidx47 = $labelInfo + 1310736 + ($3 + -6 << 2) | 0;
     HEAP32[$arrayidx47 >> 2] = (HEAP32[$arrayidx47 >> 2] | 0) + $i$2;
     $arrayidx50 = $labelInfo + 1310736 + ($3 + -5 << 2) | 0;
     HEAP32[$arrayidx50 >> 2] = (HEAP32[$arrayidx50 >> 2] | 0) + $j$0;
     HEAP32[$labelInfo + 1310736 + ($3 + -1 << 2) >> 2] = $j$0;
     $wk_max$3 = $wk_max$1;
     break;
    }
    $7 = HEAP16[$arrayidx35 + 2 >> 1] | 0;
    $8 = HEAP16[$arrayidx35 + -2 >> 1] | 0;
    $cmp61 = $8 << 16 >> 16 > 0;
    $add$ptr125 = $pnt2$3 + -2 | 0;
    $sub70 = ($8 << 16 >> 16) + -1 | 0;
    if ($7 << 16 >> 16 <= 0) {
     if ($cmp61) {
      HEAP16[$pnt2$3 >> 1] = $8;
      $mul224 = $sub70 * 7 | 0;
      $arrayidx226 = $labelInfo + 1310736 + ($mul224 << 2) | 0;
      HEAP32[$arrayidx226 >> 2] = (HEAP32[$arrayidx226 >> 2] | 0) + 1;
      $arrayidx229 = $labelInfo + 1310736 + ($mul224 + 1 << 2) | 0;
      HEAP32[$arrayidx229 >> 2] = (HEAP32[$arrayidx229 >> 2] | 0) + $i$2;
      $arrayidx232 = $labelInfo + 1310736 + ($mul224 + 2 << 2) | 0;
      HEAP32[$arrayidx232 >> 2] = (HEAP32[$arrayidx232 >> 2] | 0) + $j$0;
      $arrayidx235 = $labelInfo + 1310736 + ($mul224 + 4 << 2) | 0;
      if ((HEAP32[$arrayidx235 >> 2] | 0) < ($i$2 | 0)) HEAP32[$arrayidx235 >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($mul224 + 6 << 2) >> 2] = $j$0;
      $wk_max$3 = $wk_max$1;
      break;
     }
     $36 = HEAP16[$add$ptr125 >> 1] | 0;
     if ($36 << 16 >> 16 > 0) {
      HEAP16[$pnt2$3 >> 1] = $36;
      $37 = ($36 << 16 >> 16) * 7 | 0;
      $arrayidx255 = $labelInfo + 1310736 + ($37 + -7 << 2) | 0;
      HEAP32[$arrayidx255 >> 2] = (HEAP32[$arrayidx255 >> 2] | 0) + 1;
      $arrayidx258 = $labelInfo + 1310736 + ($37 + -6 << 2) | 0;
      HEAP32[$arrayidx258 >> 2] = (HEAP32[$arrayidx258 >> 2] | 0) + $i$2;
      $arrayidx261 = $labelInfo + 1310736 + ($37 + -5 << 2) | 0;
      HEAP32[$arrayidx261 >> 2] = (HEAP32[$arrayidx261 >> 2] | 0) + $j$0;
      $add263 = $37 + -3 | 0;
      if ((HEAP32[$labelInfo + 1310736 + ($add263 << 2) >> 2] | 0) < ($i$2 | 0)) {
       $$sink = $i$2;
       $add268$sink = $add263;
       $wk_max$2 = $wk_max$1;
      } else {
       $wk_max$3 = $wk_max$1;
       break;
      }
     } else {
      $inc272 = $wk_max$1 + 1 | 0;
      if (($wk_max$1 | 0) > 32767) {
       label = 50;
       break L9;
      }
      HEAP16[$pnt2$3 >> 1] = $inc272;
      HEAP32[$labelInfo + 1179664 + ($wk_max$1 << 2) >> 2] = $inc272 << 16 >> 16;
      $mul282 = $wk_max$1 * 7 | 0;
      HEAP32[$labelInfo + 1310736 + ($mul282 << 2) >> 2] = 1;
      HEAP32[$labelInfo + 1310736 + ($mul282 + 1 << 2) >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($mul282 + 2 << 2) >> 2] = $j$0;
      HEAP32[$labelInfo + 1310736 + ($mul282 + 3 << 2) >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($mul282 + 4 << 2) >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($mul282 + 5 << 2) >> 2] = $j$0;
      $$sink = $j$0;
      $add268$sink = $mul282 + 6 | 0;
      $wk_max$2 = $inc272;
     }
     HEAP32[$labelInfo + 1310736 + ($add268$sink << 2) >> 2] = $$sink;
     $wk_max$3 = $wk_max$2;
     break;
    }
    $sub66 = ($7 << 16 >> 16) + -1 | 0;
    $arrayidx67 = $labelInfo + 1179664 + ($sub66 << 2) | 0;
    if ($cmp61) {
     $9 = HEAP32[$arrayidx67 >> 2] | 0;
     $10 = HEAP32[$labelInfo + 1179664 + ($sub70 << 2) >> 2] | 0;
     L35 : do if (($9 | 0) > ($10 | 0)) {
      HEAP16[$pnt2$3 >> 1] = $10;
      $k$0 = 0;
      $wk$0 = $arraydecay;
      while (1) {
       if (($k$0 | 0) >= ($wk_max$1 | 0)) {
        $13 = $10;
        break L35;
       }
       if ((HEAP32[$wk$0 >> 2] | 0) == ($9 | 0)) HEAP32[$wk$0 >> 2] = $10;
       $k$0 = $k$0 + 1 | 0;
       $wk$0 = $wk$0 + 4 | 0;
      }
     } else {
      HEAP16[$pnt2$3 >> 1] = $9;
      if (($9 | 0) < ($10 | 0)) {
       $k$1 = 0;
       $wk$1 = $arraydecay;
       while (1) {
        if (($k$1 | 0) >= ($wk_max$1 | 0)) {
         $13 = $9;
         break L35;
        }
        if ((HEAP32[$wk$1 >> 2] | 0) == ($10 | 0)) HEAP32[$wk$1 >> 2] = $9;
        $k$1 = $k$1 + 1 | 0;
        $wk$1 = $wk$1 + 4 | 0;
       }
      } else $13 = $9;
     } while (0);
     $14 = ($13 << 16 >> 16) * 7 | 0;
     $arrayidx114 = $labelInfo + 1310736 + ($14 + -7 << 2) | 0;
     HEAP32[$arrayidx114 >> 2] = (HEAP32[$arrayidx114 >> 2] | 0) + 1;
     $arrayidx117 = $labelInfo + 1310736 + ($14 + -6 << 2) | 0;
     HEAP32[$arrayidx117 >> 2] = (HEAP32[$arrayidx117 >> 2] | 0) + $i$2;
     $arrayidx120 = $labelInfo + 1310736 + ($14 + -5 << 2) | 0;
     HEAP32[$arrayidx120 >> 2] = (HEAP32[$arrayidx120 >> 2] | 0) + $j$0;
     HEAP32[$labelInfo + 1310736 + ($14 + -1 << 2) >> 2] = $j$0;
     $wk_max$3 = $wk_max$1;
     break;
    }
    $18 = HEAP16[$add$ptr125 >> 1] | 0;
    if ($18 << 16 >> 16 <= 0) {
     HEAP16[$pnt2$3 >> 1] = $7;
     $mul193 = $sub66 * 7 | 0;
     $arrayidx195 = $labelInfo + 1310736 + ($mul193 << 2) | 0;
     HEAP32[$arrayidx195 >> 2] = (HEAP32[$arrayidx195 >> 2] | 0) + 1;
     $arrayidx198 = $labelInfo + 1310736 + ($mul193 + 1 << 2) | 0;
     HEAP32[$arrayidx198 >> 2] = (HEAP32[$arrayidx198 >> 2] | 0) + $i$2;
     $arrayidx201 = $labelInfo + 1310736 + ($mul193 + 2 << 2) | 0;
     HEAP32[$arrayidx201 >> 2] = (HEAP32[$arrayidx201 >> 2] | 0) + $j$0;
     $arrayidx204 = $labelInfo + 1310736 + ($mul193 + 3 << 2) | 0;
     if ((HEAP32[$arrayidx204 >> 2] | 0) > ($i$2 | 0)) HEAP32[$arrayidx204 >> 2] = $i$2;
     HEAP32[$labelInfo + 1310736 + ($mul193 + 6 << 2) >> 2] = $j$0;
     $wk_max$3 = $wk_max$1;
     break;
    }
    $19 = HEAP32[$arrayidx67 >> 2] | 0;
    $20 = HEAP32[$labelInfo + 1179664 + (($18 << 16 >> 16) + -1 << 2) >> 2] | 0;
    L58 : do if (($19 | 0) > ($20 | 0)) {
     HEAP16[$pnt2$3 >> 1] = $20;
     $k$2 = 0;
     $wk$2 = $arraydecay;
     while (1) {
      if (($k$2 | 0) >= ($wk_max$1 | 0)) {
       $23 = $20;
       break L58;
      }
      if ((HEAP32[$wk$2 >> 2] | 0) == ($19 | 0)) HEAP32[$wk$2 >> 2] = $20;
      $k$2 = $k$2 + 1 | 0;
      $wk$2 = $wk$2 + 4 | 0;
     }
    } else {
     HEAP16[$pnt2$3 >> 1] = $19;
     if (($19 | 0) < ($20 | 0)) {
      $k$3 = 0;
      $wk$3 = $arraydecay;
      while (1) {
       if (($k$3 | 0) >= ($wk_max$1 | 0)) {
        $23 = $19;
        break L58;
       }
       if ((HEAP32[$wk$3 >> 2] | 0) == ($20 | 0)) HEAP32[$wk$3 >> 2] = $19;
       $k$3 = $k$3 + 1 | 0;
       $wk$3 = $wk$3 + 4 | 0;
      }
     } else $23 = $19;
    } while (0);
    $24 = ($23 << 16 >> 16) * 7 | 0;
    $arrayidx181 = $labelInfo + 1310736 + ($24 + -7 << 2) | 0;
    HEAP32[$arrayidx181 >> 2] = (HEAP32[$arrayidx181 >> 2] | 0) + 1;
    $arrayidx184 = $labelInfo + 1310736 + ($24 + -6 << 2) | 0;
    HEAP32[$arrayidx184 >> 2] = (HEAP32[$arrayidx184 >> 2] | 0) + $i$2;
    $arrayidx187 = $labelInfo + 1310736 + ($24 + -5 << 2) | 0;
    HEAP32[$arrayidx187 >> 2] = (HEAP32[$arrayidx187 >> 2] | 0) + $j$0;
    $wk_max$3 = $wk_max$1;
   } else {
    HEAP16[$pnt2$3 >> 1] = 0;
    $wk_max$3 = $wk_max$1;
   } while (0);
   $i$2 = $i$2 + 1 | 0;
   $pnt$1 = $pnt$1 + 2 | 0;
   $pnt2$3 = $pnt2$3 + 2 | 0;
   $wk_max$1 = $wk_max$3;
  }
  $j$0 = $j$0 + 1 | 0;
  $pnt$0 = $pnt$1 + 4 | 0;
  $pnt2$2 = $pnt2$3 + 4 | 0;
  $wk_max$0 = $wk_max$1;
 }
 L77 : do if ((label | 0) == 50) {
  _arLog(3, 3256, $vararg_buffer);
  $retval$0 = -1;
 } else if ((label | 0) == 56) {
  $arrayidx315 = $labelInfo + 12 | 0;
  $i$3 = 1;
  $j$1 = 1;
  $wk$4 = $arraydecay;
  while (1) {
   if (($i$3 | 0) > ($wk_max$0 | 0)) break;
   $42 = HEAP32[$wk$4 >> 2] | 0;
   if (($42 | 0) == ($i$3 | 0)) {
    $cond = $j$1;
    $j$2 = $j$1 + 1 | 0;
   } else {
    $cond = HEAP32[$labelInfo + 1179664 + ($42 + -1 << 2) >> 2] | 0;
    $j$2 = $j$1;
   }
   HEAP32[$wk$4 >> 2] = $cond;
   $i$3 = $i$3 + 1 | 0;
   $j$1 = $j$2;
   $wk$4 = $wk$4 + 4 | 0;
  }
  $label_num313 = $labelInfo + 8 | 0;
  $sub336 = $j$1 + -1 | 0;
  HEAP32[$label_num313 >> 2] = $sub336;
  if (!$sub336) $retval$0 = 0; else {
   _memset($arrayidx315 | 0, 0, $sub336 << 2 | 0) | 0;
   _memset($labelInfo + 655376 | 0, 0, $sub336 << 4 | 0) | 0;
   $44 = $sub336;
   $i$4 = 0;
   while (1) {
    if (($i$4 | 0) >= ($44 | 0)) {
     $i$5 = 0;
     break;
    }
    $mul348 = $i$4 << 2;
    HEAP32[$labelInfo + 131084 + ($mul348 << 2) >> 2] = $xsize;
    HEAP32[$labelInfo + 131084 + (($mul348 | 1) << 2) >> 2] = 0;
    HEAP32[$labelInfo + 131084 + (($mul348 | 2) << 2) >> 2] = $ysize;
    HEAP32[$labelInfo + 131084 + (($mul348 | 3) << 2) >> 2] = 0;
    $44 = HEAP32[$label_num313 >> 2] | 0;
    $i$4 = $i$4 + 1 | 0;
   }
   while (1) {
    if (($i$5 | 0) >= ($wk_max$0 | 0)) {
     $i$6 = 0;
     break;
    }
    $sub368 = (HEAP32[$labelInfo + 1179664 + ($i$5 << 2) >> 2] | 0) + -1 | 0;
    $mul369 = $i$5 * 7 | 0;
    $arrayidx372 = $labelInfo + 12 + ($sub368 << 2) | 0;
    HEAP32[$arrayidx372 >> 2] = (HEAP32[$arrayidx372 >> 2] | 0) + (HEAP32[$labelInfo + 1310736 + ($mul369 << 2) >> 2] | 0);
    $mul378 = $sub368 << 1;
    $arrayidx380 = $labelInfo + 655376 + ($mul378 << 3) | 0;
    HEAPF64[$arrayidx380 >> 3] = +HEAPF64[$arrayidx380 >> 3] + +(HEAP32[$labelInfo + 1310736 + ($mul369 + 1 << 2) >> 2] | 0);
    $arrayidx388 = $labelInfo + 655376 + (($mul378 | 1) << 3) | 0;
    HEAPF64[$arrayidx388 >> 3] = +HEAPF64[$arrayidx388 >> 3] + +(HEAP32[$labelInfo + 1310736 + ($mul369 + 2 << 2) >> 2] | 0);
    $mul390 = $sub368 << 2;
    $arrayidx392 = $labelInfo + 131084 + ($mul390 << 2) | 0;
    $53 = HEAP32[$labelInfo + 1310736 + ($mul369 + 3 << 2) >> 2] | 0;
    if ((HEAP32[$arrayidx392 >> 2] | 0) > ($53 | 0)) HEAP32[$arrayidx392 >> 2] = $53;
    $arrayidx408 = $labelInfo + 131084 + (($mul390 | 1) << 2) | 0;
    $55 = HEAP32[$labelInfo + 1310736 + ($mul369 + 4 << 2) >> 2] | 0;
    if ((HEAP32[$arrayidx408 >> 2] | 0) < ($55 | 0)) HEAP32[$arrayidx408 >> 2] = $55;
    $arrayidx424 = $labelInfo + 131084 + (($mul390 | 2) << 2) | 0;
    $57 = HEAP32[$labelInfo + 1310736 + ($mul369 + 5 << 2) >> 2] | 0;
    if ((HEAP32[$arrayidx424 >> 2] | 0) > ($57 | 0)) HEAP32[$arrayidx424 >> 2] = $57;
    $arrayidx440 = $labelInfo + 131084 + (($mul390 | 3) << 2) | 0;
    $59 = HEAP32[$labelInfo + 1310736 + ($mul369 + 6 << 2) >> 2] | 0;
    if ((HEAP32[$arrayidx440 >> 2] | 0) < ($59 | 0)) HEAP32[$arrayidx440 >> 2] = $59;
    $i$5 = $i$5 + 1 | 0;
   }
   while (1) {
    if (($i$6 | 0) >= (HEAP32[$label_num313 >> 2] | 0)) {
     $retval$0 = 0;
     break L77;
    }
    $arrayidx461 = $labelInfo + 12 + ($i$6 << 2) | 0;
    $mul463 = $i$6 << 1;
    $arrayidx465 = $labelInfo + 655376 + ($mul463 << 3) | 0;
    HEAPF64[$arrayidx465 >> 3] = +HEAPF64[$arrayidx465 >> 3] / +(HEAP32[$arrayidx461 >> 2] | 0);
    $arrayidx470 = $labelInfo + 655376 + (($mul463 | 1) << 3) | 0;
    HEAPF64[$arrayidx470 >> 3] = +HEAPF64[$arrayidx470 >> 3] / +(HEAP32[$arrayidx461 >> 2] | 0);
    $i$6 = $i$6 + 1 | 0;
   }
  }
 } while (0);
 STACKTOP = sp;
 return $retval$0 | 0;
}

function _arLabelingSubDBRYC($image, $xsize, $ysize, $labelingThresh, $labelInfo) {
 $image = $image | 0;
 $xsize = $xsize | 0;
 $ysize = $ysize | 0;
 $labelingThresh = $labelingThresh | 0;
 $labelInfo = $labelInfo | 0;
 var $$sink = 0, $0 = 0, $10 = 0, $13 = 0, $14 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $23 = 0, $24 = 0, $3 = 0, $36 = 0, $37 = 0, $42 = 0, $44 = 0, $53 = 0, $55 = 0, $57 = 0, $59 = 0, $7 = 0, $8 = 0, $9 = 0, $add = 0, $add$ptr125 = 0, $add263 = 0, $add268$sink = 0, $arraydecay = 0, $arrayidx114 = 0, $arrayidx117 = 0, $arrayidx120 = 0, $arrayidx181 = 0, $arrayidx184 = 0, $arrayidx187 = 0, $arrayidx195 = 0, $arrayidx198 = 0, $arrayidx201 = 0, $arrayidx204 = 0, $arrayidx226 = 0, $arrayidx229 = 0, $arrayidx232 = 0, $arrayidx235 = 0, $arrayidx255 = 0, $arrayidx258 = 0, $arrayidx261 = 0, $arrayidx315 = 0, $arrayidx35 = 0, $arrayidx372 = 0, $arrayidx380 = 0, $arrayidx388 = 0, $arrayidx392 = 0, $arrayidx408 = 0, $arrayidx424 = 0, $arrayidx44 = 0, $arrayidx440 = 0, $arrayidx461 = 0, $arrayidx465 = 0, $arrayidx47 = 0, $arrayidx470 = 0, $arrayidx50 = 0, $arrayidx67 = 0, $cmp61 = 0, $cond = 0, $i$0 = 0, $i$1 = 0, $i$2 = 0, $i$3 = 0, $i$4 = 0, $i$5 = 0, $i$6 = 0, $inc272 = 0, $j$0 = 0, $j$1 = 0, $j$2 = 0, $k$0 = 0, $k$1 = 0, $k$2 = 0, $k$3 = 0, $label_num313 = 0, $mul193 = 0, $mul224 = 0, $mul282 = 0, $mul348 = 0, $mul369 = 0, $mul378 = 0, $mul390 = 0, $mul463 = 0, $pnt$0 = 0, $pnt$1 = 0, $pnt1$0 = 0, $pnt1$1 = 0, $pnt2$0 = 0, $pnt2$1 = 0, $pnt2$2 = 0, $pnt2$3 = 0, $retval$0 = 0, $sub = 0, $sub336 = 0, $sub34 = 0, $sub368 = 0, $sub66 = 0, $sub7 = 0, $sub70 = 0, $vararg_buffer = 0, $wk$0 = 0, $wk$1 = 0, $wk$2 = 0, $wk$3 = 0, $wk$4 = 0, $wk_max$0 = 0, $wk_max$1 = 0, $wk_max$2 = 0, $wk_max$3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $vararg_buffer = sp;
 $0 = HEAP32[$labelInfo >> 2] | 0;
 $sub = $ysize + -1 | 0;
 $i$0 = 0;
 $pnt1$0 = $0;
 $pnt2$0 = $0 + ((Math_imul($sub, $xsize) | 0) << 1) | 0;
 while (1) {
  if (($i$0 | 0) >= ($xsize | 0)) break;
  HEAP16[$pnt2$0 >> 1] = 0;
  HEAP16[$pnt1$0 >> 1] = 0;
  $i$0 = $i$0 + 1 | 0;
  $pnt1$0 = $pnt1$0 + 2 | 0;
  $pnt2$0 = $pnt2$0 + 2 | 0;
 }
 $sub7 = $xsize + -1 | 0;
 $i$1 = 0;
 $pnt1$1 = $0;
 $pnt2$1 = $0 + ($sub7 << 1) | 0;
 while (1) {
  if (($i$1 | 0) >= ($ysize | 0)) break;
  HEAP16[$pnt2$1 >> 1] = 0;
  HEAP16[$pnt1$1 >> 1] = 0;
  $i$1 = $i$1 + 1 | 0;
  $pnt1$1 = $pnt1$1 + ($xsize << 1) | 0;
  $pnt2$1 = $pnt2$1 + ($xsize << 1) | 0;
 }
 $arraydecay = $labelInfo + 1179664 | 0;
 $add = $xsize + 1 | 0;
 $sub34 = 0 - $xsize | 0;
 $j$0 = 1;
 $pnt$0 = $image + ($add << 1) | 0;
 $pnt2$2 = $0 + ($add << 1) | 0;
 $wk_max$0 = 0;
 L9 : while (1) {
  if (($j$0 | 0) < ($sub | 0)) {
   $i$2 = 1;
   $pnt$1 = $pnt$0;
   $pnt2$3 = $pnt2$2;
   $wk_max$1 = $wk_max$0;
  } else {
   label = 56;
   break;
  }
  while (1) {
   if (($i$2 | 0) >= ($sub7 | 0)) break;
   do if ((HEAPU8[$pnt$1 >> 0] | 0 | 0) > ($labelingThresh | 0)) {
    HEAP16[$pnt2$3 >> 1] = 0;
    $wk_max$3 = $wk_max$1;
   } else {
    $arrayidx35 = $pnt2$3 + ($sub34 << 1) | 0;
    $2 = HEAP16[$arrayidx35 >> 1] | 0;
    if ($2 << 16 >> 16 > 0) {
     HEAP16[$pnt2$3 >> 1] = $2;
     $3 = ($2 << 16 >> 16) * 7 | 0;
     $arrayidx44 = $labelInfo + 1310736 + ($3 + -7 << 2) | 0;
     HEAP32[$arrayidx44 >> 2] = (HEAP32[$arrayidx44 >> 2] | 0) + 1;
     $arrayidx47 = $labelInfo + 1310736 + ($3 + -6 << 2) | 0;
     HEAP32[$arrayidx47 >> 2] = (HEAP32[$arrayidx47 >> 2] | 0) + $i$2;
     $arrayidx50 = $labelInfo + 1310736 + ($3 + -5 << 2) | 0;
     HEAP32[$arrayidx50 >> 2] = (HEAP32[$arrayidx50 >> 2] | 0) + $j$0;
     HEAP32[$labelInfo + 1310736 + ($3 + -1 << 2) >> 2] = $j$0;
     $wk_max$3 = $wk_max$1;
     break;
    }
    $7 = HEAP16[$arrayidx35 + 2 >> 1] | 0;
    $8 = HEAP16[$arrayidx35 + -2 >> 1] | 0;
    $cmp61 = $8 << 16 >> 16 > 0;
    $add$ptr125 = $pnt2$3 + -2 | 0;
    $sub70 = ($8 << 16 >> 16) + -1 | 0;
    if ($7 << 16 >> 16 <= 0) {
     if ($cmp61) {
      HEAP16[$pnt2$3 >> 1] = $8;
      $mul224 = $sub70 * 7 | 0;
      $arrayidx226 = $labelInfo + 1310736 + ($mul224 << 2) | 0;
      HEAP32[$arrayidx226 >> 2] = (HEAP32[$arrayidx226 >> 2] | 0) + 1;
      $arrayidx229 = $labelInfo + 1310736 + ($mul224 + 1 << 2) | 0;
      HEAP32[$arrayidx229 >> 2] = (HEAP32[$arrayidx229 >> 2] | 0) + $i$2;
      $arrayidx232 = $labelInfo + 1310736 + ($mul224 + 2 << 2) | 0;
      HEAP32[$arrayidx232 >> 2] = (HEAP32[$arrayidx232 >> 2] | 0) + $j$0;
      $arrayidx235 = $labelInfo + 1310736 + ($mul224 + 4 << 2) | 0;
      if ((HEAP32[$arrayidx235 >> 2] | 0) < ($i$2 | 0)) HEAP32[$arrayidx235 >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($mul224 + 6 << 2) >> 2] = $j$0;
      $wk_max$3 = $wk_max$1;
      break;
     }
     $36 = HEAP16[$add$ptr125 >> 1] | 0;
     if ($36 << 16 >> 16 > 0) {
      HEAP16[$pnt2$3 >> 1] = $36;
      $37 = ($36 << 16 >> 16) * 7 | 0;
      $arrayidx255 = $labelInfo + 1310736 + ($37 + -7 << 2) | 0;
      HEAP32[$arrayidx255 >> 2] = (HEAP32[$arrayidx255 >> 2] | 0) + 1;
      $arrayidx258 = $labelInfo + 1310736 + ($37 + -6 << 2) | 0;
      HEAP32[$arrayidx258 >> 2] = (HEAP32[$arrayidx258 >> 2] | 0) + $i$2;
      $arrayidx261 = $labelInfo + 1310736 + ($37 + -5 << 2) | 0;
      HEAP32[$arrayidx261 >> 2] = (HEAP32[$arrayidx261 >> 2] | 0) + $j$0;
      $add263 = $37 + -3 | 0;
      if ((HEAP32[$labelInfo + 1310736 + ($add263 << 2) >> 2] | 0) < ($i$2 | 0)) {
       $$sink = $i$2;
       $add268$sink = $add263;
       $wk_max$2 = $wk_max$1;
      } else {
       $wk_max$3 = $wk_max$1;
       break;
      }
     } else {
      $inc272 = $wk_max$1 + 1 | 0;
      if (($wk_max$1 | 0) > 32767) {
       label = 50;
       break L9;
      }
      HEAP16[$pnt2$3 >> 1] = $inc272;
      HEAP32[$labelInfo + 1179664 + ($wk_max$1 << 2) >> 2] = $inc272 << 16 >> 16;
      $mul282 = $wk_max$1 * 7 | 0;
      HEAP32[$labelInfo + 1310736 + ($mul282 << 2) >> 2] = 1;
      HEAP32[$labelInfo + 1310736 + ($mul282 + 1 << 2) >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($mul282 + 2 << 2) >> 2] = $j$0;
      HEAP32[$labelInfo + 1310736 + ($mul282 + 3 << 2) >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($mul282 + 4 << 2) >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($mul282 + 5 << 2) >> 2] = $j$0;
      $$sink = $j$0;
      $add268$sink = $mul282 + 6 | 0;
      $wk_max$2 = $inc272;
     }
     HEAP32[$labelInfo + 1310736 + ($add268$sink << 2) >> 2] = $$sink;
     $wk_max$3 = $wk_max$2;
     break;
    }
    $sub66 = ($7 << 16 >> 16) + -1 | 0;
    $arrayidx67 = $labelInfo + 1179664 + ($sub66 << 2) | 0;
    if ($cmp61) {
     $9 = HEAP32[$arrayidx67 >> 2] | 0;
     $10 = HEAP32[$labelInfo + 1179664 + ($sub70 << 2) >> 2] | 0;
     L36 : do if (($9 | 0) > ($10 | 0)) {
      HEAP16[$pnt2$3 >> 1] = $10;
      $k$0 = 0;
      $wk$0 = $arraydecay;
      while (1) {
       if (($k$0 | 0) >= ($wk_max$1 | 0)) {
        $13 = $10;
        break L36;
       }
       if ((HEAP32[$wk$0 >> 2] | 0) == ($9 | 0)) HEAP32[$wk$0 >> 2] = $10;
       $k$0 = $k$0 + 1 | 0;
       $wk$0 = $wk$0 + 4 | 0;
      }
     } else {
      HEAP16[$pnt2$3 >> 1] = $9;
      if (($9 | 0) < ($10 | 0)) {
       $k$1 = 0;
       $wk$1 = $arraydecay;
       while (1) {
        if (($k$1 | 0) >= ($wk_max$1 | 0)) {
         $13 = $9;
         break L36;
        }
        if ((HEAP32[$wk$1 >> 2] | 0) == ($10 | 0)) HEAP32[$wk$1 >> 2] = $9;
        $k$1 = $k$1 + 1 | 0;
        $wk$1 = $wk$1 + 4 | 0;
       }
      } else $13 = $9;
     } while (0);
     $14 = ($13 << 16 >> 16) * 7 | 0;
     $arrayidx114 = $labelInfo + 1310736 + ($14 + -7 << 2) | 0;
     HEAP32[$arrayidx114 >> 2] = (HEAP32[$arrayidx114 >> 2] | 0) + 1;
     $arrayidx117 = $labelInfo + 1310736 + ($14 + -6 << 2) | 0;
     HEAP32[$arrayidx117 >> 2] = (HEAP32[$arrayidx117 >> 2] | 0) + $i$2;
     $arrayidx120 = $labelInfo + 1310736 + ($14 + -5 << 2) | 0;
     HEAP32[$arrayidx120 >> 2] = (HEAP32[$arrayidx120 >> 2] | 0) + $j$0;
     HEAP32[$labelInfo + 1310736 + ($14 + -1 << 2) >> 2] = $j$0;
     $wk_max$3 = $wk_max$1;
     break;
    }
    $18 = HEAP16[$add$ptr125 >> 1] | 0;
    if ($18 << 16 >> 16 <= 0) {
     HEAP16[$pnt2$3 >> 1] = $7;
     $mul193 = $sub66 * 7 | 0;
     $arrayidx195 = $labelInfo + 1310736 + ($mul193 << 2) | 0;
     HEAP32[$arrayidx195 >> 2] = (HEAP32[$arrayidx195 >> 2] | 0) + 1;
     $arrayidx198 = $labelInfo + 1310736 + ($mul193 + 1 << 2) | 0;
     HEAP32[$arrayidx198 >> 2] = (HEAP32[$arrayidx198 >> 2] | 0) + $i$2;
     $arrayidx201 = $labelInfo + 1310736 + ($mul193 + 2 << 2) | 0;
     HEAP32[$arrayidx201 >> 2] = (HEAP32[$arrayidx201 >> 2] | 0) + $j$0;
     $arrayidx204 = $labelInfo + 1310736 + ($mul193 + 3 << 2) | 0;
     if ((HEAP32[$arrayidx204 >> 2] | 0) > ($i$2 | 0)) HEAP32[$arrayidx204 >> 2] = $i$2;
     HEAP32[$labelInfo + 1310736 + ($mul193 + 6 << 2) >> 2] = $j$0;
     $wk_max$3 = $wk_max$1;
     break;
    }
    $19 = HEAP32[$arrayidx67 >> 2] | 0;
    $20 = HEAP32[$labelInfo + 1179664 + (($18 << 16 >> 16) + -1 << 2) >> 2] | 0;
    L59 : do if (($19 | 0) > ($20 | 0)) {
     HEAP16[$pnt2$3 >> 1] = $20;
     $k$2 = 0;
     $wk$2 = $arraydecay;
     while (1) {
      if (($k$2 | 0) >= ($wk_max$1 | 0)) {
       $23 = $20;
       break L59;
      }
      if ((HEAP32[$wk$2 >> 2] | 0) == ($19 | 0)) HEAP32[$wk$2 >> 2] = $20;
      $k$2 = $k$2 + 1 | 0;
      $wk$2 = $wk$2 + 4 | 0;
     }
    } else {
     HEAP16[$pnt2$3 >> 1] = $19;
     if (($19 | 0) < ($20 | 0)) {
      $k$3 = 0;
      $wk$3 = $arraydecay;
      while (1) {
       if (($k$3 | 0) >= ($wk_max$1 | 0)) {
        $23 = $19;
        break L59;
       }
       if ((HEAP32[$wk$3 >> 2] | 0) == ($20 | 0)) HEAP32[$wk$3 >> 2] = $19;
       $k$3 = $k$3 + 1 | 0;
       $wk$3 = $wk$3 + 4 | 0;
      }
     } else $23 = $19;
    } while (0);
    $24 = ($23 << 16 >> 16) * 7 | 0;
    $arrayidx181 = $labelInfo + 1310736 + ($24 + -7 << 2) | 0;
    HEAP32[$arrayidx181 >> 2] = (HEAP32[$arrayidx181 >> 2] | 0) + 1;
    $arrayidx184 = $labelInfo + 1310736 + ($24 + -6 << 2) | 0;
    HEAP32[$arrayidx184 >> 2] = (HEAP32[$arrayidx184 >> 2] | 0) + $i$2;
    $arrayidx187 = $labelInfo + 1310736 + ($24 + -5 << 2) | 0;
    HEAP32[$arrayidx187 >> 2] = (HEAP32[$arrayidx187 >> 2] | 0) + $j$0;
    $wk_max$3 = $wk_max$1;
   } while (0);
   $i$2 = $i$2 + 1 | 0;
   $pnt$1 = $pnt$1 + 2 | 0;
   $pnt2$3 = $pnt2$3 + 2 | 0;
   $wk_max$1 = $wk_max$3;
  }
  $j$0 = $j$0 + 1 | 0;
  $pnt$0 = $pnt$1 + 4 | 0;
  $pnt2$2 = $pnt2$3 + 4 | 0;
  $wk_max$0 = $wk_max$1;
 }
 L77 : do if ((label | 0) == 50) {
  _arLog(3, 3256, $vararg_buffer);
  $retval$0 = -1;
 } else if ((label | 0) == 56) {
  $arrayidx315 = $labelInfo + 12 | 0;
  $i$3 = 1;
  $j$1 = 1;
  $wk$4 = $arraydecay;
  while (1) {
   if (($i$3 | 0) > ($wk_max$0 | 0)) break;
   $42 = HEAP32[$wk$4 >> 2] | 0;
   if (($42 | 0) == ($i$3 | 0)) {
    $cond = $j$1;
    $j$2 = $j$1 + 1 | 0;
   } else {
    $cond = HEAP32[$labelInfo + 1179664 + ($42 + -1 << 2) >> 2] | 0;
    $j$2 = $j$1;
   }
   HEAP32[$wk$4 >> 2] = $cond;
   $i$3 = $i$3 + 1 | 0;
   $j$1 = $j$2;
   $wk$4 = $wk$4 + 4 | 0;
  }
  $label_num313 = $labelInfo + 8 | 0;
  $sub336 = $j$1 + -1 | 0;
  HEAP32[$label_num313 >> 2] = $sub336;
  if (!$sub336) $retval$0 = 0; else {
   _memset($arrayidx315 | 0, 0, $sub336 << 2 | 0) | 0;
   _memset($labelInfo + 655376 | 0, 0, $sub336 << 4 | 0) | 0;
   $44 = $sub336;
   $i$4 = 0;
   while (1) {
    if (($i$4 | 0) >= ($44 | 0)) {
     $i$5 = 0;
     break;
    }
    $mul348 = $i$4 << 2;
    HEAP32[$labelInfo + 131084 + ($mul348 << 2) >> 2] = $xsize;
    HEAP32[$labelInfo + 131084 + (($mul348 | 1) << 2) >> 2] = 0;
    HEAP32[$labelInfo + 131084 + (($mul348 | 2) << 2) >> 2] = $ysize;
    HEAP32[$labelInfo + 131084 + (($mul348 | 3) << 2) >> 2] = 0;
    $44 = HEAP32[$label_num313 >> 2] | 0;
    $i$4 = $i$4 + 1 | 0;
   }
   while (1) {
    if (($i$5 | 0) >= ($wk_max$0 | 0)) {
     $i$6 = 0;
     break;
    }
    $sub368 = (HEAP32[$labelInfo + 1179664 + ($i$5 << 2) >> 2] | 0) + -1 | 0;
    $mul369 = $i$5 * 7 | 0;
    $arrayidx372 = $labelInfo + 12 + ($sub368 << 2) | 0;
    HEAP32[$arrayidx372 >> 2] = (HEAP32[$arrayidx372 >> 2] | 0) + (HEAP32[$labelInfo + 1310736 + ($mul369 << 2) >> 2] | 0);
    $mul378 = $sub368 << 1;
    $arrayidx380 = $labelInfo + 655376 + ($mul378 << 3) | 0;
    HEAPF64[$arrayidx380 >> 3] = +HEAPF64[$arrayidx380 >> 3] + +(HEAP32[$labelInfo + 1310736 + ($mul369 + 1 << 2) >> 2] | 0);
    $arrayidx388 = $labelInfo + 655376 + (($mul378 | 1) << 3) | 0;
    HEAPF64[$arrayidx388 >> 3] = +HEAPF64[$arrayidx388 >> 3] + +(HEAP32[$labelInfo + 1310736 + ($mul369 + 2 << 2) >> 2] | 0);
    $mul390 = $sub368 << 2;
    $arrayidx392 = $labelInfo + 131084 + ($mul390 << 2) | 0;
    $53 = HEAP32[$labelInfo + 1310736 + ($mul369 + 3 << 2) >> 2] | 0;
    if ((HEAP32[$arrayidx392 >> 2] | 0) > ($53 | 0)) HEAP32[$arrayidx392 >> 2] = $53;
    $arrayidx408 = $labelInfo + 131084 + (($mul390 | 1) << 2) | 0;
    $55 = HEAP32[$labelInfo + 1310736 + ($mul369 + 4 << 2) >> 2] | 0;
    if ((HEAP32[$arrayidx408 >> 2] | 0) < ($55 | 0)) HEAP32[$arrayidx408 >> 2] = $55;
    $arrayidx424 = $labelInfo + 131084 + (($mul390 | 2) << 2) | 0;
    $57 = HEAP32[$labelInfo + 1310736 + ($mul369 + 5 << 2) >> 2] | 0;
    if ((HEAP32[$arrayidx424 >> 2] | 0) > ($57 | 0)) HEAP32[$arrayidx424 >> 2] = $57;
    $arrayidx440 = $labelInfo + 131084 + (($mul390 | 3) << 2) | 0;
    $59 = HEAP32[$labelInfo + 1310736 + ($mul369 + 6 << 2) >> 2] | 0;
    if ((HEAP32[$arrayidx440 >> 2] | 0) < ($59 | 0)) HEAP32[$arrayidx440 >> 2] = $59;
    $i$5 = $i$5 + 1 | 0;
   }
   while (1) {
    if (($i$6 | 0) >= (HEAP32[$label_num313 >> 2] | 0)) {
     $retval$0 = 0;
     break L77;
    }
    $arrayidx461 = $labelInfo + 12 + ($i$6 << 2) | 0;
    $mul463 = $i$6 << 1;
    $arrayidx465 = $labelInfo + 655376 + ($mul463 << 3) | 0;
    HEAPF64[$arrayidx465 >> 3] = +HEAPF64[$arrayidx465 >> 3] / +(HEAP32[$arrayidx461 >> 2] | 0);
    $arrayidx470 = $labelInfo + 655376 + (($mul463 | 1) << 3) | 0;
    HEAPF64[$arrayidx470 >> 3] = +HEAPF64[$arrayidx470 >> 3] / +(HEAP32[$arrayidx461 >> 2] | 0);
    $i$6 = $i$6 + 1 | 0;
   }
  }
 } while (0);
 STACKTOP = sp;
 return $retval$0 | 0;
}

function _arLabelingSubDWRC($image, $xsize, $ysize, $labelingThresh, $labelInfo) {
 $image = $image | 0;
 $xsize = $xsize | 0;
 $ysize = $ysize | 0;
 $labelingThresh = $labelingThresh | 0;
 $labelInfo = $labelInfo | 0;
 var $$sink = 0, $0 = 0, $10 = 0, $13 = 0, $14 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $23 = 0, $24 = 0, $3 = 0, $36 = 0, $37 = 0, $42 = 0, $44 = 0, $53 = 0, $55 = 0, $57 = 0, $59 = 0, $7 = 0, $8 = 0, $9 = 0, $add = 0, $add$ptr125 = 0, $add263 = 0, $add268$sink = 0, $arraydecay = 0, $arrayidx114 = 0, $arrayidx117 = 0, $arrayidx120 = 0, $arrayidx181 = 0, $arrayidx184 = 0, $arrayidx187 = 0, $arrayidx195 = 0, $arrayidx198 = 0, $arrayidx201 = 0, $arrayidx204 = 0, $arrayidx226 = 0, $arrayidx229 = 0, $arrayidx232 = 0, $arrayidx235 = 0, $arrayidx255 = 0, $arrayidx258 = 0, $arrayidx261 = 0, $arrayidx315 = 0, $arrayidx35 = 0, $arrayidx372 = 0, $arrayidx380 = 0, $arrayidx388 = 0, $arrayidx392 = 0, $arrayidx408 = 0, $arrayidx424 = 0, $arrayidx44 = 0, $arrayidx440 = 0, $arrayidx461 = 0, $arrayidx465 = 0, $arrayidx47 = 0, $arrayidx470 = 0, $arrayidx50 = 0, $arrayidx67 = 0, $cmp61 = 0, $cond = 0, $i$0 = 0, $i$1 = 0, $i$2 = 0, $i$3 = 0, $i$4 = 0, $i$5 = 0, $i$6 = 0, $inc272 = 0, $j$0 = 0, $j$1 = 0, $j$2 = 0, $k$0 = 0, $k$1 = 0, $k$2 = 0, $k$3 = 0, $label_num313 = 0, $mul193 = 0, $mul224 = 0, $mul282 = 0, $mul348 = 0, $mul369 = 0, $mul378 = 0, $mul390 = 0, $mul463 = 0, $pnt$0 = 0, $pnt$1 = 0, $pnt1$0 = 0, $pnt1$1 = 0, $pnt2$0 = 0, $pnt2$1 = 0, $pnt2$2 = 0, $pnt2$3 = 0, $retval$0 = 0, $sub = 0, $sub336 = 0, $sub34 = 0, $sub368 = 0, $sub66 = 0, $sub7 = 0, $sub70 = 0, $vararg_buffer = 0, $wk$0 = 0, $wk$1 = 0, $wk$2 = 0, $wk$3 = 0, $wk$4 = 0, $wk_max$0 = 0, $wk_max$1 = 0, $wk_max$2 = 0, $wk_max$3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $vararg_buffer = sp;
 $0 = HEAP32[$labelInfo >> 2] | 0;
 $sub = $ysize + -1 | 0;
 $i$0 = 0;
 $pnt1$0 = $0;
 $pnt2$0 = $0 + ((Math_imul($sub, $xsize) | 0) << 1) | 0;
 while (1) {
  if (($i$0 | 0) >= ($xsize | 0)) break;
  HEAP16[$pnt2$0 >> 1] = 0;
  HEAP16[$pnt1$0 >> 1] = 0;
  $i$0 = $i$0 + 1 | 0;
  $pnt1$0 = $pnt1$0 + 2 | 0;
  $pnt2$0 = $pnt2$0 + 2 | 0;
 }
 $sub7 = $xsize + -1 | 0;
 $i$1 = 0;
 $pnt1$1 = $0;
 $pnt2$1 = $0 + ($sub7 << 1) | 0;
 while (1) {
  if (($i$1 | 0) >= ($ysize | 0)) break;
  HEAP16[$pnt2$1 >> 1] = 0;
  HEAP16[$pnt1$1 >> 1] = 0;
  $i$1 = $i$1 + 1 | 0;
  $pnt1$1 = $pnt1$1 + ($xsize << 1) | 0;
  $pnt2$1 = $pnt2$1 + ($xsize << 1) | 0;
 }
 $arraydecay = $labelInfo + 1179664 | 0;
 $add = $xsize + 1 | 0;
 $sub34 = 0 - $xsize | 0;
 $j$0 = 1;
 $pnt$0 = $image + $add | 0;
 $pnt2$2 = $0 + ($add << 1) | 0;
 $wk_max$0 = 0;
 L9 : while (1) {
  if (($j$0 | 0) < ($sub | 0)) {
   $i$2 = 1;
   $pnt$1 = $pnt$0;
   $pnt2$3 = $pnt2$2;
   $wk_max$1 = $wk_max$0;
  } else {
   label = 56;
   break;
  }
  while (1) {
   if (($i$2 | 0) >= ($sub7 | 0)) break;
   do if ((HEAPU8[$pnt$1 >> 0] | 0 | 0) > ($labelingThresh | 0)) {
    $arrayidx35 = $pnt2$3 + ($sub34 << 1) | 0;
    $2 = HEAP16[$arrayidx35 >> 1] | 0;
    if ($2 << 16 >> 16 > 0) {
     HEAP16[$pnt2$3 >> 1] = $2;
     $3 = ($2 << 16 >> 16) * 7 | 0;
     $arrayidx44 = $labelInfo + 1310736 + ($3 + -7 << 2) | 0;
     HEAP32[$arrayidx44 >> 2] = (HEAP32[$arrayidx44 >> 2] | 0) + 1;
     $arrayidx47 = $labelInfo + 1310736 + ($3 + -6 << 2) | 0;
     HEAP32[$arrayidx47 >> 2] = (HEAP32[$arrayidx47 >> 2] | 0) + $i$2;
     $arrayidx50 = $labelInfo + 1310736 + ($3 + -5 << 2) | 0;
     HEAP32[$arrayidx50 >> 2] = (HEAP32[$arrayidx50 >> 2] | 0) + $j$0;
     HEAP32[$labelInfo + 1310736 + ($3 + -1 << 2) >> 2] = $j$0;
     $wk_max$3 = $wk_max$1;
     break;
    }
    $7 = HEAP16[$arrayidx35 + 2 >> 1] | 0;
    $8 = HEAP16[$arrayidx35 + -2 >> 1] | 0;
    $cmp61 = $8 << 16 >> 16 > 0;
    $add$ptr125 = $pnt2$3 + -2 | 0;
    $sub70 = ($8 << 16 >> 16) + -1 | 0;
    if ($7 << 16 >> 16 <= 0) {
     if ($cmp61) {
      HEAP16[$pnt2$3 >> 1] = $8;
      $mul224 = $sub70 * 7 | 0;
      $arrayidx226 = $labelInfo + 1310736 + ($mul224 << 2) | 0;
      HEAP32[$arrayidx226 >> 2] = (HEAP32[$arrayidx226 >> 2] | 0) + 1;
      $arrayidx229 = $labelInfo + 1310736 + ($mul224 + 1 << 2) | 0;
      HEAP32[$arrayidx229 >> 2] = (HEAP32[$arrayidx229 >> 2] | 0) + $i$2;
      $arrayidx232 = $labelInfo + 1310736 + ($mul224 + 2 << 2) | 0;
      HEAP32[$arrayidx232 >> 2] = (HEAP32[$arrayidx232 >> 2] | 0) + $j$0;
      $arrayidx235 = $labelInfo + 1310736 + ($mul224 + 4 << 2) | 0;
      if ((HEAP32[$arrayidx235 >> 2] | 0) < ($i$2 | 0)) HEAP32[$arrayidx235 >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($mul224 + 6 << 2) >> 2] = $j$0;
      $wk_max$3 = $wk_max$1;
      break;
     }
     $36 = HEAP16[$add$ptr125 >> 1] | 0;
     if ($36 << 16 >> 16 > 0) {
      HEAP16[$pnt2$3 >> 1] = $36;
      $37 = ($36 << 16 >> 16) * 7 | 0;
      $arrayidx255 = $labelInfo + 1310736 + ($37 + -7 << 2) | 0;
      HEAP32[$arrayidx255 >> 2] = (HEAP32[$arrayidx255 >> 2] | 0) + 1;
      $arrayidx258 = $labelInfo + 1310736 + ($37 + -6 << 2) | 0;
      HEAP32[$arrayidx258 >> 2] = (HEAP32[$arrayidx258 >> 2] | 0) + $i$2;
      $arrayidx261 = $labelInfo + 1310736 + ($37 + -5 << 2) | 0;
      HEAP32[$arrayidx261 >> 2] = (HEAP32[$arrayidx261 >> 2] | 0) + $j$0;
      $add263 = $37 + -3 | 0;
      if ((HEAP32[$labelInfo + 1310736 + ($add263 << 2) >> 2] | 0) < ($i$2 | 0)) {
       $$sink = $i$2;
       $add268$sink = $add263;
       $wk_max$2 = $wk_max$1;
      } else {
       $wk_max$3 = $wk_max$1;
       break;
      }
     } else {
      $inc272 = $wk_max$1 + 1 | 0;
      if (($wk_max$1 | 0) > 32767) {
       label = 50;
       break L9;
      }
      HEAP16[$pnt2$3 >> 1] = $inc272;
      HEAP32[$labelInfo + 1179664 + ($wk_max$1 << 2) >> 2] = $inc272 << 16 >> 16;
      $mul282 = $wk_max$1 * 7 | 0;
      HEAP32[$labelInfo + 1310736 + ($mul282 << 2) >> 2] = 1;
      HEAP32[$labelInfo + 1310736 + ($mul282 + 1 << 2) >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($mul282 + 2 << 2) >> 2] = $j$0;
      HEAP32[$labelInfo + 1310736 + ($mul282 + 3 << 2) >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($mul282 + 4 << 2) >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($mul282 + 5 << 2) >> 2] = $j$0;
      $$sink = $j$0;
      $add268$sink = $mul282 + 6 | 0;
      $wk_max$2 = $inc272;
     }
     HEAP32[$labelInfo + 1310736 + ($add268$sink << 2) >> 2] = $$sink;
     $wk_max$3 = $wk_max$2;
     break;
    }
    $sub66 = ($7 << 16 >> 16) + -1 | 0;
    $arrayidx67 = $labelInfo + 1179664 + ($sub66 << 2) | 0;
    if ($cmp61) {
     $9 = HEAP32[$arrayidx67 >> 2] | 0;
     $10 = HEAP32[$labelInfo + 1179664 + ($sub70 << 2) >> 2] | 0;
     L35 : do if (($9 | 0) > ($10 | 0)) {
      HEAP16[$pnt2$3 >> 1] = $10;
      $k$0 = 0;
      $wk$0 = $arraydecay;
      while (1) {
       if (($k$0 | 0) >= ($wk_max$1 | 0)) {
        $13 = $10;
        break L35;
       }
       if ((HEAP32[$wk$0 >> 2] | 0) == ($9 | 0)) HEAP32[$wk$0 >> 2] = $10;
       $k$0 = $k$0 + 1 | 0;
       $wk$0 = $wk$0 + 4 | 0;
      }
     } else {
      HEAP16[$pnt2$3 >> 1] = $9;
      if (($9 | 0) < ($10 | 0)) {
       $k$1 = 0;
       $wk$1 = $arraydecay;
       while (1) {
        if (($k$1 | 0) >= ($wk_max$1 | 0)) {
         $13 = $9;
         break L35;
        }
        if ((HEAP32[$wk$1 >> 2] | 0) == ($10 | 0)) HEAP32[$wk$1 >> 2] = $9;
        $k$1 = $k$1 + 1 | 0;
        $wk$1 = $wk$1 + 4 | 0;
       }
      } else $13 = $9;
     } while (0);
     $14 = ($13 << 16 >> 16) * 7 | 0;
     $arrayidx114 = $labelInfo + 1310736 + ($14 + -7 << 2) | 0;
     HEAP32[$arrayidx114 >> 2] = (HEAP32[$arrayidx114 >> 2] | 0) + 1;
     $arrayidx117 = $labelInfo + 1310736 + ($14 + -6 << 2) | 0;
     HEAP32[$arrayidx117 >> 2] = (HEAP32[$arrayidx117 >> 2] | 0) + $i$2;
     $arrayidx120 = $labelInfo + 1310736 + ($14 + -5 << 2) | 0;
     HEAP32[$arrayidx120 >> 2] = (HEAP32[$arrayidx120 >> 2] | 0) + $j$0;
     HEAP32[$labelInfo + 1310736 + ($14 + -1 << 2) >> 2] = $j$0;
     $wk_max$3 = $wk_max$1;
     break;
    }
    $18 = HEAP16[$add$ptr125 >> 1] | 0;
    if ($18 << 16 >> 16 <= 0) {
     HEAP16[$pnt2$3 >> 1] = $7;
     $mul193 = $sub66 * 7 | 0;
     $arrayidx195 = $labelInfo + 1310736 + ($mul193 << 2) | 0;
     HEAP32[$arrayidx195 >> 2] = (HEAP32[$arrayidx195 >> 2] | 0) + 1;
     $arrayidx198 = $labelInfo + 1310736 + ($mul193 + 1 << 2) | 0;
     HEAP32[$arrayidx198 >> 2] = (HEAP32[$arrayidx198 >> 2] | 0) + $i$2;
     $arrayidx201 = $labelInfo + 1310736 + ($mul193 + 2 << 2) | 0;
     HEAP32[$arrayidx201 >> 2] = (HEAP32[$arrayidx201 >> 2] | 0) + $j$0;
     $arrayidx204 = $labelInfo + 1310736 + ($mul193 + 3 << 2) | 0;
     if ((HEAP32[$arrayidx204 >> 2] | 0) > ($i$2 | 0)) HEAP32[$arrayidx204 >> 2] = $i$2;
     HEAP32[$labelInfo + 1310736 + ($mul193 + 6 << 2) >> 2] = $j$0;
     $wk_max$3 = $wk_max$1;
     break;
    }
    $19 = HEAP32[$arrayidx67 >> 2] | 0;
    $20 = HEAP32[$labelInfo + 1179664 + (($18 << 16 >> 16) + -1 << 2) >> 2] | 0;
    L58 : do if (($19 | 0) > ($20 | 0)) {
     HEAP16[$pnt2$3 >> 1] = $20;
     $k$2 = 0;
     $wk$2 = $arraydecay;
     while (1) {
      if (($k$2 | 0) >= ($wk_max$1 | 0)) {
       $23 = $20;
       break L58;
      }
      if ((HEAP32[$wk$2 >> 2] | 0) == ($19 | 0)) HEAP32[$wk$2 >> 2] = $20;
      $k$2 = $k$2 + 1 | 0;
      $wk$2 = $wk$2 + 4 | 0;
     }
    } else {
     HEAP16[$pnt2$3 >> 1] = $19;
     if (($19 | 0) < ($20 | 0)) {
      $k$3 = 0;
      $wk$3 = $arraydecay;
      while (1) {
       if (($k$3 | 0) >= ($wk_max$1 | 0)) {
        $23 = $19;
        break L58;
       }
       if ((HEAP32[$wk$3 >> 2] | 0) == ($20 | 0)) HEAP32[$wk$3 >> 2] = $19;
       $k$3 = $k$3 + 1 | 0;
       $wk$3 = $wk$3 + 4 | 0;
      }
     } else $23 = $19;
    } while (0);
    $24 = ($23 << 16 >> 16) * 7 | 0;
    $arrayidx181 = $labelInfo + 1310736 + ($24 + -7 << 2) | 0;
    HEAP32[$arrayidx181 >> 2] = (HEAP32[$arrayidx181 >> 2] | 0) + 1;
    $arrayidx184 = $labelInfo + 1310736 + ($24 + -6 << 2) | 0;
    HEAP32[$arrayidx184 >> 2] = (HEAP32[$arrayidx184 >> 2] | 0) + $i$2;
    $arrayidx187 = $labelInfo + 1310736 + ($24 + -5 << 2) | 0;
    HEAP32[$arrayidx187 >> 2] = (HEAP32[$arrayidx187 >> 2] | 0) + $j$0;
    $wk_max$3 = $wk_max$1;
   } else {
    HEAP16[$pnt2$3 >> 1] = 0;
    $wk_max$3 = $wk_max$1;
   } while (0);
   $i$2 = $i$2 + 1 | 0;
   $pnt$1 = $pnt$1 + 1 | 0;
   $pnt2$3 = $pnt2$3 + 2 | 0;
   $wk_max$1 = $wk_max$3;
  }
  $j$0 = $j$0 + 1 | 0;
  $pnt$0 = $pnt$1 + 2 | 0;
  $pnt2$2 = $pnt2$3 + 4 | 0;
  $wk_max$0 = $wk_max$1;
 }
 L77 : do if ((label | 0) == 50) {
  _arLog(3, 3256, $vararg_buffer);
  $retval$0 = -1;
 } else if ((label | 0) == 56) {
  $arrayidx315 = $labelInfo + 12 | 0;
  $i$3 = 1;
  $j$1 = 1;
  $wk$4 = $arraydecay;
  while (1) {
   if (($i$3 | 0) > ($wk_max$0 | 0)) break;
   $42 = HEAP32[$wk$4 >> 2] | 0;
   if (($42 | 0) == ($i$3 | 0)) {
    $cond = $j$1;
    $j$2 = $j$1 + 1 | 0;
   } else {
    $cond = HEAP32[$labelInfo + 1179664 + ($42 + -1 << 2) >> 2] | 0;
    $j$2 = $j$1;
   }
   HEAP32[$wk$4 >> 2] = $cond;
   $i$3 = $i$3 + 1 | 0;
   $j$1 = $j$2;
   $wk$4 = $wk$4 + 4 | 0;
  }
  $label_num313 = $labelInfo + 8 | 0;
  $sub336 = $j$1 + -1 | 0;
  HEAP32[$label_num313 >> 2] = $sub336;
  if (!$sub336) $retval$0 = 0; else {
   _memset($arrayidx315 | 0, 0, $sub336 << 2 | 0) | 0;
   _memset($labelInfo + 655376 | 0, 0, $sub336 << 4 | 0) | 0;
   $44 = $sub336;
   $i$4 = 0;
   while (1) {
    if (($i$4 | 0) >= ($44 | 0)) {
     $i$5 = 0;
     break;
    }
    $mul348 = $i$4 << 2;
    HEAP32[$labelInfo + 131084 + ($mul348 << 2) >> 2] = $xsize;
    HEAP32[$labelInfo + 131084 + (($mul348 | 1) << 2) >> 2] = 0;
    HEAP32[$labelInfo + 131084 + (($mul348 | 2) << 2) >> 2] = $ysize;
    HEAP32[$labelInfo + 131084 + (($mul348 | 3) << 2) >> 2] = 0;
    $44 = HEAP32[$label_num313 >> 2] | 0;
    $i$4 = $i$4 + 1 | 0;
   }
   while (1) {
    if (($i$5 | 0) >= ($wk_max$0 | 0)) {
     $i$6 = 0;
     break;
    }
    $sub368 = (HEAP32[$labelInfo + 1179664 + ($i$5 << 2) >> 2] | 0) + -1 | 0;
    $mul369 = $i$5 * 7 | 0;
    $arrayidx372 = $labelInfo + 12 + ($sub368 << 2) | 0;
    HEAP32[$arrayidx372 >> 2] = (HEAP32[$arrayidx372 >> 2] | 0) + (HEAP32[$labelInfo + 1310736 + ($mul369 << 2) >> 2] | 0);
    $mul378 = $sub368 << 1;
    $arrayidx380 = $labelInfo + 655376 + ($mul378 << 3) | 0;
    HEAPF64[$arrayidx380 >> 3] = +HEAPF64[$arrayidx380 >> 3] + +(HEAP32[$labelInfo + 1310736 + ($mul369 + 1 << 2) >> 2] | 0);
    $arrayidx388 = $labelInfo + 655376 + (($mul378 | 1) << 3) | 0;
    HEAPF64[$arrayidx388 >> 3] = +HEAPF64[$arrayidx388 >> 3] + +(HEAP32[$labelInfo + 1310736 + ($mul369 + 2 << 2) >> 2] | 0);
    $mul390 = $sub368 << 2;
    $arrayidx392 = $labelInfo + 131084 + ($mul390 << 2) | 0;
    $53 = HEAP32[$labelInfo + 1310736 + ($mul369 + 3 << 2) >> 2] | 0;
    if ((HEAP32[$arrayidx392 >> 2] | 0) > ($53 | 0)) HEAP32[$arrayidx392 >> 2] = $53;
    $arrayidx408 = $labelInfo + 131084 + (($mul390 | 1) << 2) | 0;
    $55 = HEAP32[$labelInfo + 1310736 + ($mul369 + 4 << 2) >> 2] | 0;
    if ((HEAP32[$arrayidx408 >> 2] | 0) < ($55 | 0)) HEAP32[$arrayidx408 >> 2] = $55;
    $arrayidx424 = $labelInfo + 131084 + (($mul390 | 2) << 2) | 0;
    $57 = HEAP32[$labelInfo + 1310736 + ($mul369 + 5 << 2) >> 2] | 0;
    if ((HEAP32[$arrayidx424 >> 2] | 0) > ($57 | 0)) HEAP32[$arrayidx424 >> 2] = $57;
    $arrayidx440 = $labelInfo + 131084 + (($mul390 | 3) << 2) | 0;
    $59 = HEAP32[$labelInfo + 1310736 + ($mul369 + 6 << 2) >> 2] | 0;
    if ((HEAP32[$arrayidx440 >> 2] | 0) < ($59 | 0)) HEAP32[$arrayidx440 >> 2] = $59;
    $i$5 = $i$5 + 1 | 0;
   }
   while (1) {
    if (($i$6 | 0) >= (HEAP32[$label_num313 >> 2] | 0)) {
     $retval$0 = 0;
     break L77;
    }
    $arrayidx461 = $labelInfo + 12 + ($i$6 << 2) | 0;
    $mul463 = $i$6 << 1;
    $arrayidx465 = $labelInfo + 655376 + ($mul463 << 3) | 0;
    HEAPF64[$arrayidx465 >> 3] = +HEAPF64[$arrayidx465 >> 3] / +(HEAP32[$arrayidx461 >> 2] | 0);
    $arrayidx470 = $labelInfo + 655376 + (($mul463 | 1) << 3) | 0;
    HEAPF64[$arrayidx470 >> 3] = +HEAPF64[$arrayidx470 >> 3] / +(HEAP32[$arrayidx461 >> 2] | 0);
    $i$6 = $i$6 + 1 | 0;
   }
  }
 } while (0);
 STACKTOP = sp;
 return $retval$0 | 0;
}

function _arLabelingSubDBRC($image, $xsize, $ysize, $labelingThresh, $labelInfo) {
 $image = $image | 0;
 $xsize = $xsize | 0;
 $ysize = $ysize | 0;
 $labelingThresh = $labelingThresh | 0;
 $labelInfo = $labelInfo | 0;
 var $$sink = 0, $0 = 0, $10 = 0, $13 = 0, $14 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $23 = 0, $24 = 0, $3 = 0, $36 = 0, $37 = 0, $42 = 0, $44 = 0, $53 = 0, $55 = 0, $57 = 0, $59 = 0, $7 = 0, $8 = 0, $9 = 0, $add = 0, $add$ptr125 = 0, $add263 = 0, $add268$sink = 0, $arraydecay = 0, $arrayidx114 = 0, $arrayidx117 = 0, $arrayidx120 = 0, $arrayidx181 = 0, $arrayidx184 = 0, $arrayidx187 = 0, $arrayidx195 = 0, $arrayidx198 = 0, $arrayidx201 = 0, $arrayidx204 = 0, $arrayidx226 = 0, $arrayidx229 = 0, $arrayidx232 = 0, $arrayidx235 = 0, $arrayidx255 = 0, $arrayidx258 = 0, $arrayidx261 = 0, $arrayidx315 = 0, $arrayidx35 = 0, $arrayidx372 = 0, $arrayidx380 = 0, $arrayidx388 = 0, $arrayidx392 = 0, $arrayidx408 = 0, $arrayidx424 = 0, $arrayidx44 = 0, $arrayidx440 = 0, $arrayidx461 = 0, $arrayidx465 = 0, $arrayidx47 = 0, $arrayidx470 = 0, $arrayidx50 = 0, $arrayidx67 = 0, $cmp61 = 0, $cond = 0, $i$0 = 0, $i$1 = 0, $i$2 = 0, $i$3 = 0, $i$4 = 0, $i$5 = 0, $i$6 = 0, $inc272 = 0, $j$0 = 0, $j$1 = 0, $j$2 = 0, $k$0 = 0, $k$1 = 0, $k$2 = 0, $k$3 = 0, $label_num313 = 0, $mul193 = 0, $mul224 = 0, $mul282 = 0, $mul348 = 0, $mul369 = 0, $mul378 = 0, $mul390 = 0, $mul463 = 0, $pnt$0 = 0, $pnt$1 = 0, $pnt1$0 = 0, $pnt1$1 = 0, $pnt2$0 = 0, $pnt2$1 = 0, $pnt2$2 = 0, $pnt2$3 = 0, $retval$0 = 0, $sub = 0, $sub336 = 0, $sub34 = 0, $sub368 = 0, $sub66 = 0, $sub7 = 0, $sub70 = 0, $vararg_buffer = 0, $wk$0 = 0, $wk$1 = 0, $wk$2 = 0, $wk$3 = 0, $wk$4 = 0, $wk_max$0 = 0, $wk_max$1 = 0, $wk_max$2 = 0, $wk_max$3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $vararg_buffer = sp;
 $0 = HEAP32[$labelInfo >> 2] | 0;
 $sub = $ysize + -1 | 0;
 $i$0 = 0;
 $pnt1$0 = $0;
 $pnt2$0 = $0 + ((Math_imul($sub, $xsize) | 0) << 1) | 0;
 while (1) {
  if (($i$0 | 0) >= ($xsize | 0)) break;
  HEAP16[$pnt2$0 >> 1] = 0;
  HEAP16[$pnt1$0 >> 1] = 0;
  $i$0 = $i$0 + 1 | 0;
  $pnt1$0 = $pnt1$0 + 2 | 0;
  $pnt2$0 = $pnt2$0 + 2 | 0;
 }
 $sub7 = $xsize + -1 | 0;
 $i$1 = 0;
 $pnt1$1 = $0;
 $pnt2$1 = $0 + ($sub7 << 1) | 0;
 while (1) {
  if (($i$1 | 0) >= ($ysize | 0)) break;
  HEAP16[$pnt2$1 >> 1] = 0;
  HEAP16[$pnt1$1 >> 1] = 0;
  $i$1 = $i$1 + 1 | 0;
  $pnt1$1 = $pnt1$1 + ($xsize << 1) | 0;
  $pnt2$1 = $pnt2$1 + ($xsize << 1) | 0;
 }
 $arraydecay = $labelInfo + 1179664 | 0;
 $add = $xsize + 1 | 0;
 $sub34 = 0 - $xsize | 0;
 $j$0 = 1;
 $pnt$0 = $image + $add | 0;
 $pnt2$2 = $0 + ($add << 1) | 0;
 $wk_max$0 = 0;
 L9 : while (1) {
  if (($j$0 | 0) < ($sub | 0)) {
   $i$2 = 1;
   $pnt$1 = $pnt$0;
   $pnt2$3 = $pnt2$2;
   $wk_max$1 = $wk_max$0;
  } else {
   label = 56;
   break;
  }
  while (1) {
   if (($i$2 | 0) >= ($sub7 | 0)) break;
   do if ((HEAPU8[$pnt$1 >> 0] | 0 | 0) > ($labelingThresh | 0)) {
    HEAP16[$pnt2$3 >> 1] = 0;
    $wk_max$3 = $wk_max$1;
   } else {
    $arrayidx35 = $pnt2$3 + ($sub34 << 1) | 0;
    $2 = HEAP16[$arrayidx35 >> 1] | 0;
    if ($2 << 16 >> 16 > 0) {
     HEAP16[$pnt2$3 >> 1] = $2;
     $3 = ($2 << 16 >> 16) * 7 | 0;
     $arrayidx44 = $labelInfo + 1310736 + ($3 + -7 << 2) | 0;
     HEAP32[$arrayidx44 >> 2] = (HEAP32[$arrayidx44 >> 2] | 0) + 1;
     $arrayidx47 = $labelInfo + 1310736 + ($3 + -6 << 2) | 0;
     HEAP32[$arrayidx47 >> 2] = (HEAP32[$arrayidx47 >> 2] | 0) + $i$2;
     $arrayidx50 = $labelInfo + 1310736 + ($3 + -5 << 2) | 0;
     HEAP32[$arrayidx50 >> 2] = (HEAP32[$arrayidx50 >> 2] | 0) + $j$0;
     HEAP32[$labelInfo + 1310736 + ($3 + -1 << 2) >> 2] = $j$0;
     $wk_max$3 = $wk_max$1;
     break;
    }
    $7 = HEAP16[$arrayidx35 + 2 >> 1] | 0;
    $8 = HEAP16[$arrayidx35 + -2 >> 1] | 0;
    $cmp61 = $8 << 16 >> 16 > 0;
    $add$ptr125 = $pnt2$3 + -2 | 0;
    $sub70 = ($8 << 16 >> 16) + -1 | 0;
    if ($7 << 16 >> 16 <= 0) {
     if ($cmp61) {
      HEAP16[$pnt2$3 >> 1] = $8;
      $mul224 = $sub70 * 7 | 0;
      $arrayidx226 = $labelInfo + 1310736 + ($mul224 << 2) | 0;
      HEAP32[$arrayidx226 >> 2] = (HEAP32[$arrayidx226 >> 2] | 0) + 1;
      $arrayidx229 = $labelInfo + 1310736 + ($mul224 + 1 << 2) | 0;
      HEAP32[$arrayidx229 >> 2] = (HEAP32[$arrayidx229 >> 2] | 0) + $i$2;
      $arrayidx232 = $labelInfo + 1310736 + ($mul224 + 2 << 2) | 0;
      HEAP32[$arrayidx232 >> 2] = (HEAP32[$arrayidx232 >> 2] | 0) + $j$0;
      $arrayidx235 = $labelInfo + 1310736 + ($mul224 + 4 << 2) | 0;
      if ((HEAP32[$arrayidx235 >> 2] | 0) < ($i$2 | 0)) HEAP32[$arrayidx235 >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($mul224 + 6 << 2) >> 2] = $j$0;
      $wk_max$3 = $wk_max$1;
      break;
     }
     $36 = HEAP16[$add$ptr125 >> 1] | 0;
     if ($36 << 16 >> 16 > 0) {
      HEAP16[$pnt2$3 >> 1] = $36;
      $37 = ($36 << 16 >> 16) * 7 | 0;
      $arrayidx255 = $labelInfo + 1310736 + ($37 + -7 << 2) | 0;
      HEAP32[$arrayidx255 >> 2] = (HEAP32[$arrayidx255 >> 2] | 0) + 1;
      $arrayidx258 = $labelInfo + 1310736 + ($37 + -6 << 2) | 0;
      HEAP32[$arrayidx258 >> 2] = (HEAP32[$arrayidx258 >> 2] | 0) + $i$2;
      $arrayidx261 = $labelInfo + 1310736 + ($37 + -5 << 2) | 0;
      HEAP32[$arrayidx261 >> 2] = (HEAP32[$arrayidx261 >> 2] | 0) + $j$0;
      $add263 = $37 + -3 | 0;
      if ((HEAP32[$labelInfo + 1310736 + ($add263 << 2) >> 2] | 0) < ($i$2 | 0)) {
       $$sink = $i$2;
       $add268$sink = $add263;
       $wk_max$2 = $wk_max$1;
      } else {
       $wk_max$3 = $wk_max$1;
       break;
      }
     } else {
      $inc272 = $wk_max$1 + 1 | 0;
      if (($wk_max$1 | 0) > 32767) {
       label = 50;
       break L9;
      }
      HEAP16[$pnt2$3 >> 1] = $inc272;
      HEAP32[$labelInfo + 1179664 + ($wk_max$1 << 2) >> 2] = $inc272 << 16 >> 16;
      $mul282 = $wk_max$1 * 7 | 0;
      HEAP32[$labelInfo + 1310736 + ($mul282 << 2) >> 2] = 1;
      HEAP32[$labelInfo + 1310736 + ($mul282 + 1 << 2) >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($mul282 + 2 << 2) >> 2] = $j$0;
      HEAP32[$labelInfo + 1310736 + ($mul282 + 3 << 2) >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($mul282 + 4 << 2) >> 2] = $i$2;
      HEAP32[$labelInfo + 1310736 + ($mul282 + 5 << 2) >> 2] = $j$0;
      $$sink = $j$0;
      $add268$sink = $mul282 + 6 | 0;
      $wk_max$2 = $inc272;
     }
     HEAP32[$labelInfo + 1310736 + ($add268$sink << 2) >> 2] = $$sink;
     $wk_max$3 = $wk_max$2;
     break;
    }
    $sub66 = ($7 << 16 >> 16) + -1 | 0;
    $arrayidx67 = $labelInfo + 1179664 + ($sub66 << 2) | 0;
    if ($cmp61) {
     $9 = HEAP32[$arrayidx67 >> 2] | 0;
     $10 = HEAP32[$labelInfo + 1179664 + ($sub70 << 2) >> 2] | 0;
     L36 : do if (($9 | 0) > ($10 | 0)) {
      HEAP16[$pnt2$3 >> 1] = $10;
      $k$0 = 0;
      $wk$0 = $arraydecay;
      while (1) {
       if (($k$0 | 0) >= ($wk_max$1 | 0)) {
        $13 = $10;
        break L36;
       }
       if ((HEAP32[$wk$0 >> 2] | 0) == ($9 | 0)) HEAP32[$wk$0 >> 2] = $10;
       $k$0 = $k$0 + 1 | 0;
       $wk$0 = $wk$0 + 4 | 0;
      }
     } else {
      HEAP16[$pnt2$3 >> 1] = $9;
      if (($9 | 0) < ($10 | 0)) {
       $k$1 = 0;
       $wk$1 = $arraydecay;
       while (1) {
        if (($k$1 | 0) >= ($wk_max$1 | 0)) {
         $13 = $9;
         break L36;
        }
        if ((HEAP32[$wk$1 >> 2] | 0) == ($10 | 0)) HEAP32[$wk$1 >> 2] = $9;
        $k$1 = $k$1 + 1 | 0;
        $wk$1 = $wk$1 + 4 | 0;
       }
      } else $13 = $9;
     } while (0);
     $14 = ($13 << 16 >> 16) * 7 | 0;
     $arrayidx114 = $labelInfo + 1310736 + ($14 + -7 << 2) | 0;
     HEAP32[$arrayidx114 >> 2] = (HEAP32[$arrayidx114 >> 2] | 0) + 1;
     $arrayidx117 = $labelInfo + 1310736 + ($14 + -6 << 2) | 0;
     HEAP32[$arrayidx117 >> 2] = (HEAP32[$arrayidx117 >> 2] | 0) + $i$2;
     $arrayidx120 = $labelInfo + 1310736 + ($14 + -5 << 2) | 0;
     HEAP32[$arrayidx120 >> 2] = (HEAP32[$arrayidx120 >> 2] | 0) + $j$0;
     HEAP32[$labelInfo + 1310736 + ($14 + -1 << 2) >> 2] = $j$0;
     $wk_max$3 = $wk_max$1;
     break;
    }
    $18 = HEAP16[$add$ptr125 >> 1] | 0;
    if ($18 << 16 >> 16 <= 0) {
     HEAP16[$pnt2$3 >> 1] = $7;
     $mul193 = $sub66 * 7 | 0;
     $arrayidx195 = $labelInfo + 1310736 + ($mul193 << 2) | 0;
     HEAP32[$arrayidx195 >> 2] = (HEAP32[$arrayidx195 >> 2] | 0) + 1;
     $arrayidx198 = $labelInfo + 1310736 + ($mul193 + 1 << 2) | 0;
     HEAP32[$arrayidx198 >> 2] = (HEAP32[$arrayidx198 >> 2] | 0) + $i$2;
     $arrayidx201 = $labelInfo + 1310736 + ($mul193 + 2 << 2) | 0;
     HEAP32[$arrayidx201 >> 2] = (HEAP32[$arrayidx201 >> 2] | 0) + $j$0;
     $arrayidx204 = $labelInfo + 1310736 + ($mul193 + 3 << 2) | 0;
     if ((HEAP32[$arrayidx204 >> 2] | 0) > ($i$2 | 0)) HEAP32[$arrayidx204 >> 2] = $i$2;
     HEAP32[$labelInfo + 1310736 + ($mul193 + 6 << 2) >> 2] = $j$0;
     $wk_max$3 = $wk_max$1;
     break;
    }
    $19 = HEAP32[$arrayidx67 >> 2] | 0;
    $20 = HEAP32[$labelInfo + 1179664 + (($18 << 16 >> 16) + -1 << 2) >> 2] | 0;
    L59 : do if (($19 | 0) > ($20 | 0)) {
     HEAP16[$pnt2$3 >> 1] = $20;
     $k$2 = 0;
     $wk$2 = $arraydecay;
     while (1) {
      if (($k$2 | 0) >= ($wk_max$1 | 0)) {
       $23 = $20;
       break L59;
      }
      if ((HEAP32[$wk$2 >> 2] | 0) == ($19 | 0)) HEAP32[$wk$2 >> 2] = $20;
      $k$2 = $k$2 + 1 | 0;
      $wk$2 = $wk$2 + 4 | 0;
     }
    } else {
     HEAP16[$pnt2$3 >> 1] = $19;
     if (($19 | 0) < ($20 | 0)) {
      $k$3 = 0;
      $wk$3 = $arraydecay;
      while (1) {
       if (($k$3 | 0) >= ($wk_max$1 | 0)) {
        $23 = $19;
        break L59;
       }
       if ((HEAP32[$wk$3 >> 2] | 0) == ($20 | 0)) HEAP32[$wk$3 >> 2] = $19;
       $k$3 = $k$3 + 1 | 0;
       $wk$3 = $wk$3 + 4 | 0;
      }
     } else $23 = $19;
    } while (0);
    $24 = ($23 << 16 >> 16) * 7 | 0;
    $arrayidx181 = $labelInfo + 1310736 + ($24 + -7 << 2) | 0;
    HEAP32[$arrayidx181 >> 2] = (HEAP32[$arrayidx181 >> 2] | 0) + 1;
    $arrayidx184 = $labelInfo + 1310736 + ($24 + -6 << 2) | 0;
    HEAP32[$arrayidx184 >> 2] = (HEAP32[$arrayidx184 >> 2] | 0) + $i$2;
    $arrayidx187 = $labelInfo + 1310736 + ($24 + -5 << 2) | 0;
    HEAP32[$arrayidx187 >> 2] = (HEAP32[$arrayidx187 >> 2] | 0) + $j$0;
    $wk_max$3 = $wk_max$1;
   } while (0);
   $i$2 = $i$2 + 1 | 0;
   $pnt$1 = $pnt$1 + 1 | 0;
   $pnt2$3 = $pnt2$3 + 2 | 0;
   $wk_max$1 = $wk_max$3;
  }
  $j$0 = $j$0 + 1 | 0;
  $pnt$0 = $pnt$1 + 2 | 0;
  $pnt2$2 = $pnt2$3 + 4 | 0;
  $wk_max$0 = $wk_max$1;
 }
 L77 : do if ((label | 0) == 50) {
  _arLog(3, 3256, $vararg_buffer);
  $retval$0 = -1;
 } else if ((label | 0) == 56) {
  $arrayidx315 = $labelInfo + 12 | 0;
  $i$3 = 1;
  $j$1 = 1;
  $wk$4 = $arraydecay;
  while (1) {
   if (($i$3 | 0) > ($wk_max$0 | 0)) break;
   $42 = HEAP32[$wk$4 >> 2] | 0;
   if (($42 | 0) == ($i$3 | 0)) {
    $cond = $j$1;
    $j$2 = $j$1 + 1 | 0;
   } else {
    $cond = HEAP32[$labelInfo + 1179664 + ($42 + -1 << 2) >> 2] | 0;
    $j$2 = $j$1;
   }
   HEAP32[$wk$4 >> 2] = $cond;
   $i$3 = $i$3 + 1 | 0;
   $j$1 = $j$2;
   $wk$4 = $wk$4 + 4 | 0;
  }
  $label_num313 = $labelInfo + 8 | 0;
  $sub336 = $j$1 + -1 | 0;
  HEAP32[$label_num313 >> 2] = $sub336;
  if (!$sub336) $retval$0 = 0; else {
   _memset($arrayidx315 | 0, 0, $sub336 << 2 | 0) | 0;
   _memset($labelInfo + 655376 | 0, 0, $sub336 << 4 | 0) | 0;
   $44 = $sub336;
   $i$4 = 0;
   while (1) {
    if (($i$4 | 0) >= ($44 | 0)) {
     $i$5 = 0;
     break;
    }
    $mul348 = $i$4 << 2;
    HEAP32[$labelInfo + 131084 + ($mul348 << 2) >> 2] = $xsize;
    HEAP32[$labelInfo + 131084 + (($mul348 | 1) << 2) >> 2] = 0;
    HEAP32[$labelInfo + 131084 + (($mul348 | 2) << 2) >> 2] = $ysize;
    HEAP32[$labelInfo + 131084 + (($mul348 | 3) << 2) >> 2] = 0;
    $44 = HEAP32[$label_num313 >> 2] | 0;
    $i$4 = $i$4 + 1 | 0;
   }
   while (1) {
    if (($i$5 | 0) >= ($wk_max$0 | 0)) {
     $i$6 = 0;
     break;
    }
    $sub368 = (HEAP32[$labelInfo + 1179664 + ($i$5 << 2) >> 2] | 0) + -1 | 0;
    $mul369 = $i$5 * 7 | 0;
    $arrayidx372 = $labelInfo + 12 + ($sub368 << 2) | 0;
    HEAP32[$arrayidx372 >> 2] = (HEAP32[$arrayidx372 >> 2] | 0) + (HEAP32[$labelInfo + 1310736 + ($mul369 << 2) >> 2] | 0);
    $mul378 = $sub368 << 1;
    $arrayidx380 = $labelInfo + 655376 + ($mul378 << 3) | 0;
    HEAPF64[$arrayidx380 >> 3] = +HEAPF64[$arrayidx380 >> 3] + +(HEAP32[$labelInfo + 1310736 + ($mul369 + 1 << 2) >> 2] | 0);
    $arrayidx388 = $labelInfo + 655376 + (($mul378 | 1) << 3) | 0;
    HEAPF64[$arrayidx388 >> 3] = +HEAPF64[$arrayidx388 >> 3] + +(HEAP32[$labelInfo + 1310736 + ($mul369 + 2 << 2) >> 2] | 0);
    $mul390 = $sub368 << 2;
    $arrayidx392 = $labelInfo + 131084 + ($mul390 << 2) | 0;
    $53 = HEAP32[$labelInfo + 1310736 + ($mul369 + 3 << 2) >> 2] | 0;
    if ((HEAP32[$arrayidx392 >> 2] | 0) > ($53 | 0)) HEAP32[$arrayidx392 >> 2] = $53;
    $arrayidx408 = $labelInfo + 131084 + (($mul390 | 1) << 2) | 0;
    $55 = HEAP32[$labelInfo + 1310736 + ($mul369 + 4 << 2) >> 2] | 0;
    if ((HEAP32[$arrayidx408 >> 2] | 0) < ($55 | 0)) HEAP32[$arrayidx408 >> 2] = $55;
    $arrayidx424 = $labelInfo + 131084 + (($mul390 | 2) << 2) | 0;
    $57 = HEAP32[$labelInfo + 1310736 + ($mul369 + 5 << 2) >> 2] | 0;
    if ((HEAP32[$arrayidx424 >> 2] | 0) > ($57 | 0)) HEAP32[$arrayidx424 >> 2] = $57;
    $arrayidx440 = $labelInfo + 131084 + (($mul390 | 3) << 2) | 0;
    $59 = HEAP32[$labelInfo + 1310736 + ($mul369 + 6 << 2) >> 2] | 0;
    if ((HEAP32[$arrayidx440 >> 2] | 0) < ($59 | 0)) HEAP32[$arrayidx440 >> 2] = $59;
    $i$5 = $i$5 + 1 | 0;
   }
   while (1) {
    if (($i$6 | 0) >= (HEAP32[$label_num313 >> 2] | 0)) {
     $retval$0 = 0;
     break L77;
    }
    $arrayidx461 = $labelInfo + 12 + ($i$6 << 2) | 0;
    $mul463 = $i$6 << 1;
    $arrayidx465 = $labelInfo + 655376 + ($mul463 << 3) | 0;
    HEAPF64[$arrayidx465 >> 3] = +HEAPF64[$arrayidx465 >> 3] / +(HEAP32[$arrayidx461 >> 2] | 0);
    $arrayidx470 = $labelInfo + 655376 + (($mul463 | 1) << 3) | 0;
    HEAPF64[$arrayidx470 >> 3] = +HEAPF64[$arrayidx470 >> 3] / +(HEAP32[$arrayidx461 >> 2] | 0);
    $i$6 = $i$6 + 1 | 0;
   }
  }
 } while (0);
 STACKTOP = sp;
 return $retval$0 | 0;
}

function _free($mem) {
 $mem = $mem | 0;
 var $$pre$phiZ2D = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $23 = 0, $24 = 0, $25 = 0, $27 = 0, $28 = 0, $29 = 0, $31 = 0, $34 = 0, $35 = 0, $4 = 0, $41 = 0, $42 = 0, $43 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $52 = 0, $57 = 0, $58 = 0, $59 = 0, $62 = 0, $63 = 0, $64 = 0, $66 = 0, $69 = 0, $71 = 0, $72 = 0, $9 = 0, $F510$0 = 0, $I534$0 = 0, $K583$0 = 0, $R$1 = 0, $R$3 = 0, $R332$1 = 0, $R332$3 = 0, $RP$1 = 0, $RP360$1 = 0, $T$0 = 0, $add$ptr = 0, $add$ptr16 = 0, $add$ptr6 = 0, $add17 = 0, $add246 = 0, $add258 = 0, $add267 = 0, $add559 = 0, $and = 0, $and5 = 0, $and545 = 0, $and549 = 0, $and554 = 0, $arrayidx = 0, $arrayidx108 = 0, $arrayidx113 = 0, $arrayidx130 = 0, $arrayidx279 = 0, $arrayidx362 = 0, $arrayidx374 = 0, $arrayidx379 = 0, $arrayidx400 = 0, $arrayidx509 = 0, $arrayidx567 = 0, $arrayidx599 = 0, $arrayidx99 = 0, $bk343 = 0, $bk82 = 0, $child = 0, $child171 = 0, $child361 = 0, $child443 = 0, $dec = 0, $fd311 = 0, $fd322$pre$phiZ2D = 0, $fd347 = 0, $fd56 = 0, $fd620 = 0, $fd67$pre$phiZ2D = 0, $fd86 = 0, $head209 = 0, $head231 = 0, $p$1 = 0, $psize$1 = 0, $psize$2 = 0, $shl511 = 0, $shl546 = 0, $shl551 = 0, $shl573 = 0, $shr = 0, $shr268 = 0, $shr501 = 0, $shr535 = 0, $sp$0$i = 0, $sp$0$in$i = 0, label = 0;
 if (!$mem) return;
 $add$ptr = $mem + -8 | 0;
 $0 = HEAP32[4302] | 0;
 if ($add$ptr >>> 0 < $0 >>> 0) _abort();
 $1 = HEAP32[$mem + -4 >> 2] | 0;
 $and = $1 & 3;
 if (($and | 0) == 1) _abort();
 $and5 = $1 & -8;
 $add$ptr6 = $add$ptr + $and5 | 0;
 L10 : do if (!($1 & 1)) {
  $2 = HEAP32[$add$ptr >> 2] | 0;
  if (!$and) return;
  $add$ptr16 = $add$ptr + (0 - $2) | 0;
  $add17 = $2 + $and5 | 0;
  if ($add$ptr16 >>> 0 < $0 >>> 0) _abort();
  if (($add$ptr16 | 0) == (HEAP32[4303] | 0)) {
   $head209 = $add$ptr6 + 4 | 0;
   $27 = HEAP32[$head209 >> 2] | 0;
   if (($27 & 3 | 0) != 3) {
    $28 = $add$ptr16;
    $p$1 = $add$ptr16;
    $psize$1 = $add17;
    break;
   }
   HEAP32[4300] = $add17;
   HEAP32[$head209 >> 2] = $27 & -2;
   HEAP32[$add$ptr16 + 4 >> 2] = $add17 | 1;
   HEAP32[$add$ptr16 + $add17 >> 2] = $add17;
   return;
  }
  $shr = $2 >>> 3;
  if ($2 >>> 0 < 256) {
   $4 = HEAP32[$add$ptr16 + 8 >> 2] | 0;
   $5 = HEAP32[$add$ptr16 + 12 >> 2] | 0;
   $arrayidx = 17232 + ($shr << 1 << 2) | 0;
   if (($4 | 0) != ($arrayidx | 0)) {
    if ($4 >>> 0 < $0 >>> 0) _abort();
    if ((HEAP32[$4 + 12 >> 2] | 0) != ($add$ptr16 | 0)) _abort();
   }
   if (($5 | 0) == ($4 | 0)) {
    HEAP32[4298] = HEAP32[4298] & ~(1 << $shr);
    $28 = $add$ptr16;
    $p$1 = $add$ptr16;
    $psize$1 = $add17;
    break;
   }
   if (($5 | 0) == ($arrayidx | 0)) $fd67$pre$phiZ2D = $5 + 8 | 0; else {
    if ($5 >>> 0 < $0 >>> 0) _abort();
    $fd56 = $5 + 8 | 0;
    if ((HEAP32[$fd56 >> 2] | 0) == ($add$ptr16 | 0)) $fd67$pre$phiZ2D = $fd56; else _abort();
   }
   HEAP32[$4 + 12 >> 2] = $5;
   HEAP32[$fd67$pre$phiZ2D >> 2] = $4;
   $28 = $add$ptr16;
   $p$1 = $add$ptr16;
   $psize$1 = $add17;
   break;
  }
  $9 = HEAP32[$add$ptr16 + 24 >> 2] | 0;
  $10 = HEAP32[$add$ptr16 + 12 >> 2] | 0;
  do if (($10 | 0) == ($add$ptr16 | 0)) {
   $child = $add$ptr16 + 16 | 0;
   $arrayidx99 = $child + 4 | 0;
   $14 = HEAP32[$arrayidx99 >> 2] | 0;
   if (!$14) {
    $15 = HEAP32[$child >> 2] | 0;
    if (!$15) {
     $R$3 = 0;
     break;
    } else {
     $R$1 = $15;
     $RP$1 = $child;
    }
   } else {
    $R$1 = $14;
    $RP$1 = $arrayidx99;
   }
   while (1) {
    $arrayidx108 = $R$1 + 20 | 0;
    $16 = HEAP32[$arrayidx108 >> 2] | 0;
    if ($16 | 0) {
     $R$1 = $16;
     $RP$1 = $arrayidx108;
     continue;
    }
    $arrayidx113 = $R$1 + 16 | 0;
    $17 = HEAP32[$arrayidx113 >> 2] | 0;
    if (!$17) break; else {
     $R$1 = $17;
     $RP$1 = $arrayidx113;
    }
   }
   if ($RP$1 >>> 0 < $0 >>> 0) _abort(); else {
    HEAP32[$RP$1 >> 2] = 0;
    $R$3 = $R$1;
    break;
   }
  } else {
   $11 = HEAP32[$add$ptr16 + 8 >> 2] | 0;
   if ($11 >>> 0 < $0 >>> 0) _abort();
   $bk82 = $11 + 12 | 0;
   if ((HEAP32[$bk82 >> 2] | 0) != ($add$ptr16 | 0)) _abort();
   $fd86 = $10 + 8 | 0;
   if ((HEAP32[$fd86 >> 2] | 0) == ($add$ptr16 | 0)) {
    HEAP32[$bk82 >> 2] = $10;
    HEAP32[$fd86 >> 2] = $11;
    $R$3 = $10;
    break;
   } else _abort();
  } while (0);
  if (!$9) {
   $28 = $add$ptr16;
   $p$1 = $add$ptr16;
   $psize$1 = $add17;
  } else {
   $18 = HEAP32[$add$ptr16 + 28 >> 2] | 0;
   $arrayidx130 = 17496 + ($18 << 2) | 0;
   do if (($add$ptr16 | 0) == (HEAP32[$arrayidx130 >> 2] | 0)) {
    HEAP32[$arrayidx130 >> 2] = $R$3;
    if (!$R$3) {
     HEAP32[4299] = HEAP32[4299] & ~(1 << $18);
     $28 = $add$ptr16;
     $p$1 = $add$ptr16;
     $psize$1 = $add17;
     break L10;
    }
   } else if ($9 >>> 0 < (HEAP32[4302] | 0) >>> 0) _abort(); else {
    HEAP32[$9 + 16 + (((HEAP32[$9 + 16 >> 2] | 0) != ($add$ptr16 | 0) & 1) << 2) >> 2] = $R$3;
    if (!$R$3) {
     $28 = $add$ptr16;
     $p$1 = $add$ptr16;
     $psize$1 = $add17;
     break L10;
    } else break;
   } while (0);
   $23 = HEAP32[4302] | 0;
   if ($R$3 >>> 0 < $23 >>> 0) _abort();
   HEAP32[$R$3 + 24 >> 2] = $9;
   $child171 = $add$ptr16 + 16 | 0;
   $24 = HEAP32[$child171 >> 2] | 0;
   do if ($24 | 0) if ($24 >>> 0 < $23 >>> 0) _abort(); else {
    HEAP32[$R$3 + 16 >> 2] = $24;
    HEAP32[$24 + 24 >> 2] = $R$3;
    break;
   } while (0);
   $25 = HEAP32[$child171 + 4 >> 2] | 0;
   if (!$25) {
    $28 = $add$ptr16;
    $p$1 = $add$ptr16;
    $psize$1 = $add17;
   } else if ($25 >>> 0 < (HEAP32[4302] | 0) >>> 0) _abort(); else {
    HEAP32[$R$3 + 20 >> 2] = $25;
    HEAP32[$25 + 24 >> 2] = $R$3;
    $28 = $add$ptr16;
    $p$1 = $add$ptr16;
    $psize$1 = $add17;
    break;
   }
  }
 } else {
  $28 = $add$ptr;
  $p$1 = $add$ptr;
  $psize$1 = $and5;
 } while (0);
 if ($28 >>> 0 >= $add$ptr6 >>> 0) _abort();
 $head231 = $add$ptr6 + 4 | 0;
 $29 = HEAP32[$head231 >> 2] | 0;
 if (!($29 & 1)) _abort();
 if (!($29 & 2)) {
  $31 = HEAP32[4303] | 0;
  if (($add$ptr6 | 0) == (HEAP32[4304] | 0)) {
   $add246 = (HEAP32[4301] | 0) + $psize$1 | 0;
   HEAP32[4301] = $add246;
   HEAP32[4304] = $p$1;
   HEAP32[$p$1 + 4 >> 2] = $add246 | 1;
   if (($p$1 | 0) != ($31 | 0)) return;
   HEAP32[4303] = 0;
   HEAP32[4300] = 0;
   return;
  }
  if (($add$ptr6 | 0) == ($31 | 0)) {
   $add258 = (HEAP32[4300] | 0) + $psize$1 | 0;
   HEAP32[4300] = $add258;
   HEAP32[4303] = $28;
   HEAP32[$p$1 + 4 >> 2] = $add258 | 1;
   HEAP32[$28 + $add258 >> 2] = $add258;
   return;
  }
  $add267 = ($29 & -8) + $psize$1 | 0;
  $shr268 = $29 >>> 3;
  L108 : do if ($29 >>> 0 < 256) {
   $34 = HEAP32[$add$ptr6 + 8 >> 2] | 0;
   $35 = HEAP32[$add$ptr6 + 12 >> 2] | 0;
   $arrayidx279 = 17232 + ($shr268 << 1 << 2) | 0;
   if (($34 | 0) != ($arrayidx279 | 0)) {
    if ($34 >>> 0 < (HEAP32[4302] | 0) >>> 0) _abort();
    if ((HEAP32[$34 + 12 >> 2] | 0) != ($add$ptr6 | 0)) _abort();
   }
   if (($35 | 0) == ($34 | 0)) {
    HEAP32[4298] = HEAP32[4298] & ~(1 << $shr268);
    break;
   }
   if (($35 | 0) == ($arrayidx279 | 0)) $fd322$pre$phiZ2D = $35 + 8 | 0; else {
    if ($35 >>> 0 < (HEAP32[4302] | 0) >>> 0) _abort();
    $fd311 = $35 + 8 | 0;
    if ((HEAP32[$fd311 >> 2] | 0) == ($add$ptr6 | 0)) $fd322$pre$phiZ2D = $fd311; else _abort();
   }
   HEAP32[$34 + 12 >> 2] = $35;
   HEAP32[$fd322$pre$phiZ2D >> 2] = $34;
  } else {
   $41 = HEAP32[$add$ptr6 + 24 >> 2] | 0;
   $42 = HEAP32[$add$ptr6 + 12 >> 2] | 0;
   do if (($42 | 0) == ($add$ptr6 | 0)) {
    $child361 = $add$ptr6 + 16 | 0;
    $arrayidx362 = $child361 + 4 | 0;
    $47 = HEAP32[$arrayidx362 >> 2] | 0;
    if (!$47) {
     $48 = HEAP32[$child361 >> 2] | 0;
     if (!$48) {
      $R332$3 = 0;
      break;
     } else {
      $R332$1 = $48;
      $RP360$1 = $child361;
     }
    } else {
     $R332$1 = $47;
     $RP360$1 = $arrayidx362;
    }
    while (1) {
     $arrayidx374 = $R332$1 + 20 | 0;
     $49 = HEAP32[$arrayidx374 >> 2] | 0;
     if ($49 | 0) {
      $R332$1 = $49;
      $RP360$1 = $arrayidx374;
      continue;
     }
     $arrayidx379 = $R332$1 + 16 | 0;
     $50 = HEAP32[$arrayidx379 >> 2] | 0;
     if (!$50) break; else {
      $R332$1 = $50;
      $RP360$1 = $arrayidx379;
     }
    }
    if ($RP360$1 >>> 0 < (HEAP32[4302] | 0) >>> 0) _abort(); else {
     HEAP32[$RP360$1 >> 2] = 0;
     $R332$3 = $R332$1;
     break;
    }
   } else {
    $43 = HEAP32[$add$ptr6 + 8 >> 2] | 0;
    if ($43 >>> 0 < (HEAP32[4302] | 0) >>> 0) _abort();
    $bk343 = $43 + 12 | 0;
    if ((HEAP32[$bk343 >> 2] | 0) != ($add$ptr6 | 0)) _abort();
    $fd347 = $42 + 8 | 0;
    if ((HEAP32[$fd347 >> 2] | 0) == ($add$ptr6 | 0)) {
     HEAP32[$bk343 >> 2] = $42;
     HEAP32[$fd347 >> 2] = $43;
     $R332$3 = $42;
     break;
    } else _abort();
   } while (0);
   if ($41 | 0) {
    $52 = HEAP32[$add$ptr6 + 28 >> 2] | 0;
    $arrayidx400 = 17496 + ($52 << 2) | 0;
    do if (($add$ptr6 | 0) == (HEAP32[$arrayidx400 >> 2] | 0)) {
     HEAP32[$arrayidx400 >> 2] = $R332$3;
     if (!$R332$3) {
      HEAP32[4299] = HEAP32[4299] & ~(1 << $52);
      break L108;
     }
    } else if ($41 >>> 0 < (HEAP32[4302] | 0) >>> 0) _abort(); else {
     HEAP32[$41 + 16 + (((HEAP32[$41 + 16 >> 2] | 0) != ($add$ptr6 | 0) & 1) << 2) >> 2] = $R332$3;
     if (!$R332$3) break L108; else break;
    } while (0);
    $57 = HEAP32[4302] | 0;
    if ($R332$3 >>> 0 < $57 >>> 0) _abort();
    HEAP32[$R332$3 + 24 >> 2] = $41;
    $child443 = $add$ptr6 + 16 | 0;
    $58 = HEAP32[$child443 >> 2] | 0;
    do if ($58 | 0) if ($58 >>> 0 < $57 >>> 0) _abort(); else {
     HEAP32[$R332$3 + 16 >> 2] = $58;
     HEAP32[$58 + 24 >> 2] = $R332$3;
     break;
    } while (0);
    $59 = HEAP32[$child443 + 4 >> 2] | 0;
    if ($59 | 0) if ($59 >>> 0 < (HEAP32[4302] | 0) >>> 0) _abort(); else {
     HEAP32[$R332$3 + 20 >> 2] = $59;
     HEAP32[$59 + 24 >> 2] = $R332$3;
     break;
    }
   }
  } while (0);
  HEAP32[$p$1 + 4 >> 2] = $add267 | 1;
  HEAP32[$28 + $add267 >> 2] = $add267;
  if (($p$1 | 0) == (HEAP32[4303] | 0)) {
   HEAP32[4300] = $add267;
   return;
  } else $psize$2 = $add267;
 } else {
  HEAP32[$head231 >> 2] = $29 & -2;
  HEAP32[$p$1 + 4 >> 2] = $psize$1 | 1;
  HEAP32[$28 + $psize$1 >> 2] = $psize$1;
  $psize$2 = $psize$1;
 }
 $shr501 = $psize$2 >>> 3;
 if ($psize$2 >>> 0 < 256) {
  $arrayidx509 = 17232 + ($shr501 << 1 << 2) | 0;
  $62 = HEAP32[4298] | 0;
  $shl511 = 1 << $shr501;
  if (!($62 & $shl511)) {
   HEAP32[4298] = $62 | $shl511;
   $$pre$phiZ2D = $arrayidx509 + 8 | 0;
   $F510$0 = $arrayidx509;
  } else {
   $63 = $arrayidx509 + 8 | 0;
   $64 = HEAP32[$63 >> 2] | 0;
   if ($64 >>> 0 < (HEAP32[4302] | 0) >>> 0) _abort(); else {
    $$pre$phiZ2D = $63;
    $F510$0 = $64;
   }
  }
  HEAP32[$$pre$phiZ2D >> 2] = $p$1;
  HEAP32[$F510$0 + 12 >> 2] = $p$1;
  HEAP32[$p$1 + 8 >> 2] = $F510$0;
  HEAP32[$p$1 + 12 >> 2] = $arrayidx509;
  return;
 }
 $shr535 = $psize$2 >>> 8;
 if (!$shr535) $I534$0 = 0; else if ($psize$2 >>> 0 > 16777215) $I534$0 = 31; else {
  $and545 = ($shr535 + 1048320 | 0) >>> 16 & 8;
  $shl546 = $shr535 << $and545;
  $and549 = ($shl546 + 520192 | 0) >>> 16 & 4;
  $shl551 = $shl546 << $and549;
  $and554 = ($shl551 + 245760 | 0) >>> 16 & 2;
  $add559 = 14 - ($and549 | $and545 | $and554) + ($shl551 << $and554 >>> 15) | 0;
  $I534$0 = $psize$2 >>> ($add559 + 7 | 0) & 1 | $add559 << 1;
 }
 $arrayidx567 = 17496 + ($I534$0 << 2) | 0;
 HEAP32[$p$1 + 28 >> 2] = $I534$0;
 HEAP32[$p$1 + 20 >> 2] = 0;
 HEAP32[$p$1 + 16 >> 2] = 0;
 $66 = HEAP32[4299] | 0;
 $shl573 = 1 << $I534$0;
 do if (!($66 & $shl573)) {
  HEAP32[4299] = $66 | $shl573;
  HEAP32[$arrayidx567 >> 2] = $p$1;
  HEAP32[$p$1 + 24 >> 2] = $arrayidx567;
  HEAP32[$p$1 + 12 >> 2] = $p$1;
  HEAP32[$p$1 + 8 >> 2] = $p$1;
 } else {
  $K583$0 = $psize$2 << (($I534$0 | 0) == 31 ? 0 : 25 - ($I534$0 >>> 1) | 0);
  $T$0 = HEAP32[$arrayidx567 >> 2] | 0;
  while (1) {
   if ((HEAP32[$T$0 + 4 >> 2] & -8 | 0) == ($psize$2 | 0)) {
    label = 124;
    break;
   }
   $arrayidx599 = $T$0 + 16 + ($K583$0 >>> 31 << 2) | 0;
   $69 = HEAP32[$arrayidx599 >> 2] | 0;
   if (!$69) {
    label = 121;
    break;
   } else {
    $K583$0 = $K583$0 << 1;
    $T$0 = $69;
   }
  }
  if ((label | 0) == 121) if ($arrayidx599 >>> 0 < (HEAP32[4302] | 0) >>> 0) _abort(); else {
   HEAP32[$arrayidx599 >> 2] = $p$1;
   HEAP32[$p$1 + 24 >> 2] = $T$0;
   HEAP32[$p$1 + 12 >> 2] = $p$1;
   HEAP32[$p$1 + 8 >> 2] = $p$1;
   break;
  } else if ((label | 0) == 124) {
   $fd620 = $T$0 + 8 | 0;
   $71 = HEAP32[$fd620 >> 2] | 0;
   $72 = HEAP32[4302] | 0;
   if ($71 >>> 0 >= $72 >>> 0 & $T$0 >>> 0 >= $72 >>> 0) {
    HEAP32[$71 + 12 >> 2] = $p$1;
    HEAP32[$fd620 >> 2] = $p$1;
    HEAP32[$p$1 + 8 >> 2] = $71;
    HEAP32[$p$1 + 12 >> 2] = $T$0;
    HEAP32[$p$1 + 24 >> 2] = 0;
    break;
   } else _abort();
  }
 } while (0);
 $dec = (HEAP32[4306] | 0) + -1 | 0;
 HEAP32[4306] = $dec;
 if (!$dec) $sp$0$in$i = 17648; else return;
 while (1) {
  $sp$0$i = HEAP32[$sp$0$in$i >> 2] | 0;
  if (!$sp$0$i) break; else $sp$0$in$i = $sp$0$i + 8 | 0;
 }
 HEAP32[4306] = -1;
 return;
}

function __ZN10__cxxabiv112_GLOBAL__N_118parse_special_nameINS0_2DbEEEPKcS4_S4_RT_($first, $last, $db) {
 $first = $first | 0;
 $last = $last | 0;
 $db = $db | 0;
 var $11 = 0, $13 = 0, $16 = 0, $17 = 0, $19 = 0, $22 = 0, $24 = 0, $26 = 0, $3 = 0, $30 = 0, $32 = 0, $5 = 0, $7 = 0, $9 = 0, $__end_$i162 = 0, $__i$0$i$i$i = 0, $__i$0$i$i$i$i = 0, $__i$0$i$i$i142 = 0, $__i$0$i$i$i150 = 0, $__size_$i1$i$i$i$i = 0, $add$ptr$i159 = 0, $arrayidx = 0, $arrayidx163 = 0, $call = 0, $call15 = 0, $call151 = 0, $call156 = 0, $call185 = 0, $call200 = 0, $call30 = 0, $call45 = 0, $call60 = 0, $call65 = 0, $call69 = 0, $call84 = 0, $call89 = 0, $call97 = 0, $cleanup$dest$slot$4 = 0, $first$addr$11 = 0, $first$addr$8 = 0, $first127 = 0, $first169 = 0, $incdec$ptr = 0, $incdec$ptr$i$i$i = 0, $left = 0, $ref$tmp = 0, $ref$tmp$i$i$i$i = 0, $ref$tmp108 = 0, $ref$tmp109 = 0, $ref$tmp115 = 0, $retval$8 = 0, $tobool$i$i$i$i$i135 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(64);
 $ref$tmp$i$i$i$i = sp + 60 | 0;
 $left = sp + 48 | 0;
 $ref$tmp = sp + 36 | 0;
 $ref$tmp108 = sp + 24 | 0;
 $ref$tmp109 = sp + 12 | 0;
 $ref$tmp115 = sp;
 L1 : do if (($last - $first | 0) > 2) {
  $arrayidx163 = $first + 2 | 0;
  $arrayidx = $first + 1 | 0;
  switch (HEAP8[$first >> 0] | 0) {
  case 84:
   break;
  case 71:
   {
    switch (HEAP8[$arrayidx >> 0] | 0) {
    case 86:
     {
      $call185 = __ZN10__cxxabiv112_GLOBAL__N_110parse_nameINS0_2DbEEEPKcS4_S4_RT_($arrayidx163, $last, $db) | 0;
      if (($call185 | 0) == ($arrayidx163 | 0)) {
       $first$addr$11 = $first;
       label = 60;
       break L1;
      }
      $30 = HEAP32[$db + 4 >> 2] | 0;
      if ((HEAP32[$db >> 2] | 0) == ($30 | 0)) {
       $retval$8 = $first;
       break L1;
      }
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKc($30 + -24 | 0, 0, 16717) | 0;
      $first$addr$11 = $call185;
      label = 60;
      break L1;
      break;
     }
    case 82:
     {
      $call200 = __ZN10__cxxabiv112_GLOBAL__N_110parse_nameINS0_2DbEEEPKcS4_S4_RT_($arrayidx163, $last, $db) | 0;
      if (($call200 | 0) == ($arrayidx163 | 0)) {
       $first$addr$11 = $first;
       label = 60;
       break L1;
      }
      $32 = HEAP32[$db + 4 >> 2] | 0;
      if ((HEAP32[$db >> 2] | 0) == ($32 | 0)) {
       $retval$8 = $first;
       break L1;
      }
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKc($32 + -24 | 0, 0, 16737) | 0;
      $first$addr$11 = $call200;
      label = 60;
      break L1;
      break;
     }
    default:
     {
      $first$addr$11 = $first;
      label = 60;
      break L1;
     }
    }
    break;
   }
  default:
   {
    $first$addr$11 = $first;
    label = 60;
    break L1;
   }
  }
  switch (HEAP8[$arrayidx >> 0] | 0) {
  case 86:
   {
    $call = __ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($arrayidx163, $last, $db) | 0;
    if (($call | 0) == ($arrayidx163 | 0)) {
     $first$addr$11 = $first;
     label = 60;
     break L1;
    }
    $3 = HEAP32[$db + 4 >> 2] | 0;
    if ((HEAP32[$db >> 2] | 0) == ($3 | 0)) {
     $retval$8 = $first;
     break L1;
    }
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKc($3 + -24 | 0, 0, 16566) | 0;
    $first$addr$11 = $call;
    label = 60;
    break L1;
    break;
   }
  case 84:
   {
    $call15 = __ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($arrayidx163, $last, $db) | 0;
    if (($call15 | 0) == ($arrayidx163 | 0)) {
     $first$addr$11 = $first;
     label = 60;
     break L1;
    }
    $5 = HEAP32[$db + 4 >> 2] | 0;
    if ((HEAP32[$db >> 2] | 0) == ($5 | 0)) {
     $retval$8 = $first;
     break L1;
    }
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKc($5 + -24 | 0, 0, 16578) | 0;
    $first$addr$11 = $call15;
    label = 60;
    break L1;
    break;
   }
  case 73:
   {
    $call30 = __ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($arrayidx163, $last, $db) | 0;
    if (($call30 | 0) == ($arrayidx163 | 0)) {
     $first$addr$11 = $first;
     label = 60;
     break L1;
    }
    $7 = HEAP32[$db + 4 >> 2] | 0;
    if ((HEAP32[$db >> 2] | 0) == ($7 | 0)) {
     $retval$8 = $first;
     break L1;
    }
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKc($7 + -24 | 0, 0, 16587) | 0;
    $first$addr$11 = $call30;
    label = 60;
    break L1;
    break;
   }
  case 83:
   {
    $call45 = __ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($arrayidx163, $last, $db) | 0;
    if (($call45 | 0) == ($arrayidx163 | 0)) {
     $first$addr$11 = $first;
     label = 60;
     break L1;
    }
    $9 = HEAP32[$db + 4 >> 2] | 0;
    if ((HEAP32[$db >> 2] | 0) == ($9 | 0)) {
     $retval$8 = $first;
     break L1;
    }
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKc($9 + -24 | 0, 0, 16601) | 0;
    $first$addr$11 = $call45;
    label = 60;
    break L1;
    break;
   }
  case 99:
   {
    $call60 = __ZN10__cxxabiv112_GLOBAL__N_117parse_call_offsetEPKcS2_($arrayidx163, $last) | 0;
    if (($call60 | 0) == ($arrayidx163 | 0)) {
     $first$addr$11 = $first;
     label = 60;
     break L1;
    }
    $call65 = __ZN10__cxxabiv112_GLOBAL__N_117parse_call_offsetEPKcS2_($call60, $last) | 0;
    if (($call65 | 0) == ($call60 | 0)) {
     $first$addr$11 = $first;
     label = 60;
     break L1;
    }
    $call69 = __ZN10__cxxabiv112_GLOBAL__N_114parse_encodingINS0_2DbEEEPKcS4_S4_RT_($call65, $last, $db) | 0;
    if (($call69 | 0) == ($call65 | 0)) {
     $first$addr$11 = $first;
     label = 60;
     break L1;
    }
    $11 = HEAP32[$db + 4 >> 2] | 0;
    if ((HEAP32[$db >> 2] | 0) == ($11 | 0)) {
     $retval$8 = $first;
     break L1;
    }
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKc($11 + -24 | 0, 0, 16620) | 0;
    $first$addr$11 = $call69;
    label = 60;
    break L1;
    break;
   }
  case 67:
   {
    $call84 = __ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($arrayidx163, $last, $db) | 0;
    if (($call84 | 0) == ($arrayidx163 | 0)) {
     $first$addr$11 = $first;
     label = 60;
     break L1;
    }
    $call89 = __ZN10__cxxabiv112_GLOBAL__N_112parse_numberEPKcS2_($call84, $last) | 0;
    if (($call89 | 0) == ($call84 | 0) | ($call89 | 0) == ($last | 0)) {
     $first$addr$11 = $first;
     label = 60;
     break L1;
    }
    if ((HEAP8[$call89 >> 0] | 0) != 95) {
     $first$addr$11 = $first;
     label = 60;
     break L1;
    }
    $incdec$ptr = $call89 + 1 | 0;
    $call97 = __ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($incdec$ptr, $last, $db) | 0;
    if (($call97 | 0) == ($incdec$ptr | 0)) {
     $first$addr$11 = $first;
     label = 60;
     break L1;
    }
    $__end_$i162 = $db + 4 | 0;
    $13 = HEAP32[$__end_$i162 >> 2] | 0;
    if ((($13 - (HEAP32[$db >> 2] | 0) | 0) / 24 | 0) >>> 0 < 2) {
     $retval$8 = $first;
     break L1;
    }
    __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($left, $13 + -24 | 0);
    $16 = HEAP32[$__end_$i162 >> 2] | 0;
    $add$ptr$i159 = $16 + -24 | 0;
    $17 = $16;
    while (1) {
     if (($17 | 0) == ($add$ptr$i159 | 0)) break;
     $incdec$ptr$i$i$i = $17 + -24 | 0;
     HEAP32[$__end_$i162 >> 2] = $incdec$ptr$i$i$i;
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($incdec$ptr$i$i$i);
     $17 = HEAP32[$__end_$i162 >> 2] | 0;
    }
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKc($left, 0, 16647) | 0;
    HEAP32[$ref$tmp109 >> 2] = HEAP32[$left >> 2];
    HEAP32[$ref$tmp109 + 4 >> 2] = HEAP32[$left + 4 >> 2];
    HEAP32[$ref$tmp109 + 8 >> 2] = HEAP32[$left + 8 >> 2];
    $__i$0$i$i$i150 = 0;
    while (1) {
     if (($__i$0$i$i$i150 | 0) == 3) break;
     HEAP32[$left + ($__i$0$i$i$i150 << 2) >> 2] = 0;
     $__i$0$i$i$i150 = $__i$0$i$i$i150 + 1 | 0;
    }
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($ref$tmp109, 16672) | 0;
    HEAP32[$ref$tmp108 >> 2] = HEAP32[$ref$tmp109 >> 2];
    HEAP32[$ref$tmp108 + 4 >> 2] = HEAP32[$ref$tmp109 + 4 >> 2];
    HEAP32[$ref$tmp108 + 8 >> 2] = HEAP32[$ref$tmp109 + 8 >> 2];
    $__i$0$i$i$i142 = 0;
    while (1) {
     if (($__i$0$i$i$i142 | 0) == 3) break;
     HEAP32[$ref$tmp109 + ($__i$0$i$i$i142 << 2) >> 2] = 0;
     $__i$0$i$i$i142 = $__i$0$i$i$i142 + 1 | 0;
    }
    __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($ref$tmp115, (HEAP32[$__end_$i162 >> 2] | 0) + -24 | 0);
    $19 = HEAP8[$ref$tmp115 + 11 >> 0] | 0;
    $tobool$i$i$i$i$i135 = $19 << 24 >> 24 < 0;
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($ref$tmp108, $tobool$i$i$i$i$i135 ? HEAP32[$ref$tmp115 >> 2] | 0 : $ref$tmp115, $tobool$i$i$i$i$i135 ? HEAP32[$ref$tmp115 + 4 >> 2] | 0 : $19 & 255) | 0;
    HEAP32[$ref$tmp >> 2] = HEAP32[$ref$tmp108 >> 2];
    HEAP32[$ref$tmp + 4 >> 2] = HEAP32[$ref$tmp108 + 4 >> 2];
    HEAP32[$ref$tmp + 8 >> 2] = HEAP32[$ref$tmp108 + 8 >> 2];
    $__i$0$i$i$i = 0;
    while (1) {
     if (($__i$0$i$i$i | 0) == 3) break;
     HEAP32[$ref$tmp108 + ($__i$0$i$i$i << 2) >> 2] = 0;
     $__i$0$i$i$i = $__i$0$i$i$i + 1 | 0;
    }
    $22 = HEAP32[$__end_$i162 >> 2] | 0;
    $first127 = $22 + -24 | 0;
    $__size_$i1$i$i$i$i = $first127 + 11 | 0;
    if ((HEAP8[$__size_$i1$i$i$i$i >> 0] | 0) < 0) {
     $24 = HEAP32[$first127 >> 2] | 0;
     HEAP8[$ref$tmp$i$i$i$i >> 0] = 0;
     __ZNSt3__211char_traitsIcE6assignERcRKc($24, $ref$tmp$i$i$i$i);
     HEAP32[$22 + -20 >> 2] = 0;
    } else {
     HEAP8[$ref$tmp$i$i$i$i >> 0] = 0;
     __ZNSt3__211char_traitsIcE6assignERcRKc($first127, $ref$tmp$i$i$i$i);
     HEAP8[$__size_$i1$i$i$i$i >> 0] = 0;
    }
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE7reserveEj($first127);
    HEAP32[$first127 >> 2] = HEAP32[$ref$tmp >> 2];
    HEAP32[$first127 + 4 >> 2] = HEAP32[$ref$tmp + 4 >> 2];
    HEAP32[$first127 + 8 >> 2] = HEAP32[$ref$tmp + 8 >> 2];
    $__i$0$i$i$i$i = 0;
    while (1) {
     if (($__i$0$i$i$i$i | 0) == 3) break;
     HEAP32[$ref$tmp + ($__i$0$i$i$i$i << 2) >> 2] = 0;
     $__i$0$i$i$i$i = $__i$0$i$i$i$i + 1 | 0;
    }
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($ref$tmp);
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($ref$tmp115);
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($ref$tmp108);
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($ref$tmp109);
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($left);
    $first$addr$11 = $call97;
    label = 60;
    break L1;
    break;
   }
  default:
   {
    $call151 = __ZN10__cxxabiv112_GLOBAL__N_117parse_call_offsetEPKcS2_($arrayidx, $last) | 0;
    do if (($call151 | 0) == ($arrayidx | 0)) {
     $cleanup$dest$slot$4 = 3;
     $first$addr$8 = $first;
    } else {
     $call156 = __ZN10__cxxabiv112_GLOBAL__N_114parse_encodingINS0_2DbEEEPKcS4_S4_RT_($call151, $last, $db) | 0;
     if (($call156 | 0) == ($call151 | 0)) {
      $cleanup$dest$slot$4 = 0;
      $first$addr$8 = $first;
     } else {
      $26 = HEAP32[$db + 4 >> 2] | 0;
      if ((HEAP32[$db >> 2] | 0) == ($26 | 0)) {
       $cleanup$dest$slot$4 = 1;
       $first$addr$8 = $first;
      } else {
       $first169 = $26 + -24 | 0;
       if ((HEAP8[$arrayidx163 >> 0] | 0) == 118) {
        __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKc($first169, 0, 16677) | 0;
        $cleanup$dest$slot$4 = 0;
        $first$addr$8 = $call156;
        break;
       } else {
        __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKc($first169, 0, 16695) | 0;
        $cleanup$dest$slot$4 = 0;
        $first$addr$8 = $call156;
        break;
       }
      }
     }
    } while (0);
    switch ($cleanup$dest$slot$4 & 3) {
    case 3:
    case 0:
     {
      $first$addr$11 = $first$addr$8;
      label = 60;
      break L1;
      break;
     }
    default:
     {}
    }
    if (!$cleanup$dest$slot$4) {
     $first$addr$11 = $first$addr$8;
     label = 60;
     break L1;
    } else {
     $retval$8 = $first;
     break L1;
    }
   }
  }
 } else {
  $first$addr$11 = $first;
  label = 60;
 } while (0);
 if ((label | 0) == 60) $retval$8 = $first$addr$11;
 STACKTOP = sp;
 return $retval$8 | 0;
}

function __ZN10__cxxabiv112_GLOBAL__N_117parse_vector_typeINS0_2DbEEEPKcS4_S4_RT_($first, $last, $db) {
 $first = $first | 0;
 $last = $last | 0;
 $db = $db | 0;
 var $12 = 0, $16 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $25 = 0, $9 = 0, $__end_$i = 0, $__end_$i126 = 0, $__end_$i130 = 0, $__end_$i141 = 0, $__i$0$i$i = 0, $__i$0$i$i$i = 0, $__i$0$i$i$i$i = 0, $__i$0$i$i$i107 = 0, $__i$0$i$i$i117 = 0, $__i$0$i$i$i144 = 0, $__i$0$i$i$i75 = 0, $__p$0$i$i = 0, $__p$0$i$i102 = 0, $__size_$i1$i$i$i$i = 0, $add$ptr$i139 = 0, $agg$tmp = 0, $and$i$i$i$i = 0, $and$i$i$i$i95 = 0, $arrayidx6 = 0, $call = 0, $call$i$i$i = 0, $call$i$i$i96 = 0, $call127 = 0, $call27 = 0, $call90 = 0, $first$addr$8$ph = 0, $incdec$ptr = 0, $incdec$ptr$i$i$i = 0, $incdec$ptr122 = 0, $incdec$ptr50 = 0, $ref$tmp = 0, $ref$tmp$i$i$i$i = 0, $ref$tmp33 = 0, $ref$tmp34 = 0, $retval$9 = 0, $sub$ptr$sub21 = 0, $t182$2 = 0, $tobool$i$i$i$i$i = 0, $tobool$i$i$i$i$i157 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(80);
 $ref$tmp$i$i$i$i = sp + 60 | 0;
 $ref$tmp = sp + 24 | 0;
 $ref$tmp33 = sp + 12 | 0;
 $ref$tmp34 = sp;
 $agg$tmp = sp + 48 | 0;
 L1 : do if (($last - $first | 0) > 3) if ((HEAP8[$first >> 0] | 0) == 68) if ((HEAP8[$first + 1 >> 0] | 0) == 118) {
  $arrayidx6 = $first + 2 | 0;
  $2 = HEAP8[$arrayidx6 >> 0] | 0;
  if (($2 + -49 & 255) >= 9) {
   HEAP32[$ref$tmp >> 2] = 0;
   HEAP32[$ref$tmp + 4 >> 2] = 0;
   HEAP32[$ref$tmp + 8 >> 2] = 0;
   $__i$0$i$i = 0;
   while (1) {
    if (($__i$0$i$i | 0) == 3) break;
    HEAP32[$ref$tmp + ($__i$0$i$i << 2) >> 2] = 0;
    $__i$0$i$i = $__i$0$i$i + 1 | 0;
   }
   L11 : do if ($2 << 24 >> 24 == 95) {
    $t182$2 = $arrayidx6;
    label = 53;
   } else {
    $call90 = __ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($arrayidx6, $last, $db) | 0;
    if (($call90 | 0) == ($arrayidx6 | 0)) {
     $t182$2 = $arrayidx6;
     label = 53;
    } else {
     $__end_$i130 = $db + 4 | 0;
     $16 = HEAP32[$__end_$i130 >> 2] | 0;
     if ((HEAP32[$db >> 2] | 0) != ($16 | 0)) {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($ref$tmp33, $16 + -24 | 0);
      $__size_$i1$i$i$i$i = $ref$tmp + 11 | 0;
      if ((HEAP8[$__size_$i1$i$i$i$i >> 0] | 0) < 0) {
       $18 = HEAP32[$ref$tmp >> 2] | 0;
       HEAP8[$ref$tmp$i$i$i$i >> 0] = 0;
       __ZNSt3__211char_traitsIcE6assignERcRKc($18, $ref$tmp$i$i$i$i);
       HEAP32[$ref$tmp + 4 >> 2] = 0;
      } else {
       HEAP8[$ref$tmp$i$i$i$i >> 0] = 0;
       __ZNSt3__211char_traitsIcE6assignERcRKc($ref$tmp, $ref$tmp$i$i$i$i);
       HEAP8[$__size_$i1$i$i$i$i >> 0] = 0;
      }
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE7reserveEj($ref$tmp);
      HEAP32[$ref$tmp >> 2] = HEAP32[$ref$tmp33 >> 2];
      HEAP32[$ref$tmp + 4 >> 2] = HEAP32[$ref$tmp33 + 4 >> 2];
      HEAP32[$ref$tmp + 8 >> 2] = HEAP32[$ref$tmp33 + 8 >> 2];
      $__i$0$i$i$i$i = 0;
      while (1) {
       if (($__i$0$i$i$i$i | 0) == 3) break;
       HEAP32[$ref$tmp33 + ($__i$0$i$i$i$i << 2) >> 2] = 0;
       $__i$0$i$i$i$i = $__i$0$i$i$i$i + 1 | 0;
      }
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($ref$tmp33);
      $19 = HEAP32[$__end_$i130 >> 2] | 0;
      $add$ptr$i139 = $19 + -24 | 0;
      $20 = $19;
      while (1) {
       if (($20 | 0) == ($add$ptr$i139 | 0)) {
        $t182$2 = $call90;
        label = 53;
        break L11;
       }
       $incdec$ptr$i$i$i = $20 + -24 | 0;
       HEAP32[$__end_$i130 >> 2] = $incdec$ptr$i$i$i;
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($incdec$ptr$i$i$i);
       $20 = HEAP32[$__end_$i130 >> 2] | 0;
      }
     }
    }
   } while (0);
   do if ((label | 0) == 53) {
    if (($t182$2 | 0) == ($last | 0)) $first$addr$8$ph = $first; else if ((HEAP8[$t182$2 >> 0] | 0) == 95) {
     $incdec$ptr122 = $t182$2 + 1 | 0;
     if (($incdec$ptr122 | 0) == ($last | 0)) $first$addr$8$ph = $first; else {
      $call127 = __ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($incdec$ptr122, $last, $db) | 0;
      if (($call127 | 0) == ($incdec$ptr122 | 0)) $first$addr$8$ph = $first; else {
       $__end_$i141 = $db + 4 | 0;
       if ((HEAP32[$db >> 2] | 0) == (HEAP32[$__end_$i141 >> 2] | 0)) break;
       __ZNSt3__2plIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEENS_12basic_stringIT_T0_T1_EEPKS8_RKSB_($ref$tmp33, 14925, $ref$tmp);
       __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($ref$tmp33, 14934) | 0;
       HEAP32[$ref$tmp$i$i$i$i >> 2] = HEAP32[$ref$tmp33 >> 2];
       HEAP32[$ref$tmp$i$i$i$i + 4 >> 2] = HEAP32[$ref$tmp33 + 4 >> 2];
       HEAP32[$ref$tmp$i$i$i$i + 8 >> 2] = HEAP32[$ref$tmp33 + 8 >> 2];
       $__i$0$i$i$i144 = 0;
       while (1) {
        if (($__i$0$i$i$i144 | 0) == 3) break;
        HEAP32[$ref$tmp33 + ($__i$0$i$i$i144 << 2) >> 2] = 0;
        $__i$0$i$i$i144 = $__i$0$i$i$i144 + 1 | 0;
       }
       $25 = HEAP8[$ref$tmp$i$i$i$i + 11 >> 0] | 0;
       $tobool$i$i$i$i$i157 = $25 << 24 >> 24 < 0;
       __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj((HEAP32[$__end_$i141 >> 2] | 0) + -24 | 0, $tobool$i$i$i$i$i157 ? HEAP32[$ref$tmp$i$i$i$i >> 2] | 0 : $ref$tmp$i$i$i$i, $tobool$i$i$i$i$i157 ? HEAP32[$ref$tmp$i$i$i$i + 4 >> 2] | 0 : $25 & 255) | 0;
       __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($ref$tmp$i$i$i$i);
       __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($ref$tmp33);
       $first$addr$8$ph = $call127;
      }
     }
    } else $first$addr$8$ph = $first;
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($ref$tmp);
    $retval$9 = $first$addr$8$ph;
    break L1;
   } while (0);
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($ref$tmp);
   $retval$9 = $first;
   break;
  }
  $call = __ZN10__cxxabiv112_GLOBAL__N_112parse_numberEPKcS2_($arrayidx6, $last) | 0;
  if (($call | 0) == ($last | 0)) $retval$9 = $first; else if ((HEAP8[$call >> 0] | 0) == 95) {
   $sub$ptr$sub21 = $call - $arrayidx6 | 0;
   $incdec$ptr = $call + 1 | 0;
   if (($incdec$ptr | 0) == ($last | 0)) $retval$9 = $first; else {
    if ((HEAP8[$incdec$ptr >> 0] | 0) != 112) {
     $call27 = __ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($incdec$ptr, $last, $db) | 0;
     if (($call27 | 0) == ($incdec$ptr | 0)) {
      $retval$9 = $first;
      break;
     }
     $__end_$i = $db + 4 | 0;
     if ((HEAP32[$db >> 2] | 0) == (HEAP32[$__end_$i >> 2] | 0)) {
      $retval$9 = $first;
      break;
     };
     HEAP32[$ref$tmp34 >> 2] = 0;
     HEAP32[$ref$tmp34 + 4 >> 2] = 0;
     HEAP32[$ref$tmp34 + 8 >> 2] = 0;
     if ($sub$ptr$sub21 >>> 0 > 4294967279) __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($ref$tmp34);
     if ($sub$ptr$sub21 >>> 0 < 11) {
      HEAP8[$ref$tmp34 + 11 >> 0] = $sub$ptr$sub21;
      $__p$0$i$i = $ref$tmp34;
     } else {
      $and$i$i$i$i = $sub$ptr$sub21 + 16 & -16;
      $call$i$i$i = __ZN10__cxxabiv112_GLOBAL__N_112malloc_allocIcE8allocateEj($and$i$i$i$i) | 0;
      HEAP32[$ref$tmp34 >> 2] = $call$i$i$i;
      HEAP32[$ref$tmp34 + 8 >> 2] = $and$i$i$i$i | -2147483648;
      HEAP32[$ref$tmp34 + 4 >> 2] = $sub$ptr$sub21;
      $__p$0$i$i = $call$i$i$i;
     }
     __ZNSt3__211char_traitsIcE4copyEPcPKcj($__p$0$i$i, $arrayidx6, $sub$ptr$sub21) | 0;
     HEAP8[$ref$tmp$i$i$i$i >> 0] = 0;
     __ZNSt3__211char_traitsIcE6assignERcRKc($__p$0$i$i + $sub$ptr$sub21 | 0, $ref$tmp$i$i$i$i);
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKc($ref$tmp34, 0, 14925) | 0;
     HEAP32[$ref$tmp33 >> 2] = HEAP32[$ref$tmp34 >> 2];
     HEAP32[$ref$tmp33 + 4 >> 2] = HEAP32[$ref$tmp34 + 4 >> 2];
     HEAP32[$ref$tmp33 + 8 >> 2] = HEAP32[$ref$tmp34 + 8 >> 2];
     $__i$0$i$i$i = 0;
     while (1) {
      if (($__i$0$i$i$i | 0) == 3) break;
      HEAP32[$ref$tmp34 + ($__i$0$i$i$i << 2) >> 2] = 0;
      $__i$0$i$i$i = $__i$0$i$i$i + 1 | 0;
     }
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($ref$tmp33, 14934) | 0;
     HEAP32[$ref$tmp >> 2] = HEAP32[$ref$tmp33 >> 2];
     HEAP32[$ref$tmp + 4 >> 2] = HEAP32[$ref$tmp33 + 4 >> 2];
     HEAP32[$ref$tmp + 8 >> 2] = HEAP32[$ref$tmp33 + 8 >> 2];
     $__i$0$i$i$i75 = 0;
     while (1) {
      if (($__i$0$i$i$i75 | 0) == 3) break;
      HEAP32[$ref$tmp33 + ($__i$0$i$i$i75 << 2) >> 2] = 0;
      $__i$0$i$i$i75 = $__i$0$i$i$i75 + 1 | 0;
     }
     $9 = HEAP8[$ref$tmp + 11 >> 0] | 0;
     $tobool$i$i$i$i$i = $9 << 24 >> 24 < 0;
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj((HEAP32[$__end_$i >> 2] | 0) + -24 | 0, $tobool$i$i$i$i$i ? HEAP32[$ref$tmp >> 2] | 0 : $ref$tmp, $tobool$i$i$i$i$i ? HEAP32[$ref$tmp + 4 >> 2] | 0 : $9 & 255) | 0;
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($ref$tmp);
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($ref$tmp33);
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($ref$tmp34);
     $retval$9 = $call27;
     break;
    }
    $incdec$ptr50 = $call + 2 | 0;
    HEAP32[$ref$tmp34 >> 2] = 0;
    HEAP32[$ref$tmp34 + 4 >> 2] = 0;
    HEAP32[$ref$tmp34 + 8 >> 2] = 0;
    if ($sub$ptr$sub21 >>> 0 > 4294967279) __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($ref$tmp34);
    if ($sub$ptr$sub21 >>> 0 < 11) {
     HEAP8[$ref$tmp34 + 11 >> 0] = $sub$ptr$sub21;
     $__p$0$i$i102 = $ref$tmp34;
    } else {
     $and$i$i$i$i95 = $sub$ptr$sub21 + 16 & -16;
     $call$i$i$i96 = __ZN10__cxxabiv112_GLOBAL__N_112malloc_allocIcE8allocateEj($and$i$i$i$i95) | 0;
     HEAP32[$ref$tmp34 >> 2] = $call$i$i$i96;
     HEAP32[$ref$tmp34 + 8 >> 2] = $and$i$i$i$i95 | -2147483648;
     HEAP32[$ref$tmp34 + 4 >> 2] = $sub$ptr$sub21;
     $__p$0$i$i102 = $call$i$i$i96;
    }
    __ZNSt3__211char_traitsIcE4copyEPcPKcj($__p$0$i$i102, $arrayidx6, $sub$ptr$sub21) | 0;
    HEAP8[$ref$tmp$i$i$i$i >> 0] = 0;
    __ZNSt3__211char_traitsIcE6assignERcRKc($__p$0$i$i102 + $sub$ptr$sub21 | 0, $ref$tmp$i$i$i$i);
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKc($ref$tmp34, 0, 14936) | 0;
    HEAP32[$ref$tmp33 >> 2] = HEAP32[$ref$tmp34 >> 2];
    HEAP32[$ref$tmp33 + 4 >> 2] = HEAP32[$ref$tmp34 + 4 >> 2];
    HEAP32[$ref$tmp33 + 8 >> 2] = HEAP32[$ref$tmp34 + 8 >> 2];
    $__i$0$i$i$i107 = 0;
    while (1) {
     if (($__i$0$i$i$i107 | 0) == 3) break;
     HEAP32[$ref$tmp34 + ($__i$0$i$i$i107 << 2) >> 2] = 0;
     $__i$0$i$i$i107 = $__i$0$i$i$i107 + 1 | 0;
    }
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($ref$tmp33, 14934) | 0;
    HEAP32[$agg$tmp >> 2] = HEAP32[$ref$tmp33 >> 2];
    HEAP32[$agg$tmp + 4 >> 2] = HEAP32[$ref$tmp33 + 4 >> 2];
    HEAP32[$agg$tmp + 8 >> 2] = HEAP32[$ref$tmp33 + 8 >> 2];
    $__i$0$i$i$i117 = 0;
    while (1) {
     if (($__i$0$i$i$i117 | 0) == 3) break;
     HEAP32[$ref$tmp33 + ($__i$0$i$i$i117 << 2) >> 2] = 0;
     $__i$0$i$i$i117 = $__i$0$i$i$i117 + 1 | 0;
    }
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ENSt3__212basic_stringIcNS2_11char_traitsIcEENS0_12malloc_allocIcEEEE($ref$tmp, $agg$tmp);
    $__end_$i126 = $db + 4 | 0;
    $12 = HEAP32[$__end_$i126 >> 2] | 0;
    if ($12 >>> 0 < (HEAP32[$db + 8 >> 2] | 0) >>> 0) {
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($12, $ref$tmp);
     HEAP32[$__end_$i126 >> 2] = (HEAP32[$__end_$i126 >> 2] | 0) + 24;
    } else __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIS3_EEvOT_($db, $ref$tmp);
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($ref$tmp);
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($agg$tmp);
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($ref$tmp33);
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($ref$tmp34);
    $retval$9 = $incdec$ptr50;
   }
  } else $retval$9 = $first;
 } else $retval$9 = $first; else $retval$9 = $first; else $retval$9 = $first; while (0);
 STACKTOP = sp;
 return $retval$9 | 0;
}

function _arLabeling($image, $xsize, $ysize, $pixFormat, $debugMode, $labelingMode, $labelingThresh, $imageProcMode, $labelInfo, $image_thresh) {
 $image = $image | 0;
 $xsize = $xsize | 0;
 $ysize = $ysize | 0;
 $pixFormat = $pixFormat | 0;
 $debugMode = $debugMode | 0;
 $labelingMode = $labelingMode | 0;
 $labelingThresh = $labelingThresh | 0;
 $imageProcMode = $imageProcMode | 0;
 $labelInfo = $labelInfo | 0;
 $image_thresh = $image_thresh | 0;
 var $0 = 0, $1 = 0, $2 = 0, $4 = 0, $cmp1 = 0, $cmp105 = 0, $cmp32 = 0, $cmp36 = 0, $cmp4 = 0, $cmp40 = 0, $cmp44 = 0, $cmp48 = 0, $cmp53 = 0, $retval$0 = 0, $tobool = 0;
 $tobool = ($image_thresh | 0) != 0;
 $cmp40 = ($pixFormat | 0) == 9;
 $cmp53 = ($imageProcMode | 0) == 1;
 $cmp32 = ($pixFormat | 0) == 8;
 $cmp105 = ($labelingMode | 0) == 0;
 $cmp4 = ($imageProcMode | 0) == 0;
 $cmp1 = ($labelingMode | 0) == 1;
 $cmp48 = ($pixFormat | 0) == 11;
 $cmp36 = ($pixFormat | 0) == 7;
 $cmp44 = ($pixFormat | 0) == 10;
 $0 = $pixFormat | 1;
 $1 = ($0 | 0) == 1;
 $2 = ($0 | 0) == 3;
 $4 = ($pixFormat | 2 | 0) == 6;
 L1 : do switch ($debugMode | 0) {
 case 0:
  {
   if ($cmp1) {
    if ($tobool) {
     $retval$0 = _arLabelingSubDBZ($image, $xsize, $ysize, $image_thresh, $labelInfo) | 0;
     break L1;
    }
    if ($cmp4) {
     if ($1) {
      $retval$0 = _arLabelingSubDBR3C($image, $xsize, $ysize, $labelingThresh, $labelInfo) | 0;
      break L1;
     }
     if ($2) {
      $retval$0 = _arLabelingSubDBR3CA($image, $xsize, $ysize, $labelingThresh, $labelInfo) | 0;
      break L1;
     }
     if ($4) {
      $retval$0 = _arLabelingSubDBRA3C($image, $xsize, $ysize, $labelingThresh, $labelInfo) | 0;
      break L1;
     }
     switch ($pixFormat | 0) {
     case 5:
     case 12:
     case 13:
     case 14:
      {
       $retval$0 = _arLabelingSubDBRC($image, $xsize, $ysize, $labelingThresh, $labelInfo) | 0;
       break L1;
       break;
      }
     default:
      {}
     }
     if ($cmp32) {
      $retval$0 = _arLabelingSubDBRYC($image, $xsize, $ysize, $labelingThresh, $labelInfo) | 0;
      break L1;
     }
     if ($cmp36) {
      $retval$0 = _arLabelingSubDBRCY($image, $xsize, $ysize, $labelingThresh, $labelInfo) | 0;
      break L1;
     }
     if ($cmp40) {
      $retval$0 = _arLabelingSubDBR3C565($image, $xsize, $ysize, $labelingThresh, $labelInfo) | 0;
      break L1;
     }
     if ($cmp44) {
      $retval$0 = _arLabelingSubDBR3CA5551($image, $xsize, $ysize, $labelingThresh, $labelInfo) | 0;
      break L1;
     }
     if ($cmp48) {
      $retval$0 = _arLabelingSubDBR3CA4444($image, $xsize, $ysize, $labelingThresh, $labelInfo) | 0;
      break L1;
     } else _exit(0);
    }
    if (!$cmp53) _exit(0);
    if ($1) {
     $retval$0 = _arLabelingSubDBI3C($image, $xsize, $ysize, $labelingThresh, $labelInfo) | 0;
     break L1;
    }
    if ($2) {
     $retval$0 = _arLabelingSubDBI3CA($image, $xsize, $ysize, $labelingThresh, $labelInfo) | 0;
     break L1;
    }
    if ($4) {
     $retval$0 = _arLabelingSubDBIA3C($image, $xsize, $ysize, $labelingThresh, $labelInfo) | 0;
     break L1;
    }
    switch ($pixFormat | 0) {
    case 5:
    case 12:
    case 13:
    case 14:
     {
      $retval$0 = _arLabelingSubDBIC($image, $xsize, $ysize, $labelingThresh, $labelInfo) | 0;
      break L1;
      break;
     }
    default:
     {}
    }
    if ($cmp32) {
     $retval$0 = _arLabelingSubDBIYC($image, $xsize, $ysize, $labelingThresh, $labelInfo) | 0;
     break L1;
    }
    if ($cmp36) {
     $retval$0 = _arLabelingSubDBICY($image, $xsize, $ysize, $labelingThresh, $labelInfo) | 0;
     break L1;
    }
    if ($cmp40) {
     $retval$0 = _arLabelingSubDBI3C565($image, $xsize, $ysize, $labelingThresh, $labelInfo) | 0;
     break L1;
    }
    if ($cmp44) {
     $retval$0 = _arLabelingSubDBI3CA5551($image, $xsize, $ysize, $labelingThresh, $labelInfo) | 0;
     break L1;
    }
    if ($cmp48) {
     $retval$0 = _arLabelingSubDBI3CA4444($image, $xsize, $ysize, $labelingThresh, $labelInfo) | 0;
     break L1;
    } else _exit(0);
   }
   if (!$cmp105) _exit(0);
   if ($tobool) {
    $retval$0 = _arLabelingSubDWZ($image, $xsize, $ysize, $image_thresh, $labelInfo) | 0;
    break L1;
   }
   if ($cmp4) {
    if ($1) {
     $retval$0 = _arLabelingSubDWR3C($image, $xsize, $ysize, $labelingThresh, $labelInfo) | 0;
     break L1;
    }
    if ($2) {
     $retval$0 = _arLabelingSubDWR3CA($image, $xsize, $ysize, $labelingThresh, $labelInfo) | 0;
     break L1;
    }
    if ($4) {
     $retval$0 = _arLabelingSubDWRA3C($image, $xsize, $ysize, $labelingThresh, $labelInfo) | 0;
     break L1;
    }
    switch ($pixFormat | 0) {
    case 5:
    case 12:
    case 13:
    case 14:
     {
      $retval$0 = _arLabelingSubDWRC($image, $xsize, $ysize, $labelingThresh, $labelInfo) | 0;
      break L1;
      break;
     }
    default:
     {}
    }
    if ($cmp32) {
     $retval$0 = _arLabelingSubDWRYC($image, $xsize, $ysize, $labelingThresh, $labelInfo) | 0;
     break L1;
    }
    if ($cmp36) {
     $retval$0 = _arLabelingSubDWRCY($image, $xsize, $ysize, $labelingThresh, $labelInfo) | 0;
     break L1;
    }
    if ($cmp40) {
     $retval$0 = _arLabelingSubDWR3C565($image, $xsize, $ysize, $labelingThresh, $labelInfo) | 0;
     break L1;
    }
    if ($cmp44) {
     $retval$0 = _arLabelingSubDWR3CA5551($image, $xsize, $ysize, $labelingThresh, $labelInfo) | 0;
     break L1;
    }
    if ($cmp48) {
     $retval$0 = _arLabelingSubDWR3CA4444($image, $xsize, $ysize, $labelingThresh, $labelInfo) | 0;
     break L1;
    } else _exit(0);
   }
   if (!$cmp53) _exit(0);
   if ($1) {
    $retval$0 = _arLabelingSubDWI3C($image, $xsize, $ysize, $labelingThresh, $labelInfo) | 0;
    break L1;
   }
   if ($2) {
    $retval$0 = _arLabelingSubDWI3CA($image, $xsize, $ysize, $labelingThresh, $labelInfo) | 0;
    break L1;
   }
   if ($4) {
    $retval$0 = _arLabelingSubDWIA3C($image, $xsize, $ysize, $labelingThresh, $labelInfo) | 0;
    break L1;
   }
   switch ($pixFormat | 0) {
   case 5:
   case 12:
   case 13:
   case 14:
    {
     $retval$0 = _arLabelingSubDWIC($image, $xsize, $ysize, $labelingThresh, $labelInfo) | 0;
     break L1;
     break;
    }
   default:
    {}
   }
   if ($cmp32) {
    $retval$0 = _arLabelingSubDWIYC($image, $xsize, $ysize, $labelingThresh, $labelInfo) | 0;
    break L1;
   }
   if ($cmp36) {
    $retval$0 = _arLabelingSubDWICY($image, $xsize, $ysize, $labelingThresh, $labelInfo) | 0;
    break L1;
   }
   if ($cmp40) {
    $retval$0 = _arLabelingSubDWI3C565($image, $xsize, $ysize, $labelingThresh, $labelInfo) | 0;
    break L1;
   }
   if ($cmp44) {
    $retval$0 = _arLabelingSubDWI3CA5551($image, $xsize, $ysize, $labelingThresh, $labelInfo) | 0;
    break L1;
   }
   if ($cmp48) {
    $retval$0 = _arLabelingSubDWI3CA4444($image, $xsize, $ysize, $labelingThresh, $labelInfo) | 0;
    break L1;
   } else _exit(0);
   break;
  }
 case 1:
  {
   if ($cmp1) {
    if ($tobool) {
     $retval$0 = _arLabelingSubEBZ($image, $xsize, $ysize, $image_thresh, $labelInfo) | 0;
     break L1;
    }
    if ($cmp4) {
     if ($1) {
      $retval$0 = _arLabelingSubEBR3C($image, $xsize, $ysize, $labelingThresh, $labelInfo) | 0;
      break L1;
     }
     if ($2) {
      $retval$0 = _arLabelingSubEBR3CA($image, $xsize, $ysize, $labelingThresh, $labelInfo) | 0;
      break L1;
     }
     if ($4) {
      $retval$0 = _arLabelingSubEBRA3C($image, $xsize, $ysize, $labelingThresh, $labelInfo) | 0;
      break L1;
     }
     switch ($pixFormat | 0) {
     case 5:
     case 12:
     case 13:
     case 14:
      {
       $retval$0 = _arLabelingSubEBRC($image, $xsize, $ysize, $labelingThresh, $labelInfo) | 0;
       break L1;
       break;
      }
     default:
      {}
     }
     if ($cmp32) {
      $retval$0 = _arLabelingSubEBRYC($image, $xsize, $ysize, $labelingThresh, $labelInfo) | 0;
      break L1;
     }
     if ($cmp36) {
      $retval$0 = _arLabelingSubEBRCY($image, $xsize, $ysize, $labelingThresh, $labelInfo) | 0;
      break L1;
     }
     if ($cmp40) {
      $retval$0 = _arLabelingSubEBR3C565($image, $xsize, $ysize, $labelingThresh, $labelInfo) | 0;
      break L1;
     }
     if ($cmp44) {
      $retval$0 = _arLabelingSubEBR3CA5551($image, $xsize, $ysize, $labelingThresh, $labelInfo) | 0;
      break L1;
     }
     if ($cmp48) {
      $retval$0 = _arLabelingSubEBR3CA4444($image, $xsize, $ysize, $labelingThresh, $labelInfo) | 0;
      break L1;
     } else _exit(0);
    }
    if (!$cmp53) _exit(0);
    if ($1) {
     $retval$0 = _arLabelingSubEBI3C($image, $xsize, $ysize, $labelingThresh, $labelInfo) | 0;
     break L1;
    }
    if ($2) {
     $retval$0 = _arLabelingSubEBI3CA($image, $xsize, $ysize, $labelingThresh, $labelInfo) | 0;
     break L1;
    }
    if ($4) {
     $retval$0 = _arLabelingSubEBIA3C($image, $xsize, $ysize, $labelingThresh, $labelInfo) | 0;
     break L1;
    }
    switch ($pixFormat | 0) {
    case 5:
    case 12:
    case 13:
    case 14:
     {
      $retval$0 = _arLabelingSubEBIC($image, $xsize, $ysize, $labelingThresh, $labelInfo) | 0;
      break L1;
      break;
     }
    default:
     {}
    }
    if ($cmp32) {
     $retval$0 = _arLabelingSubEBIYC($image, $xsize, $ysize, $labelingThresh, $labelInfo) | 0;
     break L1;
    }
    if ($cmp36) {
     $retval$0 = _arLabelingSubEBICY($image, $xsize, $ysize, $labelingThresh, $labelInfo) | 0;
     break L1;
    }
    if ($cmp40) {
     $retval$0 = _arLabelingSubEBI3C565($image, $xsize, $ysize, $labelingThresh, $labelInfo) | 0;
     break L1;
    }
    if ($cmp44) {
     $retval$0 = _arLabelingSubEBI3CA5551($image, $xsize, $ysize, $labelingThresh, $labelInfo) | 0;
     break L1;
    }
    if ($cmp48) {
     $retval$0 = _arLabelingSubEBI3CA4444($image, $xsize, $ysize, $labelingThresh, $labelInfo) | 0;
     break L1;
    } else _exit(0);
   }
   if (!$cmp105) _exit(0);
   if ($tobool) {
    $retval$0 = _arLabelingSubEWZ($image, $xsize, $ysize, $image_thresh, $labelInfo) | 0;
    break L1;
   }
   if ($cmp4) {
    if ($1) {
     $retval$0 = _arLabelingSubEWR3C($image, $xsize, $ysize, $labelingThresh, $labelInfo) | 0;
     break L1;
    }
    if ($2) {
     $retval$0 = _arLabelingSubEWR3CA($image, $xsize, $ysize, $labelingThresh, $labelInfo) | 0;
     break L1;
    }
    if ($4) {
     $retval$0 = _arLabelingSubEWRA3C($image, $xsize, $ysize, $labelingThresh, $labelInfo) | 0;
     break L1;
    }
    switch ($pixFormat | 0) {
    case 5:
    case 12:
    case 13:
    case 14:
     {
      $retval$0 = _arLabelingSubEWRC($image, $xsize, $ysize, $labelingThresh, $labelInfo) | 0;
      break L1;
      break;
     }
    default:
     {}
    }
    if ($cmp32) {
     $retval$0 = _arLabelingSubEWRYC($image, $xsize, $ysize, $labelingThresh, $labelInfo) | 0;
     break L1;
    }
    if ($cmp36) {
     $retval$0 = _arLabelingSubEWRCY($image, $xsize, $ysize, $labelingThresh, $labelInfo) | 0;
     break L1;
    }
    if ($cmp40) {
     $retval$0 = _arLabelingSubEWR3C565($image, $xsize, $ysize, $labelingThresh, $labelInfo) | 0;
     break L1;
    }
    if ($cmp44) {
     $retval$0 = _arLabelingSubEWR3CA5551($image, $xsize, $ysize, $labelingThresh, $labelInfo) | 0;
     break L1;
    }
    if ($cmp48) {
     $retval$0 = _arLabelingSubEWR3CA4444($image, $xsize, $ysize, $labelingThresh, $labelInfo) | 0;
     break L1;
    } else _exit(0);
   }
   if (!$cmp53) _exit(0);
   if ($1) {
    $retval$0 = _arLabelingSubEWI3C($image, $xsize, $ysize, $labelingThresh, $labelInfo) | 0;
    break L1;
   }
   if ($2) {
    $retval$0 = _arLabelingSubEWI3CA($image, $xsize, $ysize, $labelingThresh, $labelInfo) | 0;
    break L1;
   }
   if ($4) {
    $retval$0 = _arLabelingSubEWIA3C($image, $xsize, $ysize, $labelingThresh, $labelInfo) | 0;
    break L1;
   }
   switch ($pixFormat | 0) {
   case 5:
   case 12:
   case 13:
   case 14:
    {
     $retval$0 = _arLabelingSubEWIC($image, $xsize, $ysize, $labelingThresh, $labelInfo) | 0;
     break L1;
     break;
    }
   default:
    {}
   }
   if ($cmp32) {
    $retval$0 = _arLabelingSubEWIYC($image, $xsize, $ysize, $labelingThresh, $labelInfo) | 0;
    break L1;
   }
   if ($cmp36) {
    $retval$0 = _arLabelingSubEWICY($image, $xsize, $ysize, $labelingThresh, $labelInfo) | 0;
    break L1;
   }
   if ($cmp40) {
    $retval$0 = _arLabelingSubEWI3C565($image, $xsize, $ysize, $labelingThresh, $labelInfo) | 0;
    break L1;
   }
   if ($cmp44) {
    $retval$0 = _arLabelingSubEWI3CA5551($image, $xsize, $ysize, $labelingThresh, $labelInfo) | 0;
    break L1;
   }
   if ($cmp48) {
    $retval$0 = _arLabelingSubEWI3CA4444($image, $xsize, $ysize, $labelingThresh, $labelInfo) | 0;
    break L1;
   } else _exit(0);
   break;
  }
 default:
  _exit(0);
 } while (0);
 return $retval$0 | 0;
}

function _dispose_chunk($p, $psize) {
 $p = $p | 0;
 $psize = $psize | 0;
 var $$pre$phiZ2D = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $23 = 0, $24 = 0, $25 = 0, $27 = 0, $28 = 0, $29 = 0, $31 = 0, $34 = 0, $35 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $5 = 0, $53 = 0, $54 = 0, $55 = 0, $58 = 0, $59 = 0, $60 = 0, $62 = 0, $65 = 0, $67 = 0, $68 = 0, $9 = 0, $F517$0 = 0, $I545$0 = 0, $K597$0 = 0, $R$1 = 0, $R$3 = 0, $R328$1 = 0, $R328$3 = 0, $RP$1 = 0, $RP357$1 = 0, $T$0 = 0, $add$ptr = 0, $add$ptr5 = 0, $add230 = 0, $add248 = 0, $add258 = 0, $add570 = 0, $add6 = 0, $and556 = 0, $and560 = 0, $and565 = 0, $arrayidx = 0, $arrayidx100 = 0, $arrayidx118 = 0, $arrayidx271 = 0, $arrayidx359 = 0, $arrayidx371 = 0, $arrayidx376 = 0, $arrayidx399 = 0, $arrayidx516 = 0, $arrayidx579 = 0, $arrayidx613 = 0, $arrayidx86 = 0, $arrayidx95 = 0, $bk340 = 0, $bk70 = 0, $child = 0, $child161 = 0, $child358 = 0, $child445 = 0, $fd307 = 0, $fd318$pre$phiZ2D = 0, $fd344 = 0, $fd43 = 0, $fd53$pre$phiZ2D = 0, $fd635 = 0, $fd74 = 0, $head201 = 0, $head223 = 0, $p$addr$1 = 0, $psize$addr$1 = 0, $psize$addr$2 = 0, $shl519 = 0, $shl557 = 0, $shl562 = 0, $shl586 = 0, $shr = 0, $shr259 = 0, $shr507 = 0, $shr546 = 0, label = 0;
 $add$ptr = $p + $psize | 0;
 $0 = HEAP32[$p + 4 >> 2] | 0;
 L1 : do if (!($0 & 1)) {
  $1 = HEAP32[$p >> 2] | 0;
  if (!($0 & 3)) return;
  $add$ptr5 = $p + (0 - $1) | 0;
  $add6 = $1 + $psize | 0;
  $2 = HEAP32[4302] | 0;
  if ($add$ptr5 >>> 0 < $2 >>> 0) _abort();
  if (($add$ptr5 | 0) == (HEAP32[4303] | 0)) {
   $head201 = $add$ptr + 4 | 0;
   $27 = HEAP32[$head201 >> 2] | 0;
   if (($27 & 3 | 0) != 3) {
    $p$addr$1 = $add$ptr5;
    $psize$addr$1 = $add6;
    break;
   }
   HEAP32[4300] = $add6;
   HEAP32[$head201 >> 2] = $27 & -2;
   HEAP32[$add$ptr5 + 4 >> 2] = $add6 | 1;
   HEAP32[$add$ptr5 + $add6 >> 2] = $add6;
   return;
  }
  $shr = $1 >>> 3;
  if ($1 >>> 0 < 256) {
   $4 = HEAP32[$add$ptr5 + 8 >> 2] | 0;
   $5 = HEAP32[$add$ptr5 + 12 >> 2] | 0;
   $arrayidx = 17232 + ($shr << 1 << 2) | 0;
   if (($4 | 0) != ($arrayidx | 0)) {
    if ($4 >>> 0 < $2 >>> 0) _abort();
    if ((HEAP32[$4 + 12 >> 2] | 0) != ($add$ptr5 | 0)) _abort();
   }
   if (($5 | 0) == ($4 | 0)) {
    HEAP32[4298] = HEAP32[4298] & ~(1 << $shr);
    $p$addr$1 = $add$ptr5;
    $psize$addr$1 = $add6;
    break;
   }
   if (($5 | 0) == ($arrayidx | 0)) $fd53$pre$phiZ2D = $5 + 8 | 0; else {
    if ($5 >>> 0 < $2 >>> 0) _abort();
    $fd43 = $5 + 8 | 0;
    if ((HEAP32[$fd43 >> 2] | 0) == ($add$ptr5 | 0)) $fd53$pre$phiZ2D = $fd43; else _abort();
   }
   HEAP32[$4 + 12 >> 2] = $5;
   HEAP32[$fd53$pre$phiZ2D >> 2] = $4;
   $p$addr$1 = $add$ptr5;
   $psize$addr$1 = $add6;
   break;
  }
  $9 = HEAP32[$add$ptr5 + 24 >> 2] | 0;
  $10 = HEAP32[$add$ptr5 + 12 >> 2] | 0;
  do if (($10 | 0) == ($add$ptr5 | 0)) {
   $child = $add$ptr5 + 16 | 0;
   $arrayidx86 = $child + 4 | 0;
   $14 = HEAP32[$arrayidx86 >> 2] | 0;
   if (!$14) {
    $15 = HEAP32[$child >> 2] | 0;
    if (!$15) {
     $R$3 = 0;
     break;
    } else {
     $R$1 = $15;
     $RP$1 = $child;
    }
   } else {
    $R$1 = $14;
    $RP$1 = $arrayidx86;
   }
   while (1) {
    $arrayidx95 = $R$1 + 20 | 0;
    $16 = HEAP32[$arrayidx95 >> 2] | 0;
    if ($16 | 0) {
     $R$1 = $16;
     $RP$1 = $arrayidx95;
     continue;
    }
    $arrayidx100 = $R$1 + 16 | 0;
    $17 = HEAP32[$arrayidx100 >> 2] | 0;
    if (!$17) break; else {
     $R$1 = $17;
     $RP$1 = $arrayidx100;
    }
   }
   if ($RP$1 >>> 0 < $2 >>> 0) _abort(); else {
    HEAP32[$RP$1 >> 2] = 0;
    $R$3 = $R$1;
    break;
   }
  } else {
   $11 = HEAP32[$add$ptr5 + 8 >> 2] | 0;
   if ($11 >>> 0 < $2 >>> 0) _abort();
   $bk70 = $11 + 12 | 0;
   if ((HEAP32[$bk70 >> 2] | 0) != ($add$ptr5 | 0)) _abort();
   $fd74 = $10 + 8 | 0;
   if ((HEAP32[$fd74 >> 2] | 0) == ($add$ptr5 | 0)) {
    HEAP32[$bk70 >> 2] = $10;
    HEAP32[$fd74 >> 2] = $11;
    $R$3 = $10;
    break;
   } else _abort();
  } while (0);
  if (!$9) {
   $p$addr$1 = $add$ptr5;
   $psize$addr$1 = $add6;
  } else {
   $18 = HEAP32[$add$ptr5 + 28 >> 2] | 0;
   $arrayidx118 = 17496 + ($18 << 2) | 0;
   do if (($add$ptr5 | 0) == (HEAP32[$arrayidx118 >> 2] | 0)) {
    HEAP32[$arrayidx118 >> 2] = $R$3;
    if (!$R$3) {
     HEAP32[4299] = HEAP32[4299] & ~(1 << $18);
     $p$addr$1 = $add$ptr5;
     $psize$addr$1 = $add6;
     break L1;
    }
   } else if ($9 >>> 0 < (HEAP32[4302] | 0) >>> 0) _abort(); else {
    HEAP32[$9 + 16 + (((HEAP32[$9 + 16 >> 2] | 0) != ($add$ptr5 | 0) & 1) << 2) >> 2] = $R$3;
    if (!$R$3) {
     $p$addr$1 = $add$ptr5;
     $psize$addr$1 = $add6;
     break L1;
    } else break;
   } while (0);
   $23 = HEAP32[4302] | 0;
   if ($R$3 >>> 0 < $23 >>> 0) _abort();
   HEAP32[$R$3 + 24 >> 2] = $9;
   $child161 = $add$ptr5 + 16 | 0;
   $24 = HEAP32[$child161 >> 2] | 0;
   do if ($24 | 0) if ($24 >>> 0 < $23 >>> 0) _abort(); else {
    HEAP32[$R$3 + 16 >> 2] = $24;
    HEAP32[$24 + 24 >> 2] = $R$3;
    break;
   } while (0);
   $25 = HEAP32[$child161 + 4 >> 2] | 0;
   if (!$25) {
    $p$addr$1 = $add$ptr5;
    $psize$addr$1 = $add6;
   } else if ($25 >>> 0 < (HEAP32[4302] | 0) >>> 0) _abort(); else {
    HEAP32[$R$3 + 20 >> 2] = $25;
    HEAP32[$25 + 24 >> 2] = $R$3;
    $p$addr$1 = $add$ptr5;
    $psize$addr$1 = $add6;
    break;
   }
  }
 } else {
  $p$addr$1 = $p;
  $psize$addr$1 = $psize;
 } while (0);
 $28 = HEAP32[4302] | 0;
 if ($add$ptr >>> 0 < $28 >>> 0) _abort();
 $head223 = $add$ptr + 4 | 0;
 $29 = HEAP32[$head223 >> 2] | 0;
 if (!($29 & 2)) {
  $31 = HEAP32[4303] | 0;
  if (($add$ptr | 0) == (HEAP32[4304] | 0)) {
   $add230 = (HEAP32[4301] | 0) + $psize$addr$1 | 0;
   HEAP32[4301] = $add230;
   HEAP32[4304] = $p$addr$1;
   HEAP32[$p$addr$1 + 4 >> 2] = $add230 | 1;
   if (($p$addr$1 | 0) != ($31 | 0)) return;
   HEAP32[4303] = 0;
   HEAP32[4300] = 0;
   return;
  }
  if (($add$ptr | 0) == ($31 | 0)) {
   $add248 = (HEAP32[4300] | 0) + $psize$addr$1 | 0;
   HEAP32[4300] = $add248;
   HEAP32[4303] = $p$addr$1;
   HEAP32[$p$addr$1 + 4 >> 2] = $add248 | 1;
   HEAP32[$p$addr$1 + $add248 >> 2] = $add248;
   return;
  }
  $add258 = ($29 & -8) + $psize$addr$1 | 0;
  $shr259 = $29 >>> 3;
  L96 : do if ($29 >>> 0 < 256) {
   $34 = HEAP32[$add$ptr + 8 >> 2] | 0;
   $35 = HEAP32[$add$ptr + 12 >> 2] | 0;
   $arrayidx271 = 17232 + ($shr259 << 1 << 2) | 0;
   if (($34 | 0) != ($arrayidx271 | 0)) {
    if ($34 >>> 0 < $28 >>> 0) _abort();
    if ((HEAP32[$34 + 12 >> 2] | 0) != ($add$ptr | 0)) _abort();
   }
   if (($35 | 0) == ($34 | 0)) {
    HEAP32[4298] = HEAP32[4298] & ~(1 << $shr259);
    break;
   }
   if (($35 | 0) == ($arrayidx271 | 0)) $fd318$pre$phiZ2D = $35 + 8 | 0; else {
    if ($35 >>> 0 < $28 >>> 0) _abort();
    $fd307 = $35 + 8 | 0;
    if ((HEAP32[$fd307 >> 2] | 0) == ($add$ptr | 0)) $fd318$pre$phiZ2D = $fd307; else _abort();
   }
   HEAP32[$34 + 12 >> 2] = $35;
   HEAP32[$fd318$pre$phiZ2D >> 2] = $34;
  } else {
   $39 = HEAP32[$add$ptr + 24 >> 2] | 0;
   $40 = HEAP32[$add$ptr + 12 >> 2] | 0;
   do if (($40 | 0) == ($add$ptr | 0)) {
    $child358 = $add$ptr + 16 | 0;
    $arrayidx359 = $child358 + 4 | 0;
    $44 = HEAP32[$arrayidx359 >> 2] | 0;
    if (!$44) {
     $45 = HEAP32[$child358 >> 2] | 0;
     if (!$45) {
      $R328$3 = 0;
      break;
     } else {
      $R328$1 = $45;
      $RP357$1 = $child358;
     }
    } else {
     $R328$1 = $44;
     $RP357$1 = $arrayidx359;
    }
    while (1) {
     $arrayidx371 = $R328$1 + 20 | 0;
     $46 = HEAP32[$arrayidx371 >> 2] | 0;
     if ($46 | 0) {
      $R328$1 = $46;
      $RP357$1 = $arrayidx371;
      continue;
     }
     $arrayidx376 = $R328$1 + 16 | 0;
     $47 = HEAP32[$arrayidx376 >> 2] | 0;
     if (!$47) break; else {
      $R328$1 = $47;
      $RP357$1 = $arrayidx376;
     }
    }
    if ($RP357$1 >>> 0 < $28 >>> 0) _abort(); else {
     HEAP32[$RP357$1 >> 2] = 0;
     $R328$3 = $R328$1;
     break;
    }
   } else {
    $41 = HEAP32[$add$ptr + 8 >> 2] | 0;
    if ($41 >>> 0 < $28 >>> 0) _abort();
    $bk340 = $41 + 12 | 0;
    if ((HEAP32[$bk340 >> 2] | 0) != ($add$ptr | 0)) _abort();
    $fd344 = $40 + 8 | 0;
    if ((HEAP32[$fd344 >> 2] | 0) == ($add$ptr | 0)) {
     HEAP32[$bk340 >> 2] = $40;
     HEAP32[$fd344 >> 2] = $41;
     $R328$3 = $40;
     break;
    } else _abort();
   } while (0);
   if ($39 | 0) {
    $48 = HEAP32[$add$ptr + 28 >> 2] | 0;
    $arrayidx399 = 17496 + ($48 << 2) | 0;
    do if (($add$ptr | 0) == (HEAP32[$arrayidx399 >> 2] | 0)) {
     HEAP32[$arrayidx399 >> 2] = $R328$3;
     if (!$R328$3) {
      HEAP32[4299] = HEAP32[4299] & ~(1 << $48);
      break L96;
     }
    } else if ($39 >>> 0 < (HEAP32[4302] | 0) >>> 0) _abort(); else {
     HEAP32[$39 + 16 + (((HEAP32[$39 + 16 >> 2] | 0) != ($add$ptr | 0) & 1) << 2) >> 2] = $R328$3;
     if (!$R328$3) break L96; else break;
    } while (0);
    $53 = HEAP32[4302] | 0;
    if ($R328$3 >>> 0 < $53 >>> 0) _abort();
    HEAP32[$R328$3 + 24 >> 2] = $39;
    $child445 = $add$ptr + 16 | 0;
    $54 = HEAP32[$child445 >> 2] | 0;
    do if ($54 | 0) if ($54 >>> 0 < $53 >>> 0) _abort(); else {
     HEAP32[$R328$3 + 16 >> 2] = $54;
     HEAP32[$54 + 24 >> 2] = $R328$3;
     break;
    } while (0);
    $55 = HEAP32[$child445 + 4 >> 2] | 0;
    if ($55 | 0) if ($55 >>> 0 < (HEAP32[4302] | 0) >>> 0) _abort(); else {
     HEAP32[$R328$3 + 20 >> 2] = $55;
     HEAP32[$55 + 24 >> 2] = $R328$3;
     break;
    }
   }
  } while (0);
  HEAP32[$p$addr$1 + 4 >> 2] = $add258 | 1;
  HEAP32[$p$addr$1 + $add258 >> 2] = $add258;
  if (($p$addr$1 | 0) == (HEAP32[4303] | 0)) {
   HEAP32[4300] = $add258;
   return;
  } else $psize$addr$2 = $add258;
 } else {
  HEAP32[$head223 >> 2] = $29 & -2;
  HEAP32[$p$addr$1 + 4 >> 2] = $psize$addr$1 | 1;
  HEAP32[$p$addr$1 + $psize$addr$1 >> 2] = $psize$addr$1;
  $psize$addr$2 = $psize$addr$1;
 }
 $shr507 = $psize$addr$2 >>> 3;
 if ($psize$addr$2 >>> 0 < 256) {
  $arrayidx516 = 17232 + ($shr507 << 1 << 2) | 0;
  $58 = HEAP32[4298] | 0;
  $shl519 = 1 << $shr507;
  if (!($58 & $shl519)) {
   HEAP32[4298] = $58 | $shl519;
   $$pre$phiZ2D = $arrayidx516 + 8 | 0;
   $F517$0 = $arrayidx516;
  } else {
   $59 = $arrayidx516 + 8 | 0;
   $60 = HEAP32[$59 >> 2] | 0;
   if ($60 >>> 0 < (HEAP32[4302] | 0) >>> 0) _abort(); else {
    $$pre$phiZ2D = $59;
    $F517$0 = $60;
   }
  }
  HEAP32[$$pre$phiZ2D >> 2] = $p$addr$1;
  HEAP32[$F517$0 + 12 >> 2] = $p$addr$1;
  HEAP32[$p$addr$1 + 8 >> 2] = $F517$0;
  HEAP32[$p$addr$1 + 12 >> 2] = $arrayidx516;
  return;
 }
 $shr546 = $psize$addr$2 >>> 8;
 if (!$shr546) $I545$0 = 0; else if ($psize$addr$2 >>> 0 > 16777215) $I545$0 = 31; else {
  $and556 = ($shr546 + 1048320 | 0) >>> 16 & 8;
  $shl557 = $shr546 << $and556;
  $and560 = ($shl557 + 520192 | 0) >>> 16 & 4;
  $shl562 = $shl557 << $and560;
  $and565 = ($shl562 + 245760 | 0) >>> 16 & 2;
  $add570 = 14 - ($and560 | $and556 | $and565) + ($shl562 << $and565 >>> 15) | 0;
  $I545$0 = $psize$addr$2 >>> ($add570 + 7 | 0) & 1 | $add570 << 1;
 }
 $arrayidx579 = 17496 + ($I545$0 << 2) | 0;
 HEAP32[$p$addr$1 + 28 >> 2] = $I545$0;
 HEAP32[$p$addr$1 + 20 >> 2] = 0;
 HEAP32[$p$addr$1 + 16 >> 2] = 0;
 $62 = HEAP32[4299] | 0;
 $shl586 = 1 << $I545$0;
 if (!($62 & $shl586)) {
  HEAP32[4299] = $62 | $shl586;
  HEAP32[$arrayidx579 >> 2] = $p$addr$1;
  HEAP32[$p$addr$1 + 24 >> 2] = $arrayidx579;
  HEAP32[$p$addr$1 + 12 >> 2] = $p$addr$1;
  HEAP32[$p$addr$1 + 8 >> 2] = $p$addr$1;
  return;
 }
 $K597$0 = $psize$addr$2 << (($I545$0 | 0) == 31 ? 0 : 25 - ($I545$0 >>> 1) | 0);
 $T$0 = HEAP32[$arrayidx579 >> 2] | 0;
 while (1) {
  if ((HEAP32[$T$0 + 4 >> 2] & -8 | 0) == ($psize$addr$2 | 0)) {
   label = 121;
   break;
  }
  $arrayidx613 = $T$0 + 16 + ($K597$0 >>> 31 << 2) | 0;
  $65 = HEAP32[$arrayidx613 >> 2] | 0;
  if (!$65) {
   label = 118;
   break;
  } else {
   $K597$0 = $K597$0 << 1;
   $T$0 = $65;
  }
 }
 if ((label | 0) == 118) {
  if ($arrayidx613 >>> 0 < (HEAP32[4302] | 0) >>> 0) _abort();
  HEAP32[$arrayidx613 >> 2] = $p$addr$1;
  HEAP32[$p$addr$1 + 24 >> 2] = $T$0;
  HEAP32[$p$addr$1 + 12 >> 2] = $p$addr$1;
  HEAP32[$p$addr$1 + 8 >> 2] = $p$addr$1;
  return;
 } else if ((label | 0) == 121) {
  $fd635 = $T$0 + 8 | 0;
  $67 = HEAP32[$fd635 >> 2] | 0;
  $68 = HEAP32[4302] | 0;
  if (!($67 >>> 0 >= $68 >>> 0 & $T$0 >>> 0 >= $68 >>> 0)) _abort();
  HEAP32[$67 + 12 >> 2] = $p$addr$1;
  HEAP32[$fd635 >> 2] = $p$addr$1;
  HEAP32[$p$addr$1 + 8 >> 2] = $67;
  HEAP32[$p$addr$1 + 12 >> 2] = $T$0;
  HEAP32[$p$addr$1 + 24 >> 2] = 0;
  return;
 }
}

function __ZN10__cxxabiv112_GLOBAL__N_128parse_pointer_to_member_typeINS0_2DbEEEPKcS4_S4_RT_($first, $last, $db) {
 $first = $first | 0;
 $last = $last | 0;
 $db = $db | 0;
 var $1 = 0, $12 = 0, $14 = 0, $15 = 0, $17 = 0, $18 = 0, $21 = 0, $23 = 0, $24 = 0, $26 = 0, $4 = 0, $5 = 0, $9 = 0, $__end_$i = 0, $__i$0$i$i$i = 0, $__i$0$i$i$i$i = 0, $__i$0$i$i$i$i143 = 0, $__i$0$i$i$i$i166 = 0, $__i$0$i$i$i$i81 = 0, $__i$0$i$i$i108 = 0, $__i$0$i$i$i118 = 0, $__i$0$i$i$i33 = 0, $__i$0$i$i$i41 = 0, $__i$0$i$i$i57 = 0, $__i$0$i$i$i89 = 0, $__size_$i1$i$i$i$i = 0, $__size_$i1$i$i$i$i132 = 0, $__size_$i1$i$i$i$i155 = 0, $__size_$i1$i$i$i$i70 = 0, $add$ptr = 0, $add$ptr$i27 = 0, $call = 0, $call5 = 0, $class_type = 0, $first42 = 0, $first83 = 0, $func = 0, $incdec$ptr$i$i$i = 0, $ref$tmp = 0, $ref$tmp$i$i$i$i152 = 0, $ref$tmp25 = 0, $ref$tmp26 = 0, $ref$tmp31 = 0, $retval$3 = 0, $second = 0, $second60 = 0, $second99 = 0, $tobool$i$i$i$i$i = 0, $tobool$i$i$i$i$i100 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(112);
 $ref$tmp$i$i$i$i152 = sp + 96 | 0;
 $func = sp + 72 | 0;
 $class_type = sp + 48 | 0;
 $ref$tmp = sp + 36 | 0;
 $ref$tmp25 = sp + 24 | 0;
 $ref$tmp26 = sp + 12 | 0;
 $ref$tmp31 = sp;
 if (($first | 0) == ($last | 0)) $retval$3 = $first; else if ((HEAP8[$first >> 0] | 0) == 77) {
  $add$ptr = $first + 1 | 0;
  $call = __ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($add$ptr, $last, $db) | 0;
  if (($call | 0) == ($add$ptr | 0)) $retval$3 = $first; else {
   $call5 = __ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($call, $last, $db) | 0;
   if (($call5 | 0) == ($call | 0)) $retval$3 = $first; else {
    $__end_$i = $db + 4 | 0;
    $1 = HEAP32[$__end_$i >> 2] | 0;
    if ((($1 - (HEAP32[$db >> 2] | 0) | 0) / 24 | 0) >>> 0 < 2) $retval$3 = $first; else {
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($func, $1 + -24 | 0);
     $4 = HEAP32[$__end_$i >> 2] | 0;
     $add$ptr$i27 = $4 + -24 | 0;
     $5 = $4;
     while (1) {
      if (($5 | 0) == ($add$ptr$i27 | 0)) break;
      $incdec$ptr$i$i$i = $5 + -24 | 0;
      HEAP32[$__end_$i >> 2] = $incdec$ptr$i$i$i;
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($incdec$ptr$i$i$i);
      $5 = HEAP32[$__end_$i >> 2] | 0;
     }
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($class_type, $4 + -48 | 0);
     $second = $func + 12 | 0;
     L11 : do if ((HEAP8[((HEAP8[$second + 11 >> 0] | 0) < 0 ? HEAP32[$second >> 2] | 0 : $second) >> 0] | 0) == 40) {
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($func, 14887) | 0;
      HEAP32[$ref$tmp26 >> 2] = HEAP32[$func >> 2];
      HEAP32[$ref$tmp26 + 4 >> 2] = HEAP32[$func + 4 >> 2];
      HEAP32[$ref$tmp26 + 8 >> 2] = HEAP32[$func + 8 >> 2];
      $__i$0$i$i$i = 0;
      while (1) {
       if (($__i$0$i$i$i | 0) == 3) break;
       HEAP32[$func + ($__i$0$i$i$i << 2) >> 2] = 0;
       $__i$0$i$i$i = $__i$0$i$i$i + 1 | 0;
      }
      __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($ref$tmp31, $class_type);
      $9 = HEAP8[$ref$tmp31 + 11 >> 0] | 0;
      $tobool$i$i$i$i$i = $9 << 24 >> 24 < 0;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($ref$tmp26, $tobool$i$i$i$i$i ? HEAP32[$ref$tmp31 >> 2] | 0 : $ref$tmp31, $tobool$i$i$i$i$i ? HEAP32[$ref$tmp31 + 4 >> 2] | 0 : $9 & 255) | 0;
      HEAP32[$ref$tmp25 >> 2] = HEAP32[$ref$tmp26 >> 2];
      HEAP32[$ref$tmp25 + 4 >> 2] = HEAP32[$ref$tmp26 + 4 >> 2];
      HEAP32[$ref$tmp25 + 8 >> 2] = HEAP32[$ref$tmp26 + 8 >> 2];
      $__i$0$i$i$i33 = 0;
      while (1) {
       if (($__i$0$i$i$i33 | 0) == 3) break;
       HEAP32[$ref$tmp26 + ($__i$0$i$i$i33 << 2) >> 2] = 0;
       $__i$0$i$i$i33 = $__i$0$i$i$i33 + 1 | 0;
      }
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($ref$tmp25, 16309) | 0;
      HEAP32[$ref$tmp >> 2] = HEAP32[$ref$tmp25 >> 2];
      HEAP32[$ref$tmp + 4 >> 2] = HEAP32[$ref$tmp25 + 4 >> 2];
      HEAP32[$ref$tmp + 8 >> 2] = HEAP32[$ref$tmp25 + 8 >> 2];
      $__i$0$i$i$i41 = 0;
      while (1) {
       if (($__i$0$i$i$i41 | 0) == 3) break;
       HEAP32[$ref$tmp25 + ($__i$0$i$i$i41 << 2) >> 2] = 0;
       $__i$0$i$i$i41 = $__i$0$i$i$i41 + 1 | 0;
      }
      $12 = HEAP32[$__end_$i >> 2] | 0;
      $first42 = $12 + -24 | 0;
      $__size_$i1$i$i$i$i = $first42 + 11 | 0;
      if ((HEAP8[$__size_$i1$i$i$i$i >> 0] | 0) < 0) {
       $14 = HEAP32[$first42 >> 2] | 0;
       HEAP8[$ref$tmp$i$i$i$i152 >> 0] = 0;
       __ZNSt3__211char_traitsIcE6assignERcRKc($14, $ref$tmp$i$i$i$i152);
       HEAP32[$12 + -20 >> 2] = 0;
      } else {
       HEAP8[$ref$tmp$i$i$i$i152 >> 0] = 0;
       __ZNSt3__211char_traitsIcE6assignERcRKc($first42, $ref$tmp$i$i$i$i152);
       HEAP8[$__size_$i1$i$i$i$i >> 0] = 0;
      }
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE7reserveEj($first42);
      HEAP32[$first42 >> 2] = HEAP32[$ref$tmp >> 2];
      HEAP32[$first42 + 4 >> 2] = HEAP32[$ref$tmp + 4 >> 2];
      HEAP32[$first42 + 8 >> 2] = HEAP32[$ref$tmp + 8 >> 2];
      $__i$0$i$i$i$i = 0;
      while (1) {
       if (($__i$0$i$i$i$i | 0) == 3) break;
       HEAP32[$ref$tmp + ($__i$0$i$i$i$i << 2) >> 2] = 0;
       $__i$0$i$i$i$i = $__i$0$i$i$i$i + 1 | 0;
      }
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($ref$tmp);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($ref$tmp25);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($ref$tmp31);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($ref$tmp26);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKc($second, 0, 14885) | 0;
      HEAP32[$ref$tmp >> 2] = HEAP32[$second >> 2];
      HEAP32[$ref$tmp + 4 >> 2] = HEAP32[$second + 4 >> 2];
      HEAP32[$ref$tmp + 8 >> 2] = HEAP32[$second + 8 >> 2];
      $__i$0$i$i$i57 = 0;
      while (1) {
       if (($__i$0$i$i$i57 | 0) == 3) break;
       HEAP32[$second + ($__i$0$i$i$i57 << 2) >> 2] = 0;
       $__i$0$i$i$i57 = $__i$0$i$i$i57 + 1 | 0;
      }
      $15 = HEAP32[$__end_$i >> 2] | 0;
      $second60 = $15 + -12 | 0;
      $__size_$i1$i$i$i$i70 = $second60 + 11 | 0;
      if ((HEAP8[$__size_$i1$i$i$i$i70 >> 0] | 0) < 0) {
       $17 = HEAP32[$second60 >> 2] | 0;
       HEAP8[$ref$tmp$i$i$i$i152 >> 0] = 0;
       __ZNSt3__211char_traitsIcE6assignERcRKc($17, $ref$tmp$i$i$i$i152);
       HEAP32[$15 + -8 >> 2] = 0;
      } else {
       HEAP8[$ref$tmp$i$i$i$i152 >> 0] = 0;
       __ZNSt3__211char_traitsIcE6assignERcRKc($second60, $ref$tmp$i$i$i$i152);
       HEAP8[$__size_$i1$i$i$i$i70 >> 0] = 0;
      }
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE7reserveEj($second60);
      HEAP32[$second60 >> 2] = HEAP32[$ref$tmp >> 2];
      HEAP32[$second60 + 4 >> 2] = HEAP32[$ref$tmp + 4 >> 2];
      HEAP32[$second60 + 8 >> 2] = HEAP32[$ref$tmp + 8 >> 2];
      $__i$0$i$i$i$i81 = 0;
      while (1) {
       if (($__i$0$i$i$i$i81 | 0) == 3) break;
       HEAP32[$ref$tmp + ($__i$0$i$i$i$i81 << 2) >> 2] = 0;
       $__i$0$i$i$i$i81 = $__i$0$i$i$i$i81 + 1 | 0;
      }
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($ref$tmp);
     } else {
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($func, 14919) | 0;
      HEAP32[$ref$tmp26 >> 2] = HEAP32[$func >> 2];
      HEAP32[$ref$tmp26 + 4 >> 2] = HEAP32[$func + 4 >> 2];
      HEAP32[$ref$tmp26 + 8 >> 2] = HEAP32[$func + 8 >> 2];
      $__i$0$i$i$i89 = 0;
      while (1) {
       if (($__i$0$i$i$i89 | 0) == 3) break;
       HEAP32[$func + ($__i$0$i$i$i89 << 2) >> 2] = 0;
       $__i$0$i$i$i89 = $__i$0$i$i$i89 + 1 | 0;
      }
      __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($ref$tmp31, $class_type);
      $18 = HEAP8[$ref$tmp31 + 11 >> 0] | 0;
      $tobool$i$i$i$i$i100 = $18 << 24 >> 24 < 0;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($ref$tmp26, $tobool$i$i$i$i$i100 ? HEAP32[$ref$tmp31 >> 2] | 0 : $ref$tmp31, $tobool$i$i$i$i$i100 ? HEAP32[$ref$tmp31 + 4 >> 2] | 0 : $18 & 255) | 0;
      HEAP32[$ref$tmp25 >> 2] = HEAP32[$ref$tmp26 >> 2];
      HEAP32[$ref$tmp25 + 4 >> 2] = HEAP32[$ref$tmp26 + 4 >> 2];
      HEAP32[$ref$tmp25 + 8 >> 2] = HEAP32[$ref$tmp26 + 8 >> 2];
      $__i$0$i$i$i108 = 0;
      while (1) {
       if (($__i$0$i$i$i108 | 0) == 3) break;
       HEAP32[$ref$tmp26 + ($__i$0$i$i$i108 << 2) >> 2] = 0;
       $__i$0$i$i$i108 = $__i$0$i$i$i108 + 1 | 0;
      }
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($ref$tmp25, 16309) | 0;
      HEAP32[$ref$tmp >> 2] = HEAP32[$ref$tmp25 >> 2];
      HEAP32[$ref$tmp + 4 >> 2] = HEAP32[$ref$tmp25 + 4 >> 2];
      HEAP32[$ref$tmp + 8 >> 2] = HEAP32[$ref$tmp25 + 8 >> 2];
      $__i$0$i$i$i118 = 0;
      while (1) {
       if (($__i$0$i$i$i118 | 0) == 3) break;
       HEAP32[$ref$tmp25 + ($__i$0$i$i$i118 << 2) >> 2] = 0;
       $__i$0$i$i$i118 = $__i$0$i$i$i118 + 1 | 0;
      }
      $21 = HEAP32[$__end_$i >> 2] | 0;
      $first83 = $21 + -24 | 0;
      $__size_$i1$i$i$i$i132 = $first83 + 11 | 0;
      if ((HEAP8[$__size_$i1$i$i$i$i132 >> 0] | 0) < 0) {
       $23 = HEAP32[$first83 >> 2] | 0;
       HEAP8[$ref$tmp$i$i$i$i152 >> 0] = 0;
       __ZNSt3__211char_traitsIcE6assignERcRKc($23, $ref$tmp$i$i$i$i152);
       HEAP32[$21 + -20 >> 2] = 0;
      } else {
       HEAP8[$ref$tmp$i$i$i$i152 >> 0] = 0;
       __ZNSt3__211char_traitsIcE6assignERcRKc($first83, $ref$tmp$i$i$i$i152);
       HEAP8[$__size_$i1$i$i$i$i132 >> 0] = 0;
      }
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE7reserveEj($first83);
      HEAP32[$first83 >> 2] = HEAP32[$ref$tmp >> 2];
      HEAP32[$first83 + 4 >> 2] = HEAP32[$ref$tmp + 4 >> 2];
      HEAP32[$first83 + 8 >> 2] = HEAP32[$ref$tmp + 8 >> 2];
      $__i$0$i$i$i$i143 = 0;
      while (1) {
       if (($__i$0$i$i$i$i143 | 0) == 3) break;
       HEAP32[$ref$tmp + ($__i$0$i$i$i$i143 << 2) >> 2] = 0;
       $__i$0$i$i$i$i143 = $__i$0$i$i$i$i143 + 1 | 0;
      }
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($ref$tmp);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($ref$tmp25);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($ref$tmp31);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($ref$tmp26);
      $24 = HEAP32[$__end_$i >> 2] | 0;
      $second99 = $24 + -12 | 0;
      $__size_$i1$i$i$i$i155 = $second99 + 11 | 0;
      if ((HEAP8[$__size_$i1$i$i$i$i155 >> 0] | 0) < 0) {
       $26 = HEAP32[$second99 >> 2] | 0;
       HEAP8[$ref$tmp$i$i$i$i152 >> 0] = 0;
       __ZNSt3__211char_traitsIcE6assignERcRKc($26, $ref$tmp$i$i$i$i152);
       HEAP32[$24 + -8 >> 2] = 0;
      } else {
       HEAP8[$ref$tmp$i$i$i$i152 >> 0] = 0;
       __ZNSt3__211char_traitsIcE6assignERcRKc($second99, $ref$tmp$i$i$i$i152);
       HEAP8[$__size_$i1$i$i$i$i155 >> 0] = 0;
      }
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE7reserveEj($second99);
      HEAP32[$second99 >> 2] = HEAP32[$second >> 2];
      HEAP32[$second99 + 4 >> 2] = HEAP32[$second + 4 >> 2];
      HEAP32[$second99 + 8 >> 2] = HEAP32[$second + 8 >> 2];
      $__i$0$i$i$i$i166 = 0;
      while (1) {
       if (($__i$0$i$i$i$i166 | 0) == 3) break L11;
       HEAP32[$second + ($__i$0$i$i$i$i166 << 2) >> 2] = 0;
       $__i$0$i$i$i$i166 = $__i$0$i$i$i$i166 + 1 | 0;
      }
     } while (0);
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($class_type);
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($func);
     $retval$3 = $call5;
    }
   }
  }
 } else $retval$3 = $first;
 STACKTOP = sp;
 return $retval$3 | 0;
}

function ___intscan($f, $base, $pok, $0, $1) {
 $f = $f | 0;
 $base = $base | 0;
 $pok = $pok | 0;
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$base132 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $109 = 0, $110 = 0, $111 = 0, $116 = 0, $127 = 0, $129 = 0, $13 = 0, $137 = 0, $145 = 0, $148 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $2 = 0, $23 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $32 = 0, $34 = 0, $42 = 0, $5 = 0, $50 = 0, $52 = 0, $53 = 0, $56 = 0, $58 = 0, $59 = 0, $60 = 0, $62 = 0, $64 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $73 = 0, $74 = 0, $75 = 0, $84 = 0, $87 = 0, $89 = 0, $90 = 0, $91 = 0, $93 = 0, $95 = 0, $99 = 0, $base$addr$1 = 0, $base$addr$1134 = 0, $base$addr$1135 = 0, $c$0 = 0, $c$1 = 0, $c$1136 = 0, $c$2$be = 0, $c$2$lcssa = 0, $c$3$be = 0, $c$3184 = 0, $c$4$be = 0, $c$4$lcssa = 0, $c$5$be = 0, $c$6$be = 0, $c$6$lcssa = 0, $c$7$be = 0, $c$7167 = 0, $c$8 = 0, $c$9$be = 0, $call = 0, $call105 = 0, $call330 = 0, $call351 = 0, $call357 = 0, $cmp25 = 0, $cond = 0, $cond44 = 0, $cond59 = 0, $conv176 = 0, $conv179158 = 0, $conv179161 = 0, $conv238176 = 0, $conv238179 = 0, $neg$0 = 0, $neg$1 = 0, $rpos = 0, $shend = 0, $sub = 0, $sub111190 = 0, $sub111193 = 0, $sub131182 = 0, $sub131186 = 0, $tobool65 = 0, $x$0192 = 0, $x$1160 = 0, $x$2178 = 0, label = 0;
 L1 : do if ($base >>> 0 > 36) {
  $call = ___errno_location() | 0;
  HEAP32[$call >> 2] = 22;
  $150 = 0;
  $151 = 0;
 } else {
  $rpos = $f + 4 | 0;
  $shend = $f + 100 | 0;
  do {
   $2 = HEAP32[$rpos >> 2] | 0;
   if ($2 >>> 0 < (HEAP32[$shend >> 2] | 0) >>> 0) {
    HEAP32[$rpos >> 2] = $2 + 1;
    $cond = HEAPU8[$2 >> 0] | 0;
   } else $cond = ___shgetc($f) | 0;
  } while ((_isspace($cond) | 0) != 0);
  L11 : do switch ($cond | 0) {
  case 43:
  case 45:
   {
    $sub = (($cond | 0) == 45) << 31 >> 31;
    $5 = HEAP32[$rpos >> 2] | 0;
    if ($5 >>> 0 < (HEAP32[$shend >> 2] | 0) >>> 0) {
     HEAP32[$rpos >> 2] = $5 + 1;
     $c$0 = HEAPU8[$5 >> 0] | 0;
     $neg$0 = $sub;
     break L11;
    } else {
     $c$0 = ___shgetc($f) | 0;
     $neg$0 = $sub;
     break L11;
    }
    break;
   }
  default:
   {
    $c$0 = $cond;
    $neg$0 = 0;
   }
  } while (0);
  $cmp25 = ($base | 0) == 0;
  do if (($base | 16 | 0) == 16 & ($c$0 | 0) == 48) {
   $10 = HEAP32[$rpos >> 2] | 0;
   if ($10 >>> 0 < (HEAP32[$shend >> 2] | 0) >>> 0) {
    HEAP32[$rpos >> 2] = $10 + 1;
    $cond44 = HEAPU8[$10 >> 0] | 0;
   } else $cond44 = ___shgetc($f) | 0;
   if (($cond44 | 32 | 0) != 120) if ($cmp25) {
    $base$addr$1135 = 8;
    $c$1136 = $cond44;
    label = 46;
    break;
   } else {
    $base$addr$1 = $base;
    $c$1 = $cond44;
    label = 32;
    break;
   }
   $13 = HEAP32[$rpos >> 2] | 0;
   if ($13 >>> 0 < (HEAP32[$shend >> 2] | 0) >>> 0) {
    HEAP32[$rpos >> 2] = $13 + 1;
    $cond59 = HEAPU8[$13 >> 0] | 0;
   } else $cond59 = ___shgetc($f) | 0;
   if ((HEAPU8[11528 + $cond59 >> 0] | 0) > 15) {
    $tobool65 = (HEAP32[$shend >> 2] | 0) != 0;
    if ($tobool65) HEAP32[$rpos >> 2] = (HEAP32[$rpos >> 2] | 0) + -1;
    if (!$pok) {
     ___shlim($f, 0);
     $150 = 0;
     $151 = 0;
     break L1;
    }
    if (!$tobool65) {
     $150 = 0;
     $151 = 0;
     break L1;
    }
    HEAP32[$rpos >> 2] = (HEAP32[$rpos >> 2] | 0) + -1;
    $150 = 0;
    $151 = 0;
    break L1;
   } else {
    $base$addr$1135 = 16;
    $c$1136 = $cond59;
    label = 46;
   }
  } else {
   $$base132 = $cmp25 ? 10 : $base;
   if ((HEAPU8[11528 + $c$0 >> 0] | 0) >>> 0 < $$base132 >>> 0) {
    $base$addr$1 = $$base132;
    $c$1 = $c$0;
    label = 32;
   } else {
    if (HEAP32[$shend >> 2] | 0) HEAP32[$rpos >> 2] = (HEAP32[$rpos >> 2] | 0) + -1;
    ___shlim($f, 0);
    $call105 = ___errno_location() | 0;
    HEAP32[$call105 >> 2] = 22;
    $150 = 0;
    $151 = 0;
    break L1;
   }
  } while (0);
  L43 : do if ((label | 0) == 32) if (($base$addr$1 | 0) == 10) {
   $sub111190 = $c$1 + -48 | 0;
   if ($sub111190 >>> 0 < 10) {
    $sub111193 = $sub111190;
    $x$0192 = 0;
    do {
     $x$0192 = ($x$0192 * 10 | 0) + $sub111193 | 0;
     $23 = HEAP32[$rpos >> 2] | 0;
     if ($23 >>> 0 < (HEAP32[$shend >> 2] | 0) >>> 0) {
      HEAP32[$rpos >> 2] = $23 + 1;
      $c$2$be = HEAPU8[$23 >> 0] | 0;
     } else $c$2$be = ___shgetc($f) | 0;
     $sub111193 = $c$2$be + -48 | 0;
    } while ($sub111193 >>> 0 < 10 & $x$0192 >>> 0 < 429496729);
    $152 = $x$0192;
    $153 = 0;
    $c$2$lcssa = $c$2$be;
   } else {
    $152 = 0;
    $153 = 0;
    $c$2$lcssa = $c$1;
   }
   $sub131182 = $c$2$lcssa + -48 | 0;
   if ($sub131182 >>> 0 < 10) {
    $27 = $152;
    $28 = $153;
    $c$3184 = $c$2$lcssa;
    $sub131186 = $sub131182;
    while (1) {
     $29 = ___muldi3($27 | 0, $28 | 0, 10, 0) | 0;
     $30 = tempRet0;
     $32 = (($sub131186 | 0) < 0) << 31 >> 31;
     $34 = ~$32;
     if ($30 >>> 0 > $34 >>> 0 | ($30 | 0) == ($34 | 0) & $29 >>> 0 > ~$sub131186 >>> 0) {
      $154 = $27;
      $155 = $28;
      $base$addr$1134 = 10;
      $c$8 = $c$3184;
      label = 72;
      break L43;
     }
     $27 = _i64Add($29 | 0, $30 | 0, $sub131186 | 0, $32 | 0) | 0;
     $28 = tempRet0;
     $42 = HEAP32[$rpos >> 2] | 0;
     if ($42 >>> 0 < (HEAP32[$shend >> 2] | 0) >>> 0) {
      HEAP32[$rpos >> 2] = $42 + 1;
      $c$3$be = HEAPU8[$42 >> 0] | 0;
     } else $c$3$be = ___shgetc($f) | 0;
     $sub131186 = $c$3$be + -48 | 0;
     if (!($sub131186 >>> 0 < 10 & ($28 >>> 0 < 429496729 | ($28 | 0) == 429496729 & $27 >>> 0 < 2576980378))) break; else $c$3184 = $c$3$be;
    }
    if ($sub131186 >>> 0 > 9) {
     $127 = $28;
     $129 = $27;
     $neg$1 = $neg$0;
    } else {
     $154 = $27;
     $155 = $28;
     $base$addr$1134 = 10;
     $c$8 = $c$3$be;
     label = 72;
    }
   } else {
    $127 = $153;
    $129 = $152;
    $neg$1 = $neg$0;
   }
  } else {
   $base$addr$1135 = $base$addr$1;
   $c$1136 = $c$1;
   label = 46;
  } while (0);
  L63 : do if ((label | 0) == 46) {
   if (!($base$addr$1135 + -1 & $base$addr$1135)) {
    $conv176 = HEAP8[11784 + (($base$addr$1135 * 23 | 0) >>> 5 & 7) >> 0] | 0;
    $52 = HEAP8[11528 + $c$1136 >> 0] | 0;
    $conv179158 = $52 & 255;
    if ($conv179158 >>> 0 < $base$addr$1135 >>> 0) {
     $conv179161 = $conv179158;
     $x$1160 = 0;
     do {
      $x$1160 = $conv179161 | $x$1160 << $conv176;
      $53 = HEAP32[$rpos >> 2] | 0;
      if ($53 >>> 0 < (HEAP32[$shend >> 2] | 0) >>> 0) {
       HEAP32[$rpos >> 2] = $53 + 1;
       $c$4$be = HEAPU8[$53 >> 0] | 0;
      } else $c$4$be = ___shgetc($f) | 0;
      $56 = HEAP8[11528 + $c$4$be >> 0] | 0;
      $conv179161 = $56 & 255;
     } while ($x$1160 >>> 0 < 134217728 & $conv179161 >>> 0 < $base$addr$1135 >>> 0);
     $60 = $56;
     $62 = 0;
     $64 = $x$1160;
     $c$4$lcssa = $c$4$be;
    } else {
     $60 = $52;
     $62 = 0;
     $64 = 0;
     $c$4$lcssa = $c$1136;
    }
    $58 = _bitshift64Lshr(-1, -1, $conv176 | 0) | 0;
    $59 = tempRet0;
    if (($60 & 255) >>> 0 >= $base$addr$1135 >>> 0 | ($62 >>> 0 > $59 >>> 0 | ($62 | 0) == ($59 | 0) & $64 >>> 0 > $58 >>> 0)) {
     $154 = $64;
     $155 = $62;
     $base$addr$1134 = $base$addr$1135;
     $c$8 = $c$4$lcssa;
     label = 72;
     break;
    } else {
     $68 = $64;
     $69 = $62;
     $73 = $60;
    }
    while (1) {
     $70 = _bitshift64Shl($68 | 0, $69 | 0, $conv176 | 0) | 0;
     $71 = tempRet0;
     $74 = $73 & 255 | $70;
     $75 = HEAP32[$rpos >> 2] | 0;
     if ($75 >>> 0 < (HEAP32[$shend >> 2] | 0) >>> 0) {
      HEAP32[$rpos >> 2] = $75 + 1;
      $c$5$be = HEAPU8[$75 >> 0] | 0;
     } else $c$5$be = ___shgetc($f) | 0;
     $73 = HEAP8[11528 + $c$5$be >> 0] | 0;
     if (($73 & 255) >>> 0 >= $base$addr$1135 >>> 0 | ($71 >>> 0 > $59 >>> 0 | ($71 | 0) == ($59 | 0) & $74 >>> 0 > $58 >>> 0)) {
      $154 = $74;
      $155 = $71;
      $base$addr$1134 = $base$addr$1135;
      $c$8 = $c$5$be;
      label = 72;
      break L63;
     } else {
      $68 = $74;
      $69 = $71;
     }
    }
   }
   $50 = HEAP8[11528 + $c$1136 >> 0] | 0;
   $conv238176 = $50 & 255;
   if ($conv238176 >>> 0 < $base$addr$1135 >>> 0) {
    $conv238179 = $conv238176;
    $x$2178 = 0;
    do {
     $x$2178 = $conv238179 + (Math_imul($x$2178, $base$addr$1135) | 0) | 0;
     $84 = HEAP32[$rpos >> 2] | 0;
     if ($84 >>> 0 < (HEAP32[$shend >> 2] | 0) >>> 0) {
      HEAP32[$rpos >> 2] = $84 + 1;
      $c$6$be = HEAPU8[$84 >> 0] | 0;
     } else $c$6$be = ___shgetc($f) | 0;
     $87 = HEAP8[11528 + $c$6$be >> 0] | 0;
     $conv238179 = $87 & 255;
    } while ($x$2178 >>> 0 < 119304647 & $conv238179 >>> 0 < $base$addr$1135 >>> 0);
    $156 = $x$2178;
    $157 = 0;
    $89 = $87;
    $c$6$lcssa = $c$6$be;
   } else {
    $156 = 0;
    $157 = 0;
    $89 = $50;
    $c$6$lcssa = $c$1136;
   }
   if (($89 & 255) >>> 0 < $base$addr$1135 >>> 0) {
    $90 = ___udivdi3(-1, -1, $base$addr$1135 | 0, 0) | 0;
    $91 = tempRet0;
    $102 = $89;
    $93 = $157;
    $95 = $156;
    $c$7167 = $c$6$lcssa;
    while (1) {
     if ($93 >>> 0 > $91 >>> 0 | ($93 | 0) == ($91 | 0) & $95 >>> 0 > $90 >>> 0) {
      $154 = $95;
      $155 = $93;
      $base$addr$1134 = $base$addr$1135;
      $c$8 = $c$7167;
      label = 72;
      break L63;
     }
     $99 = ___muldi3($95 | 0, $93 | 0, $base$addr$1135 | 0, 0) | 0;
     $100 = tempRet0;
     $101 = $102 & 255;
     if ($100 >>> 0 > 4294967295 | ($100 | 0) == -1 & $99 >>> 0 > ~$101 >>> 0) {
      $154 = $95;
      $155 = $93;
      $base$addr$1134 = $base$addr$1135;
      $c$8 = $c$7167;
      label = 72;
      break L63;
     }
     $109 = _i64Add($101 | 0, 0, $99 | 0, $100 | 0) | 0;
     $110 = tempRet0;
     $111 = HEAP32[$rpos >> 2] | 0;
     if ($111 >>> 0 < (HEAP32[$shend >> 2] | 0) >>> 0) {
      HEAP32[$rpos >> 2] = $111 + 1;
      $c$7$be = HEAPU8[$111 >> 0] | 0;
     } else $c$7$be = ___shgetc($f) | 0;
     $102 = HEAP8[11528 + $c$7$be >> 0] | 0;
     if (($102 & 255) >>> 0 >= $base$addr$1135 >>> 0) {
      $154 = $109;
      $155 = $110;
      $base$addr$1134 = $base$addr$1135;
      $c$8 = $c$7$be;
      label = 72;
      break;
     } else {
      $93 = $110;
      $95 = $109;
      $c$7167 = $c$7$be;
     }
    }
   } else {
    $154 = $156;
    $155 = $157;
    $base$addr$1134 = $base$addr$1135;
    $c$8 = $c$6$lcssa;
    label = 72;
   }
  } while (0);
  if ((label | 0) == 72) if ((HEAPU8[11528 + $c$8 >> 0] | 0) >>> 0 < $base$addr$1134 >>> 0) {
   do {
    $116 = HEAP32[$rpos >> 2] | 0;
    if ($116 >>> 0 < (HEAP32[$shend >> 2] | 0) >>> 0) {
     HEAP32[$rpos >> 2] = $116 + 1;
     $c$9$be = HEAPU8[$116 >> 0] | 0;
    } else $c$9$be = ___shgetc($f) | 0;
   } while ((HEAPU8[11528 + $c$9$be >> 0] | 0) >>> 0 < $base$addr$1134 >>> 0);
   $call330 = ___errno_location() | 0;
   HEAP32[$call330 >> 2] = 34;
   $127 = $1;
   $129 = $0;
   $neg$1 = ($0 & 1 | 0) == 0 & 0 == 0 ? $neg$0 : 0;
  } else {
   $127 = $155;
   $129 = $154;
   $neg$1 = $neg$0;
  }
  if (HEAP32[$shend >> 2] | 0) HEAP32[$rpos >> 2] = (HEAP32[$rpos >> 2] | 0) + -1;
  if (!($127 >>> 0 < $1 >>> 0 | ($127 | 0) == ($1 | 0) & $129 >>> 0 < $0 >>> 0)) {
   if (!(($0 & 1 | 0) != 0 | 0 != 0 | ($neg$1 | 0) != 0)) {
    $call351 = ___errno_location() | 0;
    HEAP32[$call351 >> 2] = 34;
    $137 = _i64Add($0 | 0, $1 | 0, -1, -1) | 0;
    $150 = tempRet0;
    $151 = $137;
    break;
   }
   if ($127 >>> 0 > $1 >>> 0 | ($127 | 0) == ($1 | 0) & $129 >>> 0 > $0 >>> 0) {
    $call357 = ___errno_location() | 0;
    HEAP32[$call357 >> 2] = 34;
    $150 = $1;
    $151 = $0;
    break;
   }
  }
  $145 = (($neg$1 | 0) < 0) << 31 >> 31;
  $148 = _i64Subtract($129 ^ $neg$1 | 0, $127 ^ $145 | 0, $neg$1 | 0, $145 | 0) | 0;
  $150 = tempRet0;
  $151 = $148;
 } while (0);
 tempRet0 = $150;
 return $151 | 0;
}

function _check_rotation($rot) {
 $rot = $rot | 0;
 var $$sink6$sink$sink = 0.0, $0 = 0.0, $1 = 0.0, $2 = 0.0, $3 = 0.0, $4 = 0.0, $5 = 0.0, $add176 = 0.0, $add179 = 0.0, $add195 = 0.0, $add195$add197$div193 = 0.0, $add197 = 0.0, $add197$div193 = 0.0, $add197$div193$add195 = 0.0, $add203 = 0.0, $add203$add205$div201 = 0.0, $add205 = 0.0, $add205$div201 = 0.0, $add205$div201$add203 = 0.0, $add329 = 0.0, $add332 = 0.0, $add348 = 0.0, $add348$add350$div346 = 0.0, $add350 = 0.0, $add350$div346 = 0.0, $add350$div346$add348 = 0.0, $add356 = 0.0, $add356$add358$div354 = 0.0, $add358 = 0.0, $add358$div354 = 0.0, $add358$div354$add356 = 0.0, $add385 = 0.0, $add394 = 0.0, $add403 = 0.0, $add412 = 0.0, $add65 = 0.0, $arrayidx10 = 0, $arrayidx13 = 0, $arrayidx16 = 0, $arrayidx4 = 0, $arrayidx7 = 0, $call = 0.0, $call191 = 0.0, $call344 = 0.0, $cb$0 = 0.0, $cmp206 = 0, $cmp21711 = 0, $cmp245 = 0, $cmp359 = 0, $cmp37012 = 0, $cmp450 = 0, $cmp92 = 0, $div = 0.0, $div137 = 0.0, $div147 = 0.0, $div162 = 0.0, $div172 = 0.0, $div193 = 0.0, $div193$add197 = 0.0, $div201 = 0.0, $div201$add205 = 0.0, $div290 = 0.0, $div300 = 0.0, $div315 = 0.0, $div325 = 0.0, $div346 = 0.0, $div346$add350 = 0.0, $div354 = 0.0, $div354$add358 = 0.0, $div354$add358$sink = 0.0, $div52 = 0.0, $div54 = 0.0, $e1$0 = 0.0, $e2$0 = 0.0, $e3$0 = 0.0, $e4$0 = 0.0, $f$0 = 0, $f$2 = 0, $mul115 = 0.0, $mul118 = 0.0, $mul268 = 0.0, $mul271 = 0.0, $mul75 = 0.0, $p4$0$sink = 0.0, $sub = 0.0, $sub119 = 0.0, $sub161 = 0.0, $sub186 = 0.0, $sub272 = 0.0, $sub30 = 0.0, $sub314 = 0.0, $sub339 = 0.0, $sub38 = 0.0, $v1$sroa$0$0 = 0.0, $v1$sroa$18$0 = 0.0, $v1$sroa$33$0 = 0.0, $v2$sroa$0$0 = 0.0, $v2$sroa$18$0 = 0.0, $v2$sroa$33$0 = 0.0, $v3$sroa$0$0 = 0.0, $v3$sroa$0$0$v3$sroa$33$0$v3$sroa$62$0 = 0.0, $v3$sroa$0$2 = 0.0, $v3$sroa$33$0 = 0.0, $v3$sroa$33$0$v3$sroa$62$0 = 0.0, $v3$sroa$33$0$v3$sroa$62$0$v3$sroa$0$0 = 0.0, $v3$sroa$33$2 = 0.0, $v3$sroa$62$0 = 0.0, $v3$sroa$62$0$v3$sroa$33$0 = 0.0, $v3$sroa$62$3 = 0.0;
 $0 = +HEAPF64[$rot >> 3];
 $arrayidx4 = $rot + 8 | 0;
 $1 = +HEAPF64[$arrayidx4 >> 3];
 $arrayidx7 = $rot + 16 | 0;
 $2 = +HEAPF64[$arrayidx7 >> 3];
 $arrayidx10 = $rot + 24 | 0;
 $3 = +HEAPF64[$arrayidx10 >> 3];
 $arrayidx13 = $rot + 32 | 0;
 $4 = +HEAPF64[$arrayidx13 >> 3];
 $arrayidx16 = $rot + 40 | 0;
 $5 = +HEAPF64[$arrayidx16 >> 3];
 $sub = $1 * $5 - $2 * $4;
 $sub30 = $2 * $3 - $0 * $5;
 $sub38 = $0 * $4 - $1 * $3;
 $call = +Math_sqrt(+($sub38 * $sub38 + ($sub * $sub + $sub30 * $sub30)));
 if (!($call == 0.0)) {
  $div = $sub / $call;
  $div52 = $sub30 / $call;
  $div54 = $sub38 / $call;
  $add65 = $0 * $3 + $1 * $4 + $2 * $5;
  $cb$0 = $add65 < 0.0 ? -$add65 : $add65;
  $mul75 = (+Math_sqrt(+($cb$0 + 1.0)) + +Math_sqrt(+(1.0 - $cb$0))) * .5;
  if ($0 * $div52 - $1 * $div != 0.0) {
   $f$0 = 0;
   $v1$sroa$0$0 = $0;
   $v1$sroa$18$0 = $1;
   $v1$sroa$33$0 = $2;
   $v3$sroa$0$0 = $div;
   $v3$sroa$33$0 = $div52;
   $v3$sroa$62$0 = $div54;
  } else {
   $cmp92 = $0 * $div54 - $2 * $div != 0.0;
   $f$0 = $cmp92 ? 1 : 2;
   $v1$sroa$0$0 = $cmp92 ? $0 : $2;
   $v1$sroa$18$0 = $cmp92 ? $2 : $1;
   $v1$sroa$33$0 = $cmp92 ? $1 : $0;
   $v3$sroa$0$0 = $cmp92 ? $div : $div54;
   $v3$sroa$33$0 = $cmp92 ? $div54 : $div52;
   $v3$sroa$62$0 = $cmp92 ? $div52 : $div;
  }
  $mul115 = $v1$sroa$0$0 * $v3$sroa$33$0;
  $mul118 = $v1$sroa$18$0 * $v3$sroa$0$0;
  $sub119 = $mul115 - $mul118;
  if (!($sub119 == 0.0)) {
   $div137 = ($v1$sroa$18$0 * $v3$sroa$62$0 - $v1$sroa$33$0 * $v3$sroa$33$0) / $sub119;
   $div147 = $mul75 * $v3$sroa$33$0 / $sub119;
   $sub161 = $mul118 - $mul115;
   $div162 = ($v1$sroa$0$0 * $v3$sroa$62$0 - $v1$sroa$33$0 * $v3$sroa$0$0) / $sub161;
   $div172 = $mul75 * $v3$sroa$0$0 / $sub161;
   $add176 = $div137 * $div137 + $div162 * $div162 + 1.0;
   $add179 = $div137 * $div147 + $div162 * $div172;
   $sub186 = $add179 * $add179 - $add176 * ($div147 * $div147 + $div172 * $div172 + -1.0);
   if (!($sub186 < 0.0)) {
    $call191 = +Math_sqrt(+$sub186);
    $div193 = ($call191 - $add179) / $add176;
    $add195 = $div147 + $div137 * $div193;
    $add197 = $div172 + $div162 * $div193;
    $div201 = (-$add179 - $call191) / $add176;
    $add203 = $div147 + $div137 * $div201;
    $add205 = $div172 + $div162 * $div201;
    $cmp206 = ($f$0 | 0) == 1;
    $v3$sroa$33$0$v3$sroa$62$0 = $cmp206 ? $v3$sroa$33$0 : $v3$sroa$62$0;
    $v3$sroa$62$0$v3$sroa$33$0 = $cmp206 ? $v3$sroa$62$0 : $v3$sroa$33$0;
    $div193$add197 = $cmp206 ? $div193 : $add197;
    $add197$div193 = $cmp206 ? $add197 : $div193;
    $div201$add205 = $cmp206 ? $div201 : $add205;
    $add205$div201 = $cmp206 ? $add205 : $div201;
    $cmp21711 = ($f$0 | 0) == 2;
    $v3$sroa$0$0$v3$sroa$33$0$v3$sroa$62$0 = $cmp21711 ? $v3$sroa$0$0 : $v3$sroa$33$0$v3$sroa$62$0;
    $v3$sroa$33$0$v3$sroa$62$0$v3$sroa$0$0 = $cmp21711 ? $v3$sroa$33$0$v3$sroa$62$0 : $v3$sroa$0$0;
    $add197$div193$add195 = $cmp21711 ? $add197$div193 : $add195;
    $add195$add197$div193 = $cmp21711 ? $add195 : $add197$div193;
    $add205$div201$add203 = $cmp21711 ? $add205$div201 : $add203;
    $add203$add205$div201 = $cmp21711 ? $add203 : $add205$div201;
    if ($3 * $v3$sroa$62$0$v3$sroa$33$0 - $4 * $v3$sroa$33$0$v3$sroa$62$0$v3$sroa$0$0 != 0.0) {
     $f$2 = 0;
     $v2$sroa$0$0 = $3;
     $v2$sroa$18$0 = $4;
     $v2$sroa$33$0 = $5;
     $v3$sroa$0$2 = $v3$sroa$33$0$v3$sroa$62$0$v3$sroa$0$0;
     $v3$sroa$33$2 = $v3$sroa$62$0$v3$sroa$33$0;
     $v3$sroa$62$3 = $v3$sroa$0$0$v3$sroa$33$0$v3$sroa$62$0;
    } else {
     $cmp245 = $3 * $v3$sroa$0$0$v3$sroa$33$0$v3$sroa$62$0 - $5 * $v3$sroa$33$0$v3$sroa$62$0$v3$sroa$0$0 != 0.0;
     $f$2 = $cmp245 ? 1 : 2;
     $v2$sroa$0$0 = $cmp245 ? $3 : $5;
     $v2$sroa$18$0 = $cmp245 ? $5 : $4;
     $v2$sroa$33$0 = $cmp245 ? $4 : $3;
     $v3$sroa$0$2 = $cmp245 ? $v3$sroa$33$0$v3$sroa$62$0$v3$sroa$0$0 : $v3$sroa$0$0$v3$sroa$33$0$v3$sroa$62$0;
     $v3$sroa$33$2 = $cmp245 ? $v3$sroa$0$0$v3$sroa$33$0$v3$sroa$62$0 : $v3$sroa$62$0$v3$sroa$33$0;
     $v3$sroa$62$3 = $cmp245 ? $v3$sroa$62$0$v3$sroa$33$0 : $v3$sroa$33$0$v3$sroa$62$0$v3$sroa$0$0;
    }
    $mul268 = $v2$sroa$0$0 * $v3$sroa$33$2;
    $mul271 = $v2$sroa$18$0 * $v3$sroa$0$2;
    $sub272 = $mul268 - $mul271;
    if (!($sub272 == 0.0)) {
     $div290 = ($v2$sroa$18$0 * $v3$sroa$62$3 - $v2$sroa$33$0 * $v3$sroa$33$2) / $sub272;
     $div300 = $mul75 * $v3$sroa$33$2 / $sub272;
     $sub314 = $mul271 - $mul268;
     $div315 = ($v2$sroa$0$0 * $v3$sroa$62$3 - $v2$sroa$33$0 * $v3$sroa$0$2) / $sub314;
     $div325 = $mul75 * $v3$sroa$0$2 / $sub314;
     $add329 = $div290 * $div290 + $div315 * $div315 + 1.0;
     $add332 = $div290 * $div300 + $div315 * $div325;
     $sub339 = $add332 * $add332 - $add329 * ($div300 * $div300 + $div325 * $div325 + -1.0);
     if (!($sub339 < 0.0)) {
      $call344 = +Math_sqrt(+$sub339);
      $div346 = ($call344 - $add332) / $add329;
      $add348 = $div300 + $div290 * $div346;
      $add350 = $div325 + $div315 * $div346;
      $div354 = (-$add332 - $call344) / $add329;
      $add356 = $div300 + $div290 * $div354;
      $add358 = $div325 + $div315 * $div354;
      $cmp359 = ($f$2 | 0) == 1;
      $div346$add350 = $cmp359 ? $div346 : $add350;
      $add350$div346 = $cmp359 ? $add350 : $div346;
      $div354$add358 = $cmp359 ? $div354 : $add358;
      $add358$div354 = $cmp359 ? $add358 : $div354;
      $cmp37012 = ($f$2 | 0) == 2;
      $add350$div346$add348 = $cmp37012 ? $add350$div346 : $add348;
      $add348$add350$div346 = $cmp37012 ? $add348 : $add350$div346;
      $add358$div354$add356 = $cmp37012 ? $add358$div354 : $add356;
      $add356$add358$div354 = $cmp37012 ? $add356 : $add358$div354;
      $add385 = $add195$add197$div193 * $add348$add350$div346 + ($div193$add197 * $div346$add350 + $add197$div193$add195 * $add350$div346$add348);
      $e1$0 = $add385 < 0.0 ? -$add385 : $add385;
      $add394 = $add195$add197$div193 * $add356$add358$div354 + ($div193$add197 * $div354$add358 + $add197$div193$add195 * $add358$div354$add356);
      $e2$0 = $add394 < 0.0 ? -$add394 : $add394;
      $add403 = $add203$add205$div201 * $add348$add350$div346 + ($div201$add205 * $div346$add350 + $add205$div201$add203 * $add350$div346$add348);
      $e3$0 = $add403 < 0.0 ? -$add403 : $add403;
      $add412 = $add203$add205$div201 * $add356$add358$div354 + ($div201$add205 * $div354$add358 + $add205$div201$add203 * $add358$div354$add356);
      $e4$0 = $add412 < 0.0 ? -$add412 : $add412;
      $cmp450 = $e3$0 < $e4$0;
      do if ($e1$0 < $e2$0) {
       if (!($e1$0 < $e3$0)) {
        HEAPF64[$rot >> 3] = $add205$div201$add203;
        HEAPF64[$arrayidx4 >> 3] = $div201$add205;
        HEAPF64[$arrayidx7 >> 3] = $add203$add205$div201;
        $$sink6$sink$sink = $cmp450 ? $add348$add350$div346 : $add356$add358$div354;
        $div354$add358$sink = $cmp450 ? $div346$add350 : $div354$add358;
        $p4$0$sink = $cmp450 ? $add350$div346$add348 : $add358$div354$add356;
        break;
       }
       if ($e1$0 < $e4$0) {
        HEAPF64[$rot >> 3] = $add197$div193$add195;
        HEAPF64[$arrayidx4 >> 3] = $div193$add197;
        HEAPF64[$arrayidx7 >> 3] = $add195$add197$div193;
        $$sink6$sink$sink = $add348$add350$div346;
        $div354$add358$sink = $div346$add350;
        $p4$0$sink = $add350$div346$add348;
        break;
       } else {
        HEAPF64[$rot >> 3] = $add205$div201$add203;
        HEAPF64[$arrayidx4 >> 3] = $div201$add205;
        HEAPF64[$arrayidx7 >> 3] = $add203$add205$div201;
        $$sink6$sink$sink = $add356$add358$div354;
        $div354$add358$sink = $div354$add358;
        $p4$0$sink = $add358$div354$add356;
        break;
       }
      } else {
       if (!($e2$0 < $e3$0)) {
        HEAPF64[$rot >> 3] = $add205$div201$add203;
        HEAPF64[$arrayidx4 >> 3] = $div201$add205;
        HEAPF64[$arrayidx7 >> 3] = $add203$add205$div201;
        $$sink6$sink$sink = $cmp450 ? $add348$add350$div346 : $add356$add358$div354;
        $div354$add358$sink = $cmp450 ? $div346$add350 : $div354$add358;
        $p4$0$sink = $cmp450 ? $add350$div346$add348 : $add358$div354$add356;
        break;
       }
       if ($e2$0 < $e4$0) {
        HEAPF64[$rot >> 3] = $add197$div193$add195;
        HEAPF64[$arrayidx4 >> 3] = $div193$add197;
        HEAPF64[$arrayidx7 >> 3] = $add195$add197$div193;
        $$sink6$sink$sink = $add356$add358$div354;
        $div354$add358$sink = $div354$add358;
        $p4$0$sink = $add358$div354$add356;
        break;
       } else {
        HEAPF64[$rot >> 3] = $add205$div201$add203;
        HEAPF64[$arrayidx4 >> 3] = $div201$add205;
        HEAPF64[$arrayidx7 >> 3] = $add203$add205$div201;
        $$sink6$sink$sink = $add356$add358$div354;
        $div354$add358$sink = $div354$add358;
        $p4$0$sink = $add358$div354$add356;
        break;
       }
      } while (0);
      HEAPF64[$arrayidx10 >> 3] = $p4$0$sink;
      HEAPF64[$arrayidx13 >> 3] = $div354$add358$sink;
      HEAPF64[$arrayidx16 >> 3] = $$sink6$sink$sink;
     }
    }
   }
  }
 }
 return;
}

function __ZN10__cxxabiv112_GLOBAL__N_19base_nameINSt3__212basic_stringIcNS2_11char_traitsIcEENS0_12malloc_allocIcEEEEEET_RS9_($agg$result, $s) {
 $agg$result = $agg$result | 0;
 $s = $s | 0;
 var $0 = 0, $10 = 0, $12 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $9 = 0, $__first$addr$0$i$i = 0, $__i$0$i$i = 0, $__p$0$i$i = 0, $__p$0$i$i119 = 0, $__p$0$i$i156 = 0, $__p$0$i$i48 = 0, $__p$0$i$i82 = 0, $__p$0$ph$i$i = 0, $__size_$i$i$i = 0, $__size_$i3$i$i = 0, $add$ptr = 0, $and$i$i$i$i = 0, $and$i$i$i$i112 = 0, $and$i$i$i$i149 = 0, $and$i$i$i$i42 = 0, $and$i$i$i$i75 = 0, $arrayidx23 = 0, $c$0$ph = 0, $call$i = 0, $call$i$i$i = 0, $call$i$i$i113 = 0, $call$i$i$i150 = 0, $call$i$i$i43 = 0, $call$i$i$i76 = 0, $call$i102 = 0, $call$i123 = 0, $call$i139 = 0, $call$i34 = 0, $call$i49 = 0, $call$i65 = 0, $call$i86 = 0, $cond$i$i166 = 0, $dec = 0, $incdec$ptr = 0, $p0$0 = 0, $p0$1 = 0, $pe$0 = 0, $pe$0$ph = 0, $pe$2 = 0, $pe$2$pn = 0, $ref$tmp$i$i138 = 0, $sub$ptr$sub$i$i$i$i = 0, $tobool$i$i$i162 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $ref$tmp$i$i138 = sp;
 $__size_$i$i$i = $s + 11 | 0;
 $0 = HEAP8[$__size_$i$i$i >> 0] | 0;
 $__size_$i3$i$i = $s + 4 | 0;
 L1 : do if (!(($0 << 24 >> 24 < 0 ? HEAP32[$__size_$i3$i$i >> 2] | 0 : $0 & 255) | 0)) __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEC2ERKS7_($agg$result, $s); else {
  $call$i = __ZNSt3__211char_traitsIcE6lengthEPKc(15707) | 0;
  $2 = HEAP8[$__size_$i$i$i >> 0] | 0;
  if (($call$i | 0) == (($2 << 24 >> 24 < 0 ? HEAP32[$__size_$i3$i$i >> 2] | 0 : $2 & 255) | 0)) if (!(__ZNKSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE7compareEjjPKcj($s, 15707, $call$i) | 0)) {
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6assignEPKc($s, 15719);
   HEAP32[$agg$result >> 2] = 0;
   HEAP32[$agg$result + 4 >> 2] = 0;
   HEAP32[$agg$result + 8 >> 2] = 0;
   $call$i34 = __ZNSt3__211char_traitsIcE6lengthEPKc(15790) | 0;
   if ($call$i34 >>> 0 > 4294967279) __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($agg$result);
   if ($call$i34 >>> 0 < 11) {
    HEAP8[$agg$result + 11 >> 0] = $call$i34;
    $__p$0$i$i48 = $agg$result;
   } else {
    $and$i$i$i$i42 = $call$i34 + 16 & -16;
    $call$i$i$i43 = __ZN10__cxxabiv112_GLOBAL__N_112malloc_allocIcE8allocateEj($and$i$i$i$i42) | 0;
    HEAP32[$agg$result >> 2] = $call$i$i$i43;
    HEAP32[$agg$result + 8 >> 2] = $and$i$i$i$i42 | -2147483648;
    HEAP32[$agg$result + 4 >> 2] = $call$i34;
    $__p$0$i$i48 = $call$i$i$i43;
   }
   __ZNSt3__211char_traitsIcE4copyEPcPKcj($__p$0$i$i48, 15790, $call$i34) | 0;
   HEAP8[$ref$tmp$i$i138 >> 0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($__p$0$i$i48 + $call$i34 | 0, $ref$tmp$i$i138);
   break;
  }
  $call$i49 = __ZNSt3__211char_traitsIcE6lengthEPKc(15803) | 0;
  $4 = HEAP8[$__size_$i$i$i >> 0] | 0;
  if (($call$i49 | 0) == (($4 << 24 >> 24 < 0 ? HEAP32[$__size_$i3$i$i >> 2] | 0 : $4 & 255) | 0)) if (!(__ZNKSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE7compareEjjPKcj($s, 15803, $call$i49) | 0)) {
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6assignEPKc($s, 15816);
   HEAP32[$agg$result >> 2] = 0;
   HEAP32[$agg$result + 4 >> 2] = 0;
   HEAP32[$agg$result + 8 >> 2] = 0;
   $call$i65 = __ZNSt3__211char_traitsIcE6lengthEPKc(15866) | 0;
   if ($call$i65 >>> 0 > 4294967279) __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($agg$result);
   if ($call$i65 >>> 0 < 11) {
    HEAP8[$agg$result + 11 >> 0] = $call$i65;
    $__p$0$i$i82 = $agg$result;
   } else {
    $and$i$i$i$i75 = $call$i65 + 16 & -16;
    $call$i$i$i76 = __ZN10__cxxabiv112_GLOBAL__N_112malloc_allocIcE8allocateEj($and$i$i$i$i75) | 0;
    HEAP32[$agg$result >> 2] = $call$i$i$i76;
    HEAP32[$agg$result + 8 >> 2] = $and$i$i$i$i75 | -2147483648;
    HEAP32[$agg$result + 4 >> 2] = $call$i65;
    $__p$0$i$i82 = $call$i$i$i76;
   }
   __ZNSt3__211char_traitsIcE4copyEPcPKcj($__p$0$i$i82, 15866, $call$i65) | 0;
   HEAP8[$ref$tmp$i$i138 >> 0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($__p$0$i$i82 + $call$i65 | 0, $ref$tmp$i$i138);
   break;
  }
  $call$i86 = __ZNSt3__211char_traitsIcE6lengthEPKc(15880) | 0;
  $6 = HEAP8[$__size_$i$i$i >> 0] | 0;
  if (($call$i86 | 0) == (($6 << 24 >> 24 < 0 ? HEAP32[$__size_$i3$i$i >> 2] | 0 : $6 & 255) | 0)) if (!(__ZNKSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE7compareEjjPKcj($s, 15880, $call$i86) | 0)) {
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6assignEPKc($s, 15893);
   HEAP32[$agg$result >> 2] = 0;
   HEAP32[$agg$result + 4 >> 2] = 0;
   HEAP32[$agg$result + 8 >> 2] = 0;
   $call$i102 = __ZNSt3__211char_traitsIcE6lengthEPKc(15943) | 0;
   if ($call$i102 >>> 0 > 4294967279) __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($agg$result);
   if ($call$i102 >>> 0 < 11) {
    HEAP8[$agg$result + 11 >> 0] = $call$i102;
    $__p$0$i$i119 = $agg$result;
   } else {
    $and$i$i$i$i112 = $call$i102 + 16 & -16;
    $call$i$i$i113 = __ZN10__cxxabiv112_GLOBAL__N_112malloc_allocIcE8allocateEj($and$i$i$i$i112) | 0;
    HEAP32[$agg$result >> 2] = $call$i$i$i113;
    HEAP32[$agg$result + 8 >> 2] = $and$i$i$i$i112 | -2147483648;
    HEAP32[$agg$result + 4 >> 2] = $call$i102;
    $__p$0$i$i119 = $call$i$i$i113;
   }
   __ZNSt3__211char_traitsIcE4copyEPcPKcj($__p$0$i$i119, 15943, $call$i102) | 0;
   HEAP8[$ref$tmp$i$i138 >> 0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($__p$0$i$i119 + $call$i102 | 0, $ref$tmp$i$i138);
   break;
  }
  $call$i123 = __ZNSt3__211char_traitsIcE6lengthEPKc(15957) | 0;
  $8 = HEAP8[$__size_$i$i$i >> 0] | 0;
  $9 = HEAP32[$__size_$i3$i$i >> 2] | 0;
  do if (($call$i123 | 0) == (($8 << 24 >> 24 < 0 ? $9 : $8 & 255) | 0)) {
   if (__ZNKSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE7compareEjjPKcj($s, 15957, $call$i123) | 0) {
    $10 = HEAP8[$__size_$i$i$i >> 0] | 0;
    $12 = HEAP32[$__size_$i3$i$i >> 2] | 0;
    break;
   }
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6assignEPKc($s, 15971);
   HEAP32[$agg$result >> 2] = 0;
   HEAP32[$agg$result + 4 >> 2] = 0;
   HEAP32[$agg$result + 8 >> 2] = 0;
   $call$i139 = __ZNSt3__211char_traitsIcE6lengthEPKc(16022) | 0;
   if ($call$i139 >>> 0 > 4294967279) __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($agg$result);
   if ($call$i139 >>> 0 < 11) {
    HEAP8[$agg$result + 11 >> 0] = $call$i139;
    $__p$0$i$i156 = $agg$result;
   } else {
    $and$i$i$i$i149 = $call$i139 + 16 & -16;
    $call$i$i$i150 = __ZN10__cxxabiv112_GLOBAL__N_112malloc_allocIcE8allocateEj($and$i$i$i$i149) | 0;
    HEAP32[$agg$result >> 2] = $call$i$i$i150;
    HEAP32[$agg$result + 8 >> 2] = $and$i$i$i$i149 | -2147483648;
    HEAP32[$agg$result + 4 >> 2] = $call$i139;
    $__p$0$i$i156 = $call$i$i$i150;
   }
   __ZNSt3__211char_traitsIcE4copyEPcPKcj($__p$0$i$i156, 16022, $call$i139) | 0;
   HEAP8[$ref$tmp$i$i138 >> 0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($__p$0$i$i156 + $call$i139 | 0, $ref$tmp$i$i138);
   break L1;
  } else {
   $10 = $8;
   $12 = $9;
  } while (0);
  $tobool$i$i$i162 = $10 << 24 >> 24 < 0;
  $cond$i$i166 = $tobool$i$i$i162 ? HEAP32[$s >> 2] | 0 : $s;
  $add$ptr = $cond$i$i166 + ($tobool$i$i$i162 ? $12 : $10 & 255) | 0;
  L50 : do if ((HEAP8[$add$ptr + -1 >> 0] | 0) == 62) {
   $c$0$ph = 1;
   $pe$0$ph = $add$ptr;
   L51 : while (1) {
    $pe$0 = $pe$0$ph;
    L53 : while (1) {
     $incdec$ptr = $pe$0 + -1 | 0;
     if (($incdec$ptr | 0) == ($cond$i$i166 | 0)) break L51;
     $arrayidx23 = $pe$0 + -2 | 0;
     switch (HEAP8[$arrayidx23 >> 0] | 0) {
     case 60:
      {
       label = 43;
       break L53;
       break;
      }
     case 62:
      {
       label = 44;
       break L53;
       break;
      }
     default:
      $pe$0 = $incdec$ptr;
     }
    }
    if ((label | 0) == 43) {
     label = 0;
     $dec = $c$0$ph + -1 | 0;
     if (!$dec) {
      $pe$2 = $arrayidx23;
      break L50;
     } else {
      $c$0$ph = $dec;
      $pe$0$ph = $incdec$ptr;
      continue;
     }
    } else if ((label | 0) == 44) {
     label = 0;
     $c$0$ph = $c$0$ph + 1 | 0;
     $pe$0$ph = $incdec$ptr;
     continue;
    }
   }
   HEAP32[$agg$result >> 2] = 0;
   HEAP32[$agg$result + 4 >> 2] = 0;
   HEAP32[$agg$result + 8 >> 2] = 0;
   $__i$0$i$i = 0;
   while (1) {
    if (($__i$0$i$i | 0) == 3) break L1;
    HEAP32[$agg$result + ($__i$0$i$i << 2) >> 2] = 0;
    $__i$0$i$i = $__i$0$i$i + 1 | 0;
   }
  } else $pe$2 = $add$ptr; while (0);
  $pe$2$pn = $pe$2;
  while (1) {
   $p0$0 = $pe$2$pn + -1 | 0;
   if (($p0$0 | 0) == ($cond$i$i166 | 0)) {
    $p0$1 = $cond$i$i166;
    break;
   }
   if ((HEAP8[$p0$0 >> 0] | 0) == 58) {
    $p0$1 = $pe$2$pn;
    break;
   } else $pe$2$pn = $p0$0;
  }
  HEAP32[$agg$result >> 2] = 0;
  HEAP32[$agg$result + 4 >> 2] = 0;
  HEAP32[$agg$result + 8 >> 2] = 0;
  $sub$ptr$sub$i$i$i$i = $pe$2 - $p0$1 | 0;
  if ($sub$ptr$sub$i$i$i$i >>> 0 > 4294967279) __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($agg$result);
  if ($sub$ptr$sub$i$i$i$i >>> 0 < 11) {
   HEAP8[$agg$result + 11 >> 0] = $sub$ptr$sub$i$i$i$i;
   $__p$0$ph$i$i = $agg$result;
  } else {
   $and$i$i$i$i = $sub$ptr$sub$i$i$i$i + 16 & -16;
   $call$i$i$i = __ZN10__cxxabiv112_GLOBAL__N_112malloc_allocIcE8allocateEj($and$i$i$i$i) | 0;
   HEAP32[$agg$result >> 2] = $call$i$i$i;
   HEAP32[$agg$result + 8 >> 2] = $and$i$i$i$i | -2147483648;
   HEAP32[$agg$result + 4 >> 2] = $sub$ptr$sub$i$i$i$i;
   $__p$0$ph$i$i = $call$i$i$i;
  }
  $__first$addr$0$i$i = $p0$1;
  $__p$0$i$i = $__p$0$ph$i$i;
  while (1) {
   if (($__first$addr$0$i$i | 0) == ($pe$2 | 0)) break;
   __ZNSt3__211char_traitsIcE6assignERcRKc($__p$0$i$i, $__first$addr$0$i$i);
   $__first$addr$0$i$i = $__first$addr$0$i$i + 1 | 0;
   $__p$0$i$i = $__p$0$i$i + 1 | 0;
  }
  HEAP8[$ref$tmp$i$i138 >> 0] = 0;
  __ZNSt3__211char_traitsIcE6assignERcRKc($__p$0$ph$i$i + $sub$ptr$sub$i$i$i$i | 0, $ref$tmp$i$i138);
 } while (0);
 STACKTOP = sp;
 return;
}

function __ZN10__cxxabiv112_GLOBAL__N_119parse_template_argsINS0_2DbEEEPKcS4_S4_RT_($first, $last, $db) {
 $first = $first | 0;
 $last = $last | 0;
 $db = $db | 0;
 var $16 = 0, $17 = 0, $19 = 0, $2 = 0, $20 = 0, $24 = 0, $26 = 0, $29 = 0, $3 = 0, $32 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $41 = 0, $7 = 0, $9 = 0, $__end_$i$i$i = 0, $__end_$i52 = 0, $__end_$i62 = 0, $__end_$i66 = 0, $__end_$i81 = 0, $__first_$i$i$i$i = 0, $__i$0$i$i = 0, $__p$0$i$i = 0, $__size_$i$i$i = 0, $__size_$i$i$i$i$i = 0, $__size_$i$i$pre$phiZZZ2D = 0, $__size_$i12$i$i = 0, $__size_$i3$i$i$i = 0, $__size_$i3$i$pre$phiZZZ2D = 0, $add$ptr$i57 = 0, $add$ptr$i95 = 0, $add$ptr90 = 0, $agg$tmp = 0, $and$i$i$i$i = 0, $args = 0, $arrayidx$i = 0, $call$i = 0, $call$i$i$i = 0, $call15 = 0, $incdec$ptr$i$i$i = 0, $incdec$ptr$i$i$i60 = 0, $incdec$ptr$i$i$i98 = 0, $k$0 = 0, $k1$0 = 0, $k53$0 = 0, $ref$tmp = 0, $ref$tmp$i$i$i = 0, $retval$3 = 0, $retval$sroa$0$0$$sroa_idx$i64 = 0, $retval$sroa$0$0$copyload$i65121 = 0, $sub$ptr$div$i = 0, $sub$ptr$div$i55 = 0, $t$0 = 0, $tag_templates = 0, $template_param = 0, $tobool$i$i$i = 0, $tobool$i$i$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(64);
 $ref$tmp$i$i$i = sp + 32 | 0;
 $args = sp + 16 | 0;
 $ref$tmp = sp;
 $agg$tmp = sp + 4 | 0;
 do if (($last - $first | 0) > 1) if ((HEAP8[$first >> 0] | 0) == 73) {
  $tag_templates = $db + 61 | 0;
  $template_param = $db + 32 | 0;
  L4 : do if (HEAP8[$tag_templates >> 0] | 0) {
   $2 = HEAP32[$db + 36 >> 2] | 0;
   $3 = HEAP32[$2 + -16 >> 2] | 0;
   $__end_$i$i$i = $2 + -12 | 0;
   while (1) {
    $4 = HEAP32[$__end_$i$i$i >> 2] | 0;
    if (($4 | 0) == ($3 | 0)) break L4;
    $incdec$ptr$i$i$i = $4 + -16 | 0;
    HEAP32[$__end_$i$i$i >> 2] = $incdec$ptr$i$i$i;
    __ZNSt3__213__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEED2Ev($incdec$ptr$i$i$i);
   }
  } while (0);
  HEAP32[$args >> 2] = 0;
  HEAP32[$args + 4 >> 2] = 0;
  HEAP32[$args + 8 >> 2] = 0;
  $call$i = __ZNSt3__211char_traitsIcE6lengthEPKc(14921) | 0;
  if ($call$i >>> 0 > 4294967279) __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($args);
  if ($call$i >>> 0 < 11) {
   $__size_$i$i$i = $args + 11 | 0;
   HEAP8[$__size_$i$i$i >> 0] = $call$i;
   $__p$0$i$i = $args;
   $__size_$i$i$pre$phiZZZ2D = $__size_$i$i$i;
   $__size_$i3$i$pre$phiZZZ2D = $args + 4 | 0;
  } else {
   $and$i$i$i$i = $call$i + 16 & -16;
   $call$i$i$i = __ZN10__cxxabiv112_GLOBAL__N_112malloc_allocIcE8allocateEj($and$i$i$i$i) | 0;
   HEAP32[$args >> 2] = $call$i$i$i;
   HEAP32[$args + 8 >> 2] = $and$i$i$i$i | -2147483648;
   $__size_$i12$i$i = $args + 4 | 0;
   HEAP32[$__size_$i12$i$i >> 2] = $call$i;
   $__p$0$i$i = $call$i$i$i;
   $__size_$i$i$pre$phiZZZ2D = $args + 11 | 0;
   $__size_$i3$i$pre$phiZZZ2D = $__size_$i12$i$i;
  }
  __ZNSt3__211char_traitsIcE4copyEPcPKcj($__p$0$i$i, 14921, $call$i) | 0;
  HEAP8[$ref$tmp$i$i$i >> 0] = 0;
  __ZNSt3__211char_traitsIcE6assignERcRKc($__p$0$i$i + $call$i | 0, $ref$tmp$i$i$i);
  $__end_$i52 = $db + 4 | 0;
  $__end_$i62 = $db + 36 | 0;
  $retval$sroa$0$0$$sroa_idx$i64 = $db + 12 | 0;
  $__size_$i$i$i$i$i = $ref$tmp$i$i$i + 11 | 0;
  $__size_$i3$i$i$i = $ref$tmp$i$i$i + 4 | 0;
  $__first_$i$i$i$i = $db + 40 | 0;
  $t$0 = $first + 1 | 0;
  L17 : while (1) {
   if ((HEAP8[$t$0 >> 0] | 0) == 69) break;
   if (HEAP8[$tag_templates >> 0] | 0) {
    HEAP32[$ref$tmp >> 2] = HEAP32[$retval$sroa$0$0$$sroa_idx$i64 >> 2];
    $7 = HEAP32[$__end_$i62 >> 2] | 0;
    if ($7 >>> 0 < (HEAP32[$__first_$i$i$i$i >> 2] | 0) >>> 0) {
     __ZN10__cxxabiv112_GLOBAL__N_111short_allocINSt3__26vectorINS0_11string_pairENS1_IS4_Lj4096EEEEELj4096EEC2IS4_EERKNS1_IT_Lj4096EEE($ref$tmp$i$i$i, $ref$tmp);
     HEAP32[$7 >> 2] = 0;
     HEAP32[$7 + 4 >> 2] = 0;
     $9 = HEAP32[$ref$tmp$i$i$i >> 2] | 0;
     HEAP32[$7 + 8 >> 2] = 0;
     HEAP32[$7 + 12 >> 2] = $9;
     HEAP32[$__end_$i62 >> 2] = (HEAP32[$__end_$i62 >> 2] | 0) + 16;
    } else __ZNSt3__26vectorINS0_INS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEENS4_IS6_Lj4096EEEEENS4_IS8_Lj4096EEEE24__emplace_back_slow_pathIJS5_EEEvDpOT_($template_param, $ref$tmp);
   }
   $sub$ptr$div$i = ((HEAP32[$__end_$i52 >> 2] | 0) - (HEAP32[$db >> 2] | 0) | 0) / 24 | 0;
   $call15 = __ZN10__cxxabiv112_GLOBAL__N_118parse_template_argINS0_2DbEEEPKcS4_S4_RT_($t$0, $last, $db) | 0;
   $sub$ptr$div$i55 = ((HEAP32[$__end_$i52 >> 2] | 0) - (HEAP32[$db >> 2] | 0) | 0) / 24 | 0;
   L27 : do if (HEAP8[$tag_templates >> 0] | 0) {
    $16 = HEAP32[$__end_$i62 >> 2] | 0;
    $add$ptr$i57 = $16 + -16 | 0;
    $17 = $16;
    while (1) {
     if (($17 | 0) == ($add$ptr$i57 | 0)) break L27;
     $incdec$ptr$i$i$i60 = $17 + -16 | 0;
     HEAP32[$__end_$i62 >> 2] = $incdec$ptr$i$i$i60;
     __ZNSt3__213__vector_baseINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEENS5_IS7_Lj4096EEEED2Ev($incdec$ptr$i$i$i60);
     $17 = HEAP32[$__end_$i62 >> 2] | 0;
    }
   } while (0);
   if (($call15 | 0) == ($t$0 | 0) | ($call15 | 0) == ($last | 0)) {
    label = 53;
    break;
   }
   L34 : do if (!(HEAP8[$tag_templates >> 0] | 0)) $k53$0 = $sub$ptr$div$i; else {
    $19 = HEAP32[$__end_$i62 >> 2] | 0;
    $retval$sroa$0$0$copyload$i65121 = HEAP32[$retval$sroa$0$0$$sroa_idx$i64 >> 2] | 0;
    HEAP32[$ref$tmp$i$i$i >> 2] = $retval$sroa$0$0$copyload$i65121;
    $__end_$i66 = $19 + -12 | 0;
    $20 = HEAP32[$__end_$i66 >> 2] | 0;
    if ($20 >>> 0 < (HEAP32[$19 + -8 >> 2] | 0) >>> 0) {
     HEAP32[$20 >> 2] = 0;
     HEAP32[$20 + 4 >> 2] = 0;
     HEAP32[$20 + 8 >> 2] = 0;
     HEAP32[$20 + 12 >> 2] = $retval$sroa$0$0$copyload$i65121;
     HEAP32[$__end_$i66 >> 2] = (HEAP32[$__end_$i66 >> 2] | 0) + 16;
    } else __ZNSt3__26vectorINS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEENS4_IS6_Lj4096EEEE24__emplace_back_slow_pathIJS5_EEEvDpOT_($19 + -16 | 0, $ref$tmp$i$i$i);
    $k$0 = $sub$ptr$div$i;
    while (1) {
     if ($k$0 >>> 0 >= $sub$ptr$div$i55 >>> 0) {
      $k53$0 = $sub$ptr$div$i;
      break L34;
     }
     $24 = HEAP32[(HEAP32[$__end_$i62 >> 2] | 0) + -12 >> 2] | 0;
     $arrayidx$i = (HEAP32[$db >> 2] | 0) + ($k$0 * 24 | 0) | 0;
     $__end_$i81 = $24 + -12 | 0;
     $26 = HEAP32[$__end_$i81 >> 2] | 0;
     if (($26 | 0) == (HEAP32[$24 + -8 >> 2] | 0)) __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIRKS3_EEvOT_($24 + -16 | 0, $arrayidx$i); else {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ERKS1_($26, $arrayidx$i);
      HEAP32[$__end_$i81 >> 2] = (HEAP32[$__end_$i81 >> 2] | 0) + 24;
     }
     $k$0 = $k$0 + 1 | 0;
    }
   } while (0);
   while (1) {
    if ($k53$0 >>> 0 >= $sub$ptr$div$i55 >>> 0) {
     $k1$0 = $sub$ptr$div$i55;
     break;
    }
    $29 = HEAP8[$__size_$i$i$pre$phiZZZ2D >> 0] | 0;
    if (($29 << 24 >> 24 < 0 ? HEAP32[$__size_$i3$i$pre$phiZZZ2D >> 2] | 0 : $29 & 255) >>> 0 > 1) __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($args, 15109) | 0;
    __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($ref$tmp$i$i$i, (HEAP32[$db >> 2] | 0) + ($k53$0 * 24 | 0) | 0);
    $32 = HEAP8[$__size_$i$i$i$i$i >> 0] | 0;
    $tobool$i$i$i$i$i = $32 << 24 >> 24 < 0;
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($args, $tobool$i$i$i$i$i ? HEAP32[$ref$tmp$i$i$i >> 2] | 0 : $ref$tmp$i$i$i, $tobool$i$i$i$i$i ? HEAP32[$__size_$i3$i$i$i >> 2] | 0 : $32 & 255) | 0;
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($ref$tmp$i$i$i);
    $k53$0 = $k53$0 + 1 | 0;
   }
   while (1) {
    if (($k1$0 | 0) == ($sub$ptr$div$i | 0)) {
     $t$0 = $call15;
     continue L17;
    }
    $35 = HEAP32[$__end_$i52 >> 2] | 0;
    $add$ptr$i95 = $35 + -24 | 0;
    $36 = $35;
    while (1) {
     if (($36 | 0) == ($add$ptr$i95 | 0)) break;
     $incdec$ptr$i$i$i98 = $36 + -24 | 0;
     HEAP32[$__end_$i52 >> 2] = $incdec$ptr$i$i$i98;
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($incdec$ptr$i$i$i98);
     $36 = HEAP32[$__end_$i52 >> 2] | 0;
    }
    $k1$0 = $k1$0 + -1 | 0;
   }
  }
  if ((label | 0) == 53) {
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($args);
   $retval$3 = $first;
   break;
  }
  $add$ptr90 = $t$0 + 1 | 0;
  $37 = HEAP8[$__size_$i$i$pre$phiZZZ2D >> 0] | 0;
  $tobool$i$i$i = $37 << 24 >> 24 < 0;
  if ((HEAP8[($tobool$i$i$i ? HEAP32[$args >> 2] | 0 : $args) + ($tobool$i$i$i ? HEAP32[$__size_$i3$i$pre$phiZZZ2D >> 2] | 0 : $37 & 255) + -1 >> 0] | 0) == 62) __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($args, 16300) | 0; else __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($args, 14923) | 0;
  HEAP32[$agg$tmp >> 2] = HEAP32[$args >> 2];
  HEAP32[$agg$tmp + 4 >> 2] = HEAP32[$args + 4 >> 2];
  HEAP32[$agg$tmp + 8 >> 2] = HEAP32[$args + 8 >> 2];
  $__i$0$i$i = 0;
  while (1) {
   if (($__i$0$i$i | 0) == 3) break;
   HEAP32[$args + ($__i$0$i$i << 2) >> 2] = 0;
   $__i$0$i$i = $__i$0$i$i + 1 | 0;
  }
  __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ENSt3__212basic_stringIcNS2_11char_traitsIcEENS0_12malloc_allocIcEEEE($ref$tmp$i$i$i, $agg$tmp);
  $41 = HEAP32[$__end_$i52 >> 2] | 0;
  if ($41 >>> 0 < (HEAP32[$db + 8 >> 2] | 0) >>> 0) {
   __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($41, $ref$tmp$i$i$i);
   HEAP32[$__end_$i52 >> 2] = (HEAP32[$__end_$i52 >> 2] | 0) + 24;
  } else __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIS3_EEvOT_($db, $ref$tmp$i$i$i);
  __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($ref$tmp$i$i$i);
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($agg$tmp);
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($args);
  $retval$3 = $add$ptr90;
 } else $retval$3 = $first; else $retval$3 = $first; while (0);
 STACKTOP = sp;
 return $retval$3 | 0;
}

function _decode_bch($matrixCodeType, $0, $1, $recd127, $out_p) {
 $matrixCodeType = $matrixCodeType | 0;
 $0 = $0 | 0;
 $1 = $1 | 0;
 $recd127 = $recd127 | 0;
 $out_p = $out_p | 0;
 var $$sink1 = 0, $$sub118 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $22 = 0, $23 = 0, $26 = 0, $29 = 0, $3 = 0, $30 = 0, $32 = 0, $33 = 0, $36 = 0, $4 = 0, $41 = 0, $46 = 0, $5 = 0, $52 = 0, $53 = 0, $54 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $64 = 0, $67 = 0, $68 = 0, $9 = 0, $add = 0, $add117 = 0, $add153 = 0, $alpha_to$0 = 0, $arrayidx116 = 0, $arrayidx154 = 0, $arrayidx16 = 0, $arrayidx176 = 0, $arrayidx179 = 0, $arrayidx210 = 0, $arrayidx27 = 0, $arrayidx274 = 0, $arrayidx301 = 0, $arrayidx335 = 0, $arrayidx73 = 0, $arrayidx80 = 0, $cmp96 = 0, $count$0 = 0, $count$1 = 0, $d = 0, $elp = 0, $i$0 = 0, $i$1 = 0, $i$10 = 0, $i$11 = 0, $i$12 = 0, $i$2 = 0, $i$3 = 0, $i$4 = 0, $i$5 = 0, $i$6 = 0, $i$7 = 0, $i$8 = 0, $i$9 = 0, $index_of$0 = 0, $j$0 = 0, $j$1 = 0, $j$2 = 0, $k$0 = 0, $k$1 = 0, $l = 0, $length$0 = 0, $loc = 0, $mul = 0, $n$0 = 0, $q$0 = 0, $q$1 = 0, $q$2 = 0, $q$3 = 0, $q$4 = 0, $q$5 = 0, $recd$0 = 0, $recd15 = 0, $reg = 0, $rem307 = 0, $retval$0 = 0, $s = 0, $sub118 = 0, $syn_error$0 = 0, $t$0 = 0, $t$1 = 0, $tobool = 0, $u$0 = 0, $u$1 = 0, $u_lu = 0, $xor = 0, $xor242 = 0, label = 0, sp = 0, $j$1$looptemp = 0, $u$0$looptemp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 2320 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(2320);
 $recd15 = sp + 2304 | 0;
 $elp = sp + 864 | 0;
 $d = sp + 784 | 0;
 $l = sp + 704 | 0;
 $u_lu = sp + 624 | 0;
 $s = sp + 548 | 0;
 $loc = sp + 40 | 0;
 $reg = sp;
 switch ($matrixCodeType | 0) {
 case 772:
  {
   $k$0 = 9;
   $t$0 = 1;
   label = 3;
   break;
  }
 case 1028:
  {
   $k$0 = 5;
   $t$0 = 2;
   label = 3;
   break;
  }
 case 2830:
  {
   $alpha_to$0 = 504;
   $index_of$0 = 1072;
   $k$1 = 64;
   $length$0 = 120;
   $n$0 = 127;
   $recd$0 = $recd127;
   $t$1 = 9;
   label = 6;
   break;
  }
 default:
  $retval$0 = -1;
 }
 L3 : do if ((label | 0) == 3) {
  $3 = $0;
  $4 = $1;
  $i$0 = 0;
  while (1) {
   if (($i$0 | 0) == 13) {
    $alpha_to$0 = 1012;
    $index_of$0 = 1584;
    $k$1 = $k$0;
    $length$0 = 13;
    $n$0 = 15;
    $recd$0 = $recd15;
    $t$1 = $t$0;
    label = 6;
    break L3;
   }
   HEAP8[$recd15 + $i$0 >> 0] = $3 & 1;
   $5 = _bitshift64Lshr($3 | 0, $4 | 0, 1) | 0;
   $3 = $5;
   $4 = tempRet0;
   $i$0 = $i$0 + 1 | 0;
  }
 } while (0);
 L8 : do if ((label | 0) == 6) {
  $mul = $t$1 << 1;
  $i$1 = 1;
  $syn_error$0 = 0;
  while (1) {
   if (($i$1 | 0) > ($mul | 0)) break;
   $arrayidx16 = $s + ($i$1 << 2) | 0;
   HEAP32[$arrayidx16 >> 2] = 0;
   $9 = 0;
   $j$0 = 0;
   while (1) {
    if (($j$0 | 0) >= ($length$0 | 0)) break;
    if (!(HEAP8[$recd$0 + $j$0 >> 0] | 0)) $67 = $9; else {
     $arrayidx27 = $alpha_to$0 + (((Math_imul($j$0, $i$1) | 0) % ($n$0 | 0) | 0) << 2) | 0;
     $xor = $9 ^ HEAP32[$arrayidx27 >> 2];
     HEAP32[$arrayidx16 >> 2] = $xor;
     $67 = $xor;
    }
    $9 = $67;
    $j$0 = $j$0 + 1 | 0;
   }
   HEAP32[$arrayidx16 >> 2] = HEAP32[$index_of$0 + ($9 << 2) >> 2];
   $i$1 = $i$1 + 1 | 0;
   $syn_error$0 = ($9 | 0) == 0 ? $syn_error$0 : 1;
  }
  $tobool = ($syn_error$0 | 0) != 0;
  L21 : do if ($tobool) {
   HEAP32[$d >> 2] = 0;
   $11 = HEAP32[$s + 4 >> 2] | 0;
   HEAP32[$d + 4 >> 2] = $11;
   HEAP32[$elp >> 2] = 0;
   HEAP32[$elp + 72 >> 2] = 1;
   $i$2 = 1;
   while (1) {
    if (($i$2 | 0) >= ($mul | 0)) break;
    HEAP32[$elp + ($i$2 << 2) >> 2] = -1;
    HEAP32[$elp + 72 + ($i$2 << 2) >> 2] = 0;
    $i$2 = $i$2 + 1 | 0;
   }
   HEAP32[$l >> 2] = 0;
   HEAP32[$l + 4 >> 2] = 0;
   HEAP32[$u_lu >> 2] = -1;
   HEAP32[$u_lu + 4 >> 2] = 0;
   $12 = $11;
   $13 = 0;
   $u$0 = 0;
   while (1) {
    $u$0$looptemp = $u$0;
    $u$0 = $u$0 + 1 | 0;
    $add = $u$0$looptemp + 2 | 0;
    $arrayidx73 = $l + ($add << 2) | 0;
    L29 : do if (($12 | 0) == -1) {
     HEAP32[$arrayidx73 >> 2] = $13;
     $i$3 = 0;
     while (1) {
      if (($i$3 | 0) > ($13 | 0)) {
       $29 = $13;
       break L29;
      }
      $arrayidx80 = $elp + ($u$0 * 72 | 0) + ($i$3 << 2) | 0;
      $14 = HEAP32[$arrayidx80 >> 2] | 0;
      HEAP32[$elp + ($add * 72 | 0) + ($i$3 << 2) >> 2] = $14;
      HEAP32[$arrayidx80 >> 2] = HEAP32[$index_of$0 + ($14 << 2) >> 2];
      $i$3 = $i$3 + 1 | 0;
     }
    } else {
     $q$0 = $u$0$looptemp;
     while (1) {
      $cmp96 = ($q$0 | 0) > 0;
      if ($cmp96 & (HEAP32[$d + ($q$0 << 2) >> 2] | 0) == -1) $q$0 = $q$0 + -1 | 0; else break;
     }
     if ($cmp96) {
      $j$1 = $q$0;
      $q$1 = $q$0;
      while (1) {
       $j$1$looptemp = $j$1;
       $j$1 = $j$1 + -1 | 0;
       if ((HEAP32[$d + ($j$1 << 2) >> 2] | 0) == -1) $q$2 = $q$1; else $q$2 = (HEAP32[$u_lu + ($q$1 << 2) >> 2] | 0) < (HEAP32[$u_lu + ($j$1 << 2) >> 2] | 0) ? $j$1 : $q$1;
       if (($j$1$looptemp | 0) <= 1) {
        $q$3 = $q$2;
        break;
       } else $q$1 = $q$2;
      }
     } else $q$3 = $q$0;
     $arrayidx116 = $l + ($q$3 << 2) | 0;
     $add117 = $u$0 - $q$3 | 0;
     $sub118 = $add117 + (HEAP32[$arrayidx116 >> 2] | 0) | 0;
     $$sub118 = ($13 | 0) > ($sub118 | 0) ? $13 : $sub118;
     HEAP32[$arrayidx73 >> 2] = $$sub118;
     $i$4 = 0;
     while (1) {
      if (($i$4 | 0) >= ($mul | 0)) break;
      HEAP32[$elp + ($add * 72 | 0) + ($i$4 << 2) >> 2] = 0;
      $i$4 = $i$4 + 1 | 0;
     }
     $22 = HEAP32[$arrayidx116 >> 2] | 0;
     $add153 = $12 + $n$0 | 0;
     $arrayidx154 = $d + ($q$3 << 2) | 0;
     $i$5 = 0;
     while (1) {
      if (($i$5 | 0) > ($22 | 0)) {
       $i$6 = 0;
       break;
      }
      $23 = HEAP32[$elp + ($q$3 * 72 | 0) + ($i$5 << 2) >> 2] | 0;
      if (($23 | 0) != -1) HEAP32[$elp + ($add * 72 | 0) + ($add117 + $i$5 << 2) >> 2] = HEAP32[$alpha_to$0 + ((($add153 + $23 - (HEAP32[$arrayidx154 >> 2] | 0) | 0) % ($n$0 | 0) | 0) << 2) >> 2];
      $i$5 = $i$5 + 1 | 0;
     }
     while (1) {
      if (($i$6 | 0) > ($13 | 0)) {
       $29 = $$sub118;
       break L29;
      }
      $arrayidx176 = $elp + ($u$0 * 72 | 0) + ($i$6 << 2) | 0;
      $26 = HEAP32[$arrayidx176 >> 2] | 0;
      $arrayidx179 = $elp + ($add * 72 | 0) + ($i$6 << 2) | 0;
      HEAP32[$arrayidx179 >> 2] = HEAP32[$arrayidx179 >> 2] ^ $26;
      HEAP32[$arrayidx176 >> 2] = HEAP32[$index_of$0 + ($26 << 2) >> 2];
      $i$6 = $i$6 + 1 | 0;
     }
    } while (0);
    HEAP32[$u_lu + ($add << 2) >> 2] = $u$0 - $29;
    if (($u$0 | 0) >= ($mul | 0)) break;
    $30 = HEAP32[$s + ($add << 2) >> 2] | 0;
    if (($30 | 0) == -1) $$sink1 = 0; else $$sink1 = HEAP32[$alpha_to$0 + ($30 << 2) >> 2] | 0;
    $arrayidx210 = $d + ($add << 2) | 0;
    HEAP32[$arrayidx210 >> 2] = $$sink1;
    $36 = $$sink1;
    $i$7 = 1;
    while (1) {
     if (($i$7 | 0) > ($29 | 0)) break;
     $32 = HEAP32[$s + ($add - $i$7 << 2) >> 2] | 0;
     if (($32 | 0) == -1) $68 = $36; else {
      $33 = HEAP32[$elp + ($add * 72 | 0) + ($i$7 << 2) >> 2] | 0;
      if (!$33) $68 = $36; else {
       $xor242 = $36 ^ HEAP32[$alpha_to$0 + ((((HEAP32[$index_of$0 + ($33 << 2) >> 2] | 0) + $32 | 0) % ($n$0 | 0) | 0) << 2) >> 2];
       HEAP32[$arrayidx210 >> 2] = $xor242;
       $68 = $xor242;
      }
     }
     $36 = $68;
     $i$7 = $i$7 + 1 | 0;
    }
    $12 = HEAP32[$index_of$0 + ($36 << 2) >> 2] | 0;
    HEAP32[$arrayidx210 >> 2] = $12;
    if (($29 | 0) > ($t$1 | 0)) {
     $retval$0 = -1;
     break L8;
    } else $13 = $29;
   }
   if (($29 | 0) > ($t$1 | 0)) {
    $retval$0 = -1;
    break L8;
   } else $i$8 = 0;
   while (1) {
    if (($i$8 | 0) > ($29 | 0)) {
     $i$9 = 1;
     break;
    }
    $arrayidx274 = $elp + ($add * 72 | 0) + ($i$8 << 2) | 0;
    HEAP32[$arrayidx274 >> 2] = HEAP32[$index_of$0 + (HEAP32[$arrayidx274 >> 2] << 2) >> 2];
    $i$8 = $i$8 + 1 | 0;
   }
   while (1) {
    if (($i$9 | 0) > ($29 | 0)) {
     $count$0 = 0;
     $i$10 = 1;
     break;
    }
    HEAP32[$reg + ($i$9 << 2) >> 2] = HEAP32[$elp + ($add * 72 | 0) + ($i$9 << 2) >> 2];
    $i$9 = $i$9 + 1 | 0;
   }
   while (1) {
    if (($n$0 | 0) < ($i$10 | 0)) break; else {
     $j$2 = 1;
     $q$4 = 1;
    }
    while (1) {
     if (($j$2 | 0) > ($29 | 0)) break;
     $arrayidx301 = $reg + ($j$2 << 2) | 0;
     $41 = HEAP32[$arrayidx301 >> 2] | 0;
     if (($41 | 0) == -1) $q$5 = $q$4; else {
      $rem307 = ($41 + $j$2 | 0) % ($n$0 | 0) | 0;
      HEAP32[$arrayidx301 >> 2] = $rem307;
      $q$5 = HEAP32[$alpha_to$0 + ($rem307 << 2) >> 2] ^ $q$4;
     }
     $j$2 = $j$2 + 1 | 0;
     $q$4 = $q$5;
    }
    if (!$q$4) {
     HEAP32[$loc + ($count$0 << 2) >> 2] = $n$0 - $i$10;
     $count$1 = $count$0 + 1 | 0;
    } else $count$1 = $count$0;
    $count$0 = $count$1;
    $i$10 = $i$10 + 1 | 0;
   }
   if (($count$0 | 0) == ($29 | 0)) $i$11 = 0; else {
    $retval$0 = -1;
    break L8;
   }
   while (1) {
    if (($i$11 | 0) >= ($29 | 0)) {
     $u$1 = $add;
     break L21;
    }
    $arrayidx335 = $recd$0 + (HEAP32[$loc + ($i$11 << 2) >> 2] | 0) | 0;
    HEAP8[$arrayidx335 >> 0] = HEAP8[$arrayidx335 >> 0] ^ 1;
    $i$11 = $i$11 + 1 | 0;
   }
  } else $u$1 = 0; while (0);
  $46 = $out_p;
  HEAP32[$46 >> 2] = 0;
  HEAP32[$46 + 4 >> 2] = 0;
  $52 = 1;
  $53 = 0;
  $56 = 0;
  $57 = 0;
  $i$12 = $length$0 - $k$1 | 0;
  while (1) {
   if (($i$12 | 0) >= ($length$0 | 0)) break;
   $54 = ___muldi3(HEAPU8[$recd$0 + $i$12 >> 0] | 0, 0, $52 | 0, $53 | 0) | 0;
   $58 = _i64Add($54 | 0, tempRet0 | 0, $56 | 0, $57 | 0) | 0;
   $59 = tempRet0;
   $60 = $out_p;
   HEAP32[$60 >> 2] = $58;
   HEAP32[$60 + 4 >> 2] = $59;
   $64 = _bitshift64Shl($52 | 0, $53 | 0, 1) | 0;
   $52 = $64;
   $53 = tempRet0;
   $56 = $58;
   $57 = $59;
   $i$12 = $i$12 + 1 | 0;
  }
  if ($tobool) $retval$0 = HEAP32[$l + ($u$1 << 2) >> 2] | 0; else $retval$0 = 0;
 } while (0);
 STACKTOP = sp;
 return $retval$0 | 0;
}

function _hexfloat($f, $bits, $emin, $sign, $pok) {
 $f = $f | 0;
 $bits = $bits | 0;
 $emin = $emin | 0;
 $sign = $sign | 0;
 $pok = $pok | 0;
 var $0 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $17 = 0, $19 = 0, $28 = 0, $3 = 0, $30 = 0, $33 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $46 = 0, $47 = 0, $55 = 0, $56 = 0, $6 = 0, $64 = 0, $66 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $73 = 0, $80 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $91 = 0, $94 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $bias$0 = 0.0, $bits$addr$0 = 0, $bits$addr$0108 = 0, $bits$addr$0109 = 0, $c$0 = 0, $c$1$ph = 0, $c$2 = 0, $c$2$lcssa = 0, $call187 = 0, $call197 = 0, $call263 = 0, $cmp206 = 0, $cmp57 = 0, $cond46 = 0, $conv241111 = 0.0, $conv253$pre$phiZ2D = 0.0, $d$0 = 0, $div = 0.0, $gotdig$0 = 0, $gotdig$2 = 0, $gotdig$3 = 0, $gotrad$0 = 0, $gotrad$1 = 0, $gottail$0 = 0, $gottail$1 = 0, $gottail$2 = 0, $mul143 = 0, $or$cond = 0, $or$cond103 = 0, $retval$0 = 0.0, $rpos = 0, $scale$0 = 0.0, $scale$1 = 0.0, $scale$2 = 0.0, $shend = 0, $sub = 0, $sub182 = 0, $sub192 = 0, $sub239110 = 0, $sub260 = 0.0, $tobool108 = 0, $tobool138 = 0, $x$0 = 0, $x$1 = 0, $x$2 = 0, $x$3$lcssa = 0, $x$3122 = 0, $x$4$lcssa = 0, $x$4116 = 0, $x$5 = 0, $y$0 = 0.0, $y$1 = 0.0, $y$2 = 0.0, $y$3$lcssa = 0.0, $y$3117 = 0.0, $y$4 = 0.0, label = 0;
 $rpos = $f + 4 | 0;
 $0 = HEAP32[$rpos >> 2] | 0;
 $shend = $f + 100 | 0;
 if ($0 >>> 0 < (HEAP32[$shend >> 2] | 0) >>> 0) {
  HEAP32[$rpos >> 2] = $0 + 1;
  $c$0 = HEAPU8[$0 >> 0] | 0;
  $gotdig$0 = 0;
 } else {
  $c$0 = ___shgetc($f) | 0;
  $gotdig$0 = 0;
 }
 L4 : while (1) {
  switch ($c$0 | 0) {
  case 46:
   {
    label = 8;
    break L4;
    break;
   }
  case 48:
   break;
  default:
   {
    $17 = 0;
    $19 = 0;
    $38 = 0;
    $40 = 0;
    $c$2 = $c$0;
    $gotdig$2 = $gotdig$0;
    $gotrad$0 = 0;
    $gottail$0 = 0;
    $scale$0 = 1.0;
    $x$0 = 0;
    $y$0 = 0.0;
    break L4;
   }
  }
  $3 = HEAP32[$rpos >> 2] | 0;
  if ($3 >>> 0 < (HEAP32[$shend >> 2] | 0) >>> 0) {
   HEAP32[$rpos >> 2] = $3 + 1;
   $c$0 = HEAPU8[$3 >> 0] | 0;
   $gotdig$0 = 1;
   continue;
  } else {
   $c$0 = ___shgetc($f) | 0;
   $gotdig$0 = 1;
   continue;
  }
 }
 if ((label | 0) == 8) {
  $6 = HEAP32[$rpos >> 2] | 0;
  if ($6 >>> 0 < (HEAP32[$shend >> 2] | 0) >>> 0) {
   HEAP32[$rpos >> 2] = $6 + 1;
   $c$1$ph = HEAPU8[$6 >> 0] | 0;
  } else $c$1$ph = ___shgetc($f) | 0;
  if (($c$1$ph | 0) == 48) {
   $12 = 0;
   $13 = 0;
   while (1) {
    $9 = HEAP32[$rpos >> 2] | 0;
    if ($9 >>> 0 < (HEAP32[$shend >> 2] | 0) >>> 0) {
     HEAP32[$rpos >> 2] = $9 + 1;
     $cond46 = HEAPU8[$9 >> 0] | 0;
    } else $cond46 = ___shgetc($f) | 0;
    $14 = _i64Add($12 | 0, $13 | 0, -1, -1) | 0;
    $15 = tempRet0;
    if (($cond46 | 0) == 48) {
     $12 = $14;
     $13 = $15;
    } else {
     $17 = 0;
     $19 = 0;
     $38 = $14;
     $40 = $15;
     $c$2 = $cond46;
     $gotdig$2 = 1;
     $gotrad$0 = 1;
     $gottail$0 = 0;
     $scale$0 = 1.0;
     $x$0 = 0;
     $y$0 = 0.0;
     break;
    }
   }
  } else {
   $17 = 0;
   $19 = 0;
   $38 = 0;
   $40 = 0;
   $c$2 = $c$1$ph;
   $gotdig$2 = $gotdig$0;
   $gotrad$0 = 1;
   $gottail$0 = 0;
   $scale$0 = 1.0;
   $x$0 = 0;
   $y$0 = 0.0;
  }
 }
 while (1) {
  $sub = $c$2 + -48 | 0;
  $cmp57 = ($c$2 | 0) == 46;
  if ($sub >>> 0 >= 10) if (!($cmp57 | (($c$2 | 32) + -97 | 0) >>> 0 < 6)) {
   $c$2$lcssa = $c$2;
   break;
  }
  if ($cmp57) if (!$gotrad$0) {
   $106 = $19;
   $107 = $17;
   $108 = $19;
   $109 = $17;
   $gotdig$3 = $gotdig$2;
   $gotrad$1 = 1;
   $gottail$2 = $gottail$0;
   $scale$2 = $scale$0;
   $x$2 = $x$0;
   $y$2 = $y$0;
  } else {
   $c$2$lcssa = 46;
   break;
  } else {
   $d$0 = ($c$2 | 0) > 57 ? ($c$2 | 32) + -87 | 0 : $sub;
   do if (($17 | 0) < 0 | ($17 | 0) == 0 & $19 >>> 0 < 8) {
    $gottail$1 = $gottail$0;
    $scale$1 = $scale$0;
    $x$1 = $d$0 + ($x$0 << 4) | 0;
    $y$1 = $y$0;
   } else if (($17 | 0) < 0 | ($17 | 0) == 0 & $19 >>> 0 < 14) {
    $div = $scale$0 * .0625;
    $gottail$1 = $gottail$0;
    $scale$1 = $div;
    $x$1 = $x$0;
    $y$1 = $y$0 + $div * +($d$0 | 0);
    break;
   } else {
    $or$cond = ($gottail$0 | 0) != 0 | ($d$0 | 0) == 0;
    $gottail$1 = $or$cond ? $gottail$0 : 1;
    $scale$1 = $scale$0;
    $x$1 = $x$0;
    $y$1 = $or$cond ? $y$0 : $y$0 + $scale$0 * .5;
    break;
   } while (0);
   $28 = _i64Add($19 | 0, $17 | 0, 1, 0) | 0;
   $106 = $38;
   $107 = $40;
   $108 = $28;
   $109 = tempRet0;
   $gotdig$3 = 1;
   $gotrad$1 = $gotrad$0;
   $gottail$2 = $gottail$1;
   $scale$2 = $scale$1;
   $x$2 = $x$1;
   $y$2 = $y$1;
  }
  $30 = HEAP32[$rpos >> 2] | 0;
  if ($30 >>> 0 < (HEAP32[$shend >> 2] | 0) >>> 0) {
   HEAP32[$rpos >> 2] = $30 + 1;
   $17 = $109;
   $19 = $108;
   $38 = $106;
   $40 = $107;
   $c$2 = HEAPU8[$30 >> 0] | 0;
   $gotdig$2 = $gotdig$3;
   $gotrad$0 = $gotrad$1;
   $gottail$0 = $gottail$2;
   $scale$0 = $scale$2;
   $x$0 = $x$2;
   $y$0 = $y$2;
   continue;
  } else {
   $17 = $109;
   $19 = $108;
   $38 = $106;
   $40 = $107;
   $c$2 = ___shgetc($f) | 0;
   $gotdig$2 = $gotdig$3;
   $gotrad$0 = $gotrad$1;
   $gottail$0 = $gottail$2;
   $scale$0 = $scale$2;
   $x$0 = $x$2;
   $y$0 = $y$2;
   continue;
  }
 }
 do if (!$gotdig$2) {
  $33 = HEAP32[$shend >> 2] | 0;
  $tobool108 = ($33 | 0) != 0;
  if ($tobool108) HEAP32[$rpos >> 2] = (HEAP32[$rpos >> 2] | 0) + -1;
  if (!$pok) ___shlim($f, 0); else {
   if ($tobool108) HEAP32[$rpos >> 2] = (HEAP32[$rpos >> 2] | 0) + -1;
   if (!(($gotrad$0 | 0) == 0 | ($33 | 0) == 0)) HEAP32[$rpos >> 2] = (HEAP32[$rpos >> 2] | 0) + -1;
  }
  $retval$0 = +($sign | 0) * 0.0;
 } else {
  $tobool138 = ($gotrad$0 | 0) == 0;
  $37 = $tobool138 ? $19 : $38;
  $39 = $tobool138 ? $17 : $40;
  if (($17 | 0) < 0 | ($17 | 0) == 0 & $19 >>> 0 < 8) {
   $46 = $19;
   $47 = $17;
   $x$3122 = $x$0;
   while (1) {
    $mul143 = $x$3122 << 4;
    $46 = _i64Add($46 | 0, $47 | 0, 1, 0) | 0;
    $47 = tempRet0;
    if (!(($47 | 0) < 0 | ($47 | 0) == 0 & $46 >>> 0 < 8)) {
     $x$3$lcssa = $mul143;
     break;
    } else $x$3122 = $mul143;
   }
  } else $x$3$lcssa = $x$0;
  if (($c$2$lcssa | 32 | 0) == 112) {
   $55 = _scanexp($f, $pok) | 0;
   $56 = tempRet0;
   if (($55 | 0) == 0 & ($56 | 0) == -2147483648) {
    if (!$pok) {
     ___shlim($f, 0);
     $retval$0 = 0.0;
     break;
    }
    if (!(HEAP32[$shend >> 2] | 0)) {
     $68 = 0;
     $69 = 0;
    } else {
     HEAP32[$rpos >> 2] = (HEAP32[$rpos >> 2] | 0) + -1;
     $68 = 0;
     $69 = 0;
    }
   } else {
    $68 = $55;
    $69 = $56;
   }
  } else if (!(HEAP32[$shend >> 2] | 0)) {
   $68 = 0;
   $69 = 0;
  } else {
   HEAP32[$rpos >> 2] = (HEAP32[$rpos >> 2] | 0) + -1;
   $68 = 0;
   $69 = 0;
  }
  $64 = _bitshift64Shl($37 | 0, $39 | 0, 2) | 0;
  $66 = _i64Add($64 | 0, tempRet0 | 0, -32, -1) | 0;
  $70 = _i64Add($66 | 0, tempRet0 | 0, $68 | 0, $69 | 0) | 0;
  $71 = tempRet0;
  if (!$x$3$lcssa) {
   $retval$0 = +($sign | 0) * 0.0;
   break;
  }
  $sub182 = 0 - $emin | 0;
  $73 = (($sub182 | 0) < 0) << 31 >> 31;
  if (($71 | 0) > ($73 | 0) | ($71 | 0) == ($73 | 0) & $70 >>> 0 > $sub182 >>> 0) {
   $call187 = ___errno_location() | 0;
   HEAP32[$call187 >> 2] = 34;
   $retval$0 = +($sign | 0) * 1797693134862315708145274.0e284 * 1797693134862315708145274.0e284;
   break;
  }
  $sub192 = $emin + -106 | 0;
  $80 = (($sub192 | 0) < 0) << 31 >> 31;
  if (($71 | 0) < ($80 | 0) | ($71 | 0) == ($80 | 0) & $70 >>> 0 < $sub192 >>> 0) {
   $call197 = ___errno_location() | 0;
   HEAP32[$call197 >> 2] = 34;
   $retval$0 = +($sign | 0) * 2.2250738585072014e-308 * 2.2250738585072014e-308;
   break;
  }
  if (($x$3$lcssa | 0) > -1) {
   $86 = $70;
   $87 = $71;
   $x$4116 = $x$3$lcssa;
   $y$3117 = $y$0;
   while (1) {
    $cmp206 = !($y$3117 >= .5);
    $x$5 = $x$4116 << 1 | ($cmp206 ^ 1) & 1;
    $y$4 = $y$3117 + ($cmp206 ? $y$3117 : $y$3117 + -1.0);
    $88 = _i64Add($86 | 0, $87 | 0, -1, -1) | 0;
    $89 = tempRet0;
    if (($x$5 | 0) > -1) {
     $86 = $88;
     $87 = $89;
     $x$4116 = $x$5;
     $y$3117 = $y$4;
    } else {
     $96 = $88;
     $97 = $89;
     $x$4$lcssa = $x$5;
     $y$3$lcssa = $y$4;
     break;
    }
   }
  } else {
   $96 = $70;
   $97 = $71;
   $x$4$lcssa = $x$3$lcssa;
   $y$3$lcssa = $y$0;
  }
  $91 = (($bits | 0) < 0) << 31 >> 31;
  $94 = _i64Subtract(32, 0, $emin | 0, (($emin | 0) < 0) << 31 >> 31 | 0) | 0;
  $98 = _i64Add($94 | 0, tempRet0 | 0, $96 | 0, $97 | 0) | 0;
  $99 = tempRet0;
  if (($91 | 0) > ($99 | 0) | ($91 | 0) == ($99 | 0) & $bits >>> 0 > $98 >>> 0) if (($98 | 0) > 0) {
   $bits$addr$0 = $98;
   label = 59;
  } else {
   $bits$addr$0109 = 0;
   $sub239110 = 84;
   label = 61;
  } else {
   $bits$addr$0 = $bits;
   label = 59;
  }
  if ((label | 0) == 59) if (($bits$addr$0 | 0) < 53) {
   $bits$addr$0109 = $bits$addr$0;
   $sub239110 = 84 - $bits$addr$0 | 0;
   label = 61;
  } else {
   $bias$0 = 0.0;
   $bits$addr$0108 = $bits$addr$0;
   $conv253$pre$phiZ2D = +($sign | 0);
  }
  if ((label | 0) == 61) {
   $conv241111 = +($sign | 0);
   $bias$0 = +_copysignl(+_scalbn(1.0, $sub239110), $conv241111);
   $bits$addr$0108 = $bits$addr$0109;
   $conv253$pre$phiZ2D = $conv241111;
  }
  $or$cond103 = ($x$4$lcssa & 1 | 0) == 0 & ($y$3$lcssa != 0.0 & ($bits$addr$0108 | 0) < 32);
  $sub260 = $conv253$pre$phiZ2D * ($or$cond103 ? 0.0 : $y$3$lcssa) + ($bias$0 + $conv253$pre$phiZ2D * +((($or$cond103 & 1) + $x$4$lcssa | 0) >>> 0)) - $bias$0;
  if (!($sub260 != 0.0)) {
   $call263 = ___errno_location() | 0;
   HEAP32[$call263 >> 2] = 34;
  }
  $retval$0 = +_scalbnl($sub260, $96);
 } while (0);
 return +$retval$0;
}

function _get_global_id_code($data, $code_out_p, $dir_p, $cf, $errorCorrected) {
 $data = $data | 0;
 $code_out_p = $code_out_p | 0;
 $dir_p = $dir_p | 0;
 $cf = $cf | 0;
 $errorCorrected = $errorCorrected | 0;
 var $1 = 0, $13 = 0, $18 = 0, $25 = 0, $30 = 0, $31 = 0, $32 = 0, $37 = 0, $38 = 0, $add54 = 0, $and = 0, $and169 = 0, $and173 = 0, $and248 = 0, $and319 = 0, $and323 = 0, $bit$0 = 0, $bit$1 = 0, $bit$10 = 0, $bit$11 = 0, $bit$2 = 0, $bit$3 = 0, $bit$4 = 0, $bit$5 = 0, $bit$6 = 0, $bit$7 = 0, $bit$8 = 0, $bit$9 = 0, $cmp112$not = 0, $cmp170$not = 0, $cmp174$not = 0, $cmp179 = 0, $cmp245 = 0, $cmp249 = 0, $cmp258$not = 0, $cmp320$not = 0, $cmp324$not = 0, $cmp329 = 0, $code = 0, $cond377 = 0.0, $contrastMin$0 = 0, $contrastMin$1 = 0, $contrastMin$10 = 0, $contrastMin$11 = 0, $contrastMin$12 = 0, $contrastMin$2 = 0, $contrastMin$3 = 0, $contrastMin$4 = 0, $contrastMin$5 = 0, $contrastMin$6 = 0, $contrastMin$7 = 0, $contrastMin$8 = 0, $contrastMin$9 = 0, $conv14$le = 0, $conv6$le = 0, $corner = 0, $dirCode = 0, $div = 0, $i$0 = 0, $i$1 = 0, $i$2 = 0, $i$3 = 0, $i$4 = 0, $i$4$off = 0, $i$5 = 0, $i$6 = 0, $i$6$off = 0, $j$0 = 0, $j$0$off = 0, $j$1 = 0, $j$2 = 0, $j$2$off = 0, $j$3 = 0, $max$0 = 0, $min$0 = 0, $mul = 0, $mul271 = 0, $recd127 = 0, $retval$0 = 0, $sub129 = 0, $sub201 = 0, $sub276 = 0, $sub351 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(160);
 $dirCode = sp + 152 | 0;
 $corner = sp + 8 | 0;
 $code = sp;
 $recd127 = sp + 24 | 0;
 HEAP32[$corner >> 2] = 0;
 HEAP32[$corner + 4 >> 2] = 182;
 HEAP32[$corner + 8 >> 2] = 195;
 HEAP32[$corner + 12 >> 2] = 13;
 $i$0 = 0;
 $max$0 = 0;
 $min$0 = -1;
 while (1) {
  if (($i$0 | 0) == 4) break;
  $1 = HEAP8[$data + (HEAP32[$corner + ($i$0 << 2) >> 2] | 0) >> 0] | 0;
  $i$0 = $i$0 + 1 | 0;
  $max$0 = ($1 & 255) > ($max$0 & 255) ? $1 : $max$0;
  $min$0 = ($1 & 255) < ($min$0 & 255) ? $1 : $min$0;
 }
 $conv14$le = $min$0 & 255;
 $conv6$le = $max$0 & 255;
 L5 : do if (($conv6$le - $conv14$le | 0) < 30) {
  HEAP32[$dir_p >> 2] = 0;
  HEAPF64[$cf >> 3] = -1.0;
  $retval$0 = -2;
 } else {
  $div = ($conv6$le + $conv14$le | 0) >>> 1;
  $i$1 = 0;
  while (1) {
   if (($i$1 | 0) == 4) {
    $i$2 = 0;
    break;
   }
   HEAP8[$dirCode + $i$1 >> 0] = (HEAPU8[$data + (HEAP32[$corner + ($i$1 << 2) >> 2] | 0) >> 0] | 0) >>> 0 < $div >>> 0 & 1;
   $i$1 = $i$1 + 1 | 0;
  }
  while (1) {
   if (($i$2 | 0) >= 4) break;
   $add54 = $i$2 + 1 | 0;
   if ((HEAP8[$dirCode + $i$2 >> 0] | 0) != 1) {
    $i$2 = $add54;
    continue;
   }
   if ((HEAP8[$dirCode + (($add54 | 0) % 4 | 0) >> 0] | 0) != 1) {
    $i$2 = $add54;
    continue;
   }
   if (!(HEAP8[$dirCode + (($i$2 + 2 | 0) % 4 | 0) >> 0] | 0)) break; else $i$2 = $add54;
  }
  L17 : do switch ($i$2 | 0) {
  case 4:
   {
    HEAP32[$dir_p >> 2] = 0;
    HEAPF64[$cf >> 3] = -1.0;
    $retval$0 = -3;
    break L5;
    break;
   }
  case 0:
   {
    $bit$0 = 119;
    $contrastMin$0 = 255;
    $j$0 = 0;
    while (1) {
     if (($j$0 | 0) == 14) {
      $contrastMin$12 = $contrastMin$0;
      label = 52;
      break L17;
     }
     $j$0$off = $j$0 + -3 | 0;
     $cmp112$not = ($j$0 & -2 | 0) != 12;
     $mul = $j$0 * 14 | 0;
     $bit$1 = $bit$0;
     $contrastMin$1 = $contrastMin$0;
     $i$3 = 0;
     while (1) {
      if (($i$3 | 0) == 14) break;
      if (($i$3 + -3 | $j$0$off) >>> 0 < 8) {
       $bit$2 = $bit$1;
       $contrastMin$2 = $contrastMin$1;
      } else {
       $and = $i$3 & -2;
       if (($i$3 | $j$0) >>> 0 < 2) {
        $bit$2 = $bit$1;
        $contrastMin$2 = $contrastMin$1;
       } else if ($cmp112$not | ($and | 0) != 0 & ($and | 0) != 12) {
        $sub129 = (HEAPU8[$data + ($i$3 + $mul) >> 0] | 0) - $div | 0;
        HEAP8[$recd127 + $bit$1 >> 0] = $sub129 >>> 31;
        $13 = ($sub129 | 0) > -1 ? $sub129 : 0 - $sub129 | 0;
        $bit$2 = $bit$1 + -1 | 0;
        $contrastMin$2 = ($13 | 0) < ($contrastMin$1 | 0) ? $13 : $contrastMin$1;
       } else {
        $bit$2 = $bit$1;
        $contrastMin$2 = $contrastMin$1;
       }
      }
      $bit$1 = $bit$2;
      $contrastMin$1 = $contrastMin$2;
      $i$3 = $i$3 + 1 | 0;
     }
     $bit$0 = $bit$1;
     $contrastMin$0 = $contrastMin$1;
     $j$0 = $j$0 + 1 | 0;
    }
    break;
   }
  case 1:
   {
    $bit$3 = 119;
    $contrastMin$3 = 255;
    $i$4 = 0;
    while (1) {
     if (($i$4 | 0) == 14) {
      $contrastMin$12 = $contrastMin$3;
      label = 52;
      break L17;
     }
     $i$4$off = $i$4 + -3 | 0;
     $and169 = $i$4 & -2;
     $cmp170$not = ($and169 | 0) != 0;
     $cmp179 = ($and169 | 0) == 12;
     $bit$4 = $bit$3;
     $contrastMin$4 = $contrastMin$3;
     $j$1 = 13;
     while (1) {
      if (($j$1 | 0) <= -1) break;
      if (($j$1 + -3 | $i$4$off) >>> 0 < 8) {
       $bit$5 = $bit$4;
       $contrastMin$5 = $contrastMin$4;
      } else {
       $and173 = $j$1 & -2;
       $cmp174$not = ($and173 | 0) != 12;
       if ($cmp170$not | $cmp174$not) if ($cmp179 & (($and173 | 0) == 0 | $cmp174$not ^ 1)) {
        $bit$5 = $bit$4;
        $contrastMin$5 = $contrastMin$4;
       } else {
        $sub201 = (HEAPU8[$data + (($j$1 * 14 | 0) + $i$4) >> 0] | 0) - $div | 0;
        HEAP8[$recd127 + $bit$4 >> 0] = $sub201 >>> 31;
        $18 = ($sub201 | 0) > -1 ? $sub201 : 0 - $sub201 | 0;
        $bit$5 = $bit$4 + -1 | 0;
        $contrastMin$5 = ($18 | 0) < ($contrastMin$4 | 0) ? $18 : $contrastMin$4;
       } else {
        $bit$5 = $bit$4;
        $contrastMin$5 = $contrastMin$4;
       }
      }
      $bit$4 = $bit$5;
      $contrastMin$4 = $contrastMin$5;
      $j$1 = $j$1 + -1 | 0;
     }
     $bit$3 = $bit$4;
     $contrastMin$3 = $contrastMin$4;
     $i$4 = $i$4 + 1 | 0;
    }
    break;
   }
  case 2:
   {
    $bit$6 = 119;
    $contrastMin$6 = 255;
    $j$2 = 13;
    while (1) {
     if (($j$2 | 0) <= -1) {
      $contrastMin$12 = $contrastMin$6;
      label = 52;
      break L17;
     }
     $j$2$off = $j$2 + -3 | 0;
     $and248 = $j$2 & -2;
     $cmp249 = ($and248 | 0) == 12;
     $cmp258$not = ($and248 | 0) != 0;
     $mul271 = $j$2 * 14 | 0;
     $bit$7 = $bit$6;
     $contrastMin$7 = $contrastMin$6;
     $i$5 = 13;
     while (1) {
      if (($i$5 | 0) <= -1) break;
      if (($i$5 + -3 | $j$2$off) >>> 0 < 8) {
       $bit$8 = $bit$7;
       $contrastMin$8 = $contrastMin$7;
      } else {
       $cmp245 = ($i$5 & -2 | 0) == 12;
       if ($cmp249 & $cmp245) {
        $bit$8 = $bit$7;
        $contrastMin$8 = $contrastMin$7;
       } else if (($i$5 | $j$2) >>> 0 > 1 & ($cmp258$not | $cmp245 ^ 1)) {
        $sub276 = (HEAPU8[$data + ($i$5 + $mul271) >> 0] | 0) - $div | 0;
        HEAP8[$recd127 + $bit$7 >> 0] = $sub276 >>> 31;
        $25 = ($sub276 | 0) > -1 ? $sub276 : 0 - $sub276 | 0;
        $bit$8 = $bit$7 + -1 | 0;
        $contrastMin$8 = ($25 | 0) < ($contrastMin$7 | 0) ? $25 : $contrastMin$7;
       } else {
        $bit$8 = $bit$7;
        $contrastMin$8 = $contrastMin$7;
       }
      }
      $bit$7 = $bit$8;
      $contrastMin$7 = $contrastMin$8;
      $i$5 = $i$5 + -1 | 0;
     }
     $bit$6 = $bit$7;
     $contrastMin$6 = $contrastMin$7;
     $j$2 = $j$2 + -1 | 0;
    }
    break;
   }
  case 3:
   {
    $bit$9 = 119;
    $contrastMin$9 = 255;
    $i$6 = 13;
    while (1) {
     if (($i$6 | 0) <= -1) {
      $contrastMin$12 = $contrastMin$9;
      label = 52;
      break L17;
     }
     $i$6$off = $i$6 + -3 | 0;
     $and319 = $i$6 & -2;
     $cmp320$not = ($and319 | 0) != 12;
     $cmp329 = ($and319 | 0) == 0;
     $bit$10 = $bit$9;
     $contrastMin$10 = $contrastMin$9;
     $j$3 = 0;
     while (1) {
      if (($j$3 | 0) == 14) break;
      if (($j$3 + -3 | $i$6$off) >>> 0 < 8) {
       $bit$11 = $bit$10;
       $contrastMin$11 = $contrastMin$10;
      } else {
       $and323 = $j$3 & -2;
       $cmp324$not = ($and323 | 0) != 0;
       if ($cmp320$not | $cmp324$not) if ($cmp329 & (($and323 | 0) == 12 | $cmp324$not ^ 1)) {
        $bit$11 = $bit$10;
        $contrastMin$11 = $contrastMin$10;
       } else {
        $sub351 = (HEAPU8[$data + (($j$3 * 14 | 0) + $i$6) >> 0] | 0) - $div | 0;
        HEAP8[$recd127 + $bit$10 >> 0] = $sub351 >>> 31;
        $30 = ($sub351 | 0) > -1 ? $sub351 : 0 - $sub351 | 0;
        $bit$11 = $bit$10 + -1 | 0;
        $contrastMin$11 = ($30 | 0) < ($contrastMin$10 | 0) ? $30 : $contrastMin$10;
       } else {
        $bit$11 = $bit$10;
        $contrastMin$11 = $contrastMin$10;
       }
      }
      $bit$10 = $bit$11;
      $contrastMin$10 = $contrastMin$11;
      $j$3 = $j$3 + 1 | 0;
     }
     $bit$9 = $bit$10;
     $contrastMin$9 = $contrastMin$10;
     $i$6 = $i$6 + -1 | 0;
    }
    break;
   }
  default:
   {
    HEAP32[$dir_p >> 2] = $i$2;
    $cond377 = 1.0;
   }
  } while (0);
  if ((label | 0) == 52) {
   HEAP32[$dir_p >> 2] = $i$2;
   $cond377 = ($contrastMin$12 | 0) > 30 ? 1.0 : +($contrastMin$12 | 0) / 30.0;
  }
  HEAPF64[$cf >> 3] = $cond377;
  $31 = _decode_bch(2830, 0, 0, $recd127, $code) | 0;
  if (($31 | 0) < 0) $retval$0 = -4; else {
   if ($errorCorrected | 0) HEAP32[$errorCorrected >> 2] = $31;
   $32 = $code;
   $37 = HEAP32[$32 + 4 >> 2] | 0;
   $38 = $code_out_p;
   HEAP32[$38 >> 2] = HEAP32[$32 >> 2];
   HEAP32[$38 + 4 >> 2] = $37;
   $retval$0 = 0;
  }
 } while (0);
 STACKTOP = sp;
 return $retval$0 | 0;
}

function _icpGetInitXw2Xc_from_PlanarData($matXc2U, $screenCoord, $worldCoord, $num, $initMatXw2Xc) {
 $matXc2U = $matXc2U | 0;
 $screenCoord = $screenCoord | 0;
 $worldCoord = $worldCoord | 0;
 $num = $num | 0;
 $initMatXw2Xc = $initMatXw2Xc | 0;
 var $11 = 0, $28 = 0, $30 = 0, $31 = 0.0, $33 = 0.0, $34 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $44 = 0.0, $45 = 0.0, $46 = 0.0, $47 = 0.0, $48 = 0.0, $49 = 0.0, $arrayidx16 = 0, $arrayidx210 = 0, $arrayidx222 = 0, $arrayidx245 = 0, $arrayidx258 = 0, $arrayidx277 = 0, $call = 0, $call168 = 0, $call174 = 0, $call181 = 0, $call198 = 0, $call329 = 0.0, $call347 = 0.0, $call478 = 0.0, $call54 = 0, $div = 0.0, $div239 = 0.0, $div256 = 0.0, $div275 = 0.0, $div288 = 0.0, $div304 = 0.0, $div350 = 0.0, $div353 = 0.0, $div356 = 0.0, $div359 = 0.0, $div362 = 0.0, $div365 = 0.0, $div367 = 0.0, $div369 = 0.0, $div377 = 0.0, $div481 = 0.0, $div484 = 0.0, $div487 = 0.0, $i$0 = 0, $i$1 = 0, $mul = 0, $mul156 = 0, $mul63 = 0, $retval$0 = 0, $sub432 = 0.0, $sub445 = 0.0, $sub458 = 0.0, $t$sroa$0$0 = 0.0, $t$sroa$8$0 = 0.0, $v = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer11 = 0, $vararg_buffer3 = 0, $vararg_buffer5 = 0, $vararg_buffer7 = 0, $vararg_buffer9 = 0, $x = 0, $x89 = 0, $y = 0, $y137 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(128);
 $vararg_buffer11 = sp + 120 | 0;
 $vararg_buffer9 = sp + 112 | 0;
 $vararg_buffer7 = sp + 104 | 0;
 $vararg_buffer5 = sp + 96 | 0;
 $vararg_buffer3 = sp + 88 | 0;
 $vararg_buffer1 = sp + 80 | 0;
 $vararg_buffer = sp + 72 | 0;
 $v = sp;
 L1 : do if (($num | 0) < 4) $retval$0 = -1; else {
  $i$0 = 0;
  while (1) {
   if (($i$0 | 0) >= ($num | 0)) break;
   if (+HEAPF64[$worldCoord + ($i$0 * 24 | 0) + 16 >> 3] != 0.0) {
    $retval$0 = -1;
    break L1;
   } else $i$0 = $i$0 + 1 | 0;
  }
  if (+HEAPF64[$matXc2U >> 3] == 0.0) $retval$0 = -1; else if (+HEAPF64[$matXc2U + 32 >> 3] != 0.0) $retval$0 = -1; else {
   $arrayidx16 = $matXc2U + 40 | 0;
   if (+HEAPF64[$arrayidx16 >> 3] == 0.0) $retval$0 = -1; else if (+HEAPF64[$matXc2U + 64 >> 3] != 0.0) $retval$0 = -1; else if (+HEAPF64[$matXc2U + 72 >> 3] != 0.0) $retval$0 = -1; else if (+HEAPF64[$matXc2U + 80 >> 3] != 1.0) $retval$0 = -1; else if (+HEAPF64[$matXc2U + 24 >> 3] != 0.0) $retval$0 = -1; else if (+HEAPF64[$matXc2U + 56 >> 3] != 0.0) $retval$0 = -1; else if (+HEAPF64[$matXc2U + 88 >> 3] != 0.0) $retval$0 = -1; else {
    $mul = $num << 1;
    $call = _arMatrixAlloc($mul, 8) | 0;
    if (!$call) {
     _arLog(3, 4476, $vararg_buffer);
     $retval$0 = -1;
     break;
    }
    $call54 = _arMatrixAlloc($mul, 1) | 0;
    if (!$call54) {
     _arMatrixFree($call) | 0;
     _arLog(3, 4502, $vararg_buffer1);
     $retval$0 = -1;
     break;
    }
    $i$1 = 0;
    while (1) {
     if (($i$1 | 0) == ($num | 0)) break;
     $x = $worldCoord + ($i$1 * 24 | 0) | 0;
     $11 = HEAP32[$call >> 2] | 0;
     $mul63 = $i$1 << 4;
     HEAPF64[$11 + ($mul63 << 3) >> 3] = +HEAPF64[$x >> 3];
     $y = $worldCoord + ($i$1 * 24 | 0) + 8 | 0;
     HEAPF64[$11 + (($mul63 | 1) << 3) >> 3] = +HEAPF64[$y >> 3];
     HEAPF64[$11 + (($mul63 | 2) << 3) >> 3] = 1.0;
     HEAPF64[$11 + (($mul63 | 3) << 3) >> 3] = 0.0;
     HEAPF64[$11 + (($mul63 | 4) << 3) >> 3] = 0.0;
     HEAPF64[$11 + (($mul63 | 5) << 3) >> 3] = 0.0;
     $x89 = $screenCoord + ($i$1 << 4) | 0;
     HEAPF64[$11 + (($mul63 | 6) << 3) >> 3] = -(+HEAPF64[$x >> 3] * +HEAPF64[$x89 >> 3]);
     HEAPF64[$11 + (($mul63 | 7) << 3) >> 3] = -(+HEAPF64[$y >> 3] * +HEAPF64[$x89 >> 3]);
     HEAPF64[$11 + (($mul63 | 8) << 3) >> 3] = 0.0;
     HEAPF64[$11 + (($mul63 | 9) << 3) >> 3] = 0.0;
     HEAPF64[$11 + (($mul63 | 10) << 3) >> 3] = 0.0;
     HEAPF64[$11 + (($mul63 | 11) << 3) >> 3] = +HEAPF64[$x >> 3];
     HEAPF64[$11 + (($mul63 | 12) << 3) >> 3] = +HEAPF64[$y >> 3];
     HEAPF64[$11 + (($mul63 | 13) << 3) >> 3] = 1.0;
     $y137 = $screenCoord + ($i$1 << 4) + 8 | 0;
     HEAPF64[$11 + (($mul63 | 14) << 3) >> 3] = -(+HEAPF64[$x >> 3] * +HEAPF64[$y137 >> 3]);
     HEAPF64[$11 + (($mul63 | 15) << 3) >> 3] = -(+HEAPF64[$y >> 3] * +HEAPF64[$y137 >> 3]);
     $28 = HEAP32[$call54 >> 2] | 0;
     $mul156 = $i$1 << 1;
     HEAPF64[$28 + ($mul156 << 3) >> 3] = +HEAPF64[$x89 >> 3];
     HEAPF64[$28 + (($mul156 | 1) << 3) >> 3] = +HEAPF64[$y137 >> 3];
     $i$1 = $i$1 + 1 | 0;
    }
    $call168 = _arMatrixAllocTrans($call) | 0;
    if (!$call168) {
     _arMatrixFree($call) | 0;
     _arMatrixFree($call54) | 0;
     _arLog(3, 4528, $vararg_buffer3);
     $retval$0 = -1;
     break;
    }
    $call174 = _arMatrixAllocMul($call168, $call) | 0;
    if (!$call174) {
     _arMatrixFree($call) | 0;
     _arMatrixFree($call54) | 0;
     _arMatrixFree($call168) | 0;
     _arLog(3, 4554, $vararg_buffer5);
     $retval$0 = -1;
     break;
    }
    $call181 = _arMatrixAllocMul($call168, $call54) | 0;
    if (!$call181) {
     _arMatrixFree($call) | 0;
     _arMatrixFree($call54) | 0;
     _arMatrixFree($call168) | 0;
     _arMatrixFree($call174) | 0;
     _arLog(3, 4580, $vararg_buffer7);
     $retval$0 = -1;
     break;
    }
    if ((_arMatrixSelfInv($call174) | 0) < 0) {
     _arMatrixFree($call) | 0;
     _arMatrixFree($call54) | 0;
     _arMatrixFree($call168) | 0;
     _arMatrixFree($call174) | 0;
     _arMatrixFree($call181) | 0;
     _arLog(3, 4606, $vararg_buffer9);
     $retval$0 = -1;
     break;
    }
    $call198 = _arMatrixAllocMul($call174, $call181) | 0;
    if (!$call198) {
     _arMatrixFree($call) | 0;
     _arMatrixFree($call54) | 0;
     _arMatrixFree($call168) | 0;
     _arMatrixFree($call174) | 0;
     _arMatrixFree($call181) | 0;
     _arLog(3, 4632, $vararg_buffer11);
     $retval$0 = -1;
     break;
    }
    $30 = HEAP32[$call198 >> 2] | 0;
    $31 = +HEAPF64[$30 + 48 >> 3];
    $arrayidx210 = $v + 16 | 0;
    $33 = +HEAPF64[$matXc2U + 48 >> 3];
    $34 = +HEAPF64[$arrayidx16 >> 3];
    $div = (+HEAPF64[$30 + 24 >> 3] - $31 * $33) / $34;
    $arrayidx222 = $v + 8 | 0;
    $36 = +HEAPF64[$matXc2U + 16 >> 3];
    $37 = +HEAPF64[$matXc2U + 8 >> 3];
    $38 = +HEAPF64[$matXc2U >> 3];
    $div239 = (+HEAPF64[$30 >> 3] - $36 * $31 - $div * $37) / $38;
    $39 = +HEAPF64[$30 + 56 >> 3];
    $arrayidx245 = $v + 40 | 0;
    $div256 = (+HEAPF64[$30 + 32 >> 3] - $33 * $39) / $34;
    $arrayidx258 = $v + 32 | 0;
    $div275 = (+HEAPF64[$30 + 8 >> 3] - $36 * $39 - $37 * $div256) / $38;
    $arrayidx277 = $v + 24 | 0;
    $div288 = (+HEAPF64[$30 + 40 >> 3] - $33) / $34;
    $div304 = (+HEAPF64[$30 + 16 >> 3] - $36 - $37 * $div288) / $38;
    _arMatrixFree($call) | 0;
    _arMatrixFree($call54) | 0;
    _arMatrixFree($call168) | 0;
    _arMatrixFree($call174) | 0;
    _arMatrixFree($call181) | 0;
    _arMatrixFree($call198) | 0;
    $call329 = +Math_sqrt(+($div239 * $div239 + $div * $div + $31 * $31));
    $call347 = +Math_sqrt(+($div275 * $div275 + $div256 * $div256 + $39 * $39));
    $div350 = $div239 / $call329;
    HEAPF64[$v >> 3] = $div350;
    $div353 = $div / $call329;
    HEAPF64[$arrayidx222 >> 3] = $div353;
    $div356 = $31 / $call329;
    HEAPF64[$arrayidx210 >> 3] = $div356;
    $div359 = $div275 / $call347;
    HEAPF64[$arrayidx277 >> 3] = $div359;
    $div362 = $div256 / $call347;
    HEAPF64[$arrayidx258 >> 3] = $div362;
    $div365 = $39 / $call347;
    HEAPF64[$arrayidx245 >> 3] = $div365;
    $div367 = ($call329 + $call347) * .5;
    $div369 = $div304 / $div367;
    $div377 = 1.0 / $div367;
    if ($div377 < 0.0) {
     HEAPF64[$v >> 3] = -$div350;
     HEAPF64[$arrayidx222 >> 3] = -$div353;
     HEAPF64[$arrayidx210 >> 3] = -$div356;
     HEAPF64[$arrayidx277 >> 3] = -$div359;
     HEAPF64[$arrayidx258 >> 3] = -$div362;
     HEAPF64[$arrayidx245 >> 3] = -$div365;
     $t$sroa$0$0 = -$div369;
     $t$sroa$8$0 = -$div377;
    } else {
     $t$sroa$0$0 = $div369;
     $t$sroa$8$0 = $div288 / $div367;
    }
    _check_rotation($v);
    $44 = +HEAPF64[$arrayidx222 >> 3];
    $45 = +HEAPF64[$arrayidx245 >> 3];
    $46 = +HEAPF64[$arrayidx210 >> 3];
    $47 = +HEAPF64[$arrayidx258 >> 3];
    $sub432 = $44 * $45 - $46 * $47;
    $48 = +HEAPF64[$arrayidx277 >> 3];
    $49 = +HEAPF64[$v >> 3];
    $sub445 = $46 * $48 - $45 * $49;
    $sub458 = $47 * $49 - $44 * $48;
    $call478 = +Math_sqrt(+($sub458 * $sub458 + ($sub432 * $sub432 + $sub445 * $sub445)));
    $div481 = $sub432 / $call478;
    HEAPF64[$v + 48 >> 3] = $div481;
    $div484 = $sub445 / $call478;
    HEAPF64[$v + 56 >> 3] = $div484;
    $div487 = $sub458 / $call478;
    HEAPF64[$v + 64 >> 3] = $div487;
    HEAPF64[$initMatXw2Xc >> 3] = $49;
    HEAPF64[$initMatXw2Xc + 32 >> 3] = $44;
    HEAPF64[$initMatXw2Xc + 64 >> 3] = $46;
    HEAPF64[$initMatXw2Xc + 8 >> 3] = $48;
    HEAPF64[$initMatXw2Xc + 40 >> 3] = $47;
    HEAPF64[$initMatXw2Xc + 72 >> 3] = $45;
    HEAPF64[$initMatXw2Xc + 16 >> 3] = $div481;
    HEAPF64[$initMatXw2Xc + 48 >> 3] = $div484;
    HEAPF64[$initMatXw2Xc + 80 >> 3] = $div487;
    HEAPF64[$initMatXw2Xc + 24 >> 3] = $t$sroa$0$0;
    HEAPF64[$initMatXw2Xc + 56 >> 3] = $t$sroa$8$0;
    HEAPF64[$initMatXw2Xc + 88 >> 3] = $div377;
    $retval$0 = 0;
   }
  }
 } while (0);
 STACKTOP = sp;
 return $retval$0 | 0;
}

function _get_matrix_code($data, $size, $code_out_p, $dir, $cf, $matrixCodeType, $errorCorrected) {
 $data = $data | 0;
 $size = $size | 0;
 $code_out_p = $code_out_p | 0;
 $dir = $dir | 0;
 $cf = $cf | 0;
 $matrixCodeType = $matrixCodeType | 0;
 $errorCorrected = $errorCorrected | 0;
 var $12 = 0, $13 = 0, $14 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $28 = 0, $29 = 0, $30 = 0, $37 = 0, $38 = 0, $39 = 0, $44 = 0, $45 = 0, $46 = 0, $49 = 0, $53 = 0, $54 = 0, $57 = 0, $63 = 0, $64 = 0, $65 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $90 = 0, $add62 = 0, $arrayidx199 = 0, $arrayidx300 = 0, $arrayidx88 = 0, $cmp134$not = 0, $cmp171$not = 0, $cmp175$not = 0, $cmp180 = 0, $cmp275 = 0, $cmp282 = 0, $code = 0, $contrastMin$0 = 0, $conv11$le = 0, $conv21$le = 0, $conv89 = 0, $corner = 0, $dirCode = 0, $div = 0, $i$0 = 0, $i$1 = 0, $i$2 = 0, $i$3 = 0, $i$4 = 0, $i$5 = 0, $i$6 = 0, $i$7 = 0, $j$0 = 0, $j$1 = 0, $j$2 = 0, $j$3 = 0, $max$0 = 0, $min$0 = 0, $mul = 0, $mul147 = 0, $mul248 = 0, $mul3 = 0, $or$cond3190 = 0, $retval$0 = 0, $sub = 0, $sub91 = 0, $sub95$sub91 = 0, $tobool339 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 $dirCode = sp + 24 | 0;
 $corner = sp + 8 | 0;
 $code = sp;
 L1 : do if (($size + -3 | 0) >>> 0 > 5) {
  HEAP32[$code_out_p >> 2] = -1;
  HEAP32[$dir >> 2] = 0;
  HEAPF64[$cf >> 3] = -1.0;
  $retval$0 = -1;
 } else {
  HEAP32[$corner >> 2] = 0;
  $sub = $size + -1 | 0;
  $mul = Math_imul($sub, $size) | 0;
  HEAP32[$corner + 4 >> 2] = $mul;
  $mul3 = Math_imul($size, $size) | 0;
  HEAP32[$corner + 8 >> 2] = $mul3 + -1;
  HEAP32[$corner + 12 >> 2] = $sub;
  $i$0 = 0;
  $max$0 = 0;
  $min$0 = -1;
  while (1) {
   if (($i$0 | 0) == 4) break;
   $2 = HEAP8[$data + (HEAP32[$corner + ($i$0 << 2) >> 2] | 0) >> 0] | 0;
   $i$0 = $i$0 + 1 | 0;
   $max$0 = ($2 & 255) > ($max$0 & 255) ? $2 : $max$0;
   $min$0 = ($2 & 255) < ($min$0 & 255) ? $2 : $min$0;
  }
  $conv21$le = $min$0 & 255;
  $conv11$le = $max$0 & 255;
  if (($conv11$le - $conv21$le | 0) < 30) {
   HEAP32[$code_out_p >> 2] = -1;
   HEAP32[$dir >> 2] = 0;
   HEAPF64[$cf >> 3] = -1.0;
   $retval$0 = -2;
   break;
  }
  $div = ($conv11$le + $conv21$le | 0) >>> 1;
  $i$1 = 0;
  while (1) {
   if (($i$1 | 0) == 4) {
    $i$2 = 0;
    break;
   }
   HEAP8[$dirCode + $i$1 >> 0] = (HEAPU8[$data + (HEAP32[$corner + ($i$1 << 2) >> 2] | 0) >> 0] | 0) >>> 0 < $div >>> 0 & 1;
   $i$1 = $i$1 + 1 | 0;
  }
  while (1) {
   if (($i$2 | 0) >= 4) {
    label = 16;
    break;
   }
   $add62 = $i$2 + 1 | 0;
   if ((HEAP8[$dirCode + $i$2 >> 0] | 0) != 1) {
    $i$2 = $add62;
    continue;
   }
   if ((HEAP8[$dirCode + (($add62 | 0) % 4 | 0) >> 0] | 0) != 1) {
    $i$2 = $add62;
    continue;
   }
   if (!(HEAP8[$dirCode + (($i$2 + 2 | 0) % 4 | 0) >> 0] | 0)) {
    label = 15;
    break;
   } else $i$2 = $add62;
  }
  if ((label | 0) == 15) {
   HEAP32[$dir >> 2] = $i$2;
   $contrastMin$0 = 255;
   $i$3 = 0;
  } else if ((label | 0) == 16) if (($i$2 | 0) == 4) {
   HEAP32[$code_out_p >> 2] = -1;
   HEAP32[$dir >> 2] = 0;
   HEAPF64[$cf >> 3] = -1.0;
   $retval$0 = -3;
   break;
  } else {
   $contrastMin$0 = 255;
   $i$3 = 0;
  }
  while (1) {
   if (($i$3 | 0) >= ($mul3 | 0)) break;
   $arrayidx88 = $data + $i$3 | 0;
   $conv89 = HEAPU8[$arrayidx88 >> 0] | 0;
   $sub91 = $conv89 - $div | 0;
   $sub95$sub91 = ($sub91 | 0) < 0 ? 0 - $sub91 | 0 : $sub91;
   HEAP8[$arrayidx88 >> 0] = $conv89 >>> 0 < $div >>> 0 & 1;
   $contrastMin$0 = ($sub95$sub91 | 0) < ($contrastMin$0 | 0) ? $sub95$sub91 : $contrastMin$0;
   $i$3 = $i$3 + 1 | 0;
  }
  L27 : do switch (HEAP32[$dir >> 2] | 0) {
  case 0:
   {
    $75 = 0;
    $76 = 0;
    $j$0 = 0;
    while (1) {
     if (($j$0 | 0) >= ($size | 0)) {
      $44 = $75;
      $63 = $76;
      break L27;
     }
     $cmp134$not = ($j$0 | 0) != ($sub | 0);
     $mul147 = Math_imul($j$0, $size) | 0;
     $12 = $75;
     $13 = $76;
     $i$4 = 0;
     while (1) {
      if (($i$4 | 0) == ($size | 0)) break;
      if (!($i$4 | $j$0)) {
       $83 = $12;
       $84 = $13;
      } else if ($cmp134$not | ($i$4 | 0) != 0 & ($i$4 | 0) != ($sub | 0)) {
       $14 = _bitshift64Shl($12 | 0, $13 | 0, 1) | 0;
       $83 = (HEAP8[$data + ($i$4 + $mul147) >> 0] | 0) != 0 | $14;
       $84 = tempRet0;
      } else {
       $83 = $12;
       $84 = $13;
      }
      $12 = $83;
      $13 = $84;
      $i$4 = $i$4 + 1 | 0;
     }
     $75 = $12;
     $76 = $13;
     $j$0 = $j$0 + 1 | 0;
    }
    break;
   }
  case 1:
   {
    $77 = 0;
    $78 = 0;
    $i$5 = 0;
    while (1) {
     if (($i$5 | 0) >= ($size | 0)) {
      $44 = $77;
      $63 = $78;
      break L27;
     }
     $cmp171$not = ($i$5 | 0) != 0;
     $cmp180 = ($i$5 | 0) == ($sub | 0);
     $19 = $77;
     $20 = $78;
     $j$1 = $sub;
     while (1) {
      if (($j$1 | 0) <= -1) break;
      $cmp175$not = ($j$1 | 0) != ($sub | 0);
      if ($cmp171$not | $cmp175$not) if ($cmp180 & (($j$1 | 0) == 0 | $cmp175$not ^ 1)) {
       $85 = $19;
       $86 = $20;
      } else {
       $21 = _bitshift64Shl($19 | 0, $20 | 0, 1) | 0;
       $arrayidx199 = $data + ((Math_imul($j$1, $size) | 0) + $i$5) | 0;
       $85 = (HEAP8[$arrayidx199 >> 0] | 0) != 0 | $21;
       $86 = tempRet0;
      } else {
       $85 = $19;
       $86 = $20;
      }
      $19 = $85;
      $20 = $86;
      $j$1 = $j$1 + -1 | 0;
     }
     $77 = $19;
     $78 = $20;
     $i$5 = $i$5 + 1 | 0;
    }
    break;
   }
  case 2:
   {
    $79 = 0;
    $80 = 0;
    $j$2 = $sub;
    while (1) {
     if (($j$2 | 0) <= -1) {
      $44 = $79;
      $63 = $80;
      break L27;
     }
     $or$cond3190 = ($j$2 | 0) == ($sub | 0) | ($j$2 | 0) == 0;
     $mul248 = Math_imul($j$2, $size) | 0;
     $28 = $79;
     $29 = $80;
     $i$6 = $sub;
     while (1) {
      if (($i$6 | 0) <= -1) break;
      if ($or$cond3190 & ($i$6 | 0) == ($sub | 0) | ($i$6 | $j$2 | 0) == 0) {
       $87 = $28;
       $88 = $29;
      } else {
       $30 = _bitshift64Shl($28 | 0, $29 | 0, 1) | 0;
       $87 = (HEAP8[$data + ($i$6 + $mul248) >> 0] | 0) != 0 | $30;
       $88 = tempRet0;
      }
      $28 = $87;
      $29 = $88;
      $i$6 = $i$6 + -1 | 0;
     }
     $79 = $28;
     $80 = $29;
     $j$2 = $j$2 + -1 | 0;
    }
    break;
   }
  case 3:
   {
    $81 = 0;
    $82 = 0;
    $i$7 = $sub;
    while (1) {
     if (($i$7 | 0) <= -1) {
      $44 = $81;
      $63 = $82;
      break L27;
     }
     $cmp275 = ($i$7 | 0) == ($sub | 0);
     $cmp282 = ($i$7 | 0) == 0;
     $37 = $81;
     $38 = $82;
     $j$3 = 0;
     while (1) {
      if (($j$3 | 0) >= ($size | 0)) break;
      if ($cmp275 & ($j$3 | 0) == 0 | ($j$3 | $i$7 | 0) == 0 | $cmp282 & ($j$3 | 0) == ($sub | 0)) {
       $89 = $37;
       $90 = $38;
      } else {
       $39 = _bitshift64Shl($37 | 0, $38 | 0, 1) | 0;
       $arrayidx300 = $data + ((Math_imul($j$3, $size) | 0) + $i$7) | 0;
       $89 = (HEAP8[$arrayidx300 >> 0] | 0) != 0 | $39;
       $90 = tempRet0;
      }
      $37 = $89;
      $38 = $90;
      $j$3 = $j$3 + 1 | 0;
     }
     $81 = $37;
     $82 = $38;
     $i$7 = $i$7 + -1 | 0;
    }
    break;
   }
  default:
   {
    $44 = 0;
    $63 = 0;
   }
  } while (0);
  HEAPF64[$cf >> 3] = ($contrastMin$0 | 0) > 30 ? 1.0 : +($contrastMin$0 | 0) / 30.0;
  L71 : do if (($matrixCodeType | 0) == 259) {
   $45 = HEAP8[3903 + $44 >> 0] | 0;
   $46 = $45 << 24 >> 24;
   $49 = $code;
   HEAP32[$49 >> 2] = $46;
   HEAP32[$49 + 4 >> 2] = (($46 | 0) < 0) << 31 >> 31;
   if ($45 << 24 >> 24 < 0) {
    HEAP32[$code_out_p >> 2] = -1;
    HEAPF64[$cf >> 3] = -1.0;
    $retval$0 = -4;
    break L1;
   }
  } else {
   $tobool339 = ($errorCorrected | 0) != 0;
   switch ($matrixCodeType | 0) {
   case 515:
    {
     $53 = HEAP8[3775 + $44 >> 0] | 0;
     $54 = $53 << 24 >> 24;
     $57 = $code;
     HEAP32[$57 >> 2] = $54;
     HEAP32[$57 + 4 >> 2] = (($54 | 0) < 0) << 31 >> 31;
     if ($tobool339) HEAP32[$errorCorrected >> 2] = HEAPU8[3839 + $44 >> 0];
     if ($53 << 24 >> 24 >= 0) break L71;
     HEAP32[$code_out_p >> 2] = -1;
     HEAPF64[$cf >> 3] = -1.0;
     $retval$0 = -4;
     break L1;
     break;
    }
   case 772:
   case 1028:
    {
     $64 = _decode_bch($matrixCodeType, $44, $63, 0, $code) | 0;
     if (($64 | 0) < 0) {
      HEAP32[$code_out_p >> 2] = -1;
      HEAPF64[$cf >> 3] = -1.0;
      $retval$0 = -4;
      break L1;
     }
     if (!($tobool339 & ($64 | 0) != 0)) break L71;
     HEAP32[$errorCorrected >> 2] = $64;
     break L71;
     break;
    }
   default:
    {
     $65 = $code;
     HEAP32[$65 >> 2] = $44;
     HEAP32[$65 + 4 >> 2] = $63;
     break L71;
    }
   }
  } while (0);
  HEAP32[$code_out_p >> 2] = HEAP32[$code >> 2];
  $retval$0 = 0;
 } while (0);
 STACKTOP = sp;
 return $retval$0 | 0;
}

function _arMultiReadConfigFile($filename, $pattHandle) {
 $filename = $filename | 0;
 $pattHandle = $pattHandle | 0;
 var $$sink137 = 0, $$sink138 = 0, $1 = 0, $13 = 0.0, $15 = 0.0, $17 = 0.0, $2 = 0, $5 = 0, $add = 0, $arrayidx = 0, $arrayidx145 = 0, $arrayidx150 = 0, $arrayidx155 = 0, $arrayidx160 = 0, $arrayidx166 = 0, $arrayidx172 = 0, $arrayidx178 = 0, $arrayidx209 = 0, $arrayidx216 = 0, $arrayidx224 = 0, $arrayidx233 = 0, $arrayidx240 = 0, $arrayidx248 = 0, $arrayidx79 = 0, $arrayidx87 = 0, $buf = 0, $call = 0, $call1 = 0, $call10 = 0, $call2 = 0, $call259 = 0, $call36 = 0, $div = 0.0, $div143 = 0.0, $dummy = 0, $globalID = 0, $i$0 = 0, $j$0 = 0, $j$1 = 0, $num = 0, $or59 = 0, $pattPath = 0, $patt_type$0 = 0, $patt_type43 = 0, $retval$0 = 0, $t2 = 0, $tobool = 0, $trans = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer11 = 0, $vararg_buffer13 = 0, $vararg_buffer17 = 0, $vararg_buffer21 = 0, $vararg_buffer24 = 0, $vararg_buffer28 = 0, $vararg_buffer31 = 0, $vararg_buffer35 = 0, $vararg_buffer41 = 0, $vararg_buffer45 = 0, $vararg_buffer49 = 0, $vararg_buffer5 = 0, $vararg_buffer55 = 0, $vararg_buffer59 = 0, $vararg_buffer8 = 0, $width = 0, $wpos3d = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 2528 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(2528);
 $vararg_buffer59 = sp + 208 | 0;
 $vararg_buffer55 = sp + 200 | 0;
 $vararg_buffer49 = sp + 184 | 0;
 $vararg_buffer45 = sp + 176 | 0;
 $vararg_buffer41 = sp + 168 | 0;
 $vararg_buffer35 = sp + 152 | 0;
 $vararg_buffer31 = sp + 144 | 0;
 $vararg_buffer28 = sp + 136 | 0;
 $vararg_buffer24 = sp + 128 | 0;
 $vararg_buffer21 = sp + 120 | 0;
 $vararg_buffer17 = sp + 112 | 0;
 $vararg_buffer13 = sp + 104 | 0;
 $vararg_buffer11 = sp + 96 | 0;
 $vararg_buffer8 = sp + 88 | 0;
 $vararg_buffer5 = sp + 80 | 0;
 $vararg_buffer1 = sp + 72 | 0;
 $vararg_buffer = sp + 64 | 0;
 $wpos3d = sp;
 $buf = sp + 2272 | 0;
 $pattPath = sp + 224 | 0;
 $dummy = sp + 220 | 0;
 $num = sp + 216 | 0;
 $t2 = sp + 212 | 0;
 $call = _fopen($filename, 4658) | 0;
 do if (!$call) {
  HEAP32[$vararg_buffer >> 2] = $filename;
  _arLog(3, 4660, $vararg_buffer);
  $call1 = ___errno_location() | 0;
  $call2 = _strerror(HEAP32[$call1 >> 2] | 0) | 0;
  HEAP32[$vararg_buffer1 >> 2] = 18825;
  HEAP32[$vararg_buffer1 + 4 >> 2] = $call2;
  _arLog(3, 4713, $vararg_buffer1);
  $retval$0 = 0;
 } else {
  _get_buff($buf, $call);
  HEAP32[$vararg_buffer5 >> 2] = $num;
  if ((_sscanf($buf, 4719, $vararg_buffer5) | 0) != 1) {
   HEAP32[$vararg_buffer8 >> 2] = $filename;
   _arLog(3, 4722, $vararg_buffer8);
   _fclose($call) | 0;
   $retval$0 = 0;
   break;
  }
  $1 = HEAP32[$num >> 2] | 0;
  $call10 = _malloc($1 * 320 | 0) | 0;
  if (!$call10) {
   _arLog(3, 4823, $vararg_buffer11);
   _exit(1);
  }
  $arrayidx145 = $wpos3d + 8 | 0;
  $arrayidx150 = $wpos3d + 16 | 0;
  $arrayidx155 = $wpos3d + 24 | 0;
  $arrayidx160 = $wpos3d + 32 | 0;
  $arrayidx166 = $wpos3d + 40 | 0;
  $arrayidx172 = $wpos3d + 48 | 0;
  $arrayidx178 = $wpos3d + 56 | 0;
  $tobool = ($pattHandle | 0) == 0;
  $2 = $1;
  $i$0 = 0;
  $patt_type$0 = 0;
  L10 : while (1) {
   if (($i$0 | 0) >= ($2 | 0)) {
    label = 30;
    break;
   }
   _get_buff($buf, $call);
   $arrayidx = $call10 + ($i$0 * 320 | 0) | 0;
   $globalID = $call10 + ($i$0 * 320 | 0) + 312 | 0;
   HEAP32[$vararg_buffer13 >> 2] = $globalID;
   HEAP32[$vararg_buffer13 + 4 >> 2] = $dummy;
   $patt_type43 = $call10 + ($i$0 * 320 | 0) + 4 | 0;
   if ((_sscanf($buf, 4840, $vararg_buffer13) | 0) == 1) {
    $5 = HEAP32[$globalID >> 2] | 0;
    HEAP32[$arrayidx >> 2] = ($5 & -32768 | 0) == 0 & 0 == 0 ? $5 & 32767 : 0;
    $$sink137 = 2;
    $$sink138 = 1;
   } else {
    if ($tobool) {
     label = 12;
     break;
    }
    if (!(_arUtilGetDirectoryNameFromPath($pattPath, $filename, 2048, 1) | 0)) {
     label = 14;
     break;
    }
    _strncat($pattPath, $buf, 2047 - (_strlen($pattPath) | 0) | 0) | 0;
    $call36 = _arPattLoad($pattHandle, $pattPath) | 0;
    HEAP32[$arrayidx >> 2] = $call36;
    if (($call36 | 0) < 0) {
     label = 16;
     break;
    } else {
     $$sink137 = 1;
     $$sink138 = 0;
    }
   }
   HEAP32[$patt_type43 >> 2] = $$sink138;
   $or59 = $$sink137 | $patt_type$0;
   _get_buff($buf, $call);
   $width = $call10 + ($i$0 * 320 | 0) + 8 | 0;
   HEAP32[$vararg_buffer28 >> 2] = $width;
   $add = $i$0 + 1 | 0;
   if ((_sscanf($buf, 5136, $vararg_buffer28) | 0) != 1) {
    label = 19;
    break;
   }
   _get_buff($buf, $call);
   $trans = $call10 + ($i$0 * 320 | 0) + 16 | 0;
   $arrayidx79 = $call10 + ($i$0 * 320 | 0) + 24 | 0;
   $arrayidx87 = $call10 + ($i$0 * 320 | 0) + 40 | 0;
   HEAP32[$vararg_buffer35 >> 2] = $trans;
   HEAP32[$vararg_buffer35 + 4 >> 2] = $arrayidx79;
   HEAP32[$vararg_buffer35 + 8 >> 2] = $call10 + ($i$0 * 320 | 0) + 32;
   HEAP32[$vararg_buffer35 + 12 >> 2] = $arrayidx87;
   if ((_sscanf($buf, 5245, $vararg_buffer35) | 0) == 4) $j$0 = 1; else {
    HEAP32[$vararg_buffer41 >> 2] = $vararg_buffer5;
    HEAP32[$vararg_buffer41 + 4 >> 2] = $t2;
    if ((_sscanf($buf, 5261, $vararg_buffer41) | 0) != 2) {
     label = 23;
     break;
    }
    $j$0 = 0;
   }
   do {
    _get_buff($buf, $call);
    HEAP32[$vararg_buffer49 >> 2] = $call10 + ($i$0 * 320 | 0) + 16 + ($j$0 << 5);
    HEAP32[$vararg_buffer49 + 4 >> 2] = $call10 + ($i$0 * 320 | 0) + 16 + ($j$0 << 5) + 8;
    HEAP32[$vararg_buffer49 + 8 >> 2] = $call10 + ($i$0 * 320 | 0) + 16 + ($j$0 << 5) + 16;
    HEAP32[$vararg_buffer49 + 12 >> 2] = $call10 + ($i$0 * 320 | 0) + 16 + ($j$0 << 5) + 24;
    if ((_sscanf($buf, 5245, $vararg_buffer49) | 0) != 4) {
     label = 25;
     break L10;
    }
    $j$0 = $j$0 + 1 | 0;
   } while (($j$0 | 0) < 3);
   _arUtilMatInv($trans, $call10 + ($i$0 * 320 | 0) + 112 | 0) | 0;
   $13 = +HEAPF64[$width >> 3];
   $div = $13 * -.5;
   HEAPF64[$wpos3d >> 3] = $div;
   $div143 = $13 * .5;
   HEAPF64[$arrayidx145 >> 3] = $div143;
   HEAPF64[$arrayidx150 >> 3] = $div143;
   HEAPF64[$arrayidx155 >> 3] = $div143;
   HEAPF64[$arrayidx160 >> 3] = $div143;
   HEAPF64[$arrayidx166 >> 3] = $div;
   HEAPF64[$arrayidx172 >> 3] = $div;
   HEAPF64[$arrayidx178 >> 3] = $div;
   $arrayidx209 = $call10 + ($i$0 * 320 | 0) + 48 | 0;
   $arrayidx216 = $call10 + ($i$0 * 320 | 0) + 56 | 0;
   $arrayidx224 = $call10 + ($i$0 * 320 | 0) + 72 | 0;
   $arrayidx233 = $call10 + ($i$0 * 320 | 0) + 80 | 0;
   $arrayidx240 = $call10 + ($i$0 * 320 | 0) + 88 | 0;
   $arrayidx248 = $call10 + ($i$0 * 320 | 0) + 104 | 0;
   $j$1 = 0;
   while (1) {
    if (($j$1 | 0) == 4) break;
    $15 = +HEAPF64[$wpos3d + ($j$1 << 4) >> 3];
    $17 = +HEAPF64[$wpos3d + ($j$1 << 4) + 8 >> 3];
    HEAPF64[$call10 + ($i$0 * 320 | 0) + 208 + ($j$1 * 24 | 0) >> 3] = +HEAPF64[$arrayidx87 >> 3] + (+HEAPF64[$trans >> 3] * $15 + +HEAPF64[$arrayidx79 >> 3] * $17);
    HEAPF64[$call10 + ($i$0 * 320 | 0) + 208 + ($j$1 * 24 | 0) + 8 >> 3] = +HEAPF64[$arrayidx224 >> 3] + ($15 * +HEAPF64[$arrayidx209 >> 3] + $17 * +HEAPF64[$arrayidx216 >> 3]);
    HEAPF64[$call10 + ($i$0 * 320 | 0) + 208 + ($j$1 * 24 | 0) + 16 >> 3] = +HEAPF64[$arrayidx248 >> 3] + ($15 * +HEAPF64[$arrayidx233 >> 3] + $17 * +HEAPF64[$arrayidx240 >> 3]);
    $j$1 = $j$1 + 1 | 0;
   }
   $2 = HEAP32[$num >> 2] | 0;
   $i$0 = $add;
   $patt_type$0 = $or59;
  }
  if ((label | 0) == 12) {
   HEAP32[$vararg_buffer17 >> 2] = $filename;
   HEAP32[$vararg_buffer17 + 4 >> 2] = $buf;
   _arLog(3, 4847, $vararg_buffer17);
  } else if ((label | 0) == 14) {
   HEAP32[$vararg_buffer21 >> 2] = $filename;
   _arLog(3, 4975, $vararg_buffer21);
  } else if ((label | 0) == 16) {
   HEAP32[$vararg_buffer24 >> 2] = $filename;
   HEAP32[$vararg_buffer24 + 4 >> 2] = $pattPath;
   _arLog(3, 5059, $vararg_buffer24);
  } else if ((label | 0) == 19) {
   HEAP32[$vararg_buffer31 >> 2] = $filename;
   HEAP32[$vararg_buffer31 + 4 >> 2] = $add;
   _arLog(3, 5140, $vararg_buffer31);
  } else if ((label | 0) == 23) {
   HEAP32[$vararg_buffer45 >> 2] = $filename;
   HEAP32[$vararg_buffer45 + 4 >> 2] = $add;
   _arLog(3, 5267, $vararg_buffer45);
  } else if ((label | 0) == 25) {
   HEAP32[$vararg_buffer55 >> 2] = $filename;
   HEAP32[$vararg_buffer55 + 4 >> 2] = $add;
   _arLog(3, 5267, $vararg_buffer55);
  } else if ((label | 0) == 30) {
   _fclose($call) | 0;
   $call259 = _malloc(136) | 0;
   if (!$call259) {
    _arLog(3, 4823, $vararg_buffer59);
    _exit(1);
   } else {
    HEAP32[$call259 >> 2] = $call10;
    HEAP32[$call259 + 4 >> 2] = HEAP32[$num >> 2];
    HEAP32[$call259 + 104 >> 2] = 0;
    HEAP32[$call259 + 108 >> 2] = ($patt_type$0 & 3 | 0) == 3 ? 2 : $patt_type$0 & 1 ^ 1;
    HEAPF64[$call259 + 112 >> 3] = .5;
    HEAPF64[$call259 + 120 >> 3] = .5;
    $retval$0 = $call259;
    break;
   }
  }
  _fclose($call) | 0;
  _free($call10);
  $retval$0 = 0;
 } while (0);
 STACKTOP = sp;
 return $retval$0 | 0;
}

function __ZN10__cxxabiv112_GLOBAL__N_123parse_binary_expressionINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($first, $last, $op, $db) {
 $first = $first | 0;
 $last = $last | 0;
 $op = $op | 0;
 $db = $db | 0;
 var $0 = 0, $10 = 0, $13 = 0, $16 = 0, $19 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $7 = 0, $8 = 0, $__end_$i108 = 0, $__i$0$i$i$i = 0, $__i$0$i$i$i35 = 0, $__i$0$i$i$i44 = 0, $__i$0$i$i$i62 = 0, $__i$0$i$i$i73 = 0, $__size_$i$i$i = 0, $__size_$i1$i = 0, $__size_$i3$i$i = 0, $add$ptr$i109 = 0, $add$ptr$i27 = 0, $call = 0, $call$i = 0, $call$i92 = 0, $call1 = 0, $first18 = 0, $incdec$ptr$i$i$i = 0, $incdec$ptr$i$i$i112 = 0, $op1 = 0, $op2 = 0, $ref$tmp$i = 0, $ref$tmp25 = 0, $ref$tmp26 = 0, $ref$tmp27 = 0, $ref$tmp28 = 0, $ref$tmp29 = 0, $retval$1 = 0, $tobool$i$i$i$i$i = 0, $tobool$i$i$i$i$i54 = 0, $tobool$i$i$i$i$i83 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(96);
 $ref$tmp$i = sp + 84 | 0;
 $op2 = sp + 72 | 0;
 $op1 = sp + 60 | 0;
 $ref$tmp25 = sp + 48 | 0;
 $ref$tmp26 = sp + 36 | 0;
 $ref$tmp27 = sp + 24 | 0;
 $ref$tmp28 = sp + 12 | 0;
 $ref$tmp29 = sp;
 $call = __ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($first, $last, $db) | 0;
 L1 : do if (($call | 0) == ($first | 0)) $retval$1 = $first; else {
  $call1 = __ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($call, $last, $db) | 0;
  $__end_$i108 = $db + 4 | 0;
  if (($call1 | 0) == ($call | 0)) {
   $21 = HEAP32[$__end_$i108 >> 2] | 0;
   $add$ptr$i109 = $21 + -24 | 0;
   $22 = $21;
   while (1) {
    if (($22 | 0) == ($add$ptr$i109 | 0)) {
     $retval$1 = $first;
     break L1;
    }
    $incdec$ptr$i$i$i112 = $22 + -24 | 0;
    HEAP32[$__end_$i108 >> 2] = $incdec$ptr$i$i$i112;
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($incdec$ptr$i$i$i112);
    $22 = HEAP32[$__end_$i108 >> 2] | 0;
   }
  }
  $0 = HEAP32[$__end_$i108 >> 2] | 0;
  if ((($0 - (HEAP32[$db >> 2] | 0) | 0) / 24 | 0) >>> 0 < 2) $retval$1 = $first; else {
   __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($op2, $0 + -24 | 0);
   $3 = HEAP32[$__end_$i108 >> 2] | 0;
   $add$ptr$i27 = $3 + -24 | 0;
   $4 = $3;
   while (1) {
    if (($4 | 0) == ($add$ptr$i27 | 0)) break;
    $incdec$ptr$i$i$i = $4 + -24 | 0;
    HEAP32[$__end_$i108 >> 2] = $incdec$ptr$i$i$i;
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($incdec$ptr$i$i$i);
    $4 = HEAP32[$__end_$i108 >> 2] | 0;
   }
   __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($op1, $3 + -48 | 0);
   $5 = HEAP32[$__end_$i108 >> 2] | 0;
   $first18 = $5 + -24 | 0;
   $__size_$i1$i = $first18 + 11 | 0;
   if ((HEAP8[$__size_$i1$i >> 0] | 0) < 0) {
    $7 = HEAP32[$first18 >> 2] | 0;
    HEAP8[$ref$tmp$i >> 0] = 0;
    __ZNSt3__211char_traitsIcE6assignERcRKc($7, $ref$tmp$i);
    HEAP32[$5 + -20 >> 2] = 0;
   } else {
    HEAP8[$ref$tmp$i >> 0] = 0;
    __ZNSt3__211char_traitsIcE6assignERcRKc($first18, $ref$tmp$i);
    HEAP8[$__size_$i1$i >> 0] = 0;
   }
   $call$i = __ZNSt3__211char_traitsIcE6lengthEPKc(14923) | 0;
   $__size_$i$i$i = $op + 11 | 0;
   $8 = HEAP8[$__size_$i$i$i >> 0] | 0;
   $__size_$i3$i$i = $op + 4 | 0;
   if (($call$i | 0) == (($8 << 24 >> 24 < 0 ? HEAP32[$__size_$i3$i$i >> 2] | 0 : $8 & 255) | 0)) if (!(__ZNKSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE7compareEjjPKcj($op, 14923, $call$i) | 0)) __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE9push_backEc($first18, 40);
   __ZNSt3__2plIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEENS_12basic_stringIT_T0_T1_EEPKS8_RKSB_($ref$tmp29, 14887, $op1);
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($ref$tmp29, 15173) | 0;
   HEAP32[$ref$tmp28 >> 2] = HEAP32[$ref$tmp29 >> 2];
   HEAP32[$ref$tmp28 + 4 >> 2] = HEAP32[$ref$tmp29 + 4 >> 2];
   HEAP32[$ref$tmp28 + 8 >> 2] = HEAP32[$ref$tmp29 + 8 >> 2];
   $__i$0$i$i$i = 0;
   while (1) {
    if (($__i$0$i$i$i | 0) == 3) break;
    HEAP32[$ref$tmp29 + ($__i$0$i$i$i << 2) >> 2] = 0;
    $__i$0$i$i$i = $__i$0$i$i$i + 1 | 0;
   }
   $10 = HEAP8[$__size_$i$i$i >> 0] | 0;
   $tobool$i$i$i$i$i = $10 << 24 >> 24 < 0;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($ref$tmp28, $tobool$i$i$i$i$i ? HEAP32[$op >> 2] | 0 : $op, $tobool$i$i$i$i$i ? HEAP32[$__size_$i3$i$i >> 2] | 0 : $10 & 255) | 0;
   HEAP32[$ref$tmp27 >> 2] = HEAP32[$ref$tmp28 >> 2];
   HEAP32[$ref$tmp27 + 4 >> 2] = HEAP32[$ref$tmp28 + 4 >> 2];
   HEAP32[$ref$tmp27 + 8 >> 2] = HEAP32[$ref$tmp28 + 8 >> 2];
   $__i$0$i$i$i35 = 0;
   while (1) {
    if (($__i$0$i$i$i35 | 0) == 3) break;
    HEAP32[$ref$tmp28 + ($__i$0$i$i$i35 << 2) >> 2] = 0;
    $__i$0$i$i$i35 = $__i$0$i$i$i35 + 1 | 0;
   }
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($ref$tmp27, 14882) | 0;
   HEAP32[$ref$tmp26 >> 2] = HEAP32[$ref$tmp27 >> 2];
   HEAP32[$ref$tmp26 + 4 >> 2] = HEAP32[$ref$tmp27 + 4 >> 2];
   HEAP32[$ref$tmp26 + 8 >> 2] = HEAP32[$ref$tmp27 + 8 >> 2];
   $__i$0$i$i$i44 = 0;
   while (1) {
    if (($__i$0$i$i$i44 | 0) == 3) break;
    HEAP32[$ref$tmp27 + ($__i$0$i$i$i44 << 2) >> 2] = 0;
    $__i$0$i$i$i44 = $__i$0$i$i$i44 + 1 | 0;
   }
   $13 = HEAP8[$op2 + 11 >> 0] | 0;
   $tobool$i$i$i$i$i54 = $13 << 24 >> 24 < 0;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($ref$tmp26, $tobool$i$i$i$i$i54 ? HEAP32[$op2 >> 2] | 0 : $op2, $tobool$i$i$i$i$i54 ? HEAP32[$op2 + 4 >> 2] | 0 : $13 & 255) | 0;
   HEAP32[$ref$tmp25 >> 2] = HEAP32[$ref$tmp26 >> 2];
   HEAP32[$ref$tmp25 + 4 >> 2] = HEAP32[$ref$tmp26 + 4 >> 2];
   HEAP32[$ref$tmp25 + 8 >> 2] = HEAP32[$ref$tmp26 + 8 >> 2];
   $__i$0$i$i$i62 = 0;
   while (1) {
    if (($__i$0$i$i$i62 | 0) == 3) break;
    HEAP32[$ref$tmp26 + ($__i$0$i$i$i62 << 2) >> 2] = 0;
    $__i$0$i$i$i62 = $__i$0$i$i$i62 + 1 | 0;
   }
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($ref$tmp25, 14885) | 0;
   HEAP32[$ref$tmp$i >> 2] = HEAP32[$ref$tmp25 >> 2];
   HEAP32[$ref$tmp$i + 4 >> 2] = HEAP32[$ref$tmp25 + 4 >> 2];
   HEAP32[$ref$tmp$i + 8 >> 2] = HEAP32[$ref$tmp25 + 8 >> 2];
   $__i$0$i$i$i73 = 0;
   while (1) {
    if (($__i$0$i$i$i73 | 0) == 3) break;
    HEAP32[$ref$tmp25 + ($__i$0$i$i$i73 << 2) >> 2] = 0;
    $__i$0$i$i$i73 = $__i$0$i$i$i73 + 1 | 0;
   }
   $16 = HEAP8[$ref$tmp$i + 11 >> 0] | 0;
   $tobool$i$i$i$i$i83 = $16 << 24 >> 24 < 0;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($first18, $tobool$i$i$i$i$i83 ? HEAP32[$ref$tmp$i >> 2] | 0 : $ref$tmp$i, $tobool$i$i$i$i$i83 ? HEAP32[$ref$tmp$i + 4 >> 2] | 0 : $16 & 255) | 0;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($ref$tmp$i);
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($ref$tmp25);
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($ref$tmp26);
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($ref$tmp27);
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($ref$tmp28);
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($ref$tmp29);
   $call$i92 = __ZNSt3__211char_traitsIcE6lengthEPKc(14923) | 0;
   $19 = HEAP8[$__size_$i$i$i >> 0] | 0;
   if (($call$i92 | 0) == (($19 << 24 >> 24 < 0 ? HEAP32[$__size_$i3$i$i >> 2] | 0 : $19 & 255) | 0)) if (!(__ZNKSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE7compareEjjPKcj($op, 14923, $call$i92) | 0)) __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE9push_backEc($first18, 41);
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($op1);
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($op2);
   $retval$1 = $call1;
  }
 } while (0);
 STACKTOP = sp;
 return $retval$1 | 0;
}

function ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) {
 $a$0 = $a$0 | 0;
 $a$1 = $a$1 | 0;
 $b$0 = $b$0 | 0;
 $b$1 = $b$1 | 0;
 $rem = $rem | 0;
 var $n_sroa_0_0_extract_trunc = 0, $n_sroa_1_4_extract_shift$0 = 0, $n_sroa_1_4_extract_trunc = 0, $d_sroa_0_0_extract_trunc = 0, $d_sroa_1_4_extract_shift$0 = 0, $d_sroa_1_4_extract_trunc = 0, $4 = 0, $17 = 0, $37 = 0, $51 = 0, $57 = 0, $58 = 0, $66 = 0, $78 = 0, $88 = 0, $89 = 0, $91 = 0, $92 = 0, $95 = 0, $105 = 0, $119 = 0, $125 = 0, $126 = 0, $130 = 0, $q_sroa_1_1_ph = 0, $q_sroa_0_1_ph = 0, $r_sroa_1_1_ph = 0, $r_sroa_0_1_ph = 0, $sr_1_ph = 0, $d_sroa_0_0_insert_insert99$0 = 0, $d_sroa_0_0_insert_insert99$1 = 0, $137$0 = 0, $137$1 = 0, $carry_0203 = 0, $sr_1202 = 0, $r_sroa_0_1201 = 0, $r_sroa_1_1200 = 0, $q_sroa_0_1199 = 0, $q_sroa_1_1198 = 0, $r_sroa_0_0_insert_insert42$0 = 0, $r_sroa_0_0_insert_insert42$1 = 0, $150$1 = 0, $151$0 = 0, $carry_0_lcssa$0 = 0, $carry_0_lcssa$1 = 0, $r_sroa_0_1_lcssa = 0, $r_sroa_1_1_lcssa = 0, $q_sroa_0_1_lcssa = 0, $q_sroa_1_1_lcssa = 0, $q_sroa_0_0_insert_ext75$0 = 0, $q_sroa_0_0_insert_ext75$1 = 0, $_0$0 = 0, $_0$1 = 0, $q_sroa_1_1198$looptemp = 0;
 $n_sroa_0_0_extract_trunc = $a$0;
 $n_sroa_1_4_extract_shift$0 = $a$1;
 $n_sroa_1_4_extract_trunc = $n_sroa_1_4_extract_shift$0;
 $d_sroa_0_0_extract_trunc = $b$0;
 $d_sroa_1_4_extract_shift$0 = $b$1;
 $d_sroa_1_4_extract_trunc = $d_sroa_1_4_extract_shift$0;
 if (!$n_sroa_1_4_extract_trunc) {
  $4 = ($rem | 0) != 0;
  if (!$d_sroa_1_4_extract_trunc) {
   if ($4) {
    HEAP32[$rem >> 2] = ($n_sroa_0_0_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
    HEAP32[$rem + 4 >> 2] = 0;
   }
   $_0$1 = 0;
   $_0$0 = ($n_sroa_0_0_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
   return (tempRet0 = $_0$1, $_0$0) | 0;
  } else {
   if (!$4) {
    $_0$1 = 0;
    $_0$0 = 0;
    return (tempRet0 = $_0$1, $_0$0) | 0;
   }
   HEAP32[$rem >> 2] = $a$0 | 0;
   HEAP32[$rem + 4 >> 2] = $a$1 & 0;
   $_0$1 = 0;
   $_0$0 = 0;
   return (tempRet0 = $_0$1, $_0$0) | 0;
  }
 }
 $17 = ($d_sroa_1_4_extract_trunc | 0) == 0;
 do if (!$d_sroa_0_0_extract_trunc) {
  if ($17) {
   if ($rem | 0) {
    HEAP32[$rem >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
    HEAP32[$rem + 4 >> 2] = 0;
   }
   $_0$1 = 0;
   $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
   return (tempRet0 = $_0$1, $_0$0) | 0;
  }
  if (!$n_sroa_0_0_extract_trunc) {
   if ($rem | 0) {
    HEAP32[$rem >> 2] = 0;
    HEAP32[$rem + 4 >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_1_4_extract_trunc >>> 0);
   }
   $_0$1 = 0;
   $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_1_4_extract_trunc >>> 0) >>> 0;
   return (tempRet0 = $_0$1, $_0$0) | 0;
  }
  $37 = $d_sroa_1_4_extract_trunc - 1 | 0;
  if (!($37 & $d_sroa_1_4_extract_trunc)) {
   if ($rem | 0) {
    HEAP32[$rem >> 2] = $a$0 | 0;
    HEAP32[$rem + 4 >> 2] = $37 & $n_sroa_1_4_extract_trunc | $a$1 & 0;
   }
   $_0$1 = 0;
   $_0$0 = $n_sroa_1_4_extract_trunc >>> ((_llvm_cttz_i32($d_sroa_1_4_extract_trunc | 0) | 0) >>> 0);
   return (tempRet0 = $_0$1, $_0$0) | 0;
  }
  $51 = (Math_clz32($d_sroa_1_4_extract_trunc | 0) | 0) - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
  if ($51 >>> 0 <= 30) {
   $57 = $51 + 1 | 0;
   $58 = 31 - $51 | 0;
   $sr_1_ph = $57;
   $r_sroa_0_1_ph = $n_sroa_1_4_extract_trunc << $58 | $n_sroa_0_0_extract_trunc >>> ($57 >>> 0);
   $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($57 >>> 0);
   $q_sroa_0_1_ph = 0;
   $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $58;
   break;
  }
  if (!$rem) {
   $_0$1 = 0;
   $_0$0 = 0;
   return (tempRet0 = $_0$1, $_0$0) | 0;
  }
  HEAP32[$rem >> 2] = $a$0 | 0;
  HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
  $_0$1 = 0;
  $_0$0 = 0;
  return (tempRet0 = $_0$1, $_0$0) | 0;
 } else {
  if (!$17) {
   $119 = (Math_clz32($d_sroa_1_4_extract_trunc | 0) | 0) - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
   if ($119 >>> 0 <= 31) {
    $125 = $119 + 1 | 0;
    $126 = 31 - $119 | 0;
    $130 = $119 - 31 >> 31;
    $sr_1_ph = $125;
    $r_sroa_0_1_ph = $n_sroa_0_0_extract_trunc >>> ($125 >>> 0) & $130 | $n_sroa_1_4_extract_trunc << $126;
    $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($125 >>> 0) & $130;
    $q_sroa_0_1_ph = 0;
    $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $126;
    break;
   }
   if (!$rem) {
    $_0$1 = 0;
    $_0$0 = 0;
    return (tempRet0 = $_0$1, $_0$0) | 0;
   }
   HEAP32[$rem >> 2] = $a$0 | 0;
   HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
   $_0$1 = 0;
   $_0$0 = 0;
   return (tempRet0 = $_0$1, $_0$0) | 0;
  }
  $66 = $d_sroa_0_0_extract_trunc - 1 | 0;
  if ($66 & $d_sroa_0_0_extract_trunc | 0) {
   $88 = (Math_clz32($d_sroa_0_0_extract_trunc | 0) | 0) + 33 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
   $89 = 64 - $88 | 0;
   $91 = 32 - $88 | 0;
   $92 = $91 >> 31;
   $95 = $88 - 32 | 0;
   $105 = $95 >> 31;
   $sr_1_ph = $88;
   $r_sroa_0_1_ph = $91 - 1 >> 31 & $n_sroa_1_4_extract_trunc >>> ($95 >>> 0) | ($n_sroa_1_4_extract_trunc << $91 | $n_sroa_0_0_extract_trunc >>> ($88 >>> 0)) & $105;
   $r_sroa_1_1_ph = $105 & $n_sroa_1_4_extract_trunc >>> ($88 >>> 0);
   $q_sroa_0_1_ph = $n_sroa_0_0_extract_trunc << $89 & $92;
   $q_sroa_1_1_ph = ($n_sroa_1_4_extract_trunc << $89 | $n_sroa_0_0_extract_trunc >>> ($95 >>> 0)) & $92 | $n_sroa_0_0_extract_trunc << $91 & $88 - 33 >> 31;
   break;
  }
  if ($rem | 0) {
   HEAP32[$rem >> 2] = $66 & $n_sroa_0_0_extract_trunc;
   HEAP32[$rem + 4 >> 2] = 0;
  }
  if (($d_sroa_0_0_extract_trunc | 0) == 1) {
   $_0$1 = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
   $_0$0 = $a$0 | 0 | 0;
   return (tempRet0 = $_0$1, $_0$0) | 0;
  } else {
   $78 = _llvm_cttz_i32($d_sroa_0_0_extract_trunc | 0) | 0;
   $_0$1 = $n_sroa_1_4_extract_trunc >>> ($78 >>> 0) | 0;
   $_0$0 = $n_sroa_1_4_extract_trunc << 32 - $78 | $n_sroa_0_0_extract_trunc >>> ($78 >>> 0) | 0;
   return (tempRet0 = $_0$1, $_0$0) | 0;
  }
 } while (0);
 if (!$sr_1_ph) {
  $q_sroa_1_1_lcssa = $q_sroa_1_1_ph;
  $q_sroa_0_1_lcssa = $q_sroa_0_1_ph;
  $r_sroa_1_1_lcssa = $r_sroa_1_1_ph;
  $r_sroa_0_1_lcssa = $r_sroa_0_1_ph;
  $carry_0_lcssa$1 = 0;
  $carry_0_lcssa$0 = 0;
 } else {
  $d_sroa_0_0_insert_insert99$0 = $b$0 | 0 | 0;
  $d_sroa_0_0_insert_insert99$1 = $d_sroa_1_4_extract_shift$0 | $b$1 & 0;
  $137$0 = _i64Add($d_sroa_0_0_insert_insert99$0 | 0, $d_sroa_0_0_insert_insert99$1 | 0, -1, -1) | 0;
  $137$1 = tempRet0;
  $q_sroa_1_1198 = $q_sroa_1_1_ph;
  $q_sroa_0_1199 = $q_sroa_0_1_ph;
  $r_sroa_1_1200 = $r_sroa_1_1_ph;
  $r_sroa_0_1201 = $r_sroa_0_1_ph;
  $sr_1202 = $sr_1_ph;
  $carry_0203 = 0;
  do {
   $q_sroa_1_1198$looptemp = $q_sroa_1_1198;
   $q_sroa_1_1198 = $q_sroa_0_1199 >>> 31 | $q_sroa_1_1198 << 1;
   $q_sroa_0_1199 = $carry_0203 | $q_sroa_0_1199 << 1;
   $r_sroa_0_0_insert_insert42$0 = $r_sroa_0_1201 << 1 | $q_sroa_1_1198$looptemp >>> 31 | 0;
   $r_sroa_0_0_insert_insert42$1 = $r_sroa_0_1201 >>> 31 | $r_sroa_1_1200 << 1 | 0;
   _i64Subtract($137$0 | 0, $137$1 | 0, $r_sroa_0_0_insert_insert42$0 | 0, $r_sroa_0_0_insert_insert42$1 | 0) | 0;
   $150$1 = tempRet0;
   $151$0 = $150$1 >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1;
   $carry_0203 = $151$0 & 1;
   $r_sroa_0_1201 = _i64Subtract($r_sroa_0_0_insert_insert42$0 | 0, $r_sroa_0_0_insert_insert42$1 | 0, $151$0 & $d_sroa_0_0_insert_insert99$0 | 0, ((($150$1 | 0) < 0 ? -1 : 0) >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1) & $d_sroa_0_0_insert_insert99$1 | 0) | 0;
   $r_sroa_1_1200 = tempRet0;
   $sr_1202 = $sr_1202 - 1 | 0;
  } while (($sr_1202 | 0) != 0);
  $q_sroa_1_1_lcssa = $q_sroa_1_1198;
  $q_sroa_0_1_lcssa = $q_sroa_0_1199;
  $r_sroa_1_1_lcssa = $r_sroa_1_1200;
  $r_sroa_0_1_lcssa = $r_sroa_0_1201;
  $carry_0_lcssa$1 = 0;
  $carry_0_lcssa$0 = $carry_0203;
 }
 $q_sroa_0_0_insert_ext75$0 = $q_sroa_0_1_lcssa;
 $q_sroa_0_0_insert_ext75$1 = 0;
 if ($rem | 0) {
  HEAP32[$rem >> 2] = $r_sroa_0_1_lcssa;
  HEAP32[$rem + 4 >> 2] = $r_sroa_1_1_lcssa;
 }
 $_0$1 = ($q_sroa_0_0_insert_ext75$0 | 0) >>> 31 | ($q_sroa_1_1_lcssa | $q_sroa_0_0_insert_ext75$1) << 1 | ($q_sroa_0_0_insert_ext75$1 << 1 | $q_sroa_0_0_insert_ext75$0 >>> 31) & 0 | $carry_0_lcssa$1;
 $_0$0 = ($q_sroa_0_0_insert_ext75$0 << 1 | 0 >>> 31) & -2 | $carry_0_lcssa$0;
 return (tempRet0 = $_0$1, $_0$0) | 0;
}

function _icpPointRobust($handle, $data, $initMatXw2Xc, $matXw2Xc, $err) {
 $handle = $handle | 0;
 $data = $data | 0;
 $initMatXw2Xc = $initMatXw2Xc | 0;
 $matXw2Xc = $matXw2Xc | 0;
 $err = $err | 0;
 var $$pre = 0, $$sub = 0, $0 = 0, $12 = 0, $13 = 0.0, $18 = 0, $19 = 0.0, $4 = 0, $6 = 0, $K2$0 = 0.0, $U = 0, $add75 = 0.0, $arrayidx148 = 0, $arrayidx171 = 0, $arrayidx175 = 0, $arrayidx179 = 0, $arrayidx183 = 0, $arrayidx187 = 0, $arrayidx191 = 0, $arrayidx195 = 0, $arrayidx199 = 0, $arrayidx203 = 0, $arrayidx207 = 0, $arrayidx211 = 0, $arrayidx82 = 0, $breakLoopErrorRatioThresh = 0, $breakLoopErrorThresh = 0, $breakLoopErrorThresh2 = 0, $call = 0, $call15 = 0, $call22 = 0, $call29 = 0, $dS = 0, $div = 0.0, $div$pn = 0.0, $div119 = 0.0, $err0$0 = 0.0, $err1$0 = 0.0, $i$0 = 0, $i$1 = 0, $j$0 = 0, $j$1 = 0, $j$2 = 0, $j$3 = 0, $k$0 = 0, $k$1 = 0, $matXw2U = 0, $maxLoop = 0, $mul147 = 0, $mul164 = 0.0, $mul21 = 0, $mul213 = 0, $mul68 = 0, $mul83 = 0.0, $num = 0, $retval$0 = 0, $sub = 0, $sub101 = 0.0, $sub160 = 0.0, $sub63 = 0.0, $sub67 = 0.0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer3 = 0, $vararg_buffer5 = 0, $worldCoord = 0, $y66 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 192 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(192);
 $vararg_buffer5 = sp + 184 | 0;
 $vararg_buffer3 = sp + 176 | 0;
 $vararg_buffer1 = sp + 168 | 0;
 $vararg_buffer = sp + 160 | 0;
 $U = sp + 144 | 0;
 $matXw2U = sp + 48 | 0;
 $dS = sp;
 $num = $data + 8 | 0;
 $0 = HEAP32[$num >> 2] | 0;
 do if (($0 | 0) < 4) $retval$0 = -1; else {
  $sub = ~~(+($0 | 0) * +HEAPF64[$handle + 128 >> 3]) + -1 | 0;
  $$sub = ($sub | 0) > 3 ? $sub : 3;
  $call = _malloc($0 * 96 | 0) | 0;
  if (!$call) {
   _arLog(3, 4461, $vararg_buffer);
   $retval$0 = -1;
   break;
  }
  $call15 = _malloc($0 << 4) | 0;
  if (!$call15) {
   _arLog(3, 4461, $vararg_buffer1);
   _free($call);
   $retval$0 = -1;
   break;
  }
  $mul21 = $0 << 3;
  $call22 = _malloc($mul21) | 0;
  if (!$call22) {
   _arLog(3, 4461, $vararg_buffer3);
   _free($call);
   _free($call15);
   $retval$0 = -1;
   break;
  }
  $call29 = _malloc($mul21) | 0;
  if (!$call29) {
   _arLog(3, 4461, $vararg_buffer5);
   _free($call);
   _free($call15);
   _free($call22);
   $retval$0 = -1;
   break;
  } else $j$0 = 0;
  while (1) {
   if (($j$0 | 0) == 3) break; else $i$0 = 0;
   while (1) {
    if (($i$0 | 0) == 4) break;
    HEAPF64[$matXw2Xc + ($j$0 << 5) + ($i$0 << 3) >> 3] = +HEAPF64[$initMatXw2Xc + ($j$0 << 5) + ($i$0 << 3) >> 3];
    $i$0 = $i$0 + 1 | 0;
   }
   $j$0 = $j$0 + 1 | 0;
  }
  $worldCoord = $data + 4 | 0;
  $y66 = $U + 8 | 0;
  $arrayidx82 = $call29 + ($$sub << 3) | 0;
  $breakLoopErrorThresh = $handle + 104 | 0;
  $breakLoopErrorThresh2 = $handle + 120 | 0;
  $breakLoopErrorRatioThresh = $handle + 112 | 0;
  $maxLoop = $handle + 96 | 0;
  $err0$0 = 0.0;
  $i$1 = 0;
  L21 : while (1) {
   _arUtilMatMul($handle, $matXw2Xc, $matXw2U) | 0;
   $j$1 = 0;
   while (1) {
    $4 = HEAP32[$num >> 2] | 0;
    if (($j$1 | 0) >= ($4 | 0)) break;
    if ((_icpGetU_from_X_by_MatX2U($U, $matXw2U, (HEAP32[$worldCoord >> 2] | 0) + ($j$1 * 24 | 0) | 0) | 0) < 0) {
     label = 18;
     break L21;
    }
    $6 = HEAP32[$data >> 2] | 0;
    $sub63 = +HEAPF64[$6 + ($j$1 << 4) >> 3] - +HEAPF64[$U >> 3];
    $sub67 = +HEAPF64[$6 + ($j$1 << 4) + 8 >> 3] - +HEAPF64[$y66 >> 3];
    $mul68 = $j$1 << 1;
    HEAPF64[$call15 + ($mul68 << 3) >> 3] = $sub63;
    HEAPF64[$call15 + (($mul68 | 1) << 3) >> 3] = $sub67;
    $add75 = $sub63 * $sub63 + $sub67 * $sub67;
    HEAPF64[$call29 + ($j$1 << 3) >> 3] = $add75;
    HEAPF64[$call22 + ($j$1 << 3) >> 3] = $add75;
    $j$1 = $j$1 + 1 | 0;
   }
   _qsort($call29, $4, 8, 1);
   $mul83 = +HEAPF64[$arrayidx82 >> 3] * 4.0;
   $K2$0 = $mul83 < 16.0 ? 16.0 : $mul83;
   $12 = HEAP32[$num >> 2] | 0;
   $div = $K2$0 / 6.0;
   $err1$0 = 0.0;
   $j$2 = 0;
   while (1) {
    if (($j$2 | 0) >= ($12 | 0)) break;
    $13 = +HEAPF64[$call29 + ($j$2 << 3) >> 3];
    if ($13 > $K2$0) $div$pn = $div; else {
     $sub101 = 1.0 - $13 / $K2$0;
     $div$pn = $div * (1.0 - $sub101 * ($sub101 * $sub101));
    }
    $err1$0 = $err1$0 + $div$pn;
    $j$2 = $j$2 + 1 | 0;
   }
   $div119 = $err1$0 / +($12 | 0);
   if ($div119 < +HEAPF64[$breakLoopErrorThresh >> 3]) {
    label = 41;
    break;
   }
   if (($i$1 | 0) > 0) if ($div119 < +HEAPF64[$breakLoopErrorThresh2 >> 3]) if ($div119 / $err0$0 > +HEAPF64[$breakLoopErrorRatioThresh >> 3]) {
    label = 41;
    break;
   }
   if (($i$1 | 0) == (HEAP32[$maxLoop >> 2] | 0)) {
    label = 41;
    break;
   } else {
    $18 = $12;
    $j$3 = 0;
    $k$0 = 0;
   }
   while (1) {
    if (($j$3 | 0) >= ($18 | 0)) break;
    $19 = +HEAPF64[$call22 + ($j$3 << 3) >> 3];
    if (!($19 <= $K2$0)) {
     $$pre = $18;
     $k$1 = $k$0;
    } else {
     $mul147 = $k$0 * 6 | 0;
     $arrayidx148 = $call + ($mul147 << 3) | 0;
     if ((_icpGetJ_U_S($arrayidx148, $handle, $matXw2Xc, (HEAP32[$worldCoord >> 2] | 0) + ($j$3 * 24 | 0) | 0) | 0) < 0) {
      label = 33;
      break L21;
     }
     $sub160 = 1.0 - $19 / $K2$0;
     $mul164 = $sub160 * $sub160;
     HEAPF64[$arrayidx148 >> 3] = +HEAPF64[$arrayidx148 >> 3] * $mul164;
     $arrayidx171 = $call + (($mul147 | 1) << 3) | 0;
     HEAPF64[$arrayidx171 >> 3] = +HEAPF64[$arrayidx171 >> 3] * $mul164;
     $arrayidx175 = $call + ($mul147 + 2 << 3) | 0;
     HEAPF64[$arrayidx175 >> 3] = $mul164 * +HEAPF64[$arrayidx175 >> 3];
     $arrayidx179 = $call + ($mul147 + 3 << 3) | 0;
     HEAPF64[$arrayidx179 >> 3] = $mul164 * +HEAPF64[$arrayidx179 >> 3];
     $arrayidx183 = $call + ($mul147 + 4 << 3) | 0;
     HEAPF64[$arrayidx183 >> 3] = $mul164 * +HEAPF64[$arrayidx183 >> 3];
     $arrayidx187 = $call + ($mul147 + 5 << 3) | 0;
     HEAPF64[$arrayidx187 >> 3] = $mul164 * +HEAPF64[$arrayidx187 >> 3];
     $arrayidx191 = $call + ($mul147 + 6 << 3) | 0;
     HEAPF64[$arrayidx191 >> 3] = $mul164 * +HEAPF64[$arrayidx191 >> 3];
     $arrayidx195 = $call + ($mul147 + 7 << 3) | 0;
     HEAPF64[$arrayidx195 >> 3] = $mul164 * +HEAPF64[$arrayidx195 >> 3];
     $arrayidx199 = $call + ($mul147 + 8 << 3) | 0;
     HEAPF64[$arrayidx199 >> 3] = $mul164 * +HEAPF64[$arrayidx199 >> 3];
     $arrayidx203 = $call + ($mul147 + 9 << 3) | 0;
     HEAPF64[$arrayidx203 >> 3] = $mul164 * +HEAPF64[$arrayidx203 >> 3];
     $arrayidx207 = $call + ($mul147 + 10 << 3) | 0;
     HEAPF64[$arrayidx207 >> 3] = $mul164 * +HEAPF64[$arrayidx207 >> 3];
     $arrayidx211 = $call + ($mul147 + 11 << 3) | 0;
     HEAPF64[$arrayidx211 >> 3] = $mul164 * +HEAPF64[$arrayidx211 >> 3];
     $mul213 = $j$3 << 1;
     HEAPF64[$call15 + ($k$0 << 3) >> 3] = $mul164 * +HEAPF64[$call15 + ($mul213 << 3) >> 3];
     HEAPF64[$call15 + ($k$0 + 1 << 3) >> 3] = $mul164 * +HEAPF64[$call15 + (($mul213 | 1) << 3) >> 3];
     $$pre = HEAP32[$num >> 2] | 0;
     $k$1 = $k$0 + 2 | 0;
    }
    $18 = $$pre;
    $j$3 = $j$3 + 1 | 0;
    $k$0 = $k$1;
   }
   if (($k$0 | 0) < 6) {
    label = 37;
    break;
   }
   if ((_icpGetDeltaS($dS, $call15, $call, $k$0) | 0) < 0) {
    label = 39;
    break;
   }
   _icpUpdateMat($matXw2Xc, $dS) | 0;
   $err0$0 = $div119;
   $i$1 = $i$1 + 1 | 0;
  }
  if ((label | 0) == 18) {
   _icpGetXw2XcCleanup_295($call, $call15, $call22, $call29);
   $retval$0 = -1;
   break;
  } else if ((label | 0) == 33) {
   _icpGetXw2XcCleanup_295($call, $call15, $call22, $call29);
   $retval$0 = -1;
   break;
  } else if ((label | 0) == 37) {
   _icpGetXw2XcCleanup_295($call, $call15, $call22, $call29);
   $retval$0 = -1;
   break;
  } else if ((label | 0) == 39) {
   _icpGetXw2XcCleanup_295($call, $call15, $call22, $call29);
   $retval$0 = -1;
   break;
  } else if ((label | 0) == 41) {
   HEAPF64[$err >> 3] = $div119;
   _free($call);
   _free($call15);
   _free($call22);
   _free($call29);
   $retval$0 = 0;
   break;
  }
 } while (0);
 STACKTOP = sp;
 return $retval$0 | 0;
}

function __ZN10__cxxabiv112_GLOBAL__N_119parse_function_typeINS0_2DbEEEPKcS4_S4_RT_($first, $last, $db) {
 $first = $first | 0;
 $last = $last | 0;
 $db = $db | 0;
 var $11 = 0, $14 = 0, $17 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $3 = 0, $4 = 0, $__end_$i74 = 0, $__p$0$i$i = 0, $__size_$i$i$i = 0, $__size_$i$i$i$i$i = 0, $__size_$i$i$pre$phiZZZ2D = 0, $__size_$i12$i$i = 0, $__size_$i3$i$i$i = 0, $__size_$i3$i$pre$phiZZZ2D = 0, $add$ptr = 0, $add$ptr$i = 0, $add$ptr$i83 = 0, $and$i$i$i$i = 0, $call = 0, $call$i = 0, $call$i$i$i = 0, $call52 = 0, $cmp29$not = 0, $incdec$ptr = 0, $incdec$ptr$i$i$i = 0, $incdec$ptr$i$i$i86 = 0, $incdec$ptr18 = 0, $k$0 = 0, $k76$0 = 0, $ref$tmp$i$i = 0, $ref_qual$0$ph = 0, $retval$8 = 0, $sig = 0, $sub$ptr$div$i = 0, $sub$ptr$div$i77 = 0, $t$0 = 0, $t$1 = 0, $t$1$ph = 0, $tobool$i$i$i$i = 0, $tobool$i$i$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 $ref$tmp$i$i = sp + 12 | 0;
 $sig = sp;
 L1 : do if (($first | 0) == ($last | 0)) $retval$8 = $first; else if ((HEAP8[$first >> 0] | 0) == 70) {
  $add$ptr = $first + 1 | 0;
  if (($add$ptr | 0) == ($last | 0)) $retval$8 = $first; else {
   if ((HEAP8[$add$ptr >> 0] | 0) == 89) {
    $incdec$ptr = $first + 2 | 0;
    if (($incdec$ptr | 0) == ($last | 0)) {
     $retval$8 = $first;
     break;
    } else $t$0 = $incdec$ptr;
   } else $t$0 = $add$ptr;
   $call = __ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($t$0, $last, $db) | 0;
   if (($call | 0) == ($t$0 | 0)) $retval$8 = $first; else {
    HEAP32[$sig >> 2] = 0;
    HEAP32[$sig + 4 >> 2] = 0;
    HEAP32[$sig + 8 >> 2] = 0;
    $call$i = __ZNSt3__211char_traitsIcE6lengthEPKc(14887) | 0;
    if ($call$i >>> 0 > 4294967279) __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($sig);
    if ($call$i >>> 0 < 11) {
     $__size_$i$i$i = $sig + 11 | 0;
     HEAP8[$__size_$i$i$i >> 0] = $call$i;
     $__p$0$i$i = $sig;
     $__size_$i$i$pre$phiZZZ2D = $__size_$i$i$i;
     $__size_$i3$i$pre$phiZZZ2D = $sig + 4 | 0;
    } else {
     $and$i$i$i$i = $call$i + 16 & -16;
     $call$i$i$i = __ZN10__cxxabiv112_GLOBAL__N_112malloc_allocIcE8allocateEj($and$i$i$i$i) | 0;
     HEAP32[$sig >> 2] = $call$i$i$i;
     HEAP32[$sig + 8 >> 2] = $and$i$i$i$i | -2147483648;
     $__size_$i12$i$i = $sig + 4 | 0;
     HEAP32[$__size_$i12$i$i >> 2] = $call$i;
     $__p$0$i$i = $call$i$i$i;
     $__size_$i$i$pre$phiZZZ2D = $sig + 11 | 0;
     $__size_$i3$i$pre$phiZZZ2D = $__size_$i12$i$i;
    }
    __ZNSt3__211char_traitsIcE4copyEPcPKcj($__p$0$i$i, 14887, $call$i) | 0;
    HEAP8[$ref$tmp$i$i >> 0] = 0;
    __ZNSt3__211char_traitsIcE6assignERcRKc($__p$0$i$i + $call$i | 0, $ref$tmp$i$i);
    $__end_$i74 = $db + 4 | 0;
    $__size_$i$i$i$i$i = $ref$tmp$i$i + 11 | 0;
    $__size_$i3$i$i$i = $ref$tmp$i$i + 4 | 0;
    $ref_qual$0$ph = 0;
    $t$1$ph = $call;
    L16 : while (1) {
     $t$1 = $t$1$ph;
     L18 : while (1) {
      if (($t$1 | 0) == ($last | 0)) {
       label = 15;
       break L16;
      }
      $4 = HEAP8[$t$1 >> 0] | 0;
      $incdec$ptr18 = $t$1 + 1 | 0;
      switch ($4 << 24 >> 24) {
      case 69:
       {
        label = 19;
        break L16;
        break;
       }
      case 118:
       {
        $t$1 = $incdec$ptr18;
        continue L18;
        break;
       }
      default:
       {}
      }
      $cmp29$not = ($incdec$ptr18 | 0) == ($last | 0);
      if (!($cmp29$not | $4 << 24 >> 24 != 82)) if ((HEAP8[$incdec$ptr18 >> 0] | 0) == 69) {
       $ref_qual$0$ph = 1;
       $t$1$ph = $incdec$ptr18;
       continue L16;
      }
      if (!($cmp29$not | $4 << 24 >> 24 != 79)) if ((HEAP8[$incdec$ptr18 >> 0] | 0) == 69) {
       $ref_qual$0$ph = 2;
       $t$1$ph = $incdec$ptr18;
       continue L16;
      }
      $sub$ptr$div$i = ((HEAP32[$__end_$i74 >> 2] | 0) - (HEAP32[$db >> 2] | 0) | 0) / 24 | 0;
      $call52 = __ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($t$1, $last, $db) | 0;
      $sub$ptr$div$i77 = ((HEAP32[$__end_$i74 >> 2] | 0) - (HEAP32[$db >> 2] | 0) | 0) / 24 | 0;
      if (($call52 | 0) == ($t$1 | 0) | ($call52 | 0) == ($last | 0)) break L16; else $k$0 = $sub$ptr$div$i;
      while (1) {
       if ($k$0 >>> 0 >= $sub$ptr$div$i77 >>> 0) {
        $k76$0 = $sub$ptr$div$i;
        break;
       }
       $11 = HEAP8[$__size_$i$i$pre$phiZZZ2D >> 0] | 0;
       if (($11 << 24 >> 24 < 0 ? HEAP32[$__size_$i3$i$pre$phiZZZ2D >> 2] | 0 : $11 & 255) >>> 0 > 1) __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($sig, 15109) | 0;
       __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($ref$tmp$i$i, (HEAP32[$db >> 2] | 0) + ($k$0 * 24 | 0) | 0);
       $14 = HEAP8[$__size_$i$i$i$i$i >> 0] | 0;
       $tobool$i$i$i$i$i = $14 << 24 >> 24 < 0;
       __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($sig, $tobool$i$i$i$i$i ? HEAP32[$ref$tmp$i$i >> 2] | 0 : $ref$tmp$i$i, $tobool$i$i$i$i$i ? HEAP32[$__size_$i3$i$i$i >> 2] | 0 : $14 & 255) | 0;
       __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($ref$tmp$i$i);
       $k$0 = $k$0 + 1 | 0;
      }
      while (1) {
       if ($k76$0 >>> 0 >= $sub$ptr$div$i77 >>> 0) {
        $t$1 = $call52;
        continue L18;
       }
       $17 = HEAP32[$__end_$i74 >> 2] | 0;
       $add$ptr$i83 = $17 + -24 | 0;
       $18 = $17;
       while (1) {
        if (($18 | 0) == ($add$ptr$i83 | 0)) break;
        $incdec$ptr$i$i$i86 = $18 + -24 | 0;
        HEAP32[$__end_$i74 >> 2] = $incdec$ptr$i$i$i86;
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($incdec$ptr$i$i$i86);
        $18 = HEAP32[$__end_$i74 >> 2] | 0;
       }
       $k76$0 = $k76$0 + 1 | 0;
      }
     }
    }
    L41 : do if ((label | 0) == 15) {
     $2 = HEAP32[$__end_$i74 >> 2] | 0;
     $add$ptr$i = $2 + -24 | 0;
     $3 = $2;
     while (1) {
      if (($3 | 0) == ($add$ptr$i | 0)) break L41;
      $incdec$ptr$i$i$i = $3 + -24 | 0;
      HEAP32[$__end_$i74 >> 2] = $incdec$ptr$i$i$i;
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($incdec$ptr$i$i$i);
      $3 = HEAP32[$__end_$i74 >> 2] | 0;
     }
    } else if ((label | 0) == 19) {
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($sig, 14885) | 0;
     switch ($ref_qual$0$ph & 3) {
     case 1:
      {
       __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($sig, 16313) | 0;
       break;
      }
     case 2:
      {
       __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($sig, 16316) | 0;
       break;
      }
     default:
      {}
     }
     $20 = HEAP32[$__end_$i74 >> 2] | 0;
     if ((HEAP32[$db >> 2] | 0) != ($20 | 0)) {
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($20 + -24 | 0, 14919) | 0;
      $22 = HEAP8[$__size_$i$i$pre$phiZZZ2D >> 0] | 0;
      $tobool$i$i$i$i = $22 << 24 >> 24 < 0;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKcj((HEAP32[$__end_$i74 >> 2] | 0) + -12 | 0, 0, $tobool$i$i$i$i ? HEAP32[$sig >> 2] | 0 : $sig, $tobool$i$i$i$i ? HEAP32[$__size_$i3$i$pre$phiZZZ2D >> 2] | 0 : $22 & 255) | 0;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($sig);
      $retval$8 = $incdec$ptr18;
      break L1;
     }
    } while (0);
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($sig);
    $retval$8 = $first;
   }
  }
 } else $retval$8 = $first; while (0);
 STACKTOP = sp;
 return $retval$8 | 0;
}

function __ZN10__cxxabiv112_GLOBAL__N_121parse_unresolved_typeINS0_2DbEEEPKcS4_S4_RT_($first, $last, $db) {
 $first = $first | 0;
 $last = $last | 0;
 $db = $db | 0;
 var $13 = 0, $14 = 0, $16 = 0, $17 = 0, $19 = 0, $26 = 0, $28 = 0, $3 = 0, $30 = 0, $5 = 0, $6 = 0, $8 = 0, $__end_$i = 0, $__end_$i$i$i$i = 0, $__end_$i$i$i$i$i = 0, $__end_$i$i$i$i$i73 = 0, $__end_$i$i$i$i$i99 = 0, $__end_$i$i$i$i103 = 0, $__end_$i$i$i$i77 = 0, $__end_$i59 = 0, $__end_$i68 = 0, $__end_$i86 = 0, $__end_$i94 = 0, $__first_$i$i$i8$i$i$i$i = 0, $__first_$i$i$i8$i$i$i$i104 = 0, $__first_$i$i$i8$i$i$i$i78 = 0, $add$ptr = 0, $add$ptr$i61 = 0, $add$ptr$i91 = 0, $call1 = 0, $call15 = 0, $call34 = 0, $call43 = 0, $incdec$ptr$i$i$i = 0, $k1$0 = 0, $ref$tmp = 0, $ref$tmp9 = 0, $retval$1 = 0, $sub$ptr$div$i = 0, $sub$ptr$div$i57 = 0, $subs = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 $ref$tmp = sp + 8 | 0;
 $ref$tmp9 = sp;
 L1 : do if (($first | 0) == ($last | 0)) $retval$1 = $first; else {
  $subs = $db + 16 | 0;
  switch (HEAP8[$first >> 0] | 0) {
  case 84:
   {
    $__end_$i = $db + 4 | 0;
    $sub$ptr$div$i = ((HEAP32[$__end_$i >> 2] | 0) - (HEAP32[$db >> 2] | 0) | 0) / 24 | 0;
    $call1 = __ZN10__cxxabiv112_GLOBAL__N_120parse_template_paramINS0_2DbEEEPKcS4_S4_RT_($first, $last, $db) | 0;
    $3 = HEAP32[$__end_$i >> 2] | 0;
    $sub$ptr$div$i57 = ($3 - (HEAP32[$db >> 2] | 0) | 0) / 24 | 0;
    $5 = $3;
    if (($call1 | 0) != ($first | 0) & ($sub$ptr$div$i57 | 0) == ($sub$ptr$div$i + 1 | 0)) {
     HEAP32[$ref$tmp9 >> 2] = HEAP32[$db + 12 >> 2];
     __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEC2EjRKS3_RKS5_($ref$tmp, $5 + -24 | 0, $ref$tmp9);
     $__end_$i59 = $db + 20 | 0;
     $6 = HEAP32[$__end_$i59 >> 2] | 0;
     if ($6 >>> 0 < (HEAP32[$db + 24 >> 2] | 0) >>> 0) {
      HEAP32[$6 >> 2] = 0;
      $__end_$i$i$i$i$i = $6 + 4 | 0;
      HEAP32[$__end_$i$i$i$i$i >> 2] = 0;
      $8 = HEAP32[$ref$tmp + 12 >> 2] | 0;
      HEAP32[$6 + 8 >> 2] = 0;
      HEAP32[$6 + 12 >> 2] = $8;
      HEAP32[$6 >> 2] = HEAP32[$ref$tmp >> 2];
      $__end_$i$i$i$i = $ref$tmp + 4 | 0;
      HEAP32[$__end_$i$i$i$i$i >> 2] = HEAP32[$__end_$i$i$i$i >> 2];
      $__first_$i$i$i8$i$i$i$i = $ref$tmp + 8 | 0;
      HEAP32[$6 + 8 >> 2] = HEAP32[$__first_$i$i$i8$i$i$i$i >> 2];
      HEAP32[$__first_$i$i$i8$i$i$i$i >> 2] = 0;
      HEAP32[$__end_$i$i$i$i >> 2] = 0;
      HEAP32[$ref$tmp >> 2] = 0;
      HEAP32[$__end_$i59 >> 2] = (HEAP32[$__end_$i59 >> 2] | 0) + 16;
     } else __ZNSt3__26vectorINS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEENS4_IS6_Lj4096EEEE21__push_back_slow_pathIS6_EEvOT_($subs, $ref$tmp);
     __ZNSt3__213__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEED2Ev($ref$tmp);
     $retval$1 = $call1;
     break L1;
    } else {
     $13 = $5;
     $k1$0 = $sub$ptr$div$i57;
    }
    while (1) {
     if (($k1$0 | 0) == ($sub$ptr$div$i | 0)) {
      $retval$1 = $first;
      break L1;
     }
     $add$ptr$i61 = $13 + -24 | 0;
     $14 = $13;
     while (1) {
      if (($14 | 0) == ($add$ptr$i61 | 0)) break;
      $incdec$ptr$i$i$i = $14 + -24 | 0;
      HEAP32[$__end_$i >> 2] = $incdec$ptr$i$i$i;
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($incdec$ptr$i$i$i);
      $14 = HEAP32[$__end_$i >> 2] | 0;
     }
     $13 = $add$ptr$i61;
     $k1$0 = $k1$0 + -1 | 0;
    }
    break;
   }
  case 68:
   {
    $call15 = __ZN10__cxxabiv112_GLOBAL__N_114parse_decltypeINS0_2DbEEEPKcS4_S4_RT_($first, $last, $db) | 0;
    if (($call15 | 0) == ($first | 0)) {
     $retval$1 = $first;
     break L1;
    }
    $16 = HEAP32[$db + 4 >> 2] | 0;
    if ((HEAP32[$db >> 2] | 0) == ($16 | 0)) {
     $retval$1 = $first;
     break L1;
    }
    HEAP32[$ref$tmp9 >> 2] = HEAP32[$db + 12 >> 2];
    __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEC2EjRKS3_RKS5_($ref$tmp, $16 + -24 | 0, $ref$tmp9);
    $__end_$i68 = $db + 20 | 0;
    $17 = HEAP32[$__end_$i68 >> 2] | 0;
    if ($17 >>> 0 < (HEAP32[$db + 24 >> 2] | 0) >>> 0) {
     HEAP32[$17 >> 2] = 0;
     $__end_$i$i$i$i$i73 = $17 + 4 | 0;
     HEAP32[$__end_$i$i$i$i$i73 >> 2] = 0;
     $19 = HEAP32[$ref$tmp + 12 >> 2] | 0;
     HEAP32[$17 + 8 >> 2] = 0;
     HEAP32[$17 + 12 >> 2] = $19;
     HEAP32[$17 >> 2] = HEAP32[$ref$tmp >> 2];
     $__end_$i$i$i$i77 = $ref$tmp + 4 | 0;
     HEAP32[$__end_$i$i$i$i$i73 >> 2] = HEAP32[$__end_$i$i$i$i77 >> 2];
     $__first_$i$i$i8$i$i$i$i78 = $ref$tmp + 8 | 0;
     HEAP32[$17 + 8 >> 2] = HEAP32[$__first_$i$i$i8$i$i$i$i78 >> 2];
     HEAP32[$__first_$i$i$i8$i$i$i$i78 >> 2] = 0;
     HEAP32[$__end_$i$i$i$i77 >> 2] = 0;
     HEAP32[$ref$tmp >> 2] = 0;
     HEAP32[$__end_$i68 >> 2] = (HEAP32[$__end_$i68 >> 2] | 0) + 16;
    } else __ZNSt3__26vectorINS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEENS4_IS6_Lj4096EEEE21__push_back_slow_pathIS6_EEvOT_($subs, $ref$tmp);
    __ZNSt3__213__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEED2Ev($ref$tmp);
    $retval$1 = $call15;
    break L1;
    break;
   }
  case 83:
   {
    $call34 = __ZN10__cxxabiv112_GLOBAL__N_118parse_substitutionINS0_2DbEEEPKcS4_S4_RT_($first, $last, $db) | 0;
    if (($call34 | 0) != ($first | 0)) {
     $retval$1 = $call34;
     break L1;
    }
    if (($last - $first | 0) <= 2) {
     $retval$1 = $first;
     break L1;
    }
    if ((HEAP8[$first + 1 >> 0] | 0) != 116) {
     $retval$1 = $first;
     break L1;
    }
    $add$ptr = $first + 2 | 0;
    $call43 = __ZN10__cxxabiv112_GLOBAL__N_122parse_unqualified_nameINS0_2DbEEEPKcS4_S4_RT_($add$ptr, $last, $db) | 0;
    if (($call43 | 0) == ($add$ptr | 0)) {
     $retval$1 = $first;
     break L1;
    }
    $__end_$i86 = $db + 4 | 0;
    $26 = HEAP32[$__end_$i86 >> 2] | 0;
    if ((HEAP32[$db >> 2] | 0) == ($26 | 0)) {
     $retval$1 = $first;
     break L1;
    }
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKc($26 + -24 | 0, 0, 15181) | 0;
    $add$ptr$i91 = (HEAP32[$__end_$i86 >> 2] | 0) + -24 | 0;
    HEAP32[$ref$tmp9 >> 2] = HEAP32[$db + 12 >> 2];
    __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEC2EjRKS3_RKS5_($ref$tmp, $add$ptr$i91, $ref$tmp9);
    $__end_$i94 = $db + 20 | 0;
    $28 = HEAP32[$__end_$i94 >> 2] | 0;
    if ($28 >>> 0 < (HEAP32[$db + 24 >> 2] | 0) >>> 0) {
     HEAP32[$28 >> 2] = 0;
     $__end_$i$i$i$i$i99 = $28 + 4 | 0;
     HEAP32[$__end_$i$i$i$i$i99 >> 2] = 0;
     $30 = HEAP32[$ref$tmp + 12 >> 2] | 0;
     HEAP32[$28 + 8 >> 2] = 0;
     HEAP32[$28 + 12 >> 2] = $30;
     HEAP32[$28 >> 2] = HEAP32[$ref$tmp >> 2];
     $__end_$i$i$i$i103 = $ref$tmp + 4 | 0;
     HEAP32[$__end_$i$i$i$i$i99 >> 2] = HEAP32[$__end_$i$i$i$i103 >> 2];
     $__first_$i$i$i8$i$i$i$i104 = $ref$tmp + 8 | 0;
     HEAP32[$28 + 8 >> 2] = HEAP32[$__first_$i$i$i8$i$i$i$i104 >> 2];
     HEAP32[$__first_$i$i$i8$i$i$i$i104 >> 2] = 0;
     HEAP32[$__end_$i$i$i$i103 >> 2] = 0;
     HEAP32[$ref$tmp >> 2] = 0;
     HEAP32[$__end_$i94 >> 2] = (HEAP32[$__end_$i94 >> 2] | 0) + 16;
    } else __ZNSt3__26vectorINS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEENS4_IS6_Lj4096EEEE21__push_back_slow_pathIS6_EEvOT_($subs, $ref$tmp);
    __ZNSt3__213__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEED2Ev($ref$tmp);
    $retval$1 = $call43;
    break L1;
    break;
   }
  default:
   {
    $retval$1 = $first;
    break L1;
   }
  }
 } while (0);
 STACKTOP = sp;
 return $retval$1 | 0;
}

function __ZN10__cxxabiv112_GLOBAL__N_120parse_function_paramINS0_2DbEEEPKcS4_S4_RT_($first, $last, $db) {
 $first = $first | 0;
 $last = $last | 0;
 $db = $db | 0;
 var $3 = 0, $8 = 0, $__end_$i = 0, $__end_$i79 = 0, $__first$addr$0$i$i = 0, $__first$addr$0$i$i61 = 0, $__i$0$i$i$i = 0, $__i$0$i$i$i70 = 0, $__p$0$i$i = 0, $__p$0$i$i60 = 0, $__p$0$ph$i$i = 0, $__p$0$ph$i$i58 = 0, $add$ptr = 0, $agg$tmp = 0, $agg$tmp46 = 0, $and$i$i$i$i = 0, $and$i$i$i$i51 = 0, $call = 0, $call$i$i$i = 0, $call$i$i$i52 = 0, $call29 = 0, $call36 = 0, $call38 = 0, $call5 = 0, $cv = 0, $first$addr$0 = 0, $first$addr$2 = 0, $first$addr$3 = 0, $ref$tmp = 0, $ref$tmp$i$i38 = 0, $ref$tmp11 = 0, $sub$ptr$sub$i$i$i$i = 0, $sub$ptr$sub$i$i$i$i41 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(80);
 $ref$tmp$i$i38 = sp + 64 | 0;
 $cv = sp + 60 | 0;
 $ref$tmp = sp + 24 | 0;
 $agg$tmp = sp + 48 | 0;
 $ref$tmp11 = sp + 12 | 0;
 $agg$tmp46 = sp;
 L1 : do if (($last - $first | 0) > 2) if ((HEAP8[$first >> 0] | 0) == 102) {
  $add$ptr = $first + 2 | 0;
  switch (HEAP8[$first + 1 >> 0] | 0) {
  case 112:
   {
    $call = __ZN10__cxxabiv112_GLOBAL__N_119parse_cv_qualifiersEPKcS2_Rj($add$ptr, $last, $cv) | 0;
    $call5 = __ZN10__cxxabiv112_GLOBAL__N_112parse_numberEPKcS2_($call, $last) | 0;
    if (($call5 | 0) == ($last | 0)) $first$addr$0 = $first; else if ((HEAP8[$call5 >> 0] | 0) == 95) {
     HEAP32[$ref$tmp11 >> 2] = 0;
     HEAP32[$ref$tmp11 + 4 >> 2] = 0;
     HEAP32[$ref$tmp11 + 8 >> 2] = 0;
     $sub$ptr$sub$i$i$i$i = $call5 - $call | 0;
     if ($sub$ptr$sub$i$i$i$i >>> 0 > 4294967279) __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($ref$tmp11);
     if ($sub$ptr$sub$i$i$i$i >>> 0 < 11) {
      HEAP8[$ref$tmp11 + 11 >> 0] = $sub$ptr$sub$i$i$i$i;
      $__p$0$ph$i$i = $ref$tmp11;
     } else {
      $and$i$i$i$i = $sub$ptr$sub$i$i$i$i + 16 & -16;
      $call$i$i$i = __ZN10__cxxabiv112_GLOBAL__N_112malloc_allocIcE8allocateEj($and$i$i$i$i) | 0;
      HEAP32[$ref$tmp11 >> 2] = $call$i$i$i;
      HEAP32[$ref$tmp11 + 8 >> 2] = $and$i$i$i$i | -2147483648;
      HEAP32[$ref$tmp11 + 4 >> 2] = $sub$ptr$sub$i$i$i$i;
      $__p$0$ph$i$i = $call$i$i$i;
     }
     $__first$addr$0$i$i = $call;
     $__p$0$i$i = $__p$0$ph$i$i;
     while (1) {
      if (($__first$addr$0$i$i | 0) == ($call5 | 0)) break;
      __ZNSt3__211char_traitsIcE6assignERcRKc($__p$0$i$i, $__first$addr$0$i$i);
      $__first$addr$0$i$i = $__first$addr$0$i$i + 1 | 0;
      $__p$0$i$i = $__p$0$i$i + 1 | 0;
     }
     HEAP8[$ref$tmp$i$i38 >> 0] = 0;
     __ZNSt3__211char_traitsIcE6assignERcRKc($__p$0$ph$i$i + $sub$ptr$sub$i$i$i$i | 0, $ref$tmp$i$i38);
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKc($ref$tmp11, 0, 16076) | 0;
     HEAP32[$agg$tmp >> 2] = HEAP32[$ref$tmp11 >> 2];
     HEAP32[$agg$tmp + 4 >> 2] = HEAP32[$ref$tmp11 + 4 >> 2];
     HEAP32[$agg$tmp + 8 >> 2] = HEAP32[$ref$tmp11 + 8 >> 2];
     $__i$0$i$i$i = 0;
     while (1) {
      if (($__i$0$i$i$i | 0) == 3) break;
      HEAP32[$ref$tmp11 + ($__i$0$i$i$i << 2) >> 2] = 0;
      $__i$0$i$i$i = $__i$0$i$i$i + 1 | 0;
     }
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ENSt3__212basic_stringIcNS2_11char_traitsIcEENS0_12malloc_allocIcEEEE($ref$tmp, $agg$tmp);
     $__end_$i = $db + 4 | 0;
     $3 = HEAP32[$__end_$i >> 2] | 0;
     if ($3 >>> 0 < (HEAP32[$db + 8 >> 2] | 0) >>> 0) {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($3, $ref$tmp);
      HEAP32[$__end_$i >> 2] = (HEAP32[$__end_$i >> 2] | 0) + 24;
     } else __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIS3_EEvOT_($db, $ref$tmp);
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($ref$tmp);
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($agg$tmp);
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($ref$tmp11);
     $first$addr$0 = $call5 + 1 | 0;
    } else $first$addr$0 = $first;
    $first$addr$3 = $first$addr$0;
    break L1;
    break;
   }
  case 76:
   break;
  default:
   {
    $first$addr$3 = $first;
    break L1;
   }
  }
  $call29 = __ZN10__cxxabiv112_GLOBAL__N_112parse_numberEPKcS2_($add$ptr, $last) | 0;
  if (($call29 | 0) == ($last | 0)) $first$addr$2 = $first; else if ((HEAP8[$call29 >> 0] | 0) == 112) {
   $call36 = __ZN10__cxxabiv112_GLOBAL__N_119parse_cv_qualifiersEPKcS2_Rj($call29 + 1 | 0, $last, $cv) | 0;
   $call38 = __ZN10__cxxabiv112_GLOBAL__N_112parse_numberEPKcS2_($call36, $last) | 0;
   if (($call38 | 0) == ($last | 0)) $first$addr$2 = $first; else if ((HEAP8[$call38 >> 0] | 0) == 95) {
    HEAP32[$ref$tmp11 >> 2] = 0;
    HEAP32[$ref$tmp11 + 4 >> 2] = 0;
    HEAP32[$ref$tmp11 + 8 >> 2] = 0;
    $sub$ptr$sub$i$i$i$i41 = $call38 - $call36 | 0;
    if ($sub$ptr$sub$i$i$i$i41 >>> 0 > 4294967279) __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($ref$tmp11);
    if ($sub$ptr$sub$i$i$i$i41 >>> 0 < 11) {
     HEAP8[$ref$tmp11 + 11 >> 0] = $sub$ptr$sub$i$i$i$i41;
     $__p$0$ph$i$i58 = $ref$tmp11;
    } else {
     $and$i$i$i$i51 = $sub$ptr$sub$i$i$i$i41 + 16 & -16;
     $call$i$i$i52 = __ZN10__cxxabiv112_GLOBAL__N_112malloc_allocIcE8allocateEj($and$i$i$i$i51) | 0;
     HEAP32[$ref$tmp11 >> 2] = $call$i$i$i52;
     HEAP32[$ref$tmp11 + 8 >> 2] = $and$i$i$i$i51 | -2147483648;
     HEAP32[$ref$tmp11 + 4 >> 2] = $sub$ptr$sub$i$i$i$i41;
     $__p$0$ph$i$i58 = $call$i$i$i52;
    }
    $__first$addr$0$i$i61 = $call36;
    $__p$0$i$i60 = $__p$0$ph$i$i58;
    while (1) {
     if (($__first$addr$0$i$i61 | 0) == ($call38 | 0)) break;
     __ZNSt3__211char_traitsIcE6assignERcRKc($__p$0$i$i60, $__first$addr$0$i$i61);
     $__first$addr$0$i$i61 = $__first$addr$0$i$i61 + 1 | 0;
     $__p$0$i$i60 = $__p$0$i$i60 + 1 | 0;
    }
    HEAP8[$ref$tmp$i$i38 >> 0] = 0;
    __ZNSt3__211char_traitsIcE6assignERcRKc($__p$0$ph$i$i58 + $sub$ptr$sub$i$i$i$i41 | 0, $ref$tmp$i$i38);
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKc($ref$tmp11, 0, 16076) | 0;
    HEAP32[$agg$tmp46 >> 2] = HEAP32[$ref$tmp11 >> 2];
    HEAP32[$agg$tmp46 + 4 >> 2] = HEAP32[$ref$tmp11 + 4 >> 2];
    HEAP32[$agg$tmp46 + 8 >> 2] = HEAP32[$ref$tmp11 + 8 >> 2];
    $__i$0$i$i$i70 = 0;
    while (1) {
     if (($__i$0$i$i$i70 | 0) == 3) break;
     HEAP32[$ref$tmp11 + ($__i$0$i$i$i70 << 2) >> 2] = 0;
     $__i$0$i$i$i70 = $__i$0$i$i$i70 + 1 | 0;
    }
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ENSt3__212basic_stringIcNS2_11char_traitsIcEENS0_12malloc_allocIcEEEE($ref$tmp, $agg$tmp46);
    $__end_$i79 = $db + 4 | 0;
    $8 = HEAP32[$__end_$i79 >> 2] | 0;
    if ($8 >>> 0 < (HEAP32[$db + 8 >> 2] | 0) >>> 0) {
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($8, $ref$tmp);
     HEAP32[$__end_$i79 >> 2] = (HEAP32[$__end_$i79 >> 2] | 0) + 24;
    } else __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIS3_EEvOT_($db, $ref$tmp);
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($ref$tmp);
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($agg$tmp46);
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($ref$tmp11);
    $first$addr$2 = $call38 + 1 | 0;
   } else $first$addr$2 = $first;
  } else $first$addr$2 = $first;
  $first$addr$3 = $first$addr$2;
 } else $first$addr$3 = $first; else $first$addr$3 = $first; while (0);
 STACKTOP = sp;
 return $first$addr$3 | 0;
}

function _pattern_match($pattHandle, $mode, $data, $size, $code, $dir, $cf) {
 $pattHandle = $pattHandle | 0;
 $mode = $mode | 0;
 $data = $data | 0;
 $size = $size | 0;
 $code = $code | 0;
 $dir = $dir | 0;
 $cf = $cf | 0;
 var $17 = 0, $18 = 0, $4 = 0, $5 = 0, $add171 = 0, $add175 = 0, $add67 = 0, $add71 = 0, $ave$0 = 0, $ave$1 = 0, $call = 0, $call133 = 0.0, $call32 = 0.0, $call96 = 0, $cmp185 = 0, $cmp81 = 0, $conv33 = 0.0, $div = 0, $div114 = 0, $div184 = 0.0, $div80 = 0.0, $i$0 = 0, $i$1 = 0, $i$2 = 0, $i$3 = 0, $i$4 = 0, $i$5 = 0, $j$0 = 0, $j$1 = 0, $k$0 = 0, $k$1 = 0, $k$1$in = 0, $k$2 = 0, $k$3 = 0, $k$3$in = 0, $l$0 = 0, $l$1 = 0, $max$0 = 0.0, $max$1 = 0.0, $max$3 = 0.0, $max$4 = 0.0, $max$5 = 0.0, $max$7 = 0.0, $mul = 0, $mul170 = 0, $mul3 = 0, $mul66 = 0, $patt = 0, $pattBW = 0, $pattf = 0, $pattpow = 0, $pattpowBW = 0, $res1$0 = 0, $res1$1 = 0, $res1$2 = 0, $res1$3 = 0, $res1$4 = 0, $res1$5 = 0, $res1$6 = 0, $res1$7 = 0, $res2$0 = 0, $res2$1 = 0, $res2$3 = 0, $res2$4 = 0, $res2$5 = 0, $res2$7 = 0, $retval$0 = 0, $sub123 = 0, $sub22 = 0, $sum$0 = 0, $sum$1 = 0, $sum$2 = 0, $sum$3 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $vararg_buffer1 = sp + 8 | 0;
 $vararg_buffer = sp;
 L1 : do if (!$pattHandle) {
  HEAP32[$code >> 2] = 0;
  HEAP32[$dir >> 2] = 0;
  HEAPF64[$cf >> 3] = -1.0;
  $retval$0 = -1;
 } else {
  $mul = Math_imul($size, $size) | 0;
  $pattf = $pattHandle + 8 | 0;
  $conv33 = +($size | 0);
  switch ($mode | 0) {
  case 0:
   {
    $mul3 = $mul * 3 | 0;
    $call = _malloc($mul * 12 | 0) | 0;
    if (!$call) {
     _arLog(3, 4823, $vararg_buffer);
     _exit(1);
    } else {
     $ave$0 = 0;
     $i$0 = 0;
    }
    while (1) {
     if (($i$0 | 0) >= ($mul3 | 0)) break;
     $ave$0 = (~HEAP8[$data + $i$0 >> 0] & 255) + $ave$0 | 0;
     $i$0 = $i$0 + 1 | 0;
    }
    $div = ($ave$0 | 0) / ($mul3 | 0) | 0;
    $i$1 = 0;
    $sum$0 = 0;
    while (1) {
     if (($i$1 | 0) >= ($mul3 | 0)) break;
     $sub22 = (~HEAP8[$data + $i$1 >> 0] & 255) - $div | 0;
     HEAP32[$call + ($i$1 << 2) >> 2] = $sub22;
     $i$1 = $i$1 + 1 | 0;
     $sum$0 = (Math_imul($sub22, $sub22) | 0) + $sum$0 | 0;
    }
    $call32 = +Math_sqrt(+(+($sum$0 | 0)));
    if ($call32 / ($conv33 * 1.7320508) < 15.0) {
     HEAP32[$code >> 2] = 0;
     HEAP32[$dir >> 2] = 0;
     HEAPF64[$cf >> 3] = -1.0;
     _free($call);
     $retval$0 = -2;
     break L1;
    }
    $4 = HEAP32[$pattHandle >> 2] | 0;
    $patt = $pattHandle + 12 | 0;
    $pattpow = $pattHandle + 16 | 0;
    $k$0 = -1;
    $l$0 = 0;
    $max$0 = 0.0;
    $res1$0 = -1;
    $res2$0 = -1;
    while (1) {
     if (($l$0 | 0) >= ($4 | 0)) break;
     $5 = HEAP32[$pattf >> 2] | 0;
     $k$1$in = $k$0;
     L22 : while (1) {
      $k$1 = $k$1$in + 1 | 0;
      switch (HEAP32[$5 + ($k$1 << 2) >> 2] | 0) {
      case 0:
       {
        $k$1$in = $k$1;
        break;
       }
      case 2:
       {
        $max$3 = $max$0;
        $res1$3 = $res1$0;
        $res2$3 = $res2$0;
        break L22;
        break;
       }
      default:
       {
        label = 17;
        break L22;
       }
      }
     }
     L24 : do if ((label | 0) == 17) {
      label = 0;
      $mul66 = $k$1 << 2;
      $j$0 = 0;
      $max$1 = $max$0;
      $res1$1 = $res1$0;
      $res2$1 = $res2$0;
      while (1) {
       if (($j$0 | 0) == 4) {
        $max$3 = $max$1;
        $res1$3 = $res1$1;
        $res2$3 = $res2$1;
        break L24;
       }
       $add67 = $j$0 + $mul66 | 0;
       $i$2 = 0;
       $sum$1 = 0;
       while (1) {
        if (($i$2 | 0) >= ($mul3 | 0)) break;
        $add71 = (Math_imul(HEAP32[(HEAP32[(HEAP32[$patt >> 2] | 0) + ($add67 << 2) >> 2] | 0) + ($i$2 << 2) >> 2] | 0, HEAP32[$call + ($i$2 << 2) >> 2] | 0) | 0) + $sum$1 | 0;
        $i$2 = $i$2 + 1 | 0;
        $sum$1 = $add71;
       }
       $div80 = +($sum$1 | 0) / +HEAPF64[(HEAP32[$pattpow >> 2] | 0) + ($add67 << 3) >> 3] / $call32;
       $cmp81 = $div80 > $max$1;
       $res1$2 = $cmp81 ? $j$0 : $res1$1;
       $j$0 = $j$0 + 1 | 0;
       $max$1 = $cmp81 ? $div80 : $max$1;
       $res1$1 = $res1$2;
       $res2$1 = $cmp81 ? $k$1 : $res2$1;
      }
     } while (0);
     $k$0 = $k$1;
     $l$0 = $l$0 + 1 | 0;
     $max$0 = $max$3;
     $res1$0 = $res1$3;
     $res2$0 = $res2$3;
    }
    HEAP32[$dir >> 2] = $res1$0;
    HEAP32[$code >> 2] = $res2$0;
    HEAPF64[$cf >> 3] = $max$0;
    _free($call);
    $retval$0 = 0;
    break L1;
    break;
   }
  case 1:
   {
    $call96 = _malloc($mul << 2) | 0;
    if (!$call96) {
     _arLog(3, 4823, $vararg_buffer1);
     _exit(1);
    } else {
     $ave$1 = 0;
     $i$3 = 0;
    }
    while (1) {
     if (($i$3 | 0) >= ($mul | 0)) break;
     $ave$1 = (~HEAP8[$data + $i$3 >> 0] & 255) + $ave$1 | 0;
     $i$3 = $i$3 + 1 | 0;
    }
    $div114 = ($ave$1 | 0) / ($mul | 0) | 0;
    $i$4 = 0;
    $sum$2 = 0;
    while (1) {
     if (($i$4 | 0) >= ($mul | 0)) break;
     $sub123 = (~HEAP8[$data + $i$4 >> 0] & 255) - $div114 | 0;
     HEAP32[$call96 + ($i$4 << 2) >> 2] = $sub123;
     $i$4 = $i$4 + 1 | 0;
     $sum$2 = (Math_imul($sub123, $sub123) | 0) + $sum$2 | 0;
    }
    $call133 = +Math_sqrt(+(+($sum$2 | 0)));
    if ($call133 / $conv33 < 15.0) {
     HEAP32[$code >> 2] = 0;
     HEAP32[$dir >> 2] = 0;
     HEAPF64[$cf >> 3] = -1.0;
     _free($call96);
     $retval$0 = -2;
     break L1;
    }
    $17 = HEAP32[$pattHandle >> 2] | 0;
    $pattBW = $pattHandle + 20 | 0;
    $pattpowBW = $pattHandle + 24 | 0;
    $k$2 = -1;
    $l$1 = 0;
    $max$4 = 0.0;
    $res1$4 = -1;
    $res2$4 = -1;
    while (1) {
     if (($l$1 | 0) >= ($17 | 0)) break;
     $18 = HEAP32[$pattf >> 2] | 0;
     $k$3$in = $k$2;
     L52 : while (1) {
      $k$3 = $k$3$in + 1 | 0;
      switch (HEAP32[$18 + ($k$3 << 2) >> 2] | 0) {
      case 0:
       {
        $k$3$in = $k$3;
        break;
       }
      case 2:
       {
        $max$7 = $max$4;
        $res1$7 = $res1$4;
        $res2$7 = $res2$4;
        break L52;
        break;
       }
      default:
       {
        label = 38;
        break L52;
       }
      }
     }
     L54 : do if ((label | 0) == 38) {
      label = 0;
      $mul170 = $k$3 << 2;
      $j$1 = 0;
      $max$5 = $max$4;
      $res1$5 = $res1$4;
      $res2$5 = $res2$4;
      while (1) {
       if (($j$1 | 0) == 4) {
        $max$7 = $max$5;
        $res1$7 = $res1$5;
        $res2$7 = $res2$5;
        break L54;
       }
       $add171 = $j$1 + $mul170 | 0;
       $i$5 = 0;
       $sum$3 = 0;
       while (1) {
        if (($i$5 | 0) >= ($mul | 0)) break;
        $add175 = (Math_imul(HEAP32[(HEAP32[(HEAP32[$pattBW >> 2] | 0) + ($add171 << 2) >> 2] | 0) + ($i$5 << 2) >> 2] | 0, HEAP32[$call96 + ($i$5 << 2) >> 2] | 0) | 0) + $sum$3 | 0;
        $i$5 = $i$5 + 1 | 0;
        $sum$3 = $add175;
       }
       $div184 = +($sum$3 | 0) / +HEAPF64[(HEAP32[$pattpowBW >> 2] | 0) + ($add171 << 3) >> 3] / $call133;
       $cmp185 = $div184 > $max$5;
       $res1$6 = $cmp185 ? $j$1 : $res1$5;
       $j$1 = $j$1 + 1 | 0;
       $max$5 = $cmp185 ? $div184 : $max$5;
       $res1$5 = $res1$6;
       $res2$5 = $cmp185 ? $k$3 : $res2$5;
      }
     } while (0);
     $k$2 = $k$3;
     $l$1 = $l$1 + 1 | 0;
     $max$4 = $max$7;
     $res1$4 = $res1$7;
     $res2$4 = $res2$7;
    }
    HEAP32[$dir >> 2] = $res1$4;
    HEAP32[$code >> 2] = $res2$4;
    HEAPF64[$cf >> 3] = $max$4;
    _free($call96);
    $retval$0 = 0;
    break L1;
    break;
   }
  default:
   {
    $retval$0 = -1;
    break L1;
   }
  }
 } while (0);
 STACKTOP = sp;
 return $retval$0 | 0;
}

function __ZN10__cxxabiv112_GLOBAL__N_118parse_substitutionINS0_2DbEEEPKcS4_S4_RT_($first, $last, $db) {
 $first = $first | 0;
 $last = $last | 0;
 $db = $db | 0;
 var $11 = 0, $14 = 0, $17 = 0, $2 = 0, $20 = 0, $23 = 0, $24 = 0, $27 = 0, $29 = 0, $30 = 0, $32 = 0, $33 = 0, $5 = 0, $8 = 0, $__begin$sroa$0$0 = 0, $__begin102$sroa$0$0 = 0, $__end_$i = 0, $__end_$i104 = 0, $__end_$i115 = 0, $__end_$i59 = 0, $__end_$i67 = 0, $__end_$i75 = 0, $__end_$i83 = 0, $__end_$i91 = 0, $__first_$i$i$i$i105 = 0, $__first_$i$i$i$i116 = 0, $add$ptr = 0, $conv3 = 0, $conv66 = 0, $inc = 0, $incdec$ptr87 = 0, $isdigit = 0, $isdigit55 = 0, $ref$tmp = 0, $retval$1 = 0, $sub$1 = 0, $subs95 = 0, $t$0 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 $ref$tmp = sp;
 L1 : do if (($last - $first | 0) > 1) if ((HEAP8[$first >> 0] | 0) == 83) {
  $conv3 = HEAP8[$first + 1 >> 0] | 0;
  $add$ptr = $first + 2 | 0;
  $subs95 = $db + 16 | 0;
  switch ($conv3 | 0) {
  case 97:
   {
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj15EEERAT__Kc($ref$tmp, 16213);
    $__end_$i = $db + 4 | 0;
    $2 = HEAP32[$__end_$i >> 2] | 0;
    if ($2 >>> 0 < (HEAP32[$db + 8 >> 2] | 0) >>> 0) {
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($2, $ref$tmp);
     HEAP32[$__end_$i >> 2] = (HEAP32[$__end_$i >> 2] | 0) + 24;
    } else __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIS3_EEvOT_($db, $ref$tmp);
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($ref$tmp);
    $retval$1 = $add$ptr;
    break L1;
    break;
   }
  case 98:
   {
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj18EEERAT__Kc($ref$tmp, 16228);
    $__end_$i59 = $db + 4 | 0;
    $5 = HEAP32[$__end_$i59 >> 2] | 0;
    if ($5 >>> 0 < (HEAP32[$db + 8 >> 2] | 0) >>> 0) {
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($5, $ref$tmp);
     HEAP32[$__end_$i59 >> 2] = (HEAP32[$__end_$i59 >> 2] | 0) + 24;
    } else __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIS3_EEvOT_($db, $ref$tmp);
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($ref$tmp);
    $retval$1 = $add$ptr;
    break L1;
    break;
   }
  case 115:
   {
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj12EEERAT__Kc($ref$tmp, 15707);
    $__end_$i67 = $db + 4 | 0;
    $8 = HEAP32[$__end_$i67 >> 2] | 0;
    if ($8 >>> 0 < (HEAP32[$db + 8 >> 2] | 0) >>> 0) {
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($8, $ref$tmp);
     HEAP32[$__end_$i67 >> 2] = (HEAP32[$__end_$i67 >> 2] | 0) + 24;
    } else __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIS3_EEvOT_($db, $ref$tmp);
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($ref$tmp);
    $retval$1 = $add$ptr;
    break L1;
    break;
   }
  case 105:
   {
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj13EEERAT__Kc($ref$tmp, 15803);
    $__end_$i75 = $db + 4 | 0;
    $11 = HEAP32[$__end_$i75 >> 2] | 0;
    if ($11 >>> 0 < (HEAP32[$db + 8 >> 2] | 0) >>> 0) {
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($11, $ref$tmp);
     HEAP32[$__end_$i75 >> 2] = (HEAP32[$__end_$i75 >> 2] | 0) + 24;
    } else __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIS3_EEvOT_($db, $ref$tmp);
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($ref$tmp);
    $retval$1 = $add$ptr;
    break L1;
    break;
   }
  case 111:
   {
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj13EEERAT__Kc($ref$tmp, 15880);
    $__end_$i83 = $db + 4 | 0;
    $14 = HEAP32[$__end_$i83 >> 2] | 0;
    if ($14 >>> 0 < (HEAP32[$db + 8 >> 2] | 0) >>> 0) {
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($14, $ref$tmp);
     HEAP32[$__end_$i83 >> 2] = (HEAP32[$__end_$i83 >> 2] | 0) + 24;
    } else __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIS3_EEvOT_($db, $ref$tmp);
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($ref$tmp);
    $retval$1 = $add$ptr;
    break L1;
    break;
   }
  case 100:
   {
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj14EEERAT__Kc($ref$tmp, 15957);
    $__end_$i91 = $db + 4 | 0;
    $17 = HEAP32[$__end_$i91 >> 2] | 0;
    if ($17 >>> 0 < (HEAP32[$db + 8 >> 2] | 0) >>> 0) {
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($17, $ref$tmp);
     HEAP32[$__end_$i91 >> 2] = (HEAP32[$__end_$i91 >> 2] | 0) + 24;
    } else __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIS3_EEvOT_($db, $ref$tmp);
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($ref$tmp);
    $retval$1 = $add$ptr;
    break L1;
    break;
   }
  case 95:
   {
    $20 = HEAP32[$subs95 >> 2] | 0;
    if (($20 | 0) == (HEAP32[$db + 20 >> 2] | 0)) {
     $retval$1 = $first;
     break L1;
    }
    $23 = HEAP32[$20 + 4 >> 2] | 0;
    $__end_$i104 = $db + 4 | 0;
    $__first_$i$i$i$i105 = $db + 8 | 0;
    $__begin$sroa$0$0 = HEAP32[$20 >> 2] | 0;
    while (1) {
     if (($__begin$sroa$0$0 | 0) == ($23 | 0)) {
      $retval$1 = $add$ptr;
      break L1;
     }
     $24 = HEAP32[$__end_$i104 >> 2] | 0;
     if (($24 | 0) == (HEAP32[$__first_$i$i$i$i105 >> 2] | 0)) __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIRKS3_EEvOT_($db, $__begin$sroa$0$0); else {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ERKS1_($24, $__begin$sroa$0$0);
      HEAP32[$__end_$i104 >> 2] = (HEAP32[$__end_$i104 >> 2] | 0) + 24;
     }
     $__begin$sroa$0$0 = $__begin$sroa$0$0 + 24 | 0;
    }
    break;
   }
  default:
   {
    $isdigit = ($conv3 + -48 | 0) >>> 0 < 10;
    if (!$isdigit) if (!(_isupper($conv3) | 0)) {
     $retval$1 = $first;
     break L1;
    }
    $sub$1 = ($isdigit ? -48 : -55) + $conv3 | 0;
    $t$0 = $add$ptr;
    while (1) {
     $incdec$ptr87 = $t$0 + 1 | 0;
     if (($t$0 | 0) == ($last | 0)) {
      $retval$1 = $first;
      break L1;
     }
     $27 = HEAP8[$t$0 >> 0] | 0;
     $conv66 = $27 << 24 >> 24;
     $isdigit55 = ($conv66 + -48 | 0) >>> 0 < 10;
     if (!$isdigit55) if (!(_isupper($conv66) | 0)) break;
     $sub$1 = $conv66 + ($sub$1 * 36 | 0) + ($isdigit55 ? -48 : -55) | 0;
     $t$0 = $incdec$ptr87;
    }
    if ($27 << 24 >> 24 != 95) {
     $retval$1 = $first;
     break L1;
    }
    $inc = $sub$1 + 1 | 0;
    $29 = HEAP32[$subs95 >> 2] | 0;
    $30 = $29;
    if ($inc >>> 0 >= (HEAP32[$db + 20 >> 2] | 0) - $29 >> 4 >>> 0) {
     $retval$1 = $first;
     break L1;
    }
    $32 = HEAP32[$30 + ($inc << 4) + 4 >> 2] | 0;
    $__end_$i115 = $db + 4 | 0;
    $__first_$i$i$i$i116 = $db + 8 | 0;
    $__begin102$sroa$0$0 = HEAP32[$30 + ($inc << 4) >> 2] | 0;
    while (1) {
     if (($__begin102$sroa$0$0 | 0) == ($32 | 0)) {
      $retval$1 = $incdec$ptr87;
      break L1;
     }
     $33 = HEAP32[$__end_$i115 >> 2] | 0;
     if (($33 | 0) == (HEAP32[$__first_$i$i$i$i116 >> 2] | 0)) __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIRKS3_EEvOT_($db, $__begin102$sroa$0$0); else {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ERKS1_($33, $__begin102$sroa$0$0);
      HEAP32[$__end_$i115 >> 2] = (HEAP32[$__end_$i115 >> 2] | 0) + 24;
     }
     $__begin102$sroa$0$0 = $__begin102$sroa$0$0 + 24 | 0;
    }
   }
  }
 } else $retval$1 = $first; else $retval$1 = $first; while (0);
 STACKTOP = sp;
 return $retval$1 | 0;
}

function _arParamObserv2Ideal($dist_factor, $ox, $oy, $ix, $iy, $dist_function_version) {
 $dist_factor = $dist_factor | 0;
 $ox = +$ox;
 $oy = +$oy;
 $ix = $ix | 0;
 $iy = $iy | 0;
 $dist_function_version = $dist_function_version | 0;
 var $0 = 0.0, $1 = 0.0, $10 = 0.0, $17 = 0.0, $2 = 0.0, $24 = 0.0, $3 = 0.0, $4 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $add = 0.0, $add130 = 0.0, $add164 = 0.0, $add203 = 0.0, $add21 = 0.0, $add238 = 0.0, $add272 = 0.0, $add300 = 0.0, $add315$sink = 0.0, $arrayidx1 = 0, $arrayidx2 = 0, $arrayidx3 = 0, $arrayidx4 = 0, $arrayidx5 = 0, $call = 0.0, $call207 = 0.0, $call276 = 0.0, $div = 0.0, $div10 = 0.0, $div120 = 0.0, $div124 = 0.0, $div127 = 0.0, $div154 = 0.0, $div156 = 0.0, $div197 = 0.0, $div200 = 0.0, $div228 = 0.0, $div230 = 0.0, $div269 = 0.0, $div290 = 0.0, $div292 = 0.0, $i$0 = 0, $i116$0 = 0, $i191$0 = 0, $i263$0 = 0, $mul144 = 0.0, $mul147 = 0.0, $mul218 = 0.0, $mul221 = 0.0, $mul23 = 0.0, $mul284 = 0.0, $mul35 = 0.0, $mul42 = 0.0, $mul51 = 0.0, $mul70 = 0.0, $mul71 = 0.0, $mul90 = 0.0, $px$0 = 0.0, $px$1 = 0.0, $px114$0 = 0.0, $px114$1 = 0.0, $px189$0 = 0.0, $px189$1 = 0.0, $px261$0 = 0.0, $px261$1 = 0.0, $py$0 = 0.0, $py$1 = 0.0, $py115$0 = 0.0, $py115$1 = 0.0, $py190$0 = 0.0, $py190$1 = 0.0, $py262$0 = 0.0, $py262$1 = 0.0, $retval$0 = 0, $sub122 = 0.0, $sub152 = 0.0, $sub193 = 0.0, $sub195 = 0.0, $sub226 = 0.0, $sub265 = 0.0, $sub267 = 0.0, $sub288 = 0.0, $sub55 = 0.0, $sub97 = 0.0, $x02$0 = 0.0, $y02$0 = 0.0, $z0$0 = 0.0, $z0184$0 = 0.0, $z02$0 = 0.0, $z02183$0 = 0.0, $z02257$0 = 0.0, $z0258$0 = 0.0, label = 0;
 $arrayidx3 = $dist_factor + 24 | 0;
 $arrayidx5 = $dist_factor + 40 | 0;
 $arrayidx1 = $dist_factor + 8 | 0;
 $arrayidx2 = $dist_factor + 16 | 0;
 $arrayidx4 = $dist_factor + 32 | 0;
 switch ($dist_function_version | 0) {
 case 4:
  {
   $0 = +HEAPF64[$dist_factor >> 3];
   $1 = +HEAPF64[$arrayidx1 >> 3];
   $2 = +HEAPF64[$arrayidx2 >> 3];
   $3 = +HEAPF64[$arrayidx3 >> 3];
   $4 = +HEAPF64[$arrayidx4 >> 3];
   $5 = +HEAPF64[$arrayidx5 >> 3];
   $6 = +HEAPF64[$dist_factor + 48 >> 3];
   $7 = +HEAPF64[$dist_factor + 56 >> 3];
   $8 = +HEAPF64[$dist_factor + 64 >> 3];
   $div = ($ox - $6) / $4;
   $div10 = ($oy - $7) / $5;
   $mul23 = $2 * 2.0;
   $mul51 = $3 * 6.0;
   $mul70 = $3 * 2.0;
   $mul90 = $2 * 6.0;
   $i$0 = 1;
   $px$0 = $div;
   $py$0 = $div10;
   $x02$0 = $div * $div;
   $y02$0 = $div10 * $div10;
   while (1) {
    if (!($y02$0 != 0.0 | $x02$0 != 0.0)) {
     $px$1 = 0.0;
     $py$1 = 0.0;
     break;
    }
    $add = $y02$0 + $x02$0;
    $add21 = $0 * $add + 1.0 + $add * ($1 * $add);
    $mul35 = $x02$0 * 3.0;
    $mul42 = $y02$0 * $mul35;
    $sub55 = $px$0 - ($3 * ($add + $x02$0 * 2.0) + ($py$0 * ($mul23 * $px$0) + $px$0 * $add21) - $div) / ($mul51 * $px$0 + ($mul23 * $py$0 + ($0 * ($y02$0 + $mul35) + 1.0 + $1 * ($y02$0 * $y02$0 + ($x02$0 * ($x02$0 * 5.0) + $mul42)))));
    $mul71 = $mul70 * $sub55;
    $sub97 = $py$0 - ($2 * ($y02$0 * 2.0 + $add) + $py$0 * $add21 + $py$0 * $mul71 - $div10) / ($mul90 * $py$0 + ($0 * ($x02$0 + $y02$0 * 3.0) + 1.0 + $1 * ($y02$0 * ($y02$0 * 5.0) + ($x02$0 * $x02$0 + $mul42))) + $mul71);
    if (($i$0 | 0) == 4) {
     $px$1 = $sub55;
     $py$1 = $sub97;
     break;
    }
    $i$0 = $i$0 + 1 | 0;
    $px$0 = $sub55;
    $py$0 = $sub97;
    $x02$0 = $sub55 * $sub55;
    $y02$0 = $sub97 * $sub97;
   }
   HEAPF64[$ix >> 3] = $6 + $4 * $px$1 / $8;
   $add315$sink = $7 + $5 * $py$1 / $8;
   label = 22;
   break;
  }
 case 3:
  {
   $10 = +HEAPF64[$dist_factor >> 3];
   $div120 = ($ox - $10) / +HEAPF64[$arrayidx3 >> 3];
   $sub122 = $oy - +HEAPF64[$arrayidx1 >> 3];
   $div124 = +HEAPF64[$arrayidx4 >> 3] / 1.0e8;
   $div127 = +HEAPF64[$arrayidx5 >> 3] / 1.0e8 / 1.0e5;
   $add130 = $div120 * $div120 + $sub122 * $sub122;
   $call = +Math_sqrt(+$add130);
   $mul144 = $div124 * 3.0;
   $mul147 = $div127 * 5.0;
   $i116$0 = 1;
   $px114$0 = $div120;
   $py115$0 = $sub122;
   $z0$0 = $call;
   $z02$0 = $add130;
   while (1) {
    if (!($z0$0 != 0.0)) {
     $px114$1 = 0.0;
     $py115$1 = 0.0;
     break;
    }
    $sub152 = $z0$0 - ($z0$0 * (1.0 - $div124 * $z02$0 - $z02$0 * ($div127 * $z02$0)) - $call) / (1.0 - $mul144 * $z02$0 - $z02$0 * ($mul147 * $z02$0));
    $div154 = $px114$0 * $sub152 / $z0$0;
    $div156 = $py115$0 * $sub152 / $z0$0;
    if (($i116$0 | 0) == 3) {
     $px114$1 = $div154;
     $py115$1 = $div156;
     break;
    }
    $add164 = $div154 * $div154 + $div156 * $div156;
    $i116$0 = $i116$0 + 1 | 0;
    $px114$0 = $div154;
    $py115$0 = $div156;
    $z0$0 = +Math_sqrt(+$add164);
    $z02$0 = $add164;
   }
   HEAPF64[$ix >> 3] = $10 + $px114$1 / +HEAPF64[$arrayidx2 >> 3];
   $add315$sink = $py115$1 / +HEAPF64[$arrayidx2 >> 3] + +HEAPF64[$arrayidx1 >> 3];
   label = 22;
   break;
  }
 case 2:
  {
   $17 = +HEAPF64[$dist_factor >> 3];
   $sub193 = $ox - $17;
   $sub195 = $oy - +HEAPF64[$arrayidx1 >> 3];
   $div197 = +HEAPF64[$arrayidx3 >> 3] / 1.0e8;
   $div200 = +HEAPF64[$arrayidx4 >> 3] / 1.0e8 / 1.0e5;
   $add203 = $sub193 * $sub193 + $sub195 * $sub195;
   $call207 = +Math_sqrt(+$add203);
   $mul218 = $div197 * 3.0;
   $mul221 = $div200 * 5.0;
   $i191$0 = 1;
   $px189$0 = $sub193;
   $py190$0 = $sub195;
   $z0184$0 = $call207;
   $z02183$0 = $add203;
   while (1) {
    if (!($z0184$0 != 0.0)) {
     $px189$1 = 0.0;
     $py190$1 = 0.0;
     break;
    }
    $sub226 = $z0184$0 - ($z0184$0 * (1.0 - $div197 * $z02183$0 - $z02183$0 * ($div200 * $z02183$0)) - $call207) / (1.0 - $mul218 * $z02183$0 - $z02183$0 * ($mul221 * $z02183$0));
    $div228 = $px189$0 * $sub226 / $z0184$0;
    $div230 = $py190$0 * $sub226 / $z0184$0;
    if (($i191$0 | 0) == 3) {
     $px189$1 = $div228;
     $py190$1 = $div230;
     break;
    }
    $add238 = $div228 * $div228 + $div230 * $div230;
    $i191$0 = $i191$0 + 1 | 0;
    $px189$0 = $div228;
    $py190$0 = $div230;
    $z0184$0 = +Math_sqrt(+$add238);
    $z02183$0 = $add238;
   }
   HEAPF64[$ix >> 3] = $17 + $px189$1 / +HEAPF64[$arrayidx2 >> 3];
   $add315$sink = $py190$1 / +HEAPF64[$arrayidx2 >> 3] + +HEAPF64[$arrayidx1 >> 3];
   label = 22;
   break;
  }
 case 1:
  {
   $24 = +HEAPF64[$dist_factor >> 3];
   $sub265 = $ox - $24;
   $sub267 = $oy - +HEAPF64[$arrayidx1 >> 3];
   $div269 = +HEAPF64[$arrayidx3 >> 3] / 1.0e8;
   $add272 = $sub265 * $sub265 + $sub267 * $sub267;
   $call276 = +Math_sqrt(+$add272);
   $mul284 = $div269 * 3.0;
   $i263$0 = 1;
   $px261$0 = $sub265;
   $py262$0 = $sub267;
   $z02257$0 = $add272;
   $z0258$0 = $call276;
   while (1) {
    if (!($z0258$0 != 0.0)) {
     $px261$1 = 0.0;
     $py262$1 = 0.0;
     break;
    }
    $sub288 = $z0258$0 - ($z0258$0 * (1.0 - $div269 * $z02257$0) - $call276) / (1.0 - $mul284 * $z02257$0);
    $div290 = $px261$0 * $sub288 / $z0258$0;
    $div292 = $py262$0 * $sub288 / $z0258$0;
    if (($i263$0 | 0) == 3) {
     $px261$1 = $div290;
     $py262$1 = $div292;
     break;
    }
    $add300 = $div290 * $div290 + $div292 * $div292;
    $i263$0 = $i263$0 + 1 | 0;
    $px261$0 = $div290;
    $py262$0 = $div292;
    $z02257$0 = $add300;
    $z0258$0 = +Math_sqrt(+$add300);
   }
   HEAPF64[$ix >> 3] = $24 + $px261$1 / +HEAPF64[$arrayidx2 >> 3];
   $add315$sink = $py262$1 / +HEAPF64[$arrayidx2 >> 3] + +HEAPF64[$arrayidx1 >> 3];
   label = 22;
   break;
  }
 default:
  $retval$0 = -1;
 }
 if ((label | 0) == 22) {
  HEAPF64[$iy >> 3] = $add315$sink;
  $retval$0 = 0;
 }
 return $retval$0 | 0;
}

function __ZN10__cxxabiv112_GLOBAL__N_121parse_conversion_exprINS0_2DbEEEPKcS4_S4_RT_($first, $last, $db) {
 $first = $first | 0;
 $last = $last | 0;
 $db = $db | 0;
 var $12 = 0, $13 = 0, $14 = 0, $2 = 0, $4 = 0, $5 = 0, $8 = 0, $9 = 0, $__end_$i = 0, $__end_$i63 = 0, $__i$0$i$i$i = 0, $__i$0$i$i$i71 = 0, $__i$0$i$i$i80 = 0, $__i$0$i$i$i88 = 0, $add$ptr = 0, $add$ptr$i66 = 0, $agg$tmp = 0, $call = 0, $call19 = 0, $call32 = 0, $incdec$ptr = 0, $incdec$ptr$i$i$i = 0, $or$cond62 = 0, $ref$tmp = 0, $ref$tmp91 = 0, $ref$tmp92 = 0, $ref$tmp93 = 0, $ref$tmp94 = 0, $retval$10 = 0, $t$1 = 0, $t$4 = 0, $t$5 = 0, $tmp85 = 0, $tobool$i$i$i$i$i = 0, $try_to_parse_template_args6 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(112);
 $tmp85 = sp + 88 | 0;
 $ref$tmp = sp + 64 | 0;
 $agg$tmp = sp + 48 | 0;
 $ref$tmp91 = sp + 36 | 0;
 $ref$tmp92 = sp + 24 | 0;
 $ref$tmp93 = sp + 12 | 0;
 $ref$tmp94 = sp;
 L1 : do if (($last - $first | 0) > 2) if ((HEAP8[$first >> 0] | 0) == 99) if ((HEAP8[$first + 1 >> 0] | 0) == 118) {
  $try_to_parse_template_args6 = $db + 63 | 0;
  $2 = HEAP8[$try_to_parse_template_args6 >> 0] | 0;
  HEAP8[$try_to_parse_template_args6 >> 0] = 0;
  $add$ptr = $first + 2 | 0;
  $call = __ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($add$ptr, $last, $db) | 0;
  HEAP8[$try_to_parse_template_args6 >> 0] = $2;
  if (($call | 0) == ($add$ptr | 0) | ($call | 0) == ($last | 0)) $retval$10 = $first; else {
   if ((HEAP8[$call >> 0] | 0) == 95) {
    $incdec$ptr = $call + 1 | 0;
    if (($incdec$ptr | 0) == ($last | 0)) {
     $retval$10 = $first;
     break;
    }
    $4 = HEAP8[$incdec$ptr >> 0] | 0;
    L9 : do if ($4 << 24 >> 24 == 69) {
     $__end_$i = $db + 4 | 0;
     $5 = HEAP32[$__end_$i >> 2] | 0;
     if ($5 >>> 0 < (HEAP32[$db + 8 >> 2] | 0) >>> 0) {
      HEAP32[$5 >> 2] = 0;
      HEAP32[$5 + 4 >> 2] = 0;
      HEAP32[$5 + 8 >> 2] = 0;
      HEAP32[$5 + 12 >> 2] = 0;
      HEAP32[$5 + 16 >> 2] = 0;
      HEAP32[$5 + 20 >> 2] = 0;
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2Ev($5);
      HEAP32[$__end_$i >> 2] = (HEAP32[$__end_$i >> 2] | 0) + 24;
      $t$4 = $incdec$ptr;
      break;
     } else {
      __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE24__emplace_back_slow_pathIJEEEvDpOT_($db);
      $t$4 = $incdec$ptr;
      break;
     }
    } else {
     $8 = $4;
     $t$1 = $incdec$ptr;
     while (1) {
      if ($8 << 24 >> 24 == 69) {
       $t$4 = $t$1;
       break L9;
      }
      $call32 = __ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($t$1, $last, $db) | 0;
      $or$cond62 = ($call32 | 0) == ($t$1 | 0) | ($call32 | 0) == ($last | 0);
      if ($or$cond62) {
       $retval$10 = $first;
       break L1;
      }
      $8 = HEAP8[($or$cond62 ? $t$1 : $call32) >> 0] | 0;
      $t$1 = $call32;
     }
    } while (0);
    $t$5 = $t$4 + 1 | 0;
   } else {
    $call19 = __ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($call, $last, $db) | 0;
    if (($call19 | 0) == ($call | 0)) {
     $retval$10 = $first;
     break;
    } else $t$5 = $call19;
   }
   $__end_$i63 = $db + 4 | 0;
   $9 = HEAP32[$__end_$i63 >> 2] | 0;
   if ((($9 - (HEAP32[$db >> 2] | 0) | 0) / 24 | 0) >>> 0 < 2) $retval$10 = $first; else {
    __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($tmp85, $9 + -24 | 0);
    $12 = HEAP32[$__end_$i63 >> 2] | 0;
    $add$ptr$i66 = $12 + -24 | 0;
    $13 = $12;
    while (1) {
     if (($13 | 0) == ($add$ptr$i66 | 0)) break;
     $incdec$ptr$i$i$i = $13 + -24 | 0;
     HEAP32[$__end_$i63 >> 2] = $incdec$ptr$i$i$i;
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($incdec$ptr$i$i$i);
     $13 = HEAP32[$__end_$i63 >> 2] | 0;
    }
    __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($ref$tmp94, $12 + -48 | 0);
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKc($ref$tmp94, 0, 14887) | 0;
    HEAP32[$ref$tmp93 >> 2] = HEAP32[$ref$tmp94 >> 2];
    HEAP32[$ref$tmp93 + 4 >> 2] = HEAP32[$ref$tmp94 + 4 >> 2];
    HEAP32[$ref$tmp93 + 8 >> 2] = HEAP32[$ref$tmp94 + 8 >> 2];
    $__i$0$i$i$i = 0;
    while (1) {
     if (($__i$0$i$i$i | 0) == 3) break;
     HEAP32[$ref$tmp94 + ($__i$0$i$i$i << 2) >> 2] = 0;
     $__i$0$i$i$i = $__i$0$i$i$i + 1 | 0;
    }
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($ref$tmp93, 16051) | 0;
    HEAP32[$ref$tmp92 >> 2] = HEAP32[$ref$tmp93 >> 2];
    HEAP32[$ref$tmp92 + 4 >> 2] = HEAP32[$ref$tmp93 + 4 >> 2];
    HEAP32[$ref$tmp92 + 8 >> 2] = HEAP32[$ref$tmp93 + 8 >> 2];
    $__i$0$i$i$i71 = 0;
    while (1) {
     if (($__i$0$i$i$i71 | 0) == 3) break;
     HEAP32[$ref$tmp93 + ($__i$0$i$i$i71 << 2) >> 2] = 0;
     $__i$0$i$i$i71 = $__i$0$i$i$i71 + 1 | 0;
    }
    $14 = HEAP8[$tmp85 + 11 >> 0] | 0;
    $tobool$i$i$i$i$i = $14 << 24 >> 24 < 0;
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($ref$tmp92, $tobool$i$i$i$i$i ? HEAP32[$tmp85 >> 2] | 0 : $tmp85, $tobool$i$i$i$i$i ? HEAP32[$tmp85 + 4 >> 2] | 0 : $14 & 255) | 0;
    HEAP32[$ref$tmp91 >> 2] = HEAP32[$ref$tmp92 >> 2];
    HEAP32[$ref$tmp91 + 4 >> 2] = HEAP32[$ref$tmp92 + 4 >> 2];
    HEAP32[$ref$tmp91 + 8 >> 2] = HEAP32[$ref$tmp92 + 8 >> 2];
    $__i$0$i$i$i80 = 0;
    while (1) {
     if (($__i$0$i$i$i80 | 0) == 3) break;
     HEAP32[$ref$tmp92 + ($__i$0$i$i$i80 << 2) >> 2] = 0;
     $__i$0$i$i$i80 = $__i$0$i$i$i80 + 1 | 0;
    }
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($ref$tmp91, 14885) | 0;
    HEAP32[$agg$tmp >> 2] = HEAP32[$ref$tmp91 >> 2];
    HEAP32[$agg$tmp + 4 >> 2] = HEAP32[$ref$tmp91 + 4 >> 2];
    HEAP32[$agg$tmp + 8 >> 2] = HEAP32[$ref$tmp91 + 8 >> 2];
    $__i$0$i$i$i88 = 0;
    while (1) {
     if (($__i$0$i$i$i88 | 0) == 3) break;
     HEAP32[$ref$tmp91 + ($__i$0$i$i$i88 << 2) >> 2] = 0;
     $__i$0$i$i$i88 = $__i$0$i$i$i88 + 1 | 0;
    }
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ENSt3__212basic_stringIcNS2_11char_traitsIcEENS0_12malloc_allocIcEEEE($ref$tmp, $agg$tmp);
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairaSEOS1_((HEAP32[$__end_$i63 >> 2] | 0) + -24 | 0, $ref$tmp);
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($ref$tmp);
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($agg$tmp);
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($ref$tmp91);
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($ref$tmp92);
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($ref$tmp93);
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($ref$tmp94);
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($tmp85);
    $retval$10 = $t$5;
   }
  }
 } else $retval$10 = $first; else $retval$10 = $first; else $retval$10 = $first; while (0);
 STACKTOP = sp;
 return $retval$10 | 0;
}

function __ZN46EmscriptenBindingInitializer_constant_bindingsC2Ev($this) {
 $this = $this | 0;
 var $ref$tmp = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $ref$tmp = sp;
 __ZN10emscripten8functionIiJiiiEJEEEvPKcPFT_DpT0_EDpT1_(5444, 7);
 __ZN10emscripten8functionIiJiEJEEEvPKcPFT_DpT0_EDpT1_(5450, 3);
 __ZN10emscripten8functionIiJiNSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEEJEEEvPKcPFT_DpT0_EDpT1_(5459, 2);
 __ZN10emscripten8functionIiJiNSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEEJEEEvPKcPFT_DpT0_EDpT1_(5470, 3);
 __ZN10emscripten8functionIiJiiEJEEEvPKcPFT_DpT0_EDpT1_(5486, 4);
 __ZN10emscripten8functionIiJiEJEEEvPKcPFT_DpT0_EDpT1_(5504, 4);
 __ZN10emscripten8functionIiJNSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEEJEEEvPKcPFT_DpT0_EDpT1_(5524, 5);
 __ZN10emscripten8functionIiJiiiEJEEEvPKcPFT_DpT0_EDpT1_(5536, 8);
 __ZN10emscripten8functionIiJiiEJEEEvPKcPFT_DpT0_EDpT1_(5553, 5);
 __ZN10emscripten8functionIiJiiiEJEEEvPKcPFT_DpT0_EDpT1_(5573, 9);
 __ZN10emscripten8functionIiJiiiEJEEEvPKcPFT_DpT0_EDpT1_(5591, 10);
 __ZN10emscripten8functionIiJiiEJEEEvPKcPFT_DpT0_EDpT1_(5613, 6);
 __ZN10emscripten8functionIiJiiEJEEEvPKcPFT_DpT0_EDpT1_(5636, 7);
 __ZN10emscripten8functionIiJiEJEEEvPKcPFT_DpT0_EDpT1_(5665, 6);
 __ZN10emscripten8functionIiJiEJEEEvPKcPFT_DpT0_EDpT1_(5678, 7);
 __ZN10emscripten8functionIiJiiiEJEEEvPKcPFT_DpT0_EDpT1_(5691, 11);
 __ZN10emscripten8functionIiJiiEJEEEvPKcPFT_DpT0_EDpT1_(5710, 8);
 __ZN10emscripten8functionIiJiiEJEEEvPKcPFT_DpT0_EDpT1_(5720, 9);
 __ZN10emscripten8functionIiJiEJEEEvPKcPFT_DpT0_EDpT1_(5733, 8);
 __ZN10emscripten8functionIiJiEJEEEvPKcPFT_DpT0_EDpT1_(5746, 9);
 __ZN10emscripten8functionIvJiEJEEEvPKcPFT_DpT0_EDpT1_(5765, 13);
 __ZN10emscripten8functionIiJEJEEEvPKcPFT_DpT0_EDpT1_(5777, 1);
 __ZN10emscripten8functionIvJidEJEEEvPKcPFT_DpT0_EDpT1_(5789, 1);
 __ZN10emscripten8functionIdJiEJEEEvPKcPFT_DpT0_EDpT1_(5812, 1);
 __ZN10emscripten8functionIvJidEJEEEvPKcPFT_DpT0_EDpT1_(5835, 2);
 __ZN10emscripten8functionIdJiEJEEEvPKcPFT_DpT0_EDpT1_(5857, 2);
 __ZN10emscripten8functionIvJiiEJEEEvPKcPFT_DpT0_EDpT1_(5879, 1);
 __ZN10emscripten8functionIiJiEJEEEvPKcPFT_DpT0_EDpT1_(5896, 10);
 __ZN10emscripten8functionIvJiiEJEEEvPKcPFT_DpT0_EDpT1_(5913, 2);
 __ZN10emscripten8functionIiJiEJEEEvPKcPFT_DpT0_EDpT1_(5926, 11);
 __ZN10emscripten8functionIvJiiEJEEEvPKcPFT_DpT0_EDpT1_(5939, 3);
 __ZN10emscripten8functionIiJiEJEEEvPKcPFT_DpT0_EDpT1_(5963, 12);
 __ZN10emscripten8functionIvJifEJEEEvPKcPFT_DpT0_EDpT1_(5987, 3);
 __ZN10emscripten8functionIdJiEJEEEvPKcPFT_DpT0_EDpT1_(6e3, 3);
 __ZN10emscripten8functionIvJiiEJEEEvPKcPFT_DpT0_EDpT1_(6013, 4);
 __ZN10emscripten8functionIiJiEJEEEvPKcPFT_DpT0_EDpT1_(6031, 13);
 __ZN10emscripten8functionIvJiiEJEEEvPKcPFT_DpT0_EDpT1_(6049, 5);
 __ZN10emscripten8functionIiJiEJEEEvPKcPFT_DpT0_EDpT1_(6065, 14);
 __ZN10emscripten8functionIvJiiEJEEEvPKcPFT_DpT0_EDpT1_(6081, 6);
 __ZN10emscripten8functionIiJiEJEEEvPKcPFT_DpT0_EDpT1_(6098, 15);
 __ZN10emscripten8constantIiEEvPKcRKT_(6115, 1684);
 __ZN10emscripten8constantIiEEvPKcRKT_(6144, 1688);
 __ZN10emscripten8constantIiEEvPKcRKT_(6172, 1692);
 HEAP32[$ref$tmp >> 2] = 0;
 __ZN10emscripten8constantIiEEvPKcRKT_(6205, $ref$tmp);
 HEAP32[$ref$tmp >> 2] = 1;
 __ZN10emscripten8constantIiEEvPKcRKT_(6222, $ref$tmp);
 HEAP32[$ref$tmp >> 2] = 0;
 __ZN10emscripten8constantIiEEvPKcRKT_(6238, $ref$tmp);
 HEAP32[$ref$tmp >> 2] = 0;
 __ZN10emscripten8constantIiEEvPKcRKT_(6260, $ref$tmp);
 HEAP32[$ref$tmp >> 2] = 1;
 __ZN10emscripten8constantIiEEvPKcRKT_(6285, $ref$tmp);
 HEAP32[$ref$tmp >> 2] = 1;
 __ZN10emscripten8constantIiEEvPKcRKT_(6310, $ref$tmp);
 HEAP32[$ref$tmp >> 2] = 100;
 __ZN10emscripten8constantIiEEvPKcRKT_(6335, $ref$tmp);
 HEAP32[$ref$tmp >> 2] = 0;
 __ZN10emscripten8constantIiEEvPKcRKT_(6362, $ref$tmp);
 HEAP32[$ref$tmp >> 2] = 1;
 __ZN10emscripten8constantIiEEvPKcRKT_(6388, $ref$tmp);
 HEAP32[$ref$tmp >> 2] = 0;
 __ZN10emscripten8constantIiEEvPKcRKT_(6414, $ref$tmp);
 HEAP32[$ref$tmp >> 2] = 0;
 __ZN10emscripten8constantIiEEvPKcRKT_(6441, $ref$tmp);
 HEAP32[$ref$tmp >> 2] = 1;
 __ZN10emscripten8constantIiEEvPKcRKT_(6468, $ref$tmp);
 HEAP32[$ref$tmp >> 2] = 2;
 __ZN10emscripten8constantIiEEvPKcRKT_(6494, $ref$tmp);
 HEAP32[$ref$tmp >> 2] = 3;
 __ZN10emscripten8constantIiEEvPKcRKT_(6519, $ref$tmp);
 HEAP32[$ref$tmp >> 2] = 4;
 __ZN10emscripten8constantIiEEvPKcRKT_(6557, $ref$tmp);
 HEAP32[$ref$tmp >> 2] = 0;
 __ZN10emscripten8constantIiEEvPKcRKT_(6594, $ref$tmp);
 HEAP32[$ref$tmp >> 2] = 0;
 __ZN10emscripten8constantIiEEvPKcRKT_(6628, $ref$tmp);
 HEAP32[$ref$tmp >> 2] = 1;
 __ZN10emscripten8constantIiEEvPKcRKT_(6652, $ref$tmp);
 HEAP32[$ref$tmp >> 2] = 2;
 __ZN10emscripten8constantIiEEvPKcRKT_(6678, $ref$tmp);
 HEAP32[$ref$tmp >> 2] = 2;
 __ZN10emscripten8constantIiEEvPKcRKT_(6705, $ref$tmp);
 HEAP32[$ref$tmp >> 2] = 5;
 __ZN10emscripten8constantIiEEvPKcRKT_(6739, $ref$tmp);
 HEAPF64[$ref$tmp >> 3] = .5;
 __ZN10emscripten8constantIdEEvPKcRKT_(6757, $ref$tmp);
 HEAP32[$ref$tmp >> 2] = 0;
 __ZN10emscripten8constantIiEEvPKcRKT_(6778, $ref$tmp);
 HEAP32[$ref$tmp >> 2] = 1;
 __ZN10emscripten8constantIiEEvPKcRKT_(6797, $ref$tmp);
 HEAP32[$ref$tmp >> 2] = 2;
 __ZN10emscripten8constantIiEEvPKcRKT_(6815, $ref$tmp);
 HEAP32[$ref$tmp >> 2] = 3;
 __ZN10emscripten8constantIiEEvPKcRKT_(6833, $ref$tmp);
 HEAP32[$ref$tmp >> 2] = 4;
 __ZN10emscripten8constantIiEEvPKcRKT_(6852, $ref$tmp);
 HEAP32[$ref$tmp >> 2] = 3;
 __ZN10emscripten8constantIiEEvPKcRKT_(6874, $ref$tmp);
 HEAP32[$ref$tmp >> 2] = 515;
 __ZN10emscripten8constantIiEEvPKcRKT_(6893, $ref$tmp);
 HEAP32[$ref$tmp >> 2] = 259;
 __ZN10emscripten8constantIiEEvPKcRKT_(6922, $ref$tmp);
 HEAP32[$ref$tmp >> 2] = 4;
 __ZN10emscripten8constantIiEEvPKcRKT_(6950, $ref$tmp);
 HEAP32[$ref$tmp >> 2] = 772;
 __ZN10emscripten8constantIiEEvPKcRKT_(6969, $ref$tmp);
 HEAP32[$ref$tmp >> 2] = 1028;
 __ZN10emscripten8constantIiEEvPKcRKT_(6999, $ref$tmp);
 HEAP32[$ref$tmp >> 2] = 0;
 __ZN10emscripten8constantIiEEvPKcRKT_(7029, $ref$tmp);
 HEAP32[$ref$tmp >> 2] = 1;
 __ZN10emscripten8constantIiEEvPKcRKT_(7060, $ref$tmp);
 HEAP32[$ref$tmp >> 2] = 2;
 __ZN10emscripten8constantIiEEvPKcRKT_(7096, $ref$tmp);
 HEAP32[$ref$tmp >> 2] = 3;
 __ZN10emscripten8constantIiEEvPKcRKT_(7130, $ref$tmp);
 HEAP32[$ref$tmp >> 2] = 0;
 __ZN10emscripten8constantIiEEvPKcRKT_(7168, $ref$tmp);
 HEAP32[$ref$tmp >> 2] = 1;
 __ZN10emscripten8constantIiEEvPKcRKT_(7201, $ref$tmp);
 HEAP32[$ref$tmp >> 2] = 2;
 __ZN10emscripten8constantIiEEvPKcRKT_(7248, $ref$tmp);
 HEAP32[$ref$tmp >> 2] = 3;
 __ZN10emscripten8constantIiEEvPKcRKT_(7290, $ref$tmp);
 HEAP32[$ref$tmp >> 2] = 4;
 __ZN10emscripten8constantIiEEvPKcRKT_(7333, $ref$tmp);
 HEAP32[$ref$tmp >> 2] = 5;
 __ZN10emscripten8constantIiEEvPKcRKT_(7385, $ref$tmp);
 HEAP32[$ref$tmp >> 2] = 6;
 __ZN10emscripten8constantIiEEvPKcRKT_(7436, $ref$tmp);
 HEAP32[$ref$tmp >> 2] = 7;
 __ZN10emscripten8constantIiEEvPKcRKT_(7481, $ref$tmp);
 HEAP32[$ref$tmp >> 2] = 8;
 __ZN10emscripten8constantIiEEvPKcRKT_(7520, $ref$tmp);
 HEAP32[$ref$tmp >> 2] = 9;
 __ZN10emscripten8constantIiEEvPKcRKT_(7565, $ref$tmp);
 STACKTOP = sp;
 return;
}

function __ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($this, $info, $current_ptr, $path_below, $use_strcmp) {
 $this = $this | 0;
 $info = $info | 0;
 $current_ptr = $current_ptr | 0;
 $path_below = $path_below | 0;
 $use_strcmp = $use_strcmp | 0;
 var $15 = 0, $16 = 0, $17 = 0, $__base_count = 0, $__flags = 0, $add$ptr = 0, $add$ptr64 = 0, $arraydecay = 0, $does_dst_type_point_to_our_static_type$0$off0 = 0, $does_dst_type_point_to_our_static_type$1$off0 = 0, $dst_ptr_not_leading_to_static_ptr = 0, $found_any_static_type = 0, $found_our_static_ptr = 0, $incdec$ptr69 = 0, $is_dst_type_derived_from_static_type = 0, $is_dst_type_derived_from_static_type13$0$off0 = 0, $is_dst_type_derived_from_static_type13$1$off0 = 0, $is_dst_type_derived_from_static_type13$2$off0 = 0, $number_to_dst_ptr = 0, $number_to_static_ptr = 0, $p$0 = 0, $p65$0 = 0, $p65$1 = 0, $p65$2 = 0, $path_dst_ptr_to_static_ptr45 = 0, $path_dynamic_ptr_to_dst_ptr = 0, $search_done48 = 0, label = 0;
 L1 : do if (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($this, HEAP32[$info + 8 >> 2] | 0, $use_strcmp) | 0) __ZNK10__cxxabiv117__class_type_info29process_static_type_below_dstEPNS_19__dynamic_cast_infoEPKvi(0, $info, $current_ptr, $path_below); else {
  $__base_count = $this + 12 | 0;
  $path_dst_ptr_to_static_ptr45 = $info + 24 | 0;
  $number_to_static_ptr = $info + 36 | 0;
  $search_done48 = $info + 54 | 0;
  $__flags = $this + 8 | 0;
  $arraydecay = $this + 16 | 0;
  if (!(__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($this, HEAP32[$info >> 2] | 0, $use_strcmp) | 0)) {
   $16 = HEAP32[$__base_count >> 2] | 0;
   $add$ptr64 = $this + 16 + ($16 << 3) | 0;
   __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($arraydecay, $info, $current_ptr, $path_below, $use_strcmp);
   $incdec$ptr69 = $this + 24 | 0;
   if (($16 | 0) <= 1) break;
   $17 = HEAP32[$__flags >> 2] | 0;
   if (!($17 & 2)) if ((HEAP32[$number_to_static_ptr >> 2] | 0) == 1) $p65$0 = $incdec$ptr69; else {
    if (!($17 & 1)) {
     $p65$2 = $incdec$ptr69;
     while (1) {
      if (HEAP8[$search_done48 >> 0] | 0) break L1;
      if ((HEAP32[$number_to_static_ptr >> 2] | 0) == 1) break L1;
      __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($p65$2, $info, $current_ptr, $path_below, $use_strcmp);
      $p65$2 = $p65$2 + 8 | 0;
      if ($p65$2 >>> 0 >= $add$ptr64 >>> 0) break L1;
     }
    } else $p65$1 = $incdec$ptr69;
    while (1) {
     if (HEAP8[$search_done48 >> 0] | 0) break L1;
     if ((HEAP32[$number_to_static_ptr >> 2] | 0) == 1) if ((HEAP32[$path_dst_ptr_to_static_ptr45 >> 2] | 0) == 1) break L1;
     __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($p65$1, $info, $current_ptr, $path_below, $use_strcmp);
     $p65$1 = $p65$1 + 8 | 0;
     if ($p65$1 >>> 0 >= $add$ptr64 >>> 0) break L1;
    }
   } else $p65$0 = $incdec$ptr69;
   while (1) {
    if (HEAP8[$search_done48 >> 0] | 0) break L1;
    __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($p65$0, $info, $current_ptr, $path_below, $use_strcmp);
    $p65$0 = $p65$0 + 8 | 0;
    if ($p65$0 >>> 0 >= $add$ptr64 >>> 0) break L1;
   }
  }
  $path_dynamic_ptr_to_dst_ptr = $info + 32 | 0;
  if ((HEAP32[$info + 16 >> 2] | 0) != ($current_ptr | 0)) {
   $dst_ptr_not_leading_to_static_ptr = $info + 20 | 0;
   if ((HEAP32[$dst_ptr_not_leading_to_static_ptr >> 2] | 0) != ($current_ptr | 0)) {
    HEAP32[$path_dynamic_ptr_to_dst_ptr >> 2] = $path_below;
    $is_dst_type_derived_from_static_type = $info + 44 | 0;
    if ((HEAP32[$is_dst_type_derived_from_static_type >> 2] | 0) == 4) break;
    $add$ptr = $this + 16 + (HEAP32[$__base_count >> 2] << 3) | 0;
    $found_our_static_ptr = $info + 52 | 0;
    $found_any_static_type = $info + 53 | 0;
    $does_dst_type_point_to_our_static_type$0$off0 = 0;
    $is_dst_type_derived_from_static_type13$0$off0 = 0;
    $p$0 = $arraydecay;
    L29 : while (1) {
     if ($p$0 >>> 0 >= $add$ptr >>> 0) {
      $is_dst_type_derived_from_static_type13$2$off0 = $is_dst_type_derived_from_static_type13$0$off0;
      label = 18;
      break;
     }
     HEAP8[$found_our_static_ptr >> 0] = 0;
     HEAP8[$found_any_static_type >> 0] = 0;
     __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($p$0, $info, $current_ptr, $current_ptr, 1, $use_strcmp);
     if (HEAP8[$search_done48 >> 0] | 0) {
      $is_dst_type_derived_from_static_type13$2$off0 = $is_dst_type_derived_from_static_type13$0$off0;
      label = 18;
      break;
     }
     do if (!(HEAP8[$found_any_static_type >> 0] | 0)) {
      $does_dst_type_point_to_our_static_type$1$off0 = $does_dst_type_point_to_our_static_type$0$off0;
      $is_dst_type_derived_from_static_type13$1$off0 = $is_dst_type_derived_from_static_type13$0$off0;
     } else {
      if (!(HEAP8[$found_our_static_ptr >> 0] | 0)) if (!(HEAP32[$__flags >> 2] & 1)) {
       $is_dst_type_derived_from_static_type13$2$off0 = 1;
       label = 18;
       break L29;
      } else {
       $does_dst_type_point_to_our_static_type$1$off0 = $does_dst_type_point_to_our_static_type$0$off0;
       $is_dst_type_derived_from_static_type13$1$off0 = 1;
       break;
      }
      if ((HEAP32[$path_dst_ptr_to_static_ptr45 >> 2] | 0) == 1) {
       label = 23;
       break L29;
      }
      if (!(HEAP32[$__flags >> 2] & 2)) {
       label = 23;
       break L29;
      } else {
       $does_dst_type_point_to_our_static_type$1$off0 = 1;
       $is_dst_type_derived_from_static_type13$1$off0 = 1;
      }
     } while (0);
     $does_dst_type_point_to_our_static_type$0$off0 = $does_dst_type_point_to_our_static_type$1$off0;
     $is_dst_type_derived_from_static_type13$0$off0 = $is_dst_type_derived_from_static_type13$1$off0;
     $p$0 = $p$0 + 8 | 0;
    }
    do if ((label | 0) == 18) {
     if (!$does_dst_type_point_to_our_static_type$0$off0) {
      HEAP32[$dst_ptr_not_leading_to_static_ptr >> 2] = $current_ptr;
      $number_to_dst_ptr = $info + 40 | 0;
      HEAP32[$number_to_dst_ptr >> 2] = (HEAP32[$number_to_dst_ptr >> 2] | 0) + 1;
      if ((HEAP32[$number_to_static_ptr >> 2] | 0) == 1) if ((HEAP32[$path_dst_ptr_to_static_ptr45 >> 2] | 0) == 2) {
       HEAP8[$search_done48 >> 0] = 1;
       if ($is_dst_type_derived_from_static_type13$2$off0) {
        label = 23;
        break;
       } else {
        $15 = 4;
        break;
       }
      }
     }
     if ($is_dst_type_derived_from_static_type13$2$off0) label = 23; else $15 = 4;
    } while (0);
    if ((label | 0) == 23) $15 = 3;
    HEAP32[$is_dst_type_derived_from_static_type >> 2] = $15;
    break;
   }
  }
  if (($path_below | 0) == 1) HEAP32[$path_dynamic_ptr_to_dst_ptr >> 2] = 1;
 } while (0);
 return;
}

function __ZN10__cxxabiv112_GLOBAL__N_120parse_template_paramINS0_2DbEEEPKcS4_S4_RT_($first, $last, $db) {
 $first = $first | 0;
 $last = $last | 0;
 $db = $db | 0;
 var $1 = 0, $11 = 0, $14 = 0, $16 = 0, $18 = 0, $19 = 0, $21 = 0, $22 = 0, $25 = 0, $3 = 0, $4 = 0, $7 = 0, $8 = 0, $__begin$sroa$0$0 = 0, $__begin60$sroa$0$0 = 0, $__end_$i57 = 0, $__end_$i61 = 0, $__end_$i69 = 0, $__end_$i87 = 0, $__first$addr$0$i$i = 0, $__first_$i$i$i$i62 = 0, $__first_$i$i$i$i88 = 0, $__p$0$i$i = 0, $__p$0$ph$i$i = 0, $add$ptr21 = 0, $agg$tmp = 0, $and$i$i$i$i = 0, $call$i$i$i = 0, $fix_forward_references = 0, $inc = 0, $incdec$ptr41 = 0, $isdigittmp = 0, $isdigittmp48 = 0, $ref$tmp$i$i = 0, $ref$tmp78 = 0, $retval$1 = 0, $sub$0 = 0, $sub$ptr$rhs$cast = 0, $sub$ptr$sub$i$i$i$i = 0, $t28$0 = 0, $template_param = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(64);
 $ref$tmp$i$i = sp + 40 | 0;
 $ref$tmp78 = sp;
 $agg$tmp = sp + 24 | 0;
 $sub$ptr$rhs$cast = $first;
 L1 : do if (($last - $sub$ptr$rhs$cast | 0) > 1) if ((HEAP8[$first >> 0] | 0) == 84) {
  $1 = HEAP8[$first + 1 >> 0] | 0;
  $fix_forward_references = $db + 62 | 0;
  $template_param = $db + 32 | 0;
  if ($1 << 24 >> 24 == 95) {
   $3 = HEAP32[$db + 36 >> 2] | 0;
   if ((HEAP32[$template_param >> 2] | 0) == ($3 | 0)) {
    $retval$1 = $first;
    break;
   }
   $4 = HEAP32[$3 + -16 >> 2] | 0;
   $add$ptr21 = $first + 2 | 0;
   if (($4 | 0) == (HEAP32[$3 + -12 >> 2] | 0)) {
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj3EEERAT__Kc($ref$tmp$i$i);
    $__end_$i69 = $db + 4 | 0;
    $11 = HEAP32[$__end_$i69 >> 2] | 0;
    if ($11 >>> 0 < (HEAP32[$db + 8 >> 2] | 0) >>> 0) {
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($11, $ref$tmp$i$i);
     HEAP32[$__end_$i69 >> 2] = (HEAP32[$__end_$i69 >> 2] | 0) + 24;
    } else __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIS3_EEvOT_($db, $ref$tmp$i$i);
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($ref$tmp$i$i);
    HEAP8[$fix_forward_references >> 0] = 1;
    $retval$1 = $add$ptr21;
    break;
   }
   $7 = HEAP32[$4 + 4 >> 2] | 0;
   $__end_$i61 = $db + 4 | 0;
   $__first_$i$i$i$i62 = $db + 8 | 0;
   $__begin$sroa$0$0 = HEAP32[$4 >> 2] | 0;
   while (1) {
    if (($__begin$sroa$0$0 | 0) == ($7 | 0)) {
     $retval$1 = $add$ptr21;
     break L1;
    }
    $8 = HEAP32[$__end_$i61 >> 2] | 0;
    if (($8 | 0) == (HEAP32[$__first_$i$i$i$i62 >> 2] | 0)) __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIRKS3_EEvOT_($db, $__begin$sroa$0$0); else {
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ERKS1_($8, $__begin$sroa$0$0);
     HEAP32[$__end_$i61 >> 2] = (HEAP32[$__end_$i61 >> 2] | 0) + 24;
    }
    $__begin$sroa$0$0 = $__begin$sroa$0$0 + 24 | 0;
   }
  }
  $isdigittmp = ($1 << 24 >> 24) + -48 | 0;
  if ($isdigittmp >>> 0 < 10) {
   $sub$0 = $isdigittmp;
   $t28$0 = $first + 2 | 0;
   while (1) {
    $incdec$ptr41 = $t28$0 + 1 | 0;
    if (($t28$0 | 0) == ($last | 0)) {
     $retval$1 = $first;
     break L1;
    }
    $14 = HEAP8[$t28$0 >> 0] | 0;
    $isdigittmp48 = ($14 << 24 >> 24) + -48 | 0;
    if ($isdigittmp48 >>> 0 >= 10) break;
    $sub$0 = $isdigittmp48 + ($sub$0 * 10 | 0) | 0;
    $t28$0 = $incdec$ptr41;
   }
   if ($14 << 24 >> 24 == 95) {
    $16 = HEAP32[$db + 36 >> 2] | 0;
    if ((HEAP32[$template_param >> 2] | 0) == ($16 | 0)) $retval$1 = $first; else {
     $inc = $sub$0 + 1 | 0;
     $18 = HEAP32[$16 + -16 >> 2] | 0;
     $19 = $18;
     if ($inc >>> 0 < (HEAP32[$16 + -12 >> 2] | 0) - $18 >> 4 >>> 0) {
      $21 = HEAP32[$19 + ($inc << 4) + 4 >> 2] | 0;
      $__end_$i87 = $db + 4 | 0;
      $__first_$i$i$i$i88 = $db + 8 | 0;
      $__begin60$sroa$0$0 = HEAP32[$19 + ($inc << 4) >> 2] | 0;
      while (1) {
       if (($__begin60$sroa$0$0 | 0) == ($21 | 0)) {
        $retval$1 = $incdec$ptr41;
        break L1;
       }
       $22 = HEAP32[$__end_$i87 >> 2] | 0;
       if (($22 | 0) == (HEAP32[$__first_$i$i$i$i88 >> 2] | 0)) __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIRKS3_EEvOT_($db, $__begin60$sroa$0$0); else {
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ERKS1_($22, $__begin60$sroa$0$0);
        HEAP32[$__end_$i87 >> 2] = (HEAP32[$__end_$i87 >> 2] | 0) + 24;
       }
       $__begin60$sroa$0$0 = $__begin60$sroa$0$0 + 24 | 0;
      }
     };
     HEAP32[$agg$tmp >> 2] = 0;
     HEAP32[$agg$tmp + 4 >> 2] = 0;
     HEAP32[$agg$tmp + 8 >> 2] = 0;
     $sub$ptr$sub$i$i$i$i = $incdec$ptr41 - $sub$ptr$rhs$cast | 0;
     if ($sub$ptr$sub$i$i$i$i >>> 0 > 4294967279) __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($agg$tmp);
     if ($sub$ptr$sub$i$i$i$i >>> 0 < 11) {
      HEAP8[$agg$tmp + 11 >> 0] = $sub$ptr$sub$i$i$i$i;
      $__p$0$ph$i$i = $agg$tmp;
     } else {
      $and$i$i$i$i = $sub$ptr$sub$i$i$i$i + 16 & -16;
      $call$i$i$i = __ZN10__cxxabiv112_GLOBAL__N_112malloc_allocIcE8allocateEj($and$i$i$i$i) | 0;
      HEAP32[$agg$tmp >> 2] = $call$i$i$i;
      HEAP32[$agg$tmp + 8 >> 2] = $and$i$i$i$i | -2147483648;
      HEAP32[$agg$tmp + 4 >> 2] = $sub$ptr$sub$i$i$i$i;
      $__p$0$ph$i$i = $call$i$i$i;
     }
     $__first$addr$0$i$i = $first;
     $__p$0$i$i = $__p$0$ph$i$i;
     while (1) {
      if (($__first$addr$0$i$i | 0) == ($incdec$ptr41 | 0)) break;
      __ZNSt3__211char_traitsIcE6assignERcRKc($__p$0$i$i, $__first$addr$0$i$i);
      $__first$addr$0$i$i = $__first$addr$0$i$i + 1 | 0;
      $__p$0$i$i = $__p$0$i$i + 1 | 0;
     }
     HEAP8[$ref$tmp$i$i >> 0] = 0;
     __ZNSt3__211char_traitsIcE6assignERcRKc($__p$0$ph$i$i + $sub$ptr$sub$i$i$i$i | 0, $ref$tmp$i$i);
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ENSt3__212basic_stringIcNS2_11char_traitsIcEENS0_12malloc_allocIcEEEE($ref$tmp78, $agg$tmp);
     $__end_$i57 = $db + 4 | 0;
     $25 = HEAP32[$__end_$i57 >> 2] | 0;
     if ($25 >>> 0 < (HEAP32[$db + 8 >> 2] | 0) >>> 0) {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($25, $ref$tmp78);
      HEAP32[$__end_$i57 >> 2] = (HEAP32[$__end_$i57 >> 2] | 0) + 24;
     } else __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIS3_EEvOT_($db, $ref$tmp78);
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($ref$tmp78);
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($agg$tmp);
     HEAP8[$fix_forward_references >> 0] = 1;
     $retval$1 = $incdec$ptr41;
    }
   } else $retval$1 = $first;
  } else $retval$1 = $first;
 } else $retval$1 = $first; else $retval$1 = $first; while (0);
 STACKTOP = sp;
 return $retval$1 | 0;
}

function _try_realloc_chunk($p, $nb) {
 $p = $p | 0;
 $nb = $nb | 0;
 var $0 = 0, $1 = 0, $11 = 0, $12 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $30 = 0, $31 = 0, $32 = 0, $R$1 = 0, $R$3 = 0, $RP$1 = 0, $add = 0, $add$ptr = 0, $add$ptr17 = 0, $add$ptr303 = 0, $add$ptr41 = 0, $add$ptr66 = 0, $add$ptr67 = 0, $add105 = 0, $add58 = 0, $and = 0, $and2 = 0, $and294 = 0, $and69 = 0, $arrayidx = 0, $arrayidx179 = 0, $arrayidx186 = 0, $arrayidx190 = 0, $arrayidx206 = 0, $bk164 = 0, $child = 0, $child249 = 0, $fd138 = 0, $fd148$pre$phiZ2D = 0, $fd167 = 0, $head = 0, $head299 = 0, $head31 = 0, $head318 = 0, $head79 = 0, $head92 = 0, $newp$2 = 0, $shr = 0, $storemerge = 0, $storemerge1 = 0, $sub = 0, $sub110 = 0, $sub40 = 0, $sub62 = 0;
 $head = $p + 4 | 0;
 $0 = HEAP32[$head >> 2] | 0;
 $and = $0 & -8;
 $add$ptr = $p + $and | 0;
 $1 = HEAP32[4302] | 0;
 $and2 = $0 & 3;
 if (!(($and2 | 0) != 1 & $p >>> 0 >= $1 >>> 0 & $p >>> 0 < $add$ptr >>> 0)) _abort();
 $2 = HEAP32[$add$ptr + 4 >> 2] | 0;
 if (!($2 & 1)) _abort();
 if (!$and2) {
  if ($nb >>> 0 < 256) {
   $newp$2 = 0;
   return $newp$2 | 0;
  }
  if ($and >>> 0 >= ($nb + 4 | 0) >>> 0) if (($and - $nb | 0) >>> 0 <= HEAP32[4418] << 1 >>> 0) {
   $newp$2 = $p;
   return $newp$2 | 0;
  }
  $newp$2 = 0;
  return $newp$2 | 0;
 }
 if ($and >>> 0 >= $nb >>> 0) {
  $sub = $and - $nb | 0;
  if ($sub >>> 0 <= 15) {
   $newp$2 = $p;
   return $newp$2 | 0;
  }
  $add$ptr17 = $p + $nb | 0;
  HEAP32[$head >> 2] = $0 & 1 | $nb | 2;
  HEAP32[$add$ptr17 + 4 >> 2] = $sub | 3;
  $head31 = $add$ptr17 + $sub + 4 | 0;
  HEAP32[$head31 >> 2] = HEAP32[$head31 >> 2] | 1;
  _dispose_chunk($add$ptr17, $sub);
  $newp$2 = $p;
  return $newp$2 | 0;
 }
 if (($add$ptr | 0) == (HEAP32[4304] | 0)) {
  $add = (HEAP32[4301] | 0) + $and | 0;
  $sub40 = $add - $nb | 0;
  $add$ptr41 = $p + $nb | 0;
  if ($add >>> 0 <= $nb >>> 0) {
   $newp$2 = 0;
   return $newp$2 | 0;
  }
  HEAP32[$head >> 2] = $0 & 1 | $nb | 2;
  HEAP32[$add$ptr41 + 4 >> 2] = $sub40 | 1;
  HEAP32[4304] = $add$ptr41;
  HEAP32[4301] = $sub40;
  $newp$2 = $p;
  return $newp$2 | 0;
 }
 if (($add$ptr | 0) == (HEAP32[4303] | 0)) {
  $add58 = (HEAP32[4300] | 0) + $and | 0;
  if ($add58 >>> 0 < $nb >>> 0) {
   $newp$2 = 0;
   return $newp$2 | 0;
  }
  $sub62 = $add58 - $nb | 0;
  $and69 = $0 & 1;
  if ($sub62 >>> 0 > 15) {
   $add$ptr66 = $p + $nb | 0;
   $add$ptr67 = $add$ptr66 + $sub62 | 0;
   HEAP32[$head >> 2] = $and69 | $nb | 2;
   HEAP32[$add$ptr66 + 4 >> 2] = $sub62 | 1;
   HEAP32[$add$ptr67 >> 2] = $sub62;
   $head79 = $add$ptr67 + 4 | 0;
   HEAP32[$head79 >> 2] = HEAP32[$head79 >> 2] & -2;
   $storemerge = $add$ptr66;
   $storemerge1 = $sub62;
  } else {
   HEAP32[$head >> 2] = $and69 | $add58 | 2;
   $head92 = $p + $add58 + 4 | 0;
   HEAP32[$head92 >> 2] = HEAP32[$head92 >> 2] | 1;
   $storemerge = 0;
   $storemerge1 = 0;
  }
  HEAP32[4300] = $storemerge1;
  HEAP32[4303] = $storemerge;
  $newp$2 = $p;
  return $newp$2 | 0;
 }
 if ($2 & 2 | 0) {
  $newp$2 = 0;
  return $newp$2 | 0;
 }
 $add105 = ($2 & -8) + $and | 0;
 if ($add105 >>> 0 < $nb >>> 0) {
  $newp$2 = 0;
  return $newp$2 | 0;
 }
 $sub110 = $add105 - $nb | 0;
 $shr = $2 >>> 3;
 L49 : do if ($2 >>> 0 < 256) {
  $11 = HEAP32[$add$ptr + 8 >> 2] | 0;
  $12 = HEAP32[$add$ptr + 12 >> 2] | 0;
  $arrayidx = 17232 + ($shr << 1 << 2) | 0;
  if (($11 | 0) != ($arrayidx | 0)) {
   if ($11 >>> 0 < $1 >>> 0) _abort();
   if ((HEAP32[$11 + 12 >> 2] | 0) != ($add$ptr | 0)) _abort();
  }
  if (($12 | 0) == ($11 | 0)) {
   HEAP32[4298] = HEAP32[4298] & ~(1 << $shr);
   break;
  }
  if (($12 | 0) == ($arrayidx | 0)) $fd148$pre$phiZ2D = $12 + 8 | 0; else {
   if ($12 >>> 0 < $1 >>> 0) _abort();
   $fd138 = $12 + 8 | 0;
   if ((HEAP32[$fd138 >> 2] | 0) == ($add$ptr | 0)) $fd148$pre$phiZ2D = $fd138; else _abort();
  }
  HEAP32[$11 + 12 >> 2] = $12;
  HEAP32[$fd148$pre$phiZ2D >> 2] = $11;
 } else {
  $16 = HEAP32[$add$ptr + 24 >> 2] | 0;
  $17 = HEAP32[$add$ptr + 12 >> 2] | 0;
  do if (($17 | 0) == ($add$ptr | 0)) {
   $child = $add$ptr + 16 | 0;
   $arrayidx179 = $child + 4 | 0;
   $21 = HEAP32[$arrayidx179 >> 2] | 0;
   if (!$21) {
    $22 = HEAP32[$child >> 2] | 0;
    if (!$22) {
     $R$3 = 0;
     break;
    } else {
     $R$1 = $22;
     $RP$1 = $child;
    }
   } else {
    $R$1 = $21;
    $RP$1 = $arrayidx179;
   }
   while (1) {
    $arrayidx186 = $R$1 + 20 | 0;
    $23 = HEAP32[$arrayidx186 >> 2] | 0;
    if ($23 | 0) {
     $R$1 = $23;
     $RP$1 = $arrayidx186;
     continue;
    }
    $arrayidx190 = $R$1 + 16 | 0;
    $24 = HEAP32[$arrayidx190 >> 2] | 0;
    if (!$24) break; else {
     $R$1 = $24;
     $RP$1 = $arrayidx190;
    }
   }
   if ($RP$1 >>> 0 < $1 >>> 0) _abort(); else {
    HEAP32[$RP$1 >> 2] = 0;
    $R$3 = $R$1;
    break;
   }
  } else {
   $18 = HEAP32[$add$ptr + 8 >> 2] | 0;
   if ($18 >>> 0 < $1 >>> 0) _abort();
   $bk164 = $18 + 12 | 0;
   if ((HEAP32[$bk164 >> 2] | 0) != ($add$ptr | 0)) _abort();
   $fd167 = $17 + 8 | 0;
   if ((HEAP32[$fd167 >> 2] | 0) == ($add$ptr | 0)) {
    HEAP32[$bk164 >> 2] = $17;
    HEAP32[$fd167 >> 2] = $18;
    $R$3 = $17;
    break;
   } else _abort();
  } while (0);
  if ($16 | 0) {
   $25 = HEAP32[$add$ptr + 28 >> 2] | 0;
   $arrayidx206 = 17496 + ($25 << 2) | 0;
   do if (($add$ptr | 0) == (HEAP32[$arrayidx206 >> 2] | 0)) {
    HEAP32[$arrayidx206 >> 2] = $R$3;
    if (!$R$3) {
     HEAP32[4299] = HEAP32[4299] & ~(1 << $25);
     break L49;
    }
   } else if ($16 >>> 0 < (HEAP32[4302] | 0) >>> 0) _abort(); else {
    HEAP32[$16 + 16 + (((HEAP32[$16 + 16 >> 2] | 0) != ($add$ptr | 0) & 1) << 2) >> 2] = $R$3;
    if (!$R$3) break L49; else break;
   } while (0);
   $30 = HEAP32[4302] | 0;
   if ($R$3 >>> 0 < $30 >>> 0) _abort();
   HEAP32[$R$3 + 24 >> 2] = $16;
   $child249 = $add$ptr + 16 | 0;
   $31 = HEAP32[$child249 >> 2] | 0;
   do if ($31 | 0) if ($31 >>> 0 < $30 >>> 0) _abort(); else {
    HEAP32[$R$3 + 16 >> 2] = $31;
    HEAP32[$31 + 24 >> 2] = $R$3;
    break;
   } while (0);
   $32 = HEAP32[$child249 + 4 >> 2] | 0;
   if ($32 | 0) if ($32 >>> 0 < (HEAP32[4302] | 0) >>> 0) _abort(); else {
    HEAP32[$R$3 + 20 >> 2] = $32;
    HEAP32[$32 + 24 >> 2] = $R$3;
    break;
   }
  }
 } while (0);
 $and294 = $0 & 1;
 if ($sub110 >>> 0 < 16) {
  HEAP32[$head >> 2] = $add105 | $and294 | 2;
  $head299 = $p + $add105 + 4 | 0;
  HEAP32[$head299 >> 2] = HEAP32[$head299 >> 2] | 1;
  $newp$2 = $p;
  return $newp$2 | 0;
 } else {
  $add$ptr303 = $p + $nb | 0;
  HEAP32[$head >> 2] = $and294 | $nb | 2;
  HEAP32[$add$ptr303 + 4 >> 2] = $sub110 | 3;
  $head318 = $add$ptr303 + $sub110 + 4 | 0;
  HEAP32[$head318 >> 2] = HEAP32[$head318 >> 2] | 1;
  _dispose_chunk($add$ptr303, $sub110);
  $newp$2 = $p;
  return $newp$2 | 0;
 }
 return 0;
}

function _QRM($a, $dv) {
 $a = $a | 0;
 $dv = $dv | 0;
 var $$pre = 0, $0 = 0, $11 = 0.0, $12 = 0.0, $15 = 0.0, $16 = 0.0, $19 = 0.0, $20 = 0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $29 = 0, $30 = 0.0, $31 = 0.0, $32 = 0, $33 = 0.0, $4 = 0, $6 = 0, $9 = 0, $add205 = 0, $add97 = 0, $arrayidx104 = 0, $arrayidx118 = 0, $arrayidx142 = 0, $arrayidx147 = 0, $arrayidx173 = 0, $arrayidx204 = 0, $arrayidx40 = 0, $arrayidx42 = 0, $arrayidx45 = 0, $arrayidx66 = 0, $arrayidx95 = 0, $arrayidx98 = 0, $c$0 = 0.0, $call = 0, $call185 = 0.0, $call189 = 0.0, $call23 = 0.0, $call27 = 0.0, $call51 = 0.0, $call70 = 0.0, $cmp211 = 0, $div = 0.0, $div78 = 0.0, $div82 = 0.0, $div87 = 0.0, $div91 = 0.0, $ev1 = 0, $h$0 = 0, $h$1 = 0, $i$0 = 0, $i$1 = 0, $i$2 = 0, $inc = 0, $iter$0 = 0, $j$0 = 0, $k$0 = 0, $k$1 = 0, $mul107 = 0.0, $mul140 = 0, $mul145 = 0, $mul48 = 0.0, $retval$0 = 0, $s$1 = 0.0, $sub = 0, $sub25 = 0, $sub99 = 0.0, $t$0 = 0.0, $v1$0 = 0, $v2$0 = 0, $x$0 = 0.0, $x$1 = 0.0, $y$0 = 0.0, $y$1 = 0.0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $ev1 = sp;
 $0 = HEAP32[$a + 4 >> 2] | 0;
 do if (($0 | 0) < 2 ? 1 : ($0 | 0) != (HEAP32[$a + 8 >> 2] | 0)) $retval$0 = -1; else if ((HEAP32[$dv + 4 >> 2] | 0) == ($0 | 0)) {
  $call = _arVecAlloc($0) | 0;
  if (!$call) $retval$0 = -1; else {
   $sub = $0 + -1 | 0;
   HEAP32[$ev1 + 4 >> 2] = $sub;
   HEAP32[$ev1 >> 2] = (HEAP32[$call >> 2] | 0) + 8;
   if ((_arVecTridiagonalize($a, $dv, $ev1) | 0) < 0) {
    _arVecFree($call) | 0;
    $retval$0 = -1;
    break;
   }
   $4 = HEAP32[$call >> 2] | 0;
   HEAPF64[$4 >> 3] = 0.0;
   $h$0 = $sub;
   L8 : while (1) {
    if (($h$0 | 0) > 0) $j$0 = $h$0; else {
     $k$1 = 0;
     break;
    }
    while (1) {
     if (($j$0 | 0) <= 0) break;
     $call23 = +Math_abs(+(+HEAPF64[$4 + ($j$0 << 3) >> 3]));
     $6 = HEAP32[$dv >> 2] | 0;
     $sub25 = $j$0 + -1 | 0;
     $call27 = +Math_abs(+(+HEAPF64[$6 + ($sub25 << 3) >> 3]));
     if ($call23 > ($call27 + +Math_abs(+(+HEAPF64[$6 + ($j$0 << 3) >> 3]))) * 1.0e-06) $j$0 = $sub25; else break;
    }
    $$pre = $h$0 + -1 | 0;
    if (($j$0 | 0) == ($h$0 | 0)) {
     $h$0 = $$pre;
     continue;
    }
    $arrayidx45 = $4 + ($h$0 << 3) | 0;
    $arrayidx66 = $4 + ($j$0 + 1 << 3) | 0;
    $iter$0 = 0;
    while (1) {
     $inc = $iter$0 + 1 | 0;
     if (($iter$0 | 0) > 99) {
      $h$0 = $$pre;
      continue L8;
     }
     $9 = HEAP32[$dv >> 2] | 0;
     $arrayidx40 = $9 + ($$pre << 3) | 0;
     $arrayidx42 = $9 + ($h$0 << 3) | 0;
     $11 = +HEAPF64[$arrayidx42 >> 3];
     $div = (+HEAPF64[$arrayidx40 >> 3] - $11) * .5;
     $12 = +HEAPF64[$arrayidx45 >> 3];
     $mul48 = $12 * $12;
     $call51 = +Math_sqrt(+($mul48 + $div * $div));
     $k$0 = $j$0;
     $x$0 = +HEAPF64[$9 + ($j$0 << 3) >> 3] - $11 + $mul48 / ($div + ($div < 0.0 ? -$call51 : $call51));
     $y$0 = +HEAPF64[$arrayidx66 >> 3];
     while (1) {
      if (($k$0 | 0) >= ($h$0 | 0)) break;
      $call70 = +Math_abs(+$x$0);
      if (!($call70 >= +Math_abs(+$y$0))) {
       $div87 = -$x$0 / $y$0;
       $div91 = 1.0 / +Math_sqrt(+($div87 * $div87 + 1.0));
       $c$0 = $div87 * $div91;
       $s$1 = $div91;
      } else {
       $div78 = -$y$0 / $x$0;
       if ($call70 > 1.0e-16) {
        $div82 = 1.0 / +Math_sqrt(+($div78 * $div78 + 1.0));
        $c$0 = $div82;
        $s$1 = $div78 * $div82;
       } else {
        $c$0 = 1.0;
        $s$1 = 0.0;
       }
      }
      $arrayidx95 = $9 + ($k$0 << 3) | 0;
      $15 = +HEAPF64[$arrayidx95 >> 3];
      $add97 = $k$0 + 1 | 0;
      $arrayidx98 = $9 + ($add97 << 3) | 0;
      $16 = +HEAPF64[$arrayidx98 >> 3];
      $sub99 = $15 - $16;
      $arrayidx104 = $4 + ($add97 << 3) | 0;
      $mul107 = $s$1 * ($s$1 * $sub99 + $c$0 * 2.0 * +HEAPF64[$arrayidx104 >> 3]);
      HEAPF64[$arrayidx95 >> 3] = $15 - $mul107;
      HEAPF64[$arrayidx98 >> 3] = $16 + $mul107;
      $arrayidx118 = $4 + ($k$0 << 3) | 0;
      if (($k$0 | 0) > ($j$0 | 0)) HEAPF64[$arrayidx118 >> 3] = $c$0 * +HEAPF64[$arrayidx118 >> 3] - $y$0 * $s$1;
      $19 = +HEAPF64[$arrayidx104 >> 3];
      HEAPF64[$arrayidx104 >> 3] = $19 + $s$1 * ($c$0 * $sub99 - $s$1 * 2.0 * $19);
      $mul140 = Math_imul($k$0, $0) | 0;
      $mul145 = Math_imul($add97, $0) | 0;
      $i$0 = 0;
      $x$1 = $x$0;
      $y$1 = $y$0;
      while (1) {
       if (($i$0 | 0) == ($0 | 0)) break;
       $20 = HEAP32[$a >> 2] | 0;
       $arrayidx142 = $20 + ($i$0 + $mul140 << 3) | 0;
       $21 = +HEAPF64[$arrayidx142 >> 3];
       $arrayidx147 = $20 + ($i$0 + $mul145 << 3) | 0;
       $22 = +HEAPF64[$arrayidx147 >> 3];
       HEAPF64[$arrayidx142 >> 3] = $c$0 * $21 - $s$1 * $22;
       HEAPF64[$arrayidx147 >> 3] = $s$1 * $21 + $c$0 * $22;
       $i$0 = $i$0 + 1 | 0;
       $x$1 = $21;
       $y$1 = $22;
      }
      if (($k$0 | 0) >= ($$pre | 0)) {
       $k$0 = $add97;
       $x$0 = $x$1;
       $y$0 = $y$1;
       continue;
      }
      $23 = +HEAPF64[$arrayidx104 >> 3];
      $arrayidx173 = $4 + ($k$0 + 2 << 3) | 0;
      $24 = +HEAPF64[$arrayidx173 >> 3];
      HEAPF64[$arrayidx173 >> 3] = $c$0 * $24;
      $k$0 = $add97;
      $x$0 = $23;
      $y$0 = -($s$1 * $24);
     }
     $call185 = +Math_abs(+(+HEAPF64[$arrayidx45 >> 3]));
     $call189 = +Math_abs(+(+HEAPF64[$arrayidx40 >> 3]));
     if ($call185 > ($call189 + +Math_abs(+(+HEAPF64[$arrayidx42 >> 3]))) * 1.0e-06) $iter$0 = $inc; else {
      $h$0 = $$pre;
      continue L8;
     }
    }
   }
   L35 : while (1) {
    if (($k$1 | 0) == ($sub | 0)) break;
    $29 = HEAP32[$dv >> 2] | 0;
    $arrayidx204 = $29 + ($k$1 << 3) | 0;
    $30 = +HEAPF64[$arrayidx204 >> 3];
    $add205 = $k$1 + 1 | 0;
    $h$1 = $k$1;
    $i$1 = $add205;
    $t$0 = $30;
    while (1) {
     if (($i$1 | 0) >= ($0 | 0)) break;
     $31 = +HEAPF64[$29 + ($i$1 << 3) >> 3];
     $cmp211 = $31 > $t$0;
     $h$1 = $cmp211 ? $i$1 : $h$1;
     $i$1 = $i$1 + 1 | 0;
     $t$0 = $cmp211 ? $31 : $t$0;
    }
    HEAPF64[$29 + ($h$1 << 3) >> 3] = $30;
    HEAPF64[$arrayidx204 >> 3] = $t$0;
    $32 = HEAP32[$a >> 2] | 0;
    $i$2 = 0;
    $v1$0 = $32 + ((Math_imul($h$1, $0) | 0) << 3) | 0;
    $v2$0 = $32 + ((Math_imul($k$1, $0) | 0) << 3) | 0;
    while (1) {
     if (($i$2 | 0) == ($0 | 0)) {
      $k$1 = $add205;
      continue L35;
     }
     $33 = +HEAPF64[$v1$0 >> 3];
     HEAPF64[$v1$0 >> 3] = +HEAPF64[$v2$0 >> 3];
     HEAPF64[$v2$0 >> 3] = $33;
     $i$2 = $i$2 + 1 | 0;
     $v1$0 = $v1$0 + 8 | 0;
     $v2$0 = $v2$0 + 8 | 0;
    }
   }
   _arVecFree($call) | 0;
   $retval$0 = 0;
  }
 } else $retval$0 = -1; while (0);
 STACKTOP = sp;
 return $retval$0 | 0;
}

function ___floatscan($f, $prec, $pok) {
 $f = $f | 0;
 $prec = $prec | 0;
 $pok = $pok | 0;
 var $0 = 0, $14 = 0, $17 = 0, $22 = 0, $3 = 0, $30 = 0, $7 = 0, $bits$0$ph = 0, $c$0 = 0, $c$1$lcssa = 0, $c$197 = 0, $c$2 = 0, $c$395 = 0, $c$4 = 0, $c$5 = 0, $c$6 = 0, $call189 = 0, $call215 = 0, $cond = 0, $cond135 = 0, $cond159 = 0, $cond231 = 0, $dec19293$in = 0, $emin$0$ph = 0, $i$0$lcssa = 0, $i$096 = 0, $i$1 = 0, $i$294 = 0, $i$3 = 0, $i$4 = 0, $inc = 0, $inc118 = 0, $retval$0 = 0.0, $rpos = 0, $shend = 0, $sign$0 = 0, $sub13 = 0, $tobool181 = 0, $tobool55 = 0, $tobool61 = 0, label = 0;
 switch ($prec | 0) {
 case 0:
  {
   $bits$0$ph = 24;
   $emin$0$ph = -149;
   label = 4;
   break;
  }
 case 1:
  {
   $bits$0$ph = 53;
   $emin$0$ph = -1074;
   label = 4;
   break;
  }
 case 2:
  {
   $bits$0$ph = 53;
   $emin$0$ph = -1074;
   label = 4;
   break;
  }
 default:
  $retval$0 = 0.0;
 }
 L4 : do if ((label | 0) == 4) {
  $rpos = $f + 4 | 0;
  $shend = $f + 100 | 0;
  do {
   $0 = HEAP32[$rpos >> 2] | 0;
   if ($0 >>> 0 < (HEAP32[$shend >> 2] | 0) >>> 0) {
    HEAP32[$rpos >> 2] = $0 + 1;
    $cond = HEAPU8[$0 >> 0] | 0;
   } else $cond = ___shgetc($f) | 0;
  } while ((_isspace($cond) | 0) != 0);
  L13 : do switch ($cond | 0) {
  case 43:
  case 45:
   {
    $sub13 = 1 - ((($cond | 0) == 45 & 1) << 1) | 0;
    $3 = HEAP32[$rpos >> 2] | 0;
    if ($3 >>> 0 < (HEAP32[$shend >> 2] | 0) >>> 0) {
     HEAP32[$rpos >> 2] = $3 + 1;
     $c$0 = HEAPU8[$3 >> 0] | 0;
     $sign$0 = $sub13;
     break L13;
    } else {
     $c$0 = ___shgetc($f) | 0;
     $sign$0 = $sub13;
     break L13;
    }
    break;
   }
  default:
   {
    $c$0 = $cond;
    $sign$0 = 1;
   }
  } while (0);
  $c$197 = $c$0;
  $i$096 = 0;
  while (1) {
   if (($c$197 | 32 | 0) != (HEAP8[14213 + $i$096 >> 0] | 0)) {
    $c$1$lcssa = $c$197;
    $i$0$lcssa = $i$096;
    break;
   }
   do if ($i$096 >>> 0 < 7) {
    $7 = HEAP32[$rpos >> 2] | 0;
    if ($7 >>> 0 < (HEAP32[$shend >> 2] | 0) >>> 0) {
     HEAP32[$rpos >> 2] = $7 + 1;
     $c$2 = HEAPU8[$7 >> 0] | 0;
     break;
    } else {
     $c$2 = ___shgetc($f) | 0;
     break;
    }
   } else $c$2 = $c$197; while (0);
   $inc = $i$096 + 1 | 0;
   if ($inc >>> 0 < 8) {
    $c$197 = $c$2;
    $i$096 = $inc;
   } else {
    $c$1$lcssa = $c$2;
    $i$0$lcssa = $inc;
    break;
   }
  }
  L29 : do switch ($i$0$lcssa | 0) {
  case 8:
   break;
  case 3:
   {
    label = 23;
    break;
   }
  default:
   {
    $tobool55 = ($pok | 0) != 0;
    if ($tobool55 & $i$0$lcssa >>> 0 > 3) if (($i$0$lcssa | 0) == 8) break L29; else {
     label = 23;
     break L29;
    }
    L34 : do if (!$i$0$lcssa) {
     $c$395 = $c$1$lcssa;
     $i$294 = 0;
     while (1) {
      if (($c$395 | 32 | 0) != (HEAP8[14222 + $i$294 >> 0] | 0)) {
       $c$5 = $c$395;
       $i$3 = $i$294;
       break L34;
      }
      do if ($i$294 >>> 0 < 2) {
       $14 = HEAP32[$rpos >> 2] | 0;
       if ($14 >>> 0 < (HEAP32[$shend >> 2] | 0) >>> 0) {
        HEAP32[$rpos >> 2] = $14 + 1;
        $c$4 = HEAPU8[$14 >> 0] | 0;
        break;
       } else {
        $c$4 = ___shgetc($f) | 0;
        break;
       }
      } else $c$4 = $c$395; while (0);
      $inc118 = $i$294 + 1 | 0;
      if ($inc118 >>> 0 < 3) {
       $c$395 = $c$4;
       $i$294 = $inc118;
      } else {
       $c$5 = $c$4;
       $i$3 = $inc118;
       break;
      }
     }
    } else {
     $c$5 = $c$1$lcssa;
     $i$3 = $i$0$lcssa;
    } while (0);
    switch ($i$3 | 0) {
    case 3:
     {
      $17 = HEAP32[$rpos >> 2] | 0;
      if ($17 >>> 0 < (HEAP32[$shend >> 2] | 0) >>> 0) {
       HEAP32[$rpos >> 2] = $17 + 1;
       $cond135 = HEAPU8[$17 >> 0] | 0;
      } else $cond135 = ___shgetc($f) | 0;
      if (($cond135 | 0) == 40) $i$4 = 1; else {
       if (!(HEAP32[$shend >> 2] | 0)) {
        $retval$0 = nan;
        break L4;
       }
       HEAP32[$rpos >> 2] = (HEAP32[$rpos >> 2] | 0) + -1;
       $retval$0 = nan;
       break L4;
      }
      while (1) {
       $22 = HEAP32[$rpos >> 2] | 0;
       if ($22 >>> 0 < (HEAP32[$shend >> 2] | 0) >>> 0) {
        HEAP32[$rpos >> 2] = $22 + 1;
        $cond159 = HEAPU8[$22 >> 0] | 0;
       } else $cond159 = ___shgetc($f) | 0;
       if (!(($cond159 + -48 | 0) >>> 0 < 10 | ($cond159 + -65 | 0) >>> 0 < 26)) if (!(($cond159 | 0) == 95 | ($cond159 + -97 | 0) >>> 0 < 26)) break;
       $i$4 = $i$4 + 1 | 0;
      }
      if (($cond159 | 0) == 41) {
       $retval$0 = nan;
       break L4;
      }
      $tobool181 = (HEAP32[$shend >> 2] | 0) == 0;
      if (!$tobool181) HEAP32[$rpos >> 2] = (HEAP32[$rpos >> 2] | 0) + -1;
      if (!$tobool55) {
       $call189 = ___errno_location() | 0;
       HEAP32[$call189 >> 2] = 22;
       ___shlim($f, 0);
       $retval$0 = 0.0;
       break L4;
      }
      if (!$i$4) {
       $retval$0 = nan;
       break L4;
      } else $dec19293$in = $i$4;
      while (1) {
       $dec19293$in = $dec19293$in + -1 | 0;
       if (!$tobool181) HEAP32[$rpos >> 2] = (HEAP32[$rpos >> 2] | 0) + -1;
       if (!$dec19293$in) {
        $retval$0 = nan;
        break L4;
       }
      }
      break;
     }
    case 0:
     {
      if (($c$5 | 0) == 48) {
       $30 = HEAP32[$rpos >> 2] | 0;
       if ($30 >>> 0 < (HEAP32[$shend >> 2] | 0) >>> 0) {
        HEAP32[$rpos >> 2] = $30 + 1;
        $cond231 = HEAPU8[$30 >> 0] | 0;
       } else $cond231 = ___shgetc($f) | 0;
       if (($cond231 | 32 | 0) == 120) {
        $retval$0 = +_hexfloat($f, $bits$0$ph, $emin$0$ph, $sign$0, $pok);
        break L4;
       }
       if (!(HEAP32[$shend >> 2] | 0)) $c$6 = 48; else {
        HEAP32[$rpos >> 2] = (HEAP32[$rpos >> 2] | 0) + -1;
        $c$6 = 48;
       }
      } else $c$6 = $c$5;
      $retval$0 = +_decfloat($f, $c$6, $bits$0$ph, $emin$0$ph, $sign$0, $pok);
      break L4;
      break;
     }
    default:
     {
      if (HEAP32[$shend >> 2] | 0) HEAP32[$rpos >> 2] = (HEAP32[$rpos >> 2] | 0) + -1;
      $call215 = ___errno_location() | 0;
      HEAP32[$call215 >> 2] = 22;
      ___shlim($f, 0);
      $retval$0 = 0.0;
      break L4;
     }
    }
   }
  } while (0);
  if ((label | 0) == 23) {
   $tobool61 = (HEAP32[$shend >> 2] | 0) == 0;
   if (!$tobool61) HEAP32[$rpos >> 2] = (HEAP32[$rpos >> 2] | 0) + -1;
   if (($pok | 0) != 0 & $i$0$lcssa >>> 0 > 3) {
    $i$1 = $i$0$lcssa;
    do {
     if (!$tobool61) HEAP32[$rpos >> 2] = (HEAP32[$rpos >> 2] | 0) + -1;
     $i$1 = $i$1 + -1 | 0;
    } while ($i$1 >>> 0 > 3);
   }
  }
  $retval$0 = +($sign$0 | 0) * inf;
 } while (0);
 return +$retval$0;
}

function __ZN10__cxxabiv112_GLOBAL__N_128parse_sizeof_param_pack_exprINS0_2DbEEEPKcS4_S4_RT_($first, $last, $db) {
 $first = $first | 0;
 $last = $last | 0;
 $db = $db | 0;
 var $12 = 0, $15 = 0, $16 = 0, $17 = 0, $8 = 0, $__end_$i = 0, $__i$0$i$i = 0, $__i$0$i$i$i = 0, $__p$0$i$i = 0, $__size_$i$i$i$i$i40 = 0, $__size_$i3$i$i$i45 = 0, $add$ptr$i = 0, $agg$tmp = 0, $and$i$i$i$i = 0, $arrayidx7 = 0, $call$i = 0, $call$i$i$i = 0, $call10 = 0, $first$addr$1 = 0, $incdec$ptr$i$i$i = 0, $k$0 = 0, $k$0$in = 0, $k1$0 = 0, $ref$tmp$i$i = 0, $ref$tmp27 = 0, $sub$ptr$div$i = 0, $sub$ptr$div$i33 = 0, $tmp = 0, $tobool$i$i$i$i$i = 0, $tobool$i$i$i$i$i41 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(64);
 $ref$tmp$i$i = sp + 40 | 0;
 $tmp = sp + 24 | 0;
 $ref$tmp27 = sp;
 $agg$tmp = sp + 12 | 0;
 if (($last - $first | 0) > 2) if ((HEAP8[$first >> 0] | 0) == 115) if ((HEAP8[$first + 1 >> 0] | 0) == 90) {
  $arrayidx7 = $first + 2 | 0;
  if ((HEAP8[$arrayidx7 >> 0] | 0) == 84) {
   $__end_$i = $db + 4 | 0;
   $sub$ptr$div$i = ((HEAP32[$__end_$i >> 2] | 0) - (HEAP32[$db >> 2] | 0) | 0) / 24 | 0;
   $call10 = __ZN10__cxxabiv112_GLOBAL__N_120parse_template_paramINS0_2DbEEEPKcS4_S4_RT_($arrayidx7, $last, $db) | 0;
   $sub$ptr$div$i33 = ((HEAP32[$__end_$i >> 2] | 0) - (HEAP32[$db >> 2] | 0) | 0) / 24 | 0;
   if (($call10 | 0) == ($arrayidx7 | 0)) $first$addr$1 = $first; else {
    HEAP32[$tmp >> 2] = 0;
    HEAP32[$tmp + 4 >> 2] = 0;
    HEAP32[$tmp + 8 >> 2] = 0;
    $call$i = __ZNSt3__211char_traitsIcE6lengthEPKc(15098) | 0;
    if ($call$i >>> 0 > 4294967279) __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($tmp);
    if ($call$i >>> 0 < 11) {
     HEAP8[$tmp + 11 >> 0] = $call$i;
     $__p$0$i$i = $tmp;
    } else {
     $and$i$i$i$i = $call$i + 16 & -16;
     $call$i$i$i = __ZN10__cxxabiv112_GLOBAL__N_112malloc_allocIcE8allocateEj($and$i$i$i$i) | 0;
     HEAP32[$tmp >> 2] = $call$i$i$i;
     HEAP32[$tmp + 8 >> 2] = $and$i$i$i$i | -2147483648;
     HEAP32[$tmp + 4 >> 2] = $call$i;
     $__p$0$i$i = $call$i$i$i;
    }
    __ZNSt3__211char_traitsIcE4copyEPcPKcj($__p$0$i$i, 15098, $call$i) | 0;
    HEAP8[$ref$tmp$i$i >> 0] = 0;
    __ZNSt3__211char_traitsIcE6assignERcRKc($__p$0$i$i + $call$i | 0, $ref$tmp$i$i);
    L14 : do if (($sub$ptr$div$i | 0) != ($sub$ptr$div$i33 | 0)) {
     __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($ref$tmp$i$i, (HEAP32[$db >> 2] | 0) + ($sub$ptr$div$i * 24 | 0) | 0);
     $8 = HEAP8[$ref$tmp$i$i + 11 >> 0] | 0;
     $tobool$i$i$i$i$i = $8 << 24 >> 24 < 0;
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($tmp, $tobool$i$i$i$i$i ? HEAP32[$ref$tmp$i$i >> 2] | 0 : $ref$tmp$i$i, $tobool$i$i$i$i$i ? HEAP32[$ref$tmp$i$i + 4 >> 2] | 0 : $8 & 255) | 0;
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($ref$tmp$i$i);
     $__size_$i$i$i$i$i40 = $ref$tmp$i$i + 11 | 0;
     $__size_$i3$i$i$i45 = $ref$tmp$i$i + 4 | 0;
     $k$0$in = $sub$ptr$div$i;
     while (1) {
      $k$0 = $k$0$in + 1 | 0;
      if (($k$0 | 0) == ($sub$ptr$div$i33 | 0)) break L14;
      __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($ref$tmp27, (HEAP32[$db >> 2] | 0) + ($k$0 * 24 | 0) | 0);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKc($ref$tmp27, 0, 15109) | 0;
      HEAP32[$ref$tmp$i$i >> 2] = HEAP32[$ref$tmp27 >> 2];
      HEAP32[$ref$tmp$i$i + 4 >> 2] = HEAP32[$ref$tmp27 + 4 >> 2];
      HEAP32[$ref$tmp$i$i + 8 >> 2] = HEAP32[$ref$tmp27 + 8 >> 2];
      $__i$0$i$i$i = 0;
      while (1) {
       if (($__i$0$i$i$i | 0) == 3) break;
       HEAP32[$ref$tmp27 + ($__i$0$i$i$i << 2) >> 2] = 0;
       $__i$0$i$i$i = $__i$0$i$i$i + 1 | 0;
      }
      $12 = HEAP8[$__size_$i$i$i$i$i40 >> 0] | 0;
      $tobool$i$i$i$i$i41 = $12 << 24 >> 24 < 0;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($tmp, $tobool$i$i$i$i$i41 ? HEAP32[$ref$tmp$i$i >> 2] | 0 : $ref$tmp$i$i, $tobool$i$i$i$i$i41 ? HEAP32[$__size_$i3$i$i$i45 >> 2] | 0 : $12 & 255) | 0;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($ref$tmp$i$i);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($ref$tmp27);
      $k$0$in = $k$0;
     }
    } while (0);
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($tmp, 14885) | 0;
    $k1$0 = $sub$ptr$div$i33;
    while (1) {
     if (($k1$0 | 0) == ($sub$ptr$div$i | 0)) break;
     $15 = HEAP32[$__end_$i >> 2] | 0;
     $add$ptr$i = $15 + -24 | 0;
     $16 = $15;
     while (1) {
      if (($16 | 0) == ($add$ptr$i | 0)) break;
      $incdec$ptr$i$i$i = $16 + -24 | 0;
      HEAP32[$__end_$i >> 2] = $incdec$ptr$i$i$i;
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($incdec$ptr$i$i$i);
      $16 = HEAP32[$__end_$i >> 2] | 0;
     }
     $k1$0 = $k1$0 + -1 | 0;
    }
    HEAP32[$agg$tmp >> 2] = HEAP32[$tmp >> 2];
    HEAP32[$agg$tmp + 4 >> 2] = HEAP32[$tmp + 4 >> 2];
    HEAP32[$agg$tmp + 8 >> 2] = HEAP32[$tmp + 8 >> 2];
    $__i$0$i$i = 0;
    while (1) {
     if (($__i$0$i$i | 0) == 3) break;
     HEAP32[$tmp + ($__i$0$i$i << 2) >> 2] = 0;
     $__i$0$i$i = $__i$0$i$i + 1 | 0;
    }
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ENSt3__212basic_stringIcNS2_11char_traitsIcEENS0_12malloc_allocIcEEEE($ref$tmp$i$i, $agg$tmp);
    $17 = HEAP32[$__end_$i >> 2] | 0;
    if ($17 >>> 0 < (HEAP32[$db + 8 >> 2] | 0) >>> 0) {
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($17, $ref$tmp$i$i);
     HEAP32[$__end_$i >> 2] = (HEAP32[$__end_$i >> 2] | 0) + 24;
    } else __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIS3_EEvOT_($db, $ref$tmp$i$i);
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($ref$tmp$i$i);
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($agg$tmp);
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($tmp);
    $first$addr$1 = $call10;
   }
  } else $first$addr$1 = $first;
 } else $first$addr$1 = $first; else $first$addr$1 = $first; else $first$addr$1 = $first;
 STACKTOP = sp;
 return $first$addr$1 | 0;
}

function __ZN10__cxxabiv112_GLOBAL__N_116parse_local_nameINS0_2DbEEEPKcS4_S4_RT_($first, $last, $db) {
 $first = $first | 0;
 $last = $last | 0;
 $db = $db | 0;
 var $10 = 0, $12 = 0, $15 = 0, $16 = 0, $17 = 0, $20 = 0, $21 = 0, $23 = 0, $26 = 0, $27 = 0, $4 = 0, $6 = 0, $9 = 0, $__end_$i105 = 0, $__end_$i69 = 0, $__end_$i77 = 0, $add$ptr = 0, $add$ptr$i106 = 0, $add$ptr$i63 = 0, $add$ptr$i70 = 0, $add$ptr$i83 = 0, $add$ptr13 = 0, $add$ptr31 = 0, $call = 0, $call14 = 0, $call25 = 0, $call32 = 0, $call60 = 0, $call63 = 0, $incdec$ptr = 0, $incdec$ptr$i$i$i = 0, $incdec$ptr$i$i$i109 = 0, $incdec$ptr$i$i$i73 = 0, $incdec$ptr$i$i$i86 = 0, $name = 0, $retval$4 = 0, $tobool$i$i$i$i = 0, $tobool$i$i$i$i96 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $name = sp;
 L1 : do if (($first | 0) == ($last | 0)) $retval$4 = $first; else if ((HEAP8[$first >> 0] | 0) == 90) {
  $add$ptr = $first + 1 | 0;
  $call = __ZN10__cxxabiv112_GLOBAL__N_114parse_encodingINS0_2DbEEEPKcS4_S4_RT_($add$ptr, $last, $db) | 0;
  if (($call | 0) == ($add$ptr | 0) | ($call | 0) == ($last | 0)) $retval$4 = $first; else if ((HEAP8[$call >> 0] | 0) == 69) {
   $incdec$ptr = $call + 1 | 0;
   if (($incdec$ptr | 0) == ($last | 0)) $retval$4 = $first; else {
    $add$ptr13 = $call + 2 | 0;
    switch (HEAP8[$incdec$ptr >> 0] | 0) {
    case 115:
     {
      $call14 = __ZN10__cxxabiv112_GLOBAL__N_119parse_discriminatorEPKcS2_($add$ptr13, $last) | 0;
      $4 = HEAP32[$db + 4 >> 2] | 0;
      if ((HEAP32[$db >> 2] | 0) == ($4 | 0)) {
       $retval$4 = $call14;
       break L1;
      }
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($4 + -24 | 0, 16246) | 0;
      $retval$4 = $call14;
      break L1;
      break;
     }
    case 100:
     {
      if (($add$ptr13 | 0) == ($last | 0)) {
       $retval$4 = $first;
       break L1;
      }
      $call25 = __ZN10__cxxabiv112_GLOBAL__N_112parse_numberEPKcS2_($add$ptr13, $last) | 0;
      if (($call25 | 0) == ($last | 0)) {
       $retval$4 = $first;
       break L1;
      }
      if ((HEAP8[$call25 >> 0] | 0) != 95) {
       $retval$4 = $first;
       break L1;
      }
      $add$ptr31 = $call25 + 1 | 0;
      $call32 = __ZN10__cxxabiv112_GLOBAL__N_110parse_nameINS0_2DbEEEPKcS4_S4_RT_($add$ptr31, $last, $db) | 0;
      $__end_$i69 = $db + 4 | 0;
      if (($call32 | 0) == ($add$ptr31 | 0)) {
       $15 = HEAP32[$__end_$i69 >> 2] | 0;
       $add$ptr$i70 = $15 + -24 | 0;
       $16 = $15;
       while (1) {
        if (($16 | 0) == ($add$ptr$i70 | 0)) {
         $retval$4 = $first;
         break L1;
        }
        $incdec$ptr$i$i$i73 = $16 + -24 | 0;
        HEAP32[$__end_$i69 >> 2] = $incdec$ptr$i$i$i73;
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($incdec$ptr$i$i$i73);
        $16 = HEAP32[$__end_$i69 >> 2] | 0;
       }
      }
      $6 = HEAP32[$__end_$i69 >> 2] | 0;
      if ((($6 - (HEAP32[$db >> 2] | 0) | 0) / 24 | 0) >>> 0 < 2) {
       $retval$4 = $first;
       break L1;
      }
      __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($name, $6 + -24 | 0);
      $9 = HEAP32[$__end_$i69 >> 2] | 0;
      $add$ptr$i63 = $9 + -24 | 0;
      $10 = $9;
      while (1) {
       if (($10 | 0) == ($add$ptr$i63 | 0)) break;
       $incdec$ptr$i$i$i = $10 + -24 | 0;
       HEAP32[$__end_$i69 >> 2] = $incdec$ptr$i$i$i;
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($incdec$ptr$i$i$i);
       $10 = HEAP32[$__end_$i69 >> 2] | 0;
      }
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($9 + -48 | 0, 14959) | 0;
      $12 = HEAP8[$name + 11 >> 0] | 0;
      $tobool$i$i$i$i = $12 << 24 >> 24 < 0;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj((HEAP32[$__end_$i69 >> 2] | 0) + -24 | 0, $tobool$i$i$i$i ? HEAP32[$name >> 2] | 0 : $name, $tobool$i$i$i$i ? HEAP32[$name + 4 >> 2] | 0 : $12 & 255) | 0;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($name);
      $retval$4 = $call32;
      break L1;
      break;
     }
    default:
     {
      $call60 = __ZN10__cxxabiv112_GLOBAL__N_110parse_nameINS0_2DbEEEPKcS4_S4_RT_($incdec$ptr, $last, $db) | 0;
      if (($call60 | 0) == ($incdec$ptr | 0)) {
       $__end_$i105 = $db + 4 | 0;
       $26 = HEAP32[$__end_$i105 >> 2] | 0;
       $add$ptr$i106 = $26 + -24 | 0;
       $27 = $26;
       while (1) {
        if (($27 | 0) == ($add$ptr$i106 | 0)) {
         $retval$4 = $first;
         break L1;
        }
        $incdec$ptr$i$i$i109 = $27 + -24 | 0;
        HEAP32[$__end_$i105 >> 2] = $incdec$ptr$i$i$i109;
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($incdec$ptr$i$i$i109);
        $27 = HEAP32[$__end_$i105 >> 2] | 0;
       }
      }
      $call63 = __ZN10__cxxabiv112_GLOBAL__N_119parse_discriminatorEPKcS2_($call60, $last) | 0;
      $__end_$i77 = $db + 4 | 0;
      $17 = HEAP32[$__end_$i77 >> 2] | 0;
      if ((($17 - (HEAP32[$db >> 2] | 0) | 0) / 24 | 0) >>> 0 < 2) {
       $retval$4 = $call63;
       break L1;
      }
      __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($name, $17 + -24 | 0);
      $20 = HEAP32[$__end_$i77 >> 2] | 0;
      $add$ptr$i83 = $20 + -24 | 0;
      $21 = $20;
      while (1) {
       if (($21 | 0) == ($add$ptr$i83 | 0)) break;
       $incdec$ptr$i$i$i86 = $21 + -24 | 0;
       HEAP32[$__end_$i77 >> 2] = $incdec$ptr$i$i$i86;
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($incdec$ptr$i$i$i86);
       $21 = HEAP32[$__end_$i77 >> 2] | 0;
      }
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($20 + -48 | 0, 14959) | 0;
      $23 = HEAP8[$name + 11 >> 0] | 0;
      $tobool$i$i$i$i96 = $23 << 24 >> 24 < 0;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj((HEAP32[$__end_$i77 >> 2] | 0) + -24 | 0, $tobool$i$i$i$i96 ? HEAP32[$name >> 2] | 0 : $name, $tobool$i$i$i$i96 ? HEAP32[$name + 4 >> 2] | 0 : $23 & 255) | 0;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($name);
      $retval$4 = $call63;
      break L1;
     }
    }
   }
  } else $retval$4 = $first;
 } else $retval$4 = $first; while (0);
 STACKTOP = sp;
 return $retval$4 | 0;
}

function __ZN10__cxxabiv112_GLOBAL__N_110parse_nameINS0_2DbEEEPKcS4_S4_RT_($first, $last, $db) {
 $first = $first | 0;
 $last = $last | 0;
 $db = $db | 0;
 var $12 = 0, $15 = 0, $16 = 0, $17 = 0, $21 = 0, $24 = 0, $25 = 0, $26 = 0, $4 = 0, $5 = 0, $7 = 0, $__end_$i = 0, $__end_$i$i$i$i = 0, $__end_$i$i$i$i$i = 0, $__end_$i67 = 0, $__end_$i77 = 0, $__first_$i$i$i8$i$i$i$i = 0, $add$ptr$i73 = 0, $add$ptr$i83 = 0, $call = 0, $call14 = 0, $call29 = 0, $call51 = 0, $call59 = 0, $call9 = 0, $incdec$ptr$first = 0, $incdec$ptr$i$i$i = 0, $incdec$ptr$i$i$i86 = 0, $ref$tmp = 0, $ref$tmp26 = 0, $retval$3 = 0, $tobool$i$i$i$i$i = 0, $tobool$i$i$i$i$i94 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 $ref$tmp = sp + 8 | 0;
 $ref$tmp26 = sp;
 L1 : do if (($last - $first | 0) > 1) {
  $incdec$ptr$first = (HEAP8[$first >> 0] | 0) == 76 ? $first + 1 | 0 : $first;
  switch (HEAP8[$incdec$ptr$first >> 0] | 0) {
  case 78:
   {
    $call = __ZN10__cxxabiv112_GLOBAL__N_117parse_nested_nameINS0_2DbEEEPKcS4_S4_RT_($incdec$ptr$first, $last, $db) | 0;
    $retval$3 = ($call | 0) == ($incdec$ptr$first | 0) ? $first : $call;
    break L1;
    break;
   }
  case 90:
   {
    $call9 = __ZN10__cxxabiv112_GLOBAL__N_116parse_local_nameINS0_2DbEEEPKcS4_S4_RT_($incdec$ptr$first, $last, $db) | 0;
    $retval$3 = ($call9 | 0) == ($incdec$ptr$first | 0) ? $first : $call9;
    break L1;
    break;
   }
  default:
   {
    $call14 = __ZN10__cxxabiv112_GLOBAL__N_119parse_unscoped_nameINS0_2DbEEEPKcS4_S4_RT_($incdec$ptr$first, $last, $db) | 0;
    if (($call14 | 0) == ($incdec$ptr$first | 0)) {
     $call51 = __ZN10__cxxabiv112_GLOBAL__N_118parse_substitutionINS0_2DbEEEPKcS4_S4_RT_($incdec$ptr$first, $last, $db) | 0;
     if (($call51 | 0) == ($incdec$ptr$first | 0) | ($call51 | 0) == ($last | 0)) {
      $retval$3 = $first;
      break L1;
     }
     if ((HEAP8[$call51 >> 0] | 0) != 73) {
      $retval$3 = $first;
      break L1;
     }
     $call59 = __ZN10__cxxabiv112_GLOBAL__N_119parse_template_argsINS0_2DbEEEPKcS4_S4_RT_($call51, $last, $db) | 0;
     if (($call59 | 0) == ($call51 | 0)) {
      $retval$3 = $first;
      break L1;
     }
     $__end_$i77 = $db + 4 | 0;
     $21 = HEAP32[$__end_$i77 >> 2] | 0;
     if ((($21 - (HEAP32[$db >> 2] | 0) | 0) / 24 | 0) >>> 0 < 2) {
      $retval$3 = $first;
      break L1;
     }
     __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($ref$tmp, $21 + -24 | 0);
     $24 = HEAP32[$__end_$i77 >> 2] | 0;
     $add$ptr$i83 = $24 + -24 | 0;
     $25 = $24;
     while (1) {
      if (($25 | 0) == ($add$ptr$i83 | 0)) break;
      $incdec$ptr$i$i$i86 = $25 + -24 | 0;
      HEAP32[$__end_$i77 >> 2] = $incdec$ptr$i$i$i86;
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($incdec$ptr$i$i$i86);
      $25 = HEAP32[$__end_$i77 >> 2] | 0;
     }
     $26 = HEAP8[$ref$tmp + 11 >> 0] | 0;
     $tobool$i$i$i$i$i94 = $26 << 24 >> 24 < 0;
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($24 + -48 | 0, $tobool$i$i$i$i$i94 ? HEAP32[$ref$tmp >> 2] | 0 : $ref$tmp, $tobool$i$i$i$i$i94 ? HEAP32[$ref$tmp + 4 >> 2] | 0 : $26 & 255) | 0;
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($ref$tmp);
     $retval$3 = $call59;
     break L1;
    }
    if (($call14 | 0) == ($last | 0)) {
     $retval$3 = $last;
     break L1;
    }
    if ((HEAP8[$call14 >> 0] | 0) != 73) {
     $retval$3 = $call14;
     break L1;
    }
    $__end_$i = $db + 4 | 0;
    $4 = HEAP32[$__end_$i >> 2] | 0;
    if ((HEAP32[$db >> 2] | 0) == ($4 | 0)) {
     $retval$3 = $first;
     break L1;
    }
    HEAP32[$ref$tmp26 >> 2] = HEAP32[$db + 12 >> 2];
    __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEC2EjRKS3_RKS5_($ref$tmp, $4 + -24 | 0, $ref$tmp26);
    $__end_$i67 = $db + 20 | 0;
    $5 = HEAP32[$__end_$i67 >> 2] | 0;
    if ($5 >>> 0 < (HEAP32[$db + 24 >> 2] | 0) >>> 0) {
     HEAP32[$5 >> 2] = 0;
     $__end_$i$i$i$i$i = $5 + 4 | 0;
     HEAP32[$__end_$i$i$i$i$i >> 2] = 0;
     $7 = HEAP32[$ref$tmp + 12 >> 2] | 0;
     HEAP32[$5 + 8 >> 2] = 0;
     HEAP32[$5 + 12 >> 2] = $7;
     HEAP32[$5 >> 2] = HEAP32[$ref$tmp >> 2];
     $__end_$i$i$i$i = $ref$tmp + 4 | 0;
     HEAP32[$__end_$i$i$i$i$i >> 2] = HEAP32[$__end_$i$i$i$i >> 2];
     $__first_$i$i$i8$i$i$i$i = $ref$tmp + 8 | 0;
     HEAP32[$5 + 8 >> 2] = HEAP32[$__first_$i$i$i8$i$i$i$i >> 2];
     HEAP32[$__first_$i$i$i8$i$i$i$i >> 2] = 0;
     HEAP32[$__end_$i$i$i$i >> 2] = 0;
     HEAP32[$ref$tmp >> 2] = 0;
     HEAP32[$__end_$i67 >> 2] = (HEAP32[$__end_$i67 >> 2] | 0) + 16;
    } else __ZNSt3__26vectorINS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEENS4_IS6_Lj4096EEEE21__push_back_slow_pathIS6_EEvOT_($db + 16 | 0, $ref$tmp);
    __ZNSt3__213__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEED2Ev($ref$tmp);
    $call29 = __ZN10__cxxabiv112_GLOBAL__N_119parse_template_argsINS0_2DbEEEPKcS4_S4_RT_($call14, $last, $db) | 0;
    if (($call29 | 0) == ($call14 | 0)) {
     $retval$3 = $first;
     break L1;
    }
    $12 = HEAP32[$__end_$i >> 2] | 0;
    if ((($12 - (HEAP32[$db >> 2] | 0) | 0) / 24 | 0) >>> 0 < 2) {
     $retval$3 = $first;
     break L1;
    }
    __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($ref$tmp, $12 + -24 | 0);
    $15 = HEAP32[$__end_$i >> 2] | 0;
    $add$ptr$i73 = $15 + -24 | 0;
    $16 = $15;
    while (1) {
     if (($16 | 0) == ($add$ptr$i73 | 0)) break;
     $incdec$ptr$i$i$i = $16 + -24 | 0;
     HEAP32[$__end_$i >> 2] = $incdec$ptr$i$i$i;
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($incdec$ptr$i$i$i);
     $16 = HEAP32[$__end_$i >> 2] | 0;
    }
    $17 = HEAP8[$ref$tmp + 11 >> 0] | 0;
    $tobool$i$i$i$i$i = $17 << 24 >> 24 < 0;
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($15 + -48 | 0, $tobool$i$i$i$i$i ? HEAP32[$ref$tmp >> 2] | 0 : $ref$tmp, $tobool$i$i$i$i$i ? HEAP32[$ref$tmp + 4 >> 2] | 0 : $17 & 255) | 0;
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($ref$tmp);
    $retval$3 = $call29;
    break L1;
   }
  }
 } else $retval$3 = $first; while (0);
 STACKTOP = sp;
 return $retval$3 | 0;
}

function ___cxa_demangle($mangled_name, $buf, $n, $status) {
 $mangled_name = $mangled_name | 0;
 $buf = $buf | 0;
 $n = $n | 0;
 $status = $status | 0;
 var $$pr = 0, $1 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $17 = 0, $18 = 0, $24 = 0, $3 = 0, $5 = 0, $7 = 0, $__end_$i = 0, $__end_$i$i$i = 0, $__end_$i$i$i40 = 0, $__end_$i45 = 0, $a = 0, $add = 0, $add$ptr = 0, $buf$addr$155 = 0, $buf$addr$2 = 0, $call40 = 0, $call45 = 0, $cmp1 = 0, $cmp2 = 0, $cond = 0, $cond$i$i = 0, $cv = 0, $db = 0, $first66 = 0, $fix_forward_references = 0, $incdec$ptr$i$i$i = 0, $incdec$ptr$i$i$i43 = 0, $ref$tmp$i$i$i = 0, $retval$0 = 0, $second = 0, $tag_templates = 0, $template_param = 0, $tobool = 0, $tobool$i$i$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 4192 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(4192);
 $ref$tmp$i$i$i = sp + 4176 | 0;
 $a = sp;
 $db = sp + 4112 | 0;
 $tobool = ($status | 0) != 0;
 if (!$mangled_name) label = 3; else {
  $cmp1 = ($buf | 0) != 0;
  $cmp2 = ($n | 0) == 0;
  if ($cmp1 & $cmp2) label = 3; else {
   if ($cmp1) $cond = HEAP32[$n >> 2] | 0; else $cond = 0;
   __ZN10__cxxabiv112_GLOBAL__N_15arenaILj4096EEC2Ev($a);
   __ZN10__cxxabiv112_GLOBAL__N_12DbC2ILj4096EEERNS0_5arenaIXT_EEE($db, $a);
   $cv = $db + 48 | 0;
   $tag_templates = $db + 61 | 0;
   HEAP32[$cv >> 2] = 0;
   HEAP32[$cv + 4 >> 2] = 0;
   HEAP32[$cv + 8 >> 2] = 0;
   HEAP8[$cv + 12 >> 0] = 0;
   HEAP8[$tag_templates >> 0] = 1;
   $template_param = $db + 32 | 0;
   $__end_$i = $db + 36 | 0;
   $1 = HEAP32[$__end_$i >> 2] | 0;
   if ($1 >>> 0 < (HEAP32[$db + 40 >> 2] | 0) >>> 0) {
    __ZN10__cxxabiv112_GLOBAL__N_111short_allocINSt3__26vectorINS0_11string_pairENS1_IS4_Lj4096EEEEELj4096EEC2ERNS0_5arenaILj4096EEE($ref$tmp$i$i$i, $a);
    HEAP32[$1 >> 2] = 0;
    HEAP32[$1 + 4 >> 2] = 0;
    $3 = HEAP32[$ref$tmp$i$i$i >> 2] | 0;
    HEAP32[$1 + 8 >> 2] = 0;
    HEAP32[$1 + 12 >> 2] = $3;
    HEAP32[$__end_$i >> 2] = (HEAP32[$__end_$i >> 2] | 0) + 16;
   } else __ZNSt3__26vectorINS0_INS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEENS4_IS6_Lj4096EEEEENS4_IS8_Lj4096EEEE24__emplace_back_slow_pathIJRNS2_5arenaILj4096EEEEEEvDpOT_($template_param, $a);
   $fix_forward_references = $db + 62 | 0;
   HEAP8[$fix_forward_references >> 0] = 0;
   HEAP8[$db + 63 >> 0] = 1;
   HEAP32[$ref$tmp$i$i$i >> 2] = 0;
   $add$ptr = $mangled_name + (_strlen($mangled_name) | 0) | 0;
   __ZN10__cxxabiv112_GLOBAL__N_18demangleINS0_2DbEEEvPKcS4_RT_Ri($mangled_name, $add$ptr, $db, $ref$tmp$i$i$i);
   $5 = HEAP32[$ref$tmp$i$i$i >> 2] | 0;
   do if (($5 | 0) != 0 | (HEAP8[$fix_forward_references >> 0] | 0) == 0) {
    $$pr = $5;
    label = 22;
   } else {
    $7 = HEAP32[$template_param >> 2] | 0;
    if (($7 | 0) == (HEAP32[$__end_$i >> 2] | 0)) label = 23; else if ((HEAP32[$7 >> 2] | 0) == (HEAP32[$7 + 4 >> 2] | 0)) label = 23; else {
     HEAP8[$fix_forward_references >> 0] = 0;
     HEAP8[$tag_templates >> 0] = 0;
     $11 = HEAP32[$db >> 2] | 0;
     $__end_$i$i$i = $db + 4 | 0;
     while (1) {
      $12 = HEAP32[$__end_$i$i$i >> 2] | 0;
      if (($12 | 0) == ($11 | 0)) break;
      $incdec$ptr$i$i$i = $12 + -24 | 0;
      HEAP32[$__end_$i$i$i >> 2] = $incdec$ptr$i$i$i;
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($incdec$ptr$i$i$i);
     }
     $13 = HEAP32[$db + 16 >> 2] | 0;
     $__end_$i$i$i40 = $db + 20 | 0;
     while (1) {
      $14 = HEAP32[$__end_$i$i$i40 >> 2] | 0;
      if (($14 | 0) == ($13 | 0)) break;
      $incdec$ptr$i$i$i43 = $14 + -16 | 0;
      HEAP32[$__end_$i$i$i40 >> 2] = $incdec$ptr$i$i$i43;
      __ZNSt3__213__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEED2Ev($incdec$ptr$i$i$i43);
     }
     __ZN10__cxxabiv112_GLOBAL__N_18demangleINS0_2DbEEEvPKcS4_RT_Ri($mangled_name, $add$ptr, $db, $ref$tmp$i$i$i);
     if (!(HEAP8[$fix_forward_references >> 0] | 0)) {
      $$pr = HEAP32[$ref$tmp$i$i$i >> 2] | 0;
      label = 22;
      break;
     } else {
      HEAP32[$ref$tmp$i$i$i >> 2] = -2;
      $24 = -2;
      $buf$addr$2 = 0;
      break;
     }
    }
   } while (0);
   if ((label | 0) == 22) if (!$$pr) label = 23; else {
    $24 = $$pr;
    $buf$addr$2 = 0;
   }
   do if ((label | 0) == 23) {
    $__end_$i45 = $db + 4 | 0;
    $call40 = __ZNK10__cxxabiv112_GLOBAL__N_111string_pair4sizeEv((HEAP32[$__end_$i45 >> 2] | 0) + -24 | 0) | 0;
    $add = $call40 + 1 | 0;
    if ($add >>> 0 > $cond >>> 0) {
     $call45 = _realloc($buf, $add) | 0;
     if (!$call45) {
      HEAP32[$ref$tmp$i$i$i >> 2] = -1;
      $24 = -1;
      $buf$addr$2 = 0;
      break;
     }
     if ($cmp2) $buf$addr$155 = $call45; else {
      HEAP32[$n >> 2] = $add;
      $buf$addr$155 = $call45;
     }
    } else if (!$buf) {
     $24 = 0;
     $buf$addr$2 = 0;
     break;
    } else $buf$addr$155 = $buf;
    $17 = HEAP32[$__end_$i45 >> 2] | 0;
    $second = $17 + -12 | 0;
    $18 = HEAP8[$second + 11 >> 0] | 0;
    $tobool$i$i$i$i$i = $18 << 24 >> 24 < 0;
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($17 + -24 | 0, $tobool$i$i$i$i$i ? HEAP32[$second >> 2] | 0 : $second, $tobool$i$i$i$i$i ? HEAP32[$17 + -8 >> 2] | 0 : $18 & 255) | 0;
    $first66 = (HEAP32[$__end_$i45 >> 2] | 0) + -24 | 0;
    if ((HEAP8[$first66 + 11 >> 0] | 0) < 0) $cond$i$i = HEAP32[$first66 >> 2] | 0; else $cond$i$i = $first66;
    _memcpy($buf$addr$155 | 0, $cond$i$i | 0, $call40 | 0) | 0;
    HEAP8[$buf$addr$155 + $call40 >> 0] = 0;
    $24 = 0;
    $buf$addr$2 = $buf$addr$155;
   } while (0);
   if ($tobool) HEAP32[$status >> 2] = $24;
   __ZN10__cxxabiv112_GLOBAL__N_12DbD2Ev($db);
   __ZN10__cxxabiv112_GLOBAL__N_15arenaILj4096EED2Ev($a);
   $retval$0 = $buf$addr$2;
  }
 }
 if ((label | 0) == 3) if ($tobool) {
  HEAP32[$status >> 2] = -3;
  $retval$0 = 0;
 } else $retval$0 = 0;
 STACKTOP = sp;
 return $retval$0 | 0;
}

function _arDetectMarker2($xsize, $ysize, $labelInfo, $imageProcMode, $areaMax, $areaMin, $squareFitThresh, $markerInfo2, $marker2_num) {
 $xsize = $xsize | 0;
 $ysize = $ysize | 0;
 $labelInfo = $labelInfo | 0;
 $imageProcMode = $imageProcMode | 0;
 $areaMax = $areaMax | 0;
 $areaMin = $areaMin | 0;
 $squareFitThresh = +$squareFitThresh;
 $markerInfo2 = $markerInfo2 | 0;
 $marker2_num = $marker2_num | 0;
 var $$ph = 0, $1 = 0, $13 = 0, $15 = 0, $16 = 0, $21 = 0, $22 = 0, $24 = 0, $25 = 0, $add102 = 0.0, $add145 = 0, $add69 = 0, $area104 = 0, $area106 = 0, $areaMax$addr$0 = 0, $areaMin$addr$0 = 0, $arraydecay = 0, $arrayidx = 0, $arrayidx12 = 0, $arrayidx171 = 0, $arrayidx174 = 0, $arrayidx180 = 0, $arrayidx182 = 0, $arrayidx75 = 0, $arrayidx89 = 0, $cmp = 0, $coord_num = 0, $dec = 0, $i$0 = 0, $i$1 = 0, $i$2 = 0, $i$2$ph = 0, $i$3 = 0, $inc = 0, $j$0 = 0, $j$1 = 0, $j$2 = 0, $label_num = 0, $pm$0 = 0, $sub = 0, $sub29 = 0, $sub79 = 0.0, $sub93 = 0.0, $xsize$addr$0 = 0, $ysize$addr$0 = 0, label = 0, $i$0$looptemp = 0;
 $cmp = ($imageProcMode | 0) == 1;
 if ($cmp) {
  $areaMax$addr$0 = ($areaMax | 0) / 4 | 0;
  $areaMin$addr$0 = ($areaMin | 0) / 4 | 0;
  $xsize$addr$0 = ($xsize | 0) / 2 | 0;
  $ysize$addr$0 = ($ysize | 0) / 2 | 0;
 } else {
  $areaMax$addr$0 = $areaMax;
  $areaMin$addr$0 = $areaMin;
  $xsize$addr$0 = $xsize;
  $ysize$addr$0 = $ysize;
 }
 HEAP32[$marker2_num >> 2] = 0;
 $label_num = $labelInfo + 8 | 0;
 $sub = $xsize$addr$0 + -2 | 0;
 $sub29 = $ysize$addr$0 + -2 | 0;
 $arraydecay = $labelInfo + 1179664 | 0;
 $i$0 = 0;
 while (1) {
  if (($i$0 | 0) >= (HEAP32[$label_num >> 2] | 0)) {
   label = 5;
   break;
  }
  $arrayidx = $labelInfo + 12 + ($i$0 << 2) | 0;
  $1 = HEAP32[$arrayidx >> 2] | 0;
  $i$0$looptemp = $i$0;
  $i$0 = $i$0 + 1 | 0;
  if (($1 | 0) < ($areaMin$addr$0 | 0) | ($1 | 0) > ($areaMax$addr$0 | 0)) {
   $i$0 = $i$0;
   continue;
  }
  $arrayidx12 = $labelInfo + 131084 + ($i$0$looptemp << 4) | 0;
  if ((HEAP32[$arrayidx12 >> 2] | 0) == 1) {
   $i$0 = $i$0;
   continue;
  }
  if ((HEAP32[$labelInfo + 131084 + ($i$0$looptemp << 4) + 4 >> 2] | 0) == ($sub | 0)) {
   $i$0 = $i$0;
   continue;
  }
  if ((HEAP32[$labelInfo + 131084 + ($i$0$looptemp << 4) + 8 >> 2] | 0) == 1) {
   $i$0 = $i$0;
   continue;
  }
  if ((HEAP32[$labelInfo + 131084 + ($i$0$looptemp << 4) + 12 >> 2] | 0) == ($sub29 | 0)) {
   $i$0 = $i$0;
   continue;
  }
  if ((_arGetContour(HEAP32[$labelInfo >> 2] | 0, $xsize$addr$0, 0, $arraydecay, $i$0, $arrayidx12, $markerInfo2 + ((HEAP32[$marker2_num >> 2] | 0) * 80048 | 0) | 0) | 0) < 0) {
   $i$0 = $i$0;
   continue;
  }
  if ((_check_square(HEAP32[$arrayidx >> 2] | 0, $markerInfo2 + ((HEAP32[$marker2_num >> 2] | 0) * 80048 | 0) | 0, $squareFitThresh) | 0) < 0) {
   $i$0 = $i$0;
   continue;
  }
  HEAP32[$markerInfo2 + ((HEAP32[$marker2_num >> 2] | 0) * 80048 | 0) >> 2] = HEAP32[$arrayidx >> 2];
  $13 = HEAP32[$marker2_num >> 2] | 0;
  HEAPF64[$markerInfo2 + ($13 * 80048 | 0) + 8 >> 3] = +HEAPF64[$labelInfo + 655376 + ($i$0$looptemp << 4) >> 3];
  HEAPF64[$markerInfo2 + ($13 * 80048 | 0) + 16 >> 3] = +HEAPF64[$labelInfo + 655376 + ($i$0$looptemp << 4) + 8 >> 3];
  $inc = $13 + 1 | 0;
  HEAP32[$marker2_num >> 2] = $inc;
  if (($inc | 0) == 60) {
   $15 = 60;
   $i$1 = 0;
   break;
  }
 }
 if ((label | 0) == 5) {
  $15 = HEAP32[$marker2_num >> 2] | 0;
  $i$1 = 0;
 }
 L16 : while (1) {
  if (($i$1 | 0) >= ($15 | 0)) {
   $$ph = $15;
   $i$2$ph = 0;
   break;
  }
  $add69 = $i$1 + 1 | 0;
  $arrayidx75 = $markerInfo2 + ($i$1 * 80048 | 0) + 8 | 0;
  $arrayidx89 = $markerInfo2 + ($i$1 * 80048 | 0) + 16 | 0;
  $area104 = $markerInfo2 + ($i$1 * 80048 | 0) | 0;
  $16 = $15;
  $j$0 = $add69;
  while (1) {
   if (($j$0 | 0) >= ($16 | 0)) {
    $15 = $16;
    $i$1 = $add69;
    continue L16;
   }
   $sub79 = +HEAPF64[$arrayidx75 >> 3] - +HEAPF64[$markerInfo2 + ($j$0 * 80048 | 0) + 8 >> 3];
   $sub93 = +HEAPF64[$arrayidx89 >> 3] - +HEAPF64[$markerInfo2 + ($j$0 * 80048 | 0) + 16 >> 3];
   $add102 = $sub79 * $sub79 + $sub93 * $sub93;
   $21 = HEAP32[$area104 >> 2] | 0;
   $area106 = $markerInfo2 + ($j$0 * 80048 | 0) | 0;
   $22 = HEAP32[$area106 >> 2] | 0;
   if (($21 | 0) > ($22 | 0)) {
    if ($add102 < +(($21 | 0) / 4 | 0 | 0)) HEAP32[$area106 >> 2] = 0;
   } else if ($add102 < +(($22 | 0) / 4 | 0 | 0)) HEAP32[$area104 >> 2] = 0;
   $16 = HEAP32[$marker2_num >> 2] | 0;
   $j$0 = $j$0 + 1 | 0;
  }
 }
 L28 : while (1) {
  $i$2 = $i$2$ph;
  while (1) {
   if (($i$2 | 0) >= ($$ph | 0)) break L28;
   $add145 = $i$2 + 1 | 0;
   if (!(HEAP32[$markerInfo2 + ($i$2 * 80048 | 0) >> 2] | 0)) {
    $24 = $$ph;
    $j$1 = $add145;
    break;
   } else $i$2 = $add145;
  }
  while (1) {
   if (($j$1 | 0) >= ($24 | 0)) break;
   _memcpy($markerInfo2 + (($j$1 + -1 | 0) * 80048 | 0) | 0, $markerInfo2 + ($j$1 * 80048 | 0) | 0, 80048) | 0;
   $24 = HEAP32[$marker2_num >> 2] | 0;
   $j$1 = $j$1 + 1 | 0;
  }
  $dec = $24 + -1 | 0;
  HEAP32[$marker2_num >> 2] = $dec;
  $$ph = $dec;
  $i$2$ph = $add145;
 }
 L38 : do if ($cmp) {
  $25 = $$ph;
  $i$3 = 0;
  $pm$0 = $markerInfo2;
  while (1) {
   if (($i$3 | 0) >= ($25 | 0)) break L38;
   HEAP32[$pm$0 >> 2] = HEAP32[$pm$0 >> 2] << 2;
   $arrayidx171 = $pm$0 + 8 | 0;
   HEAPF64[$arrayidx171 >> 3] = +HEAPF64[$arrayidx171 >> 3] * 2.0;
   $arrayidx174 = $pm$0 + 16 | 0;
   HEAPF64[$arrayidx174 >> 3] = +HEAPF64[$arrayidx174 >> 3] * 2.0;
   $coord_num = $pm$0 + 24 | 0;
   $j$2 = 0;
   while (1) {
    if (($j$2 | 0) >= (HEAP32[$coord_num >> 2] | 0)) break;
    $arrayidx180 = $pm$0 + 28 + ($j$2 << 2) | 0;
    HEAP32[$arrayidx180 >> 2] = HEAP32[$arrayidx180 >> 2] << 1;
    $arrayidx182 = $pm$0 + 40028 + ($j$2 << 2) | 0;
    HEAP32[$arrayidx182 >> 2] = HEAP32[$arrayidx182 >> 2] << 1;
    $j$2 = $j$2 + 1 | 0;
   }
   $25 = HEAP32[$marker2_num >> 2] | 0;
   $i$3 = $i$3 + 1 | 0;
   $pm$0 = $pm$0 + 80048 | 0;
  }
 } while (0);
 return 0;
}

function _fmod($x, $y) {
 $x = +$x;
 $y = +$y;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $102 = 0, $105 = 0, $107 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $128 = 0, $131 = 0, $132 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $14 = 0, $16 = 0, $2 = 0, $22 = 0, $23 = 0, $3 = 0, $32 = 0, $33 = 0, $39 = 0, $4 = 0, $40 = 0, $48 = 0, $52 = 0, $53 = 0, $59 = 0, $6 = 0, $60 = 0, $68 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $8 = 0, $82 = 0, $84 = 0, $86 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $98 = 0, $cmp85$lcssa = 0, $cmp8572 = 0, $conv = 0, $conv5 = 0, $dec = 0, $dec117 = 0, $dec64 = 0, $dec96 = 0, $ex$0$lcssa = 0, $ex$082 = 0, $ex$1 = 0, $ex$2$lcssa = 0, $ex$269 = 0, $ex$3$lcssa = 0, $ex$363 = 0, $ey$0$lcssa = 0, $ey$078 = 0, $ey$1$ph = 0, $mul = 0.0, $retval$0 = 0.0, label = 0;
 HEAPF64[tempDoublePtr >> 3] = $x;
 $0 = HEAP32[tempDoublePtr >> 2] | 0;
 $1 = HEAP32[tempDoublePtr + 4 >> 2] | 0;
 HEAPF64[tempDoublePtr >> 3] = $y;
 $2 = HEAP32[tempDoublePtr >> 2] | 0;
 $3 = HEAP32[tempDoublePtr + 4 >> 2] | 0;
 $4 = _bitshift64Lshr($0 | 0, $1 | 0, 52) | 0;
 $conv = $4 & 2047;
 $6 = _bitshift64Lshr($2 | 0, $3 | 0, 52) | 0;
 $conv5 = $6 & 2047;
 $8 = $1 & -2147483648;
 $9 = _bitshift64Shl($2 | 0, $3 | 0, 1) | 0;
 $10 = tempRet0;
 L1 : do if (($9 | 0) == 0 & ($10 | 0) == 0) label = 3; else {
  $14 = ___DOUBLE_BITS_272($y) | 0;
  $16 = tempRet0 & 2147483647;
  if (($conv | 0) == 2047 | ($16 >>> 0 > 2146435072 | ($16 | 0) == 2146435072 & $14 >>> 0 > 0)) label = 3; else {
   $22 = _bitshift64Shl($0 | 0, $1 | 0, 1) | 0;
   $23 = tempRet0;
   if (!($23 >>> 0 > $10 >>> 0 | ($23 | 0) == ($10 | 0) & $22 >>> 0 > $9 >>> 0)) return +(($22 | 0) == ($9 | 0) & ($23 | 0) == ($10 | 0) ? $x * 0.0 : $x);
   if (!$conv) {
    $32 = _bitshift64Shl($0 | 0, $1 | 0, 12) | 0;
    $33 = tempRet0;
    if (($33 | 0) > -1 | ($33 | 0) == -1 & $32 >>> 0 > 4294967295) {
     $39 = $32;
     $40 = $33;
     $ex$082 = 0;
     while (1) {
      $dec = $ex$082 + -1 | 0;
      $39 = _bitshift64Shl($39 | 0, $40 | 0, 1) | 0;
      $40 = tempRet0;
      if (!(($40 | 0) > -1 | ($40 | 0) == -1 & $39 >>> 0 > 4294967295)) {
       $ex$0$lcssa = $dec;
       break;
      } else $ex$082 = $dec;
     }
    } else $ex$0$lcssa = 0;
    $48 = _bitshift64Shl($0 | 0, $1 | 0, 1 - $ex$0$lcssa | 0) | 0;
    $72 = $48;
    $73 = tempRet0;
    $ex$1 = $ex$0$lcssa;
   } else {
    $72 = $0;
    $73 = $1 & 1048575 | 1048576;
    $ex$1 = $conv;
   }
   if (!$conv5) {
    $52 = _bitshift64Shl($2 | 0, $3 | 0, 12) | 0;
    $53 = tempRet0;
    if (($53 | 0) > -1 | ($53 | 0) == -1 & $52 >>> 0 > 4294967295) {
     $59 = $52;
     $60 = $53;
     $ey$078 = 0;
     while (1) {
      $dec64 = $ey$078 + -1 | 0;
      $59 = _bitshift64Shl($59 | 0, $60 | 0, 1) | 0;
      $60 = tempRet0;
      if (!(($60 | 0) > -1 | ($60 | 0) == -1 & $59 >>> 0 > 4294967295)) {
       $ey$0$lcssa = $dec64;
       break;
      } else $ey$078 = $dec64;
     }
    } else $ey$0$lcssa = 0;
    $68 = _bitshift64Shl($2 | 0, $3 | 0, 1 - $ey$0$lcssa | 0) | 0;
    $74 = $68;
    $75 = tempRet0;
    $ey$1$ph = $ey$0$lcssa;
   } else {
    $74 = $2;
    $75 = $3 & 1048575 | 1048576;
    $ey$1$ph = $conv5;
   }
   $76 = _i64Subtract($72 | 0, $73 | 0, $74 | 0, $75 | 0) | 0;
   $77 = tempRet0;
   $82 = ($77 | 0) > -1 | ($77 | 0) == -1 & $76 >>> 0 > 4294967295;
   L23 : do if (($ex$1 | 0) > ($ey$1$ph | 0)) {
    $134 = $72;
    $135 = $73;
    $84 = $76;
    $86 = $77;
    $cmp8572 = $82;
    $ex$269 = $ex$1;
    while (1) {
     if ($cmp8572) if (($84 | 0) == 0 & ($86 | 0) == 0) break; else {
      $88 = $84;
      $89 = $86;
     } else {
      $88 = $134;
      $89 = $135;
     }
     $90 = _bitshift64Shl($88 | 0, $89 | 0, 1) | 0;
     $91 = tempRet0;
     $dec96 = $ex$269 + -1 | 0;
     $92 = _i64Subtract($90 | 0, $91 | 0, $74 | 0, $75 | 0) | 0;
     $93 = tempRet0;
     $98 = ($93 | 0) > -1 | ($93 | 0) == -1 & $92 >>> 0 > 4294967295;
     if (($dec96 | 0) > ($ey$1$ph | 0)) {
      $134 = $90;
      $135 = $91;
      $84 = $92;
      $86 = $93;
      $cmp8572 = $98;
      $ex$269 = $dec96;
     } else {
      $100 = $92;
      $102 = $93;
      $136 = $90;
      $137 = $91;
      $cmp85$lcssa = $98;
      $ex$2$lcssa = $dec96;
      break L23;
     }
    }
    $retval$0 = $x * 0.0;
    break L1;
   } else {
    $100 = $76;
    $102 = $77;
    $136 = $72;
    $137 = $73;
    $cmp85$lcssa = $82;
    $ex$2$lcssa = $ex$1;
   } while (0);
   if ($cmp85$lcssa) if (($100 | 0) == 0 & ($102 | 0) == 0) {
    $retval$0 = $x * 0.0;
    break;
   } else {
    $105 = $102;
    $107 = $100;
   } else {
    $105 = $137;
    $107 = $136;
   }
   if ($105 >>> 0 < 1048576 | ($105 | 0) == 1048576 & $107 >>> 0 < 0) {
    $111 = $107;
    $112 = $105;
    $ex$363 = $ex$2$lcssa;
    while (1) {
     $113 = _bitshift64Shl($111 | 0, $112 | 0, 1) | 0;
     $114 = tempRet0;
     $dec117 = $ex$363 + -1 | 0;
     if ($114 >>> 0 < 1048576 | ($114 | 0) == 1048576 & $113 >>> 0 < 0) {
      $111 = $113;
      $112 = $114;
      $ex$363 = $dec117;
     } else {
      $120 = $113;
      $121 = $114;
      $ex$3$lcssa = $dec117;
      break;
     }
    }
   } else {
    $120 = $107;
    $121 = $105;
    $ex$3$lcssa = $ex$2$lcssa;
   }
   if (($ex$3$lcssa | 0) > 0) {
    $122 = _i64Add($120 | 0, $121 | 0, 0, -1048576) | 0;
    $123 = tempRet0;
    $124 = _bitshift64Shl($ex$3$lcssa | 0, 0, 52) | 0;
    $131 = $123 | tempRet0;
    $132 = $122 | $124;
   } else {
    $128 = _bitshift64Lshr($120 | 0, $121 | 0, 1 - $ex$3$lcssa | 0) | 0;
    $131 = tempRet0;
    $132 = $128;
   }
   HEAP32[tempDoublePtr >> 2] = $132;
   HEAP32[tempDoublePtr + 4 >> 2] = $131 | $8;
   $retval$0 = +HEAPF64[tempDoublePtr >> 3];
  }
 } while (0);
 if ((label | 0) == 3) {
  $mul = $x * $y;
  $retval$0 = $mul / $mul;
 }
 return +$retval$0;
}

function _arGetContour($limage, $xsize, $ysize, $label_ref, $label, $clip, $marker_info2) {
 $limage = $limage | 0;
 $xsize = $xsize | 0;
 $ysize = $ysize | 0;
 $label_ref = $label_ref | 0;
 $label = $label | 0;
 $clip = $clip | 0;
 $marker_info2 = $marker_info2 | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $14 = 0, $15 = 0, $2 = 0, $22 = 0, $3 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $add112 = 0, $arrayidx16 = 0, $arrayidx17 = 0, $arrayidx29 = 0, $arrayidx35 = 0, $arrayidx37 = 0, $arrayidx74 = 0, $cmp113 = 0, $coord_num = 0, $dir$0 = 0, $dir$1 = 0, $dir$1$in = 0, $dmax$0 = 0, $i$0 = 0, $i$1 = 0, $i$2 = 0, $i$2$v1$0 = 0, $i$3 = 0, $i$4 = 0, $i$5 = 0, $inc86 = 0, $mul = 0, $mul104 = 0, $mul36 = 0, $p1$0 = 0, $retval$0 = 0, $sub100 = 0, $sub107 = 0, $sub141 = 0, $sub157 = 0, $v1$0 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer3 = 0, $wx = 0, $wy = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80032 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(80032);
 $vararg_buffer3 = sp + 16 | 0;
 $vararg_buffer1 = sp + 8 | 0;
 $vararg_buffer = sp;
 $wx = sp + 40024 | 0;
 $wy = sp + 24 | 0;
 $0 = HEAP32[$clip + 8 >> 2] | 0;
 $mul = Math_imul($0, $xsize) | 0;
 $1 = HEAP32[$clip >> 2] | 0;
 $2 = HEAP32[$clip + 4 >> 2] | 0;
 $i$0 = $1;
 $p1$0 = $limage + ($mul + $1 << 1) | 0;
 while (1) {
  if (($i$0 | 0) > ($2 | 0)) {
   label = 6;
   break;
  }
  $3 = HEAP16[$p1$0 >> 1] | 0;
  if ($3 << 16 >> 16 > 0) if ((HEAP32[$label_ref + (($3 << 16 >> 16) + -1 << 2) >> 2] | 0) == ($label | 0)) {
   label = 7;
   break;
  }
  $i$0 = $i$0 + 1 | 0;
  $p1$0 = $p1$0 + 2 | 0;
 }
 do if ((label | 0) == 6) {
  _arLog(3, 3692, $vararg_buffer);
  $retval$0 = -1;
 } else if ((label | 0) == 7) {
  $coord_num = $marker_info2 + 24 | 0;
  HEAP32[$coord_num >> 2] = 1;
  $arrayidx16 = $marker_info2 + 28 | 0;
  HEAP32[$arrayidx16 >> 2] = $i$0;
  $arrayidx17 = $marker_info2 + 40028 | 0;
  HEAP32[$arrayidx17 >> 2] = $0;
  $11 = 1;
  $5 = $0;
  $6 = $i$0;
  $dir$0 = 5;
  while (1) {
   $arrayidx29 = $limage + ((Math_imul($5, $xsize) | 0) + $6 << 1) | 0;
   $dir$1$in = $dir$0 + 5 | 0;
   $i$1 = 0;
   while (1) {
    $dir$1 = ($dir$1$in | 0) % 8 | 0;
    $arrayidx37 = 440 + ($dir$1 << 2) | 0;
    $arrayidx35 = 472 + ($dir$1 << 2) | 0;
    if (($i$1 | 0) >= 8) {
     label = 12;
     break;
    }
    $7 = HEAP32[$arrayidx35 >> 2] | 0;
    $mul36 = Math_imul($7, $xsize) | 0;
    $8 = HEAP32[$arrayidx37 >> 2] | 0;
    if ((HEAP16[$arrayidx29 + ($mul36 + $8 << 1) >> 1] | 0) > 0) {
     $10 = $8;
     $14 = $7;
     break;
    }
    $dir$1$in = $dir$1 + 1 | 0;
    $i$1 = $i$1 + 1 | 0;
   }
   if ((label | 0) == 12) {
    label = 0;
    if (($i$1 | 0) == 8) {
     label = 14;
     break;
    }
    $10 = HEAP32[$arrayidx37 >> 2] | 0;
    $14 = HEAP32[$arrayidx35 >> 2] | 0;
   }
   HEAP32[$marker_info2 + 28 + ($11 << 2) >> 2] = $10 + $6;
   $12 = HEAP32[$coord_num >> 2] | 0;
   HEAP32[$marker_info2 + 40028 + ($12 << 2) >> 2] = $14 + (HEAP32[$marker_info2 + 40028 + ($12 + -1 << 2) >> 2] | 0);
   $15 = HEAP32[$coord_num >> 2] | 0;
   $arrayidx74 = $marker_info2 + 28 + ($15 << 2) | 0;
   if ((HEAP32[$arrayidx74 >> 2] | 0) == ($i$0 | 0)) if ((HEAP32[$marker_info2 + 40028 + ($15 << 2) >> 2] | 0) == ($0 | 0)) {
    $dmax$0 = 0;
    $i$2 = 1;
    $v1$0 = 0;
    label = 20;
    break;
   }
   $inc86 = $15 + 1 | 0;
   HEAP32[$coord_num >> 2] = $inc86;
   if (($inc86 | 0) == 9999) {
    label = 19;
    break;
   }
   $11 = $inc86;
   $5 = HEAP32[$marker_info2 + 40028 + ($15 << 2) >> 2] | 0;
   $6 = HEAP32[$arrayidx74 >> 2] | 0;
   $dir$0 = $dir$1;
  }
  if ((label | 0) == 14) {
   _arLog(3, 3699, $vararg_buffer1);
   $retval$0 = -1;
   break;
  } else if ((label | 0) == 19) {
   _arLog(3, 3706, $vararg_buffer3);
   $retval$0 = -1;
   break;
  } else if ((label | 0) == 20) {
   while (1) {
    label = 0;
    if (($i$2 | 0) >= ($15 | 0)) {
     $i$3 = 0;
     break;
    }
    $sub100 = (HEAP32[$marker_info2 + 28 + ($i$2 << 2) >> 2] | 0) - $i$0 | 0;
    $mul104 = Math_imul($sub100, $sub100) | 0;
    $sub107 = (HEAP32[$marker_info2 + 40028 + ($i$2 << 2) >> 2] | 0) - $0 | 0;
    $add112 = (Math_imul($sub107, $sub107) | 0) + $mul104 | 0;
    $cmp113 = ($add112 | 0) > ($dmax$0 | 0);
    $i$2$v1$0 = $cmp113 ? $i$2 : $v1$0;
    $dmax$0 = $cmp113 ? $add112 : $dmax$0;
    $i$2 = $i$2 + 1 | 0;
    $v1$0 = $i$2$v1$0;
    label = 20;
   }
   while (1) {
    if (($i$3 | 0) >= ($v1$0 | 0)) {
     $22 = $15;
     $i$4 = $v1$0;
     break;
    }
    HEAP32[$wx + ($i$3 << 2) >> 2] = HEAP32[$marker_info2 + 28 + ($i$3 << 2) >> 2];
    HEAP32[$wy + ($i$3 << 2) >> 2] = HEAP32[$marker_info2 + 40028 + ($i$3 << 2) >> 2];
    $i$3 = $i$3 + 1 | 0;
   }
   while (1) {
    if (($i$4 | 0) >= ($22 | 0)) {
     $i$5 = 0;
     break;
    }
    $sub141 = $i$4 - $v1$0 | 0;
    HEAP32[$marker_info2 + 28 + ($sub141 << 2) >> 2] = HEAP32[$marker_info2 + 28 + ($i$4 << 2) >> 2];
    HEAP32[$marker_info2 + 40028 + ($sub141 << 2) >> 2] = HEAP32[$marker_info2 + 40028 + ($i$4 << 2) >> 2];
    $22 = HEAP32[$coord_num >> 2] | 0;
    $i$4 = $i$4 + 1 | 0;
   }
   while (1) {
    if (($i$5 | 0) >= ($v1$0 | 0)) break;
    $sub157 = $i$5 - $v1$0 | 0;
    HEAP32[$marker_info2 + 28 + ((HEAP32[$coord_num >> 2] | 0) + $sub157 << 2) >> 2] = HEAP32[$wx + ($i$5 << 2) >> 2];
    HEAP32[$marker_info2 + 40028 + ((HEAP32[$coord_num >> 2] | 0) + $sub157 << 2) >> 2] = HEAP32[$wy + ($i$5 << 2) >> 2];
    $i$5 = $i$5 + 1 | 0;
   }
   HEAP32[$marker_info2 + 28 + (HEAP32[$coord_num >> 2] << 2) >> 2] = HEAP32[$arrayidx16 >> 2];
   HEAP32[$marker_info2 + 40028 + (HEAP32[$coord_num >> 2] << 2) >> 2] = HEAP32[$arrayidx17 >> 2];
   HEAP32[$coord_num >> 2] = (HEAP32[$coord_num >> 2] | 0) + 1;
   $retval$0 = 0;
   break;
  }
 } while (0);
 STACKTOP = sp;
 return $retval$0 | 0;
}

function __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertIPKcEENS_9enable_ifIXaasr21__is_forward_iteratorIT_EE5valuesr38__libcpp_string_gets_noexcept_iteratorISC_EE5valueENS_11__wrap_iterIPcEEE4typeENSD_ISA_EESC_SC_($this, $__pos, $__first, $__last) {
 $this = $this | 0;
 $__pos = $__pos | 0;
 $__first = $__first | 0;
 $__last = $__last | 0;
 var $0 = 0, $15 = 0, $3 = 0, $4 = 0, $6 = 0, $9 = 0, $__first$addr$0 = 0, $__first$addr$0$i$i = 0, $__p$0 = 0, $__p$0$i$i = 0, $__p$0$ph$i$i = 0, $__p$1 = 0, $__size_$i$i$i = 0, $__temp = 0, $add$ptr14 = 0, $add$ptr25 = 0, $add34 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $and$i$i$i$i = 0, $call$i$i$i = 0, $call15 = 0, $cond$i = 0, $cond$i$i = 0, $cond$i$i108129 = 0, $cond$i$i49 = 0, $cond$i$i58132134 = 0, $cond$i$i66136 = 0, $cond$i75 = 0, $cond$i82138 = 0, $cond$i90 = 0, $retval$sroa$0$1 = 0, $sub$ptr$sub$i = 0, $sub$ptr$sub$i$i = 0, $sub22 = 0, $tobool$i$i$i = 0, $tobool$i$i$i112 = 0, $tobool$i$i78 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 $agg$tmp$byval_copy = sp + 16 | 0;
 $__temp = sp;
 $agg$tmp = sp + 12 | 0;
 $__size_$i$i$i = $this + 11 | 0;
 $0 = HEAP8[$__size_$i$i$i >> 0] | 0;
 $tobool$i$i$i = $0 << 24 >> 24 < 0;
 if ($tobool$i$i$i) $cond$i$i = HEAP32[$this >> 2] | 0; else $cond$i$i = $this;
 $3 = HEAP32[$__pos >> 2] | 0;
 $sub$ptr$sub$i = $3 - $cond$i$i | 0;
 $sub$ptr$sub$i$i = $__last - $__first | 0;
 do if (!$sub$ptr$sub$i$i) {
  $15 = $0;
  label = 35;
 } else {
  if ($tobool$i$i$i) {
   $4 = HEAP32[$this >> 2] | 0;
   $cond$i$i58132134 = $4;
   $cond$i$i66136 = $4;
   $cond$i90 = HEAP32[$this + 4 >> 2] | 0;
  } else {
   $cond$i$i58132134 = $this;
   $cond$i$i66136 = $this;
   $cond$i90 = $0 & 255;
  }
  if (__ZNSt3__214__ptr_in_rangeIcEEbPKT_S3_S3_($__first, $cond$i$i58132134, $cond$i$i66136 + $cond$i90 | 0) | 0) {
   HEAP32[$__temp >> 2] = 0;
   HEAP32[$__temp + 4 >> 2] = 0;
   HEAP32[$__temp + 8 >> 2] = 0;
   if ($sub$ptr$sub$i$i >>> 0 > 4294967279) __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($__temp);
   if ($sub$ptr$sub$i$i >>> 0 < 11) {
    HEAP8[$__temp + 11 >> 0] = $sub$ptr$sub$i$i;
    $__p$0$ph$i$i = $__temp;
   } else {
    $and$i$i$i$i = $sub$ptr$sub$i$i + 16 & -16;
    $call$i$i$i = __ZN10__cxxabiv112_GLOBAL__N_112malloc_allocIcE8allocateEj($and$i$i$i$i) | 0;
    HEAP32[$__temp >> 2] = $call$i$i$i;
    HEAP32[$__temp + 8 >> 2] = $and$i$i$i$i | -2147483648;
    HEAP32[$__temp + 4 >> 2] = $sub$ptr$sub$i$i;
    $__p$0$ph$i$i = $call$i$i$i;
   }
   $__first$addr$0$i$i = $__first;
   $__p$0$i$i = $__p$0$ph$i$i;
   while (1) {
    if (($__first$addr$0$i$i | 0) == ($__last | 0)) break;
    __ZNSt3__211char_traitsIcE6assignERcRKc($__p$0$i$i, $__first$addr$0$i$i);
    $__first$addr$0$i$i = $__first$addr$0$i$i + 1 | 0;
    $__p$0$i$i = $__p$0$i$i + 1 | 0;
   }
   HEAP8[$agg$tmp$byval_copy >> 0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($__p$0$ph$i$i + $sub$ptr$sub$i$i | 0, $agg$tmp$byval_copy);
   HEAP32[$agg$tmp >> 2] = $3;
   $6 = HEAP8[$__temp + 11 >> 0] | 0;
   $tobool$i$i$i112 = $6 << 24 >> 24 < 0;
   $cond$i$i108129 = $tobool$i$i$i112 ? HEAP32[$__temp >> 2] | 0 : $__temp;
   $add$ptr14 = $cond$i$i108129 + ($tobool$i$i$i112 ? HEAP32[$__temp + 4 >> 2] | 0 : $6 & 255) | 0;
   HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
   $call15 = __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertIPKcEENS_9enable_ifIXaasr21__is_forward_iteratorIT_EE5valuesr38__libcpp_string_gets_noexcept_iteratorISC_EE5valueENS_11__wrap_iterIPcEEE4typeENSD_ISA_EESC_SC_($this, $agg$tmp$byval_copy, $cond$i$i108129, $add$ptr14) | 0;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($__temp);
   $retval$sroa$0$1 = $call15;
   break;
  }
  $9 = HEAP8[$__size_$i$i$i >> 0] | 0;
  $tobool$i$i78 = $9 << 24 >> 24 < 0;
  if ($tobool$i$i78) {
   $cond$i75 = (HEAP32[$this + 8 >> 2] & 2147483647) + -1 | 0;
   $cond$i82138 = HEAP32[$this + 4 >> 2] | 0;
  } else {
   $cond$i75 = 10;
   $cond$i82138 = $9 & 255;
  }
  $add34 = $cond$i82138 + $sub$ptr$sub$i$i | 0;
  if (($cond$i75 - $cond$i82138 | 0) >>> 0 < $sub$ptr$sub$i$i >>> 0) {
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE9__grow_byEjjjjjj($this, $cond$i75, $add34 - $cond$i75 | 0, $cond$i82138, $sub$ptr$sub$i, $sub$ptr$sub$i$i);
   $__p$0 = HEAP32[$this >> 2] | 0;
  } else {
   if ($tobool$i$i78) $cond$i = HEAP32[$this >> 2] | 0; else $cond$i = $this;
   $sub22 = $cond$i82138 - $sub$ptr$sub$i | 0;
   if (!$sub22) $__p$0 = $cond$i; else {
    $add$ptr25 = $cond$i + $sub$ptr$sub$i | 0;
    __ZNSt3__211char_traitsIcE4moveEPcPKcj($add$ptr25 + $sub$ptr$sub$i$i | 0, $add$ptr25, $sub22) | 0;
    $__p$0 = $cond$i;
   }
  }
  if ((HEAP8[$__size_$i$i$i >> 0] | 0) < 0) HEAP32[$this + 4 >> 2] = $add34; else HEAP8[$__size_$i$i$i >> 0] = $add34;
  HEAP8[$agg$tmp$byval_copy >> 0] = 0;
  __ZNSt3__211char_traitsIcE6assignERcRKc($__p$0 + $add34 | 0, $agg$tmp$byval_copy);
  $__first$addr$0 = $__first;
  $__p$1 = $__p$0 + $sub$ptr$sub$i | 0;
  while (1) {
   if (($__first$addr$0 | 0) == ($__last | 0)) break;
   __ZNSt3__211char_traitsIcE6assignERcRKc($__p$1, $__first$addr$0);
   $__first$addr$0 = $__first$addr$0 + 1 | 0;
   $__p$1 = $__p$1 + 1 | 0;
  }
  $15 = HEAP8[$__size_$i$i$i >> 0] | 0;
  label = 35;
 } while (0);
 if ((label | 0) == 35) {
  if ($15 << 24 >> 24 < 0) $cond$i$i49 = HEAP32[$this >> 2] | 0; else $cond$i$i49 = $this;
  $retval$sroa$0$1 = $cond$i$i49 + $sub$ptr$sub$i | 0;
 }
 STACKTOP = sp;
 return $retval$sroa$0$1 | 0;
}

function _arVecTridiagonalize($a, $d, $e) {
 $a = $a | 0;
 $d = $d | 0;
 $e = $e | 0;
 var $0 = 0, $15 = 0.0, $16 = 0, $22 = 0, $24 = 0, $27 = 0, $29 = 0, $8 = 0, $add148 = 0, $add19 = 0, $add43 = 0.0, $add53 = 0.0, $arrayidx = 0, $arrayidx133 = 0, $arrayidx144 = 0, $arrayidx157 = 0, $arrayidx175 = 0, $arrayidx20 = 0, $arrayidx40 = 0, $arrayidx81 = 0, $arrayidx95 = 0, $call = 0.0, $call165 = 0.0, $clm18 = 0, $clm64 = 0, $div = 0.0, $i$0 = 0, $i$1 = 0, $i$1$in = 0, $i$2 = 0, $i$3 = 0, $j$0 = 0, $j$1 = 0, $j$2 = 0, $j$3 = 0, $k$0 = 0, $k$1 = 0, $mul109 = 0, $mul160 = 0, $mul48 = 0, $mul93 = 0, $retval$0 = 0, $s$0 = 0.0, $s$1 = 0.0, $sub = 0, $sub119 = 0, $sub153 = 0, $sub17 = 0, $sub82 = 0.0, $wv1 = 0, $wv2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $wv1 = sp + 8 | 0;
 $wv2 = sp;
 $0 = HEAP32[$a + 8 >> 2] | 0;
 L1 : do if (($0 | 0) == (HEAP32[$a + 4 >> 2] | 0)) if (($0 | 0) == (HEAP32[$d + 4 >> 2] | 0)) if (($0 | 0) == ((HEAP32[$e + 4 >> 2] | 0) + 1 | 0)) {
  $sub = $0 + -2 | 0;
  $clm18 = $wv1 + 4 | 0;
  $clm64 = $wv2 + 4 | 0;
  $k$0 = 0;
  L5 : while (1) {
   if (($k$0 | 0) >= ($sub | 0)) break;
   $arrayidx = (HEAP32[$a >> 2] | 0) + ((Math_imul($k$0, $0) | 0) << 3) | 0;
   HEAPF64[(HEAP32[$d >> 2] | 0) + ($k$0 << 3) >> 3] = +HEAPF64[$arrayidx + ($k$0 << 3) >> 3];
   $sub17 = $0 - $k$0 + -1 | 0;
   HEAP32[$clm18 >> 2] = $sub17;
   $add19 = $k$0 + 1 | 0;
   $arrayidx20 = $arrayidx + ($add19 << 3) | 0;
   HEAP32[$wv1 >> 2] = $arrayidx20;
   $call = +_arVecHousehold($wv1);
   HEAPF64[(HEAP32[$e >> 2] | 0) + ($k$0 << 3) >> 3] = $call;
   if ($call == 0.0) {
    $k$0 = $add19;
    continue;
   }
   $8 = HEAP32[$d >> 2] | 0;
   $i$0 = $add19;
   while (1) {
    if (($i$0 | 0) < ($0 | 0)) {
     $j$0 = $add19;
     $s$0 = 0.0;
    } else break;
    while (1) {
     if (($j$0 | 0) >= ($i$0 | 0)) break;
     $arrayidx40 = (HEAP32[$a >> 2] | 0) + ((Math_imul($j$0, $0) | 0) + $i$0 << 3) | 0;
     $add43 = $s$0 + +HEAPF64[$arrayidx40 >> 3] * +HEAPF64[$arrayidx + ($j$0 << 3) >> 3];
     $j$0 = $j$0 + 1 | 0;
     $s$0 = $add43;
    }
    $mul48 = Math_imul($i$0, $0) | 0;
    $j$1 = $i$0;
    $s$1 = $s$0;
    while (1) {
     if (($j$1 | 0) >= ($0 | 0)) break;
     $add53 = $s$1 + +HEAPF64[(HEAP32[$a >> 2] | 0) + ($j$1 + $mul48 << 3) >> 3] * +HEAPF64[$arrayidx + ($j$1 << 3) >> 3];
     $j$1 = $j$1 + 1 | 0;
     $s$1 = $add53;
    }
    HEAPF64[$8 + ($i$0 << 3) >> 3] = $s$1;
    $i$0 = $i$0 + 1 | 0;
   }
   HEAP32[$clm64 >> 2] = $sub17;
   HEAP32[$clm18 >> 2] = $sub17;
   HEAP32[$wv1 >> 2] = $arrayidx20;
   HEAP32[$wv2 >> 2] = $8 + ($add19 << 3);
   $div = +_arVecInnerproduct($wv1, $wv2) * .5;
   $i$1$in = $0;
   L20 : while (1) {
    $i$1 = $i$1$in + -1 | 0;
    if (($i$1 | 0) <= ($k$0 | 0)) {
     $k$0 = $add19;
     continue L5;
    }
    $15 = +HEAPF64[$arrayidx + ($i$1 << 3) >> 3];
    $16 = HEAP32[$d >> 2] | 0;
    $arrayidx81 = $16 + ($i$1 << 3) | 0;
    $sub82 = +HEAPF64[$arrayidx81 >> 3] - $div * $15;
    HEAPF64[$arrayidx81 >> 3] = $sub82;
    $mul93 = Math_imul($i$1, $0) | 0;
    $j$2 = $i$1;
    while (1) {
     if (($j$2 | 0) >= ($0 | 0)) {
      $i$1$in = $i$1;
      continue L20;
     }
     $arrayidx95 = (HEAP32[$a >> 2] | 0) + ($j$2 + $mul93 << 3) | 0;
     HEAPF64[$arrayidx95 >> 3] = +HEAPF64[$arrayidx95 >> 3] - ($15 * +HEAPF64[$16 + ($j$2 << 3) >> 3] + $sub82 * +HEAPF64[$arrayidx + ($j$2 << 3) >> 3]);
     $j$2 = $j$2 + 1 | 0;
    }
   }
  }
  $sub119 = $0 + -1 | 0;
  if (($0 | 0) > 1) {
   $22 = HEAP32[$a >> 2] | 0;
   $mul109 = Math_imul($sub, $0) | 0;
   $24 = HEAP32[$d >> 2] | 0;
   HEAPF64[$24 + ($sub << 3) >> 3] = +HEAPF64[$22 + ($mul109 + $sub << 3) >> 3];
   HEAPF64[(HEAP32[$e >> 2] | 0) + ($sub << 3) >> 3] = +HEAPF64[$22 + ($mul109 + $sub119 << 3) >> 3];
   $27 = $22;
   $29 = $24;
   label = 24;
  } else if (($0 | 0) == 1) {
   $27 = HEAP32[$a >> 2] | 0;
   $29 = HEAP32[$d >> 2] | 0;
   label = 24;
  } else $k$1 = $sub119;
  if ((label | 0) == 24) {
   $arrayidx133 = $27 + ((Math_imul($sub119, $0) | 0) + $sub119 << 3) | 0;
   HEAPF64[$29 + ($sub119 << 3) >> 3] = +HEAPF64[$arrayidx133 >> 3];
   $k$1 = $sub119;
  }
  while (1) {
   if (($k$1 | 0) <= -1) {
    $retval$0 = 0;
    break L1;
   }
   $arrayidx144 = (HEAP32[$a >> 2] | 0) + ((Math_imul($k$1, $0) | 0) << 3) | 0;
   L36 : do if (($k$1 | 0) < ($sub | 0)) {
    $add148 = $k$1 + 1 | 0;
    $sub153 = $0 - $k$1 + -1 | 0;
    $arrayidx157 = $arrayidx144 + ($add148 << 3) | 0;
    $i$2 = $add148;
    while (1) {
     if (($i$2 | 0) >= ($0 | 0)) {
      $i$3 = 0;
      break L36;
     }
     HEAP32[$clm64 >> 2] = $sub153;
     HEAP32[$clm18 >> 2] = $sub153;
     HEAP32[$wv1 >> 2] = $arrayidx157;
     $mul160 = Math_imul($i$2, $0) | 0;
     HEAP32[$wv2 >> 2] = (HEAP32[$a >> 2] | 0) + ($add148 + $mul160 << 3);
     $call165 = +_arVecInnerproduct($wv1, $wv2);
     $j$3 = $add148;
     while (1) {
      if (($j$3 | 0) >= ($0 | 0)) break;
      $arrayidx175 = (HEAP32[$a >> 2] | 0) + ($j$3 + $mul160 << 3) | 0;
      HEAPF64[$arrayidx175 >> 3] = +HEAPF64[$arrayidx175 >> 3] - $call165 * +HEAPF64[$arrayidx144 + ($j$3 << 3) >> 3];
      $j$3 = $j$3 + 1 | 0;
     }
     $i$2 = $i$2 + 1 | 0;
    }
   } else $i$3 = 0; while (0);
   while (1) {
    if (($i$3 | 0) >= ($0 | 0)) break;
    HEAPF64[$arrayidx144 + ($i$3 << 3) >> 3] = 0.0;
    $i$3 = $i$3 + 1 | 0;
   }
   HEAPF64[$arrayidx144 + ($k$1 << 3) >> 3] = 1.0;
   $k$1 = $k$1 + -1 | 0;
  }
 } else $retval$0 = -1; else $retval$0 = -1; else $retval$0 = -1; while (0);
 STACKTOP = sp;
 return $retval$0 | 0;
}

function _arPattLoadFromBuffer($pattHandle, $buffer) {
 $pattHandle = $pattHandle | 0;
 $buffer = $buffer | 0;
 var $0 = 0, $14 = 0, $15 = 0, $20 = 0, $3 = 0, $4 = 0, $9 = 0, $add = 0, $add109 = 0, $add153 = 0, $arrayidx140 = 0, $arrayidx39 = 0, $arrayidx48 = 0, $arrayidx68 = 0, $arrayidx96 = 0, $buffPtr$0 = 0, $buffPtr$1 = 0, $buffPtr$2 = 0, $buffPtr$3 = 0, $call = 0, $call113 = 0.0, $call158 = 0.0, $call31 = 0, $call32 = 0, $cmp40 = 0, $cmp59 = 0, $div84 = 0, $h$0 = 0, $i$0 = 0, $i$1 = 0, $i$2 = 0, $i1$0 = 0, $i2$0 = 0, $i3$0 = 0, $l$0 = 0, $l$1 = 0, $l$2 = 0, $m$0 = 0, $m$1 = 0, $mul = 0, $patt = 0, $pattBW = 0, $pattSize = 0, $pattf = 0, $pattpow = 0, $pattpowBW = 0, $retval$0 = 0, $sub = 0, $sub141 = 0, $sub97 = 0, $vararg_buffer1 = 0, $vararg_buffer3 = 0, $vararg_buffer5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 $vararg_buffer5 = sp + 24 | 0;
 $vararg_buffer3 = sp + 16 | 0;
 $vararg_buffer1 = sp + 8 | 0;
 do if (!$pattHandle) {
  _arLog(3, 4001, sp);
  $retval$0 = -1;
 } else {
  if (!$buffer) {
   _arLog(3, 4026, $vararg_buffer1);
   $retval$0 = -1;
   break;
  }
  $pattf = $pattHandle + 8 | 0;
  $0 = HEAP32[$pattHandle + 4 >> 2] | 0;
  $i$0 = 0;
  while (1) {
   if (($i$0 | 0) >= ($0 | 0)) break;
   if (!(HEAP32[(HEAP32[$pattf >> 2] | 0) + ($i$0 << 2) >> 2] | 0)) break;
   $i$0 = $i$0 + 1 | 0;
  }
  if (($i$0 | 0) == ($0 | 0)) $retval$0 = -1; else {
   $call = ___strdup($buffer) | 0;
   if (!$call) {
    _arLog(3, 4071, $vararg_buffer3);
    $retval$0 = -1;
    break;
   }
   $pattSize = $pattHandle + 28 | 0;
   $patt = $pattHandle + 12 | 0;
   $mul = $i$0 << 2;
   $pattBW = $pattHandle + 20 | 0;
   $pattpow = $pattHandle + 16 | 0;
   $pattpowBW = $pattHandle + 24 | 0;
   $buffPtr$0 = _strtok($call, 4094) | 0;
   $h$0 = 0;
   L16 : while (1) {
    if (($h$0 | 0) >= 4) {
     label = 35;
     break;
    }
    $add = $h$0 + $mul | 0;
    $buffPtr$1 = $buffPtr$0;
    $i3$0 = 0;
    $l$0 = 0;
    while (1) {
     if (($i3$0 | 0) >= 3) break;
     $cmp40 = ($i3$0 | 0) == 0;
     $cmp59 = ($i3$0 | 0) == 2;
     $3 = HEAP32[$pattSize >> 2] | 0;
     $buffPtr$2 = $buffPtr$1;
     $i2$0 = 0;
     $l$1 = $l$0;
     while (1) {
      if (($i2$0 | 0) < ($3 | 0)) {
       $4 = $3;
       $buffPtr$3 = $buffPtr$2;
       $i1$0 = 0;
       $l$2 = $l$1;
      } else break;
      while (1) {
       if (($i1$0 | 0) >= ($4 | 0)) break;
       if (!$buffPtr$3) {
        label = 20;
        break L16;
       }
       $call31 = _atoi($buffPtr$3) | 0;
       $call32 = _strtok(0, 4094) | 0;
       $sub = 255 - $call31 | 0;
       $arrayidx39 = (HEAP32[(HEAP32[$patt >> 2] | 0) + ($add << 2) >> 2] | 0) + ((((Math_imul(HEAP32[$pattSize >> 2] | 0, $i2$0) | 0) + $i1$0 | 0) * 3 | 0) + $i3$0 << 2) | 0;
       HEAP32[$arrayidx39 >> 2] = $sub;
       $9 = HEAP32[(HEAP32[$pattBW >> 2] | 0) + ($add << 2) >> 2] | 0;
       $arrayidx48 = $9 + ((Math_imul(HEAP32[$pattSize >> 2] | 0, $i2$0) | 0) + $i1$0 << 2) | 0;
       if ($cmp40) HEAP32[$arrayidx48 >> 2] = $sub; else {
        HEAP32[$arrayidx48 >> 2] = (HEAP32[$arrayidx48 >> 2] | 0) + $sub;
        if ($cmp59) {
         $arrayidx68 = $9 + ((Math_imul(HEAP32[$pattSize >> 2] | 0, $i2$0) | 0) + $i1$0 << 2) | 0;
         HEAP32[$arrayidx68 >> 2] = (HEAP32[$arrayidx68 >> 2] | 0) / 3 | 0;
        }
       }
       $4 = HEAP32[$pattSize >> 2] | 0;
       $buffPtr$3 = $call32;
       $i1$0 = $i1$0 + 1 | 0;
       $l$2 = $sub + $l$2 | 0;
      }
      $3 = $4;
      $buffPtr$2 = $buffPtr$3;
      $i2$0 = $i2$0 + 1 | 0;
      $l$1 = $l$2;
     }
     $buffPtr$1 = $buffPtr$2;
     $i3$0 = $i3$0 + 1 | 0;
     $l$0 = $l$1;
    }
    $14 = HEAP32[$pattSize >> 2] | 0;
    $div84 = ($l$0 | 0) / (Math_imul($14 * 3 | 0, $14) | 0) | 0;
    $15 = $14;
    $i$1 = 0;
    $m$0 = 0;
    while (1) {
     if (($i$1 | 0) >= (Math_imul($15 * 3 | 0, $15) | 0)) break;
     $arrayidx96 = (HEAP32[(HEAP32[$patt >> 2] | 0) + ($add << 2) >> 2] | 0) + ($i$1 << 2) | 0;
     $sub97 = (HEAP32[$arrayidx96 >> 2] | 0) - $div84 | 0;
     HEAP32[$arrayidx96 >> 2] = $sub97;
     $add109 = (Math_imul($sub97, $sub97) | 0) + $m$0 | 0;
     $15 = HEAP32[$pattSize >> 2] | 0;
     $i$1 = $i$1 + 1 | 0;
     $m$0 = $add109;
    }
    $call113 = +Math_sqrt(+(+($m$0 | 0)));
    HEAPF64[(HEAP32[$pattpow >> 2] | 0) + ($add << 3) >> 3] = $call113 == 0.0 ? 1.0e-07 : $call113;
    $20 = $15;
    $i$2 = 0;
    $m$1 = 0;
    while (1) {
     if (($i$2 | 0) >= (Math_imul($20, $20) | 0)) break;
     $arrayidx140 = (HEAP32[(HEAP32[$pattBW >> 2] | 0) + ($add << 2) >> 2] | 0) + ($i$2 << 2) | 0;
     $sub141 = (HEAP32[$arrayidx140 >> 2] | 0) - $div84 | 0;
     HEAP32[$arrayidx140 >> 2] = $sub141;
     $add153 = (Math_imul($sub141, $sub141) | 0) + $m$1 | 0;
     $20 = HEAP32[$pattSize >> 2] | 0;
     $i$2 = $i$2 + 1 | 0;
     $m$1 = $add153;
    }
    $call158 = +Math_sqrt(+(+($m$1 | 0)));
    HEAPF64[(HEAP32[$pattpowBW >> 2] | 0) + ($add << 3) >> 3] = $call158 == 0.0 ? 1.0e-07 : $call158;
    $buffPtr$0 = $buffPtr$1;
    $h$0 = $h$0 + 1 | 0;
   }
   if ((label | 0) == 20) {
    _arLog(3, 4099, $vararg_buffer5);
    _free($call);
    $retval$0 = -1;
    break;
   } else if ((label | 0) == 35) {
    _free($call);
    HEAP32[(HEAP32[$pattf >> 2] | 0) + ($i$0 << 2) >> 2] = 1;
    HEAP32[$pattHandle >> 2] = (HEAP32[$pattHandle >> 2] | 0) + 1;
    $retval$0 = $i$0;
    break;
   }
  }
 } while (0);
 STACKTOP = sp;
 return $retval$0 | 0;
}

function __ZN10__cxxabiv112_GLOBAL__N_115parse_call_exprINS0_2DbEEEPKcS4_S4_RT_($first, $last, $db) {
 $first = $first | 0;
 $last = $last | 0;
 $db = $db | 0;
 var $13 = 0, $14 = 0, $15 = 0, $16 = 0, $21 = 0, $3 = 0, $4 = 0, $7 = 0, $9 = 0, $__end_$i = 0, $__i$0$i$i = 0, $__i$0$i$i$i$i = 0, $__size_$i$i$i = 0, $__size_$i1$i$i$i$i = 0, $__size_$i3$i$i = 0, $add$ptr = 0, $add$ptr$i62 = 0, $call = 0, $call31 = 0, $cond$i$i = 0, $incdec$ptr$i$i$i = 0, $ref$tmp = 0, $ref$tmp$i$i$i$i = 0, $retval$6 = 0, $second = 0, $second22 = 0, $t$0 = 0, $tobool$i$i$i = 0, $tobool$i$i$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 $ref$tmp$i$i$i$i = sp + 12 | 0;
 $ref$tmp = sp;
 L1 : do if (($last - $first | 0) > 3) if ((HEAP8[$first >> 0] | 0) == 99) if ((HEAP8[$first + 1 >> 0] | 0) == 108) {
  $add$ptr = $first + 2 | 0;
  $call = __ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($add$ptr, $last, $db) | 0;
  if (($call | 0) == ($add$ptr | 0) | ($call | 0) == ($last | 0)) $retval$6 = $first; else {
   $__end_$i = $db + 4 | 0;
   $3 = HEAP32[$__end_$i >> 2] | 0;
   if ((HEAP32[$db >> 2] | 0) == ($3 | 0)) $retval$6 = $first; else {
    $second = $3 + -12 | 0;
    $4 = HEAP8[$second + 11 >> 0] | 0;
    $tobool$i$i$i$i$i = $4 << 24 >> 24 < 0;
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($3 + -24 | 0, $tobool$i$i$i$i$i ? HEAP32[$second >> 2] | 0 : $second, $tobool$i$i$i$i$i ? HEAP32[$3 + -8 >> 2] | 0 : $4 & 255) | 0;
    HEAP32[$ref$tmp >> 2] = 0;
    HEAP32[$ref$tmp + 4 >> 2] = 0;
    HEAP32[$ref$tmp + 8 >> 2] = 0;
    $__i$0$i$i = 0;
    while (1) {
     if (($__i$0$i$i | 0) == 3) break;
     HEAP32[$ref$tmp + ($__i$0$i$i << 2) >> 2] = 0;
     $__i$0$i$i = $__i$0$i$i + 1 | 0;
    }
    $7 = HEAP32[$__end_$i >> 2] | 0;
    $second22 = $7 + -12 | 0;
    $__size_$i1$i$i$i$i = $second22 + 11 | 0;
    if ((HEAP8[$__size_$i1$i$i$i$i >> 0] | 0) < 0) {
     $9 = HEAP32[$second22 >> 2] | 0;
     HEAP8[$ref$tmp$i$i$i$i >> 0] = 0;
     __ZNSt3__211char_traitsIcE6assignERcRKc($9, $ref$tmp$i$i$i$i);
     HEAP32[$7 + -8 >> 2] = 0;
    } else {
     HEAP8[$ref$tmp$i$i$i$i >> 0] = 0;
     __ZNSt3__211char_traitsIcE6assignERcRKc($second22, $ref$tmp$i$i$i$i);
     HEAP8[$__size_$i1$i$i$i$i >> 0] = 0;
    }
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE7reserveEj($second22);
    HEAP32[$second22 >> 2] = HEAP32[$ref$tmp >> 2];
    HEAP32[$second22 + 4 >> 2] = HEAP32[$ref$tmp + 4 >> 2];
    HEAP32[$second22 + 8 >> 2] = HEAP32[$ref$tmp + 8 >> 2];
    $__i$0$i$i$i$i = 0;
    while (1) {
     if (($__i$0$i$i$i$i | 0) == 3) break;
     HEAP32[$ref$tmp + ($__i$0$i$i$i$i << 2) >> 2] = 0;
     $__i$0$i$i$i$i = $__i$0$i$i$i$i + 1 | 0;
    }
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($ref$tmp);
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc((HEAP32[$__end_$i >> 2] | 0) + -24 | 0, 14887) | 0;
    $__size_$i$i$i = $ref$tmp$i$i$i$i + 11 | 0;
    $__size_$i3$i$i = $ref$tmp$i$i$i$i + 4 | 0;
    $t$0 = $call;
    while (1) {
     if ((HEAP8[$t$0 >> 0] | 0) == 69) break;
     $call31 = __ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($t$0, $last, $db) | 0;
     if (($call31 | 0) == ($t$0 | 0) | ($call31 | 0) == ($last | 0)) {
      $retval$6 = $first;
      break L1;
     }
     $13 = HEAP32[$__end_$i >> 2] | 0;
     if ((HEAP32[$db >> 2] | 0) == ($13 | 0)) {
      $retval$6 = $first;
      break L1;
     }
     __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($ref$tmp$i$i$i$i, $13 + -24 | 0);
     $14 = HEAP32[$__end_$i >> 2] | 0;
     $add$ptr$i62 = $14 + -24 | 0;
     $15 = $14;
     while (1) {
      if (($15 | 0) == ($add$ptr$i62 | 0)) break;
      $incdec$ptr$i$i$i = $15 + -24 | 0;
      HEAP32[$__end_$i >> 2] = $incdec$ptr$i$i$i;
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($incdec$ptr$i$i$i);
      $15 = HEAP32[$__end_$i >> 2] | 0;
     }
     $16 = HEAP8[$__size_$i$i$i >> 0] | 0;
     $tobool$i$i$i = $16 << 24 >> 24 < 0;
     $cond$i$i = $tobool$i$i$i ? HEAP32[$__size_$i3$i$i >> 2] | 0 : $16 & 255;
     if ($cond$i$i | 0) {
      if ((HEAP32[$db >> 2] | 0) == ($add$ptr$i62 | 0)) {
       label = 26;
       break;
      }
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($14 + -48 | 0, $tobool$i$i$i ? HEAP32[$ref$tmp$i$i$i$i >> 2] | 0 : $ref$tmp$i$i$i$i, $cond$i$i) | 0;
     }
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($ref$tmp$i$i$i$i);
     $t$0 = $call31;
    }
    if ((label | 0) == 26) {
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($ref$tmp$i$i$i$i);
     $retval$6 = $first;
     break;
    }
    $21 = HEAP32[$__end_$i >> 2] | 0;
    if ((HEAP32[$db >> 2] | 0) == ($21 | 0)) $retval$6 = $first; else {
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($21 + -24 | 0, 14885) | 0;
     $retval$6 = $t$0 + 1 | 0;
    }
   }
  }
 } else $retval$6 = $first; else $retval$6 = $first; else $retval$6 = $first; while (0);
 STACKTOP = sp;
 return $retval$6 | 0;
}

function __ZN10__cxxabiv112_GLOBAL__N_127parse_reinterpret_cast_exprINS0_2DbEEEPKcS4_S4_RT_($first, $last, $db) {
 $first = $first | 0;
 $last = $last | 0;
 $db = $db | 0;
 var $2 = 0, $5 = 0, $6 = 0, $7 = 0, $__end_$i = 0, $__i$0$i$i$i = 0, $__i$0$i$i$i30 = 0, $__i$0$i$i$i39 = 0, $__i$0$i$i$i47 = 0, $add$ptr = 0, $add$ptr$i25 = 0, $agg$tmp = 0, $call = 0, $call9 = 0, $expr = 0, $incdec$ptr$i$i$i = 0, $ref$tmp = 0, $ref$tmp18 = 0, $ref$tmp19 = 0, $ref$tmp20 = 0, $ref$tmp21 = 0, $retval$3 = 0, $tobool$i$i$i$i$i = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(112);
 $expr = sp + 88 | 0;
 $ref$tmp = sp + 64 | 0;
 $agg$tmp = sp + 48 | 0;
 $ref$tmp18 = sp + 36 | 0;
 $ref$tmp19 = sp + 24 | 0;
 $ref$tmp20 = sp + 12 | 0;
 $ref$tmp21 = sp;
 if (($last - $first | 0) > 2) if ((HEAP8[$first >> 0] | 0) == 114) if ((HEAP8[$first + 1 >> 0] | 0) == 99) {
  $add$ptr = $first + 2 | 0;
  $call = __ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($add$ptr, $last, $db) | 0;
  if (($call | 0) == ($add$ptr | 0)) $retval$3 = $first; else {
   $call9 = __ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($call, $last, $db) | 0;
   if (($call9 | 0) == ($call | 0)) $retval$3 = $first; else {
    $__end_$i = $db + 4 | 0;
    $2 = HEAP32[$__end_$i >> 2] | 0;
    if ((($2 - (HEAP32[$db >> 2] | 0) | 0) / 24 | 0) >>> 0 < 2) $retval$3 = $first; else {
     __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($expr, $2 + -24 | 0);
     $5 = HEAP32[$__end_$i >> 2] | 0;
     $add$ptr$i25 = $5 + -24 | 0;
     $6 = $5;
     while (1) {
      if (($6 | 0) == ($add$ptr$i25 | 0)) break;
      $incdec$ptr$i$i$i = $6 + -24 | 0;
      HEAP32[$__end_$i >> 2] = $incdec$ptr$i$i$i;
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($incdec$ptr$i$i$i);
      $6 = HEAP32[$__end_$i >> 2] | 0;
     }
     __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($ref$tmp21, $5 + -48 | 0);
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKc($ref$tmp21, 0, 15137) | 0;
     HEAP32[$ref$tmp20 >> 2] = HEAP32[$ref$tmp21 >> 2];
     HEAP32[$ref$tmp20 + 4 >> 2] = HEAP32[$ref$tmp21 + 4 >> 2];
     HEAP32[$ref$tmp20 + 8 >> 2] = HEAP32[$ref$tmp21 + 8 >> 2];
     $__i$0$i$i$i = 0;
     while (1) {
      if (($__i$0$i$i$i | 0) == 3) break;
      HEAP32[$ref$tmp21 + ($__i$0$i$i$i << 2) >> 2] = 0;
      $__i$0$i$i$i = $__i$0$i$i$i + 1 | 0;
     }
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($ref$tmp20, 15134) | 0;
     HEAP32[$ref$tmp19 >> 2] = HEAP32[$ref$tmp20 >> 2];
     HEAP32[$ref$tmp19 + 4 >> 2] = HEAP32[$ref$tmp20 + 4 >> 2];
     HEAP32[$ref$tmp19 + 8 >> 2] = HEAP32[$ref$tmp20 + 8 >> 2];
     $__i$0$i$i$i30 = 0;
     while (1) {
      if (($__i$0$i$i$i30 | 0) == 3) break;
      HEAP32[$ref$tmp20 + ($__i$0$i$i$i30 << 2) >> 2] = 0;
      $__i$0$i$i$i30 = $__i$0$i$i$i30 + 1 | 0;
     }
     $7 = HEAP8[$expr + 11 >> 0] | 0;
     $tobool$i$i$i$i$i = $7 << 24 >> 24 < 0;
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($ref$tmp19, $tobool$i$i$i$i$i ? HEAP32[$expr >> 2] | 0 : $expr, $tobool$i$i$i$i$i ? HEAP32[$expr + 4 >> 2] | 0 : $7 & 255) | 0;
     HEAP32[$ref$tmp18 >> 2] = HEAP32[$ref$tmp19 >> 2];
     HEAP32[$ref$tmp18 + 4 >> 2] = HEAP32[$ref$tmp19 + 4 >> 2];
     HEAP32[$ref$tmp18 + 8 >> 2] = HEAP32[$ref$tmp19 + 8 >> 2];
     $__i$0$i$i$i39 = 0;
     while (1) {
      if (($__i$0$i$i$i39 | 0) == 3) break;
      HEAP32[$ref$tmp19 + ($__i$0$i$i$i39 << 2) >> 2] = 0;
      $__i$0$i$i$i39 = $__i$0$i$i$i39 + 1 | 0;
     }
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($ref$tmp18, 14885) | 0;
     HEAP32[$agg$tmp >> 2] = HEAP32[$ref$tmp18 >> 2];
     HEAP32[$agg$tmp + 4 >> 2] = HEAP32[$ref$tmp18 + 4 >> 2];
     HEAP32[$agg$tmp + 8 >> 2] = HEAP32[$ref$tmp18 + 8 >> 2];
     $__i$0$i$i$i47 = 0;
     while (1) {
      if (($__i$0$i$i$i47 | 0) == 3) break;
      HEAP32[$ref$tmp18 + ($__i$0$i$i$i47 << 2) >> 2] = 0;
      $__i$0$i$i$i47 = $__i$0$i$i$i47 + 1 | 0;
     }
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ENSt3__212basic_stringIcNS2_11char_traitsIcEENS0_12malloc_allocIcEEEE($ref$tmp, $agg$tmp);
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairaSEOS1_((HEAP32[$__end_$i >> 2] | 0) + -24 | 0, $ref$tmp);
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($ref$tmp);
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($agg$tmp);
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($ref$tmp18);
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($ref$tmp19);
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($ref$tmp20);
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($ref$tmp21);
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($expr);
     $retval$3 = $call9;
    }
   }
  }
 } else $retval$3 = $first; else $retval$3 = $first; else $retval$3 = $first;
 STACKTOP = sp;
 return $retval$3 | 0;
}

function __ZN10__cxxabiv112_GLOBAL__N_123parse_dynamic_cast_exprINS0_2DbEEEPKcS4_S4_RT_($first, $last, $db) {
 $first = $first | 0;
 $last = $last | 0;
 $db = $db | 0;
 var $2 = 0, $5 = 0, $6 = 0, $7 = 0, $__end_$i = 0, $__i$0$i$i$i = 0, $__i$0$i$i$i30 = 0, $__i$0$i$i$i39 = 0, $__i$0$i$i$i47 = 0, $add$ptr = 0, $add$ptr$i25 = 0, $agg$tmp = 0, $call = 0, $call9 = 0, $expr = 0, $incdec$ptr$i$i$i = 0, $ref$tmp = 0, $ref$tmp18 = 0, $ref$tmp19 = 0, $ref$tmp20 = 0, $ref$tmp21 = 0, $retval$3 = 0, $tobool$i$i$i$i$i = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(112);
 $expr = sp + 88 | 0;
 $ref$tmp = sp + 64 | 0;
 $agg$tmp = sp + 48 | 0;
 $ref$tmp18 = sp + 36 | 0;
 $ref$tmp19 = sp + 24 | 0;
 $ref$tmp20 = sp + 12 | 0;
 $ref$tmp21 = sp;
 if (($last - $first | 0) > 2) if ((HEAP8[$first >> 0] | 0) == 100) if ((HEAP8[$first + 1 >> 0] | 0) == 99) {
  $add$ptr = $first + 2 | 0;
  $call = __ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($add$ptr, $last, $db) | 0;
  if (($call | 0) == ($add$ptr | 0)) $retval$3 = $first; else {
   $call9 = __ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($call, $last, $db) | 0;
   if (($call9 | 0) == ($call | 0)) $retval$3 = $first; else {
    $__end_$i = $db + 4 | 0;
    $2 = HEAP32[$__end_$i >> 2] | 0;
    if ((($2 - (HEAP32[$db >> 2] | 0) | 0) / 24 | 0) >>> 0 < 2) $retval$3 = $first; else {
     __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($expr, $2 + -24 | 0);
     $5 = HEAP32[$__end_$i >> 2] | 0;
     $add$ptr$i25 = $5 + -24 | 0;
     $6 = $5;
     while (1) {
      if (($6 | 0) == ($add$ptr$i25 | 0)) break;
      $incdec$ptr$i$i$i = $6 + -24 | 0;
      HEAP32[$__end_$i >> 2] = $incdec$ptr$i$i$i;
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($incdec$ptr$i$i$i);
      $6 = HEAP32[$__end_$i >> 2] | 0;
     }
     __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($ref$tmp21, $5 + -48 | 0);
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKc($ref$tmp21, 0, 16037) | 0;
     HEAP32[$ref$tmp20 >> 2] = HEAP32[$ref$tmp21 >> 2];
     HEAP32[$ref$tmp20 + 4 >> 2] = HEAP32[$ref$tmp21 + 4 >> 2];
     HEAP32[$ref$tmp20 + 8 >> 2] = HEAP32[$ref$tmp21 + 8 >> 2];
     $__i$0$i$i$i = 0;
     while (1) {
      if (($__i$0$i$i$i | 0) == 3) break;
      HEAP32[$ref$tmp21 + ($__i$0$i$i$i << 2) >> 2] = 0;
      $__i$0$i$i$i = $__i$0$i$i$i + 1 | 0;
     }
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($ref$tmp20, 15134) | 0;
     HEAP32[$ref$tmp19 >> 2] = HEAP32[$ref$tmp20 >> 2];
     HEAP32[$ref$tmp19 + 4 >> 2] = HEAP32[$ref$tmp20 + 4 >> 2];
     HEAP32[$ref$tmp19 + 8 >> 2] = HEAP32[$ref$tmp20 + 8 >> 2];
     $__i$0$i$i$i30 = 0;
     while (1) {
      if (($__i$0$i$i$i30 | 0) == 3) break;
      HEAP32[$ref$tmp20 + ($__i$0$i$i$i30 << 2) >> 2] = 0;
      $__i$0$i$i$i30 = $__i$0$i$i$i30 + 1 | 0;
     }
     $7 = HEAP8[$expr + 11 >> 0] | 0;
     $tobool$i$i$i$i$i = $7 << 24 >> 24 < 0;
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($ref$tmp19, $tobool$i$i$i$i$i ? HEAP32[$expr >> 2] | 0 : $expr, $tobool$i$i$i$i$i ? HEAP32[$expr + 4 >> 2] | 0 : $7 & 255) | 0;
     HEAP32[$ref$tmp18 >> 2] = HEAP32[$ref$tmp19 >> 2];
     HEAP32[$ref$tmp18 + 4 >> 2] = HEAP32[$ref$tmp19 + 4 >> 2];
     HEAP32[$ref$tmp18 + 8 >> 2] = HEAP32[$ref$tmp19 + 8 >> 2];
     $__i$0$i$i$i39 = 0;
     while (1) {
      if (($__i$0$i$i$i39 | 0) == 3) break;
      HEAP32[$ref$tmp19 + ($__i$0$i$i$i39 << 2) >> 2] = 0;
      $__i$0$i$i$i39 = $__i$0$i$i$i39 + 1 | 0;
     }
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($ref$tmp18, 14885) | 0;
     HEAP32[$agg$tmp >> 2] = HEAP32[$ref$tmp18 >> 2];
     HEAP32[$agg$tmp + 4 >> 2] = HEAP32[$ref$tmp18 + 4 >> 2];
     HEAP32[$agg$tmp + 8 >> 2] = HEAP32[$ref$tmp18 + 8 >> 2];
     $__i$0$i$i$i47 = 0;
     while (1) {
      if (($__i$0$i$i$i47 | 0) == 3) break;
      HEAP32[$ref$tmp18 + ($__i$0$i$i$i47 << 2) >> 2] = 0;
      $__i$0$i$i$i47 = $__i$0$i$i$i47 + 1 | 0;
     }
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ENSt3__212basic_stringIcNS2_11char_traitsIcEENS0_12malloc_allocIcEEEE($ref$tmp, $agg$tmp);
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairaSEOS1_((HEAP32[$__end_$i >> 2] | 0) + -24 | 0, $ref$tmp);
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($ref$tmp);
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($agg$tmp);
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($ref$tmp18);
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($ref$tmp19);
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($ref$tmp20);
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($ref$tmp21);
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($expr);
     $retval$3 = $call9;
    }
   }
  }
 } else $retval$3 = $first; else $retval$3 = $first; else $retval$3 = $first;
 STACKTOP = sp;
 return $retval$3 | 0;
}

function __ZN10__cxxabiv112_GLOBAL__N_122parse_static_cast_exprINS0_2DbEEEPKcS4_S4_RT_($first, $last, $db) {
 $first = $first | 0;
 $last = $last | 0;
 $db = $db | 0;
 var $2 = 0, $5 = 0, $6 = 0, $7 = 0, $__end_$i = 0, $__i$0$i$i$i = 0, $__i$0$i$i$i30 = 0, $__i$0$i$i$i39 = 0, $__i$0$i$i$i47 = 0, $add$ptr = 0, $add$ptr$i25 = 0, $agg$tmp = 0, $call = 0, $call9 = 0, $expr = 0, $incdec$ptr$i$i$i = 0, $ref$tmp = 0, $ref$tmp18 = 0, $ref$tmp19 = 0, $ref$tmp20 = 0, $ref$tmp21 = 0, $retval$3 = 0, $tobool$i$i$i$i$i = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(112);
 $expr = sp + 88 | 0;
 $ref$tmp = sp + 64 | 0;
 $agg$tmp = sp + 48 | 0;
 $ref$tmp18 = sp + 36 | 0;
 $ref$tmp19 = sp + 24 | 0;
 $ref$tmp20 = sp + 12 | 0;
 $ref$tmp21 = sp;
 if (($last - $first | 0) > 2) if ((HEAP8[$first >> 0] | 0) == 115) if ((HEAP8[$first + 1 >> 0] | 0) == 99) {
  $add$ptr = $first + 2 | 0;
  $call = __ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($add$ptr, $last, $db) | 0;
  if (($call | 0) == ($add$ptr | 0)) $retval$3 = $first; else {
   $call9 = __ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($call, $last, $db) | 0;
   if (($call9 | 0) == ($call | 0)) $retval$3 = $first; else {
    $__end_$i = $db + 4 | 0;
    $2 = HEAP32[$__end_$i >> 2] | 0;
    if ((($2 - (HEAP32[$db >> 2] | 0) | 0) / 24 | 0) >>> 0 < 2) $retval$3 = $first; else {
     __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($expr, $2 + -24 | 0);
     $5 = HEAP32[$__end_$i >> 2] | 0;
     $add$ptr$i25 = $5 + -24 | 0;
     $6 = $5;
     while (1) {
      if (($6 | 0) == ($add$ptr$i25 | 0)) break;
      $incdec$ptr$i$i$i = $6 + -24 | 0;
      HEAP32[$__end_$i >> 2] = $incdec$ptr$i$i$i;
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($incdec$ptr$i$i$i);
      $6 = HEAP32[$__end_$i >> 2] | 0;
     }
     __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($ref$tmp21, $5 + -48 | 0);
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKc($ref$tmp21, 0, 15121) | 0;
     HEAP32[$ref$tmp20 >> 2] = HEAP32[$ref$tmp21 >> 2];
     HEAP32[$ref$tmp20 + 4 >> 2] = HEAP32[$ref$tmp21 + 4 >> 2];
     HEAP32[$ref$tmp20 + 8 >> 2] = HEAP32[$ref$tmp21 + 8 >> 2];
     $__i$0$i$i$i = 0;
     while (1) {
      if (($__i$0$i$i$i | 0) == 3) break;
      HEAP32[$ref$tmp21 + ($__i$0$i$i$i << 2) >> 2] = 0;
      $__i$0$i$i$i = $__i$0$i$i$i + 1 | 0;
     }
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($ref$tmp20, 15134) | 0;
     HEAP32[$ref$tmp19 >> 2] = HEAP32[$ref$tmp20 >> 2];
     HEAP32[$ref$tmp19 + 4 >> 2] = HEAP32[$ref$tmp20 + 4 >> 2];
     HEAP32[$ref$tmp19 + 8 >> 2] = HEAP32[$ref$tmp20 + 8 >> 2];
     $__i$0$i$i$i30 = 0;
     while (1) {
      if (($__i$0$i$i$i30 | 0) == 3) break;
      HEAP32[$ref$tmp20 + ($__i$0$i$i$i30 << 2) >> 2] = 0;
      $__i$0$i$i$i30 = $__i$0$i$i$i30 + 1 | 0;
     }
     $7 = HEAP8[$expr + 11 >> 0] | 0;
     $tobool$i$i$i$i$i = $7 << 24 >> 24 < 0;
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($ref$tmp19, $tobool$i$i$i$i$i ? HEAP32[$expr >> 2] | 0 : $expr, $tobool$i$i$i$i$i ? HEAP32[$expr + 4 >> 2] | 0 : $7 & 255) | 0;
     HEAP32[$ref$tmp18 >> 2] = HEAP32[$ref$tmp19 >> 2];
     HEAP32[$ref$tmp18 + 4 >> 2] = HEAP32[$ref$tmp19 + 4 >> 2];
     HEAP32[$ref$tmp18 + 8 >> 2] = HEAP32[$ref$tmp19 + 8 >> 2];
     $__i$0$i$i$i39 = 0;
     while (1) {
      if (($__i$0$i$i$i39 | 0) == 3) break;
      HEAP32[$ref$tmp19 + ($__i$0$i$i$i39 << 2) >> 2] = 0;
      $__i$0$i$i$i39 = $__i$0$i$i$i39 + 1 | 0;
     }
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($ref$tmp18, 14885) | 0;
     HEAP32[$agg$tmp >> 2] = HEAP32[$ref$tmp18 >> 2];
     HEAP32[$agg$tmp + 4 >> 2] = HEAP32[$ref$tmp18 + 4 >> 2];
     HEAP32[$agg$tmp + 8 >> 2] = HEAP32[$ref$tmp18 + 8 >> 2];
     $__i$0$i$i$i47 = 0;
     while (1) {
      if (($__i$0$i$i$i47 | 0) == 3) break;
      HEAP32[$ref$tmp18 + ($__i$0$i$i$i47 << 2) >> 2] = 0;
      $__i$0$i$i$i47 = $__i$0$i$i$i47 + 1 | 0;
     }
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ENSt3__212basic_stringIcNS2_11char_traitsIcEENS0_12malloc_allocIcEEEE($ref$tmp, $agg$tmp);
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairaSEOS1_((HEAP32[$__end_$i >> 2] | 0) + -24 | 0, $ref$tmp);
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($ref$tmp);
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($agg$tmp);
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($ref$tmp18);
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($ref$tmp19);
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($ref$tmp20);
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($ref$tmp21);
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($expr);
     $retval$3 = $call9;
    }
   }
  }
 } else $retval$3 = $first; else $retval$3 = $first; else $retval$3 = $first;
 STACKTOP = sp;
 return $retval$3 | 0;
}

function __ZN10__cxxabiv112_GLOBAL__N_121parse_const_cast_exprINS0_2DbEEEPKcS4_S4_RT_($first, $last, $db) {
 $first = $first | 0;
 $last = $last | 0;
 $db = $db | 0;
 var $2 = 0, $5 = 0, $6 = 0, $7 = 0, $__end_$i = 0, $__i$0$i$i$i = 0, $__i$0$i$i$i30 = 0, $__i$0$i$i$i39 = 0, $__i$0$i$i$i47 = 0, $add$ptr = 0, $add$ptr$i25 = 0, $agg$tmp = 0, $call = 0, $call9 = 0, $expr = 0, $incdec$ptr$i$i$i = 0, $ref$tmp = 0, $ref$tmp18 = 0, $ref$tmp19 = 0, $ref$tmp20 = 0, $ref$tmp21 = 0, $retval$3 = 0, $tobool$i$i$i$i$i = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(112);
 $expr = sp + 88 | 0;
 $ref$tmp = sp + 64 | 0;
 $agg$tmp = sp + 48 | 0;
 $ref$tmp18 = sp + 36 | 0;
 $ref$tmp19 = sp + 24 | 0;
 $ref$tmp20 = sp + 12 | 0;
 $ref$tmp21 = sp;
 if (($last - $first | 0) > 2) if ((HEAP8[$first >> 0] | 0) == 99) if ((HEAP8[$first + 1 >> 0] | 0) == 99) {
  $add$ptr = $first + 2 | 0;
  $call = __ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($add$ptr, $last, $db) | 0;
  if (($call | 0) == ($add$ptr | 0)) $retval$3 = $first; else {
   $call9 = __ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($call, $last, $db) | 0;
   if (($call9 | 0) == ($call | 0)) $retval$3 = $first; else {
    $__end_$i = $db + 4 | 0;
    $2 = HEAP32[$__end_$i >> 2] | 0;
    if ((($2 - (HEAP32[$db >> 2] | 0) | 0) / 24 | 0) >>> 0 < 2) $retval$3 = $first; else {
     __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($expr, $2 + -24 | 0);
     $5 = HEAP32[$__end_$i >> 2] | 0;
     $add$ptr$i25 = $5 + -24 | 0;
     $6 = $5;
     while (1) {
      if (($6 | 0) == ($add$ptr$i25 | 0)) break;
      $incdec$ptr$i$i$i = $6 + -24 | 0;
      HEAP32[$__end_$i >> 2] = $incdec$ptr$i$i$i;
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($incdec$ptr$i$i$i);
      $6 = HEAP32[$__end_$i >> 2] | 0;
     }
     __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($ref$tmp21, $5 + -48 | 0);
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKc($ref$tmp21, 0, 16054) | 0;
     HEAP32[$ref$tmp20 >> 2] = HEAP32[$ref$tmp21 >> 2];
     HEAP32[$ref$tmp20 + 4 >> 2] = HEAP32[$ref$tmp21 + 4 >> 2];
     HEAP32[$ref$tmp20 + 8 >> 2] = HEAP32[$ref$tmp21 + 8 >> 2];
     $__i$0$i$i$i = 0;
     while (1) {
      if (($__i$0$i$i$i | 0) == 3) break;
      HEAP32[$ref$tmp21 + ($__i$0$i$i$i << 2) >> 2] = 0;
      $__i$0$i$i$i = $__i$0$i$i$i + 1 | 0;
     }
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($ref$tmp20, 15134) | 0;
     HEAP32[$ref$tmp19 >> 2] = HEAP32[$ref$tmp20 >> 2];
     HEAP32[$ref$tmp19 + 4 >> 2] = HEAP32[$ref$tmp20 + 4 >> 2];
     HEAP32[$ref$tmp19 + 8 >> 2] = HEAP32[$ref$tmp20 + 8 >> 2];
     $__i$0$i$i$i30 = 0;
     while (1) {
      if (($__i$0$i$i$i30 | 0) == 3) break;
      HEAP32[$ref$tmp20 + ($__i$0$i$i$i30 << 2) >> 2] = 0;
      $__i$0$i$i$i30 = $__i$0$i$i$i30 + 1 | 0;
     }
     $7 = HEAP8[$expr + 11 >> 0] | 0;
     $tobool$i$i$i$i$i = $7 << 24 >> 24 < 0;
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($ref$tmp19, $tobool$i$i$i$i$i ? HEAP32[$expr >> 2] | 0 : $expr, $tobool$i$i$i$i$i ? HEAP32[$expr + 4 >> 2] | 0 : $7 & 255) | 0;
     HEAP32[$ref$tmp18 >> 2] = HEAP32[$ref$tmp19 >> 2];
     HEAP32[$ref$tmp18 + 4 >> 2] = HEAP32[$ref$tmp19 + 4 >> 2];
     HEAP32[$ref$tmp18 + 8 >> 2] = HEAP32[$ref$tmp19 + 8 >> 2];
     $__i$0$i$i$i39 = 0;
     while (1) {
      if (($__i$0$i$i$i39 | 0) == 3) break;
      HEAP32[$ref$tmp19 + ($__i$0$i$i$i39 << 2) >> 2] = 0;
      $__i$0$i$i$i39 = $__i$0$i$i$i39 + 1 | 0;
     }
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($ref$tmp18, 14885) | 0;
     HEAP32[$agg$tmp >> 2] = HEAP32[$ref$tmp18 >> 2];
     HEAP32[$agg$tmp + 4 >> 2] = HEAP32[$ref$tmp18 + 4 >> 2];
     HEAP32[$agg$tmp + 8 >> 2] = HEAP32[$ref$tmp18 + 8 >> 2];
     $__i$0$i$i$i47 = 0;
     while (1) {
      if (($__i$0$i$i$i47 | 0) == 3) break;
      HEAP32[$ref$tmp18 + ($__i$0$i$i$i47 << 2) >> 2] = 0;
      $__i$0$i$i$i47 = $__i$0$i$i$i47 + 1 | 0;
     }
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ENSt3__212basic_stringIcNS2_11char_traitsIcEENS0_12malloc_allocIcEEEE($ref$tmp, $agg$tmp);
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairaSEOS1_((HEAP32[$__end_$i >> 2] | 0) + -24 | 0, $ref$tmp);
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($ref$tmp);
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($agg$tmp);
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($ref$tmp18);
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($ref$tmp19);
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($ref$tmp20);
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($ref$tmp21);
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($expr);
     $retval$3 = $call9;
    }
   }
  }
 } else $retval$3 = $first; else $retval$3 = $first; else $retval$3 = $first;
 STACKTOP = sp;
 return $retval$3 | 0;
}

function _arImageProcLuma($ipi, $dataPtr) {
 $ipi = $ipi | 0;
 $dataPtr = $dataPtr | 0;
 var $0 = 0, $5 = 0, $conv147 = 0, $conv155 = 0, $conv186 = 0, $conv196 = 0, $conv228 = 0, $imageX = 0, $imageY = 0, $p$0 = 0, $p$1 = 0, $p$2 = 0, $p$3 = 0, $p$4 = 0, $p$5 = 0, $p$6 = 0, $p$7 = 0, $q$0 = 0, $q$1 = 0, $q$2 = 0, $q$3 = 0, $q$4 = 0, $q$5 = 0, $q$6 = 0, $q$7 = 0, $retval$0 = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $vararg_buffer = sp;
 $0 = HEAP32[$ipi + 2068 >> 2] | 0;
 $imageY = $ipi + 12 | 0;
 $imageX = $ipi + 8 | 0;
 L1 : do switch ($0 | 0) {
 case 5:
 case 12:
 case 13:
 case 14:
  {
   if (!(HEAP32[$ipi + 2072 >> 2] | 0)) {
    HEAP32[$ipi >> 2] = $dataPtr;
    $retval$0 = 0;
    break L1;
   } else {
    _memcpy(HEAP32[$ipi >> 2] | 0, $dataPtr | 0, Math_imul(HEAP32[$imageY >> 2] | 0, HEAP32[$imageX >> 2] | 0) | 0) | 0;
    $retval$0 = 0;
    break L1;
   }
   break;
  }
 default:
  {
   $5 = $0 | 1;
   if (($5 | 0) == 3) {
    $p$0 = 0;
    $q$0 = 0;
    while (1) {
     if ($p$0 >>> 0 >= (Math_imul(HEAP32[$imageY >> 2] | 0, HEAP32[$imageX >> 2] | 0) | 0) >>> 0) {
      $retval$0 = 0;
      break L1;
     }
     HEAP8[(HEAP32[$ipi >> 2] | 0) + $p$0 >> 0] = (((HEAPU8[$dataPtr + ($q$0 | 1) >> 0] | 0) + (HEAPU8[$dataPtr + $q$0 >> 0] | 0) + (HEAPU8[$dataPtr + ($q$0 | 2) >> 0] | 0) | 0) >>> 0) / 3 | 0;
     $p$0 = $p$0 + 1 | 0;
     $q$0 = $q$0 + 4 | 0;
    }
   }
   if (($0 | 2 | 0) == 6) {
    $p$1 = 0;
    $q$1 = 0;
    while (1) {
     if ($p$1 >>> 0 >= (Math_imul(HEAP32[$imageY >> 2] | 0, HEAP32[$imageX >> 2] | 0) | 0) >>> 0) {
      $retval$0 = 0;
      break L1;
     }
     HEAP8[(HEAP32[$ipi >> 2] | 0) + $p$1 >> 0] = (((HEAPU8[$dataPtr + ($q$1 | 2) >> 0] | 0) + (HEAPU8[$dataPtr + ($q$1 | 1) >> 0] | 0) + (HEAPU8[$dataPtr + ($q$1 | 3) >> 0] | 0) | 0) >>> 0) / 3 | 0;
     $p$1 = $p$1 + 1 | 0;
     $q$1 = $q$1 + 4 | 0;
    }
   }
   if (($5 | 0) == 1) {
    $p$2 = 0;
    $q$2 = 0;
    while (1) {
     if ($p$2 >>> 0 >= (Math_imul(HEAP32[$imageY >> 2] | 0, HEAP32[$imageX >> 2] | 0) | 0) >>> 0) {
      $retval$0 = 0;
      break L1;
     }
     HEAP8[(HEAP32[$ipi >> 2] | 0) + $p$2 >> 0] = (((HEAPU8[$dataPtr + ($q$2 + 1) >> 0] | 0) + (HEAPU8[$dataPtr + $q$2 >> 0] | 0) + (HEAPU8[$dataPtr + ($q$2 + 2) >> 0] | 0) | 0) >>> 0) / 3 | 0;
     $p$2 = $p$2 + 1 | 0;
     $q$2 = $q$2 + 3 | 0;
    }
   }
   switch ($0 | 0) {
   case 8:
    {
     $p$3 = 0;
     $q$3 = 0;
     while (1) {
      if ($p$3 >>> 0 >= (Math_imul(HEAP32[$imageY >> 2] | 0, HEAP32[$imageX >> 2] | 0) | 0) >>> 0) {
       $retval$0 = 0;
       break L1;
      }
      HEAP8[(HEAP32[$ipi >> 2] | 0) + $p$3 >> 0] = HEAP8[$dataPtr + $q$3 >> 0] | 0;
      $p$3 = $p$3 + 1 | 0;
      $q$3 = $q$3 + 2 | 0;
     }
     break;
    }
   case 7:
    {
     $p$4 = 0;
     $q$4 = 0;
     while (1) {
      if ($p$4 >>> 0 >= (Math_imul(HEAP32[$imageY >> 2] | 0, HEAP32[$imageX >> 2] | 0) | 0) >>> 0) {
       $retval$0 = 0;
       break L1;
      }
      HEAP8[(HEAP32[$ipi >> 2] | 0) + $p$4 >> 0] = HEAP8[$dataPtr + ($q$4 | 1) >> 0] | 0;
      $p$4 = $p$4 + 1 | 0;
      $q$4 = $q$4 + 2 | 0;
     }
     break;
    }
   case 9:
    {
     $p$5 = 0;
     $q$5 = 0;
     while (1) {
      if ($p$5 >>> 0 >= (Math_imul(HEAP32[$imageY >> 2] | 0, HEAP32[$imageX >> 2] | 0) | 0) >>> 0) {
       $retval$0 = 0;
       break L1;
      }
      $conv147 = HEAPU8[$dataPtr + $q$5 >> 0] | 0;
      $conv155 = HEAPU8[$dataPtr + ($q$5 | 1) >> 0] | 0;
      HEAP8[(HEAP32[$ipi >> 2] | 0) + $p$5 >> 0] = ((($conv147 & 248) + 10 + ($conv147 << 5 & 224) + ($conv155 >>> 3 & 28) + ($conv155 << 3 & 248) | 0) >>> 0) / 3 | 0;
      $p$5 = $p$5 + 1 | 0;
      $q$5 = $q$5 + 2 | 0;
     }
     break;
    }
   case 10:
    {
     $p$6 = 0;
     $q$6 = 0;
     while (1) {
      if ($p$6 >>> 0 >= (Math_imul(HEAP32[$imageY >> 2] | 0, HEAP32[$imageX >> 2] | 0) | 0) >>> 0) {
       $retval$0 = 0;
       break L1;
      }
      $conv186 = HEAPU8[$dataPtr + $q$6 >> 0] | 0;
      $conv196 = HEAPU8[$dataPtr + ($q$6 | 1) >> 0] | 0;
      HEAP8[(HEAP32[$ipi >> 2] | 0) + $p$6 >> 0] = ((($conv186 & 248) + 12 + ($conv186 << 5 & 224) + ($conv196 >>> 3 & 24) + ($conv196 << 2 & 248) | 0) >>> 0) / 3 | 0;
      $p$6 = $p$6 + 1 | 0;
      $q$6 = $q$6 + 2 | 0;
     }
     break;
    }
   case 11:
    {
     $p$7 = 0;
     $q$7 = 0;
     while (1) {
      if ($p$7 >>> 0 >= (Math_imul(HEAP32[$imageY >> 2] | 0, HEAP32[$imageX >> 2] | 0) | 0) >>> 0) {
       $retval$0 = 0;
       break L1;
      }
      $conv228 = HEAPU8[$dataPtr + $q$7 >> 0] | 0;
      HEAP8[(HEAP32[$ipi >> 2] | 0) + $p$7 >> 0] = ((($conv228 & 240) + 24 + ($conv228 << 4 & 240) + (HEAP8[$dataPtr + ($q$7 | 1) >> 0] & -16 & 255) | 0) >>> 0) / 3 | 0;
      $p$7 = $p$7 + 1 | 0;
      $q$7 = $q$7 + 2 | 0;
     }
     break;
    }
   default:
    {
     _arLog(3, 3713, $vararg_buffer);
     $retval$0 = -1;
     break L1;
    }
   }
  }
 } while (0);
 STACKTOP = sp;
 return $retval$0 | 0;
}

function _arParamDecompMat($source, $cpara, $trans) {
 $source = $source | 0;
 $cpara = $cpara | 0;
 $trans = $trans | 0;
 var $10 = 0.0, $11 = 0.0, $12 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $3 = 0.0, $37 = 0.0, $4 = 0.0, $5 = 0.0, $Cpara = 0, $arrayidx118 = 0, $arrayidx123 = 0, $arrayidx128 = 0, $arrayidx133 = 0, $arrayidx148 = 0, $arrayidx163 = 0, $arrayidx265 = 0, $arrayidx50 = 0, $arrayidx56 = 0, $arrayidx63 = 0, $arrayidx70 = 0, $arrayidx77 = 0, $arrayidx92 = 0, $c$0 = 0, $c$1 = 0, $c$2 = 0, $c$3 = 0, $call = 0.0, $call116 = 0.0, $call146 = 0.0, $call161 = 0.0, $call206 = 0.0, $call90 = 0.0, $div = 0.0, $div234 = 0.0, $div61 = 0.0, $div68 = 0.0, $r$0 = 0, $r$1 = 0, $r$2 = 0, $r$3 = 0, $sub107 = 0.0, $sub115 = 0.0, $sub177 = 0.0, $sub191 = 0.0, $sub205 = 0.0, $sub99 = 0.0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(96);
 $Cpara = sp;
 L1 : do if (!(+HEAPF64[$source + 88 >> 3] >= 0.0)) {
  $r$1 = 0;
  while (1) {
   if (($r$1 | 0) == 3) {
    $r$2 = 0;
    break L1;
   } else $c$1 = 0;
   while (1) {
    if (($c$1 | 0) == 4) break;
    HEAPF64[$Cpara + ($r$1 << 5) + ($c$1 << 3) >> 3] = -+HEAPF64[$source + ($r$1 << 5) + ($c$1 << 3) >> 3];
    $c$1 = $c$1 + 1 | 0;
   }
   $r$1 = $r$1 + 1 | 0;
  }
 } else {
  $r$0 = 0;
  while (1) {
   if (($r$0 | 0) == 3) {
    $r$2 = 0;
    break L1;
   } else $c$0 = 0;
   while (1) {
    if (($c$0 | 0) == 4) break;
    HEAPF64[$Cpara + ($r$0 << 5) + ($c$0 << 3) >> 3] = +HEAPF64[$source + ($r$0 << 5) + ($c$0 << 3) >> 3];
    $c$0 = $c$0 + 1 | 0;
   }
   $r$0 = $r$0 + 1 | 0;
  }
 } while (0);
 while (1) {
  if (($r$2 | 0) == 3) break; else $c$2 = 0;
  while (1) {
   if (($c$2 | 0) == 4) break;
   HEAPF64[$cpara + ($r$2 << 5) + ($c$2 << 3) >> 3] = 0.0;
   $c$2 = $c$2 + 1 | 0;
  }
  $r$2 = $r$2 + 1 | 0;
 }
 $3 = +HEAPF64[$Cpara + 64 >> 3];
 $4 = +HEAPF64[$Cpara + 72 >> 3];
 $5 = +HEAPF64[$Cpara + 80 >> 3];
 $call = +_norm($3, $4, $5);
 $arrayidx50 = $cpara + 80 | 0;
 HEAPF64[$arrayidx50 >> 3] = $call;
 $div = $3 / $call;
 $arrayidx56 = $trans + 64 | 0;
 HEAPF64[$arrayidx56 >> 3] = $div;
 $div61 = $4 / +HEAPF64[$arrayidx50 >> 3];
 $arrayidx63 = $trans + 72 | 0;
 HEAPF64[$arrayidx63 >> 3] = $div61;
 $div68 = $5 / +HEAPF64[$arrayidx50 >> 3];
 $arrayidx70 = $trans + 80 | 0;
 HEAPF64[$arrayidx70 >> 3] = $div68;
 $arrayidx77 = $trans + 88 | 0;
 HEAPF64[$arrayidx77 >> 3] = +HEAPF64[$Cpara + 88 >> 3] / +HEAPF64[$arrayidx50 >> 3];
 $10 = +HEAPF64[$Cpara + 32 >> 3];
 $11 = +HEAPF64[$Cpara + 40 >> 3];
 $12 = +HEAPF64[$Cpara + 48 >> 3];
 $call90 = +_dot($div, $div61, $div68, $10, $11, $12);
 $arrayidx92 = $cpara + 48 | 0;
 HEAPF64[$arrayidx92 >> 3] = $call90;
 $sub99 = $10 - $call90 * +HEAPF64[$arrayidx56 >> 3];
 $sub107 = $11 - $call90 * +HEAPF64[$arrayidx63 >> 3];
 $sub115 = $12 - $call90 * +HEAPF64[$arrayidx70 >> 3];
 $call116 = +_norm($sub99, $sub107, $sub115);
 $arrayidx118 = $cpara + 40 | 0;
 HEAPF64[$arrayidx118 >> 3] = $call116;
 $arrayidx123 = $trans + 32 | 0;
 HEAPF64[$arrayidx123 >> 3] = $sub99 / $call116;
 $arrayidx128 = $trans + 40 | 0;
 HEAPF64[$arrayidx128 >> 3] = $sub107 / +HEAPF64[$arrayidx118 >> 3];
 $arrayidx133 = $trans + 48 | 0;
 HEAPF64[$arrayidx133 >> 3] = $sub115 / +HEAPF64[$arrayidx118 >> 3];
 $21 = +HEAPF64[$Cpara >> 3];
 $22 = +HEAPF64[$Cpara + 8 >> 3];
 $23 = +HEAPF64[$Cpara + 16 >> 3];
 $call146 = +_dot(+HEAPF64[$arrayidx56 >> 3], +HEAPF64[$arrayidx63 >> 3], +HEAPF64[$arrayidx70 >> 3], $21, $22, $23);
 $arrayidx148 = $cpara + 16 | 0;
 HEAPF64[$arrayidx148 >> 3] = $call146;
 $call161 = +_dot(+HEAPF64[$arrayidx123 >> 3], +HEAPF64[$arrayidx128 >> 3], +HEAPF64[$arrayidx133 >> 3], $21, $22, $23);
 $arrayidx163 = $cpara + 8 | 0;
 HEAPF64[$arrayidx163 >> 3] = $call161;
 $sub177 = $21 - $call161 * +HEAPF64[$arrayidx123 >> 3] - $call146 * +HEAPF64[$arrayidx56 >> 3];
 $sub191 = $22 - $call161 * +HEAPF64[$arrayidx128 >> 3] - $call146 * +HEAPF64[$arrayidx63 >> 3];
 $sub205 = $23 - $call161 * +HEAPF64[$arrayidx133 >> 3] - $call146 * +HEAPF64[$arrayidx70 >> 3];
 $call206 = +_norm($sub177, $sub191, $sub205);
 HEAPF64[$cpara >> 3] = $call206;
 HEAPF64[$trans >> 3] = $sub177 / $call206;
 HEAPF64[$trans + 8 >> 3] = $sub191 / +HEAPF64[$cpara >> 3];
 HEAPF64[$trans + 16 >> 3] = $sub205 / +HEAPF64[$cpara >> 3];
 $37 = +HEAPF64[$arrayidx77 >> 3];
 $div234 = (+HEAPF64[$Cpara + 56 >> 3] - +HEAPF64[$arrayidx92 >> 3] * $37) / +HEAPF64[$arrayidx118 >> 3];
 HEAPF64[$trans + 56 >> 3] = $div234;
 HEAPF64[$trans + 24 >> 3] = (+HEAPF64[$Cpara + 24 >> 3] - $div234 * +HEAPF64[$arrayidx163 >> 3] - +HEAPF64[$arrayidx148 >> 3] * $37) / +HEAPF64[$cpara >> 3];
 $r$3 = 0;
 while (1) {
  if (($r$3 | 0) == 3) break; else $c$3 = 0;
  while (1) {
   if (($c$3 | 0) == 3) break;
   $arrayidx265 = $cpara + ($r$3 << 5) + ($c$3 << 3) | 0;
   HEAPF64[$arrayidx265 >> 3] = +HEAPF64[$arrayidx265 >> 3] / +HEAPF64[$arrayidx50 >> 3];
   $c$3 = $c$3 + 1 | 0;
  }
  $r$3 = $r$3 + 1 | 0;
 }
 STACKTOP = sp;
 return 0;
}

function __ZNSt3__213unordered_mapIi12arControllerNS_4hashIiEENS_8equal_toIiEENS_9allocatorINS_4pairIKiS1_EEEEEixERS8_($this, $__k) {
 $this = $this | 0;
 $__k = $__k | 0;
 var $$pn$i = 0, $0 = 0, $1 = 0, $10 = 0, $15 = 0, $16 = 0, $17 = 0, $22 = 0, $3 = 0, $4 = 0, $7 = 0.0, $8 = 0, $__bc$0$i = 0, $__chash$0$i = 0, $__chash$1$i = 0, $__first_$i$i$i = 0, $__first_$i$i$i$i37$i = 0, $__first_$i$i$i38$pre$phi$iZZZZ2D = 0, $__first_$i$i$i93$i = 0, $__h$i = 0, $__nd$0$i = 0, $__nd$1$i = 0, $add37$i = 0, $cmp$i = 0, $cond6$i$i = 0, $cond6$i103$i = 0, $cond6$i69$i = 0, $conv$i = 0.0, $conv44$i = 0, $ref$tmp2 = 0, $ref$tmp5 = 0, $sub$i$i = 0, $sub$i60$i = 0, $sub$i73$i = 0, $tobool$i62$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 $__h$i = sp + 4 | 0;
 $ref$tmp2 = sp;
 $ref$tmp5 = sp + 16 | 0;
 HEAP32[$ref$tmp2 >> 2] = $__k;
 $0 = HEAP32[$__k >> 2] | 0;
 $__first_$i$i$i$i37$i = $this + 4 | 0;
 $1 = HEAP32[$__first_$i$i$i$i37$i >> 2] | 0;
 $cmp$i = ($1 | 0) == 0;
 L1 : do if ($cmp$i) {
  $__chash$0$i = 0;
  label = 15;
 } else {
  $sub$i60$i = $1 + -1 | 0;
  $tobool$i62$i = ($sub$i60$i & $1 | 0) == 0;
  if ($tobool$i62$i) $cond6$i69$i = $sub$i60$i & $0; else if ($0 >>> 0 < $1 >>> 0) $cond6$i69$i = $0; else $cond6$i69$i = ($0 >>> 0) % ($1 >>> 0) | 0;
  $3 = HEAP32[(HEAP32[$this >> 2] | 0) + ($cond6$i69$i << 2) >> 2] | 0;
  if (!$3) {
   $__chash$0$i = $cond6$i69$i;
   label = 15;
  } else {
   $$pn$i = $3;
   while (1) {
    $__nd$0$i = HEAP32[$$pn$i >> 2] | 0;
    if (!$__nd$0$i) {
     $__chash$0$i = $cond6$i69$i;
     label = 15;
     break L1;
    }
    $4 = HEAP32[$__nd$0$i + 4 >> 2] | 0;
    if (($4 | 0) != ($0 | 0)) {
     if ($tobool$i62$i) $cond6$i103$i = $4 & $sub$i60$i; else if ($4 >>> 0 < $1 >>> 0) $cond6$i103$i = $4; else $cond6$i103$i = ($4 >>> 0) % ($1 >>> 0) | 0;
     if (($cond6$i103$i | 0) != ($cond6$i69$i | 0)) {
      $__chash$0$i = $cond6$i69$i;
      label = 15;
      break L1;
     }
    }
    if ((HEAP32[$__nd$0$i + 8 >> 2] | 0) == ($0 | 0)) {
     $__nd$1$i = $__nd$0$i;
     break;
    } else $$pn$i = $__nd$0$i;
   }
  }
 } while (0);
 if ((label | 0) == 15) {
  __ZNSt3__212__hash_tableINS_17__hash_value_typeIi12arControllerEENS_22__unordered_map_hasherIiS3_NS_4hashIiEELb1EEENS_21__unordered_map_equalIiS3_NS_8equal_toIiEELb1EEENS_9allocatorIS3_EEE21__construct_node_hashIRKNS_21piecewise_construct_tEJNS_5tupleIJRKiEEENSJ_IJEEEEEENS_10unique_ptrINS_11__hash_nodeIS3_PvEENS_22__hash_node_destructorINSC_ISR_EEEEEEjOT_DpOT0_($__h$i, $this, $0, 17784, $ref$tmp2, $ref$tmp5);
  $__first_$i$i$i93$i = $this + 12 | 0;
  $conv$i = +(((HEAP32[$__first_$i$i$i93$i >> 2] | 0) + 1 | 0) >>> 0);
  $7 = +HEAPF32[$this + 16 >> 2];
  do if ($cmp$i | $conv$i > +($1 >>> 0) * $7) {
   $add37$i = ($1 >>> 0 < 3 | ($1 + -1 & $1 | 0) != 0) & 1 | $1 << 1;
   $conv44$i = ~~+Math_ceil(+($conv$i / $7)) >>> 0;
   __ZNSt3__212__hash_tableINS_17__hash_value_typeIi12arControllerEENS_22__unordered_map_hasherIiS3_NS_4hashIiEELb1EEENS_21__unordered_map_equalIiS3_NS_8equal_toIiEELb1EEENS_9allocatorIS3_EEE6rehashEj($this, $add37$i >>> 0 < $conv44$i >>> 0 ? $conv44$i : $add37$i);
   $8 = HEAP32[$__first_$i$i$i$i37$i >> 2] | 0;
   $sub$i73$i = $8 + -1 | 0;
   if (!($sub$i73$i & $8)) {
    $__bc$0$i = $8;
    $__chash$1$i = $sub$i73$i & $0;
    break;
   }
   if ($0 >>> 0 < $8 >>> 0) {
    $__bc$0$i = $8;
    $__chash$1$i = $0;
   } else {
    $__bc$0$i = $8;
    $__chash$1$i = ($0 >>> 0) % ($8 >>> 0) | 0;
   }
  } else {
   $__bc$0$i = $1;
   $__chash$1$i = $__chash$0$i;
  } while (0);
  $10 = HEAP32[(HEAP32[$this >> 2] | 0) + ($__chash$1$i << 2) >> 2] | 0;
  if (!$10) {
   $__first_$i$i$i = $this + 8 | 0;
   HEAP32[HEAP32[$__h$i >> 2] >> 2] = HEAP32[$__first_$i$i$i >> 2];
   HEAP32[$__first_$i$i$i >> 2] = HEAP32[$__h$i >> 2];
   HEAP32[(HEAP32[$this >> 2] | 0) + ($__chash$1$i << 2) >> 2] = $__first_$i$i$i;
   $15 = HEAP32[$__h$i >> 2] | 0;
   $16 = HEAP32[$15 >> 2] | 0;
   if (!$16) $__first_$i$i$i38$pre$phi$iZZZZ2D = $__h$i; else {
    $17 = HEAP32[$16 + 4 >> 2] | 0;
    $sub$i$i = $__bc$0$i + -1 | 0;
    if (!($sub$i$i & $__bc$0$i)) $cond6$i$i = $17 & $sub$i$i; else if ($17 >>> 0 < $__bc$0$i >>> 0) $cond6$i$i = $17; else $cond6$i$i = ($17 >>> 0) % ($__bc$0$i >>> 0) | 0;
    HEAP32[(HEAP32[$this >> 2] | 0) + ($cond6$i$i << 2) >> 2] = $15;
    $__first_$i$i$i38$pre$phi$iZZZZ2D = $__h$i;
   }
  } else {
   HEAP32[HEAP32[$__h$i >> 2] >> 2] = HEAP32[$10 >> 2];
   HEAP32[$10 >> 2] = HEAP32[$__h$i >> 2];
   $__first_$i$i$i38$pre$phi$iZZZZ2D = $__h$i;
  }
  $22 = HEAP32[$__first_$i$i$i38$pre$phi$iZZZZ2D >> 2] | 0;
  HEAP32[$__first_$i$i$i93$i >> 2] = (HEAP32[$__first_$i$i$i93$i >> 2] | 0) + 1;
  HEAP32[$__first_$i$i$i38$pre$phi$iZZZZ2D >> 2] = 0;
  $__nd$1$i = $22;
 }
 STACKTOP = sp;
 return $__nd$1$i + 16 | 0;
}

function __ZNSt3__213unordered_mapIi7ARParamNS_4hashIiEENS_8equal_toIiEENS_9allocatorINS_4pairIKiS1_EEEEEixERS8_($this, $__k) {
 $this = $this | 0;
 $__k = $__k | 0;
 var $$pn$i = 0, $0 = 0, $1 = 0, $10 = 0, $15 = 0, $16 = 0, $17 = 0, $22 = 0, $3 = 0, $4 = 0, $7 = 0.0, $8 = 0, $__bc$0$i = 0, $__chash$0$i = 0, $__chash$1$i = 0, $__first_$i$i$i = 0, $__first_$i$i$i$i54$i = 0, $__first_$i$i$i37$pre$phi$iZZZZ2D = 0, $__first_$i$i$i86$i = 0, $__h$i = 0, $__nd$0$i = 0, $__nd$1$i = 0, $add37$i = 0, $cmp$i = 0, $cond6$i$i = 0, $cond6$i76$i = 0, $cond6$i97$i = 0, $conv$i = 0.0, $conv44$i = 0, $ref$tmp2 = 0, $ref$tmp5 = 0, $sub$i$i = 0, $sub$i55$i = 0, $sub$i67$i = 0, $tobool$i69$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 $__h$i = sp + 4 | 0;
 $ref$tmp2 = sp;
 $ref$tmp5 = sp + 16 | 0;
 HEAP32[$ref$tmp2 >> 2] = $__k;
 $0 = HEAP32[$__k >> 2] | 0;
 $__first_$i$i$i$i54$i = $this + 4 | 0;
 $1 = HEAP32[$__first_$i$i$i$i54$i >> 2] | 0;
 $cmp$i = ($1 | 0) == 0;
 L1 : do if ($cmp$i) {
  $__chash$0$i = 0;
  label = 15;
 } else {
  $sub$i67$i = $1 + -1 | 0;
  $tobool$i69$i = ($sub$i67$i & $1 | 0) == 0;
  if ($tobool$i69$i) $cond6$i76$i = $sub$i67$i & $0; else if ($0 >>> 0 < $1 >>> 0) $cond6$i76$i = $0; else $cond6$i76$i = ($0 >>> 0) % ($1 >>> 0) | 0;
  $3 = HEAP32[(HEAP32[$this >> 2] | 0) + ($cond6$i76$i << 2) >> 2] | 0;
  if (!$3) {
   $__chash$0$i = $cond6$i76$i;
   label = 15;
  } else {
   $$pn$i = $3;
   while (1) {
    $__nd$0$i = HEAP32[$$pn$i >> 2] | 0;
    if (!$__nd$0$i) {
     $__chash$0$i = $cond6$i76$i;
     label = 15;
     break L1;
    }
    $4 = HEAP32[$__nd$0$i + 4 >> 2] | 0;
    if (($4 | 0) != ($0 | 0)) {
     if ($tobool$i69$i) $cond6$i97$i = $4 & $sub$i67$i; else if ($4 >>> 0 < $1 >>> 0) $cond6$i97$i = $4; else $cond6$i97$i = ($4 >>> 0) % ($1 >>> 0) | 0;
     if (($cond6$i97$i | 0) != ($cond6$i76$i | 0)) {
      $__chash$0$i = $cond6$i76$i;
      label = 15;
      break L1;
     }
    }
    if ((HEAP32[$__nd$0$i + 8 >> 2] | 0) == ($0 | 0)) {
     $__nd$1$i = $__nd$0$i;
     break;
    } else $$pn$i = $__nd$0$i;
   }
  }
 } while (0);
 if ((label | 0) == 15) {
  __ZNSt3__212__hash_tableINS_17__hash_value_typeIi7ARParamEENS_22__unordered_map_hasherIiS3_NS_4hashIiEELb1EEENS_21__unordered_map_equalIiS3_NS_8equal_toIiEELb1EEENS_9allocatorIS3_EEE21__construct_node_hashIRKNS_21piecewise_construct_tEJNS_5tupleIJRKiEEENSJ_IJEEEEEENS_10unique_ptrINS_11__hash_nodeIS3_PvEENS_22__hash_node_destructorINSC_ISR_EEEEEEjOT_DpOT0_($__h$i, $this, $0, 17784, $ref$tmp2, $ref$tmp5);
  $__first_$i$i$i86$i = $this + 12 | 0;
  $conv$i = +(((HEAP32[$__first_$i$i$i86$i >> 2] | 0) + 1 | 0) >>> 0);
  $7 = +HEAPF32[$this + 16 >> 2];
  do if ($cmp$i | $conv$i > +($1 >>> 0) * $7) {
   $add37$i = ($1 >>> 0 < 3 | ($1 + -1 & $1 | 0) != 0) & 1 | $1 << 1;
   $conv44$i = ~~+Math_ceil(+($conv$i / $7)) >>> 0;
   __ZNSt3__212__hash_tableINS_17__hash_value_typeIi7ARParamEENS_22__unordered_map_hasherIiS3_NS_4hashIiEELb1EEENS_21__unordered_map_equalIiS3_NS_8equal_toIiEELb1EEENS_9allocatorIS3_EEE6rehashEj($this, $add37$i >>> 0 < $conv44$i >>> 0 ? $conv44$i : $add37$i);
   $8 = HEAP32[$__first_$i$i$i$i54$i >> 2] | 0;
   $sub$i55$i = $8 + -1 | 0;
   if (!($sub$i55$i & $8)) {
    $__bc$0$i = $8;
    $__chash$1$i = $sub$i55$i & $0;
    break;
   }
   if ($0 >>> 0 < $8 >>> 0) {
    $__bc$0$i = $8;
    $__chash$1$i = $0;
   } else {
    $__bc$0$i = $8;
    $__chash$1$i = ($0 >>> 0) % ($8 >>> 0) | 0;
   }
  } else {
   $__bc$0$i = $1;
   $__chash$1$i = $__chash$0$i;
  } while (0);
  $10 = HEAP32[(HEAP32[$this >> 2] | 0) + ($__chash$1$i << 2) >> 2] | 0;
  if (!$10) {
   $__first_$i$i$i = $this + 8 | 0;
   HEAP32[HEAP32[$__h$i >> 2] >> 2] = HEAP32[$__first_$i$i$i >> 2];
   HEAP32[$__first_$i$i$i >> 2] = HEAP32[$__h$i >> 2];
   HEAP32[(HEAP32[$this >> 2] | 0) + ($__chash$1$i << 2) >> 2] = $__first_$i$i$i;
   $15 = HEAP32[$__h$i >> 2] | 0;
   $16 = HEAP32[$15 >> 2] | 0;
   if (!$16) $__first_$i$i$i37$pre$phi$iZZZZ2D = $__h$i; else {
    $17 = HEAP32[$16 + 4 >> 2] | 0;
    $sub$i$i = $__bc$0$i + -1 | 0;
    if (!($sub$i$i & $__bc$0$i)) $cond6$i$i = $17 & $sub$i$i; else if ($17 >>> 0 < $__bc$0$i >>> 0) $cond6$i$i = $17; else $cond6$i$i = ($17 >>> 0) % ($__bc$0$i >>> 0) | 0;
    HEAP32[(HEAP32[$this >> 2] | 0) + ($cond6$i$i << 2) >> 2] = $15;
    $__first_$i$i$i37$pre$phi$iZZZZ2D = $__h$i;
   }
  } else {
   HEAP32[HEAP32[$__h$i >> 2] >> 2] = HEAP32[$10 >> 2];
   HEAP32[$10 >> 2] = HEAP32[$__h$i >> 2];
   $__first_$i$i$i37$pre$phi$iZZZZ2D = $__h$i;
  }
  $22 = HEAP32[$__first_$i$i$i37$pre$phi$iZZZZ2D >> 2] | 0;
  HEAP32[$__first_$i$i$i86$i >> 2] = (HEAP32[$__first_$i$i$i86$i >> 2] | 0) + 1;
  HEAP32[$__first_$i$i$i37$pre$phi$iZZZZ2D >> 2] = 0;
  $__nd$1$i = $22;
 }
 STACKTOP = sp;
 return $__nd$1$i + 16 | 0;
}

function __ZN10__cxxabiv112_GLOBAL__N_117parse_source_nameINS0_2DbEEEPKcS4_S4_RT_($first, $last, $db) {
 $first = $first | 0;
 $last = $last | 0;
 $db = $db | 0;
 var $1 = 0, $3 = 0, $6 = 0, $__end_$i = 0, $__end_$i32 = 0, $__i$0$i$i = 0, $__p$0$i$i = 0, $add$ptr = 0, $agg$tmp = 0, $and$i$i$i$i = 0, $c$0$in = 0, $call$i = 0, $call$i$i$i = 0, $incdec$ptr = 0, $isdigittmp = 0, $isdigittmp25 = 0, $n$0 = 0, $r = 0, $ref$tmp$i$i = 0, $retval$0$i = 0, $retval$3 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48);
 $ref$tmp$i$i = sp + 24 | 0;
 $r = sp + 12 | 0;
 $agg$tmp = sp;
 L1 : do if (($first | 0) == ($last | 0)) $retval$3 = $first; else {
  $isdigittmp = (HEAP8[$first >> 0] | 0) + -48 | 0;
  if ($isdigittmp >>> 0 < 10) {
   $add$ptr = $first + 1 | 0;
   if (($add$ptr | 0) == ($last | 0)) $retval$3 = $first; else {
    $c$0$in = $add$ptr;
    $n$0 = $isdigittmp;
    while (1) {
     $isdigittmp25 = (HEAP8[$c$0$in >> 0] | 0) + -48 | 0;
     if ($isdigittmp25 >>> 0 >= 10) break;
     $incdec$ptr = $c$0$in + 1 | 0;
     if (($incdec$ptr | 0) == ($last | 0)) {
      $retval$3 = $first;
      break L1;
     }
     $c$0$in = $incdec$ptr;
     $n$0 = $isdigittmp25 + ($n$0 * 10 | 0) | 0;
    }
    if (($last - $c$0$in | 0) >>> 0 < $n$0 >>> 0) $retval$3 = $first; else {
     HEAP32[$r >> 2] = 0;
     HEAP32[$r + 4 >> 2] = 0;
     HEAP32[$r + 8 >> 2] = 0;
     if ($n$0 >>> 0 > 4294967279) __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($r);
     if ($n$0 >>> 0 < 11) {
      HEAP8[$r + 11 >> 0] = $n$0;
      $__p$0$i$i = $r;
     } else {
      $and$i$i$i$i = $n$0 + 16 & -16;
      $call$i$i$i = __ZN10__cxxabiv112_GLOBAL__N_112malloc_allocIcE8allocateEj($and$i$i$i$i) | 0;
      HEAP32[$r >> 2] = $call$i$i$i;
      HEAP32[$r + 8 >> 2] = $and$i$i$i$i | -2147483648;
      HEAP32[$r + 4 >> 2] = $n$0;
      $__p$0$i$i = $call$i$i$i;
     }
     __ZNSt3__211char_traitsIcE4copyEPcPKcj($__p$0$i$i, $c$0$in, $n$0) | 0;
     HEAP8[$ref$tmp$i$i >> 0] = 0;
     __ZNSt3__211char_traitsIcE6assignERcRKc($__p$0$i$i + $n$0 | 0, $ref$tmp$i$i);
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEC2ERKS7_jjRKS6_($ref$tmp$i$i, $r, 10);
     $call$i = __ZNSt3__211char_traitsIcE6lengthEPKc(16267) | 0;
     $1 = HEAP8[$ref$tmp$i$i + 11 >> 0] | 0;
     if (($call$i | 0) == (($1 << 24 >> 24 < 0 ? HEAP32[$ref$tmp$i$i + 4 >> 2] | 0 : $1 & 255) | 0)) $retval$0$i = (__ZNKSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE7compareEjjPKcj($ref$tmp$i$i, 16267, $call$i) | 0) == 0; else $retval$0$i = 0;
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($ref$tmp$i$i);
     if ($retval$0$i) {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj22EEERAT__Kc($ref$tmp$i$i);
      $__end_$i = $db + 4 | 0;
      $3 = HEAP32[$__end_$i >> 2] | 0;
      if ($3 >>> 0 < (HEAP32[$db + 8 >> 2] | 0) >>> 0) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($3, $ref$tmp$i$i);
       HEAP32[$__end_$i >> 2] = (HEAP32[$__end_$i >> 2] | 0) + 24;
      } else __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIS3_EEvOT_($db, $ref$tmp$i$i);
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($ref$tmp$i$i);
     } else {
      HEAP32[$agg$tmp >> 2] = HEAP32[$r >> 2];
      HEAP32[$agg$tmp + 4 >> 2] = HEAP32[$r + 4 >> 2];
      HEAP32[$agg$tmp + 8 >> 2] = HEAP32[$r + 8 >> 2];
      $__i$0$i$i = 0;
      while (1) {
       if (($__i$0$i$i | 0) == 3) break;
       HEAP32[$r + ($__i$0$i$i << 2) >> 2] = 0;
       $__i$0$i$i = $__i$0$i$i + 1 | 0;
      }
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ENSt3__212basic_stringIcNS2_11char_traitsIcEENS0_12malloc_allocIcEEEE($ref$tmp$i$i, $agg$tmp);
      $__end_$i32 = $db + 4 | 0;
      $6 = HEAP32[$__end_$i32 >> 2] | 0;
      if ($6 >>> 0 < (HEAP32[$db + 8 >> 2] | 0) >>> 0) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($6, $ref$tmp$i$i);
       HEAP32[$__end_$i32 >> 2] = (HEAP32[$__end_$i32 >> 2] | 0) + 24;
      } else __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIS3_EEvOT_($db, $ref$tmp$i$i);
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($ref$tmp$i$i);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($agg$tmp);
     }
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($r);
     $retval$3 = $c$0$in + $n$0 | 0;
    }
   }
  } else $retval$3 = $first;
 } while (0);
 STACKTOP = sp;
 return $retval$3 | 0;
}

function _arParamLoad($filename, $num, $param, $varargs) {
 $filename = $filename | 0;
 $num = $num | 0;
 $param = $param | 0;
 $varargs = $varargs | 0;
 var $15 = 0, $16 = 0, $20 = 0.0, $4 = 0, $5 = 0, $8 = 0.0, $add = 0, $ap = 0, $arrayidx37 = 0, $arrayidx39 = 0, $call = 0, $call13 = 0, $call14 = 0, $call15 = 0, $call17 = 0, $call30 = 0, $call31 = 0, $call32 = 0, $call5 = 0, $call6 = 0, $call7 = 0, $cmp35 = 0, $dist_function_version$035 = 0, $dist_function_version34 = 0, $dist_function_version50 = 0, $i$0 = 0, $i$1 = 0, $param_wasRead = 0, $ret$037 = 0, $ret$041 = 0, $vararg_buffer = 0, $vararg_buffer13 = 0, $vararg_buffer15 = 0, $vararg_buffer18 = 0, $vararg_buffer2 = 0, $vararg_buffer6 = 0, $vararg_buffer9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 256 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(256);
 $vararg_buffer18 = sp + 232 | 0;
 $vararg_buffer15 = sp + 224 | 0;
 $vararg_buffer13 = sp + 216 | 0;
 $vararg_buffer9 = sp + 208 | 0;
 $vararg_buffer6 = sp + 200 | 0;
 $vararg_buffer2 = sp + 192 | 0;
 $vararg_buffer = sp + 184 | 0;
 $ap = sp + 240 | 0;
 $param_wasRead = sp;
 do if (($filename | 0) != 0 & ($num | 0) > 0 & ($param | 0) != 0) {
  $call = _fopen($filename, 4206) | 0;
  if (!$call) {
   $call5 = ___errno_location() | 0;
   HEAP32[$vararg_buffer >> 2] = HEAP32[$call5 >> 2];
   HEAP32[$vararg_buffer + 4 >> 2] = $filename;
   _arLog(3, 4209, $vararg_buffer);
   $call6 = ___errno_location() | 0;
   $call7 = _strerror(HEAP32[$call6 >> 2] | 0) | 0;
   HEAP32[$vararg_buffer2 >> 2] = 18825;
   HEAP32[$vararg_buffer2 + 4 >> 2] = $call7;
   _arLog(3, 4713, $vararg_buffer2);
   $ret$037 = -1;
   break;
  }
  _fseek($call, 0, 2) | 0;
  L6 : do if (!(_ferror($call) | 0)) {
   $call17 = _ftell($call) | 0;
   _rewind($call);
   $i$0 = 0;
   while (1) {
    if (($i$0 | 0) >= 4) {
     label = 9;
     break;
    }
    $4 = HEAP32[1652 + ($i$0 << 3) + 4 >> 2] | 0;
    $add = $i$0 + 1 | 0;
    if (!(($call17 | 0) % ($4 | 0) | 0)) {
     $5 = $4;
     $dist_function_version$035 = $add;
     break;
    } else $i$0 = $add;
   }
   do if ((label | 0) == 9) if (($i$0 | 0) == 4) {
    _arLog(3, 4323, $vararg_buffer13);
    $ret$041 = -1;
    break L6;
   } else {
    $5 = HEAP32[1652 + (0 << 3) + 4 >> 2] | 0;
    $dist_function_version$035 = 0;
    break;
   } while (0);
   if ((_fread($param_wasRead, $5, 1, $call) | 0) != 1) {
    $call30 = ___errno_location() | 0;
    HEAP32[$vararg_buffer15 >> 2] = HEAP32[$call30 >> 2];
    _arLog(3, 4403, $vararg_buffer15);
    $call31 = ___errno_location() | 0;
    $call32 = _strerror(HEAP32[$call31 >> 2] | 0) | 0;
    HEAP32[$vararg_buffer18 >> 2] = 18825;
    HEAP32[$vararg_buffer18 + 4 >> 2] = $call32;
    _arLog(3, 4713, $vararg_buffer18);
    $ret$041 = -1;
    break;
   }
   $dist_function_version34 = $param_wasRead + 176 | 0;
   HEAP32[$dist_function_version34 >> 2] = $dist_function_version$035;
   _byteswap($param_wasRead);
   $cmp35 = ($dist_function_version$035 | 0) == 1;
   $arrayidx39 = $param_wasRead + 128 | 0;
   $arrayidx37 = $param_wasRead + 120 | 0;
   if ($cmp35) {
    $8 = +HEAPF64[$arrayidx37 >> 3];
    HEAPF64[$arrayidx37 >> 3] = +HEAPF64[$arrayidx39 >> 3];
    HEAPF64[$arrayidx39 >> 3] = $8;
   }
   _memcpy($param | 0, $param_wasRead | 0, 184) | 0;
   HEAP32[$ap >> 2] = $varargs;
   $dist_function_version50 = $param + 176 | 0;
   $i$1 = 1;
   while (1) {
    if (($i$1 | 0) >= ($num | 0)) {
     $ret$041 = 0;
     break L6;
    }
    $15 = (HEAP32[$ap >> 2] | 0) + (4 - 1) & ~(4 - 1);
    $16 = HEAP32[$15 >> 2] | 0;
    HEAP32[$ap >> 2] = $15 + 4;
    HEAP32[$16 + 176 >> 2] = HEAP32[$dist_function_version50 >> 2];
    if ((_fread($param_wasRead, HEAP32[1652 + ((HEAP32[$dist_function_version50 >> 2] | 0) + -1 << 3) + 4 >> 2] | 0, 1, $call) | 0) != 1) {
     $ret$041 = -1;
     break L6;
    }
    HEAP32[$dist_function_version34 >> 2] = $dist_function_version$035;
    _byteswap($param_wasRead);
    if ($cmp35) {
     $20 = +HEAPF64[$arrayidx37 >> 3];
     HEAPF64[$arrayidx37 >> 3] = +HEAPF64[$arrayidx39 >> 3];
     HEAPF64[$arrayidx39 >> 3] = $20;
    }
    _memcpy($16 | 0, $param_wasRead | 0, 184) | 0;
    $i$1 = $i$1 + 1 | 0;
   }
  } else {
   $call13 = ___errno_location() | 0;
   HEAP32[$vararg_buffer6 >> 2] = HEAP32[$call13 >> 2];
   _arLog(3, 4278, $vararg_buffer6);
   $call14 = ___errno_location() | 0;
   $call15 = _strerror(HEAP32[$call14 >> 2] | 0) | 0;
   HEAP32[$vararg_buffer9 >> 2] = 18825;
   HEAP32[$vararg_buffer9 + 4 >> 2] = $call15;
   _arLog(3, 4713, $vararg_buffer9);
   $ret$041 = -1;
  } while (0);
  _fclose($call) | 0;
  $ret$037 = $ret$041;
 } else $ret$037 = -1; while (0);
 STACKTOP = sp;
 return $ret$037 | 0;
}

function __ZN10__cxxabiv112_GLOBAL__N_126parse_base_unresolved_nameINS0_2DbEEEPKcS4_S4_RT_($first, $last, $db) {
 $first = $first | 0;
 $last = $last | 0;
 $db = $db | 0;
 var $0 = 0, $10 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $5 = 0, $6 = 0, $7 = 0, $__end_$i = 0, $__end_$i57 = 0, $add$ptr = 0, $add$ptr$i53 = 0, $add$ptr$i63 = 0, $args = 0, $call = 0, $call16 = 0, $call36 = 0, $call44 = 0, $call47 = 0, $call50 = 0, $cmp1 = 0, $incdec$ptr$i$i$i = 0, $incdec$ptr$i$i$i66 = 0, $retval$2 = 0, $tobool$i$i$i$i$i = 0, $tobool$i$i$i$i$i74 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $args = sp;
 L1 : do if (($last - $first | 0) > 1) {
  $0 = HEAP8[$first >> 0] | 0;
  $cmp1 = $0 << 24 >> 24 == 111;
  switch ($0 << 24 >> 24) {
  case 100:
  case 111:
   {
    if ((HEAP8[$first + 1 >> 0] | 0) == 110) {
     $add$ptr = $first + 2 | 0;
     if (!$cmp1) {
      $call36 = __ZN10__cxxabiv112_GLOBAL__N_121parse_destructor_nameINS0_2DbEEEPKcS4_S4_RT_($add$ptr, $last, $db) | 0;
      $retval$2 = ($call36 | 0) == ($add$ptr | 0) ? $first : $call36;
      break L1;
     }
     $call = __ZN10__cxxabiv112_GLOBAL__N_119parse_operator_nameINS0_2DbEEEPKcS4_S4_RT_($add$ptr, $last, $db) | 0;
     if (($call | 0) == ($add$ptr | 0)) {
      $retval$2 = $first;
      break L1;
     }
     $call16 = __ZN10__cxxabiv112_GLOBAL__N_119parse_template_argsINS0_2DbEEEPKcS4_S4_RT_($call, $last, $db) | 0;
     if (($call16 | 0) == ($call | 0)) {
      $retval$2 = $call;
      break L1;
     }
     $__end_$i = $db + 4 | 0;
     $2 = HEAP32[$__end_$i >> 2] | 0;
     if ((($2 - (HEAP32[$db >> 2] | 0) | 0) / 24 | 0) >>> 0 < 2) {
      $retval$2 = $call16;
      break L1;
     }
     __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($args, $2 + -24 | 0);
     $5 = HEAP32[$__end_$i >> 2] | 0;
     $add$ptr$i53 = $5 + -24 | 0;
     $6 = $5;
     while (1) {
      if (($6 | 0) == ($add$ptr$i53 | 0)) break;
      $incdec$ptr$i$i$i = $6 + -24 | 0;
      HEAP32[$__end_$i >> 2] = $incdec$ptr$i$i$i;
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($incdec$ptr$i$i$i);
      $6 = HEAP32[$__end_$i >> 2] | 0;
     }
     $7 = HEAP8[$args + 11 >> 0] | 0;
     $tobool$i$i$i$i$i = $7 << 24 >> 24 < 0;
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($5 + -48 | 0, $tobool$i$i$i$i$i ? HEAP32[$args >> 2] | 0 : $args, $tobool$i$i$i$i$i ? HEAP32[$args + 4 >> 2] | 0 : $7 & 255) | 0;
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($args);
     $retval$2 = $call16;
     break L1;
    }
    break;
   }
  default:
   {}
  }
  $call44 = __ZN10__cxxabiv112_GLOBAL__N_115parse_simple_idINS0_2DbEEEPKcS4_S4_RT_($first, $last, $db) | 0;
  if (($call44 | 0) == ($first | 0)) {
   $call47 = __ZN10__cxxabiv112_GLOBAL__N_119parse_operator_nameINS0_2DbEEEPKcS4_S4_RT_($first, $last, $db) | 0;
   if (($call47 | 0) == ($first | 0)) $retval$2 = $first; else {
    $call50 = __ZN10__cxxabiv112_GLOBAL__N_119parse_template_argsINS0_2DbEEEPKcS4_S4_RT_($call47, $last, $db) | 0;
    if (($call50 | 0) == ($call47 | 0)) $retval$2 = $call47; else {
     $__end_$i57 = $db + 4 | 0;
     $10 = HEAP32[$__end_$i57 >> 2] | 0;
     if ((($10 - (HEAP32[$db >> 2] | 0) | 0) / 24 | 0) >>> 0 < 2) $retval$2 = $call50; else {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($args, $10 + -24 | 0);
      $13 = HEAP32[$__end_$i57 >> 2] | 0;
      $add$ptr$i63 = $13 + -24 | 0;
      $14 = $13;
      while (1) {
       if (($14 | 0) == ($add$ptr$i63 | 0)) break;
       $incdec$ptr$i$i$i66 = $14 + -24 | 0;
       HEAP32[$__end_$i57 >> 2] = $incdec$ptr$i$i$i66;
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($incdec$ptr$i$i$i66);
       $14 = HEAP32[$__end_$i57 >> 2] | 0;
      }
      $15 = HEAP8[$args + 11 >> 0] | 0;
      $tobool$i$i$i$i$i74 = $15 << 24 >> 24 < 0;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($13 + -48 | 0, $tobool$i$i$i$i$i74 ? HEAP32[$args >> 2] | 0 : $args, $tobool$i$i$i$i$i74 ? HEAP32[$args + 4 >> 2] | 0 : $15 & 255) | 0;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($args);
      $retval$2 = $call50;
     }
    }
   }
  } else $retval$2 = $call44;
 } else $retval$2 = $first; while (0);
 STACKTOP = sp;
 return $retval$2 | 0;
}

function _minv($ap, $dimen, $rowa) {
 $ap = $ap | 0;
 $dimen = $dimen | 0;
 $rowa = $rowa | 0;
 var $10 = 0.0, $15 = 0.0, $3 = 0, $5 = 0.0, $7 = 0.0, $9 = 0.0, $add$ptr = 0, $add$ptr35 = 0, $add$ptr48 = 0, $add$ptr52 = 0, $arrayidx19 = 0, $arrayidx20 = 0, $arrayidx74 = 0, $call = 0.0, $cmp9 = 0, $i$0 = 0, $i$1 = 0, $i$2 = 0, $indvars$iv = 0, $indvars$iv111 = 0, $ip$0 = 0, $ip$1 = 0, $ip$2 = 0, $j$0 = 0, $j$1 = 0, $j$2 = 0, $j$3 = 0, $n$0 = 0, $n$1 = 0, $n$2 = 0, $nos = 0, $p$0 = 0.0, $retval$0 = 0, $scevgep = 0, $wap$0 = 0, $wap$1 = 0, $wap$2 = 0, $wap$3 = 0, $wap$4 = 0, $wbp$0 = 0, $wbp$1 = 0, $wbp$2 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 2e3 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(2e3);
 $nos = sp;
 L1 : do if (($dimen | 0) > 500) $retval$0 = 0; else {
  switch ($dimen | 0) {
  case 0:
   {
    $retval$0 = 0;
    break L1;
    break;
   }
  case 1:
   {
    HEAPF64[$ap >> 3] = 1.0 / +HEAPF64[$ap >> 3];
    $retval$0 = $ap;
    break L1;
    break;
   }
  default:
   $n$0 = 0;
  }
  while (1) {
   if (($n$0 | 0) >= ($dimen | 0)) break;
   HEAP32[$nos + ($n$0 << 2) >> 2] = $n$0;
   $n$0 = $n$0 + 1 | 0;
  }
  $scevgep = $ap + ($dimen + -1 << 3) | 0;
  $indvars$iv = $scevgep;
  $ip$0 = 0;
  $n$1 = 0;
  while (1) {
   if (($n$1 | 0) >= ($dimen | 0)) {
    $n$2 = 0;
    break;
   }
   $add$ptr = $ap + ((Math_imul($n$1, $rowa) | 0) << 3) | 0;
   $i$0 = $n$1;
   $ip$1 = $ip$0;
   $p$0 = 0.0;
   $wap$0 = $add$ptr;
   while (1) {
    if (($i$0 | 0) == ($dimen | 0)) break;
    $call = +Math_abs(+(+HEAPF64[$wap$0 >> 3]));
    $cmp9 = $p$0 < $call;
    $ip$2 = $cmp9 ? $i$0 : $ip$1;
    $i$0 = $i$0 + 1 | 0;
    $ip$1 = $ip$2;
    $p$0 = $cmp9 ? $call : $p$0;
    $wap$0 = $wap$0 + ($rowa << 3) | 0;
   }
   if ($p$0 <= 1.0e-10) {
    $retval$0 = 0;
    break L1;
   }
   $arrayidx19 = $nos + ($ip$1 << 2) | 0;
   $3 = HEAP32[$arrayidx19 >> 2] | 0;
   $arrayidx20 = $nos + ($n$1 << 2) | 0;
   HEAP32[$arrayidx19 >> 2] = HEAP32[$arrayidx20 >> 2];
   HEAP32[$arrayidx20 >> 2] = $3;
   $j$0 = 0;
   $wap$1 = $ap + ((Math_imul($ip$1, $rowa) | 0) << 3) | 0;
   $wbp$0 = $add$ptr;
   while (1) {
    if (($j$0 | 0) == ($dimen | 0)) break;
    $5 = +HEAPF64[$wap$1 >> 3];
    HEAPF64[$wap$1 >> 3] = +HEAPF64[$wbp$0 >> 3];
    HEAPF64[$wbp$0 >> 3] = $5;
    $j$0 = $j$0 + 1 | 0;
    $wap$1 = $wap$1 + 8 | 0;
    $wbp$0 = $wbp$0 + 8 | 0;
   }
   $7 = +HEAPF64[$add$ptr >> 3];
   $j$1 = 1;
   $wap$2 = $add$ptr;
   while (1) {
    if (($j$1 | 0) == ($dimen | 0)) break;
    $add$ptr35 = $wap$2 + 8 | 0;
    HEAPF64[$wap$2 >> 3] = +HEAPF64[$add$ptr35 >> 3] / $7;
    $j$1 = $j$1 + 1 | 0;
    $wap$2 = $add$ptr35;
   }
   HEAPF64[$indvars$iv >> 3] = 1.0 / $7;
   $i$1 = 0;
   $indvars$iv111 = $scevgep;
   while (1) {
    if (($i$1 | 0) == ($dimen | 0)) break;
    if (($i$1 | 0) != ($n$1 | 0)) {
     $add$ptr48 = $ap + ((Math_imul($i$1, $rowa) | 0) << 3) | 0;
     $9 = +HEAPF64[$add$ptr48 >> 3];
     $j$2 = 1;
     $wap$3 = $add$ptr48;
     $wbp$1 = $add$ptr;
     while (1) {
      $10 = +HEAPF64[$wbp$1 >> 3];
      if (($j$2 | 0) == ($dimen | 0)) break;
      $add$ptr52 = $wap$3 + 8 | 0;
      HEAPF64[$wap$3 >> 3] = +HEAPF64[$add$ptr52 >> 3] - $9 * $10;
      $j$2 = $j$2 + 1 | 0;
      $wap$3 = $add$ptr52;
      $wbp$1 = $wbp$1 + 8 | 0;
     }
     HEAPF64[$indvars$iv111 >> 3] = -($9 * $10);
    }
    $i$1 = $i$1 + 1 | 0;
    $indvars$iv111 = $indvars$iv111 + ($rowa << 3) | 0;
   }
   $indvars$iv = $indvars$iv + ($rowa << 3) | 0;
   $ip$0 = $ip$1;
   $n$1 = $n$1 + 1 | 0;
  }
  while (1) {
   if (($n$2 | 0) < ($dimen | 0)) $j$3 = $n$2; else {
    $retval$0 = $ap;
    break L1;
   }
   while (1) {
    $arrayidx74 = $nos + ($j$3 << 2) | 0;
    if (($j$3 | 0) >= ($dimen | 0)) break;
    if ((HEAP32[$arrayidx74 >> 2] | 0) == ($n$2 | 0)) break;
    $j$3 = $j$3 + 1 | 0;
   }
   HEAP32[$arrayidx74 >> 2] = HEAP32[$nos + ($n$2 << 2) >> 2];
   $i$2 = 0;
   $wap$4 = $ap + ($j$3 << 3) | 0;
   $wbp$2 = $ap + ($n$2 << 3) | 0;
   while (1) {
    if (($i$2 | 0) >= ($dimen | 0)) break;
    $15 = +HEAPF64[$wap$4 >> 3];
    HEAPF64[$wap$4 >> 3] = +HEAPF64[$wbp$2 >> 3];
    HEAPF64[$wbp$2 >> 3] = $15;
    $i$2 = $i$2 + 1 | 0;
    $wap$4 = $wap$4 + ($rowa << 3) | 0;
    $wbp$2 = $wbp$2 + ($rowa << 3) | 0;
   }
   $n$2 = $n$2 + 1 | 0;
  }
 } while (0);
 STACKTOP = sp;
 return $retval$0 | 0;
}

function _arPattGetIDGlobal($pattHandle, $imageProcMode, $pattDetectMode, $image, $xsize, $ysize, $pixelFormat, $paramLTf, $vertex, $pattRatio, $codePatt, $dirPatt, $cfPatt, $codeMatrix, $dirMatrix, $cfMatrix, $matrixCodeType, $errorCorrected, $codeGlobalID_p) {
 $pattHandle = $pattHandle | 0;
 $imageProcMode = $imageProcMode | 0;
 $pattDetectMode = $pattDetectMode | 0;
 $image = $image | 0;
 $xsize = $xsize | 0;
 $ysize = $ysize | 0;
 $pixelFormat = $pixelFormat | 0;
 $paramLTf = $paramLTf | 0;
 $vertex = $vertex | 0;
 $pattRatio = +$pattRatio;
 $codePatt = $codePatt | 0;
 $dirPatt = $dirPatt | 0;
 $cfPatt = $cfPatt | 0;
 $codeMatrix = $codeMatrix | 0;
 $dirMatrix = $dirMatrix | 0;
 $cfMatrix = $cfMatrix | 0;
 $matrixCodeType = $matrixCodeType | 0;
 $errorCorrected = $errorCorrected | 0;
 $codeGlobalID_p = $codeGlobalID_p | 0;
 var $0 = 0, $13 = 0, $17 = 0, $2 = 0, $21 = 0, $5 = 0, $and26 = 0, $call36 = 0, $call9 = 0, $codeGlobalID = 0, $errorCodeMtx$0 = 0, $errorCodePatt$0 = 0, $ext_patt = 0, $mul66 = 0, $pattSize = 0, $retval$0 = 0, $tobool = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 12304 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(12304);
 $ext_patt = sp + 8 | 0;
 $codeGlobalID = sp;
 do if (($pattDetectMode + -2 | 0) >>> 0 < 3) {
  $tobool = ($codeGlobalID_p | 0) != 0;
  if (($matrixCodeType | 0) != 2830) {
   $and26 = $matrixCodeType & 255;
   if ((_arPattGetImage2($imageProcMode, 2, $and26, $and26 * 3 | 0, $image, $xsize, $ysize, $pixelFormat, $paramLTf, $vertex, $pattRatio, $ext_patt) | 0) < 0) {
    HEAP32[$codeMatrix >> 2] = -1;
    $errorCodeMtx$0 = -6;
    break;
   }
   $call36 = _get_matrix_code($ext_patt, $and26, $codeMatrix, $dirMatrix, $cfMatrix, $matrixCodeType, $errorCorrected) | 0;
   if (!$tobool) {
    $errorCodeMtx$0 = $call36;
    break;
   }
   $17 = $codeGlobalID_p;
   HEAP32[$17 >> 2] = 0;
   HEAP32[$17 + 4 >> 2] = 0;
   $errorCodeMtx$0 = $call36;
   break;
  }
  if ((_arPattGetImage2($imageProcMode, 2, 14, 42, $image, $xsize, $ysize, $pixelFormat, $paramLTf, $vertex, .875, $ext_patt) | 0) < 0) {
   HEAP32[$codeMatrix >> 2] = -1;
   $errorCodeMtx$0 = -6;
   break;
  }
  $call9 = _get_global_id_code($ext_patt, $codeGlobalID, $dirMatrix, $cfMatrix, $errorCorrected) | 0;
  if (($call9 | 0) < 0) {
   HEAP32[$codeMatrix >> 2] = -1;
   $errorCodeMtx$0 = $call9;
   break;
  }
  $0 = $codeGlobalID;
  $2 = HEAP32[$0 >> 2] | 0;
  $5 = HEAP32[$0 + 4 >> 2] | 0;
  if (($2 | 0) == -1 & ($5 | 0) == -1) {
   HEAP32[$codeMatrix >> 2] = -1;
   $errorCodeMtx$0 = -5;
   break;
  }
  HEAP32[$codeMatrix >> 2] = ($2 & -32768 | 0) == 0 & 0 == 0 ? $2 & 32767 : 0;
  if ($tobool) {
   $13 = $codeGlobalID_p;
   HEAP32[$13 >> 2] = $2;
   HEAP32[$13 + 4 >> 2] = $5;
   $errorCodeMtx$0 = $call9;
  } else $errorCodeMtx$0 = $call9;
 } else $errorCodeMtx$0 = 1; while (0);
 L21 : do switch ($pattDetectMode | 0) {
 case 0:
 case 1:
 case 3:
 case 4:
  {
   if (!$pattHandle) {
    HEAP32[$codePatt >> 2] = -1;
    $errorCodePatt$0 = -1;
    break L21;
   }
   $pattSize = $pattHandle + 28 | 0;
   $21 = HEAP32[$pattSize >> 2] | 0;
   $mul66 = $21 << 2;
   switch ($pattDetectMode | 0) {
   case 0:
   case 3:
    {
     if ((_arPattGetImage2($imageProcMode, 0, $21, $mul66, $image, $xsize, $ysize, $pixelFormat, $paramLTf, $vertex, $pattRatio, $ext_patt) | 0) < 0) {
      HEAP32[$codePatt >> 2] = -1;
      $errorCodePatt$0 = -6;
      break L21;
     } else {
      $errorCodePatt$0 = _pattern_match($pattHandle, 0, $ext_patt, HEAP32[$pattSize >> 2] | 0, $codePatt, $dirPatt, $cfPatt) | 0;
      break L21;
     }
     break;
    }
   default:
    if ((_arPattGetImage2($imageProcMode, 1, $21, $mul66, $image, $xsize, $ysize, $pixelFormat, $paramLTf, $vertex, $pattRatio, $ext_patt) | 0) < 0) {
     HEAP32[$codePatt >> 2] = -1;
     $errorCodePatt$0 = -6;
     break L21;
    } else {
     $errorCodePatt$0 = _pattern_match($pattHandle, 1, $ext_patt, HEAP32[$pattSize >> 2] | 0, $codePatt, $dirPatt, $cfPatt) | 0;
     break L21;
    }
   }
   break;
  }
 default:
  $errorCodePatt$0 = 1;
 } while (0);
 if (($errorCodeMtx$0 | 0) == 1) $retval$0 = $errorCodePatt$0; else $retval$0 = ($errorCodePatt$0 | 0) == 1 ? $errorCodeMtx$0 : ($errorCodePatt$0 & $errorCodeMtx$0 | 0) < 0 ? $errorCodePatt$0 : 0;
 STACKTOP = sp;
 return $retval$0 | 0;
}

function __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE23__append_forward_unsafeIPKcEERS7_T_SC_($this, $__first, $__last) {
 $this = $this | 0;
 $__first = $__first | 0;
 $__last = $__last | 0;
 var $0 = 0, $3 = 0, $5 = 0, $__first$addr$0 = 0, $__first$addr$0$i$i = 0, $__p$0 = 0, $__p$0$i$i = 0, $__p$0$ph$i$i = 0, $__size_$i$i = 0, $__temp = 0, $add = 0, $and$i$i$i$i = 0, $call$i$i$i = 0, $cond$i$i2365 = 0, $cond$i$i6163 = 0, $cond$i15 = 0, $cond$i32 = 0, $cond$i59 = 0, $cond$i9 = 0, $ref$tmp$i$i = 0, $scevgep57 = 0, $sub$ptr$rhs$cast$i$i = 0, $sub$ptr$sub$i$i = 0, $tobool$i$i = 0, $tobool$i$i$i45 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $sub$ptr$rhs$cast$i$i = $__first;
 $ref$tmp$i$i = sp + 12 | 0;
 $__temp = sp;
 $__size_$i$i = $this + 11 | 0;
 $0 = HEAP8[$__size_$i$i >> 0] | 0;
 $tobool$i$i = $0 << 24 >> 24 < 0;
 if ($tobool$i$i) {
  $cond$i59 = HEAP32[$this + 4 >> 2] | 0;
  $cond$i9 = (HEAP32[$this + 8 >> 2] & 2147483647) + -1 | 0;
 } else {
  $cond$i59 = $0 & 255;
  $cond$i9 = 10;
 }
 $sub$ptr$sub$i$i = $__last - $sub$ptr$rhs$cast$i$i | 0;
 do if ($sub$ptr$sub$i$i | 0) {
  if ($tobool$i$i) {
   $3 = HEAP32[$this >> 2] | 0;
   $cond$i$i2365 = $3;
   $cond$i$i6163 = $3;
   $cond$i32 = HEAP32[$this + 4 >> 2] | 0;
  } else {
   $cond$i$i2365 = $this;
   $cond$i$i6163 = $this;
   $cond$i32 = $0 & 255;
  }
  if (__ZNSt3__214__ptr_in_rangeIcEEbPKT_S3_S3_($__first, $cond$i$i6163, $cond$i$i2365 + $cond$i32 | 0) | 0) {
   HEAP32[$__temp >> 2] = 0;
   HEAP32[$__temp + 4 >> 2] = 0;
   HEAP32[$__temp + 8 >> 2] = 0;
   if ($sub$ptr$sub$i$i >>> 0 > 4294967279) __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($__temp);
   if ($sub$ptr$sub$i$i >>> 0 < 11) {
    HEAP8[$__temp + 11 >> 0] = $sub$ptr$sub$i$i;
    $__p$0$ph$i$i = $__temp;
   } else {
    $and$i$i$i$i = $sub$ptr$sub$i$i + 16 & -16;
    $call$i$i$i = __ZN10__cxxabiv112_GLOBAL__N_112malloc_allocIcE8allocateEj($and$i$i$i$i) | 0;
    HEAP32[$__temp >> 2] = $call$i$i$i;
    HEAP32[$__temp + 8 >> 2] = $and$i$i$i$i | -2147483648;
    HEAP32[$__temp + 4 >> 2] = $sub$ptr$sub$i$i;
    $__p$0$ph$i$i = $call$i$i$i;
   }
   $__first$addr$0$i$i = $__first;
   $__p$0$i$i = $__p$0$ph$i$i;
   while (1) {
    if (($__first$addr$0$i$i | 0) == ($__last | 0)) break;
    __ZNSt3__211char_traitsIcE6assignERcRKc($__p$0$i$i, $__first$addr$0$i$i);
    $__first$addr$0$i$i = $__first$addr$0$i$i + 1 | 0;
    $__p$0$i$i = $__p$0$i$i + 1 | 0;
   }
   HEAP8[$ref$tmp$i$i >> 0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($__p$0$ph$i$i + $sub$ptr$sub$i$i | 0, $ref$tmp$i$i);
   $5 = HEAP8[$__temp + 11 >> 0] | 0;
   $tobool$i$i$i45 = $5 << 24 >> 24 < 0;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($this, $tobool$i$i$i45 ? HEAP32[$__temp >> 2] | 0 : $__temp, $tobool$i$i$i45 ? HEAP32[$__temp + 4 >> 2] | 0 : $5 & 255) | 0;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($__temp);
   break;
  }
  $add = $cond$i59 + $sub$ptr$sub$i$i | 0;
  if (($cond$i9 - $cond$i59 | 0) >>> 0 < $sub$ptr$sub$i$i >>> 0) __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE9__grow_byEjjjjjj($this, $cond$i9, $add - $cond$i9 | 0, $cond$i59, $cond$i59, 0);
  if ((HEAP8[$__size_$i$i >> 0] | 0) < 0) $cond$i15 = HEAP32[$this >> 2] | 0; else $cond$i15 = $this;
  $scevgep57 = $__last + ($cond$i59 - $sub$ptr$rhs$cast$i$i) | 0;
  $__first$addr$0 = $__first;
  $__p$0 = $cond$i15 + $cond$i59 | 0;
  while (1) {
   if (($__first$addr$0 | 0) == ($__last | 0)) break;
   __ZNSt3__211char_traitsIcE6assignERcRKc($__p$0, $__first$addr$0);
   $__first$addr$0 = $__first$addr$0 + 1 | 0;
   $__p$0 = $__p$0 + 1 | 0;
  }
  HEAP8[$ref$tmp$i$i >> 0] = 0;
  __ZNSt3__211char_traitsIcE6assignERcRKc($cond$i15 + $scevgep57 | 0, $ref$tmp$i$i);
  if ((HEAP8[$__size_$i$i >> 0] | 0) < 0) {
   HEAP32[$this + 4 >> 2] = $add;
   break;
  } else {
   HEAP8[$__size_$i$i >> 0] = $add;
   break;
  }
 } while (0);
 STACKTOP = sp;
 return;
}

function __ZN10__cxxabiv112_GLOBAL__N_121parse_integer_literalINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($first, $last, $lit, $db) {
 $first = $first | 0;
 $last = $last | 0;
 $lit = $lit | 0;
 $db = $db | 0;
 var $1 = 0, $12 = 0, $3 = 0, $6 = 0, $__end_$i = 0, $__end_$i20 = 0, $__end_$i26 = 0, $__i$0$i$i$i = 0, $__size_$i$i = 0, $__size_$i3$i = 0, $agg$tmp = 0, $call = 0, $cond$i36 = 0, $first$addr$0 = 0, $first$addr$1 = 0, $ref$tmp = 0, $ref$tmp7 = 0, $tobool$i$i31 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48);
 $ref$tmp = sp + 24 | 0;
 $agg$tmp = sp;
 $ref$tmp7 = sp + 12 | 0;
 $call = __ZN10__cxxabiv112_GLOBAL__N_112parse_numberEPKcS2_($first, $last) | 0;
 if (($call | 0) == ($first | 0) | ($call | 0) == ($last | 0)) $first$addr$1 = $first; else if ((HEAP8[$call >> 0] | 0) == 69) {
  $__size_$i$i = $lit + 11 | 0;
  $1 = HEAP8[$__size_$i$i >> 0] | 0;
  $__size_$i3$i = $lit + 4 | 0;
  do if (($1 << 24 >> 24 < 0 ? HEAP32[$__size_$i3$i >> 2] | 0 : $1 & 255) >>> 0 > 3) {
   __ZNSt3__2plIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEENS_12basic_stringIT_T0_T1_EEPKS8_RKSB_($ref$tmp7, 14887, $lit);
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($ref$tmp7, 14885) | 0;
   HEAP32[$agg$tmp >> 2] = HEAP32[$ref$tmp7 >> 2];
   HEAP32[$agg$tmp + 4 >> 2] = HEAP32[$ref$tmp7 + 4 >> 2];
   HEAP32[$agg$tmp + 8 >> 2] = HEAP32[$ref$tmp7 + 8 >> 2];
   $__i$0$i$i$i = 0;
   while (1) {
    if (($__i$0$i$i$i | 0) == 3) break;
    HEAP32[$ref$tmp7 + ($__i$0$i$i$i << 2) >> 2] = 0;
    $__i$0$i$i$i = $__i$0$i$i$i + 1 | 0;
   }
   __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ENSt3__212basic_stringIcNS2_11char_traitsIcEENS0_12malloc_allocIcEEEE($ref$tmp, $agg$tmp);
   $__end_$i = $db + 4 | 0;
   $3 = HEAP32[$__end_$i >> 2] | 0;
   if ($3 >>> 0 < (HEAP32[$db + 8 >> 2] | 0) >>> 0) {
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($3, $ref$tmp);
    HEAP32[$__end_$i >> 2] = (HEAP32[$__end_$i >> 2] | 0) + 24;
   } else __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIS3_EEvOT_($db, $ref$tmp);
   __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($ref$tmp);
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($agg$tmp);
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($ref$tmp7);
  } else {
   $__end_$i20 = $db + 4 | 0;
   $6 = HEAP32[$__end_$i20 >> 2] | 0;
   if ($6 >>> 0 < (HEAP32[$db + 8 >> 2] | 0) >>> 0) {
    HEAP32[$6 >> 2] = 0;
    HEAP32[$6 + 4 >> 2] = 0;
    HEAP32[$6 + 8 >> 2] = 0;
    HEAP32[$6 + 12 >> 2] = 0;
    HEAP32[$6 + 16 >> 2] = 0;
    HEAP32[$6 + 20 >> 2] = 0;
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2Ev($6);
    HEAP32[$__end_$i20 >> 2] = (HEAP32[$__end_$i20 >> 2] | 0) + 24;
    break;
   } else {
    __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE24__emplace_back_slow_pathIJEEEvDpOT_($db);
    break;
   }
  } while (0);
  $__end_$i26 = $db + 4 | 0;
  if ((HEAP8[$first >> 0] | 0) == 110) {
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE9push_backEc((HEAP32[$__end_$i26 >> 2] | 0) + -24 | 0, 45);
   $first$addr$0 = $first + 1 | 0;
  } else $first$addr$0 = $first;
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE23__append_forward_unsafeIPKcEERS7_T_SC_((HEAP32[$__end_$i26 >> 2] | 0) + -24 | 0, $first$addr$0, $call);
  $12 = HEAP8[$__size_$i$i >> 0] | 0;
  $tobool$i$i31 = $12 << 24 >> 24 < 0;
  $cond$i36 = $tobool$i$i31 ? HEAP32[$__size_$i3$i >> 2] | 0 : $12 & 255;
  if ($cond$i36 >>> 0 < 4) __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj((HEAP32[$__end_$i26 >> 2] | 0) + -24 | 0, $tobool$i$i31 ? HEAP32[$lit >> 2] | 0 : $lit, $cond$i36) | 0;
  $first$addr$1 = $call + 1 | 0;
 } else $first$addr$1 = $first;
 STACKTOP = sp;
 return $first$addr$1 | 0;
}

function _icpGetJ_Xc_S($J_Xc_S, $cameraCoord, $T0, $worldCoord) {
 $J_Xc_S = $J_Xc_S | 0;
 $cameraCoord = $cameraCoord | 0;
 $T0 = $T0 | 0;
 $worldCoord = $worldCoord | 0;
 var $14 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0.0, $28 = 0.0, $3 = 0.0, $31 = 0.0, $5 = 0.0, $8 = 0.0, $J_T_S = 0, $J_Xc_T = 0, $add263 = 0.0, $arrayidx14 = 0, $arrayidx18 = 0, $arrayidx23 = 0, $arrayidx252 = 0, $arrayidx3 = 0, $arrayidx32 = 0, $arrayidx36 = 0, $arrayidx41 = 0, $arrayidx6 = 0, $i$0 = 0, $j$0 = 0, $k$0 = 0, $y = 0, $z = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 864 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(864);
 $J_Xc_T = sp + 576 | 0;
 $J_T_S = sp;
 $arrayidx3 = $T0 + 8 | 0;
 $y = $worldCoord + 8 | 0;
 $3 = +HEAPF64[$y >> 3];
 $arrayidx6 = $T0 + 16 | 0;
 $z = $worldCoord + 16 | 0;
 $5 = +HEAPF64[$z >> 3];
 HEAPF64[$cameraCoord >> 3] = +HEAPF64[$T0 + 24 >> 3] + (+HEAPF64[$T0 >> 3] * +HEAPF64[$worldCoord >> 3] + +HEAPF64[$arrayidx3 >> 3] * $3 + +HEAPF64[$arrayidx6 >> 3] * $5);
 $arrayidx14 = $T0 + 32 | 0;
 $8 = +HEAPF64[$worldCoord >> 3];
 $arrayidx18 = $T0 + 40 | 0;
 $arrayidx23 = $T0 + 48 | 0;
 HEAPF64[$cameraCoord + 8 >> 3] = +HEAPF64[$T0 + 56 >> 3] + (+HEAPF64[$arrayidx14 >> 3] * $8 + $3 * +HEAPF64[$arrayidx18 >> 3] + $5 * +HEAPF64[$arrayidx23 >> 3]);
 $arrayidx32 = $T0 + 64 | 0;
 $arrayidx36 = $T0 + 72 | 0;
 $14 = +HEAPF64[$y >> 3];
 $arrayidx41 = $T0 + 80 | 0;
 HEAPF64[$cameraCoord + 16 >> 3] = +HEAPF64[$T0 + 88 >> 3] + ($8 * +HEAPF64[$arrayidx32 >> 3] + +HEAPF64[$arrayidx36 >> 3] * $14 + $5 * +HEAPF64[$arrayidx41 >> 3]);
 $17 = +HEAPF64[$T0 >> 3];
 HEAPF64[$J_Xc_T >> 3] = $8 * $17;
 HEAPF64[$J_Xc_T + 8 >> 3] = $14 * $17;
 $18 = +HEAPF64[$z >> 3];
 HEAPF64[$J_Xc_T + 16 >> 3] = $17 * $18;
 $19 = +HEAPF64[$arrayidx3 >> 3];
 HEAPF64[$J_Xc_T + 24 >> 3] = $8 * $19;
 HEAPF64[$J_Xc_T + 32 >> 3] = $14 * $19;
 HEAPF64[$J_Xc_T + 40 >> 3] = $18 * $19;
 $20 = +HEAPF64[$arrayidx6 >> 3];
 HEAPF64[$J_Xc_T + 48 >> 3] = $8 * $20;
 HEAPF64[$J_Xc_T + 56 >> 3] = $14 * $20;
 HEAPF64[$J_Xc_T + 64 >> 3] = $18 * $20;
 HEAPF64[$J_Xc_T + 72 >> 3] = $17;
 HEAPF64[$J_Xc_T + 80 >> 3] = $19;
 HEAPF64[$J_Xc_T + 88 >> 3] = $20;
 $21 = +HEAPF64[$arrayidx14 >> 3];
 HEAPF64[$J_Xc_T + 96 >> 3] = $21 * $8;
 HEAPF64[$J_Xc_T + 104 >> 3] = $21 * $14;
 HEAPF64[$J_Xc_T + 112 >> 3] = $21 * $18;
 $22 = +HEAPF64[$arrayidx18 >> 3];
 HEAPF64[$J_Xc_T + 120 >> 3] = $22 * $8;
 HEAPF64[$J_Xc_T + 128 >> 3] = $22 * $14;
 HEAPF64[$J_Xc_T + 136 >> 3] = $22 * $18;
 $23 = +HEAPF64[$arrayidx23 >> 3];
 HEAPF64[$J_Xc_T + 144 >> 3] = $23 * $8;
 HEAPF64[$J_Xc_T + 152 >> 3] = $23 * $14;
 HEAPF64[$J_Xc_T + 160 >> 3] = $23 * $18;
 HEAPF64[$J_Xc_T + 168 >> 3] = $21;
 HEAPF64[$J_Xc_T + 176 >> 3] = $22;
 HEAPF64[$J_Xc_T + 184 >> 3] = $23;
 $24 = +HEAPF64[$arrayidx32 >> 3];
 $25 = +HEAPF64[$worldCoord >> 3];
 HEAPF64[$J_Xc_T + 192 >> 3] = $24 * $25;
 HEAPF64[$J_Xc_T + 200 >> 3] = $24 * $14;
 HEAPF64[$J_Xc_T + 208 >> 3] = $24 * $18;
 $26 = +HEAPF64[$arrayidx36 >> 3];
 HEAPF64[$J_Xc_T + 216 >> 3] = $26 * $25;
 $27 = +HEAPF64[$y >> 3];
 HEAPF64[$J_Xc_T + 224 >> 3] = $26 * $27;
 HEAPF64[$J_Xc_T + 232 >> 3] = $26 * $18;
 $28 = +HEAPF64[$arrayidx41 >> 3];
 HEAPF64[$J_Xc_T + 240 >> 3] = $28 * $25;
 HEAPF64[$J_Xc_T + 248 >> 3] = $28 * $27;
 HEAPF64[$J_Xc_T + 256 >> 3] = $28 * $18;
 HEAPF64[$J_Xc_T + 264 >> 3] = $24;
 HEAPF64[$J_Xc_T + 272 >> 3] = $26;
 HEAPF64[$J_Xc_T + 280 >> 3] = $28;
 _icpGetJ_T_S($J_T_S);
 $j$0 = 0;
 while (1) {
  if (($j$0 | 0) == 3) break; else $i$0 = 0;
  while (1) {
   if (($i$0 | 0) == 6) break;
   $arrayidx252 = $J_Xc_S + ($j$0 * 48 | 0) + ($i$0 << 3) | 0;
   HEAPF64[$arrayidx252 >> 3] = 0.0;
   $31 = 0.0;
   $k$0 = 0;
   while (1) {
    if (($k$0 | 0) == 12) break;
    $add263 = $31 + +HEAPF64[$J_Xc_T + ($j$0 * 96 | 0) + ($k$0 << 3) >> 3] * +HEAPF64[$J_T_S + ($k$0 * 48 | 0) + ($i$0 << 3) >> 3];
    HEAPF64[$arrayidx252 >> 3] = $add263;
    $31 = $add263;
    $k$0 = $k$0 + 1 | 0;
   }
   $i$0 = $i$0 + 1 | 0;
  }
  $j$0 = $j$0 + 1 | 0;
 }
 STACKTOP = sp;
 return;
}

function ___stpncpy($d, $s, $n) {
 $d = $d | 0;
 $s = $s | 0;
 $n = $n | 0;
 var $0 = 0, $4 = 0, $7 = 0, $8 = 0, $d$addr$0$lcssa = 0, $d$addr$0$lcssa63 = 0, $d$addr$051 = 0, $d$addr$1$ph = 0, $d$addr$131 = 0, $d$addr$2 = 0, $dec = 0, $incdec$ptr = 0, $incdec$ptr20 = 0, $incdec$ptr21 = 0, $incdec$ptr34 = 0, $incdec$ptr5 = 0, $n$addr$0$lcssa = 0, $n$addr$0$lcssa65 = 0, $n$addr$053 = 0, $n$addr$1$lcssa = 0, $n$addr$138 = 0, $n$addr$2$ph = 0, $n$addr$233 = 0, $n$addr$3 = 0, $s$addr$0$lcssa = 0, $s$addr$0$lcssa64 = 0, $s$addr$052 = 0, $s$addr$1$ph = 0, $s$addr$132 = 0, $sub19 = 0, $tobool3 = 0, $tobool3$lcssa = 0, $tobool349 = 0, $wd$0$lcssa = 0, $wd$039 = 0, $ws$0$lcssa = 0, $ws$040 = 0, label = 0;
 $0 = $s;
 do if (!(($0 ^ $d) & 3)) {
  $tobool349 = ($n | 0) != 0;
  L3 : do if ($tobool349 & ($0 & 3 | 0) != 0) {
   $d$addr$051 = $d;
   $n$addr$053 = $n;
   $s$addr$052 = $s;
   while (1) {
    $4 = HEAP8[$s$addr$052 >> 0] | 0;
    HEAP8[$d$addr$051 >> 0] = $4;
    if (!($4 << 24 >> 24)) {
     $d$addr$0$lcssa63 = $d$addr$051;
     $n$addr$0$lcssa65 = $n$addr$053;
     $s$addr$0$lcssa64 = $s$addr$052;
     break L3;
    }
    $dec = $n$addr$053 + -1 | 0;
    $incdec$ptr = $s$addr$052 + 1 | 0;
    $incdec$ptr5 = $d$addr$051 + 1 | 0;
    $tobool3 = ($dec | 0) != 0;
    if ($tobool3 & ($incdec$ptr & 3 | 0) != 0) {
     $d$addr$051 = $incdec$ptr5;
     $n$addr$053 = $dec;
     $s$addr$052 = $incdec$ptr;
    } else {
     $d$addr$0$lcssa = $incdec$ptr5;
     $n$addr$0$lcssa = $dec;
     $s$addr$0$lcssa = $incdec$ptr;
     $tobool3$lcssa = $tobool3;
     label = 5;
     break;
    }
   }
  } else {
   $d$addr$0$lcssa = $d;
   $n$addr$0$lcssa = $n;
   $s$addr$0$lcssa = $s;
   $tobool3$lcssa = $tobool349;
   label = 5;
  } while (0);
  if ((label | 0) == 5) if ($tobool3$lcssa) {
   $d$addr$0$lcssa63 = $d$addr$0$lcssa;
   $n$addr$0$lcssa65 = $n$addr$0$lcssa;
   $s$addr$0$lcssa64 = $s$addr$0$lcssa;
  } else {
   $d$addr$2 = $d$addr$0$lcssa;
   $n$addr$3 = 0;
   break;
  }
  if (!(HEAP8[$s$addr$0$lcssa64 >> 0] | 0)) {
   $d$addr$2 = $d$addr$0$lcssa63;
   $n$addr$3 = $n$addr$0$lcssa65;
  } else {
   L11 : do if ($n$addr$0$lcssa65 >>> 0 > 3) {
    $n$addr$138 = $n$addr$0$lcssa65;
    $wd$039 = $d$addr$0$lcssa63;
    $ws$040 = $s$addr$0$lcssa64;
    while (1) {
     $7 = HEAP32[$ws$040 >> 2] | 0;
     if (($7 & -2139062144 ^ -2139062144) & $7 + -16843009 | 0) {
      $n$addr$1$lcssa = $n$addr$138;
      $wd$0$lcssa = $wd$039;
      $ws$0$lcssa = $ws$040;
      break L11;
     }
     HEAP32[$wd$039 >> 2] = $7;
     $sub19 = $n$addr$138 + -4 | 0;
     $incdec$ptr20 = $ws$040 + 4 | 0;
     $incdec$ptr21 = $wd$039 + 4 | 0;
     if ($sub19 >>> 0 > 3) {
      $n$addr$138 = $sub19;
      $wd$039 = $incdec$ptr21;
      $ws$040 = $incdec$ptr20;
     } else {
      $n$addr$1$lcssa = $sub19;
      $wd$0$lcssa = $incdec$ptr21;
      $ws$0$lcssa = $incdec$ptr20;
      break;
     }
    }
   } else {
    $n$addr$1$lcssa = $n$addr$0$lcssa65;
    $wd$0$lcssa = $d$addr$0$lcssa63;
    $ws$0$lcssa = $s$addr$0$lcssa64;
   } while (0);
   $d$addr$1$ph = $wd$0$lcssa;
   $n$addr$2$ph = $n$addr$1$lcssa;
   $s$addr$1$ph = $ws$0$lcssa;
   label = 11;
  }
 } else {
  $d$addr$1$ph = $d;
  $n$addr$2$ph = $n;
  $s$addr$1$ph = $s;
  label = 11;
 } while (0);
 L16 : do if ((label | 0) == 11) if (!$n$addr$2$ph) {
  $d$addr$2 = $d$addr$1$ph;
  $n$addr$3 = 0;
 } else {
  $d$addr$131 = $d$addr$1$ph;
  $n$addr$233 = $n$addr$2$ph;
  $s$addr$132 = $s$addr$1$ph;
  while (1) {
   $8 = HEAP8[$s$addr$132 >> 0] | 0;
   HEAP8[$d$addr$131 >> 0] = $8;
   if (!($8 << 24 >> 24)) {
    $d$addr$2 = $d$addr$131;
    $n$addr$3 = $n$addr$233;
    break L16;
   }
   $n$addr$233 = $n$addr$233 + -1 | 0;
   $incdec$ptr34 = $d$addr$131 + 1 | 0;
   if (!$n$addr$233) {
    $d$addr$2 = $incdec$ptr34;
    $n$addr$3 = 0;
    break;
   } else {
    $d$addr$131 = $incdec$ptr34;
    $s$addr$132 = $s$addr$132 + 1 | 0;
   }
  }
 } while (0);
 _memset($d$addr$2 | 0, 0, $n$addr$3 | 0) | 0;
 return $d$addr$2 | 0;
}

function __ZN10__cxxabiv112_GLOBAL__N_121parse_floating_numberIeNS0_2DbEEEPKcS4_S4_RT0_($first, $last, $db) {
 $first = $first | 0;
 $last = $last | 0;
 $db = $db | 0;
 var $0 = 0, $1 = 0, $3 = 0, $6 = 0, $__end_$i = 0, $__first$addr$0$i$i = 0, $__last$addr$0$i$i = 0, $__p$0$i$i = 0, $agg$tmp = 0, $and$i$i$i$i = 0, $call$i$i$i = 0, $call31 = 0, $conv = 0, $conv9 = 0, $e$0 = 0, $first$addr$2$ph = 0, $incdec$ptr$i$i = 0, $incdec$ptr$ptr = 0, $num = 0, $ref$tmp = 0, $retval$3 = 0, $t$0$idx = 0, $vararg_buffer = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(96);
 $vararg_buffer = sp + 8 | 0;
 $0 = sp;
 $num = sp + 56 | 0;
 $ref$tmp = sp + 16 | 0;
 $agg$tmp = sp + 40 | 0;
 L1 : do if (($last - $first | 0) >>> 0 > 20) {
  $e$0 = $0;
  $t$0$idx = 0;
  while (1) {
   $1 = HEAP8[$first + $t$0$idx >> 0] | 0;
   $conv = $1 << 24 >> 24;
   $incdec$ptr$ptr = $first + ($t$0$idx | 1) | 0;
   if (($t$0$idx | 0) == 20) {
    label = 6;
    break;
   }
   if (!(_isxdigit($conv) | 0)) break;
   $conv9 = HEAP8[$incdec$ptr$ptr >> 0] | 0;
   HEAP8[$e$0 >> 0] = $conv9 + ((($conv + -48 | 0) >>> 0 < 10 ? 0 : 9) + $conv << 4) + (($conv9 + -48 | 0) >>> 0 < 10 ? 208 : 169);
   $e$0 = $e$0 + 1 | 0;
   $t$0$idx = $t$0$idx + 2 | 0;
  }
  do if ((label | 0) == 6) {
   if ($1 << 24 >> 24 == 69) {
    L11 : do if (($0 | 0) != ($e$0 | 0)) {
     $__first$addr$0$i$i = $0;
     $__last$addr$0$i$i = $e$0;
     while (1) {
      $incdec$ptr$i$i = $__last$addr$0$i$i + -1 | 0;
      if ($__first$addr$0$i$i >>> 0 >= $incdec$ptr$i$i >>> 0) break L11;
      $3 = HEAP8[$__first$addr$0$i$i >> 0] | 0;
      HEAP8[$__first$addr$0$i$i >> 0] = HEAP8[$incdec$ptr$i$i >> 0] | 0;
      HEAP8[$incdec$ptr$i$i >> 0] = $3;
      $__first$addr$0$i$i = $__first$addr$0$i$i + 1 | 0;
      $__last$addr$0$i$i = $incdec$ptr$i$i;
     }
    } while (0);
    dest = $num;
    stop = dest + 40 | 0;
    do {
     HEAP8[dest >> 0] = 0;
     dest = dest + 1 | 0;
    } while ((dest | 0) < (stop | 0));
    HEAPF64[$vararg_buffer >> 3] = +HEAPF64[$0 >> 3];
    $call31 = _snprintf($num, 40, 16191, $vararg_buffer) | 0;
    if ($call31 >>> 0 > 39) break;
    HEAP32[$agg$tmp >> 2] = 0;
    HEAP32[$agg$tmp + 4 >> 2] = 0;
    HEAP32[$agg$tmp + 8 >> 2] = 0;
    if ($call31 >>> 0 < 11) {
     HEAP8[$agg$tmp + 11 >> 0] = $call31;
     $__p$0$i$i = $agg$tmp;
    } else {
     $and$i$i$i$i = $call31 + 16 & -16;
     $call$i$i$i = __ZN10__cxxabiv112_GLOBAL__N_112malloc_allocIcE8allocateEj($and$i$i$i$i) | 0;
     HEAP32[$agg$tmp >> 2] = $call$i$i$i;
     HEAP32[$agg$tmp + 8 >> 2] = $and$i$i$i$i | -2147483648;
     HEAP32[$agg$tmp + 4 >> 2] = $call31;
     $__p$0$i$i = $call$i$i$i;
    }
    __ZNSt3__211char_traitsIcE4copyEPcPKcj($__p$0$i$i, $num, $call31) | 0;
    HEAP8[$vararg_buffer >> 0] = 0;
    __ZNSt3__211char_traitsIcE6assignERcRKc($__p$0$i$i + $call31 | 0, $vararg_buffer);
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ENSt3__212basic_stringIcNS2_11char_traitsIcEENS0_12malloc_allocIcEEEE($ref$tmp, $agg$tmp);
    $__end_$i = $db + 4 | 0;
    $6 = HEAP32[$__end_$i >> 2] | 0;
    if ($6 >>> 0 < (HEAP32[$db + 8 >> 2] | 0) >>> 0) {
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($6, $ref$tmp);
     HEAP32[$__end_$i >> 2] = (HEAP32[$__end_$i >> 2] | 0) + 24;
    } else __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIS3_EEvOT_($db, $ref$tmp);
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($ref$tmp);
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($agg$tmp);
    $first$addr$2$ph = $incdec$ptr$ptr;
   } else $first$addr$2$ph = $first;
   $retval$3 = $first$addr$2$ph;
   break L1;
  } while (0);
  $retval$3 = $first;
 } else $retval$3 = $first; while (0);
 STACKTOP = sp;
 return $retval$3 | 0;
}

function __ZN10__cxxabiv112_GLOBAL__N_121parse_floating_numberIdNS0_2DbEEEPKcS4_S4_RT0_($first, $last, $db) {
 $first = $first | 0;
 $last = $last | 0;
 $db = $db | 0;
 var $0 = 0, $1 = 0, $3 = 0, $6 = 0, $__end_$i = 0, $__first$addr$0$i$i = 0, $__last$addr$0$i$i = 0, $__p$0$i$i = 0, $agg$tmp = 0, $and$i$i$i$i = 0, $call$i$i$i = 0, $call31 = 0, $conv = 0, $conv9 = 0, $e$0 = 0, $first$addr$2$ph = 0, $incdec$ptr$i$i = 0, $incdec$ptr$ptr = 0, $num = 0, $ref$tmp = 0, $retval$3 = 0, $t$0$idx = 0, $vararg_buffer = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(96);
 $vararg_buffer = sp + 8 | 0;
 $0 = sp;
 $num = sp + 56 | 0;
 $ref$tmp = sp + 16 | 0;
 $agg$tmp = sp + 40 | 0;
 L1 : do if (($last - $first | 0) >>> 0 > 16) {
  $e$0 = $0;
  $t$0$idx = 0;
  while (1) {
   $1 = HEAP8[$first + $t$0$idx >> 0] | 0;
   $conv = $1 << 24 >> 24;
   $incdec$ptr$ptr = $first + ($t$0$idx | 1) | 0;
   if (($t$0$idx | 0) == 16) {
    label = 6;
    break;
   }
   if (!(_isxdigit($conv) | 0)) break;
   $conv9 = HEAP8[$incdec$ptr$ptr >> 0] | 0;
   HEAP8[$e$0 >> 0] = $conv9 + ((($conv + -48 | 0) >>> 0 < 10 ? 0 : 9) + $conv << 4) + (($conv9 + -48 | 0) >>> 0 < 10 ? 208 : 169);
   $e$0 = $e$0 + 1 | 0;
   $t$0$idx = $t$0$idx + 2 | 0;
  }
  do if ((label | 0) == 6) {
   if ($1 << 24 >> 24 == 69) {
    L11 : do if (($0 | 0) != ($e$0 | 0)) {
     $__first$addr$0$i$i = $0;
     $__last$addr$0$i$i = $e$0;
     while (1) {
      $incdec$ptr$i$i = $__last$addr$0$i$i + -1 | 0;
      if ($__first$addr$0$i$i >>> 0 >= $incdec$ptr$i$i >>> 0) break L11;
      $3 = HEAP8[$__first$addr$0$i$i >> 0] | 0;
      HEAP8[$__first$addr$0$i$i >> 0] = HEAP8[$incdec$ptr$i$i >> 0] | 0;
      HEAP8[$incdec$ptr$i$i >> 0] = $3;
      $__first$addr$0$i$i = $__first$addr$0$i$i + 1 | 0;
      $__last$addr$0$i$i = $incdec$ptr$i$i;
     }
    } while (0);
    dest = $num;
    stop = dest + 32 | 0;
    do {
     HEAP8[dest >> 0] = 0;
     dest = dest + 1 | 0;
    } while ((dest | 0) < (stop | 0));
    HEAPF64[$vararg_buffer >> 3] = +HEAPF64[$0 >> 3];
    $call31 = _snprintf($num, 32, 16196, $vararg_buffer) | 0;
    if ($call31 >>> 0 > 31) break;
    HEAP32[$agg$tmp >> 2] = 0;
    HEAP32[$agg$tmp + 4 >> 2] = 0;
    HEAP32[$agg$tmp + 8 >> 2] = 0;
    if ($call31 >>> 0 < 11) {
     HEAP8[$agg$tmp + 11 >> 0] = $call31;
     $__p$0$i$i = $agg$tmp;
    } else {
     $and$i$i$i$i = $call31 + 16 & -16;
     $call$i$i$i = __ZN10__cxxabiv112_GLOBAL__N_112malloc_allocIcE8allocateEj($and$i$i$i$i) | 0;
     HEAP32[$agg$tmp >> 2] = $call$i$i$i;
     HEAP32[$agg$tmp + 8 >> 2] = $and$i$i$i$i | -2147483648;
     HEAP32[$agg$tmp + 4 >> 2] = $call31;
     $__p$0$i$i = $call$i$i$i;
    }
    __ZNSt3__211char_traitsIcE4copyEPcPKcj($__p$0$i$i, $num, $call31) | 0;
    HEAP8[$vararg_buffer >> 0] = 0;
    __ZNSt3__211char_traitsIcE6assignERcRKc($__p$0$i$i + $call31 | 0, $vararg_buffer);
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ENSt3__212basic_stringIcNS2_11char_traitsIcEENS0_12malloc_allocIcEEEE($ref$tmp, $agg$tmp);
    $__end_$i = $db + 4 | 0;
    $6 = HEAP32[$__end_$i >> 2] | 0;
    if ($6 >>> 0 < (HEAP32[$db + 8 >> 2] | 0) >>> 0) {
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($6, $ref$tmp);
     HEAP32[$__end_$i >> 2] = (HEAP32[$__end_$i >> 2] | 0) + 24;
    } else __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIS3_EEvOT_($db, $ref$tmp);
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($ref$tmp);
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($agg$tmp);
    $first$addr$2$ph = $incdec$ptr$ptr;
   } else $first$addr$2$ph = $first;
   $retval$3 = $first$addr$2$ph;
   break L1;
  } while (0);
  $retval$3 = $first;
 } else $retval$3 = $first; while (0);
 STACKTOP = sp;
 return $retval$3 | 0;
}

function __ZN10__cxxabiv112_GLOBAL__N_123parse_prefix_expressionINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($first, $last, $op, $db) {
 $first = $first | 0;
 $last = $last | 0;
 $op = $op | 0;
 $db = $db | 0;
 var $3 = 0, $6 = 0, $8 = 0, $__end_$i = 0, $__i$0$i$i$i = 0, $__i$0$i$i$i$i = 0, $__i$0$i$i$i13 = 0, $__size_$i1$i$i$i$i = 0, $call = 0, $first17 = 0, $ref$tmp = 0, $ref$tmp$i$i$i$i = 0, $ref$tmp3 = 0, $ref$tmp4 = 0, $ref$tmp5 = 0, $retval$0 = 0, $tobool$i$i$i$i$i = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(64);
 $ref$tmp$i$i$i$i = sp + 48 | 0;
 $ref$tmp = sp + 36 | 0;
 $ref$tmp3 = sp + 24 | 0;
 $ref$tmp4 = sp + 12 | 0;
 $ref$tmp5 = sp;
 $call = __ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($first, $last, $db) | 0;
 if (($call | 0) == ($first | 0)) $retval$0 = $first; else {
  $__end_$i = $db + 4 | 0;
  if ((HEAP32[$db >> 2] | 0) == (HEAP32[$__end_$i >> 2] | 0)) $retval$0 = $first; else {
   __ZNSt3__2plIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEENS_12basic_stringIT_T0_T1_EERKSB_PKS8_($ref$tmp4, $op, 14887);
   __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($ref$tmp5, (HEAP32[$__end_$i >> 2] | 0) + -24 | 0);
   $3 = HEAP8[$ref$tmp5 + 11 >> 0] | 0;
   $tobool$i$i$i$i$i = $3 << 24 >> 24 < 0;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($ref$tmp4, $tobool$i$i$i$i$i ? HEAP32[$ref$tmp5 >> 2] | 0 : $ref$tmp5, $tobool$i$i$i$i$i ? HEAP32[$ref$tmp5 + 4 >> 2] | 0 : $3 & 255) | 0;
   HEAP32[$ref$tmp3 >> 2] = HEAP32[$ref$tmp4 >> 2];
   HEAP32[$ref$tmp3 + 4 >> 2] = HEAP32[$ref$tmp4 + 4 >> 2];
   HEAP32[$ref$tmp3 + 8 >> 2] = HEAP32[$ref$tmp4 + 8 >> 2];
   $__i$0$i$i$i = 0;
   while (1) {
    if (($__i$0$i$i$i | 0) == 3) break;
    HEAP32[$ref$tmp4 + ($__i$0$i$i$i << 2) >> 2] = 0;
    $__i$0$i$i$i = $__i$0$i$i$i + 1 | 0;
   }
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($ref$tmp3, 14885) | 0;
   HEAP32[$ref$tmp >> 2] = HEAP32[$ref$tmp3 >> 2];
   HEAP32[$ref$tmp + 4 >> 2] = HEAP32[$ref$tmp3 + 4 >> 2];
   HEAP32[$ref$tmp + 8 >> 2] = HEAP32[$ref$tmp3 + 8 >> 2];
   $__i$0$i$i$i13 = 0;
   while (1) {
    if (($__i$0$i$i$i13 | 0) == 3) break;
    HEAP32[$ref$tmp3 + ($__i$0$i$i$i13 << 2) >> 2] = 0;
    $__i$0$i$i$i13 = $__i$0$i$i$i13 + 1 | 0;
   }
   $6 = HEAP32[$__end_$i >> 2] | 0;
   $first17 = $6 + -24 | 0;
   $__size_$i1$i$i$i$i = $first17 + 11 | 0;
   if ((HEAP8[$__size_$i1$i$i$i$i >> 0] | 0) < 0) {
    $8 = HEAP32[$first17 >> 2] | 0;
    HEAP8[$ref$tmp$i$i$i$i >> 0] = 0;
    __ZNSt3__211char_traitsIcE6assignERcRKc($8, $ref$tmp$i$i$i$i);
    HEAP32[$6 + -20 >> 2] = 0;
   } else {
    HEAP8[$ref$tmp$i$i$i$i >> 0] = 0;
    __ZNSt3__211char_traitsIcE6assignERcRKc($first17, $ref$tmp$i$i$i$i);
    HEAP8[$__size_$i1$i$i$i$i >> 0] = 0;
   }
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE7reserveEj($first17);
   HEAP32[$first17 >> 2] = HEAP32[$ref$tmp >> 2];
   HEAP32[$first17 + 4 >> 2] = HEAP32[$ref$tmp + 4 >> 2];
   HEAP32[$first17 + 8 >> 2] = HEAP32[$ref$tmp + 8 >> 2];
   $__i$0$i$i$i$i = 0;
   while (1) {
    if (($__i$0$i$i$i$i | 0) == 3) break;
    HEAP32[$ref$tmp + ($__i$0$i$i$i$i << 2) >> 2] = 0;
    $__i$0$i$i$i$i = $__i$0$i$i$i$i + 1 | 0;
   }
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($ref$tmp);
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($ref$tmp3);
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($ref$tmp5);
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($ref$tmp4);
   $retval$0 = $call;
  }
 }
 STACKTOP = sp;
 return $retval$0 | 0;
}

function __ZN10__cxxabiv112_GLOBAL__N_121parse_floating_numberIfNS0_2DbEEEPKcS4_S4_RT0_($first, $last, $db) {
 $first = $first | 0;
 $last = $last | 0;
 $db = $db | 0;
 var $0 = 0, $1 = 0, $3 = 0, $6 = 0, $__end_$i = 0, $__first$addr$0$i$i = 0, $__last$addr$0$i$i = 0, $__p$0$i$i = 0, $agg$tmp = 0, $and$i$i$i$i = 0, $call$i$i$i = 0, $call32 = 0, $conv = 0, $conv9 = 0, $e$0 = 0, $first$addr$2$ph = 0, $incdec$ptr$i$i = 0, $incdec$ptr$ptr = 0, $num = 0, $ref$tmp = 0, $retval$3 = 0, $t$0$idx = 0, $vararg_buffer = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(80);
 $vararg_buffer = sp;
 $0 = sp + 44 | 0;
 $num = sp + 48 | 0;
 $ref$tmp = sp + 8 | 0;
 $agg$tmp = sp + 32 | 0;
 L1 : do if (($last - $first | 0) >>> 0 > 8) {
  $e$0 = $0;
  $t$0$idx = 0;
  while (1) {
   $1 = HEAP8[$first + $t$0$idx >> 0] | 0;
   $conv = $1 << 24 >> 24;
   $incdec$ptr$ptr = $first + ($t$0$idx | 1) | 0;
   if (($t$0$idx | 0) == 8) {
    label = 6;
    break;
   }
   if (!(_isxdigit($conv) | 0)) break;
   $conv9 = HEAP8[$incdec$ptr$ptr >> 0] | 0;
   HEAP8[$e$0 >> 0] = $conv9 + ((($conv + -48 | 0) >>> 0 < 10 ? 0 : 9) + $conv << 4) + (($conv9 + -48 | 0) >>> 0 < 10 ? 208 : 169);
   $e$0 = $e$0 + 1 | 0;
   $t$0$idx = $t$0$idx + 2 | 0;
  }
  do if ((label | 0) == 6) {
   if ($1 << 24 >> 24 == 69) {
    L11 : do if (($0 | 0) != ($e$0 | 0)) {
     $__first$addr$0$i$i = $0;
     $__last$addr$0$i$i = $e$0;
     while (1) {
      $incdec$ptr$i$i = $__last$addr$0$i$i + -1 | 0;
      if ($__first$addr$0$i$i >>> 0 >= $incdec$ptr$i$i >>> 0) break L11;
      $3 = HEAP8[$__first$addr$0$i$i >> 0] | 0;
      HEAP8[$__first$addr$0$i$i >> 0] = HEAP8[$incdec$ptr$i$i >> 0] | 0;
      HEAP8[$incdec$ptr$i$i >> 0] = $3;
      $__first$addr$0$i$i = $__first$addr$0$i$i + 1 | 0;
      $__last$addr$0$i$i = $incdec$ptr$i$i;
     }
    } while (0);
    dest = $num;
    stop = dest + 24 | 0;
    do {
     HEAP8[dest >> 0] = 0;
     dest = dest + 1 | 0;
    } while ((dest | 0) < (stop | 0));
    HEAPF64[$vararg_buffer >> 3] = +HEAPF32[$0 >> 2];
    $call32 = _snprintf($num, 24, 16199, $vararg_buffer) | 0;
    if ($call32 >>> 0 > 23) break;
    HEAP32[$agg$tmp >> 2] = 0;
    HEAP32[$agg$tmp + 4 >> 2] = 0;
    HEAP32[$agg$tmp + 8 >> 2] = 0;
    if ($call32 >>> 0 < 11) {
     HEAP8[$agg$tmp + 11 >> 0] = $call32;
     $__p$0$i$i = $agg$tmp;
    } else {
     $and$i$i$i$i = $call32 + 16 & -16;
     $call$i$i$i = __ZN10__cxxabiv112_GLOBAL__N_112malloc_allocIcE8allocateEj($and$i$i$i$i) | 0;
     HEAP32[$agg$tmp >> 2] = $call$i$i$i;
     HEAP32[$agg$tmp + 8 >> 2] = $and$i$i$i$i | -2147483648;
     HEAP32[$agg$tmp + 4 >> 2] = $call32;
     $__p$0$i$i = $call$i$i$i;
    }
    __ZNSt3__211char_traitsIcE4copyEPcPKcj($__p$0$i$i, $num, $call32) | 0;
    HEAP8[$vararg_buffer >> 0] = 0;
    __ZNSt3__211char_traitsIcE6assignERcRKc($__p$0$i$i + $call32 | 0, $vararg_buffer);
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ENSt3__212basic_stringIcNS2_11char_traitsIcEENS0_12malloc_allocIcEEEE($ref$tmp, $agg$tmp);
    $__end_$i = $db + 4 | 0;
    $6 = HEAP32[$__end_$i >> 2] | 0;
    if ($6 >>> 0 < (HEAP32[$db + 8 >> 2] | 0) >>> 0) {
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($6, $ref$tmp);
     HEAP32[$__end_$i >> 2] = (HEAP32[$__end_$i >> 2] | 0) + 24;
    } else __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIS3_EEvOT_($db, $ref$tmp);
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($ref$tmp);
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($agg$tmp);
    $first$addr$2$ph = $incdec$ptr$ptr;
   } else $first$addr$2$ph = $first;
   $retval$3 = $first$addr$2$ph;
   break L1;
  } while (0);
  $retval$3 = $first;
 } else $retval$3 = $first; while (0);
 STACKTOP = sp;
 return $retval$3 | 0;
}

function __ZN10__cxxabiv112_GLOBAL__N_120parse_ctor_dtor_nameINS0_2DbEEEPKcS4_S4_RT_($first, $last, $db) {
 $first = $first | 0;
 $last = $last | 0;
 $db = $db | 0;
 var $1 = 0, $4 = 0, $8 = 0, $__end_$i = 0, $__i$0$i$i$i = 0, $add$ptr = 0, $agg$tmp = 0, $agg$tmp24 = 0, $arrayidx1 = 0, $parsed_ctor_dtor_cv = 0, $ref$tmp = 0, $ref$tmp25 = 0, $retval$0 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(64);
 $ref$tmp = sp + 40 | 0;
 $agg$tmp = sp + 24 | 0;
 $agg$tmp24 = sp;
 $ref$tmp25 = sp + 12 | 0;
 L1 : do if (($last - $first | 0) > 1) {
  $__end_$i = $db + 4 | 0;
  $1 = HEAP32[$__end_$i >> 2] | 0;
  if ((HEAP32[$db >> 2] | 0) == ($1 | 0)) $retval$0 = $first; else {
   $add$ptr = $first + 2 | 0;
   $parsed_ctor_dtor_cv = $db + 60 | 0;
   $arrayidx1 = $first + 1 | 0;
   switch (HEAP8[$first >> 0] | 0) {
   case 67:
    {
     switch (HEAP8[$arrayidx1 >> 0] | 0) {
     case 53:
     case 51:
     case 50:
     case 49:
      break;
     default:
      {
       $retval$0 = $first;
       break L1;
      }
     }
     __ZN10__cxxabiv112_GLOBAL__N_19base_nameINSt3__212basic_stringIcNS2_11char_traitsIcEENS0_12malloc_allocIcEEEEEET_RS9_($agg$tmp, $1 + -24 | 0);
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ENSt3__212basic_stringIcNS2_11char_traitsIcEENS0_12malloc_allocIcEEEE($ref$tmp, $agg$tmp);
     $4 = HEAP32[$__end_$i >> 2] | 0;
     if ($4 >>> 0 < (HEAP32[$db + 8 >> 2] | 0) >>> 0) {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($4, $ref$tmp);
      HEAP32[$__end_$i >> 2] = (HEAP32[$__end_$i >> 2] | 0) + 24;
     } else __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIS3_EEvOT_($db, $ref$tmp);
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($ref$tmp);
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($agg$tmp);
     HEAP8[$parsed_ctor_dtor_cv >> 0] = 1;
     $retval$0 = $add$ptr;
     break L1;
     break;
    }
   case 68:
    break;
   default:
    {
     $retval$0 = $first;
     break L1;
    }
   }
   switch (HEAP8[$arrayidx1 >> 0] | 0) {
   case 53:
   case 50:
   case 49:
   case 48:
    break;
   default:
    {
     $retval$0 = $first;
     break L1;
    }
   }
   __ZN10__cxxabiv112_GLOBAL__N_19base_nameINSt3__212basic_stringIcNS2_11char_traitsIcEENS0_12malloc_allocIcEEEEEET_RS9_($ref$tmp25, $1 + -24 | 0);
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKc($ref$tmp25, 0, 14957) | 0;
   HEAP32[$agg$tmp24 >> 2] = HEAP32[$ref$tmp25 >> 2];
   HEAP32[$agg$tmp24 + 4 >> 2] = HEAP32[$ref$tmp25 + 4 >> 2];
   HEAP32[$agg$tmp24 + 8 >> 2] = HEAP32[$ref$tmp25 + 8 >> 2];
   $__i$0$i$i$i = 0;
   while (1) {
    if (($__i$0$i$i$i | 0) == 3) break;
    HEAP32[$ref$tmp25 + ($__i$0$i$i$i << 2) >> 2] = 0;
    $__i$0$i$i$i = $__i$0$i$i$i + 1 | 0;
   }
   __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ENSt3__212basic_stringIcNS2_11char_traitsIcEENS0_12malloc_allocIcEEEE($ref$tmp, $agg$tmp24);
   $8 = HEAP32[$__end_$i >> 2] | 0;
   if ($8 >>> 0 < (HEAP32[$db + 8 >> 2] | 0) >>> 0) {
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($8, $ref$tmp);
    HEAP32[$__end_$i >> 2] = (HEAP32[$__end_$i >> 2] | 0) + 24;
   } else __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIS3_EEvOT_($db, $ref$tmp);
   __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($ref$tmp);
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($agg$tmp24);
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($ref$tmp25);
   HEAP8[$parsed_ctor_dtor_cv >> 0] = 1;
   $retval$0 = $add$ptr;
  }
 } else $retval$0 = $first; while (0);
 STACKTOP = sp;
 return $retval$0 | 0;
}

function _icpPoint($handle, $data, $initMatXw2Xc, $matXw2Xc, $err) {
 $handle = $handle | 0;
 $data = $data | 0;
 $initMatXw2Xc = $initMatXw2Xc | 0;
 $matXw2Xc = $matXw2Xc | 0;
 $err = $err | 0;
 var $0 = 0, $13 = 0, $2 = 0, $4 = 0, $U = 0, $breakLoopErrorRatioThresh = 0, $breakLoopErrorThresh = 0, $breakLoopErrorThresh2 = 0, $call = 0, $call7 = 0, $dS = 0, $div = 0.0, $err0$0 = 0.0, $err1$0 = 0.0, $i$0 = 0, $i$1 = 0, $j$0 = 0, $j$1 = 0, $j$2 = 0, $matXw2U = 0, $maxLoop = 0, $mul43 = 0, $num = 0, $retval$0 = 0, $sub = 0.0, $sub39 = 0.0, $vararg_buffer = 0, $vararg_buffer1 = 0, $worldCoord = 0, $y38 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(176);
 $vararg_buffer1 = sp + 168 | 0;
 $vararg_buffer = sp + 160 | 0;
 $U = sp + 144 | 0;
 $matXw2U = sp + 48 | 0;
 $dS = sp;
 $num = $data + 8 | 0;
 $0 = HEAP32[$num >> 2] | 0;
 do if (($0 | 0) < 3) $retval$0 = -1; else {
  $call = _malloc($0 * 96 | 0) | 0;
  if (!$call) {
   _arLog(3, 4461, $vararg_buffer);
   $retval$0 = -1;
   break;
  }
  $call7 = _malloc($0 << 4) | 0;
  if (!$call7) {
   _arLog(3, 4461, $vararg_buffer1);
   _free($call);
   $retval$0 = -1;
   break;
  } else $j$0 = 0;
  while (1) {
   if (($j$0 | 0) == 3) break; else $i$0 = 0;
   while (1) {
    if (($i$0 | 0) == 4) break;
    HEAPF64[$matXw2Xc + ($j$0 << 5) + ($i$0 << 3) >> 3] = +HEAPF64[$initMatXw2Xc + ($j$0 << 5) + ($i$0 << 3) >> 3];
    $i$0 = $i$0 + 1 | 0;
   }
   $j$0 = $j$0 + 1 | 0;
  }
  $worldCoord = $data + 4 | 0;
  $y38 = $U + 8 | 0;
  $breakLoopErrorThresh = $handle + 104 | 0;
  $breakLoopErrorThresh2 = $handle + 120 | 0;
  $breakLoopErrorRatioThresh = $handle + 112 | 0;
  $maxLoop = $handle + 96 | 0;
  $err0$0 = 0.0;
  $i$1 = 0;
  L15 : while (1) {
   _arUtilMatMul($handle, $matXw2Xc, $matXw2U) | 0;
   $err1$0 = 0.0;
   $j$1 = 0;
   while (1) {
    $2 = HEAP32[$num >> 2] | 0;
    if (($j$1 | 0) >= ($2 | 0)) break;
    if ((_icpGetU_from_X_by_MatX2U($U, $matXw2U, (HEAP32[$worldCoord >> 2] | 0) + ($j$1 * 24 | 0) | 0) | 0) < 0) {
     label = 14;
     break L15;
    }
    $4 = HEAP32[$data >> 2] | 0;
    $sub = +HEAPF64[$4 + ($j$1 << 4) >> 3] - +HEAPF64[$U >> 3];
    $sub39 = +HEAPF64[$4 + ($j$1 << 4) + 8 >> 3] - +HEAPF64[$y38 >> 3];
    $mul43 = $j$1 << 1;
    HEAPF64[$call7 + ($mul43 << 3) >> 3] = $sub;
    HEAPF64[$call7 + (($mul43 | 1) << 3) >> 3] = $sub39;
    $err1$0 = $err1$0 + ($sub * $sub + $sub39 * $sub39);
    $j$1 = $j$1 + 1 | 0;
   }
   $div = $err1$0 / +($2 | 0);
   if ($div < +HEAPF64[$breakLoopErrorThresh >> 3]) {
    label = 28;
    break;
   }
   if (($i$1 | 0) > 0) if ($div < +HEAPF64[$breakLoopErrorThresh2 >> 3]) if ($div / $err0$0 > +HEAPF64[$breakLoopErrorRatioThresh >> 3]) {
    label = 28;
    break;
   }
   if (($i$1 | 0) == (HEAP32[$maxLoop >> 2] | 0)) {
    label = 28;
    break;
   } else {
    $13 = $2;
    $j$2 = 0;
   }
   while (1) {
    if (($j$2 | 0) >= ($13 | 0)) break;
    if ((_icpGetJ_U_S($call + ($j$2 * 12 << 3) | 0, $handle, $matXw2Xc, (HEAP32[$worldCoord >> 2] | 0) + ($j$2 * 24 | 0) | 0) | 0) < 0) {
     label = 24;
     break L15;
    }
    $13 = HEAP32[$num >> 2] | 0;
    $j$2 = $j$2 + 1 | 0;
   }
   if ((_icpGetDeltaS($dS, $call7, $call, $13 << 1) | 0) < 0) {
    label = 26;
    break;
   }
   _icpUpdateMat($matXw2Xc, $dS) | 0;
   $err0$0 = $div;
   $i$1 = $i$1 + 1 | 0;
  }
  if ((label | 0) == 14) {
   _icpGetXw2XcCleanup($call, $call7);
   $retval$0 = -1;
   break;
  } else if ((label | 0) == 24) {
   _icpGetXw2XcCleanup($call, $call7);
   $retval$0 = -1;
   break;
  } else if ((label | 0) == 26) {
   _icpGetXw2XcCleanup($call, $call7);
   $retval$0 = -1;
   break;
  } else if ((label | 0) == 28) {
   HEAPF64[$err >> 3] = $div;
   _free($call);
   _free($call7);
   $retval$0 = 0;
   break;
  }
 } while (0);
 STACKTOP = sp;
 return $retval$0 | 0;
}

function _arParamIdeal2Observ($dist_factor, $ix, $iy, $ox, $oy, $dist_function_version) {
 $dist_factor = $dist_factor | 0;
 $ix = +$ix;
 $iy = +$iy;
 $ox = $ox | 0;
 $oy = $oy | 0;
 $dist_function_version = $dist_function_version | 0;
 var $10 = 0.0, $17 = 0.0, $18 = 0.0, $2 = 0.0, $24 = 0.0, $25 = 0.0, $3 = 0.0, $4 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0, $add = 0.0, $add112 = 0.0, $add18 = 0.0, $add70 = 0.0, $arrayidx1 = 0, $arrayidx2 = 0, $arrayidx3 = 0, $arrayidx4 = 0, $arrayidx5 = 0, $div = 0.0, $div11 = 0.0, $mul102 = 0.0, $mul139 = 0.0, $mul143 = 0.0, $mul57 = 0.0, $mul61 = 0.0, $mul98 = 0.0, $retval$0 = 0, $storemerge$sink = 0.0, $sub122 = 0.0, $sub157 = 0.0, $sub80 = 0.0, label = 0;
 $arrayidx5 = $dist_factor + 40 | 0;
 $arrayidx1 = $dist_factor + 8 | 0;
 $arrayidx3 = $dist_factor + 24 | 0;
 $arrayidx2 = $dist_factor + 16 | 0;
 $arrayidx4 = $dist_factor + 32 | 0;
 L1 : do switch ($dist_function_version | 0) {
 case 4:
  {
   $2 = +HEAPF64[$arrayidx2 >> 3];
   $3 = +HEAPF64[$arrayidx3 >> 3];
   $4 = +HEAPF64[$arrayidx4 >> 3];
   $5 = +HEAPF64[$arrayidx5 >> 3];
   $6 = +HEAPF64[$dist_factor + 48 >> 3];
   $7 = +HEAPF64[$dist_factor + 56 >> 3];
   $8 = +HEAPF64[$dist_factor + 64 >> 3];
   $div = ($ix - $6) * $8 / $4;
   $div11 = ($iy - $7) * $8 / $5;
   $add = $div * $div + $div11 * $div11;
   $add18 = +HEAPF64[$dist_factor >> 3] * $add + 1.0 + $add * (+HEAPF64[$arrayidx1 >> 3] * $add);
   HEAPF64[$ox >> 3] = $6 + $4 * ($3 * ($add + $div * ($div * 2.0)) + ($div11 * ($2 * 2.0 * $div) + $div * $add18));
   $storemerge$sink = $7 + $5 * ($div11 * ($3 * 2.0 * $div) + ($2 * ($add + $div11 * ($div11 * 2.0)) + $div11 * $add18));
   label = 12;
   break;
  }
 case 3:
  {
   $9 = +HEAPF64[$dist_factor >> 3];
   $10 = +HEAPF64[$arrayidx2 >> 3];
   $mul57 = ($ix - $9) * $10;
   $mul61 = $10 * ($iy - +HEAPF64[$arrayidx1 >> 3]);
   if ($mul57 == 0.0 & $mul61 == 0.0) {
    HEAPF64[$ox >> 3] = $9;
    $storemerge$sink = +HEAPF64[$arrayidx1 >> 3];
    label = 12;
    break L1;
   } else {
    $add70 = $mul57 * $mul57 + $mul61 * $mul61;
    $sub80 = 1.0 - $add70 * (+HEAPF64[$arrayidx4 >> 3] / 1.0e8) - $add70 * ($add70 * (+HEAPF64[$arrayidx5 >> 3] / 1.0e8 / 1.0e5));
    HEAPF64[$ox >> 3] = $9 + +HEAPF64[$arrayidx3 >> 3] * ($mul57 * $sub80);
    $storemerge$sink = +HEAPF64[$arrayidx1 >> 3] + $mul61 * $sub80;
    label = 12;
    break L1;
   }
   break;
  }
 case 2:
  {
   $17 = +HEAPF64[$dist_factor >> 3];
   $18 = +HEAPF64[$arrayidx2 >> 3];
   $mul98 = ($ix - $17) * $18;
   $mul102 = $18 * ($iy - +HEAPF64[$arrayidx1 >> 3]);
   if ($mul98 == 0.0 & $mul102 == 0.0) {
    HEAPF64[$ox >> 3] = $17;
    $storemerge$sink = +HEAPF64[$arrayidx1 >> 3];
    label = 12;
    break L1;
   } else {
    $add112 = $mul98 * $mul98 + $mul102 * $mul102;
    $sub122 = 1.0 - $add112 * (+HEAPF64[$arrayidx3 >> 3] / 1.0e8) - $add112 * ($add112 * (+HEAPF64[$arrayidx4 >> 3] / 1.0e8 / 1.0e5));
    HEAPF64[$ox >> 3] = $17 + $mul98 * $sub122;
    $storemerge$sink = +HEAPF64[$arrayidx1 >> 3] + $mul102 * $sub122;
    label = 12;
    break L1;
   }
   break;
  }
 case 1:
  {
   $24 = +HEAPF64[$dist_factor >> 3];
   $25 = +HEAPF64[$arrayidx2 >> 3];
   $mul139 = ($ix - $24) * $25;
   $mul143 = $25 * ($iy - +HEAPF64[$arrayidx1 >> 3]);
   if ($mul139 == 0.0 & $mul143 == 0.0) {
    HEAPF64[$ox >> 3] = $24;
    $storemerge$sink = +HEAPF64[$arrayidx1 >> 3];
    label = 12;
    break L1;
   } else {
    $sub157 = 1.0 - ($mul139 * $mul139 + $mul143 * $mul143) * (+HEAPF64[$arrayidx3 >> 3] / 1.0e8);
    HEAPF64[$ox >> 3] = $24 + $mul139 * $sub157;
    $storemerge$sink = +HEAPF64[$arrayidx1 >> 3] + $mul143 * $sub157;
    label = 12;
    break L1;
   }
   break;
  }
 default:
  $retval$0 = -1;
 } while (0);
 if ((label | 0) == 12) {
  HEAPF64[$oy >> 3] = $storemerge$sink;
  $retval$0 = 0;
 }
 return $retval$0 | 0;
}

function __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE7replaceEjjPKcj($this, $__n2) {
 $this = $this | 0;
 $__n2 = $__n2 | 0;
 var $$sroa$speculated30 = 0, $0 = 0, $1 = 0, $__n1$addr$0 = 0, $__n1$addr$2 = 0, $__n1$addr$3 = 0, $__n2$addr$0 = 0, $__n2$addr$3 = 0, $__n2$addr$4 = 0, $__pos$addr$0 = 0, $__pos$addr$3 = 0, $__s$addr$0 = 0, $__s$addr$3 = 0, $__size_$i$i = 0, $add$ptr42 = 0, $add52 = 0, $cond$i15 = 0, $cond$i28 = 0, $cond$i5 = 0, $conv$i$i = 0, $ref$tmp53 = 0, $sub12 = 0, $tobool$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $ref$tmp53 = sp;
 $__size_$i$i = $this + 11 | 0;
 $0 = HEAP8[$__size_$i$i >> 0] | 0;
 $tobool$i$i = $0 << 24 >> 24 < 0;
 if ($tobool$i$i) {
  $1 = HEAP32[$this + 4 >> 2] | 0;
  $$sroa$speculated30 = $1 >>> 0 < 11 ? $1 : 11;
  $cond$i28 = $1;
  $cond$i5 = (HEAP32[$this + 8 >> 2] & 2147483647) + -1 | 0;
 } else {
  $conv$i$i = $0 & 255;
  $$sroa$speculated30 = $conv$i$i >>> 0 < 11 ? $conv$i$i : 11;
  $cond$i28 = $conv$i$i;
  $cond$i5 = 10;
 }
 if (($$sroa$speculated30 - $cond$i28 + $cond$i5 | 0) >>> 0 < $__n2 >>> 0) __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE21__grow_by_and_replaceEjjjjjjPKc($this, $cond$i5, $cond$i28 + $__n2 - $$sroa$speculated30 - $cond$i5 | 0, $cond$i28, 0, $$sroa$speculated30, $__n2, 16306); else {
  if ($tobool$i$i) $cond$i15 = HEAP32[$this >> 2] | 0; else $cond$i15 = $this;
  do if (($$sroa$speculated30 | 0) == ($__n2 | 0)) {
   $__n1$addr$2 = $__n2;
   $__n2$addr$3 = $__n2;
   $__pos$addr$3 = 0;
   $__s$addr$3 = 16306;
   label = 17;
  } else {
   $sub12 = $cond$i28 - $$sroa$speculated30 | 0;
   if (!$sub12) {
    $__n1$addr$2 = $$sroa$speculated30;
    $__n2$addr$3 = $__n2;
    $__pos$addr$3 = 0;
    $__s$addr$3 = 16306;
    label = 17;
   } else {
    if ($$sroa$speculated30 >>> 0 > $__n2 >>> 0) {
     __ZNSt3__211char_traitsIcE4moveEPcPKcj($cond$i15, 16306, $__n2) | 0;
     __ZNSt3__211char_traitsIcE4moveEPcPKcj($cond$i15 + $__n2 | 0, $cond$i15 + $$sroa$speculated30 | 0, $sub12) | 0;
     $__n1$addr$3 = $$sroa$speculated30;
     $__n2$addr$4 = $__n2;
     break;
    }
    do if ($cond$i15 >>> 0 < 16306 >>> 0 & ($cond$i15 + $cond$i28 | 0) >>> 0 > 16306 >>> 0) if (($cond$i15 + $$sroa$speculated30 | 0) >>> 0 > 16306 >>> 0) {
     __ZNSt3__211char_traitsIcE4moveEPcPKcj($cond$i15, 16306, $$sroa$speculated30) | 0;
     $__n1$addr$0 = 0;
     $__n2$addr$0 = $__n2 - $$sroa$speculated30 | 0;
     $__pos$addr$0 = $$sroa$speculated30;
     $__s$addr$0 = 16306 + $__n2 | 0;
     break;
    } else {
     $__n1$addr$0 = $$sroa$speculated30;
     $__n2$addr$0 = $__n2;
     $__pos$addr$0 = 0;
     $__s$addr$0 = 16306 + ($__n2 - $$sroa$speculated30) | 0;
     break;
    } else {
     $__n1$addr$0 = $$sroa$speculated30;
     $__n2$addr$0 = $__n2;
     $__pos$addr$0 = 0;
     $__s$addr$0 = 16306;
    } while (0);
    $add$ptr42 = $cond$i15 + $__pos$addr$0 | 0;
    __ZNSt3__211char_traitsIcE4moveEPcPKcj($add$ptr42 + $__n2$addr$0 | 0, $add$ptr42 + $__n1$addr$0 | 0, $sub12) | 0;
    $__n1$addr$2 = $__n1$addr$0;
    $__n2$addr$3 = $__n2$addr$0;
    $__pos$addr$3 = $__pos$addr$0;
    $__s$addr$3 = $__s$addr$0;
    label = 17;
   }
  } while (0);
  if ((label | 0) == 17) {
   __ZNSt3__211char_traitsIcE4moveEPcPKcj($cond$i15 + $__pos$addr$3 | 0, $__s$addr$3, $__n2$addr$3) | 0;
   $__n1$addr$3 = $__n1$addr$2;
   $__n2$addr$4 = $__n2$addr$3;
  }
  $add52 = $__n2$addr$4 - $__n1$addr$3 + $cond$i28 | 0;
  if ((HEAP8[$__size_$i$i >> 0] | 0) < 0) HEAP32[$this + 4 >> 2] = $add52; else HEAP8[$__size_$i$i >> 0] = $add52;
  HEAP8[$ref$tmp53 >> 0] = 0;
  __ZNSt3__211char_traitsIcE6assignERcRKc($cond$i15 + $add52 | 0, $ref$tmp53);
 }
 STACKTOP = sp;
 return;
}

function __ZN10__cxxabiv112_GLOBAL__N_116parse_dot_suffixINS0_2DbEEEPKcS4_S4_RT_($first, $last, $db) {
 $first = $first | 0;
 $last = $last | 0;
 $db = $db | 0;
 var $4 = 0, $__end_$i = 0, $__first$addr$0$i$i = 0, $__i$0$i$i$i = 0, $__i$0$i$i$i10 = 0, $__p$0$i$i = 0, $__p$0$ph$i$i = 0, $and$i$i$i$i = 0, $call$i$i$i = 0, $ref$tmp = 0, $ref$tmp$i$i = 0, $ref$tmp3 = 0, $ref$tmp4 = 0, $retval$0 = 0, $sub$ptr$sub$i$i$i$i = 0, $tobool$i$i$i$i$i = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48);
 $ref$tmp$i$i = sp + 36 | 0;
 $ref$tmp = sp + 24 | 0;
 $ref$tmp3 = sp + 12 | 0;
 $ref$tmp4 = sp;
 if (($first | 0) == ($last | 0)) $retval$0 = $first; else if ((HEAP8[$first >> 0] | 0) == 46) {
  $__end_$i = $db + 4 | 0;
  if ((HEAP32[$db >> 2] | 0) == (HEAP32[$__end_$i >> 2] | 0)) $retval$0 = $first; else {
   HEAP32[$ref$tmp4 >> 2] = 0;
   HEAP32[$ref$tmp4 + 4 >> 2] = 0;
   HEAP32[$ref$tmp4 + 8 >> 2] = 0;
   $sub$ptr$sub$i$i$i$i = $last - $first | 0;
   if ($sub$ptr$sub$i$i$i$i >>> 0 > 4294967279) __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($ref$tmp4);
   if ($sub$ptr$sub$i$i$i$i >>> 0 < 11) {
    HEAP8[$ref$tmp4 + 11 >> 0] = $sub$ptr$sub$i$i$i$i;
    $__p$0$ph$i$i = $ref$tmp4;
   } else {
    $and$i$i$i$i = $sub$ptr$sub$i$i$i$i + 16 & -16;
    $call$i$i$i = __ZN10__cxxabiv112_GLOBAL__N_112malloc_allocIcE8allocateEj($and$i$i$i$i) | 0;
    HEAP32[$ref$tmp4 >> 2] = $call$i$i$i;
    HEAP32[$ref$tmp4 + 8 >> 2] = $and$i$i$i$i | -2147483648;
    HEAP32[$ref$tmp4 + 4 >> 2] = $sub$ptr$sub$i$i$i$i;
    $__p$0$ph$i$i = $call$i$i$i;
   }
   $__first$addr$0$i$i = $first;
   $__p$0$i$i = $__p$0$ph$i$i;
   while (1) {
    if (($__first$addr$0$i$i | 0) == ($last | 0)) break;
    __ZNSt3__211char_traitsIcE6assignERcRKc($__p$0$i$i, $__first$addr$0$i$i);
    $__first$addr$0$i$i = $__first$addr$0$i$i + 1 | 0;
    $__p$0$i$i = $__p$0$i$i + 1 | 0;
   }
   HEAP8[$ref$tmp$i$i >> 0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($__p$0$ph$i$i + $sub$ptr$sub$i$i$i$i | 0, $ref$tmp$i$i);
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKc($ref$tmp4, 0, 14882) | 0;
   HEAP32[$ref$tmp3 >> 2] = HEAP32[$ref$tmp4 >> 2];
   HEAP32[$ref$tmp3 + 4 >> 2] = HEAP32[$ref$tmp4 + 4 >> 2];
   HEAP32[$ref$tmp3 + 8 >> 2] = HEAP32[$ref$tmp4 + 8 >> 2];
   $__i$0$i$i$i = 0;
   while (1) {
    if (($__i$0$i$i$i | 0) == 3) break;
    HEAP32[$ref$tmp4 + ($__i$0$i$i$i << 2) >> 2] = 0;
    $__i$0$i$i$i = $__i$0$i$i$i + 1 | 0;
   }
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($ref$tmp3, 14885) | 0;
   HEAP32[$ref$tmp >> 2] = HEAP32[$ref$tmp3 >> 2];
   HEAP32[$ref$tmp + 4 >> 2] = HEAP32[$ref$tmp3 + 4 >> 2];
   HEAP32[$ref$tmp + 8 >> 2] = HEAP32[$ref$tmp3 + 8 >> 2];
   $__i$0$i$i$i10 = 0;
   while (1) {
    if (($__i$0$i$i$i10 | 0) == 3) break;
    HEAP32[$ref$tmp3 + ($__i$0$i$i$i10 << 2) >> 2] = 0;
    $__i$0$i$i$i10 = $__i$0$i$i$i10 + 1 | 0;
   }
   $4 = HEAP8[$ref$tmp + 11 >> 0] | 0;
   $tobool$i$i$i$i$i = $4 << 24 >> 24 < 0;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj((HEAP32[$__end_$i >> 2] | 0) + -24 | 0, $tobool$i$i$i$i$i ? HEAP32[$ref$tmp >> 2] | 0 : $ref$tmp, $tobool$i$i$i$i$i ? HEAP32[$ref$tmp + 4 >> 2] | 0 : $4 & 255) | 0;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($ref$tmp);
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($ref$tmp3);
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($ref$tmp4);
   $retval$0 = $last;
  }
 } else $retval$0 = $first;
 STACKTOP = sp;
 return $retval$0 | 0;
}

function _check_square($area, $marker_info2, $factor) {
 $area = $area | 0;
 $marker_info2 = $marker_info2 | 0;
 $factor = +$factor;
 var $$sink = 0, $0 = 0, $1 = 0, $6 = 0, $7 = 0, $add = 0, $arrayidx = 0, $arrayidx1 = 0, $cmp15 = 0, $coord_num = 0, $div55 = 0, $div99 = 0, $dmax$0 = 0, $i$0 = 0, $i$0$v1$0 = 0, $mul = 0, $mul17 = 0.0, $retval$0 = 0, $sub = 0, $sub10 = 0, $sub4 = 0, $v1$0 = 0, $vertex$sroa$4$0 = 0, $vertex$sroa$8$0 = 0, $wv1 = 0, $wv2 = 0, $wvnum1 = 0, $wvnum2 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(96);
 $wv1 = sp + 56 | 0;
 $wvnum1 = sp + 48 | 0;
 $wv2 = sp + 8 | 0;
 $wvnum2 = sp;
 $arrayidx = $marker_info2 + 28 | 0;
 $0 = HEAP32[$arrayidx >> 2] | 0;
 $arrayidx1 = $marker_info2 + 40028 | 0;
 $1 = HEAP32[$arrayidx1 >> 2] | 0;
 $coord_num = $marker_info2 + 24 | 0;
 $sub = (HEAP32[$coord_num >> 2] | 0) + -1 | 0;
 $dmax$0 = 0;
 $i$0 = 1;
 $v1$0 = 0;
 while (1) {
  if (($i$0 | 0) >= ($sub | 0)) break;
  $sub4 = (HEAP32[$marker_info2 + 28 + ($i$0 << 2) >> 2] | 0) - $0 | 0;
  $mul = Math_imul($sub4, $sub4) | 0;
  $sub10 = (HEAP32[$marker_info2 + 40028 + ($i$0 << 2) >> 2] | 0) - $1 | 0;
  $add = (Math_imul($sub10, $sub10) | 0) + $mul | 0;
  $cmp15 = ($add | 0) > ($dmax$0 | 0);
  $i$0$v1$0 = $cmp15 ? $i$0 : $v1$0;
  $dmax$0 = $cmp15 ? $add : $dmax$0;
  $i$0 = $i$0 + 1 | 0;
  $v1$0 = $i$0$v1$0;
 }
 $mul17 = +($area | 0) / .75 * .01 * $factor;
 HEAP32[$wvnum1 >> 2] = 0;
 HEAP32[$wvnum2 >> 2] = 0;
 L5 : do if ((_get_vertex($arrayidx, $arrayidx1, 0, $v1$0, $mul17, $wv1, $wvnum1) | 0) < 0) $retval$0 = -1; else if ((_get_vertex($arrayidx, $arrayidx1, $v1$0, (HEAP32[$coord_num >> 2] | 0) + -1 | 0, $mul17, $wv2, $wvnum2) | 0) < 0) $retval$0 = -1; else {
  $6 = HEAP32[$wvnum1 >> 2] | 0;
  $7 = HEAP32[$wvnum2 >> 2] | 0;
  do if (($6 | 0) == 1 & ($7 | 0) == 1) {
   $$sink = HEAP32[$wv2 >> 2] | 0;
   $vertex$sroa$4$0 = HEAP32[$wv1 >> 2] | 0;
   $vertex$sroa$8$0 = $v1$0;
  } else {
   if (($6 | 0) > 1 & ($7 | 0) == 0) {
    $div55 = ($v1$0 | 0) / 2 | 0;
    HEAP32[$wvnum2 >> 2] = 0;
    HEAP32[$wvnum1 >> 2] = 0;
    if ((_get_vertex($arrayidx, $arrayidx1, 0, $div55, $mul17, $wv1, $wvnum1) | 0) < 0) {
     $retval$0 = -1;
     break L5;
    }
    if ((_get_vertex($arrayidx, $arrayidx1, $div55, $v1$0, $mul17, $wv2, $wvnum2) | 0) < 0) {
     $retval$0 = -1;
     break L5;
    }
    if (!((HEAP32[$wvnum1 >> 2] | 0) == 1 & (HEAP32[$wvnum2 >> 2] | 0) == 1)) {
     $retval$0 = -1;
     break L5;
    }
    $$sink = $v1$0;
    $vertex$sroa$4$0 = HEAP32[$wv1 >> 2] | 0;
    $vertex$sroa$8$0 = HEAP32[$wv2 >> 2] | 0;
    break;
   }
   if (!(($6 | 0) == 0 & ($7 | 0) > 1)) {
    $retval$0 = -1;
    break L5;
   }
   $div99 = ($v1$0 + -1 + (HEAP32[$coord_num >> 2] | 0) | 0) / 2 | 0;
   HEAP32[$wvnum2 >> 2] = 0;
   HEAP32[$wvnum1 >> 2] = 0;
   if ((_get_vertex($arrayidx, $arrayidx1, $v1$0, $div99, $mul17, $wv1, $wvnum1) | 0) < 0) {
    $retval$0 = -1;
    break L5;
   }
   if ((_get_vertex($arrayidx, $arrayidx1, $div99, (HEAP32[$coord_num >> 2] | 0) + -1 | 0, $mul17, $wv2, $wvnum2) | 0) < 0) {
    $retval$0 = -1;
    break L5;
   }
   if (!((HEAP32[$wvnum1 >> 2] | 0) == 1 & (HEAP32[$wvnum2 >> 2] | 0) == 1)) {
    $retval$0 = -1;
    break L5;
   }
   $$sink = HEAP32[$wv2 >> 2] | 0;
   $vertex$sroa$4$0 = $v1$0;
   $vertex$sroa$8$0 = HEAP32[$wv1 >> 2] | 0;
  } while (0);
  HEAP32[$marker_info2 + 80028 >> 2] = 0;
  HEAP32[$marker_info2 + 80032 >> 2] = $vertex$sroa$4$0;
  HEAP32[$marker_info2 + 80036 >> 2] = $vertex$sroa$8$0;
  HEAP32[$marker_info2 + 80040 >> 2] = $$sink;
  HEAP32[$marker_info2 + 80044 >> 2] = (HEAP32[$coord_num >> 2] | 0) + -1;
  $retval$0 = 0;
 } while (0);
 STACKTOP = sp;
 return $retval$0 | 0;
}

function _arGetMarkerInfo($image, $xsize, $ysize, $pixelFormat, $markerInfo2, $marker2_num, $pattHandle, $imageProcMode, $pattDetectMode, $arParamLTf, $pattRatio, $markerInfo, $marker_num, $matrixCodeType) {
 $image = $image | 0;
 $xsize = $xsize | 0;
 $ysize = $ysize | 0;
 $pixelFormat = $pixelFormat | 0;
 $markerInfo2 = $markerInfo2 | 0;
 $marker2_num = $marker2_num | 0;
 $pattHandle = $pattHandle | 0;
 $imageProcMode = $imageProcMode | 0;
 $pattDetectMode = $pattDetectMode | 0;
 $arParamLTf = $arParamLTf | 0;
 $pattRatio = +$pattRatio;
 $markerInfo = $markerInfo | 0;
 $marker_num = $marker_num | 0;
 $matrixCodeType = $matrixCodeType | 0;
 var $$sink = 0, $1 = 0, $arraydecay29 = 0, $cfMatrix = 0, $cfPatt = 0, $dirMatrix = 0, $dirPatt = 0, $i$0 = 0, $idMatrix = 0, $idPatt = 0, $j$0 = 0, $j$1 = 0, $pos0 = 0, $pos1 = 0, $switch = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $pos0 = sp + 4 | 0;
 $pos1 = sp;
 $1 = ($pattDetectMode | 1 | 0) == 1;
 $switch = $pattDetectMode >>> 0 < 3;
 $i$0 = 0;
 $j$0 = 0;
 while (1) {
  if (($i$0 | 0) >= ($marker2_num | 0)) break;
  HEAP32[$markerInfo + ($j$0 << 8) >> 2] = HEAP32[$markerInfo2 + ($i$0 * 80048 | 0) >> 2];
  if ((_arParamObserv2IdealLTf($arParamLTf, +HEAPF64[$markerInfo2 + ($i$0 * 80048 | 0) + 8 >> 3], +HEAPF64[$markerInfo2 + ($i$0 * 80048 | 0) + 16 >> 3], $pos0, $pos1) | 0) < 0) $j$1 = $j$0; else {
   HEAPF64[$markerInfo + ($j$0 << 8) + 56 >> 3] = +HEAPF32[$pos0 >> 2];
   HEAPF64[$markerInfo + ($j$0 << 8) + 64 >> 3] = +HEAPF32[$pos1 >> 2];
   $arraydecay29 = $markerInfo + ($j$0 << 8) + 168 | 0;
   if ((_arGetLine($markerInfo2 + ($i$0 * 80048 | 0) + 28 | 0, $markerInfo2 + ($i$0 * 80048 | 0) + 40028 | 0, HEAP32[$markerInfo2 + ($i$0 * 80048 | 0) + 24 >> 2] | 0, $markerInfo2 + ($i$0 * 80048 | 0) + 80028 | 0, $arParamLTf, $markerInfo + ($j$0 << 8) + 72 | 0, $arraydecay29) | 0) < 0) $j$1 = $j$0; else {
    $idPatt = $markerInfo + ($j$0 << 8) + 8 | 0;
    $dirPatt = $markerInfo + ($j$0 << 8) + 20 | 0;
    $cfPatt = $markerInfo + ($j$0 << 8) + 40 | 0;
    $idMatrix = $markerInfo + ($j$0 << 8) + 12 | 0;
    $dirMatrix = $markerInfo + ($j$0 << 8) + 24 | 0;
    $cfMatrix = $markerInfo + ($j$0 << 8) + 48 | 0;
    switch (_arPattGetIDGlobal($pattHandle, $imageProcMode, $pattDetectMode, $image, $xsize, $ysize, $pixelFormat, $arParamLTf, $arraydecay29, $pattRatio, $idPatt, $dirPatt, $cfPatt, $idMatrix, $dirMatrix, $cfMatrix, $matrixCodeType, $markerInfo + ($j$0 << 8) + 240 | 0, $markerInfo + ($j$0 << 8) + 248 | 0) | 0) {
    case 0:
     {
      $$sink = 0;
      label = 12;
      break;
     }
    case -1:
     {
      $$sink = 2;
      label = 12;
      break;
     }
    case -2:
     {
      $$sink = 3;
      label = 12;
      break;
     }
    case -3:
     {
      $$sink = 4;
      label = 12;
      break;
     }
    case -4:
     {
      $$sink = 5;
      label = 12;
      break;
     }
    case -5:
     {
      $$sink = 9;
      label = 12;
      break;
     }
    case -6:
     {
      $$sink = 1;
      label = 12;
      break;
     }
    default:
     {}
    }
    if ((label | 0) == 12) {
     label = 0;
     HEAP32[$markerInfo + ($j$0 << 8) + 236 >> 2] = $$sink;
    }
    if ($switch) {
     HEAP32[$markerInfo + ($j$0 << 8) + 4 >> 2] = HEAP32[($1 ? $idPatt : $idMatrix) >> 2];
     HEAP32[$markerInfo + ($j$0 << 8) + 16 >> 2] = HEAP32[($1 ? $dirPatt : $dirMatrix) >> 2];
     HEAPF64[$markerInfo + ($j$0 << 8) + 32 >> 3] = +HEAPF64[($1 ? $cfPatt : $cfMatrix) >> 3];
    }
    $j$1 = $j$0 + 1 | 0;
   }
  }
  $i$0 = $i$0 + 1 | 0;
  $j$0 = $j$1;
 }
 HEAP32[$marker_num >> 2] = $j$0;
 STACKTOP = sp;
 return 0;
}

function __ZN10__cxxabiv112_GLOBAL__N_118parse_alignof_exprINS0_2DbEEEPKcS4_S4_RT_($first, $last, $db) {
 $first = $first | 0;
 $last = $last | 0;
 $db = $db | 0;
 var $3 = 0, $4 = 0, $6 = 0, $__end_$i = 0, $__i$0$i$i$i = 0, $__i$0$i$i$i$i = 0, $__i$0$i$i$i17 = 0, $__size_$i1$i$i$i$i = 0, $add$ptr = 0, $call = 0, $first21 = 0, $ref$tmp = 0, $ref$tmp$i$i$i$i = 0, $ref$tmp11 = 0, $ref$tmp12 = 0, $retval$1 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48);
 $ref$tmp$i$i$i$i = sp + 36 | 0;
 $ref$tmp = sp + 24 | 0;
 $ref$tmp11 = sp + 12 | 0;
 $ref$tmp12 = sp;
 if (($last - $first | 0) > 2) if ((HEAP8[$first >> 0] | 0) == 97) if ((HEAP8[$first + 1 >> 0] | 0) == 122) {
  $add$ptr = $first + 2 | 0;
  $call = __ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($add$ptr, $last, $db) | 0;
  if (($call | 0) == ($add$ptr | 0)) $retval$1 = $first; else {
   $__end_$i = $db + 4 | 0;
   $3 = HEAP32[$__end_$i >> 2] | 0;
   if ((HEAP32[$db >> 2] | 0) == ($3 | 0)) $retval$1 = $first; else {
    __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($ref$tmp12, $3 + -24 | 0);
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKc($ref$tmp12, 0, 16066) | 0;
    HEAP32[$ref$tmp11 >> 2] = HEAP32[$ref$tmp12 >> 2];
    HEAP32[$ref$tmp11 + 4 >> 2] = HEAP32[$ref$tmp12 + 4 >> 2];
    HEAP32[$ref$tmp11 + 8 >> 2] = HEAP32[$ref$tmp12 + 8 >> 2];
    $__i$0$i$i$i = 0;
    while (1) {
     if (($__i$0$i$i$i | 0) == 3) break;
     HEAP32[$ref$tmp12 + ($__i$0$i$i$i << 2) >> 2] = 0;
     $__i$0$i$i$i = $__i$0$i$i$i + 1 | 0;
    }
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($ref$tmp11, 14885) | 0;
    HEAP32[$ref$tmp >> 2] = HEAP32[$ref$tmp11 >> 2];
    HEAP32[$ref$tmp + 4 >> 2] = HEAP32[$ref$tmp11 + 4 >> 2];
    HEAP32[$ref$tmp + 8 >> 2] = HEAP32[$ref$tmp11 + 8 >> 2];
    $__i$0$i$i$i17 = 0;
    while (1) {
     if (($__i$0$i$i$i17 | 0) == 3) break;
     HEAP32[$ref$tmp11 + ($__i$0$i$i$i17 << 2) >> 2] = 0;
     $__i$0$i$i$i17 = $__i$0$i$i$i17 + 1 | 0;
    }
    $4 = HEAP32[$__end_$i >> 2] | 0;
    $first21 = $4 + -24 | 0;
    $__size_$i1$i$i$i$i = $first21 + 11 | 0;
    if ((HEAP8[$__size_$i1$i$i$i$i >> 0] | 0) < 0) {
     $6 = HEAP32[$first21 >> 2] | 0;
     HEAP8[$ref$tmp$i$i$i$i >> 0] = 0;
     __ZNSt3__211char_traitsIcE6assignERcRKc($6, $ref$tmp$i$i$i$i);
     HEAP32[$4 + -20 >> 2] = 0;
    } else {
     HEAP8[$ref$tmp$i$i$i$i >> 0] = 0;
     __ZNSt3__211char_traitsIcE6assignERcRKc($first21, $ref$tmp$i$i$i$i);
     HEAP8[$__size_$i1$i$i$i$i >> 0] = 0;
    }
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE7reserveEj($first21);
    HEAP32[$first21 >> 2] = HEAP32[$ref$tmp >> 2];
    HEAP32[$first21 + 4 >> 2] = HEAP32[$ref$tmp + 4 >> 2];
    HEAP32[$first21 + 8 >> 2] = HEAP32[$ref$tmp + 8 >> 2];
    $__i$0$i$i$i$i = 0;
    while (1) {
     if (($__i$0$i$i$i$i | 0) == 3) break;
     HEAP32[$ref$tmp + ($__i$0$i$i$i$i << 2) >> 2] = 0;
     $__i$0$i$i$i$i = $__i$0$i$i$i$i + 1 | 0;
    }
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($ref$tmp);
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($ref$tmp11);
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($ref$tmp12);
    $retval$1 = $call;
   }
  }
 } else $retval$1 = $first; else $retval$1 = $first; else $retval$1 = $first;
 STACKTOP = sp;
 return $retval$1 | 0;
}

function __ZN10__cxxabiv112_GLOBAL__N_118parse_alignof_typeINS0_2DbEEEPKcS4_S4_RT_($first, $last, $db) {
 $first = $first | 0;
 $last = $last | 0;
 $db = $db | 0;
 var $3 = 0, $4 = 0, $6 = 0, $__end_$i = 0, $__i$0$i$i$i = 0, $__i$0$i$i$i$i = 0, $__i$0$i$i$i17 = 0, $__size_$i1$i$i$i$i = 0, $add$ptr = 0, $call = 0, $first21 = 0, $ref$tmp = 0, $ref$tmp$i$i$i$i = 0, $ref$tmp11 = 0, $ref$tmp12 = 0, $retval$1 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48);
 $ref$tmp$i$i$i$i = sp + 36 | 0;
 $ref$tmp = sp + 24 | 0;
 $ref$tmp11 = sp + 12 | 0;
 $ref$tmp12 = sp;
 if (($last - $first | 0) > 2) if ((HEAP8[$first >> 0] | 0) == 97) if ((HEAP8[$first + 1 >> 0] | 0) == 116) {
  $add$ptr = $first + 2 | 0;
  $call = __ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($add$ptr, $last, $db) | 0;
  if (($call | 0) == ($add$ptr | 0)) $retval$1 = $first; else {
   $__end_$i = $db + 4 | 0;
   $3 = HEAP32[$__end_$i >> 2] | 0;
   if ((HEAP32[$db >> 2] | 0) == ($3 | 0)) $retval$1 = $first; else {
    __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($ref$tmp12, $3 + -24 | 0);
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKc($ref$tmp12, 0, 16066) | 0;
    HEAP32[$ref$tmp11 >> 2] = HEAP32[$ref$tmp12 >> 2];
    HEAP32[$ref$tmp11 + 4 >> 2] = HEAP32[$ref$tmp12 + 4 >> 2];
    HEAP32[$ref$tmp11 + 8 >> 2] = HEAP32[$ref$tmp12 + 8 >> 2];
    $__i$0$i$i$i = 0;
    while (1) {
     if (($__i$0$i$i$i | 0) == 3) break;
     HEAP32[$ref$tmp12 + ($__i$0$i$i$i << 2) >> 2] = 0;
     $__i$0$i$i$i = $__i$0$i$i$i + 1 | 0;
    }
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($ref$tmp11, 14885) | 0;
    HEAP32[$ref$tmp >> 2] = HEAP32[$ref$tmp11 >> 2];
    HEAP32[$ref$tmp + 4 >> 2] = HEAP32[$ref$tmp11 + 4 >> 2];
    HEAP32[$ref$tmp + 8 >> 2] = HEAP32[$ref$tmp11 + 8 >> 2];
    $__i$0$i$i$i17 = 0;
    while (1) {
     if (($__i$0$i$i$i17 | 0) == 3) break;
     HEAP32[$ref$tmp11 + ($__i$0$i$i$i17 << 2) >> 2] = 0;
     $__i$0$i$i$i17 = $__i$0$i$i$i17 + 1 | 0;
    }
    $4 = HEAP32[$__end_$i >> 2] | 0;
    $first21 = $4 + -24 | 0;
    $__size_$i1$i$i$i$i = $first21 + 11 | 0;
    if ((HEAP8[$__size_$i1$i$i$i$i >> 0] | 0) < 0) {
     $6 = HEAP32[$first21 >> 2] | 0;
     HEAP8[$ref$tmp$i$i$i$i >> 0] = 0;
     __ZNSt3__211char_traitsIcE6assignERcRKc($6, $ref$tmp$i$i$i$i);
     HEAP32[$4 + -20 >> 2] = 0;
    } else {
     HEAP8[$ref$tmp$i$i$i$i >> 0] = 0;
     __ZNSt3__211char_traitsIcE6assignERcRKc($first21, $ref$tmp$i$i$i$i);
     HEAP8[$__size_$i1$i$i$i$i >> 0] = 0;
    }
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE7reserveEj($first21);
    HEAP32[$first21 >> 2] = HEAP32[$ref$tmp >> 2];
    HEAP32[$first21 + 4 >> 2] = HEAP32[$ref$tmp + 4 >> 2];
    HEAP32[$first21 + 8 >> 2] = HEAP32[$ref$tmp + 8 >> 2];
    $__i$0$i$i$i$i = 0;
    while (1) {
     if (($__i$0$i$i$i$i | 0) == 3) break;
     HEAP32[$ref$tmp + ($__i$0$i$i$i$i << 2) >> 2] = 0;
     $__i$0$i$i$i$i = $__i$0$i$i$i$i + 1 | 0;
    }
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($ref$tmp);
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($ref$tmp11);
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($ref$tmp12);
    $retval$1 = $call;
   }
  }
 } else $retval$1 = $first; else $retval$1 = $first; else $retval$1 = $first;
 STACKTOP = sp;
 return $retval$1 | 0;
}

function _scanexp($f, $pok) {
 $f = $f | 0;
 $pok = $pok | 0;
 var $$lcssa = 0, $0 = 0, $10 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $23 = 0, $25 = 0, $26 = 0, $27 = 0, $3 = 0, $36 = 0, $37 = 0, $40 = 0, $41 = 0, $42 = 0, $46 = 0, $47 = 0, $48 = 0, $c$0 = 0, $c$1$be = 0, $c$147 = 0, $c$2$be = 0, $c$2$lcssa = 0, $c$241 = 0, $c$3$be = 0, $call104 = 0, $cond = 0, $cond19 = 0, $conv7 = 0, $neg$0 = 0, $rpos = 0, $shend = 0, $tobool115 = 0, $x$048 = 0;
 $rpos = $f + 4 | 0;
 $0 = HEAP32[$rpos >> 2] | 0;
 $shend = $f + 100 | 0;
 if ($0 >>> 0 < (HEAP32[$shend >> 2] | 0) >>> 0) {
  HEAP32[$rpos >> 2] = $0 + 1;
  $cond = HEAPU8[$0 >> 0] | 0;
 } else $cond = ___shgetc($f) | 0;
 switch ($cond | 0) {
 case 43:
 case 45:
  {
   $conv7 = ($cond | 0) == 45 & 1;
   $3 = HEAP32[$rpos >> 2] | 0;
   if ($3 >>> 0 < (HEAP32[$shend >> 2] | 0) >>> 0) {
    HEAP32[$rpos >> 2] = $3 + 1;
    $cond19 = HEAPU8[$3 >> 0] | 0;
   } else $cond19 = ___shgetc($f) | 0;
   if (($pok | 0) != 0 & ($cond19 + -48 | 0) >>> 0 > 9) if (!(HEAP32[$shend >> 2] | 0)) {
    $c$0 = $cond19;
    $neg$0 = $conv7;
   } else {
    HEAP32[$rpos >> 2] = (HEAP32[$rpos >> 2] | 0) + -1;
    $c$0 = $cond19;
    $neg$0 = $conv7;
   } else {
    $c$0 = $cond19;
    $neg$0 = $conv7;
   }
   break;
  }
 default:
  {
   $c$0 = $cond;
   $neg$0 = 0;
  }
 }
 if (($c$0 + -48 | 0) >>> 0 > 9) if (!(HEAP32[$shend >> 2] | 0)) {
  $46 = -2147483648;
  $47 = 0;
 } else {
  HEAP32[$rpos >> 2] = (HEAP32[$rpos >> 2] | 0) + -1;
  $46 = -2147483648;
  $47 = 0;
 } else {
  $c$147 = $c$0;
  $x$048 = 0;
  while (1) {
   $x$048 = $c$147 + -48 + ($x$048 * 10 | 0) | 0;
   $10 = HEAP32[$rpos >> 2] | 0;
   if ($10 >>> 0 < (HEAP32[$shend >> 2] | 0) >>> 0) {
    HEAP32[$rpos >> 2] = $10 + 1;
    $c$1$be = HEAPU8[$10 >> 0] | 0;
   } else $c$1$be = ___shgetc($f) | 0;
   if (!(($c$1$be + -48 | 0) >>> 0 < 10 & ($x$048 | 0) < 214748364)) break; else $c$147 = $c$1$be;
  }
  $15 = (($x$048 | 0) < 0) << 31 >> 31;
  if (($c$1$be + -48 | 0) >>> 0 < 10) {
   $17 = $x$048;
   $18 = $15;
   $c$241 = $c$1$be;
   while (1) {
    $19 = ___muldi3($17 | 0, $18 | 0, 10, 0) | 0;
    $20 = tempRet0;
    $23 = _i64Add($c$241 | 0, (($c$241 | 0) < 0) << 31 >> 31 | 0, -48, -1) | 0;
    $25 = _i64Add($23 | 0, tempRet0 | 0, $19 | 0, $20 | 0) | 0;
    $26 = tempRet0;
    $27 = HEAP32[$rpos >> 2] | 0;
    if ($27 >>> 0 < (HEAP32[$shend >> 2] | 0) >>> 0) {
     HEAP32[$rpos >> 2] = $27 + 1;
     $c$2$be = HEAPU8[$27 >> 0] | 0;
    } else $c$2$be = ___shgetc($f) | 0;
    if (($c$2$be + -48 | 0) >>> 0 < 10 & (($26 | 0) < 21474836 | ($26 | 0) == 21474836 & $25 >>> 0 < 2061584302)) {
     $17 = $25;
     $18 = $26;
     $c$241 = $c$2$be;
    } else {
     $40 = $25;
     $41 = $26;
     $c$2$lcssa = $c$2$be;
     break;
    }
   }
  } else {
   $40 = $x$048;
   $41 = $15;
   $c$2$lcssa = $c$1$be;
  }
  $16 = HEAP32[$shend >> 2] | 0;
  if (($c$2$lcssa + -48 | 0) >>> 0 < 10) {
   $37 = $16;
   while (1) {
    $36 = HEAP32[$rpos >> 2] | 0;
    if ($36 >>> 0 < $37 >>> 0) {
     HEAP32[$rpos >> 2] = $36 + 1;
     $48 = $37;
     $c$3$be = HEAPU8[$36 >> 0] | 0;
    } else {
     $call104 = ___shgetc($f) | 0;
     $48 = HEAP32[$shend >> 2] | 0;
     $c$3$be = $call104;
    }
    if (($c$3$be + -48 | 0) >>> 0 < 10) $37 = $48; else {
     $$lcssa = $48;
     break;
    }
   }
  } else $$lcssa = $16;
  if ($$lcssa | 0) HEAP32[$rpos >> 2] = (HEAP32[$rpos >> 2] | 0) + -1;
  $tobool115 = ($neg$0 | 0) != 0;
  $42 = _i64Subtract(0, 0, $40 | 0, $41 | 0) | 0;
  $46 = $tobool115 ? tempRet0 : $41;
  $47 = $tobool115 ? $42 : $40;
 }
 tempRet0 = $46;
 return $47 | 0;
}

function _arParamChangeSize($source, $xsize, $ysize, $newparam) {
 $source = $source | 0;
 $xsize = $xsize | 0;
 $ysize = $ysize | 0;
 $newparam = $newparam | 0;
 var $$sink = 0, $5 = 0, $arrayidx29 = 0, $arrayidx31 = 0, $arrayidx33 = 0, $arrayidx35 = 0, $arrayidx37 = 0, $arrayidx39 = 0, $arrayidx41 = 0, $arrayidx43 = 0, $arrayidx45 = 0, $arrayidx48 = 0, $arrayidx50 = 0, $div = 0.0, $div101$sink = 0.0, $div6 = 0.0, $i$0 = 0, $mul100 = 0.0, $mul92 = 0.0, $retval$0 = 0, label = 0;
 $div = +($xsize | 0) / +(HEAP32[$source >> 2] | 0);
 $div6 = +($ysize | 0) / +(HEAP32[$source + 4 >> 2] | 0);
 HEAP32[$newparam >> 2] = $xsize;
 HEAP32[$newparam + 4 >> 2] = $ysize;
 $i$0 = 0;
 while (1) {
  if (($i$0 | 0) == 4) break;
  HEAPF64[$newparam + 8 + ($i$0 << 3) >> 3] = $div * +HEAPF64[$source + 8 + ($i$0 << 3) >> 3];
  HEAPF64[$newparam + 40 + ($i$0 << 3) >> 3] = $div6 * +HEAPF64[$source + 40 + ($i$0 << 3) >> 3];
  HEAPF64[$newparam + 72 + ($i$0 << 3) >> 3] = +HEAPF64[$source + 72 + ($i$0 << 3) >> 3];
  $i$0 = $i$0 + 1 | 0;
 }
 $5 = HEAP32[$source + 176 >> 2] | 0;
 $arrayidx41 = $source + 128 | 0;
 $arrayidx48 = $newparam + 136 | 0;
 $arrayidx33 = $source + 112 | 0;
 $arrayidx35 = $newparam + 112 | 0;
 $arrayidx37 = $source + 120 | 0;
 $arrayidx43 = $newparam + 128 | 0;
 $arrayidx31 = $newparam + 104 | 0;
 $arrayidx50 = $source + 144 | 0;
 $arrayidx29 = $source + 104 | 0;
 $arrayidx45 = $source + 136 | 0;
 $arrayidx39 = $newparam + 120 | 0;
 L5 : do if (($5 | 0) == 4) {
  HEAPF64[$arrayidx31 >> 3] = +HEAPF64[$arrayidx29 >> 3];
  HEAPF64[$arrayidx35 >> 3] = +HEAPF64[$arrayidx33 >> 3];
  HEAPF64[$arrayidx39 >> 3] = +HEAPF64[$arrayidx37 >> 3];
  HEAPF64[$arrayidx43 >> 3] = +HEAPF64[$arrayidx41 >> 3];
  HEAPF64[$arrayidx48 >> 3] = $div * +HEAPF64[$arrayidx45 >> 3];
  HEAPF64[$newparam + 144 >> 3] = $div6 * +HEAPF64[$arrayidx50 >> 3];
  HEAPF64[$newparam + 152 >> 3] = $div * +HEAPF64[$source + 152 >> 3];
  HEAPF64[$newparam + 160 >> 3] = $div6 * +HEAPF64[$source + 160 >> 3];
  $$sink = 8;
  $div101$sink = +HEAPF64[$source + 168 >> 3];
  label = 10;
 } else {
  $mul100 = $div6 * ($div * $div * $div6);
  $mul92 = $div * $div6;
  switch ($5 | 0) {
  case 3:
   {
    HEAPF64[$arrayidx31 >> 3] = $div * +HEAPF64[$arrayidx29 >> 3];
    HEAPF64[$arrayidx35 >> 3] = $div6 * +HEAPF64[$arrayidx33 >> 3];
    HEAPF64[$arrayidx39 >> 3] = +HEAPF64[$arrayidx37 >> 3];
    HEAPF64[$arrayidx43 >> 3] = +HEAPF64[$arrayidx41 >> 3];
    HEAPF64[$arrayidx48 >> 3] = +HEAPF64[$arrayidx45 >> 3] / $mul92;
    $$sink = 5;
    $div101$sink = +HEAPF64[$arrayidx50 >> 3] / $mul100;
    label = 10;
    break L5;
    break;
   }
  case 2:
   {
    HEAPF64[$arrayidx31 >> 3] = $div * +HEAPF64[$arrayidx29 >> 3];
    HEAPF64[$arrayidx35 >> 3] = $div6 * +HEAPF64[$arrayidx33 >> 3];
    HEAPF64[$arrayidx39 >> 3] = +HEAPF64[$arrayidx37 >> 3];
    HEAPF64[$arrayidx43 >> 3] = +HEAPF64[$arrayidx41 >> 3] / $mul92;
    $$sink = 4;
    $div101$sink = +HEAPF64[$arrayidx45 >> 3] / $mul100;
    label = 10;
    break L5;
    break;
   }
  case 1:
   {
    HEAPF64[$arrayidx31 >> 3] = $div * +HEAPF64[$arrayidx29 >> 3];
    HEAPF64[$arrayidx35 >> 3] = $div6 * +HEAPF64[$arrayidx33 >> 3];
    HEAPF64[$arrayidx39 >> 3] = +HEAPF64[$arrayidx37 >> 3];
    $$sink = 3;
    $div101$sink = +HEAPF64[$arrayidx41 >> 3] / $mul92;
    label = 10;
    break L5;
    break;
   }
  default:
   {
    $retval$0 = -1;
    break L5;
   }
  }
 } while (0);
 if ((label | 0) == 10) {
  HEAPF64[$newparam + 104 + ($$sink << 3) >> 3] = $div101$sink;
  HEAP32[$newparam + 176 >> 2] = $5;
  $retval$0 = 0;
 }
 return $retval$0 | 0;
}

function _trinkle($head, $width, $cmp, $pp, $pshift, $trusty, $lp) {
 $head = $head | 0;
 $width = $width | 0;
 $cmp = $cmp | 0;
 $pp = $pp | 0;
 $pshift = $pshift | 0;
 $trusty = $trusty | 0;
 $lp = $lp | 0;
 var $0 = 0, $1 = 0, $4 = 0, $add = 0, $add$ptr = 0, $add$ptr15 = 0, $add$ptr65 = 0, $add$ptr72 = 0, $ar = 0, $arrayidx3 = 0, $call29 = 0, $head$addr$0$lcssa = 0, $head$addr$032 = 0, $head$addr$04368 = 0, $head$addr$04368$phi = 0, $i$0$lcssa = 0, $i$034 = 0, $i$04269 = 0, $idx$neg14 = 0, $inc = 0, $p = 0, $pshift$addr$0$lcssa = 0, $pshift$addr$036 = 0, $pshift$addr$04170 = 0, $trusty$addr$0$lcssa = 0, $trusty$addr$04071 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(240);
 $p = sp + 232 | 0;
 $ar = sp;
 $0 = HEAP32[$pp >> 2] | 0;
 HEAP32[$p >> 2] = $0;
 $1 = HEAP32[$pp + 4 >> 2] | 0;
 $arrayidx3 = $p + 4 | 0;
 HEAP32[$arrayidx3 >> 2] = $1;
 HEAP32[$ar >> 2] = $head;
 L1 : do if (($0 | 0) != 1 | ($1 | 0) != 0) {
  $idx$neg14 = 0 - $width | 0;
  $add$ptr65 = $head + (0 - (HEAP32[$lp + ($pshift << 2) >> 2] | 0)) | 0;
  if ((FUNCTION_TABLE_iii[$cmp & 15]($add$ptr65, $head) | 0) < 1) {
   $head$addr$0$lcssa = $head;
   $i$0$lcssa = 1;
   $pshift$addr$0$lcssa = $pshift;
   $trusty$addr$0$lcssa = $trusty;
   label = 9;
  } else {
   $add$ptr72 = $add$ptr65;
   $head$addr$04368 = $head;
   $i$04269 = 1;
   $pshift$addr$04170 = $pshift;
   $trusty$addr$04071 = ($trusty | 0) == 0;
   while (1) {
    if ($trusty$addr$04071 & ($pshift$addr$04170 | 0) > 1) {
     $add$ptr15 = $head$addr$04368 + $idx$neg14 | 0;
     $4 = HEAP32[$lp + ($pshift$addr$04170 + -2 << 2) >> 2] | 0;
     if ((FUNCTION_TABLE_iii[$cmp & 15]($add$ptr15, $add$ptr72) | 0) > -1) {
      $head$addr$032 = $head$addr$04368;
      $i$034 = $i$04269;
      $pshift$addr$036 = $pshift$addr$04170;
      label = 10;
      break L1;
     }
     if ((FUNCTION_TABLE_iii[$cmp & 15]($add$ptr15 + (0 - $4) | 0, $add$ptr72) | 0) > -1) {
      $head$addr$032 = $head$addr$04368;
      $i$034 = $i$04269;
      $pshift$addr$036 = $pshift$addr$04170;
      label = 10;
      break L1;
     }
    }
    $inc = $i$04269 + 1 | 0;
    HEAP32[$ar + ($i$04269 << 2) >> 2] = $add$ptr72;
    $call29 = _pntz($p) | 0;
    _shr($p, $call29);
    $add = $call29 + $pshift$addr$04170 | 0;
    if (!((HEAP32[$p >> 2] | 0) != 1 | (HEAP32[$arrayidx3 >> 2] | 0) != 0)) {
     $head$addr$032 = $add$ptr72;
     $i$034 = $inc;
     $pshift$addr$036 = $add;
     label = 10;
     break L1;
    }
    $add$ptr = $add$ptr72 + (0 - (HEAP32[$lp + ($add << 2) >> 2] | 0)) | 0;
    if ((FUNCTION_TABLE_iii[$cmp & 15]($add$ptr, HEAP32[$ar >> 2] | 0) | 0) < 1) {
     $head$addr$0$lcssa = $add$ptr72;
     $i$0$lcssa = $inc;
     $pshift$addr$0$lcssa = $add;
     $trusty$addr$0$lcssa = 0;
     label = 9;
     break;
    } else {
     $head$addr$04368$phi = $add$ptr72;
     $add$ptr72 = $add$ptr;
     $i$04269 = $inc;
     $pshift$addr$04170 = $add;
     $trusty$addr$04071 = 1;
     $head$addr$04368 = $head$addr$04368$phi;
    }
   }
  }
 } else {
  $head$addr$0$lcssa = $head;
  $i$0$lcssa = 1;
  $pshift$addr$0$lcssa = $pshift;
  $trusty$addr$0$lcssa = $trusty;
  label = 9;
 } while (0);
 if ((label | 0) == 9) if (!$trusty$addr$0$lcssa) {
  $head$addr$032 = $head$addr$0$lcssa;
  $i$034 = $i$0$lcssa;
  $pshift$addr$036 = $pshift$addr$0$lcssa;
  label = 10;
 }
 if ((label | 0) == 10) {
  _cycle($width, $ar, $i$034);
  _sift($head$addr$032, $width, $cmp, $pshift$addr$036, $lp);
 }
 STACKTOP = sp;
 return;
}

function _arGetLine($x_coord, $y_coord, $coord_num, $vertex, $paramLTf, $line, $v) {
 $x_coord = $x_coord | 0;
 $y_coord = $y_coord | 0;
 $coord_num = $coord_num | 0;
 $vertex = $vertex | 0;
 $paramLTf = $paramLTf | 0;
 $line = $line | 0;
 $v = $v | 0;
 var $0 = 0, $1 = 0, $10 = 0, $14 = 0.0, $16 = 0.0, $5 = 0, $7 = 0, $8 = 0.0, $add = 0, $add22 = 0, $add5 = 0.0, $arrayidx104 = 0, $arrayidx111 = 0, $arrayidx82 = 0, $arrayidx87 = 0, $call = 0, $call1 = 0, $call17 = 0, $call2 = 0, $conv9 = 0, $i$0 = 0, $i$1 = 0, $j$0 = 0, $m0 = 0, $m1 = 0, $mul32 = 0, $rem = 0, $retval$0 = 0, $sub15 = 0, $sub52 = 0.0, $sub93 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $m0 = sp + 4 | 0;
 $m1 = sp;
 $call = _arVecAlloc(2) | 0;
 $call1 = _arVecAlloc(2) | 0;
 $call2 = _arMatrixAlloc(2, 2) | 0;
 $i$0 = 0;
 L1 : while (1) {
  if (($i$0 | 0) >= 4) {
   label = 10;
   break;
  }
  $add = $i$0 + 1 | 0;
  $0 = HEAP32[$vertex + ($add << 2) >> 2] | 0;
  $1 = HEAP32[$vertex + ($i$0 << 2) >> 2] | 0;
  $add5 = +($0 + 1 - $1 | 0) * .05 + .5;
  $conv9 = ~~(+($1 | 0) + $add5);
  $sub15 = ~~(+($0 | 0) - $add5) - $conv9 | 0;
  $call17 = _arMatrixAlloc($sub15 + 1 | 0, 2) | 0;
  $j$0 = 0;
  while (1) {
   if (($j$0 | 0) > ($sub15 | 0)) break;
   $add22 = $j$0 + $conv9 | 0;
   if ((_arParamObserv2IdealLTf($paramLTf, +(HEAP32[$x_coord + ($add22 << 2) >> 2] | 0), +(HEAP32[$y_coord + ($add22 << 2) >> 2] | 0), $m0, $m1) | 0) < 0) {
    label = 6;
    break L1;
   }
   $5 = HEAP32[$call17 >> 2] | 0;
   $mul32 = $j$0 << 1;
   HEAPF64[$5 + ($mul32 << 3) >> 3] = +HEAPF32[$m0 >> 2];
   HEAPF64[$5 + (($mul32 | 1) << 3) >> 3] = +HEAPF32[$m1 >> 2];
   $j$0 = $j$0 + 1 | 0;
  }
  if ((_arMatrixPCA($call17, $call2, $call, $call1) | 0) < 0) {
   label = 14;
   break;
  }
  $7 = HEAP32[$call2 >> 2] | 0;
  $8 = +HEAPF64[$7 + 8 >> 3];
  HEAPF64[$line + ($i$0 * 24 | 0) >> 3] = $8;
  $sub52 = -+HEAPF64[$7 >> 3];
  HEAPF64[$line + ($i$0 * 24 | 0) + 8 >> 3] = $sub52;
  $10 = HEAP32[$call1 >> 2] | 0;
  HEAPF64[$line + ($i$0 * 24 | 0) + 16 >> 3] = -($8 * +HEAPF64[$10 >> 3] + +HEAPF64[$10 + 8 >> 3] * $sub52);
  _arMatrixFree($call17) | 0;
  $i$0 = $add;
 }
 L10 : do if ((label | 0) == 6) label = 14; else if ((label | 0) == 10) {
  _arMatrixFree($call2) | 0;
  _arVecFree($call1) | 0;
  _arVecFree($call) | 0;
  $i$1 = 0;
  while (1) {
   if (($i$1 | 0) >= 4) {
    $retval$0 = 0;
    break L10;
   }
   $rem = ($i$1 + 3 | 0) % 4 | 0;
   $arrayidx82 = $line + ($rem * 24 | 0) | 0;
   $14 = +HEAPF64[$line + ($i$1 * 24 | 0) + 8 >> 3];
   $arrayidx87 = $line + ($i$1 * 24 | 0) | 0;
   $16 = +HEAPF64[$line + ($rem * 24 | 0) + 8 >> 3];
   $sub93 = +HEAPF64[$arrayidx82 >> 3] * $14 - +HEAPF64[$arrayidx87 >> 3] * $16;
   if (+Math_abs(+$sub93) < .0001) {
    $retval$0 = -1;
    break L10;
   }
   $arrayidx104 = $line + ($i$1 * 24 | 0) + 16 | 0;
   $arrayidx111 = $line + ($rem * 24 | 0) + 16 | 0;
   HEAPF64[$v + ($i$1 << 4) >> 3] = ($16 * +HEAPF64[$arrayidx104 >> 3] - $14 * +HEAPF64[$arrayidx111 >> 3]) / $sub93;
   HEAPF64[$v + ($i$1 << 4) + 8 >> 3] = (+HEAPF64[$arrayidx87 >> 3] * +HEAPF64[$arrayidx111 >> 3] - +HEAPF64[$arrayidx82 >> 3] * +HEAPF64[$arrayidx104 >> 3]) / $sub93;
   $i$1 = $i$1 + 1 | 0;
  }
 } while (0);
 if ((label | 0) == 14) {
  _arMatrixFree($call17) | 0;
  _arMatrixFree($call2) | 0;
  _arVecFree($call1) | 0;
  _arVecFree($call) | 0;
  $retval$0 = -1;
 }
 STACKTOP = sp;
 return $retval$0 | 0;
}

function _arglCameraFrustum($cparam, $focalmin, $focalmax, $m_projection) {
 $cparam = $cparam | 0;
 $focalmin = +$focalmin;
 $focalmax = +$focalmax;
 $m_projection = $m_projection | 0;
 var $0 = 0, $1 = 0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $2 = 0.0, $arrayidx56 = 0, $arrayidx6 = 0, $arrayidx77 = 0, $arrayidx93 = 0, $conv = 0.0, $conv34 = 0.0, $i$0 = 0, $i$1 = 0, $i$2 = 0, $icpara = 0, $j$0 = 0, $j$1 = 0, $p = 0, $q = 0, $sub82 = 0.0, $trans = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 400 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(400);
 $icpara = sp + 296 | 0;
 $trans = sp + 200 | 0;
 $p = sp + 128 | 0;
 $q = sp;
 $0 = HEAP32[$cparam >> 2] | 0;
 $1 = HEAP32[$cparam + 4 >> 2] | 0;
 L1 : do if ((_arParamDecompMat($cparam + 8 | 0, $icpara, $trans) | 0) < 0) _arLog(3, 5376, sp + 392 | 0); else {
  $conv = +($1 + -1 | 0);
  $i$0 = 0;
  while (1) {
   if (($i$0 | 0) == 4) break;
   $arrayidx6 = $icpara + 32 + ($i$0 << 3) | 0;
   HEAPF64[$arrayidx6 >> 3] = $conv * +HEAPF64[$icpara + 64 + ($i$0 << 3) >> 3] - +HEAPF64[$arrayidx6 >> 3];
   $i$0 = $i$0 + 1 | 0;
  }
  $2 = +HEAPF64[$icpara + 80 >> 3];
  $i$1 = 0;
  while (1) {
   if (($i$1 | 0) == 3) break; else $j$0 = 0;
   while (1) {
    if (($j$0 | 0) == 3) break;
    HEAPF64[$p + ($i$1 * 24 | 0) + ($j$0 << 3) >> 3] = +HEAPF64[$icpara + ($i$1 << 5) + ($j$0 << 3) >> 3] / $2;
    $j$0 = $j$0 + 1 | 0;
   }
   $i$1 = $i$1 + 1 | 0;
  }
  $conv34 = +($0 + -1 | 0);
  HEAPF64[$q >> 3] = +HEAPF64[$p >> 3] * 2.0 / $conv34;
  HEAPF64[$q + 8 >> 3] = +HEAPF64[$p + 8 >> 3] * 2.0 / $conv34;
  HEAPF64[$q + 16 >> 3] = +HEAPF64[$p + 16 >> 3] * 2.0 / $conv34 + -1.0;
  $arrayidx56 = $q + 24 | 0;
  HEAP32[$arrayidx56 >> 2] = 0;
  HEAP32[$arrayidx56 + 4 >> 2] = 0;
  HEAP32[$arrayidx56 + 8 >> 2] = 0;
  HEAP32[$arrayidx56 + 12 >> 2] = 0;
  HEAPF64[$q + 40 >> 3] = +HEAPF64[$p + 32 >> 3] * 2.0 / $conv;
  HEAPF64[$q + 48 >> 3] = +HEAPF64[$p + 40 >> 3] * 2.0 / $conv + -1.0;
  $arrayidx77 = $q + 56 | 0;
  $sub82 = $focalmax - $focalmin;
  HEAP32[$arrayidx77 >> 2] = 0;
  HEAP32[$arrayidx77 + 4 >> 2] = 0;
  HEAP32[$arrayidx77 + 8 >> 2] = 0;
  HEAP32[$arrayidx77 + 12 >> 2] = 0;
  HEAP32[$arrayidx77 + 16 >> 2] = 0;
  HEAP32[$arrayidx77 + 20 >> 2] = 0;
  HEAPF64[$q + 80 >> 3] = ($focalmin + $focalmax) / $sub82;
  HEAPF64[$q + 88 >> 3] = $focalmax * -2.0 * $focalmin / $sub82;
  $arrayidx93 = $q + 96 | 0;
  HEAP32[$arrayidx93 >> 2] = 0;
  HEAP32[$arrayidx93 + 4 >> 2] = 0;
  HEAP32[$arrayidx93 + 8 >> 2] = 0;
  HEAP32[$arrayidx93 + 12 >> 2] = 0;
  HEAPF64[$q + 112 >> 3] = 1.0;
  HEAPF64[$q + 120 >> 3] = 0.0;
  $11 = +HEAPF64[$trans + 24 >> 3];
  $12 = +HEAPF64[$trans + 56 >> 3];
  $13 = +HEAPF64[$trans + 88 >> 3];
  $i$2 = 0;
  while (1) {
   if (($i$2 | 0) == 4) break L1;
   $14 = +HEAPF64[$q + ($i$2 << 5) >> 3];
   $15 = +HEAPF64[$q + ($i$2 << 5) + 16 >> 3];
   $16 = +HEAPF64[$q + ($i$2 << 5) + 8 >> 3];
   $j$1 = 0;
   while (1) {
    if (($j$1 | 0) == 3) break;
    HEAPF64[$m_projection + (($j$1 << 2) + $i$2 << 3) >> 3] = $14 * +HEAPF64[$trans + ($j$1 << 3) >> 3] + $16 * +HEAPF64[$trans + 32 + ($j$1 << 3) >> 3] + $15 * +HEAPF64[$trans + 64 + ($j$1 << 3) >> 3];
    $j$1 = $j$1 + 1 | 0;
   }
   HEAPF64[$m_projection + ($i$2 + 12 << 3) >> 3] = +HEAPF64[$q + ($i$2 << 5) + 24 >> 3] + ($14 * $11 + $16 * $12 + $15 * $13);
   $i$2 = $i$2 + 1 | 0;
  }
 } while (0);
 STACKTOP = sp;
 return;
}

function __ZN10__cxxabiv112_GLOBAL__N_125parse_noexcept_expressionINS0_2DbEEEPKcS4_S4_RT_($first, $last, $db) {
 $first = $first | 0;
 $last = $last | 0;
 $db = $db | 0;
 var $1 = 0, $2 = 0, $4 = 0, $__end_$i = 0, $__i$0$i$i$i = 0, $__i$0$i$i$i$i = 0, $__i$0$i$i$i13 = 0, $__size_$i1$i$i$i$i = 0, $call = 0, $first13 = 0, $ref$tmp = 0, $ref$tmp$i$i$i$i = 0, $ref$tmp3 = 0, $ref$tmp4 = 0, $retval$0 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48);
 $ref$tmp$i$i$i$i = sp + 36 | 0;
 $ref$tmp = sp + 24 | 0;
 $ref$tmp3 = sp + 12 | 0;
 $ref$tmp4 = sp;
 $call = __ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($first, $last, $db) | 0;
 if (($call | 0) == ($first | 0)) $retval$0 = $first; else {
  $__end_$i = $db + 4 | 0;
  $1 = HEAP32[$__end_$i >> 2] | 0;
  if ((HEAP32[$db >> 2] | 0) == ($1 | 0)) $retval$0 = $first; else {
   __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($ref$tmp4, $1 + -24 | 0);
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKc($ref$tmp4, 0, 15158) | 0;
   HEAP32[$ref$tmp3 >> 2] = HEAP32[$ref$tmp4 >> 2];
   HEAP32[$ref$tmp3 + 4 >> 2] = HEAP32[$ref$tmp4 + 4 >> 2];
   HEAP32[$ref$tmp3 + 8 >> 2] = HEAP32[$ref$tmp4 + 8 >> 2];
   $__i$0$i$i$i = 0;
   while (1) {
    if (($__i$0$i$i$i | 0) == 3) break;
    HEAP32[$ref$tmp4 + ($__i$0$i$i$i << 2) >> 2] = 0;
    $__i$0$i$i$i = $__i$0$i$i$i + 1 | 0;
   }
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($ref$tmp3, 14885) | 0;
   HEAP32[$ref$tmp >> 2] = HEAP32[$ref$tmp3 >> 2];
   HEAP32[$ref$tmp + 4 >> 2] = HEAP32[$ref$tmp3 + 4 >> 2];
   HEAP32[$ref$tmp + 8 >> 2] = HEAP32[$ref$tmp3 + 8 >> 2];
   $__i$0$i$i$i13 = 0;
   while (1) {
    if (($__i$0$i$i$i13 | 0) == 3) break;
    HEAP32[$ref$tmp3 + ($__i$0$i$i$i13 << 2) >> 2] = 0;
    $__i$0$i$i$i13 = $__i$0$i$i$i13 + 1 | 0;
   }
   $2 = HEAP32[$__end_$i >> 2] | 0;
   $first13 = $2 + -24 | 0;
   $__size_$i1$i$i$i$i = $first13 + 11 | 0;
   if ((HEAP8[$__size_$i1$i$i$i$i >> 0] | 0) < 0) {
    $4 = HEAP32[$first13 >> 2] | 0;
    HEAP8[$ref$tmp$i$i$i$i >> 0] = 0;
    __ZNSt3__211char_traitsIcE6assignERcRKc($4, $ref$tmp$i$i$i$i);
    HEAP32[$2 + -20 >> 2] = 0;
   } else {
    HEAP8[$ref$tmp$i$i$i$i >> 0] = 0;
    __ZNSt3__211char_traitsIcE6assignERcRKc($first13, $ref$tmp$i$i$i$i);
    HEAP8[$__size_$i1$i$i$i$i >> 0] = 0;
   }
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE7reserveEj($first13);
   HEAP32[$first13 >> 2] = HEAP32[$ref$tmp >> 2];
   HEAP32[$first13 + 4 >> 2] = HEAP32[$ref$tmp + 4 >> 2];
   HEAP32[$first13 + 8 >> 2] = HEAP32[$ref$tmp + 8 >> 2];
   $__i$0$i$i$i$i = 0;
   while (1) {
    if (($__i$0$i$i$i$i | 0) == 3) break;
    HEAP32[$ref$tmp + ($__i$0$i$i$i$i << 2) >> 2] = 0;
    $__i$0$i$i$i$i = $__i$0$i$i$i$i + 1 | 0;
   }
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($ref$tmp);
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($ref$tmp3);
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($ref$tmp4);
   $retval$0 = $call;
  }
 }
 STACKTOP = sp;
 return $retval$0 | 0;
}

function _qsort($base, $nel, $width, $cmp) {
 $base = $base | 0;
 $nel = $nel | 0;
 $width = $width | 0;
 $cmp = $cmp | 0;
 var $0 = 0, $14 = 0, $4 = 0, $4$phi = 0, $5 = 0, $6 = 0, $9 = 0, $add$ptr1 = 0, $add$ptr33 = 0, $add$ptr65 = 0, $add6 = 0, $arrayidx40 = 0, $call = 0, $head$0$lcssa = 0, $head$056 = 0, $head$1 = 0, $i$0 = 0, $idx$neg = 0, $lp = 0, $mul = 0, $or = 0, $or63 = 0, $p = 0, $pshift$0$lcssa = 0, $pshift$057 = 0, $pshift$1 = 0, $pshift$2 = 0, $sub$ptr$lhs$cast = 0, $sub15 = 0, $sub50 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 208 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(208);
 $lp = sp + 8 | 0;
 $p = sp;
 $mul = Math_imul($width, $nel) | 0;
 $0 = $p;
 HEAP32[$0 >> 2] = 1;
 HEAP32[$0 + 4 >> 2] = 0;
 L1 : do if ($mul | 0) {
  $idx$neg = 0 - $width | 0;
  HEAP32[$lp + 4 >> 2] = $width;
  HEAP32[$lp >> 2] = $width;
  $4 = $width;
  $5 = $width;
  $i$0 = 2;
  while (1) {
   $add6 = $4 + $width + $5 | 0;
   HEAP32[$lp + ($i$0 << 2) >> 2] = $add6;
   if ($add6 >>> 0 < $mul >>> 0) {
    $4$phi = $5;
    $5 = $add6;
    $i$0 = $i$0 + 1 | 0;
    $4 = $4$phi;
   } else break;
  }
  $add$ptr1 = $base + $mul + $idx$neg | 0;
  if ($add$ptr1 >>> 0 > $base >>> 0) {
   $sub$ptr$lhs$cast = $add$ptr1;
   $6 = 1;
   $head$056 = $base;
   $pshift$057 = 1;
   while (1) {
    do if (($6 & 3 | 0) == 3) {
     _sift($head$056, $width, $cmp, $pshift$057, $lp);
     _shr($p, 2);
     $pshift$1 = $pshift$057 + 2 | 0;
    } else {
     $sub15 = $pshift$057 + -1 | 0;
     if ((HEAP32[$lp + ($sub15 << 2) >> 2] | 0) >>> 0 < ($sub$ptr$lhs$cast - $head$056 | 0) >>> 0) _sift($head$056, $width, $cmp, $pshift$057, $lp); else _trinkle($head$056, $width, $cmp, $p, $pshift$057, 0, $lp);
     if (($pshift$057 | 0) == 1) {
      _shl($p, 1);
      $pshift$1 = 0;
      break;
     } else {
      _shl($p, $sub15);
      $pshift$1 = 1;
      break;
     }
    } while (0);
    $or = HEAP32[$p >> 2] | 1;
    HEAP32[$p >> 2] = $or;
    $add$ptr33 = $head$056 + $width | 0;
    if ($add$ptr33 >>> 0 < $add$ptr1 >>> 0) {
     $6 = $or;
     $head$056 = $add$ptr33;
     $pshift$057 = $pshift$1;
    } else {
     $14 = $or;
     $head$0$lcssa = $add$ptr33;
     $pshift$0$lcssa = $pshift$1;
     break;
    }
   }
  } else {
   $14 = 1;
   $head$0$lcssa = $base;
   $pshift$0$lcssa = 1;
  }
  _trinkle($head$0$lcssa, $width, $cmp, $p, $pshift$0$lcssa, 0, $lp);
  $arrayidx40 = $p + 4 | 0;
  $9 = $14;
  $head$1 = $head$0$lcssa;
  $pshift$2 = $pshift$0$lcssa;
  while (1) {
   if (($pshift$2 | 0) == 1 & ($9 | 0) == 1) {
    if (!(HEAP32[$arrayidx40 >> 2] | 0)) break L1;
   } else if (($pshift$2 | 0) >= 2) {
    _shl($p, 2);
    $sub50 = $pshift$2 + -2 | 0;
    HEAP32[$p >> 2] = HEAP32[$p >> 2] ^ 7;
    _shr($p, 1);
    _trinkle($head$1 + (0 - (HEAP32[$lp + ($sub50 << 2) >> 2] | 0)) + $idx$neg | 0, $width, $cmp, $p, $pshift$2 + -1 | 0, 1, $lp);
    _shl($p, 1);
    $or63 = HEAP32[$p >> 2] | 1;
    HEAP32[$p >> 2] = $or63;
    $add$ptr65 = $head$1 + $idx$neg | 0;
    _trinkle($add$ptr65, $width, $cmp, $p, $sub50, 1, $lp);
    $9 = $or63;
    $head$1 = $add$ptr65;
    $pshift$2 = $sub50;
    continue;
   }
   $call = _pntz($p) | 0;
   _shr($p, $call);
   $9 = HEAP32[$p >> 2] | 0;
   $head$1 = $head$1 + $idx$neg | 0;
   $pshift$2 = $call + $pshift$2 | 0;
  }
 } while (0);
 STACKTOP = sp;
 return;
}

function __ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($this, $info, $current_ptr, $path_below, $use_strcmp) {
 $this = $this | 0;
 $info = $info | 0;
 $current_ptr = $current_ptr | 0;
 $path_below = $path_below | 0;
 $use_strcmp = $use_strcmp | 0;
 var $12 = 0, $5 = 0, $__base_type = 0, $dst_ptr_not_leading_to_static_ptr = 0, $found_any_static_type = 0, $found_our_static_ptr = 0, $is_dst_type_derived_from_static_type = 0, $is_dst_type_derived_from_static_type13$0$off032 = 0, $is_dst_type_derived_from_static_type13$0$off033 = 0, $number_to_dst_ptr = 0, $path_dynamic_ptr_to_dst_ptr = 0, label = 0;
 do if (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($this, HEAP32[$info + 8 >> 2] | 0, $use_strcmp) | 0) __ZNK10__cxxabiv117__class_type_info29process_static_type_below_dstEPNS_19__dynamic_cast_infoEPKvi(0, $info, $current_ptr, $path_below); else {
  $__base_type = $this + 8 | 0;
  if (!(__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($this, HEAP32[$info >> 2] | 0, $use_strcmp) | 0)) {
   $12 = HEAP32[$__base_type >> 2] | 0;
   FUNCTION_TABLE_viiiii[HEAP32[(HEAP32[$12 >> 2] | 0) + 24 >> 2] & 3]($12, $info, $current_ptr, $path_below, $use_strcmp);
   break;
  }
  $path_dynamic_ptr_to_dst_ptr = $info + 32 | 0;
  if ((HEAP32[$info + 16 >> 2] | 0) != ($current_ptr | 0)) {
   $dst_ptr_not_leading_to_static_ptr = $info + 20 | 0;
   if ((HEAP32[$dst_ptr_not_leading_to_static_ptr >> 2] | 0) != ($current_ptr | 0)) {
    HEAP32[$path_dynamic_ptr_to_dst_ptr >> 2] = $path_below;
    $is_dst_type_derived_from_static_type = $info + 44 | 0;
    if ((HEAP32[$is_dst_type_derived_from_static_type >> 2] | 0) == 4) break;
    $found_our_static_ptr = $info + 52 | 0;
    HEAP8[$found_our_static_ptr >> 0] = 0;
    $found_any_static_type = $info + 53 | 0;
    HEAP8[$found_any_static_type >> 0] = 0;
    $5 = HEAP32[$__base_type >> 2] | 0;
    FUNCTION_TABLE_viiiiii[HEAP32[(HEAP32[$5 >> 2] | 0) + 20 >> 2] & 3]($5, $info, $current_ptr, $current_ptr, 1, $use_strcmp);
    if (!(HEAP8[$found_any_static_type >> 0] | 0)) {
     $is_dst_type_derived_from_static_type13$0$off032 = 4;
     label = 11;
    } else if (!(HEAP8[$found_our_static_ptr >> 0] | 0)) {
     $is_dst_type_derived_from_static_type13$0$off032 = 3;
     label = 11;
    } else $is_dst_type_derived_from_static_type13$0$off033 = 3;
    if ((label | 0) == 11) {
     HEAP32[$dst_ptr_not_leading_to_static_ptr >> 2] = $current_ptr;
     $number_to_dst_ptr = $info + 40 | 0;
     HEAP32[$number_to_dst_ptr >> 2] = (HEAP32[$number_to_dst_ptr >> 2] | 0) + 1;
     if ((HEAP32[$info + 36 >> 2] | 0) == 1) if ((HEAP32[$info + 24 >> 2] | 0) == 2) {
      HEAP8[$info + 54 >> 0] = 1;
      $is_dst_type_derived_from_static_type13$0$off033 = $is_dst_type_derived_from_static_type13$0$off032;
     } else $is_dst_type_derived_from_static_type13$0$off033 = $is_dst_type_derived_from_static_type13$0$off032; else $is_dst_type_derived_from_static_type13$0$off033 = $is_dst_type_derived_from_static_type13$0$off032;
    }
    HEAP32[$is_dst_type_derived_from_static_type >> 2] = $is_dst_type_derived_from_static_type13$0$off033;
    break;
   }
  }
  if (($path_below | 0) == 1) HEAP32[$path_dynamic_ptr_to_dst_ptr >> 2] = 1;
 } while (0);
 return;
}

function __ZN10__cxxabiv112_GLOBAL__N_117parse_typeid_exprINS0_2DbEEEPKcS4_S4_RT_($first, $last, $db) {
 $first = $first | 0;
 $last = $last | 0;
 $db = $db | 0;
 var $1 = 0, $3 = 0, $__end_$i = 0, $__i$0$i$i$i = 0, $__i$0$i$i$i19 = 0, $add$ptr = 0, $agg$tmp = 0, $ref$tmp = 0, $ref$tmp21 = 0, $ref$tmp22 = 0, $retval$1 = 0, $t$0 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(64);
 $ref$tmp = sp + 40 | 0;
 $agg$tmp = sp + 12 | 0;
 $ref$tmp21 = sp + 24 | 0;
 $ref$tmp22 = sp;
 L1 : do if (($last - $first | 0) > 2) if ((HEAP8[$first >> 0] | 0) == 116) {
  $1 = HEAP8[$first + 1 >> 0] | 0;
  switch ($1 << 24 >> 24) {
  case 101:
  case 105:
   break;
  default:
   {
    $retval$1 = $first;
    break L1;
   }
  }
  $add$ptr = $first + 2 | 0;
  if ($1 << 24 >> 24 == 101) $t$0 = __ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($add$ptr, $last, $db) | 0; else $t$0 = __ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($add$ptr, $last, $db) | 0;
  if (($t$0 | 0) == ($add$ptr | 0)) $retval$1 = $first; else {
   $__end_$i = $db + 4 | 0;
   $3 = HEAP32[$__end_$i >> 2] | 0;
   if ((HEAP32[$db >> 2] | 0) == ($3 | 0)) $retval$1 = $first; else {
    __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($ref$tmp22, $3 + -24 | 0);
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKc($ref$tmp22, 0, 15090) | 0;
    HEAP32[$ref$tmp21 >> 2] = HEAP32[$ref$tmp22 >> 2];
    HEAP32[$ref$tmp21 + 4 >> 2] = HEAP32[$ref$tmp22 + 4 >> 2];
    HEAP32[$ref$tmp21 + 8 >> 2] = HEAP32[$ref$tmp22 + 8 >> 2];
    $__i$0$i$i$i = 0;
    while (1) {
     if (($__i$0$i$i$i | 0) == 3) break;
     HEAP32[$ref$tmp22 + ($__i$0$i$i$i << 2) >> 2] = 0;
     $__i$0$i$i$i = $__i$0$i$i$i + 1 | 0;
    }
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($ref$tmp21, 14885) | 0;
    HEAP32[$agg$tmp >> 2] = HEAP32[$ref$tmp21 >> 2];
    HEAP32[$agg$tmp + 4 >> 2] = HEAP32[$ref$tmp21 + 4 >> 2];
    HEAP32[$agg$tmp + 8 >> 2] = HEAP32[$ref$tmp21 + 8 >> 2];
    $__i$0$i$i$i19 = 0;
    while (1) {
     if (($__i$0$i$i$i19 | 0) == 3) break;
     HEAP32[$ref$tmp21 + ($__i$0$i$i$i19 << 2) >> 2] = 0;
     $__i$0$i$i$i19 = $__i$0$i$i$i19 + 1 | 0;
    }
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ENSt3__212basic_stringIcNS2_11char_traitsIcEENS0_12malloc_allocIcEEEE($ref$tmp, $agg$tmp);
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairaSEOS1_((HEAP32[$__end_$i >> 2] | 0) + -24 | 0, $ref$tmp);
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($ref$tmp);
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($agg$tmp);
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($ref$tmp21);
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($ref$tmp22);
    $retval$1 = $t$0;
   }
  }
 } else $retval$1 = $first; else $retval$1 = $first; while (0);
 STACKTOP = sp;
 return $retval$1 | 0;
}

function _setCamera($id, $cameraID) {
 $id = $id | 0;
 $cameraID = $cameraID | 0;
 var $0 = 0, $2 = 0, $arhandle = 0, $call35 = 0, $call40 = 0, $call47 = 0, $call7 = 0, $cameraID$addr = 0, $height = 0, $id$addr = 0, $param = 0, $paramLT = 0, $retval$2 = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_buffer4 = 0, $vararg_buffer6 = 0, $width = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48);
 $vararg_buffer6 = sp + 24 | 0;
 $vararg_buffer4 = sp + 16 | 0;
 $vararg_buffer2 = sp + 8 | 0;
 $vararg_buffer = sp;
 $id$addr = sp + 32 | 0;
 $cameraID$addr = sp + 28 | 0;
 HEAP32[$id$addr >> 2] = $id;
 HEAP32[$cameraID$addr >> 2] = $cameraID;
 do if (!(__ZNSt3__212__hash_tableINS_17__hash_value_typeIi12arControllerEENS_22__unordered_map_hasherIiS3_NS_4hashIiEELb1EEENS_21__unordered_map_equalIiS3_NS_8equal_toIiEELb1EEENS_9allocatorIS3_EEE4findIiEENS_15__hash_iteratorIPNS_11__hash_nodeIS3_PvEEEERKT_(17144, $id$addr) | 0)) $retval$2 = -1; else {
  $call7 = __ZNSt3__213unordered_mapIi12arControllerNS_4hashIiEENS_8equal_toIiEENS_9allocatorINS_4pairIKiS1_EEEEEixERS8_(17144, $id$addr) | 0;
  if (!(__ZNSt3__212__hash_tableINS_17__hash_value_typeIi7ARParamEENS_22__unordered_map_hasherIiS3_NS_4hashIiEELb1EEENS_21__unordered_map_equalIiS3_NS_8equal_toIiEELb1EEENS_9allocatorIS3_EEE4findIiEENS_15__hash_iteratorIPNS_11__hash_nodeIS3_PvEEEERKT_(17164, $cameraID$addr) | 0)) $retval$2 = -1; else {
   $param = $call7 + 8 | 0;
   _memcpy($param | 0, __ZNSt3__213unordered_mapIi7ARParamNS_4hashIiEENS_8equal_toIiEENS_9allocatorINS_4pairIKiS1_EEEEEixERS8_(17164, $cameraID$addr) | 0, 184) | 0;
   $0 = HEAP32[$param >> 2] | 0;
   $width = $call7 + 204 | 0;
   $2 = HEAP32[$call7 + 12 >> 2] | 0;
   $height = $call7 + 208 | 0;
   if (!(($0 | 0) == (HEAP32[$width >> 2] | 0) ? ($2 | 0) == (HEAP32[$height >> 2] | 0) : 0)) {
    HEAP32[$vararg_buffer >> 2] = $0;
    HEAP32[$vararg_buffer + 4 >> 2] = $2;
    _arLog(2, 10176, $vararg_buffer);
    _arParamChangeSize($param, HEAP32[$width >> 2] | 0, HEAP32[$height >> 2] | 0, $param) | 0;
   }
   _deleteHandle($call7);
   $call35 = _arParamLTCreate($param, 15) | 0;
   $paramLT = $call7 + 192 | 0;
   HEAP32[$paramLT >> 2] = $call35;
   if (!$call35) {
    _arLog(3, 10223, $vararg_buffer2);
    $retval$2 = -1;
    break;
   }
   $call40 = _arCreateHandle($call35) | 0;
   $arhandle = $call7 + 212 | 0;
   HEAP32[$arhandle >> 2] = $call40;
   if (!$call40) {
    _arLog(3, 10261, $vararg_buffer4);
    $retval$2 = -1;
    break;
   }
   _arSetPixelFormat($call40, 2) | 0;
   $call47 = _ar3DCreateHandle($param) | 0;
   HEAP32[$call7 + 224 >> 2] = $call47;
   if (!$call47) {
    _arLog(3, 10298, $vararg_buffer6);
    $retval$2 = -1;
    break;
   } else {
    _arPattAttach(HEAP32[$arhandle >> 2] | 0, HEAP32[$call7 + 216 >> 2] | 0) | 0;
    _arglCameraFrustum(HEAP32[$paramLT >> 2] | 0, +HEAPF64[$call7 + 232 >> 3], +HEAPF64[$call7 + 240 >> 3], $call7 + 264 | 0);
    $retval$2 = 0;
    break;
   }
  }
 } while (0);
 STACKTOP = sp;
 return $retval$2 | 0;
}

function __ZN10__cxxabiv112_GLOBAL__N_114parse_decltypeINS0_2DbEEEPKcS4_S4_RT_($first, $last, $db) {
 $first = $first | 0;
 $last = $last | 0;
 $db = $db | 0;
 var $4 = 0, $__end_$i = 0, $__i$0$i$i$i = 0, $__i$0$i$i$i20 = 0, $add$ptr = 0, $agg$tmp = 0, $call = 0, $ref$tmp = 0, $ref$tmp14 = 0, $ref$tmp15 = 0, $retval$1 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(64);
 $ref$tmp = sp + 40 | 0;
 $agg$tmp = sp + 12 | 0;
 $ref$tmp14 = sp + 24 | 0;
 $ref$tmp15 = sp;
 L1 : do if (($last - $first | 0) > 3) if ((HEAP8[$first >> 0] | 0) == 68) {
  switch (HEAP8[$first + 1 >> 0] | 0) {
  case 84:
  case 116:
   break;
  default:
   {
    $retval$1 = $first;
    break L1;
   }
  }
  $add$ptr = $first + 2 | 0;
  $call = __ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($add$ptr, $last, $db) | 0;
  if (($call | 0) == ($add$ptr | 0) | ($call | 0) == ($last | 0)) $retval$1 = $first; else if ((HEAP8[$call >> 0] | 0) == 69) {
   $__end_$i = $db + 4 | 0;
   $4 = HEAP32[$__end_$i >> 2] | 0;
   if ((HEAP32[$db >> 2] | 0) == ($4 | 0)) $retval$1 = $first; else {
    __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($ref$tmp15, $4 + -24 | 0);
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKc($ref$tmp15, 0, 16203) | 0;
    HEAP32[$ref$tmp14 >> 2] = HEAP32[$ref$tmp15 >> 2];
    HEAP32[$ref$tmp14 + 4 >> 2] = HEAP32[$ref$tmp15 + 4 >> 2];
    HEAP32[$ref$tmp14 + 8 >> 2] = HEAP32[$ref$tmp15 + 8 >> 2];
    $__i$0$i$i$i = 0;
    while (1) {
     if (($__i$0$i$i$i | 0) == 3) break;
     HEAP32[$ref$tmp15 + ($__i$0$i$i$i << 2) >> 2] = 0;
     $__i$0$i$i$i = $__i$0$i$i$i + 1 | 0;
    }
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($ref$tmp14, 14885) | 0;
    HEAP32[$agg$tmp >> 2] = HEAP32[$ref$tmp14 >> 2];
    HEAP32[$agg$tmp + 4 >> 2] = HEAP32[$ref$tmp14 + 4 >> 2];
    HEAP32[$agg$tmp + 8 >> 2] = HEAP32[$ref$tmp14 + 8 >> 2];
    $__i$0$i$i$i20 = 0;
    while (1) {
     if (($__i$0$i$i$i20 | 0) == 3) break;
     HEAP32[$ref$tmp14 + ($__i$0$i$i$i20 << 2) >> 2] = 0;
     $__i$0$i$i$i20 = $__i$0$i$i$i20 + 1 | 0;
    }
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ENSt3__212basic_stringIcNS2_11char_traitsIcEENS0_12malloc_allocIcEEEE($ref$tmp, $agg$tmp);
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairaSEOS1_((HEAP32[$__end_$i >> 2] | 0) + -24 | 0, $ref$tmp);
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($ref$tmp);
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($agg$tmp);
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($ref$tmp14);
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($ref$tmp15);
    $retval$1 = $call + 1 | 0;
   }
  } else $retval$1 = $first;
 } else $retval$1 = $first; else $retval$1 = $first; while (0);
 STACKTOP = sp;
 return $retval$1 | 0;
}

function __ZNSt3__212__hash_tableINS_17__hash_value_typeIi12arControllerEENS_22__unordered_map_hasherIiS3_NS_4hashIiEELb1EEENS_21__unordered_map_equalIiS3_NS_8equal_toIiEELb1EEENS_9allocatorIS3_EEE8__rehashEj($this, $__nbc) {
 $this = $this | 0;
 $__nbc = $__nbc | 0;
 var $0 = 0, $1 = 0, $17 = 0, $3 = 0, $5 = 0, $8 = 0, $__cp$0 = 0, $__first_$i$i = 0, $__i$0 = 0, $__np$0 = 0, $__phash$0$ph$ph = 0, $__pp$0$ph = 0, $__pp$0$ph$ph = 0, $__second_$i$i$i = 0, $__value_ = 0, $arrayidx$i49 = 0, $call$i$i$i = 0, $cond6$i = 0, $cond6$i62 = 0, $exception$i$i$i = 0, $sub$i53 = 0, $tobool$i55 = 0;
 $__second_$i$i$i = $this + 4 | 0;
 L1 : do if (!$__nbc) {
  $17 = HEAP32[$this >> 2] | 0;
  HEAP32[$this >> 2] = 0;
  if ($17 | 0) __ZdlPv($17);
  HEAP32[$__second_$i$i$i >> 2] = 0;
 } else {
  if ($__nbc >>> 0 > 1073741823) {
   $exception$i$i$i = ___cxa_allocate_exception(8) | 0;
   __ZNSt11logic_errorC2EPKc($exception$i$i$i, 7628);
   HEAP32[$exception$i$i$i >> 2] = 3176;
   ___cxa_throw($exception$i$i$i | 0, 272, 6);
  }
  $call$i$i$i = __Znwj($__nbc << 2) | 0;
  $0 = HEAP32[$this >> 2] | 0;
  HEAP32[$this >> 2] = $call$i$i$i;
  if ($0 | 0) __ZdlPv($0);
  HEAP32[$__second_$i$i$i >> 2] = $__nbc;
  $__i$0 = 0;
  while (1) {
   if (($__i$0 | 0) == ($__nbc | 0)) break;
   HEAP32[(HEAP32[$this >> 2] | 0) + ($__i$0 << 2) >> 2] = 0;
   $__i$0 = $__i$0 + 1 | 0;
  }
  $__first_$i$i = $this + 8 | 0;
  $1 = HEAP32[$__first_$i$i >> 2] | 0;
  if ($1 | 0) {
   $3 = HEAP32[$1 + 4 >> 2] | 0;
   $sub$i53 = $__nbc + -1 | 0;
   $tobool$i55 = ($sub$i53 & $__nbc | 0) == 0;
   if ($tobool$i55) $cond6$i62 = $3 & $sub$i53; else if ($3 >>> 0 < $__nbc >>> 0) $cond6$i62 = $3; else $cond6$i62 = ($3 >>> 0) % ($__nbc >>> 0) | 0;
   HEAP32[(HEAP32[$this >> 2] | 0) + ($cond6$i62 << 2) >> 2] = $__first_$i$i;
   $__phash$0$ph$ph = $cond6$i62;
   $__pp$0$ph$ph = $1;
   while (1) {
    $__pp$0$ph = $__pp$0$ph$ph;
    L25 : while (1) while (1) {
     $__cp$0 = HEAP32[$__pp$0$ph >> 2] | 0;
     if (!$__cp$0) break L1;
     $5 = HEAP32[$__cp$0 + 4 >> 2] | 0;
     if ($tobool$i55) $cond6$i = $5 & $sub$i53; else if ($5 >>> 0 < $__nbc >>> 0) $cond6$i = $5; else $cond6$i = ($5 >>> 0) % ($__nbc >>> 0) | 0;
     if (($cond6$i | 0) == ($__phash$0$ph$ph | 0)) {
      $__pp$0$ph = $__cp$0;
      continue L25;
     }
     $arrayidx$i49 = (HEAP32[$this >> 2] | 0) + ($cond6$i << 2) | 0;
     if (!(HEAP32[$arrayidx$i49 >> 2] | 0)) break L25;
     $__value_ = $__cp$0 + 8 | 0;
     $__np$0 = $__cp$0;
     while (1) {
      $8 = HEAP32[$__np$0 >> 2] | 0;
      if (!$8) break;
      if ((HEAP32[$__value_ >> 2] | 0) == (HEAP32[$8 + 8 >> 2] | 0)) $__np$0 = $8; else break;
     }
     HEAP32[$__pp$0$ph >> 2] = $8;
     HEAP32[$__np$0 >> 2] = HEAP32[HEAP32[(HEAP32[$this >> 2] | 0) + ($cond6$i << 2) >> 2] >> 2];
     HEAP32[HEAP32[(HEAP32[$this >> 2] | 0) + ($cond6$i << 2) >> 2] >> 2] = $__cp$0;
    }
    HEAP32[$arrayidx$i49 >> 2] = $__pp$0$ph;
    $__phash$0$ph$ph = $cond6$i;
    $__pp$0$ph$ph = $__cp$0;
   }
  }
 } while (0);
 return;
}

function _arImageProcLumaHistAndBoxFilterWithBias($ipi, $dataPtr, $boxSize, $bias) {
 $ipi = $ipi | 0;
 $dataPtr = $dataPtr | 0;
 $boxSize = $boxSize | 0;
 $bias = $bias | 0;
 var $10 = 0, $3 = 0, $4 = 0, $add = 0, $add28 = 0, $arrayidx48 = 0, $arrayidx65 = 0, $call = 0, $call3 = 0, $count$0 = 0, $count$1 = 0, $count$2 = 0, $count$3 = 0, $i$0 = 0, $i$1 = 0, $image2 = 0, $imageX13 = 0, $imageY10 = 0, $j$0 = 0, $kernel_i$0 = 0, $kernel_j$0 = 0, $mul36 = 0, $retval$0 = 0, $shr = 0, $sub = 0, $val$0 = 0, $val$1 = 0, $val$2 = 0, $val$3 = 0;
 $call = _arImageProcLumaHist($ipi, $dataPtr) | 0;
 L1 : do if (($call | 0) < 0) $retval$0 = $call; else {
  $image2 = $ipi + 4 | 0;
  $imageX13 = $ipi + 8 | 0;
  $imageY10 = $ipi + 12 | 0;
  if (!(HEAP32[$image2 >> 2] | 0)) {
   $call3 = _malloc(Math_imul(HEAP32[$imageY10 >> 2] | 0, HEAP32[$imageX13 >> 2] | 0) | 0) | 0;
   HEAP32[$image2 >> 2] = $call3;
   if (!$call3) {
    $retval$0 = -1;
    break;
   }
  }
  $shr = $boxSize >> 1;
  $sub = 0 - $shr | 0;
  $j$0 = 0;
  while (1) {
   $3 = HEAP32[$imageY10 >> 2] | 0;
   if (($j$0 | 0) < ($3 | 0)) $i$0 = 0; else break;
   while (1) {
    $4 = HEAP32[$imageX13 >> 2] | 0;
    if (($i$0 | 0) < ($4 | 0)) {
     $count$0 = 0;
     $kernel_j$0 = $sub;
     $val$0 = 0;
    } else break;
    while (1) {
     if (($kernel_j$0 | 0) > ($shr | 0)) break;
     $add = $kernel_j$0 + $j$0 | 0;
     L13 : do if (($add | 0) < 0) {
      $count$3 = $count$0;
      $val$3 = $val$0;
     } else if (($add | 0) < (HEAP32[$imageY10 >> 2] | 0)) {
      $mul36 = Math_imul($add, $4) | 0;
      $count$1 = $count$0;
      $kernel_i$0 = $sub;
      $val$1 = $val$0;
      while (1) {
       if (($kernel_i$0 | 0) > ($shr | 0)) {
        $count$3 = $count$1;
        $val$3 = $val$1;
        break L13;
       }
       $add28 = $kernel_i$0 + $i$0 | 0;
       if (($add28 | 0) > -1 & ($add28 | 0) < ($4 | 0)) {
        $count$2 = $count$1 + 1 | 0;
        $val$2 = (HEAPU8[(HEAP32[$ipi >> 2] | 0) + ($add28 + $mul36) >> 0] | 0) + $val$1 | 0;
       } else {
        $count$2 = $count$1;
        $val$2 = $val$1;
       }
       $count$1 = $count$2;
       $kernel_i$0 = $kernel_i$0 + 1 | 0;
       $val$1 = $val$2;
      }
     } else {
      $count$3 = $count$0;
      $val$3 = $val$0;
     } while (0);
     $count$0 = $count$3;
     $kernel_j$0 = $kernel_j$0 + 1 | 0;
     $val$0 = $val$3;
    }
    $arrayidx48 = (HEAP32[$image2 >> 2] | 0) + ((Math_imul($4, $j$0) | 0) + $i$0) | 0;
    HEAP8[$arrayidx48 >> 0] = ($val$0 | 0) / ($count$0 | 0) | 0;
    $i$0 = $i$0 + 1 | 0;
   }
   $j$0 = $j$0 + 1 | 0;
  }
  if (!$bias) $retval$0 = 0; else {
   $10 = $3;
   $i$1 = 0;
   while (1) {
    if (($i$1 | 0) >= (Math_imul($10, HEAP32[$imageX13 >> 2] | 0) | 0)) {
     $retval$0 = 0;
     break L1;
    }
    $arrayidx65 = (HEAP32[$image2 >> 2] | 0) + $i$1 | 0;
    HEAP8[$arrayidx65 >> 0] = (HEAPU8[$arrayidx65 >> 0] | 0) + $bias;
    $10 = HEAP32[$imageY10 >> 2] | 0;
    $i$1 = $i$1 + 1 | 0;
   }
  }
 } while (0);
 return $retval$0 | 0;
}

function __ZN10__cxxabiv112_GLOBAL__N_137parse_sizeof_function_param_pack_exprINS0_2DbEEEPKcS4_S4_RT_($first, $last, $db) {
 $first = $first | 0;
 $last = $last | 0;
 $db = $db | 0;
 var $4 = 0, $__end_$i = 0, $__i$0$i$i$i = 0, $__i$0$i$i$i18 = 0, $agg$tmp = 0, $arrayidx7 = 0, $call = 0, $ref$tmp = 0, $ref$tmp15 = 0, $ref$tmp16 = 0, $retval$1 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(64);
 $ref$tmp = sp + 40 | 0;
 $agg$tmp = sp + 12 | 0;
 $ref$tmp15 = sp + 24 | 0;
 $ref$tmp16 = sp;
 if (($last - $first | 0) > 2) if ((HEAP8[$first >> 0] | 0) == 115) if ((HEAP8[$first + 1 >> 0] | 0) == 90) {
  $arrayidx7 = $first + 2 | 0;
  if ((HEAP8[$arrayidx7 >> 0] | 0) == 102) {
   $call = __ZN10__cxxabiv112_GLOBAL__N_120parse_function_paramINS0_2DbEEEPKcS4_S4_RT_($arrayidx7, $last, $db) | 0;
   if (($call | 0) == ($arrayidx7 | 0)) $retval$1 = $first; else {
    $__end_$i = $db + 4 | 0;
    $4 = HEAP32[$__end_$i >> 2] | 0;
    if ((HEAP32[$db >> 2] | 0) == ($4 | 0)) $retval$1 = $first; else {
     __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($ref$tmp16, $4 + -24 | 0);
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKc($ref$tmp16, 0, 15098) | 0;
     HEAP32[$ref$tmp15 >> 2] = HEAP32[$ref$tmp16 >> 2];
     HEAP32[$ref$tmp15 + 4 >> 2] = HEAP32[$ref$tmp16 + 4 >> 2];
     HEAP32[$ref$tmp15 + 8 >> 2] = HEAP32[$ref$tmp16 + 8 >> 2];
     $__i$0$i$i$i = 0;
     while (1) {
      if (($__i$0$i$i$i | 0) == 3) break;
      HEAP32[$ref$tmp16 + ($__i$0$i$i$i << 2) >> 2] = 0;
      $__i$0$i$i$i = $__i$0$i$i$i + 1 | 0;
     }
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($ref$tmp15, 14885) | 0;
     HEAP32[$agg$tmp >> 2] = HEAP32[$ref$tmp15 >> 2];
     HEAP32[$agg$tmp + 4 >> 2] = HEAP32[$ref$tmp15 + 4 >> 2];
     HEAP32[$agg$tmp + 8 >> 2] = HEAP32[$ref$tmp15 + 8 >> 2];
     $__i$0$i$i$i18 = 0;
     while (1) {
      if (($__i$0$i$i$i18 | 0) == 3) break;
      HEAP32[$ref$tmp15 + ($__i$0$i$i$i18 << 2) >> 2] = 0;
      $__i$0$i$i$i18 = $__i$0$i$i$i18 + 1 | 0;
     }
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ENSt3__212basic_stringIcNS2_11char_traitsIcEENS0_12malloc_allocIcEEEE($ref$tmp, $agg$tmp);
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairaSEOS1_((HEAP32[$__end_$i >> 2] | 0) + -24 | 0, $ref$tmp);
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($ref$tmp);
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($agg$tmp);
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($ref$tmp15);
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($ref$tmp16);
     $retval$1 = $call;
    }
   }
  } else $retval$1 = $first;
 } else $retval$1 = $first; else $retval$1 = $first; else $retval$1 = $first;
 STACKTOP = sp;
 return $retval$1 | 0;
}

function __ZNSt3__212__hash_tableINS_17__hash_value_typeIi7ARParamEENS_22__unordered_map_hasherIiS3_NS_4hashIiEELb1EEENS_21__unordered_map_equalIiS3_NS_8equal_toIiEELb1EEENS_9allocatorIS3_EEE8__rehashEj($this, $__nbc) {
 $this = $this | 0;
 $__nbc = $__nbc | 0;
 var $0 = 0, $1 = 0, $17 = 0, $3 = 0, $5 = 0, $8 = 0, $__cp$0 = 0, $__first_$i$i = 0, $__i$0 = 0, $__np$0 = 0, $__phash$0$ph$ph = 0, $__pp$0$ph = 0, $__pp$0$ph$ph = 0, $__second_$i$i$i = 0, $__value_ = 0, $arrayidx$i49 = 0, $call$i$i$i = 0, $cond6$i = 0, $cond6$i62 = 0, $exception$i$i$i = 0, $sub$i53 = 0, $tobool$i55 = 0;
 $__second_$i$i$i = $this + 4 | 0;
 L1 : do if (!$__nbc) {
  $17 = HEAP32[$this >> 2] | 0;
  HEAP32[$this >> 2] = 0;
  if ($17 | 0) __ZdlPv($17);
  HEAP32[$__second_$i$i$i >> 2] = 0;
 } else {
  if ($__nbc >>> 0 > 1073741823) {
   $exception$i$i$i = ___cxa_allocate_exception(8) | 0;
   __ZNSt11logic_errorC2EPKc($exception$i$i$i, 7628);
   HEAP32[$exception$i$i$i >> 2] = 3176;
   ___cxa_throw($exception$i$i$i | 0, 272, 6);
  }
  $call$i$i$i = __Znwj($__nbc << 2) | 0;
  $0 = HEAP32[$this >> 2] | 0;
  HEAP32[$this >> 2] = $call$i$i$i;
  if ($0 | 0) __ZdlPv($0);
  HEAP32[$__second_$i$i$i >> 2] = $__nbc;
  $__i$0 = 0;
  while (1) {
   if (($__i$0 | 0) == ($__nbc | 0)) break;
   HEAP32[(HEAP32[$this >> 2] | 0) + ($__i$0 << 2) >> 2] = 0;
   $__i$0 = $__i$0 + 1 | 0;
  }
  $__first_$i$i = $this + 8 | 0;
  $1 = HEAP32[$__first_$i$i >> 2] | 0;
  if ($1 | 0) {
   $3 = HEAP32[$1 + 4 >> 2] | 0;
   $sub$i53 = $__nbc + -1 | 0;
   $tobool$i55 = ($sub$i53 & $__nbc | 0) == 0;
   if ($tobool$i55) $cond6$i62 = $3 & $sub$i53; else if ($3 >>> 0 < $__nbc >>> 0) $cond6$i62 = $3; else $cond6$i62 = ($3 >>> 0) % ($__nbc >>> 0) | 0;
   HEAP32[(HEAP32[$this >> 2] | 0) + ($cond6$i62 << 2) >> 2] = $__first_$i$i;
   $__phash$0$ph$ph = $cond6$i62;
   $__pp$0$ph$ph = $1;
   while (1) {
    $__pp$0$ph = $__pp$0$ph$ph;
    L25 : while (1) while (1) {
     $__cp$0 = HEAP32[$__pp$0$ph >> 2] | 0;
     if (!$__cp$0) break L1;
     $5 = HEAP32[$__cp$0 + 4 >> 2] | 0;
     if ($tobool$i55) $cond6$i = $5 & $sub$i53; else if ($5 >>> 0 < $__nbc >>> 0) $cond6$i = $5; else $cond6$i = ($5 >>> 0) % ($__nbc >>> 0) | 0;
     if (($cond6$i | 0) == ($__phash$0$ph$ph | 0)) {
      $__pp$0$ph = $__cp$0;
      continue L25;
     }
     $arrayidx$i49 = (HEAP32[$this >> 2] | 0) + ($cond6$i << 2) | 0;
     if (!(HEAP32[$arrayidx$i49 >> 2] | 0)) break L25;
     $__value_ = $__cp$0 + 8 | 0;
     $__np$0 = $__cp$0;
     while (1) {
      $8 = HEAP32[$__np$0 >> 2] | 0;
      if (!$8) break;
      if ((HEAP32[$__value_ >> 2] | 0) == (HEAP32[$8 + 8 >> 2] | 0)) $__np$0 = $8; else break;
     }
     HEAP32[$__pp$0$ph >> 2] = $8;
     HEAP32[$__np$0 >> 2] = HEAP32[HEAP32[(HEAP32[$this >> 2] | 0) + ($cond6$i << 2) >> 2] >> 2];
     HEAP32[HEAP32[(HEAP32[$this >> 2] | 0) + ($cond6$i << 2) >> 2] >> 2] = $__cp$0;
    }
    HEAP32[$arrayidx$i49 >> 2] = $__pp$0$ph;
    $__phash$0$ph$ph = $cond6$i;
    $__pp$0$ph$ph = $__cp$0;
   }
  }
 } while (0);
 return;
}

function _arPattCreateHandle2($pattSize, $patternCountMax) {
 $pattSize = $pattSize | 0;
 $patternCountMax = $patternCountMax | 0;
 var $add = 0, $call = 0, $call14 = 0, $call20 = 0, $call26 = 0, $call32 = 0, $call44 = 0, $call53 = 0, $call8 = 0, $i$0 = 0, $j$0 = 0, $mul13 = 0, $mul25 = 0, $mul41 = 0, $mul43 = 0, $mul46 = 0, $mul52 = 0, $pattBW = 0, $retval$0 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer11 = 0, $vararg_buffer13 = 0, $vararg_buffer3 = 0, $vararg_buffer5 = 0, $vararg_buffer7 = 0, $vararg_buffer9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(64);
 $vararg_buffer13 = sp + 56 | 0;
 $vararg_buffer11 = sp + 48 | 0;
 $vararg_buffer9 = sp + 40 | 0;
 $vararg_buffer7 = sp + 32 | 0;
 $vararg_buffer5 = sp + 24 | 0;
 $vararg_buffer3 = sp + 16 | 0;
 $vararg_buffer1 = sp + 8 | 0;
 $vararg_buffer = sp;
 L1 : do if (($pattSize + -16 | 0) >>> 0 > 48 | ($patternCountMax | 0) < 1) $retval$0 = 0; else {
  $call = _malloc(32) | 0;
  if (!$call) {
   _arLog(3, 4823, $vararg_buffer);
   _exit(1);
  }
  HEAP32[$call >> 2] = 0;
  HEAP32[$call + 4 >> 2] = $patternCountMax;
  HEAP32[$call + 28 >> 2] = $pattSize;
  $call8 = _malloc($patternCountMax << 2) | 0;
  HEAP32[$call + 8 >> 2] = $call8;
  if (!$call8) {
   _arLog(3, 4823, $vararg_buffer1);
   _exit(1);
  }
  $mul13 = $patternCountMax << 4;
  $call14 = _malloc($mul13) | 0;
  HEAP32[$call + 12 >> 2] = $call14;
  if (!$call14) {
   _arLog(3, 4823, $vararg_buffer3);
   _exit(1);
  }
  $call20 = _malloc($mul13) | 0;
  $pattBW = $call + 20 | 0;
  HEAP32[$pattBW >> 2] = $call20;
  if (!$call20) {
   _arLog(3, 4823, $vararg_buffer5);
   _exit(1);
  }
  $mul25 = $patternCountMax << 5;
  $call26 = _malloc($mul25) | 0;
  HEAP32[$call + 16 >> 2] = $call26;
  if (!$call26) {
   _arLog(3, 4823, $vararg_buffer7);
   _exit(1);
  }
  $call32 = _malloc($mul25) | 0;
  HEAP32[$call + 24 >> 2] = $call32;
  if (!$call32) {
   _arLog(3, 4823, $vararg_buffer9);
   _exit(1);
  }
  $mul41 = Math_imul($pattSize, $pattSize) | 0;
  $mul43 = $mul41 * 12 | 0;
  $mul52 = $mul41 << 2;
  $i$0 = 0;
  L21 : while (1) {
   if (($i$0 | 0) >= ($patternCountMax | 0)) {
    $retval$0 = $call;
    break L1;
   }
   HEAP32[$call8 + ($i$0 << 2) >> 2] = 0;
   $mul46 = $i$0 << 2;
   $j$0 = 0;
   while (1) {
    if (($j$0 | 0) >= 4) break;
    $call44 = _malloc($mul43) | 0;
    $add = $j$0 + $mul46 | 0;
    HEAP32[$call14 + ($add << 2) >> 2] = $call44;
    if (!$call44) {
     label = 19;
     break L21;
    }
    $call53 = _malloc($mul52) | 0;
    HEAP32[(HEAP32[$pattBW >> 2] | 0) + ($add << 2) >> 2] = $call53;
    if (!$call53) {
     label = 21;
     break L21;
    } else $j$0 = $j$0 + 1 | 0;
   }
   $i$0 = $i$0 + 1 | 0;
  }
  if ((label | 0) == 19) {
   _arLog(3, 4823, $vararg_buffer11);
   _exit(1);
  } else if ((label | 0) == 21) {
   _arLog(3, 4823, $vararg_buffer13);
   _exit(1);
  }
 } while (0);
 STACKTOP = sp;
 return $retval$0 | 0;
}

function _memchr($src, $c, $n) {
 $src = $src | 0;
 $c = $c | 0;
 $n = $n | 0;
 var $1 = 0, $5 = 0, $conv1 = 0, $dec = 0, $incdec$ptr = 0, $incdec$ptr21 = 0, $incdec$ptr33 = 0, $mul = 0, $n$addr$0$lcssa = 0, $n$addr$0$lcssa52 = 0, $n$addr$043 = 0, $n$addr$1$lcssa = 0, $n$addr$133 = 0, $n$addr$227 = 0, $n$addr$3 = 0, $s$0$lcssa = 0, $s$0$lcssa53 = 0, $s$044 = 0, $s$128 = 0, $s$2 = 0, $sub22 = 0, $tobool2 = 0, $tobool2$lcssa = 0, $tobool241 = 0, $w$0$lcssa = 0, $w$034 = 0, $xor = 0, label = 0;
 $conv1 = $c & 255;
 $tobool241 = ($n | 0) != 0;
 L1 : do if ($tobool241 & ($src & 3 | 0) != 0) {
  $1 = $c & 255;
  $n$addr$043 = $n;
  $s$044 = $src;
  while (1) {
   if ((HEAP8[$s$044 >> 0] | 0) == $1 << 24 >> 24) {
    $n$addr$0$lcssa52 = $n$addr$043;
    $s$0$lcssa53 = $s$044;
    label = 6;
    break L1;
   }
   $incdec$ptr = $s$044 + 1 | 0;
   $dec = $n$addr$043 + -1 | 0;
   $tobool2 = ($dec | 0) != 0;
   if ($tobool2 & ($incdec$ptr & 3 | 0) != 0) {
    $n$addr$043 = $dec;
    $s$044 = $incdec$ptr;
   } else {
    $n$addr$0$lcssa = $dec;
    $s$0$lcssa = $incdec$ptr;
    $tobool2$lcssa = $tobool2;
    label = 5;
    break;
   }
  }
 } else {
  $n$addr$0$lcssa = $n;
  $s$0$lcssa = $src;
  $tobool2$lcssa = $tobool241;
  label = 5;
 } while (0);
 if ((label | 0) == 5) if ($tobool2$lcssa) {
  $n$addr$0$lcssa52 = $n$addr$0$lcssa;
  $s$0$lcssa53 = $s$0$lcssa;
  label = 6;
 } else {
  $n$addr$3 = 0;
  $s$2 = $s$0$lcssa;
 }
 L8 : do if ((label | 0) == 6) {
  $5 = $c & 255;
  if ((HEAP8[$s$0$lcssa53 >> 0] | 0) == $5 << 24 >> 24) {
   $n$addr$3 = $n$addr$0$lcssa52;
   $s$2 = $s$0$lcssa53;
  } else {
   $mul = Math_imul($conv1, 16843009) | 0;
   L11 : do if ($n$addr$0$lcssa52 >>> 0 > 3) {
    $n$addr$133 = $n$addr$0$lcssa52;
    $w$034 = $s$0$lcssa53;
    while (1) {
     $xor = HEAP32[$w$034 >> 2] ^ $mul;
     if (($xor & -2139062144 ^ -2139062144) & $xor + -16843009 | 0) break;
     $incdec$ptr21 = $w$034 + 4 | 0;
     $sub22 = $n$addr$133 + -4 | 0;
     if ($sub22 >>> 0 > 3) {
      $n$addr$133 = $sub22;
      $w$034 = $incdec$ptr21;
     } else {
      $n$addr$1$lcssa = $sub22;
      $w$0$lcssa = $incdec$ptr21;
      label = 11;
      break L11;
     }
    }
    $n$addr$227 = $n$addr$133;
    $s$128 = $w$034;
   } else {
    $n$addr$1$lcssa = $n$addr$0$lcssa52;
    $w$0$lcssa = $s$0$lcssa53;
    label = 11;
   } while (0);
   if ((label | 0) == 11) if (!$n$addr$1$lcssa) {
    $n$addr$3 = 0;
    $s$2 = $w$0$lcssa;
    break;
   } else {
    $n$addr$227 = $n$addr$1$lcssa;
    $s$128 = $w$0$lcssa;
   }
   while (1) {
    if ((HEAP8[$s$128 >> 0] | 0) == $5 << 24 >> 24) {
     $n$addr$3 = $n$addr$227;
     $s$2 = $s$128;
     break L8;
    }
    $incdec$ptr33 = $s$128 + 1 | 0;
    $n$addr$227 = $n$addr$227 + -1 | 0;
    if (!$n$addr$227) {
     $n$addr$3 = 0;
     $s$2 = $incdec$ptr33;
     break;
    } else $s$128 = $incdec$ptr33;
   }
  }
 } while (0);
 return ($n$addr$3 | 0 ? $s$2 : 0) | 0;
}

function _getMarkerInfo($id, $markerIndex) {
 $id = $id | 0;
 $markerIndex = $markerIndex | 0;
 var $1 = 0, $_ZL11gMarkerInfo$arrayidx = 0, $arhandle = 0, $id$addr = 0, $retval$1 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $id$addr = sp;
 HEAP32[$id$addr >> 2] = $id;
 do if (!(__ZNSt3__212__hash_tableINS_17__hash_value_typeIi12arControllerEENS_22__unordered_map_hasherIiS3_NS_4hashIiEELb1EEENS_21__unordered_map_equalIiS3_NS_8equal_toIiEELb1EEENS_9allocatorIS3_EEE4findIiEENS_15__hash_iteratorIPNS_11__hash_nodeIS3_PvEEEERKT_(17144, $id$addr) | 0)) $retval$1 = HEAP32[421] | 0; else {
  $arhandle = (__ZNSt3__213unordered_mapIi12arControllerNS_4hashIiEENS_8equal_toIiEENS_9allocatorINS_4pairIKiS1_EEEEEixERS8_(17144, $id$addr) | 0) + 212 | 0;
  $1 = HEAP32[$arhandle >> 2] | 0;
  if ((HEAP32[$1 + 44 >> 2] | 0) > ($markerIndex | 0)) {
   $_ZL11gMarkerInfo$arrayidx = ($markerIndex | 0) < 0 ? 16768 : $1 + 48 + ($markerIndex << 8) | 0;
   _emscripten_asm_const_iiiiiiiidddddddddddddddddddddddddi(2, HEAP32[$_ZL11gMarkerInfo$arrayidx >> 2] | 0, HEAP32[$_ZL11gMarkerInfo$arrayidx + 4 >> 2] | 0, HEAP32[$_ZL11gMarkerInfo$arrayidx + 8 >> 2] | 0, HEAP32[$_ZL11gMarkerInfo$arrayidx + 12 >> 2] | 0, HEAP32[$_ZL11gMarkerInfo$arrayidx + 16 >> 2] | 0, HEAP32[$_ZL11gMarkerInfo$arrayidx + 20 >> 2] | 0, HEAP32[$_ZL11gMarkerInfo$arrayidx + 24 >> 2] | 0, +(+HEAPF64[$_ZL11gMarkerInfo$arrayidx + 32 >> 3]), +(+HEAPF64[$_ZL11gMarkerInfo$arrayidx + 40 >> 3]), +(+HEAPF64[$_ZL11gMarkerInfo$arrayidx + 48 >> 3]), +(+HEAPF64[$_ZL11gMarkerInfo$arrayidx + 56 >> 3]), +(+HEAPF64[$_ZL11gMarkerInfo$arrayidx + 64 >> 3]), +(+HEAPF64[$_ZL11gMarkerInfo$arrayidx + 72 >> 3]), +(+HEAPF64[$_ZL11gMarkerInfo$arrayidx + 80 >> 3]), +(+HEAPF64[$_ZL11gMarkerInfo$arrayidx + 88 >> 3]), +(+HEAPF64[$_ZL11gMarkerInfo$arrayidx + 96 >> 3]), +(+HEAPF64[$_ZL11gMarkerInfo$arrayidx + 104 >> 3]), +(+HEAPF64[$_ZL11gMarkerInfo$arrayidx + 112 >> 3]), +(+HEAPF64[$_ZL11gMarkerInfo$arrayidx + 120 >> 3]), +(+HEAPF64[$_ZL11gMarkerInfo$arrayidx + 128 >> 3]), +(+HEAPF64[$_ZL11gMarkerInfo$arrayidx + 136 >> 3]), +(+HEAPF64[$_ZL11gMarkerInfo$arrayidx + 144 >> 3]), +(+HEAPF64[$_ZL11gMarkerInfo$arrayidx + 152 >> 3]), +(+HEAPF64[$_ZL11gMarkerInfo$arrayidx + 160 >> 3]), +(+HEAPF64[$_ZL11gMarkerInfo$arrayidx + 168 >> 3]), +(+HEAPF64[$_ZL11gMarkerInfo$arrayidx + 176 >> 3]), +(+HEAPF64[$_ZL11gMarkerInfo$arrayidx + 184 >> 3]), +(+HEAPF64[$_ZL11gMarkerInfo$arrayidx + 192 >> 3]), +(+HEAPF64[$_ZL11gMarkerInfo$arrayidx + 200 >> 3]), +(+HEAPF64[$_ZL11gMarkerInfo$arrayidx + 208 >> 3]), +(+HEAPF64[$_ZL11gMarkerInfo$arrayidx + 216 >> 3]), +(+HEAPF64[$_ZL11gMarkerInfo$arrayidx + 224 >> 3]), HEAP32[$_ZL11gMarkerInfo$arrayidx + 240 >> 2] | 0) | 0;
   $retval$1 = 0;
   break;
  } else {
   $retval$1 = HEAP32[423] | 0;
   break;
  }
 } while (0);
 STACKTOP = sp;
 return $retval$1 | 0;
}

function __ZN10__cxxabiv112_GLOBAL__N_122parse_sizeof_expr_exprINS0_2DbEEEPKcS4_S4_RT_($first, $last, $db) {
 $first = $first | 0;
 $last = $last | 0;
 $db = $db | 0;
 var $3 = 0, $__end_$i = 0, $__i$0$i$i$i = 0, $__i$0$i$i$i17 = 0, $add$ptr = 0, $agg$tmp = 0, $call = 0, $ref$tmp = 0, $ref$tmp11 = 0, $ref$tmp12 = 0, $retval$1 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(64);
 $ref$tmp = sp + 40 | 0;
 $agg$tmp = sp + 12 | 0;
 $ref$tmp11 = sp + 24 | 0;
 $ref$tmp12 = sp;
 if (($last - $first | 0) > 2) if ((HEAP8[$first >> 0] | 0) == 115) if ((HEAP8[$first + 1 >> 0] | 0) == 122) {
  $add$ptr = $first + 2 | 0;
  $call = __ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($add$ptr, $last, $db) | 0;
  if (($call | 0) == ($add$ptr | 0)) $retval$1 = $first; else {
   $__end_$i = $db + 4 | 0;
   $3 = HEAP32[$__end_$i >> 2] | 0;
   if ((HEAP32[$db >> 2] | 0) == ($3 | 0)) $retval$1 = $first; else {
    __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($ref$tmp12, $3 + -24 | 0);
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKc($ref$tmp12, 0, 15112) | 0;
    HEAP32[$ref$tmp11 >> 2] = HEAP32[$ref$tmp12 >> 2];
    HEAP32[$ref$tmp11 + 4 >> 2] = HEAP32[$ref$tmp12 + 4 >> 2];
    HEAP32[$ref$tmp11 + 8 >> 2] = HEAP32[$ref$tmp12 + 8 >> 2];
    $__i$0$i$i$i = 0;
    while (1) {
     if (($__i$0$i$i$i | 0) == 3) break;
     HEAP32[$ref$tmp12 + ($__i$0$i$i$i << 2) >> 2] = 0;
     $__i$0$i$i$i = $__i$0$i$i$i + 1 | 0;
    }
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($ref$tmp11, 14885) | 0;
    HEAP32[$agg$tmp >> 2] = HEAP32[$ref$tmp11 >> 2];
    HEAP32[$agg$tmp + 4 >> 2] = HEAP32[$ref$tmp11 + 4 >> 2];
    HEAP32[$agg$tmp + 8 >> 2] = HEAP32[$ref$tmp11 + 8 >> 2];
    $__i$0$i$i$i17 = 0;
    while (1) {
     if (($__i$0$i$i$i17 | 0) == 3) break;
     HEAP32[$ref$tmp11 + ($__i$0$i$i$i17 << 2) >> 2] = 0;
     $__i$0$i$i$i17 = $__i$0$i$i$i17 + 1 | 0;
    }
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ENSt3__212basic_stringIcNS2_11char_traitsIcEENS0_12malloc_allocIcEEEE($ref$tmp, $agg$tmp);
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairaSEOS1_((HEAP32[$__end_$i >> 2] | 0) + -24 | 0, $ref$tmp);
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($ref$tmp);
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($agg$tmp);
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($ref$tmp11);
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($ref$tmp12);
    $retval$1 = $call;
   }
  }
 } else $retval$1 = $first; else $retval$1 = $first; else $retval$1 = $first;
 STACKTOP = sp;
 return $retval$1 | 0;
}

function __ZN10__cxxabiv112_GLOBAL__N_122parse_sizeof_type_exprINS0_2DbEEEPKcS4_S4_RT_($first, $last, $db) {
 $first = $first | 0;
 $last = $last | 0;
 $db = $db | 0;
 var $3 = 0, $__end_$i = 0, $__i$0$i$i$i = 0, $__i$0$i$i$i17 = 0, $add$ptr = 0, $agg$tmp = 0, $call = 0, $ref$tmp = 0, $ref$tmp11 = 0, $ref$tmp12 = 0, $retval$1 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(64);
 $ref$tmp = sp + 40 | 0;
 $agg$tmp = sp + 12 | 0;
 $ref$tmp11 = sp + 24 | 0;
 $ref$tmp12 = sp;
 if (($last - $first | 0) > 2) if ((HEAP8[$first >> 0] | 0) == 115) if ((HEAP8[$first + 1 >> 0] | 0) == 116) {
  $add$ptr = $first + 2 | 0;
  $call = __ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($add$ptr, $last, $db) | 0;
  if (($call | 0) == ($add$ptr | 0)) $retval$1 = $first; else {
   $__end_$i = $db + 4 | 0;
   $3 = HEAP32[$__end_$i >> 2] | 0;
   if ((HEAP32[$db >> 2] | 0) == ($3 | 0)) $retval$1 = $first; else {
    __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($ref$tmp12, $3 + -24 | 0);
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKc($ref$tmp12, 0, 15112) | 0;
    HEAP32[$ref$tmp11 >> 2] = HEAP32[$ref$tmp12 >> 2];
    HEAP32[$ref$tmp11 + 4 >> 2] = HEAP32[$ref$tmp12 + 4 >> 2];
    HEAP32[$ref$tmp11 + 8 >> 2] = HEAP32[$ref$tmp12 + 8 >> 2];
    $__i$0$i$i$i = 0;
    while (1) {
     if (($__i$0$i$i$i | 0) == 3) break;
     HEAP32[$ref$tmp12 + ($__i$0$i$i$i << 2) >> 2] = 0;
     $__i$0$i$i$i = $__i$0$i$i$i + 1 | 0;
    }
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($ref$tmp11, 14885) | 0;
    HEAP32[$agg$tmp >> 2] = HEAP32[$ref$tmp11 >> 2];
    HEAP32[$agg$tmp + 4 >> 2] = HEAP32[$ref$tmp11 + 4 >> 2];
    HEAP32[$agg$tmp + 8 >> 2] = HEAP32[$ref$tmp11 + 8 >> 2];
    $__i$0$i$i$i17 = 0;
    while (1) {
     if (($__i$0$i$i$i17 | 0) == 3) break;
     HEAP32[$ref$tmp11 + ($__i$0$i$i$i17 << 2) >> 2] = 0;
     $__i$0$i$i$i17 = $__i$0$i$i$i17 + 1 | 0;
    }
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ENSt3__212basic_stringIcNS2_11char_traitsIcEENS0_12malloc_allocIcEEEE($ref$tmp, $agg$tmp);
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairaSEOS1_((HEAP32[$__end_$i >> 2] | 0) + -24 | 0, $ref$tmp);
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($ref$tmp);
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($agg$tmp);
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($ref$tmp11);
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($ref$tmp12);
    $retval$1 = $call;
   }
  }
 } else $retval$1 = $first; else $retval$1 = $first; else $retval$1 = $first;
 STACKTOP = sp;
 return $retval$1 | 0;
}

function _pop_arg($arg, $type, $ap) {
 $arg = $arg | 0;
 $type = $type | 0;
 $ap = $ap | 0;
 var $102 = 0, $103 = 0.0, $109 = 0, $110 = 0.0, $12 = 0, $13 = 0, $16 = 0, $25 = 0, $26 = 0, $27 = 0, $36 = 0, $37 = 0, $39 = 0, $42 = 0, $43 = 0, $5 = 0, $52 = 0, $53 = 0, $54 = 0, $57 = 0, $6 = 0, $66 = 0, $67 = 0, $68 = 0, $77 = 0, $78 = 0, $79 = 0, $82 = 0, $91 = 0, $92 = 0, $93 = 0;
 L1 : do if ($type >>> 0 <= 20) do switch ($type | 0) {
 case 9:
  {
   $5 = (HEAP32[$ap >> 2] | 0) + (4 - 1) & ~(4 - 1);
   $6 = HEAP32[$5 >> 2] | 0;
   HEAP32[$ap >> 2] = $5 + 4;
   HEAP32[$arg >> 2] = $6;
   break L1;
   break;
  }
 case 10:
  {
   $12 = (HEAP32[$ap >> 2] | 0) + (4 - 1) & ~(4 - 1);
   $13 = HEAP32[$12 >> 2] | 0;
   HEAP32[$ap >> 2] = $12 + 4;
   $16 = $arg;
   HEAP32[$16 >> 2] = $13;
   HEAP32[$16 + 4 >> 2] = (($13 | 0) < 0) << 31 >> 31;
   break L1;
   break;
  }
 case 11:
  {
   $25 = (HEAP32[$ap >> 2] | 0) + (4 - 1) & ~(4 - 1);
   $26 = HEAP32[$25 >> 2] | 0;
   HEAP32[$ap >> 2] = $25 + 4;
   $27 = $arg;
   HEAP32[$27 >> 2] = $26;
   HEAP32[$27 + 4 >> 2] = 0;
   break L1;
   break;
  }
 case 12:
  {
   $36 = (HEAP32[$ap >> 2] | 0) + (8 - 1) & ~(8 - 1);
   $37 = $36;
   $39 = HEAP32[$37 >> 2] | 0;
   $42 = HEAP32[$37 + 4 >> 2] | 0;
   HEAP32[$ap >> 2] = $36 + 8;
   $43 = $arg;
   HEAP32[$43 >> 2] = $39;
   HEAP32[$43 + 4 >> 2] = $42;
   break L1;
   break;
  }
 case 13:
  {
   $52 = (HEAP32[$ap >> 2] | 0) + (4 - 1) & ~(4 - 1);
   $53 = HEAP32[$52 >> 2] | 0;
   HEAP32[$ap >> 2] = $52 + 4;
   $54 = ($53 & 65535) << 16 >> 16;
   $57 = $arg;
   HEAP32[$57 >> 2] = $54;
   HEAP32[$57 + 4 >> 2] = (($54 | 0) < 0) << 31 >> 31;
   break L1;
   break;
  }
 case 14:
  {
   $66 = (HEAP32[$ap >> 2] | 0) + (4 - 1) & ~(4 - 1);
   $67 = HEAP32[$66 >> 2] | 0;
   HEAP32[$ap >> 2] = $66 + 4;
   $68 = $arg;
   HEAP32[$68 >> 2] = $67 & 65535;
   HEAP32[$68 + 4 >> 2] = 0;
   break L1;
   break;
  }
 case 15:
  {
   $77 = (HEAP32[$ap >> 2] | 0) + (4 - 1) & ~(4 - 1);
   $78 = HEAP32[$77 >> 2] | 0;
   HEAP32[$ap >> 2] = $77 + 4;
   $79 = ($78 & 255) << 24 >> 24;
   $82 = $arg;
   HEAP32[$82 >> 2] = $79;
   HEAP32[$82 + 4 >> 2] = (($79 | 0) < 0) << 31 >> 31;
   break L1;
   break;
  }
 case 16:
  {
   $91 = (HEAP32[$ap >> 2] | 0) + (4 - 1) & ~(4 - 1);
   $92 = HEAP32[$91 >> 2] | 0;
   HEAP32[$ap >> 2] = $91 + 4;
   $93 = $arg;
   HEAP32[$93 >> 2] = $92 & 255;
   HEAP32[$93 + 4 >> 2] = 0;
   break L1;
   break;
  }
 case 17:
  {
   $102 = (HEAP32[$ap >> 2] | 0) + (8 - 1) & ~(8 - 1);
   $103 = +HEAPF64[$102 >> 3];
   HEAP32[$ap >> 2] = $102 + 8;
   HEAPF64[$arg >> 3] = $103;
   break L1;
   break;
  }
 case 18:
  {
   $109 = (HEAP32[$ap >> 2] | 0) + (8 - 1) & ~(8 - 1);
   $110 = +HEAPF64[$109 >> 3];
   HEAP32[$ap >> 2] = $109 + 8;
   HEAPF64[$arg >> 3] = $110;
   break L1;
   break;
  }
 default:
  break L1;
 } while (0); while (0);
 return;
}

function ___dynamic_cast($static_ptr, $static_type, $dst_type, $src2dst_offset) {
 $static_ptr = $static_ptr | 0;
 $static_type = $static_type | 0;
 $dst_type = $dst_type | 0;
 $src2dst_offset = $src2dst_offset | 0;
 var $0 = 0, $2 = 0, $add$ptr = 0, $dst_ptr$0 = 0, $dst_ptr_leading_to_static_ptr = 0, $dst_ptr_not_leading_to_static_ptr = 0, $info = 0, $number_to_dst_ptr = 0, $path_dst_ptr_to_static_ptr = 0, $path_dynamic_ptr_to_dst_ptr = 0, $path_dynamic_ptr_to_static_ptr = 0, dest = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(64);
 $info = sp;
 $0 = HEAP32[$static_ptr >> 2] | 0;
 $add$ptr = $static_ptr + (HEAP32[$0 + -8 >> 2] | 0) | 0;
 $2 = HEAP32[$0 + -4 >> 2] | 0;
 HEAP32[$info >> 2] = $dst_type;
 HEAP32[$info + 4 >> 2] = $static_ptr;
 HEAP32[$info + 8 >> 2] = $static_type;
 HEAP32[$info + 12 >> 2] = $src2dst_offset;
 $dst_ptr_leading_to_static_ptr = $info + 16 | 0;
 $dst_ptr_not_leading_to_static_ptr = $info + 20 | 0;
 $path_dst_ptr_to_static_ptr = $info + 24 | 0;
 $path_dynamic_ptr_to_static_ptr = $info + 28 | 0;
 $path_dynamic_ptr_to_dst_ptr = $info + 32 | 0;
 $number_to_dst_ptr = $info + 40 | 0;
 dest = $dst_ptr_leading_to_static_ptr;
 stop = dest + 36 | 0;
 do {
  HEAP32[dest >> 2] = 0;
  dest = dest + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP16[$dst_ptr_leading_to_static_ptr + 36 >> 1] = 0;
 HEAP8[$dst_ptr_leading_to_static_ptr + 38 >> 0] = 0;
 L1 : do if (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($2, $dst_type, 0) | 0) {
  HEAP32[$info + 48 >> 2] = 1;
  FUNCTION_TABLE_viiiiii[HEAP32[(HEAP32[$2 >> 2] | 0) + 20 >> 2] & 3]($2, $info, $add$ptr, $add$ptr, 1, 0);
  $dst_ptr$0 = (HEAP32[$path_dst_ptr_to_static_ptr >> 2] | 0) == 1 ? $add$ptr : 0;
 } else {
  FUNCTION_TABLE_viiiii[HEAP32[(HEAP32[$2 >> 2] | 0) + 24 >> 2] & 3]($2, $info, $add$ptr, 1, 0);
  switch (HEAP32[$info + 36 >> 2] | 0) {
  case 0:
   {
    $dst_ptr$0 = (HEAP32[$number_to_dst_ptr >> 2] | 0) == 1 & (HEAP32[$path_dynamic_ptr_to_static_ptr >> 2] | 0) == 1 & (HEAP32[$path_dynamic_ptr_to_dst_ptr >> 2] | 0) == 1 ? HEAP32[$dst_ptr_not_leading_to_static_ptr >> 2] | 0 : 0;
    break L1;
    break;
   }
  case 1:
   break;
  default:
   {
    $dst_ptr$0 = 0;
    break L1;
   }
  }
  if ((HEAP32[$path_dst_ptr_to_static_ptr >> 2] | 0) != 1) if (!((HEAP32[$number_to_dst_ptr >> 2] | 0) == 0 & (HEAP32[$path_dynamic_ptr_to_static_ptr >> 2] | 0) == 1 & (HEAP32[$path_dynamic_ptr_to_dst_ptr >> 2] | 0) == 1)) {
   $dst_ptr$0 = 0;
   break;
  }
  $dst_ptr$0 = HEAP32[$dst_ptr_leading_to_static_ptr >> 2] | 0;
 } while (0);
 STACKTOP = sp;
 return $dst_ptr$0 | 0;
}

function _get_cpara($world, $vertex, $para) {
 $world = $world | 0;
 $vertex = $vertex | 0;
 $para = $para | 0;
 var $1 = 0, $18 = 0, $20 = 0, $arrayidx3 = 0, $arrayidx30 = 0, $arrayidx6 = 0, $arrayidx78 = 0, $call = 0, $call1 = 0, $call2 = 0, $i$0 = 0, $i$1 = 0, $mul = 0, $mul112 = 0, $mul97 = 0;
 $call = _arMatrixAlloc(8, 8) | 0;
 $call1 = _arMatrixAlloc(8, 1) | 0;
 $call2 = _arMatrixAlloc(8, 1) | 0;
 $i$0 = 0;
 while (1) {
  if (($i$0 | 0) == 4) break;
  $arrayidx3 = $world + ($i$0 << 4) | 0;
  $1 = HEAP32[$call >> 2] | 0;
  $mul = $i$0 << 4;
  HEAPF64[$1 + ($mul << 3) >> 3] = +HEAPF64[$arrayidx3 >> 3];
  $arrayidx6 = $world + ($i$0 << 4) + 8 | 0;
  HEAPF64[$1 + (($mul | 1) << 3) >> 3] = +HEAPF64[$arrayidx6 >> 3];
  HEAPF64[$1 + (($mul | 2) << 3) >> 3] = 1.0;
  HEAPF64[$1 + (($mul | 3) << 3) >> 3] = 0.0;
  HEAPF64[$1 + (($mul | 4) << 3) >> 3] = 0.0;
  HEAPF64[$1 + (($mul | 5) << 3) >> 3] = 0.0;
  $arrayidx30 = $vertex + ($i$0 << 4) | 0;
  HEAPF64[$1 + (($mul | 6) << 3) >> 3] = -(+HEAPF64[$arrayidx3 >> 3] * +HEAPF64[$arrayidx30 >> 3]);
  HEAPF64[$1 + (($mul | 7) << 3) >> 3] = -(+HEAPF64[$arrayidx6 >> 3] * +HEAPF64[$arrayidx30 >> 3]);
  HEAPF64[$1 + (($mul | 8) << 3) >> 3] = 0.0;
  HEAPF64[$1 + (($mul | 9) << 3) >> 3] = 0.0;
  HEAPF64[$1 + (($mul | 10) << 3) >> 3] = 0.0;
  HEAPF64[$1 + (($mul | 11) << 3) >> 3] = +HEAPF64[$arrayidx3 >> 3];
  HEAPF64[$1 + (($mul | 12) << 3) >> 3] = +HEAPF64[$arrayidx6 >> 3];
  HEAPF64[$1 + (($mul | 13) << 3) >> 3] = 1.0;
  $arrayidx78 = $vertex + ($i$0 << 4) + 8 | 0;
  HEAPF64[$1 + (($mul | 14) << 3) >> 3] = -(+HEAPF64[$arrayidx3 >> 3] * +HEAPF64[$arrayidx78 >> 3]);
  HEAPF64[$1 + (($mul | 15) << 3) >> 3] = -(+HEAPF64[$arrayidx6 >> 3] * +HEAPF64[$arrayidx78 >> 3]);
  $18 = HEAP32[$call1 >> 2] | 0;
  $mul97 = $i$0 << 1;
  HEAPF64[$18 + ($mul97 << 3) >> 3] = +HEAPF64[$arrayidx30 >> 3];
  HEAPF64[$18 + (($mul97 | 1) << 3) >> 3] = +HEAPF64[$arrayidx78 >> 3];
  $i$0 = $i$0 + 1 | 0;
 }
 _arMatrixSelfInv($call) | 0;
 _arMatrixMul($call2, $call, $call1) | 0;
 $20 = HEAP32[$call2 >> 2] | 0;
 $i$1 = 0;
 while (1) {
  if (($i$1 | 0) == 2) break;
  $mul112 = $i$1 * 3 | 0;
  HEAPF64[$para + ($i$1 * 24 | 0) >> 3] = +HEAPF64[$20 + ($mul112 << 3) >> 3];
  HEAPF64[$para + ($i$1 * 24 | 0) + 8 >> 3] = +HEAPF64[$20 + ($mul112 + 1 << 3) >> 3];
  HEAPF64[$para + ($i$1 * 24 | 0) + 16 >> 3] = +HEAPF64[$20 + ($mul112 + 2 << 3) >> 3];
  $i$1 = $i$1 + 1 | 0;
 }
 HEAPF64[$para + 48 >> 3] = +HEAPF64[$20 + 48 >> 3];
 HEAPF64[$para + 56 >> 3] = +HEAPF64[$20 + 56 >> 3];
 HEAPF64[$para + 64 >> 3] = 1.0;
 _arMatrixFree($call) | 0;
 _arMatrixFree($call1) | 0;
 _arMatrixFree($call2) | 0;
 return;
}

function _fgets($s, $n, $f) {
 $s = $s | 0;
 $n = $n | 0;
 $f = $f | 0;
 var $2 = 0, $add$ptr = 0, $add$ptr35 = 0, $call12 = 0, $call49 = 0, $cond = 0, $cond26 = 0, $cond32 = 0, $cond5150 = 0, $conv = 0, $dec = 0, $incdec$ptr64 = 0, $mode = 0, $n$addr$0 = 0, $p$0 = 0, $p$1 = 0, $rend = 0, $retval$0 = 0, $rpos = 0, $s$addr$052 = 0, $sub$ptr$rhs$cast = 0, $sub$ptr$sub = 0, $sub36 = 0, $tobool13 = 0, $tobool6 = 0, label = 0;
 if ((HEAP32[$f + 76 >> 2] | 0) > -1) $cond = ___lockfile($f) | 0; else $cond = 0;
 $dec = $n + -1 | 0;
 $tobool6 = ($dec | 0) != 0;
 if (($n | 0) < 2) {
  $mode = $f + 74 | 0;
  $conv = HEAP8[$mode >> 0] | 0;
  HEAP8[$mode >> 0] = $conv + 255 | $conv;
  if ($cond | 0) ___unlockfile($f);
  if ($tobool6) $retval$0 = 0; else {
   HEAP8[$s >> 0] = 0;
   $retval$0 = $s;
  }
 } else {
  L11 : do if ($tobool6) {
   $rpos = $f + 4 | 0;
   $rend = $f + 8 | 0;
   $n$addr$0 = $dec;
   $p$0 = $s;
   while (1) {
    $2 = HEAP32[$rpos >> 2] | 0;
    $sub$ptr$rhs$cast = $2;
    $sub$ptr$sub = (HEAP32[$rend >> 2] | 0) - $sub$ptr$rhs$cast | 0;
    $call12 = _memchr($2, 10, $sub$ptr$sub) | 0;
    $tobool13 = ($call12 | 0) == 0;
    $cond26 = $tobool13 ? $sub$ptr$sub : 1 - $sub$ptr$rhs$cast + $call12 | 0;
    $cond32 = $cond26 >>> 0 < $n$addr$0 >>> 0 ? $cond26 : $n$addr$0;
    _memcpy($p$0 | 0, $2 | 0, $cond32 | 0) | 0;
    $add$ptr = (HEAP32[$rpos >> 2] | 0) + $cond32 | 0;
    HEAP32[$rpos >> 2] = $add$ptr;
    $add$ptr35 = $p$0 + $cond32 | 0;
    $sub36 = $n$addr$0 - $cond32 | 0;
    if (!($tobool13 & ($sub36 | 0) != 0)) {
     $p$1 = $add$ptr35;
     label = 17;
     break L11;
    }
    if ($add$ptr >>> 0 < (HEAP32[$rend >> 2] | 0) >>> 0) {
     HEAP32[$rpos >> 2] = $add$ptr + 1;
     $cond5150 = HEAPU8[$add$ptr >> 0] | 0;
    } else {
     $call49 = ___uflow($f) | 0;
     if (($call49 | 0) < 0) break; else $cond5150 = $call49;
    }
    $n$addr$0 = $sub36 + -1 | 0;
    $incdec$ptr64 = $add$ptr35 + 1 | 0;
    HEAP8[$add$ptr35 >> 0] = $cond5150;
    if (!(($n$addr$0 | 0) != 0 & ($cond5150 & 255 | 0) != 10)) {
     $p$1 = $incdec$ptr64;
     label = 17;
     break L11;
    } else $p$0 = $incdec$ptr64;
   }
   if (($add$ptr35 | 0) == ($s | 0)) $s$addr$052 = 0; else if (!(HEAP32[$f >> 2] & 16)) $s$addr$052 = 0; else {
    $p$1 = $add$ptr35;
    label = 17;
   }
  } else {
   $p$1 = $s;
   label = 17;
  } while (0);
  if ((label | 0) == 17) if (!$s) $s$addr$052 = 0; else {
   HEAP8[$p$1 >> 0] = 0;
   $s$addr$052 = $s;
  }
  if (!$cond) $retval$0 = $s$addr$052; else {
   ___unlockfile($f);
   $retval$0 = $s$addr$052;
  }
 }
 return $retval$0 | 0;
}

function ___stdio_write($f, $buf, $len) {
 $f = $f | 0;
 $buf = $buf | 0;
 $len = $len | 0;
 var $0 = 0, $4 = 0, $8 = 0, $add = 0, $call741 = 0, $call746 = 0, $cmp24 = 0, $cnt$0 = 0, $fd = 0, $iov$043 = 0, $iov$1 = 0, $iov_len36 = 0, $iovcnt$045 = 0, $iovcnt$1 = 0, $iovs = 0, $rem$044 = 0, $retval$0 = 0, $sub$ptr$sub = 0, $vararg_buffer = 0, $vararg_buffer3 = 0, $wbase = 0, $wpos = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48);
 $vararg_buffer3 = sp + 16 | 0;
 $vararg_buffer = sp;
 $iovs = sp + 32 | 0;
 $wbase = $f + 28 | 0;
 $0 = HEAP32[$wbase >> 2] | 0;
 HEAP32[$iovs >> 2] = $0;
 $wpos = $f + 20 | 0;
 $sub$ptr$sub = (HEAP32[$wpos >> 2] | 0) - $0 | 0;
 HEAP32[$iovs + 4 >> 2] = $sub$ptr$sub;
 HEAP32[$iovs + 8 >> 2] = $buf;
 HEAP32[$iovs + 12 >> 2] = $len;
 $add = $sub$ptr$sub + $len | 0;
 $fd = $f + 60 | 0;
 HEAP32[$vararg_buffer >> 2] = HEAP32[$fd >> 2];
 HEAP32[$vararg_buffer + 4 >> 2] = $iovs;
 HEAP32[$vararg_buffer + 8 >> 2] = 2;
 $call741 = ___syscall_ret(___syscall146(146, $vararg_buffer | 0) | 0) | 0;
 L1 : do if (($add | 0) == ($call741 | 0)) label = 3; else {
  $call746 = $call741;
  $iov$043 = $iovs;
  $iovcnt$045 = 2;
  $rem$044 = $add;
  while (1) {
   if (($call746 | 0) < 0) break;
   $rem$044 = $rem$044 - $call746 | 0;
   $8 = HEAP32[$iov$043 + 4 >> 2] | 0;
   $cmp24 = $call746 >>> 0 > $8 >>> 0;
   $iov$1 = $cmp24 ? $iov$043 + 8 | 0 : $iov$043;
   $iovcnt$1 = ($cmp24 << 31 >> 31) + $iovcnt$045 | 0;
   $cnt$0 = $call746 - ($cmp24 ? $8 : 0) | 0;
   HEAP32[$iov$1 >> 2] = (HEAP32[$iov$1 >> 2] | 0) + $cnt$0;
   $iov_len36 = $iov$1 + 4 | 0;
   HEAP32[$iov_len36 >> 2] = (HEAP32[$iov_len36 >> 2] | 0) - $cnt$0;
   HEAP32[$vararg_buffer3 >> 2] = HEAP32[$fd >> 2];
   HEAP32[$vararg_buffer3 + 4 >> 2] = $iov$1;
   HEAP32[$vararg_buffer3 + 8 >> 2] = $iovcnt$1;
   $call746 = ___syscall_ret(___syscall146(146, $vararg_buffer3 | 0) | 0) | 0;
   if (($rem$044 | 0) == ($call746 | 0)) {
    label = 3;
    break L1;
   } else {
    $iov$043 = $iov$1;
    $iovcnt$045 = $iovcnt$1;
   }
  }
  HEAP32[$f + 16 >> 2] = 0;
  HEAP32[$wbase >> 2] = 0;
  HEAP32[$wpos >> 2] = 0;
  HEAP32[$f >> 2] = HEAP32[$f >> 2] | 32;
  if (($iovcnt$045 | 0) == 2) $retval$0 = 0; else $retval$0 = $len - (HEAP32[$iov$043 + 4 >> 2] | 0) | 0;
 } while (0);
 if ((label | 0) == 3) {
  $4 = HEAP32[$f + 44 >> 2] | 0;
  HEAP32[$f + 16 >> 2] = $4 + (HEAP32[$f + 48 >> 2] | 0);
  HEAP32[$wbase >> 2] = $4;
  HEAP32[$wpos >> 2] = $4;
  $retval$0 = $len;
 }
 STACKTOP = sp;
 return $retval$0 | 0;
}

function _PCA($input, $output, $ev) {
 $input = $input | 0;
 $output = $output | 0;
 $ev = $ev | 0;
 var $0 = 0, $1 = 0, $call = 0, $cmp26 = 0, $cond = 0, $i$0 = 0, $i$1 = 0, $j$0 = 0, $j$1 = 0, $m1$0 = 0, $m1$1 = 0, $m2$0 = 0, $m2$1 = 0, $m2$2 = 0, $m2$3 = 0, $retval$0 = 0;
 $0 = HEAP32[$input + 4 >> 2] | 0;
 $1 = HEAP32[$input + 8 >> 2] | 0;
 $cond = ($1 | 0) < ($0 | 0) ? $1 : $0;
 L1 : do if (($0 | 0) < 2 | ($1 | 0) < 2) $retval$0 = -1; else if ((HEAP32[$output + 8 >> 2] | 0) == ($1 | 0)) if ((HEAP32[$output + 4 >> 2] | 0) == ($cond | 0)) if ((HEAP32[$ev + 4 >> 2] | 0) == ($cond | 0)) {
  $call = _arMatrixAlloc($cond, $cond) | 0;
  if ((HEAP32[$call + 4 >> 2] | 0) == ($cond | 0)) if ((HEAP32[$call + 8 >> 2] | 0) == ($cond | 0)) {
   $cmp26 = ($0 | 0) < ($1 | 0);
   if ($cmp26) {
    if ((_x_by_xt($input, $call) | 0) < 0) {
     _arMatrixFree($call) | 0;
     $retval$0 = -1;
     break;
    }
   } else if ((_xt_by_x($input, $call) | 0) < 0) {
    _arMatrixFree($call) | 0;
    $retval$0 = -1;
    break;
   }
   if ((_QRM($call, $ev) | 0) < 0) {
    _arMatrixFree($call) | 0;
    $retval$0 = -1;
    break;
   }
   L18 : do if ($cmp26) {
    if ((_EV_create($input, $call, $output, $ev) | 0) < 0) {
     _arMatrixFree($call) | 0;
     $retval$0 = -1;
     break L1;
    }
   } else {
    $i$0 = 0;
    $m1$0 = HEAP32[$call >> 2] | 0;
    $m2$0 = HEAP32[$output >> 2] | 0;
    while (1) {
     if (($i$0 | 0) >= ($cond | 0)) {
      $i$1 = $i$0;
      $m2$2 = $m2$0;
      break;
     }
     if (+HEAPF64[(HEAP32[$ev >> 2] | 0) + ($i$0 << 3) >> 3] < 1.0e-16) {
      $i$1 = $i$0;
      $m2$2 = $m2$0;
      break;
     } else {
      $j$0 = 0;
      $m1$1 = $m1$0;
      $m2$1 = $m2$0;
     }
     while (1) {
      if (($j$0 | 0) >= ($cond | 0)) break;
      HEAPF64[$m2$1 >> 3] = +HEAPF64[$m1$1 >> 3];
      $j$0 = $j$0 + 1 | 0;
      $m1$1 = $m1$1 + 8 | 0;
      $m2$1 = $m2$1 + 8 | 0;
     }
     $i$0 = $i$0 + 1 | 0;
     $m1$0 = $m1$1;
     $m2$0 = $m2$1;
    }
    while (1) {
     if (($i$1 | 0) >= ($cond | 0)) break L18;
     HEAPF64[(HEAP32[$ev >> 2] | 0) + ($i$1 << 3) >> 3] = 0.0;
     $j$1 = 0;
     $m2$3 = $m2$2;
     while (1) {
      if (($j$1 | 0) >= ($cond | 0)) break;
      HEAPF64[$m2$3 >> 3] = 0.0;
      $j$1 = $j$1 + 1 | 0;
      $m2$3 = $m2$3 + 8 | 0;
     }
     $i$1 = $i$1 + 1 | 0;
     $m2$2 = $m2$3;
    }
   } while (0);
   _arMatrixFree($call) | 0;
   $retval$0 = 0;
   break;
  }
  _arMatrixFree($call) | 0;
  $retval$0 = -1;
 } else $retval$0 = -1; else $retval$0 = -1; else $retval$0 = -1; while (0);
 return $retval$0 | 0;
}

function _mbrtowc($wc, $src, $n, $st) {
 $wc = $wc | 0;
 $src = $src | 0;
 $n = $n | 0;
 $st = $st | 0;
 var $$st = 0, $0 = 0, $1 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $c$036 = 0, $c$1 = 0, $c$2 = 0, $call71 = 0, $dec = 0, $dummy = 0, $dummy$wc = 0, $locale = 0, $n$addr$035 = 0, $n$addr$1 = 0, $retval$0 = 0, $s$037 = 0, $s$1 = 0, $shr32 = 0, $sub = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $dummy = sp;
 $$st = ($st | 0) == 0 ? 17752 : $st;
 $0 = HEAP32[$$st >> 2] | 0;
 L1 : do if (!$src) if (!$0) $retval$0 = 0; else label = 17; else {
  $dummy$wc = ($wc | 0) == 0 ? $dummy : $wc;
  if (!$n) $retval$0 = -2; else {
   if (!$0) {
    $1 = HEAP8[$src >> 0] | 0;
    if ($1 << 24 >> 24 > -1) {
     HEAP32[$dummy$wc >> 2] = $1 & 255;
     $retval$0 = $1 << 24 >> 24 != 0 & 1;
     break;
    }
    $locale = (___pthread_self_422() | 0) + 188 | 0;
    $4 = HEAP8[$src >> 0] | 0;
    if (!(HEAP32[HEAP32[$locale >> 2] >> 2] | 0)) {
     HEAP32[$dummy$wc >> 2] = $4 << 24 >> 24 & 57343;
     $retval$0 = 1;
     break;
    }
    $sub = ($4 & 255) + -194 | 0;
    if ($sub >>> 0 > 50) {
     label = 17;
     break;
    }
    $5 = HEAP32[1808 + ($sub << 2) >> 2] | 0;
    $dec = $n + -1 | 0;
    if (!$dec) $c$2 = $5; else {
     $c$036 = $5;
     $n$addr$035 = $dec;
     $s$037 = $src + 1 | 0;
     label = 11;
    }
   } else {
    $c$036 = $0;
    $n$addr$035 = $n;
    $s$037 = $src;
    label = 11;
   }
   L14 : do if ((label | 0) == 11) {
    $6 = HEAP8[$s$037 >> 0] | 0;
    $shr32 = ($6 & 255) >>> 3;
    if (($shr32 + -16 | $shr32 + ($c$036 >> 26)) >>> 0 > 7) {
     label = 17;
     break L1;
    } else {
     $7 = $6;
     $c$1 = $c$036;
     $n$addr$1 = $n$addr$035;
     $s$1 = $s$037;
    }
    while (1) {
     $s$1 = $s$1 + 1 | 0;
     $c$1 = ($7 & 255) + -128 | $c$1 << 6;
     $n$addr$1 = $n$addr$1 + -1 | 0;
     if (($c$1 | 0) >= 0) break;
     if (!$n$addr$1) {
      $c$2 = $c$1;
      break L14;
     }
     $7 = HEAP8[$s$1 >> 0] | 0;
     if (($7 & -64) << 24 >> 24 != -128) {
      label = 17;
      break L1;
     }
    }
    HEAP32[$$st >> 2] = 0;
    HEAP32[$dummy$wc >> 2] = $c$1;
    $retval$0 = $n - $n$addr$1 | 0;
    break L1;
   } while (0);
   HEAP32[$$st >> 2] = $c$2;
   $retval$0 = -2;
  }
 } while (0);
 if ((label | 0) == 17) {
  HEAP32[$$st >> 2] = 0;
  $call71 = ___errno_location() | 0;
  HEAP32[$call71 >> 2] = 84;
  $retval$0 = -1;
 }
 STACKTOP = sp;
 return $retval$0 | 0;
}

function __ZN10__cxxabiv112_GLOBAL__N_119parse_dot_star_exprINS0_2DbEEEPKcS4_S4_RT_($first, $last, $db) {
 $first = $first | 0;
 $last = $last | 0;
 $db = $db | 0;
 var $2 = 0, $5 = 0, $6 = 0, $8 = 0, $__end_$i = 0, $add$ptr = 0, $add$ptr$i24 = 0, $call = 0, $call9 = 0, $expr = 0, $incdec$ptr$i$i$i = 0, $ref$tmp = 0, $retval$3 = 0, $tobool$i$i$i$i$i = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 $expr = sp + 12 | 0;
 $ref$tmp = sp;
 if (($last - $first | 0) > 2) if ((HEAP8[$first >> 0] | 0) == 100) if ((HEAP8[$first + 1 >> 0] | 0) == 115) {
  $add$ptr = $first + 2 | 0;
  $call = __ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($add$ptr, $last, $db) | 0;
  if (($call | 0) == ($add$ptr | 0)) $retval$3 = $first; else {
   $call9 = __ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($call, $last, $db) | 0;
   if (($call9 | 0) == ($call | 0)) $retval$3 = $first; else {
    $__end_$i = $db + 4 | 0;
    $2 = HEAP32[$__end_$i >> 2] | 0;
    if ((($2 - (HEAP32[$db >> 2] | 0) | 0) / 24 | 0) >>> 0 < 2) $retval$3 = $first; else {
     __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($expr, $2 + -24 | 0);
     $5 = HEAP32[$__end_$i >> 2] | 0;
     $add$ptr$i24 = $5 + -24 | 0;
     $6 = $5;
     while (1) {
      if (($6 | 0) == ($add$ptr$i24 | 0)) break;
      $incdec$ptr$i$i$i = $6 + -24 | 0;
      HEAP32[$__end_$i >> 2] = $incdec$ptr$i$i$i;
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($incdec$ptr$i$i$i);
      $6 = HEAP32[$__end_$i >> 2] | 0;
     }
     __ZNSt3__2plIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEENS_12basic_stringIT_T0_T1_EEPKS8_RKSB_($ref$tmp, 15178, $expr);
     $8 = HEAP8[$ref$tmp + 11 >> 0] | 0;
     $tobool$i$i$i$i$i = $8 << 24 >> 24 < 0;
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj((HEAP32[$__end_$i >> 2] | 0) + -24 | 0, $tobool$i$i$i$i$i ? HEAP32[$ref$tmp >> 2] | 0 : $ref$tmp, $tobool$i$i$i$i$i ? HEAP32[$ref$tmp + 4 >> 2] | 0 : $8 & 255) | 0;
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($ref$tmp);
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($expr);
     $retval$3 = $call9;
    }
   }
  }
 } else $retval$3 = $first; else $retval$3 = $first; else $retval$3 = $first;
 STACKTOP = sp;
 return $retval$3 | 0;
}

function __ZN10__cxxabiv112_GLOBAL__N_114parse_dot_exprINS0_2DbEEEPKcS4_S4_RT_($first, $last, $db) {
 $first = $first | 0;
 $last = $last | 0;
 $db = $db | 0;
 var $2 = 0, $5 = 0, $6 = 0, $8 = 0, $__end_$i = 0, $add$ptr = 0, $add$ptr$i24 = 0, $call = 0, $call9 = 0, $incdec$ptr$i$i$i = 0, $name = 0, $ref$tmp = 0, $retval$3 = 0, $tobool$i$i$i$i$i = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 $name = sp + 12 | 0;
 $ref$tmp = sp;
 if (($last - $first | 0) > 2) if ((HEAP8[$first >> 0] | 0) == 100) if ((HEAP8[$first + 1 >> 0] | 0) == 116) {
  $add$ptr = $first + 2 | 0;
  $call = __ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($add$ptr, $last, $db) | 0;
  if (($call | 0) == ($add$ptr | 0)) $retval$3 = $first; else {
   $call9 = __ZN10__cxxabiv112_GLOBAL__N_121parse_unresolved_nameINS0_2DbEEEPKcS4_S4_RT_($call, $last, $db) | 0;
   if (($call9 | 0) == ($call | 0)) $retval$3 = $first; else {
    $__end_$i = $db + 4 | 0;
    $2 = HEAP32[$__end_$i >> 2] | 0;
    if ((($2 - (HEAP32[$db >> 2] | 0) | 0) / 24 | 0) >>> 0 < 2) $retval$3 = $first; else {
     __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($name, $2 + -24 | 0);
     $5 = HEAP32[$__end_$i >> 2] | 0;
     $add$ptr$i24 = $5 + -24 | 0;
     $6 = $5;
     while (1) {
      if (($6 | 0) == ($add$ptr$i24 | 0)) break;
      $incdec$ptr$i$i$i = $6 + -24 | 0;
      HEAP32[$__end_$i >> 2] = $incdec$ptr$i$i$i;
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($incdec$ptr$i$i$i);
      $6 = HEAP32[$__end_$i >> 2] | 0;
     }
     __ZNSt3__2plIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEENS_12basic_stringIT_T0_T1_EEPKS8_RKSB_($ref$tmp, 15176, $name);
     $8 = HEAP8[$ref$tmp + 11 >> 0] | 0;
     $tobool$i$i$i$i$i = $8 << 24 >> 24 < 0;
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj((HEAP32[$__end_$i >> 2] | 0) + -24 | 0, $tobool$i$i$i$i$i ? HEAP32[$ref$tmp >> 2] | 0 : $ref$tmp, $tobool$i$i$i$i$i ? HEAP32[$ref$tmp + 4 >> 2] | 0 : $8 & 255) | 0;
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($ref$tmp);
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($name);
     $retval$3 = $call9;
    }
   }
  }
 } else $retval$3 = $first; else $retval$3 = $first; else $retval$3 = $first;
 STACKTOP = sp;
 return $retval$3 | 0;
}

function __ZNSt3__212__hash_tableINS_17__hash_value_typeIi12arControllerEENS_22__unordered_map_hasherIiS3_NS_4hashIiEELb1EEENS_21__unordered_map_equalIiS3_NS_8equal_toIiEELb1EEENS_9allocatorIS3_EEE6removeENS_21__hash_const_iteratorIPNS_11__hash_nodeIS3_PvEEEE($agg$result, $this, $__p) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $__p = $__p | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $13 = 0, $2 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__first_$i$i$i = 0, $__p1_ = 0, $__pn$0 = 0, $arrayidx$i54 = 0, $cond6$i = 0, $cond6$i38 = 0, $cond6$i50 = 0, $cond6$i64 = 0, $sub$i55 = 0, $tobool$i57 = 0, label = 0;
 $0 = HEAP32[$__p >> 2] | 0;
 $1 = HEAP32[$this + 4 >> 2] | 0;
 $2 = HEAP32[$0 + 4 >> 2] | 0;
 $sub$i55 = $1 + -1 | 0;
 $tobool$i57 = ($sub$i55 & $1 | 0) == 0;
 if ($tobool$i57) $cond6$i64 = $sub$i55 & $2; else if ($2 >>> 0 < $1 >>> 0) $cond6$i64 = $2; else $cond6$i64 = ($2 >>> 0) % ($1 >>> 0) | 0;
 $arrayidx$i54 = (HEAP32[$this >> 2] | 0) + ($cond6$i64 << 2) | 0;
 $__pn$0 = HEAP32[$arrayidx$i54 >> 2] | 0;
 while (1) {
  $5 = HEAP32[$__pn$0 >> 2] | 0;
  if (($5 | 0) == ($0 | 0)) break; else $__pn$0 = $5;
 }
 $__p1_ = $this + 8 | 0;
 if (($__pn$0 | 0) == ($__p1_ | 0)) label = 13; else {
  $6 = HEAP32[$__pn$0 + 4 >> 2] | 0;
  if ($tobool$i57) $cond6$i50 = $6 & $sub$i55; else if ($6 >>> 0 < $1 >>> 0) $cond6$i50 = $6; else $cond6$i50 = ($6 >>> 0) % ($1 >>> 0) | 0;
  if (($cond6$i50 | 0) != ($cond6$i64 | 0)) label = 13;
 }
 do if ((label | 0) == 13) {
  $7 = HEAP32[$0 >> 2] | 0;
  if ($7 | 0) {
   $8 = HEAP32[$7 + 4 >> 2] | 0;
   if ($tobool$i57) $cond6$i38 = $8 & $sub$i55; else if ($8 >>> 0 < $1 >>> 0) $cond6$i38 = $8; else $cond6$i38 = ($8 >>> 0) % ($1 >>> 0) | 0;
   if (($cond6$i38 | 0) == ($cond6$i64 | 0)) break;
  }
  HEAP32[$arrayidx$i54 >> 2] = 0;
 } while (0);
 $9 = HEAP32[$0 >> 2] | 0;
 $10 = $9;
 if (!$9) $13 = $10; else {
  $11 = HEAP32[$9 + 4 >> 2] | 0;
  if ($tobool$i57) $cond6$i = $11 & $sub$i55; else if ($11 >>> 0 < $1 >>> 0) $cond6$i = $11; else $cond6$i = ($11 >>> 0) % ($1 >>> 0) | 0;
  if (($cond6$i | 0) == ($cond6$i64 | 0)) $13 = $10; else {
   HEAP32[(HEAP32[$this >> 2] | 0) + ($cond6$i << 2) >> 2] = $__pn$0;
   $13 = HEAP32[$0 >> 2] | 0;
  }
 }
 HEAP32[$__pn$0 >> 2] = $13;
 HEAP32[$0 >> 2] = 0;
 $__first_$i$i$i = $this + 12 | 0;
 HEAP32[$__first_$i$i$i >> 2] = (HEAP32[$__first_$i$i$i >> 2] | 0) + -1;
 HEAP32[$agg$result >> 2] = $0;
 HEAP32[$agg$result + 4 >> 2] = $__p1_;
 HEAP8[$agg$result + 8 >> 0] = 1;
 return;
}

function ___fdopen($fd, $mode) {
 $fd = $fd | 0;
 $mode = $mode | 0;
 var $0 = 0, $1 = 0, $3 = 0, $4 = 0, $call1 = 0, $call2 = 0, $call22 = 0, $or28 = 0, $retval$0 = 0, $vararg_buffer = 0, $vararg_buffer12 = 0, $vararg_buffer3 = 0, $vararg_buffer7 = 0, $wsz = 0, dest = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(64);
 $vararg_buffer12 = sp + 40 | 0;
 $vararg_buffer7 = sp + 24 | 0;
 $vararg_buffer3 = sp + 16 | 0;
 $vararg_buffer = sp;
 $wsz = sp + 56 | 0;
 $0 = HEAP8[$mode >> 0] | 0;
 if (!(_memchr(14226, $0 << 24 >> 24, 4) | 0)) {
  $call1 = ___errno_location() | 0;
  HEAP32[$call1 >> 2] = 22;
  $retval$0 = 0;
 } else {
  $call2 = _malloc(1156) | 0;
  if (!$call2) $retval$0 = 0; else {
   dest = $call2;
   stop = dest + 124 | 0;
   do {
    HEAP32[dest >> 2] = 0;
    dest = dest + 4 | 0;
   } while ((dest | 0) < (stop | 0));
   if (!(_strchr($mode, 43) | 0)) HEAP32[$call2 >> 2] = $0 << 24 >> 24 == 114 ? 8 : 4;
   if (!(_strchr($mode, 101) | 0)) $1 = $0; else {
    HEAP32[$vararg_buffer >> 2] = $fd;
    HEAP32[$vararg_buffer + 4 >> 2] = 2;
    HEAP32[$vararg_buffer + 8 >> 2] = 1;
    ___syscall221(221, $vararg_buffer | 0) | 0;
    $1 = HEAP8[$mode >> 0] | 0;
   }
   if ($1 << 24 >> 24 == 97) {
    HEAP32[$vararg_buffer3 >> 2] = $fd;
    HEAP32[$vararg_buffer3 + 4 >> 2] = 3;
    $call22 = ___syscall221(221, $vararg_buffer3 | 0) | 0;
    if (!($call22 & 1024)) {
     HEAP32[$vararg_buffer7 >> 2] = $fd;
     HEAP32[$vararg_buffer7 + 4 >> 2] = 4;
     HEAP32[$vararg_buffer7 + 8 >> 2] = $call22 | 1024;
     ___syscall221(221, $vararg_buffer7 | 0) | 0;
    }
    $or28 = HEAP32[$call2 >> 2] | 128;
    HEAP32[$call2 >> 2] = $or28;
    $4 = $or28;
   } else $4 = HEAP32[$call2 >> 2] | 0;
   HEAP32[$call2 + 60 >> 2] = $fd;
   HEAP32[$call2 + 44 >> 2] = $call2 + 132;
   HEAP32[$call2 + 48 >> 2] = 1024;
   $3 = $call2 + 75 | 0;
   HEAP8[$3 >> 0] = -1;
   if (!($4 & 8)) {
    HEAP32[$vararg_buffer12 >> 2] = $fd;
    HEAP32[$vararg_buffer12 + 4 >> 2] = 21523;
    HEAP32[$vararg_buffer12 + 8 >> 2] = $wsz;
    if (!(___syscall54(54, $vararg_buffer12 | 0) | 0)) HEAP8[$3 >> 0] = 10;
   }
   HEAP32[$call2 + 32 >> 2] = 14;
   HEAP32[$call2 + 36 >> 2] = 1;
   HEAP32[$call2 + 40 >> 2] = 2;
   HEAP32[$call2 + 12 >> 2] = 1;
   if (!(HEAP32[4423] | 0)) HEAP32[$call2 + 76 >> 2] = -1;
   ___ofl_add($call2) | 0;
   $retval$0 = $call2;
  }
 }
 STACKTOP = sp;
 return $retval$0 | 0;
}

function _arGetTransMatSquare($handle, $marker_info, $width, $conv) {
 $handle = $handle | 0;
 $marker_info = $marker_info | 0;
 $width = +$width;
 $conv = $conv | 0;
 var $0 = 0, $cmp98 = 0, $data = 0, $div = 0.0, $div55 = 0.0, $err = 0, $initMatXw2Xc = 0, $rem = 0, $rem12 = 0, $rem26 = 0, $rem40 = 0, $retval$0 = 0.0, $screenCoord = 0, $worldCoord = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 288 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(288);
 $screenCoord = sp + 200 | 0;
 $worldCoord = sp + 104 | 0;
 $data = sp + 264 | 0;
 $initMatXw2Xc = sp + 8 | 0;
 $err = sp;
 $0 = HEAP32[$marker_info + 16 >> 2] | 0;
 $rem = (4 - $0 | 0) % 4 | 0;
 HEAPF64[$screenCoord >> 3] = +HEAPF64[$marker_info + 168 + ($rem << 4) >> 3];
 HEAPF64[$screenCoord + 8 >> 3] = +HEAPF64[$marker_info + 168 + ($rem << 4) + 8 >> 3];
 $rem12 = (5 - $0 | 0) % 4 | 0;
 HEAPF64[$screenCoord + 16 >> 3] = +HEAPF64[$marker_info + 168 + ($rem12 << 4) >> 3];
 HEAPF64[$screenCoord + 24 >> 3] = +HEAPF64[$marker_info + 168 + ($rem12 << 4) + 8 >> 3];
 $rem26 = (6 - $0 | 0) % 4 | 0;
 HEAPF64[$screenCoord + 32 >> 3] = +HEAPF64[$marker_info + 168 + ($rem26 << 4) >> 3];
 HEAPF64[$screenCoord + 40 >> 3] = +HEAPF64[$marker_info + 168 + ($rem26 << 4) + 8 >> 3];
 $rem40 = (7 - $0 | 0) % 4 | 0;
 HEAPF64[$screenCoord + 48 >> 3] = +HEAPF64[$marker_info + 168 + ($rem40 << 4) >> 3];
 HEAPF64[$screenCoord + 56 >> 3] = +HEAPF64[$marker_info + 168 + ($rem40 << 4) + 8 >> 3];
 $div = $width * -.5;
 HEAPF64[$worldCoord >> 3] = $div;
 $div55 = $width * .5;
 HEAPF64[$worldCoord + 8 >> 3] = $div55;
 HEAPF64[$worldCoord + 16 >> 3] = 0.0;
 HEAPF64[$worldCoord + 24 >> 3] = $div55;
 HEAPF64[$worldCoord + 32 >> 3] = $div55;
 HEAPF64[$worldCoord + 40 >> 3] = 0.0;
 HEAPF64[$worldCoord + 48 >> 3] = $div55;
 HEAPF64[$worldCoord + 56 >> 3] = $div;
 HEAPF64[$worldCoord + 64 >> 3] = 0.0;
 HEAPF64[$worldCoord + 72 >> 3] = $div;
 HEAPF64[$worldCoord + 80 >> 3] = $div;
 HEAPF64[$worldCoord + 88 >> 3] = 0.0;
 HEAP32[$data >> 2] = $screenCoord;
 HEAP32[$data + 4 >> 2] = $worldCoord;
 HEAP32[$data + 8 >> 2] = 4;
 if ((_icpGetInitXw2Xc_from_PlanarData(HEAP32[$handle >> 2] | 0, $screenCoord, $worldCoord, 4, $initMatXw2Xc) | 0) < 0) $retval$0 = 1.0e8; else {
  $cmp98 = (_icpPoint(HEAP32[$handle >> 2] | 0, $data, $initMatXw2Xc, $conv, $err) | 0) < 0;
  $retval$0 = $cmp98 ? 1.0e8 : +HEAPF64[$err >> 3];
 }
 STACKTOP = sp;
 return +$retval$0;
}

function __ZN53EmscriptenBindingInitializer_native_and_builtin_typesC2Ev($this) {
 $this = $this | 0;
 __embind_register_void(__ZN10emscripten8internal6TypeIDIvE3getEv() | 0, 16324);
 __embind_register_bool(__ZN10emscripten8internal6TypeIDIbE3getEv() | 0, 16329, 1, 1, 0);
 __ZN12_GLOBAL__N_1L16register_integerIcEEvPKc();
 __ZN12_GLOBAL__N_1L16register_integerIaEEvPKc();
 __ZN12_GLOBAL__N_1L16register_integerIhEEvPKc();
 __ZN12_GLOBAL__N_1L16register_integerIsEEvPKc();
 __ZN12_GLOBAL__N_1L16register_integerItEEvPKc();
 __ZN12_GLOBAL__N_1L16register_integerIiEEvPKc();
 __ZN12_GLOBAL__N_1L16register_integerIjEEvPKc();
 __ZN12_GLOBAL__N_1L16register_integerIlEEvPKc();
 __ZN12_GLOBAL__N_1L16register_integerImEEvPKc();
 __ZN12_GLOBAL__N_1L14register_floatIfEEvPKc();
 __ZN12_GLOBAL__N_1L14register_floatIdEEvPKc();
 __embind_register_std_string(__ZN10emscripten8internal6TypeIDINSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEE3getEv() | 0, 15707);
 __embind_register_std_string(__ZN10emscripten8internal6TypeIDINSt3__212basic_stringIhNS2_11char_traitsIhEENS2_9allocatorIhEEEEE3getEv() | 0, 10336);
 __embind_register_std_wstring(__ZN10emscripten8internal6TypeIDINSt3__212basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEEE3getEv() | 0, 4, 10369);
 __embind_register_emval(__ZN10emscripten8internal6TypeIDINS_3valEE3getEv() | 0, 10382);
 __ZN12_GLOBAL__N_1L20register_memory_viewIcEEvPKc();
 __ZN12_GLOBAL__N_1L20register_memory_viewIaEEvPKc(10398);
 __ZN12_GLOBAL__N_1L20register_memory_viewIhEEvPKc(10435);
 __ZN12_GLOBAL__N_1L20register_memory_viewIsEEvPKc(10474);
 __ZN12_GLOBAL__N_1L20register_memory_viewItEEvPKc(10505);
 __ZN12_GLOBAL__N_1L20register_memory_viewIiEEvPKc(10545);
 __ZN12_GLOBAL__N_1L20register_memory_viewIjEEvPKc(10574);
 __ZN12_GLOBAL__N_1L20register_memory_viewIlEEvPKc();
 __ZN12_GLOBAL__N_1L20register_memory_viewImEEvPKc();
 __ZN12_GLOBAL__N_1L20register_memory_viewIaEEvPKc(10612);
 __ZN12_GLOBAL__N_1L20register_memory_viewIhEEvPKc(10644);
 __ZN12_GLOBAL__N_1L20register_memory_viewIsEEvPKc(10677);
 __ZN12_GLOBAL__N_1L20register_memory_viewItEEvPKc(10710);
 __ZN12_GLOBAL__N_1L20register_memory_viewIiEEvPKc(10744);
 __ZN12_GLOBAL__N_1L20register_memory_viewIjEEvPKc(10777);
 __ZN12_GLOBAL__N_1L20register_memory_viewIfEEvPKc();
 __ZN12_GLOBAL__N_1L20register_memory_viewIdEEvPKc();
 __ZN12_GLOBAL__N_1L20register_memory_viewIeEEvPKc();
 return;
}

function ___stpcpy($d, $s) {
 $d = $d | 0;
 $s = $s | 0;
 var $0 = 0, $10 = 0, $4 = 0, $6 = 0, $7 = 0, $9 = 0, $d$addr$0$lcssa = 0, $d$addr$037 = 0, $d$addr$1$ph = 0, $d$addr$124 = 0, $incdec$ptr = 0, $incdec$ptr11 = 0, $incdec$ptr12 = 0, $incdec$ptr20 = 0, $incdec$ptr5 = 0, $retval$0 = 0, $s$addr$0$lcssa = 0, $s$addr$038 = 0, $s$addr$1$ph = 0, $s$addr$125 = 0, $wd$0$lcssa = 0, $wd$031 = 0, $ws$0$lcssa = 0, $ws$032 = 0, label = 0;
 $0 = $s;
 L1 : do if (!(($0 ^ $d) & 3)) {
  if (!($0 & 3)) {
   $d$addr$0$lcssa = $d;
   $s$addr$0$lcssa = $s;
  } else {
   $d$addr$037 = $d;
   $s$addr$038 = $s;
   while (1) {
    $4 = HEAP8[$s$addr$038 >> 0] | 0;
    HEAP8[$d$addr$037 >> 0] = $4;
    if (!($4 << 24 >> 24)) {
     $retval$0 = $d$addr$037;
     break L1;
    }
    $incdec$ptr = $s$addr$038 + 1 | 0;
    $incdec$ptr5 = $d$addr$037 + 1 | 0;
    if (!($incdec$ptr & 3)) {
     $d$addr$0$lcssa = $incdec$ptr5;
     $s$addr$0$lcssa = $incdec$ptr;
     break;
    } else {
     $d$addr$037 = $incdec$ptr5;
     $s$addr$038 = $incdec$ptr;
    }
   }
  }
  $6 = HEAP32[$s$addr$0$lcssa >> 2] | 0;
  if (!(($6 & -2139062144 ^ -2139062144) & $6 + -16843009)) {
   $7 = $6;
   $wd$031 = $d$addr$0$lcssa;
   $ws$032 = $s$addr$0$lcssa;
   while (1) {
    $incdec$ptr11 = $ws$032 + 4 | 0;
    $incdec$ptr12 = $wd$031 + 4 | 0;
    HEAP32[$wd$031 >> 2] = $7;
    $7 = HEAP32[$incdec$ptr11 >> 2] | 0;
    if (($7 & -2139062144 ^ -2139062144) & $7 + -16843009 | 0) {
     $wd$0$lcssa = $incdec$ptr12;
     $ws$0$lcssa = $incdec$ptr11;
     break;
    } else {
     $wd$031 = $incdec$ptr12;
     $ws$032 = $incdec$ptr11;
    }
   }
  } else {
   $wd$0$lcssa = $d$addr$0$lcssa;
   $ws$0$lcssa = $s$addr$0$lcssa;
  }
  $d$addr$1$ph = $wd$0$lcssa;
  $s$addr$1$ph = $ws$0$lcssa;
  label = 8;
 } else {
  $d$addr$1$ph = $d;
  $s$addr$1$ph = $s;
  label = 8;
 } while (0);
 if ((label | 0) == 8) {
  $9 = HEAP8[$s$addr$1$ph >> 0] | 0;
  HEAP8[$d$addr$1$ph >> 0] = $9;
  if (!($9 << 24 >> 24)) $retval$0 = $d$addr$1$ph; else {
   $d$addr$124 = $d$addr$1$ph;
   $s$addr$125 = $s$addr$1$ph;
   while (1) {
    $s$addr$125 = $s$addr$125 + 1 | 0;
    $incdec$ptr20 = $d$addr$124 + 1 | 0;
    $10 = HEAP8[$s$addr$125 >> 0] | 0;
    HEAP8[$incdec$ptr20 >> 0] = $10;
    if (!($10 << 24 >> 24)) {
     $retval$0 = $incdec$ptr20;
     break;
    } else $d$addr$124 = $incdec$ptr20;
   }
  }
 }
 return $retval$0 | 0;
}

function _icpGetJ_T_S($J_T_S) {
 $J_T_S = $J_T_S | 0;
 var $arrayidx115 = 0, $arrayidx129 = 0, $arrayidx143 = 0, $arrayidx17 = 0, $arrayidx19 = 0, $arrayidx41 = 0, $arrayidx61 = 0, $arrayidx75 = 0, $arrayidx77 = 0, dest = 0, stop = 0;
 $arrayidx17 = $J_T_S + 64 | 0;
 dest = $J_T_S;
 stop = dest + 64 | 0;
 do {
  HEAP32[dest >> 2] = 0;
  dest = dest + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAPF64[$arrayidx17 >> 3] = -1.0;
 $arrayidx19 = $J_T_S + 72 | 0;
 HEAP32[$arrayidx19 >> 2] = 0;
 HEAP32[$arrayidx19 + 4 >> 2] = 0;
 HEAP32[$arrayidx19 + 8 >> 2] = 0;
 HEAP32[$arrayidx19 + 12 >> 2] = 0;
 HEAP32[$arrayidx19 + 16 >> 2] = 0;
 HEAP32[$arrayidx19 + 20 >> 2] = 0;
 HEAP32[$arrayidx19 + 24 >> 2] = 0;
 HEAP32[$arrayidx19 + 28 >> 2] = 0;
 HEAPF64[$J_T_S + 104 >> 3] = 1.0;
 $arrayidx41 = $J_T_S + 160 | 0;
 dest = $J_T_S + 112 | 0;
 stop = dest + 48 | 0;
 do {
  HEAP32[dest >> 2] = 0;
  dest = dest + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAPF64[$arrayidx41 >> 3] = 1.0;
 $arrayidx61 = $J_T_S + 240 | 0;
 dest = $J_T_S + 168 | 0;
 stop = dest + 72 | 0;
 do {
  HEAP32[dest >> 2] = 0;
  dest = dest + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAPF64[$arrayidx61 >> 3] = -1.0;
 $arrayidx75 = $J_T_S + 296 | 0;
 dest = $J_T_S + 248 | 0;
 stop = dest + 48 | 0;
 do {
  HEAP32[dest >> 2] = 0;
  dest = dest + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAPF64[$arrayidx75 >> 3] = -1.0;
 $arrayidx77 = $J_T_S + 304 | 0;
 HEAP32[$arrayidx77 >> 2] = 0;
 HEAP32[$arrayidx77 + 4 >> 2] = 0;
 HEAP32[$arrayidx77 + 8 >> 2] = 0;
 HEAP32[$arrayidx77 + 12 >> 2] = 0;
 HEAP32[$arrayidx77 + 16 >> 2] = 0;
 HEAP32[$arrayidx77 + 20 >> 2] = 0;
 HEAP32[$arrayidx77 + 24 >> 2] = 0;
 HEAP32[$arrayidx77 + 28 >> 2] = 0;
 HEAPF64[$J_T_S + 336 >> 3] = 1.0;
 $arrayidx115 = $J_T_S + 456 | 0;
 dest = $J_T_S + 344 | 0;
 stop = dest + 112 | 0;
 do {
  HEAP32[dest >> 2] = 0;
  dest = dest + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAPF64[$arrayidx115 >> 3] = 1.0;
 $arrayidx129 = $J_T_S + 512 | 0;
 dest = $J_T_S + 464 | 0;
 stop = dest + 48 | 0;
 do {
  HEAP32[dest >> 2] = 0;
  dest = dest + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAPF64[$arrayidx129 >> 3] = 1.0;
 $arrayidx143 = $J_T_S + 568 | 0;
 dest = $J_T_S + 520 | 0;
 stop = dest + 48 | 0;
 do {
  HEAP32[dest >> 2] = 0;
  dest = dest + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAPF64[$arrayidx143 >> 3] = 1.0;
 return;
}

function __ZNSt3__26vectorINS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEENS4_IS6_Lj4096EEEE21__push_back_slow_pathIS6_EEvOT_($this, $__x) {
 $this = $this | 0;
 $__x = $__x | 0;
 var $3 = 0, $5 = 0, $6 = 0, $__end_ = 0, $__end_$i = 0, $__end_$i$i$i = 0, $__end_$i$i$i$i = 0, $__first_$i$i$i8$i$i$i = 0, $__v = 0, $add = 0, $call$i = 0, $mul$i = 0, $sub$ptr$sub$i$i$i = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 $__v = sp;
 $__end_$i = $this + 4 | 0;
 $add = ((HEAP32[$__end_$i >> 2] | 0) - (HEAP32[$this >> 2] | 0) >> 4) + 1 | 0;
 $call$i = __ZNKSt3__26vectorINS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEENS4_IS6_Lj4096EEEE8max_sizeEv($this) | 0;
 if ($call$i >>> 0 < $add >>> 0) __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv($this); else {
  $3 = HEAP32[$this >> 2] | 0;
  $sub$ptr$sub$i$i$i = (HEAP32[$this + 8 >> 2] | 0) - $3 | 0;
  $mul$i = $sub$ptr$sub$i$i$i >> 3;
  __ZNSt3__214__split_bufferINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEERNS5_IS7_Lj4096EEEEC2EjjS9_($__v, $sub$ptr$sub$i$i$i >> 4 >>> 0 < $call$i >>> 1 >>> 0 ? ($mul$i >>> 0 < $add >>> 0 ? $add : $mul$i) : $call$i, (HEAP32[$__end_$i >> 2] | 0) - $3 >> 4, $this + 12 | 0);
  $__end_ = $__v + 8 | 0;
  $5 = HEAP32[$__end_ >> 2] | 0;
  HEAP32[$5 >> 2] = 0;
  $__end_$i$i$i$i = $5 + 4 | 0;
  HEAP32[$__end_$i$i$i$i >> 2] = 0;
  $6 = HEAP32[$__x + 12 >> 2] | 0;
  HEAP32[$5 + 8 >> 2] = 0;
  HEAP32[$5 + 12 >> 2] = $6;
  HEAP32[$5 >> 2] = HEAP32[$__x >> 2];
  $__end_$i$i$i = $__x + 4 | 0;
  HEAP32[$__end_$i$i$i$i >> 2] = HEAP32[$__end_$i$i$i >> 2];
  $__first_$i$i$i8$i$i$i = $__x + 8 | 0;
  HEAP32[$5 + 8 >> 2] = HEAP32[$__first_$i$i$i8$i$i$i >> 2];
  HEAP32[$__first_$i$i$i8$i$i$i >> 2] = 0;
  HEAP32[$__end_$i$i$i >> 2] = 0;
  HEAP32[$__x >> 2] = 0;
  HEAP32[$__end_ >> 2] = $5 + 16;
  __ZNSt3__26vectorINS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEENS4_IS6_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS6_RS7_EE($this, $__v);
  __ZNSt3__214__split_bufferINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEERNS5_IS7_Lj4096EEEED2Ev($__v);
  STACKTOP = sp;
  return;
 }
}

function __ZN10__cxxabiv112_GLOBAL__N_116parse_arrow_exprINS0_2DbEEEPKcS4_S4_RT_($first, $last, $db) {
 $first = $first | 0;
 $last = $last | 0;
 $db = $db | 0;
 var $2 = 0, $5 = 0, $6 = 0, $8 = 0, $__end_$i = 0, $add$ptr = 0, $add$ptr$i25 = 0, $call = 0, $call9 = 0, $incdec$ptr$i$i$i = 0, $retval$3 = 0, $tmp = 0, $tobool$i$i$i$i$i = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $tmp = sp;
 if (($last - $first | 0) > 2) if ((HEAP8[$first >> 0] | 0) == 112) if ((HEAP8[$first + 1 >> 0] | 0) == 116) {
  $add$ptr = $first + 2 | 0;
  $call = __ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($add$ptr, $last, $db) | 0;
  if (($call | 0) == ($add$ptr | 0)) $retval$3 = $first; else {
   $call9 = __ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($call, $last, $db) | 0;
   if (($call9 | 0) == ($call | 0)) $retval$3 = $first; else {
    $__end_$i = $db + 4 | 0;
    $2 = HEAP32[$__end_$i >> 2] | 0;
    if ((($2 - (HEAP32[$db >> 2] | 0) | 0) / 24 | 0) >>> 0 < 2) $retval$3 = $first; else {
     __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($tmp, $2 + -24 | 0);
     $5 = HEAP32[$__end_$i >> 2] | 0;
     $add$ptr$i25 = $5 + -24 | 0;
     $6 = $5;
     while (1) {
      if (($6 | 0) == ($add$ptr$i25 | 0)) break;
      $incdec$ptr$i$i$i = $6 + -24 | 0;
      HEAP32[$__end_$i >> 2] = $incdec$ptr$i$i$i;
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($incdec$ptr$i$i$i);
      $6 = HEAP32[$__end_$i >> 2] | 0;
     }
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($5 + -48 | 0, 15155) | 0;
     $8 = HEAP8[$tmp + 11 >> 0] | 0;
     $tobool$i$i$i$i$i = $8 << 24 >> 24 < 0;
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj((HEAP32[$__end_$i >> 2] | 0) + -24 | 0, $tobool$i$i$i$i$i ? HEAP32[$tmp >> 2] | 0 : $tmp, $tobool$i$i$i$i$i ? HEAP32[$tmp + 4 >> 2] | 0 : $8 & 255) | 0;
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($tmp);
     $retval$3 = $call9;
    }
   }
  }
 } else $retval$3 = $first; else $retval$3 = $first; else $retval$3 = $first;
 STACKTOP = sp;
 return $retval$3 | 0;
}

function __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE7reserveEj($this) {
 $this = $this | 0;
 var $$phitmp$i = 0, $0 = 0, $3 = 0, $5 = 0, $__new_data$0405965 = 0, $__new_data$041 = 0, $__now_long$0$off047 = 0, $__p$043 = 0, $__size_$i$i = 0, $call$i = 0, $cmp$i = 0, $cond$i37 = 0, $cond$i6 = 0, label = 0;
 $__size_$i$i = $this + 11 | 0;
 $0 = HEAP8[$__size_$i$i >> 0] | 0;
 if ($0 << 24 >> 24 < 0) {
  $cond$i37 = (HEAP32[$this + 8 >> 2] & 2147483647) + -1 | 0;
  $cond$i6 = HEAP32[$this + 4 >> 2] | 0;
 } else {
  $cond$i37 = 10;
  $cond$i6 = $0 & 255;
 }
 $cmp$i = $cond$i6 >>> 0 < 11;
 $$phitmp$i = $cmp$i ? 10 : ($cond$i6 + 16 & -16) + -1 | 0;
 L5 : do if (($$phitmp$i | 0) != ($cond$i37 | 0)) {
  do if ($cmp$i) {
   $5 = HEAP32[$this >> 2] | 0;
   if ($0 << 24 >> 24 < 0) {
    $__new_data$041 = $this;
    $__now_long$0$off047 = 0;
    $__p$043 = $5;
    label = 12;
   } else {
    __ZNSt3__211char_traitsIcE4copyEPcPKcj($this, $5, ($0 & 255) + 1 | 0) | 0;
    __ZN10__cxxabiv112_GLOBAL__N_112malloc_allocIcE10deallocateEPcj($5);
    label = 14;
   }
  } else {
   $call$i = __ZN10__cxxabiv112_GLOBAL__N_112malloc_allocIcE8allocateEj($$phitmp$i + 1 | 0) | 0;
   if ($$phitmp$i >>> 0 <= $cond$i37 >>> 0 & ($call$i | 0) == 0) break L5;
   $3 = HEAP8[$__size_$i$i >> 0] | 0;
   if ($3 << 24 >> 24 < 0) {
    $__new_data$041 = $call$i;
    $__now_long$0$off047 = 1;
    $__p$043 = HEAP32[$this >> 2] | 0;
    label = 12;
    break;
   } else {
    __ZNSt3__211char_traitsIcE4copyEPcPKcj($call$i, $this, ($3 & 255) + 1 | 0) | 0;
    $__new_data$0405965 = $call$i;
    label = 13;
    break;
   }
  } while (0);
  if ((label | 0) == 12) {
   __ZNSt3__211char_traitsIcE4copyEPcPKcj($__new_data$041, $__p$043, (HEAP32[$this + 4 >> 2] | 0) + 1 | 0) | 0;
   __ZN10__cxxabiv112_GLOBAL__N_112malloc_allocIcE10deallocateEPcj($__p$043);
   if ($__now_long$0$off047) {
    $__new_data$0405965 = $__new_data$041;
    label = 13;
   } else label = 14;
  }
  if ((label | 0) == 13) {
   HEAP32[$this + 8 >> 2] = $$phitmp$i + 1 | -2147483648;
   HEAP32[$this + 4 >> 2] = $cond$i6;
   HEAP32[$this >> 2] = $__new_data$0405965;
   break;
  } else if ((label | 0) == 14) {
   HEAP8[$__size_$i$i >> 0] = $cond$i6;
   break;
  }
 } while (0);
 return;
}

function _arSetPixelFormat($handle, $pixFormat) {
 $handle = $handle | 0;
 $pixFormat = $pixFormat | 0;
 var $1 = 0, $5 = 0, $arImageProcInfo = 0, $arPatternDetectionMode = 0, $arPixelFormat = 0, $call = 0, $call10 = 0, $monoFormat$0 = 0, $retval$0 = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $vararg_buffer = sp;
 L1 : do if (!$handle) $retval$0 = -1; else {
  $arPixelFormat = $handle + 4 | 0;
  if ((HEAP32[$arPixelFormat >> 2] | 0) == ($pixFormat | 0)) $retval$0 = 0; else {
   switch ($pixFormat | 0) {
   case 11:
   case 10:
   case 9:
   case 8:
   case 7:
   case 6:
   case 4:
   case 3:
   case 2:
   case 1:
   case 0:
    {
     $monoFormat$0 = 0;
     break;
    }
   case 14:
   case 13:
   case 12:
   case 5:
    {
     $monoFormat$0 = 1;
     break;
    }
   default:
    {
     HEAP32[$vararg_buffer >> 2] = $pixFormat;
     _arLog(3, 3456, $vararg_buffer);
     $retval$0 = -1;
     break L1;
    }
   }
   HEAP32[$arPixelFormat >> 2] = $pixFormat;
   $call = _arUtilGetPixelSize($pixFormat) | 0;
   HEAP32[$handle + 8 >> 2] = $call;
   $arImageProcInfo = $handle + 7062408 | 0;
   $1 = HEAP32[$arImageProcInfo >> 2] | 0;
   if ($1 | 0) {
    _arImageProcFinal($1);
    $call10 = _arImageProcInit(HEAP32[$handle + 36 >> 2] | 0, HEAP32[$handle + 40 >> 2] | 0, HEAP32[$arPixelFormat >> 2] | 0, 0) | 0;
    HEAP32[$arImageProcInfo >> 2] = $call10;
   }
   $arPatternDetectionMode = $handle + 24 | 0;
   $5 = HEAP32[$arPatternDetectionMode >> 2] | 0;
   if (!$monoFormat$0) switch ($5 | 0) {
   case 1:
    {
     HEAP32[$arPatternDetectionMode >> 2] = 4;
     $retval$0 = 0;
     break L1;
     break;
    }
   case 4:
    {
     HEAP32[$arPatternDetectionMode >> 2] = 3;
     $retval$0 = 0;
     break L1;
     break;
    }
   default:
    {
     $retval$0 = 0;
     break L1;
    }
   } else switch ($5 | 0) {
   case 0:
    {
     HEAP32[$arPatternDetectionMode >> 2] = 1;
     $retval$0 = 0;
     break L1;
     break;
    }
   case 3:
    {
     HEAP32[$arPatternDetectionMode >> 2] = 4;
     $retval$0 = 0;
     break L1;
     break;
    }
   default:
    {
     $retval$0 = 0;
     break L1;
    }
   }
  }
 } while (0);
 STACKTOP = sp;
 return $retval$0 | 0;
}

function __ZNSt3__26vectorINS0_INS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEENS4_IS6_Lj4096EEEEENS4_IS8_Lj4096EEEE24__emplace_back_slow_pathIJRNS2_5arenaILj4096EEEEEEvDpOT_($this, $__args) {
 $this = $this | 0;
 $__args = $__args | 0;
 var $3 = 0, $5 = 0, $6 = 0, $__end_ = 0, $__end_$i = 0, $__v = 0, $add = 0, $call$i = 0, $mul$i = 0, $ref$tmp$i$i = 0, $sub$ptr$sub$i$i$i = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 $ref$tmp$i$i = sp + 20 | 0;
 $__v = sp;
 $__end_$i = $this + 4 | 0;
 $add = ((HEAP32[$__end_$i >> 2] | 0) - (HEAP32[$this >> 2] | 0) >> 4) + 1 | 0;
 $call$i = __ZNKSt3__26vectorINS0_INS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEENS4_IS6_Lj4096EEEEENS4_IS8_Lj4096EEEE8max_sizeEv($this) | 0;
 if ($call$i >>> 0 < $add >>> 0) __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv($this); else {
  $3 = HEAP32[$this >> 2] | 0;
  $sub$ptr$sub$i$i$i = (HEAP32[$this + 8 >> 2] | 0) - $3 | 0;
  $mul$i = $sub$ptr$sub$i$i$i >> 3;
  __ZNSt3__214__split_bufferINS_6vectorINS1_IN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEENS5_IS7_Lj4096EEEEERNS5_IS9_Lj4096EEEEC2EjjSB_($__v, $sub$ptr$sub$i$i$i >> 4 >>> 0 < $call$i >>> 1 >>> 0 ? ($mul$i >>> 0 < $add >>> 0 ? $add : $mul$i) : $call$i, (HEAP32[$__end_$i >> 2] | 0) - $3 >> 4, $this + 12 | 0);
  $__end_ = $__v + 8 | 0;
  $5 = HEAP32[$__end_ >> 2] | 0;
  __ZN10__cxxabiv112_GLOBAL__N_111short_allocINSt3__26vectorINS0_11string_pairENS1_IS4_Lj4096EEEEELj4096EEC2ERNS0_5arenaILj4096EEE($ref$tmp$i$i, $__args);
  HEAP32[$5 >> 2] = 0;
  HEAP32[$5 + 4 >> 2] = 0;
  $6 = HEAP32[$ref$tmp$i$i >> 2] | 0;
  HEAP32[$5 + 8 >> 2] = 0;
  HEAP32[$5 + 12 >> 2] = $6;
  HEAP32[$__end_ >> 2] = $5 + 16;
  __ZNSt3__26vectorINS0_INS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEENS4_IS6_Lj4096EEEEENS4_IS8_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS8_RS9_EE($this, $__v);
  __ZNSt3__214__split_bufferINS_6vectorINS1_IN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEENS5_IS7_Lj4096EEEEERNS5_IS9_Lj4096EEEED2Ev($__v);
  STACKTOP = sp;
  return;
 }
}

function __ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($this, $info, $dst_ptr, $current_ptr, $path_below, $use_strcmp) {
 $this = $this | 0;
 $info = $info | 0;
 $dst_ptr = $dst_ptr | 0;
 $current_ptr = $current_ptr | 0;
 $path_below = $path_below | 0;
 $use_strcmp = $use_strcmp | 0;
 var $1 = 0, $2 = 0, $3 = 0, $__flags = 0, $add$ptr = 0, $found_any_static_type5 = 0, $found_our_static_ptr2 = 0, $p$0 = 0, $path_dst_ptr_to_static_ptr = 0, $search_done = 0;
 if (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($this, HEAP32[$info + 8 >> 2] | 0, $use_strcmp) | 0) __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i(0, $info, $dst_ptr, $current_ptr, $path_below); else {
  $found_our_static_ptr2 = $info + 52 | 0;
  $1 = HEAP8[$found_our_static_ptr2 >> 0] | 0;
  $found_any_static_type5 = $info + 53 | 0;
  $2 = HEAP8[$found_any_static_type5 >> 0] | 0;
  $3 = HEAP32[$this + 12 >> 2] | 0;
  $add$ptr = $this + 16 + ($3 << 3) | 0;
  HEAP8[$found_our_static_ptr2 >> 0] = 0;
  HEAP8[$found_any_static_type5 >> 0] = 0;
  __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($this + 16 | 0, $info, $dst_ptr, $current_ptr, $path_below, $use_strcmp);
  L4 : do if (($3 | 0) > 1) {
   $path_dst_ptr_to_static_ptr = $info + 24 | 0;
   $search_done = $info + 54 | 0;
   $__flags = $this + 8 | 0;
   $p$0 = $this + 24 | 0;
   do {
    if (HEAP8[$search_done >> 0] | 0) break L4;
    if (!(HEAP8[$found_our_static_ptr2 >> 0] | 0)) {
     if (HEAP8[$found_any_static_type5 >> 0] | 0) if (!(HEAP32[$__flags >> 2] & 1)) break L4;
    } else {
     if ((HEAP32[$path_dst_ptr_to_static_ptr >> 2] | 0) == 1) break L4;
     if (!(HEAP32[$__flags >> 2] & 2)) break L4;
    }
    HEAP8[$found_our_static_ptr2 >> 0] = 0;
    HEAP8[$found_any_static_type5 >> 0] = 0;
    __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($p$0, $info, $dst_ptr, $current_ptr, $path_below, $use_strcmp);
    $p$0 = $p$0 + 8 | 0;
   } while ($p$0 >>> 0 < $add$ptr >>> 0);
  } while (0);
  HEAP8[$found_our_static_ptr2 >> 0] = $1;
  HEAP8[$found_any_static_type5 >> 0] = $2;
 }
 return;
}

function __ZNSt3__26vectorINS0_INS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEENS4_IS6_Lj4096EEEEENS4_IS8_Lj4096EEEE24__emplace_back_slow_pathIJS5_EEEvDpOT_($this, $__args) {
 $this = $this | 0;
 $__args = $__args | 0;
 var $3 = 0, $5 = 0, $6 = 0, $__end_ = 0, $__end_$i = 0, $__v = 0, $add = 0, $call$i = 0, $mul$i = 0, $ref$tmp$i$i = 0, $sub$ptr$sub$i$i$i = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 $ref$tmp$i$i = sp + 20 | 0;
 $__v = sp;
 $__end_$i = $this + 4 | 0;
 $add = ((HEAP32[$__end_$i >> 2] | 0) - (HEAP32[$this >> 2] | 0) >> 4) + 1 | 0;
 $call$i = __ZNKSt3__26vectorINS0_INS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEENS4_IS6_Lj4096EEEEENS4_IS8_Lj4096EEEE8max_sizeEv($this) | 0;
 if ($call$i >>> 0 < $add >>> 0) __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv($this); else {
  $3 = HEAP32[$this >> 2] | 0;
  $sub$ptr$sub$i$i$i = (HEAP32[$this + 8 >> 2] | 0) - $3 | 0;
  $mul$i = $sub$ptr$sub$i$i$i >> 3;
  __ZNSt3__214__split_bufferINS_6vectorINS1_IN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEENS5_IS7_Lj4096EEEEERNS5_IS9_Lj4096EEEEC2EjjSB_($__v, $sub$ptr$sub$i$i$i >> 4 >>> 0 < $call$i >>> 1 >>> 0 ? ($mul$i >>> 0 < $add >>> 0 ? $add : $mul$i) : $call$i, (HEAP32[$__end_$i >> 2] | 0) - $3 >> 4, $this + 12 | 0);
  $__end_ = $__v + 8 | 0;
  $5 = HEAP32[$__end_ >> 2] | 0;
  __ZN10__cxxabiv112_GLOBAL__N_111short_allocINSt3__26vectorINS0_11string_pairENS1_IS4_Lj4096EEEEELj4096EEC2IS4_EERKNS1_IT_Lj4096EEE($ref$tmp$i$i, $__args);
  HEAP32[$5 >> 2] = 0;
  HEAP32[$5 + 4 >> 2] = 0;
  $6 = HEAP32[$ref$tmp$i$i >> 2] | 0;
  HEAP32[$5 + 8 >> 2] = 0;
  HEAP32[$5 + 12 >> 2] = $6;
  HEAP32[$__end_ >> 2] = $5 + 16;
  __ZNSt3__26vectorINS0_INS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEENS4_IS6_Lj4096EEEEENS4_IS8_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS8_RS9_EE($this, $__v);
  __ZNSt3__214__split_bufferINS_6vectorINS1_IN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEENS5_IS7_Lj4096EEEEERNS5_IS9_Lj4096EEEED2Ev($__v);
  STACKTOP = sp;
  return;
 }
}

function _arGetTransMatSquareCont($handle, $marker_info, $initConv, $width, $conv) {
 $handle = $handle | 0;
 $marker_info = $marker_info | 0;
 $initConv = $initConv | 0;
 $width = +$width;
 $conv = $conv | 0;
 var $0 = 0, $cmp = 0, $data = 0, $div = 0.0, $div55 = 0.0, $err = 0, $rem = 0, $rem12 = 0, $rem26 = 0, $rem40 = 0, $screenCoord = 0, $worldCoord = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 192 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(192);
 $screenCoord = sp + 104 | 0;
 $worldCoord = sp + 8 | 0;
 $data = sp + 168 | 0;
 $err = sp;
 $0 = HEAP32[$marker_info + 16 >> 2] | 0;
 $rem = (4 - $0 | 0) % 4 | 0;
 HEAPF64[$screenCoord >> 3] = +HEAPF64[$marker_info + 168 + ($rem << 4) >> 3];
 HEAPF64[$screenCoord + 8 >> 3] = +HEAPF64[$marker_info + 168 + ($rem << 4) + 8 >> 3];
 $rem12 = (5 - $0 | 0) % 4 | 0;
 HEAPF64[$screenCoord + 16 >> 3] = +HEAPF64[$marker_info + 168 + ($rem12 << 4) >> 3];
 HEAPF64[$screenCoord + 24 >> 3] = +HEAPF64[$marker_info + 168 + ($rem12 << 4) + 8 >> 3];
 $rem26 = (6 - $0 | 0) % 4 | 0;
 HEAPF64[$screenCoord + 32 >> 3] = +HEAPF64[$marker_info + 168 + ($rem26 << 4) >> 3];
 HEAPF64[$screenCoord + 40 >> 3] = +HEAPF64[$marker_info + 168 + ($rem26 << 4) + 8 >> 3];
 $rem40 = (7 - $0 | 0) % 4 | 0;
 HEAPF64[$screenCoord + 48 >> 3] = +HEAPF64[$marker_info + 168 + ($rem40 << 4) >> 3];
 HEAPF64[$screenCoord + 56 >> 3] = +HEAPF64[$marker_info + 168 + ($rem40 << 4) + 8 >> 3];
 $div = $width * -.5;
 HEAPF64[$worldCoord >> 3] = $div;
 $div55 = $width * .5;
 HEAPF64[$worldCoord + 8 >> 3] = $div55;
 HEAPF64[$worldCoord + 16 >> 3] = 0.0;
 HEAPF64[$worldCoord + 24 >> 3] = $div55;
 HEAPF64[$worldCoord + 32 >> 3] = $div55;
 HEAPF64[$worldCoord + 40 >> 3] = 0.0;
 HEAPF64[$worldCoord + 48 >> 3] = $div55;
 HEAPF64[$worldCoord + 56 >> 3] = $div;
 HEAPF64[$worldCoord + 64 >> 3] = 0.0;
 HEAPF64[$worldCoord + 72 >> 3] = $div;
 HEAPF64[$worldCoord + 80 >> 3] = $div;
 HEAPF64[$worldCoord + 88 >> 3] = 0.0;
 HEAP32[$data >> 2] = $screenCoord;
 HEAP32[$data + 4 >> 2] = $worldCoord;
 HEAP32[$data + 8 >> 2] = 4;
 $cmp = (_icpPoint(HEAP32[$handle >> 2] | 0, $data, $initConv, $conv, $err) | 0) < 0;
 STACKTOP = sp;
 return +($cmp ? 1.0e8 : +HEAPF64[$err >> 3]);
}

function __ZN10__cxxabiv112_GLOBAL__N_116parse_throw_exprINS0_2DbEEEPKcS4_S4_RT_($first, $last, $db) {
 $first = $first | 0;
 $last = $last | 0;
 $db = $db | 0;
 var $3 = 0, $__end_$i = 0, $__i$0$i$i$i = 0, $add$ptr = 0, $agg$tmp = 0, $call = 0, $ref$tmp = 0, $ref$tmp11 = 0, $retval$1 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48);
 $ref$tmp = sp + 24 | 0;
 $agg$tmp = sp;
 $ref$tmp11 = sp + 12 | 0;
 if (($last - $first | 0) > 2) if ((HEAP8[$first >> 0] | 0) == 116) if ((HEAP8[$first + 1 >> 0] | 0) == 119) {
  $add$ptr = $first + 2 | 0;
  $call = __ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($add$ptr, $last, $db) | 0;
  if (($call | 0) == ($add$ptr | 0)) $retval$1 = $first; else {
   $__end_$i = $db + 4 | 0;
   $3 = HEAP32[$__end_$i >> 2] | 0;
   if ((HEAP32[$db >> 2] | 0) == ($3 | 0)) $retval$1 = $first; else {
    __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($ref$tmp11, $3 + -24 | 0);
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKc($ref$tmp11, 0, 15083) | 0;
    HEAP32[$agg$tmp >> 2] = HEAP32[$ref$tmp11 >> 2];
    HEAP32[$agg$tmp + 4 >> 2] = HEAP32[$ref$tmp11 + 4 >> 2];
    HEAP32[$agg$tmp + 8 >> 2] = HEAP32[$ref$tmp11 + 8 >> 2];
    $__i$0$i$i$i = 0;
    while (1) {
     if (($__i$0$i$i$i | 0) == 3) break;
     HEAP32[$ref$tmp11 + ($__i$0$i$i$i << 2) >> 2] = 0;
     $__i$0$i$i$i = $__i$0$i$i$i + 1 | 0;
    }
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ENSt3__212basic_stringIcNS2_11char_traitsIcEENS0_12malloc_allocIcEEEE($ref$tmp, $agg$tmp);
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairaSEOS1_((HEAP32[$__end_$i >> 2] | 0) + -24 | 0, $ref$tmp);
    __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($ref$tmp);
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($agg$tmp);
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($ref$tmp11);
    $retval$1 = $call;
   }
  }
 } else $retval$1 = $first; else $retval$1 = $first; else $retval$1 = $first;
 STACKTOP = sp;
 return $retval$1 | 0;
}

function __ZN10__cxxabiv112_GLOBAL__N_111string_pairaSEOS1_($this, $0) {
 $this = $this | 0;
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $__i$0$i$i$i$i = 0, $__i$0$i$i$i$i15 = 0, $__size_$i1$i$i$i$i = 0, $__size_$i1$i$i$i$i4 = 0, $ref$tmp$i$i$i$i1 = 0, $second = 0, $second3 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $ref$tmp$i$i$i$i1 = sp;
 $__size_$i1$i$i$i$i = $this + 11 | 0;
 if ((HEAP8[$__size_$i1$i$i$i$i >> 0] | 0) < 0) {
  $2 = HEAP32[$this >> 2] | 0;
  HEAP8[$ref$tmp$i$i$i$i1 >> 0] = 0;
  __ZNSt3__211char_traitsIcE6assignERcRKc($2, $ref$tmp$i$i$i$i1);
  HEAP32[$this + 4 >> 2] = 0;
 } else {
  HEAP8[$ref$tmp$i$i$i$i1 >> 0] = 0;
  __ZNSt3__211char_traitsIcE6assignERcRKc($this, $ref$tmp$i$i$i$i1);
  HEAP8[$__size_$i1$i$i$i$i >> 0] = 0;
 }
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE7reserveEj($this);
 HEAP32[$this >> 2] = HEAP32[$0 >> 2];
 HEAP32[$this + 4 >> 2] = HEAP32[$0 + 4 >> 2];
 HEAP32[$this + 8 >> 2] = HEAP32[$0 + 8 >> 2];
 $__i$0$i$i$i$i = 0;
 while (1) {
  if (($__i$0$i$i$i$i | 0) == 3) break;
  HEAP32[$0 + ($__i$0$i$i$i$i << 2) >> 2] = 0;
  $__i$0$i$i$i$i = $__i$0$i$i$i$i + 1 | 0;
 }
 $second = $this + 12 | 0;
 $second3 = $0 + 12 | 0;
 $__size_$i1$i$i$i$i4 = $second + 11 | 0;
 if ((HEAP8[$__size_$i1$i$i$i$i4 >> 0] | 0) < 0) {
  $4 = HEAP32[$second >> 2] | 0;
  HEAP8[$ref$tmp$i$i$i$i1 >> 0] = 0;
  __ZNSt3__211char_traitsIcE6assignERcRKc($4, $ref$tmp$i$i$i$i1);
  HEAP32[$this + 16 >> 2] = 0;
 } else {
  HEAP8[$ref$tmp$i$i$i$i1 >> 0] = 0;
  __ZNSt3__211char_traitsIcE6assignERcRKc($second, $ref$tmp$i$i$i$i1);
  HEAP8[$__size_$i1$i$i$i$i4 >> 0] = 0;
 }
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE7reserveEj($second);
 HEAP32[$second >> 2] = HEAP32[$second3 >> 2];
 HEAP32[$second + 4 >> 2] = HEAP32[$second3 + 4 >> 2];
 HEAP32[$second + 8 >> 2] = HEAP32[$second3 + 8 >> 2];
 $__i$0$i$i$i$i15 = 0;
 while (1) {
  if (($__i$0$i$i$i$i15 | 0) == 3) break;
  HEAP32[$second3 + ($__i$0$i$i$i$i15 << 2) >> 2] = 0;
  $__i$0$i$i$i$i15 = $__i$0$i$i$i$i15 + 1 | 0;
 }
 STACKTOP = sp;
 return;
}

function _EV_create($input, $u, $output, $ev) {
 $input = $input | 0;
 $u = $u | 0;
 $output = $output | 0;
 $ev = $ev | 0;
 var $0 = 0, $1 = 0, $9 = 0.0, $add = 0.0, $div = 0.0, $i$0 = 0, $i$1 = 0, $j$0 = 0, $j$1 = 0, $k$0 = 0, $m$0 = 0, $m$1 = 0, $m$2 = 0, $m$3 = 0, $m1$0 = 0, $m2$0 = 0, $mul = 0, $retval$0 = 0, $sum$0 = 0.0;
 $0 = HEAP32[$input + 4 >> 2] | 0;
 $1 = HEAP32[$input + 8 >> 2] | 0;
 L1 : do if (($0 | 0) < 1 | ($1 | 0) < 1) $retval$0 = -1; else if ((HEAP32[$u + 4 >> 2] | 0) == ($0 | 0)) if ((HEAP32[$u + 8 >> 2] | 0) == ($0 | 0)) if ((HEAP32[$output + 4 >> 2] | 0) == ($0 | 0)) if ((HEAP32[$output + 8 >> 2] | 0) == ($1 | 0)) if ((HEAP32[$ev + 4 >> 2] | 0) == ($0 | 0)) {
  $i$0 = 0;
  $m$0 = HEAP32[$output >> 2] | 0;
  while (1) {
   if (($i$0 | 0) >= ($0 | 0)) {
    $i$1 = $i$0;
    $m$2 = $m$0;
    break;
   }
   $9 = +HEAPF64[(HEAP32[$ev >> 2] | 0) + ($i$0 << 3) >> 3];
   if ($9 < 1.0e-16) {
    $i$1 = $i$0;
    $m$2 = $m$0;
    break;
   }
   $div = 1.0 / +Math_sqrt(+(+Math_abs(+$9)));
   $mul = Math_imul($i$0, $0) | 0;
   $j$0 = 0;
   $m$1 = $m$0;
   while (1) {
    if (($j$0 | 0) == ($1 | 0)) break;
    $k$0 = 0;
    $m1$0 = (HEAP32[$u >> 2] | 0) + ($mul << 3) | 0;
    $m2$0 = (HEAP32[$input >> 2] | 0) + ($j$0 << 3) | 0;
    $sum$0 = 0.0;
    while (1) {
     if (($k$0 | 0) == ($0 | 0)) break;
     $add = $sum$0 + +HEAPF64[$m1$0 >> 3] * +HEAPF64[$m2$0 >> 3];
     $k$0 = $k$0 + 1 | 0;
     $m1$0 = $m1$0 + 8 | 0;
     $m2$0 = $m2$0 + ($1 << 3) | 0;
     $sum$0 = $add;
    }
    HEAPF64[$m$1 >> 3] = $div * $sum$0;
    $j$0 = $j$0 + 1 | 0;
    $m$1 = $m$1 + 8 | 0;
   }
   $i$0 = $i$0 + 1 | 0;
   $m$0 = $m$0 + ($1 << 3) | 0;
  }
  while (1) {
   if (($i$1 | 0) >= ($0 | 0)) {
    $retval$0 = 0;
    break L1;
   }
   HEAPF64[(HEAP32[$ev >> 2] | 0) + ($i$1 << 3) >> 3] = 0.0;
   $j$1 = 0;
   $m$3 = $m$2;
   while (1) {
    if (($j$1 | 0) >= ($1 | 0)) break;
    HEAPF64[$m$3 >> 3] = 0.0;
    $j$1 = $j$1 + 1 | 0;
    $m$3 = $m$3 + 8 | 0;
   }
   $i$1 = $i$1 + 1 | 0;
   $m$2 = $m$3;
  }
 } else $retval$0 = -1; else $retval$0 = -1; else $retval$0 = -1; else $retval$0 = -1; else $retval$0 = -1; while (0);
 return $retval$0 | 0;
}

function _memcpy(dest, src, num) {
 dest = dest | 0;
 src = src | 0;
 num = num | 0;
 var ret = 0, aligned_dest_end = 0, block_aligned_dest_end = 0, dest_end = 0;
 if ((num | 0) >= 8192) return _emscripten_memcpy_big(dest | 0, src | 0, num | 0) | 0;
 ret = dest | 0;
 dest_end = dest + num | 0;
 if ((dest & 3) == (src & 3)) {
  while (dest & 3) {
   if (!num) return ret | 0;
   HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
   dest = dest + 1 | 0;
   src = src + 1 | 0;
   num = num - 1 | 0;
  }
  aligned_dest_end = dest_end & -4 | 0;
  block_aligned_dest_end = aligned_dest_end - 64 | 0;
  while ((dest | 0) <= (block_aligned_dest_end | 0)) {
   HEAP32[dest >> 2] = HEAP32[src >> 2];
   HEAP32[dest + 4 >> 2] = HEAP32[src + 4 >> 2];
   HEAP32[dest + 8 >> 2] = HEAP32[src + 8 >> 2];
   HEAP32[dest + 12 >> 2] = HEAP32[src + 12 >> 2];
   HEAP32[dest + 16 >> 2] = HEAP32[src + 16 >> 2];
   HEAP32[dest + 20 >> 2] = HEAP32[src + 20 >> 2];
   HEAP32[dest + 24 >> 2] = HEAP32[src + 24 >> 2];
   HEAP32[dest + 28 >> 2] = HEAP32[src + 28 >> 2];
   HEAP32[dest + 32 >> 2] = HEAP32[src + 32 >> 2];
   HEAP32[dest + 36 >> 2] = HEAP32[src + 36 >> 2];
   HEAP32[dest + 40 >> 2] = HEAP32[src + 40 >> 2];
   HEAP32[dest + 44 >> 2] = HEAP32[src + 44 >> 2];
   HEAP32[dest + 48 >> 2] = HEAP32[src + 48 >> 2];
   HEAP32[dest + 52 >> 2] = HEAP32[src + 52 >> 2];
   HEAP32[dest + 56 >> 2] = HEAP32[src + 56 >> 2];
   HEAP32[dest + 60 >> 2] = HEAP32[src + 60 >> 2];
   dest = dest + 64 | 0;
   src = src + 64 | 0;
  }
  while ((dest | 0) < (aligned_dest_end | 0)) {
   HEAP32[dest >> 2] = HEAP32[src >> 2];
   dest = dest + 4 | 0;
   src = src + 4 | 0;
  }
 } else {
  aligned_dest_end = dest_end - 4 | 0;
  while ((dest | 0) < (aligned_dest_end | 0)) {
   HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
   HEAP8[dest + 1 >> 0] = HEAP8[src + 1 >> 0] | 0;
   HEAP8[dest + 2 >> 0] = HEAP8[src + 2 >> 0] | 0;
   HEAP8[dest + 3 >> 0] = HEAP8[src + 3 >> 0] | 0;
   dest = dest + 4 | 0;
   src = src + 4 | 0;
  }
 }
 while ((dest | 0) < (dest_end | 0)) {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 }
 return ret | 0;
}

function _arParamLTCreate($param, $offset) {
 $param = $param | 0;
 $offset = $offset | 0;
 var $2 = 0, $add = 0, $add4 = 0, $arraydecay = 0, $call = 0, $call16 = 0, $call28 = 0, $conv47 = 0.0, $conv50 = 0.0, $i$0 = 0, $i2of$0 = 0, $i2of$1 = 0, $ix = 0, $iy = 0, $j$0 = 0, $mul = 0, $mul15 = 0, $o2if$0 = 0, $o2if$1 = 0, $ox = 0, $oy = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(64);
 $ix = sp + 24 | 0;
 $iy = sp + 16 | 0;
 $ox = sp + 8 | 0;
 $oy = sp;
 $call = _malloc(208) | 0;
 if (!$call) {
  _arLog(3, 4823, sp + 32 | 0);
  _exit(1);
 }
 _memcpy($call | 0, $param | 0, 184) | 0;
 $mul = $offset << 1;
 $add = (HEAP32[$param >> 2] | 0) + $mul | 0;
 HEAP32[$call + 192 >> 2] = $add;
 $add4 = (HEAP32[$param + 4 >> 2] | 0) + $mul | 0;
 HEAP32[$call + 196 >> 2] = $add4;
 HEAP32[$call + 200 >> 2] = $offset;
 HEAP32[$call + 204 >> 2] = $offset;
 $mul15 = Math_imul($add << 3, $add4) | 0;
 $call16 = _malloc($mul15) | 0;
 HEAP32[$call + 184 >> 2] = $call16;
 if (!$call16) {
  _arLog(3, 4823, sp + 40 | 0);
  _exit(1);
 }
 $call28 = _malloc($mul15) | 0;
 HEAP32[$call + 188 >> 2] = $call28;
 if (!$call28) {
  _arLog(3, 4823, sp + 48 | 0);
  _exit(1);
 }
 $arraydecay = $param + 104 | 0;
 $2 = HEAP32[$param + 176 >> 2] | 0;
 $i2of$0 = $call16;
 $j$0 = 0;
 $o2if$0 = $call28;
 while (1) {
  if (($j$0 | 0) >= ($add4 | 0)) break;
  $conv50 = +($j$0 - $offset | 0);
  $i$0 = 0;
  $i2of$1 = $i2of$0;
  $o2if$1 = $o2if$0;
  while (1) {
   if (($i$0 | 0) >= ($add | 0)) break;
   $conv47 = +($i$0 - $offset | 0);
   _arParamIdeal2Observ($arraydecay, $conv47, $conv50, $ox, $oy, $2) | 0;
   HEAPF32[$i2of$1 >> 2] = +HEAPF64[$ox >> 3];
   HEAPF32[$i2of$1 + 4 >> 2] = +HEAPF64[$oy >> 3];
   _arParamObserv2Ideal($arraydecay, $conv47, $conv50, $ix, $iy, $2) | 0;
   HEAPF32[$o2if$1 >> 2] = +HEAPF64[$ix >> 3];
   HEAPF32[$o2if$1 + 4 >> 2] = +HEAPF64[$iy >> 3];
   $i$0 = $i$0 + 1 | 0;
   $i2of$1 = $i2of$1 + 8 | 0;
   $o2if$1 = $o2if$1 + 8 | 0;
  }
  $i2of$0 = $i2of$1;
  $j$0 = $j$0 + 1 | 0;
  $o2if$0 = $o2if$1;
 }
 STACKTOP = sp;
 return $call | 0;
}

function __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE21__grow_by_and_replaceEjjjjjjPKc($this, $__old_cap, $__delta_cap, $__old_sz, $__n_copy, $__n_del, $__n_add, $__p_new_stuff) {
 $this = $this | 0;
 $__old_cap = $__old_cap | 0;
 $__delta_cap = $__delta_cap | 0;
 $__old_sz = $__old_sz | 0;
 $__n_copy = $__n_copy | 0;
 $__n_del = $__n_del | 0;
 $__n_add = $__n_add | 0;
 $__p_new_stuff = $__p_new_stuff | 0;
 var $$sroa$speculated = 0, $add = 0, $add48 = 0, $call$i = 0, $cond$i = 0, $cond40 = 0, $mul = 0, $ref$tmp49 = 0, $sub28 = 0, $sub29 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $ref$tmp49 = sp;
 if ((-18 - $__old_cap | 0) >>> 0 < $__delta_cap >>> 0) __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($this);
 if ((HEAP8[$this + 11 >> 0] | 0) < 0) $cond$i = HEAP32[$this >> 2] | 0; else $cond$i = $this;
 if ($__old_cap >>> 0 < 2147483623) {
  $add = $__delta_cap + $__old_cap | 0;
  $mul = $__old_cap << 1;
  $$sroa$speculated = $add >>> 0 < $mul >>> 0 ? $mul : $add;
  $cond40 = $$sroa$speculated >>> 0 < 11 ? 11 : $$sroa$speculated + 16 & -16;
 } else $cond40 = -17;
 $call$i = __ZN10__cxxabiv112_GLOBAL__N_112malloc_allocIcE8allocateEj($cond40) | 0;
 if ($__n_copy | 0) __ZNSt3__211char_traitsIcE4copyEPcPKcj($call$i, $cond$i, $__n_copy) | 0;
 if ($__n_add | 0) __ZNSt3__211char_traitsIcE4copyEPcPKcj($call$i + $__n_copy | 0, $__p_new_stuff, $__n_add) | 0;
 $sub28 = $__old_sz - $__n_del | 0;
 $sub29 = $sub28 - $__n_copy | 0;
 if ($sub29 | 0) __ZNSt3__211char_traitsIcE4copyEPcPKcj($call$i + $__n_copy + $__n_add | 0, $cond$i + $__n_copy + $__n_del | 0, $sub29) | 0;
 if (($__old_cap | 0) != 10) __ZN10__cxxabiv112_GLOBAL__N_112malloc_allocIcE10deallocateEPcj($cond$i);
 HEAP32[$this >> 2] = $call$i;
 HEAP32[$this + 8 >> 2] = $cond40 | -2147483648;
 $add48 = $sub28 + $__n_add | 0;
 HEAP32[$this + 4 >> 2] = $add48;
 HEAP8[$ref$tmp49 >> 0] = 0;
 __ZNSt3__211char_traitsIcE6assignERcRKc($call$i + $add48 | 0, $ref$tmp49);
 STACKTOP = sp;
 return;
}

function _arMatrixPCA($input, $evec, $ev, $mean) {
 $input = $input | 0;
 $evec = $evec | 0;
 $ev = $ev | 0;
 $mean = $mean | 0;
 var $0 = 0, $1 = 0, $8 = 0, $add = 0.0, $arrayidx = 0, $arrayidx57 = 0, $call = 0, $call25 = 0.0, $call40 = 0, $clm13 = 0, $cond = 0, $i$0 = 0, $i$1 = 0, $i$2 = 0, $mul = 0, $retval$0 = 0, $sum$0 = 0.0;
 $0 = HEAP32[$input + 4 >> 2] | 0;
 $1 = HEAP32[$input + 8 >> 2] | 0;
 $cond = ($0 | 0) < ($1 | 0) ? $0 : $1;
 L1 : do if (($0 | 0) < 2 | ($1 | 0) < 2) $retval$0 = -1; else if ((HEAP32[$evec + 8 >> 2] | 0) == ($1 | 0)) if ((HEAP32[$evec + 4 >> 2] | 0) == ($cond | 0)) {
  $clm13 = $ev + 4 | 0;
  if ((HEAP32[$clm13 >> 2] | 0) == ($cond | 0)) if ((HEAP32[$mean + 4 >> 2] | 0) == ($1 | 0)) {
   $call = _arMatrixAllocDup($input) | 0;
   if (!$call) $retval$0 = -1; else {
    $call25 = +Math_sqrt(+(+($0 | 0)));
    if ((_EX($call, $mean) | 0) < 0) {
     _arMatrixFree($call) | 0;
     $retval$0 = -1;
     break;
    }
    if ((_CENTER($call, $mean) | 0) < 0) {
     _arMatrixFree($call) | 0;
     $retval$0 = -1;
     break;
    }
    $mul = Math_imul($1, $0) | 0;
    $i$0 = 0;
    while (1) {
     if (($i$0 | 0) >= ($mul | 0)) break;
     $arrayidx = (HEAP32[$call >> 2] | 0) + ($i$0 << 3) | 0;
     HEAPF64[$arrayidx >> 3] = +HEAPF64[$arrayidx >> 3] / $call25;
     $i$0 = $i$0 + 1 | 0;
    }
    $call40 = _PCA($call, $evec, $ev) | 0;
    _arMatrixFree($call) | 0;
    $8 = HEAP32[$clm13 >> 2] | 0;
    $i$1 = 0;
    $sum$0 = 0.0;
    while (1) {
     if (($i$1 | 0) >= ($8 | 0)) {
      $i$2 = 0;
      break;
     }
     $add = $sum$0 + +HEAPF64[(HEAP32[$ev >> 2] | 0) + ($i$1 << 3) >> 3];
     $i$1 = $i$1 + 1 | 0;
     $sum$0 = $add;
    }
    while (1) {
     if (($i$2 | 0) >= ($8 | 0)) {
      $retval$0 = $call40;
      break L1;
     }
     $arrayidx57 = (HEAP32[$ev >> 2] | 0) + ($i$2 << 3) | 0;
     HEAPF64[$arrayidx57 >> 3] = +HEAPF64[$arrayidx57 >> 3] / $sum$0;
     $i$2 = $i$2 + 1 | 0;
    }
   }
  } else $retval$0 = -1; else $retval$0 = -1;
 } else $retval$0 = -1; else $retval$0 = -1; while (0);
 return $retval$0 | 0;
}

function __ZNSt3__26vectorINS0_INS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEENS4_IS6_Lj4096EEEEENS4_IS8_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS8_RS9_EE($this, $__v) {
 $this = $this | 0;
 $__v = $__v | 0;
 var $0 = 0, $10 = 0, $12 = 0, $2 = 0, $3 = 0, $8 = 0, $__begin_2 = 0, $__end1$addr$0$i = 0, $__end_ = 0, $__end_$i$i$i$i = 0, $__end_$i$i$i$i$i = 0, $__end_6 = 0, $__first_$i$i$i = 0, $__first_$i$i$i6 = 0, $__first_$i$i$i8$i$i$i$i = 0, $add$ptr$i = 0, $incdec$ptr$i = 0;
 $0 = HEAP32[$this >> 2] | 0;
 $__end_ = $this + 4 | 0;
 $__begin_2 = $__v + 4 | 0;
 $__end1$addr$0$i = HEAP32[$__end_ >> 2] | 0;
 while (1) {
  if (($__end1$addr$0$i | 0) == ($0 | 0)) break;
  $2 = HEAP32[$__begin_2 >> 2] | 0;
  $add$ptr$i = $2 + -16 | 0;
  $incdec$ptr$i = $__end1$addr$0$i + -16 | 0;
  HEAP32[$add$ptr$i >> 2] = 0;
  $__end_$i$i$i$i$i = $2 + -12 | 0;
  HEAP32[$__end_$i$i$i$i$i >> 2] = 0;
  $3 = HEAP32[$__end1$addr$0$i + -4 >> 2] | 0;
  HEAP32[$2 + -8 >> 2] = 0;
  HEAP32[$2 + -4 >> 2] = $3;
  HEAP32[$add$ptr$i >> 2] = HEAP32[$incdec$ptr$i >> 2];
  $__end_$i$i$i$i = $__end1$addr$0$i + -12 | 0;
  HEAP32[$__end_$i$i$i$i$i >> 2] = HEAP32[$__end_$i$i$i$i >> 2];
  $__first_$i$i$i8$i$i$i$i = $__end1$addr$0$i + -8 | 0;
  HEAP32[$2 + -8 >> 2] = HEAP32[$__first_$i$i$i8$i$i$i$i >> 2];
  HEAP32[$__first_$i$i$i8$i$i$i$i >> 2] = 0;
  HEAP32[$__end_$i$i$i$i >> 2] = 0;
  HEAP32[$incdec$ptr$i >> 2] = 0;
  HEAP32[$__begin_2 >> 2] = (HEAP32[$__begin_2 >> 2] | 0) + -16;
  $__end1$addr$0$i = $incdec$ptr$i;
 }
 $8 = HEAP32[$this >> 2] | 0;
 HEAP32[$this >> 2] = HEAP32[$__begin_2 >> 2];
 HEAP32[$__begin_2 >> 2] = $8;
 $__end_6 = $__v + 8 | 0;
 $10 = HEAP32[$__end_ >> 2] | 0;
 HEAP32[$__end_ >> 2] = HEAP32[$__end_6 >> 2];
 HEAP32[$__end_6 >> 2] = $10;
 $__first_$i$i$i6 = $this + 8 | 0;
 $__first_$i$i$i = $__v + 12 | 0;
 $12 = HEAP32[$__first_$i$i$i6 >> 2] | 0;
 HEAP32[$__first_$i$i$i6 >> 2] = HEAP32[$__first_$i$i$i >> 2];
 HEAP32[$__first_$i$i$i >> 2] = $12;
 HEAP32[$__v >> 2] = HEAP32[$__begin_2 >> 2];
 return;
}

function _addMultiMarker($id, $patt_name) {
 $id = $id | 0;
 $patt_name = $patt_name | 0;
 var $14 = 0, $15 = 0, $3 = 0, $9 = 0, $__end_$i8 = 0, $arMultiMarkerHandle = 0, $call7 = 0, $cond$i$i$i = 0, $id$addr = 0, $marker = 0, $multi_markers = 0, $retval$1 = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $vararg_buffer = sp + 8 | 0;
 $id$addr = sp + 12 | 0;
 $marker = sp;
 HEAP32[$id$addr >> 2] = $id;
 do if (!(__ZNSt3__212__hash_tableINS_17__hash_value_typeIi12arControllerEENS_22__unordered_map_hasherIiS3_NS_4hashIiEELb1EEENS_21__unordered_map_equalIiS3_NS_8equal_toIiEELb1EEENS_9allocatorIS3_EEE4findIiEENS_15__hash_iteratorIPNS_11__hash_nodeIS3_PvEEEERKT_(17144, $id$addr) | 0)) $retval$1 = -1; else {
  $call7 = __ZNSt3__213unordered_mapIi12arControllerNS_4hashIiEENS_8equal_toIiEENS_9allocatorINS_4pairIKiS1_EEEEEixERS8_(17144, $id$addr) | 0;
  if ((HEAP8[$patt_name + 11 >> 0] | 0) < 0) $cond$i$i$i = HEAP32[$patt_name >> 2] | 0; else $cond$i$i$i = $patt_name;
  $arMultiMarkerHandle = $call7 + 220 | 0;
  if (!(__ZL15loadMultiMarkerPKcP8ARHandlePP12ARPattHandlePP18ARMultiMarkerInfoT($cond$i$i$i, HEAP32[$call7 + 212 >> 2] | 0, $call7 + 216 | 0, $arMultiMarkerHandle) | 0)) {
   _arLog(3, 9698, $vararg_buffer);
   $retval$1 = -1;
   break;
  }
  $multi_markers = $call7 + 248 | 0;
  $__end_$i8 = $call7 + 252 | 0;
  $3 = HEAP32[$__end_$i8 >> 2] | 0;
  HEAP32[$marker >> 2] = $3 - (HEAP32[$multi_markers >> 2] | 0) >> 3;
  HEAP32[$marker + 4 >> 2] = HEAP32[$arMultiMarkerHandle >> 2];
  if (($3 | 0) == (HEAP32[$call7 + 256 >> 2] | 0)) __ZNSt3__26vectorI12multi_markerNS_9allocatorIS1_EEE21__push_back_slow_pathIRKS1_EEvOT_($multi_markers, $marker); else {
   $9 = $marker;
   $14 = HEAP32[$9 + 4 >> 2] | 0;
   $15 = $3;
   HEAP32[$15 >> 2] = HEAP32[$9 >> 2];
   HEAP32[$15 + 4 >> 2] = $14;
   HEAP32[$__end_$i8 >> 2] = (HEAP32[$__end_$i8 >> 2] | 0) + 8;
  }
  $retval$1 = HEAP32[$marker >> 2] | 0;
 } while (0);
 STACKTOP = sp;
 return $retval$1 | 0;
}

function _setMarkerInfoVertex($id, $markerIndex) {
 $id = $id | 0;
 $markerIndex = $markerIndex | 0;
 var $1 = 0, $10 = 0.0, $11 = 0.0, $4 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0, $_ZL11gMarkerInfo$arrayidx = 0, $arhandle = 0, $id$addr = 0, $retval$1 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $id$addr = sp;
 HEAP32[$id$addr >> 2] = $id;
 do if (!(__ZNSt3__212__hash_tableINS_17__hash_value_typeIi12arControllerEENS_22__unordered_map_hasherIiS3_NS_4hashIiEELb1EEENS_21__unordered_map_equalIiS3_NS_8equal_toIiEELb1EEENS_9allocatorIS3_EEE4findIiEENS_15__hash_iteratorIPNS_11__hash_nodeIS3_PvEEEERKT_(17144, $id$addr) | 0)) $retval$1 = HEAP32[421] | 0; else {
  $arhandle = (__ZNSt3__213unordered_mapIi12arControllerNS_4hashIiEENS_8equal_toIiEENS_9allocatorINS_4pairIKiS1_EEEEEixERS8_(17144, $id$addr) | 0) + 212 | 0;
  $1 = HEAP32[$arhandle >> 2] | 0;
  if ((HEAP32[$1 + 44 >> 2] | 0) > ($markerIndex | 0)) {
   $_ZL11gMarkerInfo$arrayidx = ($markerIndex | 0) < 0 ? 16768 : $1 + 48 + ($markerIndex << 8) | 0;
   $4 = +HEAPF64[2128];
   HEAPF64[$_ZL11gMarkerInfo$arrayidx + 168 >> 3] = $4;
   $5 = +HEAPF64[2129];
   HEAPF64[$_ZL11gMarkerInfo$arrayidx + 176 >> 3] = $5;
   $6 = +HEAPF64[2130];
   HEAPF64[$_ZL11gMarkerInfo$arrayidx + 184 >> 3] = $6;
   $7 = +HEAPF64[2131];
   HEAPF64[$_ZL11gMarkerInfo$arrayidx + 192 >> 3] = $7;
   $8 = +HEAPF64[2132];
   HEAPF64[$_ZL11gMarkerInfo$arrayidx + 200 >> 3] = $8;
   $9 = +HEAPF64[2133];
   HEAPF64[$_ZL11gMarkerInfo$arrayidx + 208 >> 3] = $9;
   $10 = +HEAPF64[2134];
   HEAPF64[$_ZL11gMarkerInfo$arrayidx + 216 >> 3] = $10;
   $11 = +HEAPF64[2135];
   HEAPF64[$_ZL11gMarkerInfo$arrayidx + 224 >> 3] = $11;
   HEAPF64[$_ZL11gMarkerInfo$arrayidx + 56 >> 3] = ($4 + $6 + $8 + $10) * .25;
   HEAPF64[$_ZL11gMarkerInfo$arrayidx + 64 >> 3] = ($5 + $7 + $9 + $11) * .25;
   $retval$1 = 0;
   break;
  } else {
   $retval$1 = HEAP32[423] | 0;
   break;
  }
 } while (0);
 STACKTOP = sp;
 return $retval$1 | 0;
}

function ___mo_lookup($p, $size, $s) {
 $p = $p | 0;
 $size = $size | 0;
 $s = $s | 0;
 var $add = 0, $add16 = 0, $add42 = 0, $b$0 = 0, $call = 0, $call18 = 0, $call2 = 0, $call25 = 0, $call36 = 0, $call4 = 0, $call44 = 0, $call51 = 0, $cmp71 = 0, $div12 = 0, $div13 = 0, $div14 = 0, $mul15 = 0, $n$0 = 0, $retval$4 = 0, $sub = 0, $sub5 = 0;
 $sub = (HEAP32[$p >> 2] | 0) + 1794895138 | 0;
 $call = _swapc(HEAP32[$p + 8 >> 2] | 0, $sub) | 0;
 $call2 = _swapc(HEAP32[$p + 12 >> 2] | 0, $sub) | 0;
 $call4 = _swapc(HEAP32[$p + 16 >> 2] | 0, $sub) | 0;
 L1 : do if ($call >>> 0 < $size >>> 2 >>> 0) {
  $sub5 = $size - ($call << 2) | 0;
  if ($call2 >>> 0 < $sub5 >>> 0 & $call4 >>> 0 < $sub5 >>> 0) if (!(($call4 | $call2) & 3)) {
   $div12 = $call2 >>> 2;
   $div13 = $call4 >>> 2;
   $b$0 = 0;
   $n$0 = $call;
   while (1) {
    $div14 = $n$0 >>> 1;
    $add = $b$0 + $div14 | 0;
    $mul15 = $add << 1;
    $add16 = $mul15 + $div12 | 0;
    $call18 = _swapc(HEAP32[$p + ($add16 << 2) >> 2] | 0, $sub) | 0;
    $call25 = _swapc(HEAP32[$p + ($add16 + 1 << 2) >> 2] | 0, $sub) | 0;
    if (!($call25 >>> 0 < $size >>> 0 & $call18 >>> 0 < ($size - $call25 | 0) >>> 0)) {
     $retval$4 = 0;
     break L1;
    }
    if (HEAP8[$p + ($call25 + $call18) >> 0] | 0) {
     $retval$4 = 0;
     break L1;
    }
    $call36 = _strcmp($s, $p + $call25 | 0) | 0;
    if (!$call36) break;
    $cmp71 = ($call36 | 0) < 0;
    if (($n$0 | 0) == 1) {
     $retval$4 = 0;
     break L1;
    } else {
     $b$0 = $cmp71 ? $b$0 : $add;
     $n$0 = $cmp71 ? $div14 : $n$0 - $div14 | 0;
    }
   }
   $add42 = $mul15 + $div13 | 0;
   $call44 = _swapc(HEAP32[$p + ($add42 << 2) >> 2] | 0, $sub) | 0;
   $call51 = _swapc(HEAP32[$p + ($add42 + 1 << 2) >> 2] | 0, $sub) | 0;
   if ($call51 >>> 0 < $size >>> 0 & $call44 >>> 0 < ($size - $call51 | 0) >>> 0) $retval$4 = (HEAP8[$p + ($call51 + $call44) >> 0] | 0) == 0 ? $p + $call51 | 0 : 0; else $retval$4 = 0;
  } else $retval$4 = 0; else $retval$4 = 0;
 } else $retval$4 = 0; while (0);
 return $retval$4 | 0;
}

function __ZNSt3__26vectorINS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEENS4_IS6_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS6_RS7_EE($this, $__v) {
 $this = $this | 0;
 $__v = $__v | 0;
 var $0 = 0, $10 = 0, $12 = 0, $2 = 0, $3 = 0, $8 = 0, $__begin_2 = 0, $__end1$addr$0$i = 0, $__end_ = 0, $__end_$i$i$i$i = 0, $__end_$i$i$i$i$i = 0, $__end_6 = 0, $__first_$i$i$i = 0, $__first_$i$i$i6 = 0, $__first_$i$i$i8$i$i$i$i = 0, $add$ptr$i = 0, $incdec$ptr$i = 0;
 $0 = HEAP32[$this >> 2] | 0;
 $__end_ = $this + 4 | 0;
 $__begin_2 = $__v + 4 | 0;
 $__end1$addr$0$i = HEAP32[$__end_ >> 2] | 0;
 while (1) {
  if (($__end1$addr$0$i | 0) == ($0 | 0)) break;
  $2 = HEAP32[$__begin_2 >> 2] | 0;
  $add$ptr$i = $2 + -16 | 0;
  $incdec$ptr$i = $__end1$addr$0$i + -16 | 0;
  HEAP32[$add$ptr$i >> 2] = 0;
  $__end_$i$i$i$i$i = $2 + -12 | 0;
  HEAP32[$__end_$i$i$i$i$i >> 2] = 0;
  $3 = HEAP32[$__end1$addr$0$i + -4 >> 2] | 0;
  HEAP32[$2 + -8 >> 2] = 0;
  HEAP32[$2 + -4 >> 2] = $3;
  HEAP32[$add$ptr$i >> 2] = HEAP32[$incdec$ptr$i >> 2];
  $__end_$i$i$i$i = $__end1$addr$0$i + -12 | 0;
  HEAP32[$__end_$i$i$i$i$i >> 2] = HEAP32[$__end_$i$i$i$i >> 2];
  $__first_$i$i$i8$i$i$i$i = $__end1$addr$0$i + -8 | 0;
  HEAP32[$2 + -8 >> 2] = HEAP32[$__first_$i$i$i8$i$i$i$i >> 2];
  HEAP32[$__first_$i$i$i8$i$i$i$i >> 2] = 0;
  HEAP32[$__end_$i$i$i$i >> 2] = 0;
  HEAP32[$incdec$ptr$i >> 2] = 0;
  HEAP32[$__begin_2 >> 2] = (HEAP32[$__begin_2 >> 2] | 0) + -16;
  $__end1$addr$0$i = $incdec$ptr$i;
 }
 $8 = HEAP32[$this >> 2] | 0;
 HEAP32[$this >> 2] = HEAP32[$__begin_2 >> 2];
 HEAP32[$__begin_2 >> 2] = $8;
 $__end_6 = $__v + 8 | 0;
 $10 = HEAP32[$__end_ >> 2] | 0;
 HEAP32[$__end_ >> 2] = HEAP32[$__end_6 >> 2];
 HEAP32[$__end_6 >> 2] = $10;
 $__first_$i$i$i6 = $this + 8 | 0;
 $__first_$i$i$i = $__v + 12 | 0;
 $12 = HEAP32[$__first_$i$i$i6 >> 2] | 0;
 HEAP32[$__first_$i$i$i6 >> 2] = HEAP32[$__first_$i$i$i >> 2];
 HEAP32[$__first_$i$i$i >> 2] = $12;
 HEAP32[$__v >> 2] = HEAP32[$__begin_2 >> 2];
 return;
}

function _vfprintf($f, $fmt, $ap) {
 $f = $f | 0;
 $fmt = $fmt | 0;
 $ap = $ap | 0;
 var $$call21 = 0, $1 = 0, $4 = 0, $7 = 0, $and = 0, $ap2 = 0, $buf = 0, $buf_size = 0, $call21 = 0, $cond = 0, $internal_buf = 0, $nl_arg = 0, $nl_type = 0, $ret$1 = 0, $retval$0 = 0, $wbase = 0, $wend = 0, $wpos = 0, dest = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(224);
 $ap2 = sp + 120 | 0;
 $nl_type = sp + 80 | 0;
 $nl_arg = sp;
 $internal_buf = sp + 136 | 0;
 dest = $nl_type;
 stop = dest + 40 | 0;
 do {
  HEAP32[dest >> 2] = 0;
  dest = dest + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP32[$ap2 >> 2] = HEAP32[$ap >> 2];
 if ((_printf_core(0, $fmt, $ap2, $nl_arg, $nl_type) | 0) < 0) $retval$0 = -1; else {
  if ((HEAP32[$f + 76 >> 2] | 0) > -1) $cond = ___lockfile($f) | 0; else $cond = 0;
  $1 = HEAP32[$f >> 2] | 0;
  $and = $1 & 32;
  if ((HEAP8[$f + 74 >> 0] | 0) < 1) HEAP32[$f >> 2] = $1 & -33;
  $buf_size = $f + 48 | 0;
  if (!(HEAP32[$buf_size >> 2] | 0)) {
   $buf = $f + 44 | 0;
   $4 = HEAP32[$buf >> 2] | 0;
   HEAP32[$buf >> 2] = $internal_buf;
   $wbase = $f + 28 | 0;
   HEAP32[$wbase >> 2] = $internal_buf;
   $wpos = $f + 20 | 0;
   HEAP32[$wpos >> 2] = $internal_buf;
   HEAP32[$buf_size >> 2] = 80;
   $wend = $f + 16 | 0;
   HEAP32[$wend >> 2] = $internal_buf + 80;
   $call21 = _printf_core($f, $fmt, $ap2, $nl_arg, $nl_type) | 0;
   if (!$4) $ret$1 = $call21; else {
    FUNCTION_TABLE_iiii[HEAP32[$f + 36 >> 2] & 15]($f, 0, 0) | 0;
    $$call21 = (HEAP32[$wpos >> 2] | 0) == 0 ? -1 : $call21;
    HEAP32[$buf >> 2] = $4;
    HEAP32[$buf_size >> 2] = 0;
    HEAP32[$wend >> 2] = 0;
    HEAP32[$wbase >> 2] = 0;
    HEAP32[$wpos >> 2] = 0;
    $ret$1 = $$call21;
   }
  } else $ret$1 = _printf_core($f, $fmt, $ap2, $nl_arg, $nl_type) | 0;
  $7 = HEAP32[$f >> 2] | 0;
  HEAP32[$f >> 2] = $7 | $and;
  if ($cond | 0) ___unlockfile($f);
  $retval$0 = ($7 & 32 | 0) == 0 ? $ret$1 : -1;
 }
 STACKTOP = sp;
 return $retval$0 | 0;
}

function _arImageProcLumaHistAndOtsu($ipi, $dataPtr, $value_p) {
 $ipi = $ipi | 0;
 $dataPtr = $dataPtr | 0;
 $value_p = $value_p | 0;
 var $$pre$phiZ2D = 0, $3 = 0, $4 = 0, $add26 = 0.0, $call = 0, $cmp34 = 0, $conv6 = 0.0, $indvars$iv = 0, $indvars$iv38 = 0, $mul33 = 0.0, $retval$0 = 0, $sub = 0.0, $sub30 = 0.0, $sum$0 = 0.0, $sumB$0 = 0.0, $sumB$1 = 0.0, $threshold$0 = 0, $threshold$2 = 0, $threshold$3 = 0, $varMax$0 = 0.0, $varMax$2 = 0.0, $wB$0 = 0.0;
 $call = _arImageProcLumaHist($ipi, $dataPtr) | 0;
 if (($call | 0) < 0) $retval$0 = $call; else {
  $indvars$iv38 = 1;
  $sum$0 = 0.0;
  do {
   $sum$0 = $sum$0 + +((Math_imul(HEAP32[$ipi + 16 + ($indvars$iv38 << 2) >> 2] | 0, $indvars$iv38) | 0) >>> 0);
   $indvars$iv38 = $indvars$iv38 + 1 | 0;
  } while (($indvars$iv38 | 0) != 256);
  $conv6 = +(Math_imul(HEAP32[$ipi + 12 >> 2] | 0, HEAP32[$ipi + 8 >> 2] | 0) | 0);
  $indvars$iv = 0;
  $sumB$0 = 0.0;
  $threshold$0 = 0;
  $varMax$0 = 0.0;
  $wB$0 = 0.0;
  while (1) {
   $3 = HEAP32[$ipi + 16 + ($indvars$iv << 2) >> 2] | 0;
   $wB$0 = $wB$0 + +($3 >>> 0);
   if ($wB$0 != 0.0) {
    $sub = $conv6 - $wB$0;
    if ($sub == 0.0) {
     $threshold$3 = $threshold$0;
     break;
    }
    $add26 = $sumB$0 + +((Math_imul($indvars$iv, $3) | 0) >>> 0);
    $sub30 = $add26 / $wB$0 - ($sum$0 - $add26) / $sub;
    $mul33 = $sub30 * ($wB$0 * $sub * $sub30);
    $cmp34 = $mul33 > $varMax$0;
    $4 = $indvars$iv & 255;
    $$pre$phiZ2D = $4;
    $sumB$1 = $add26;
    $threshold$2 = $cmp34 ? $4 : $threshold$0;
    $varMax$2 = $cmp34 ? $mul33 : $varMax$0;
   } else {
    $$pre$phiZ2D = $indvars$iv & 255;
    $sumB$1 = $sumB$0;
    $threshold$2 = $threshold$0;
    $varMax$2 = $varMax$0;
   }
   if ($$pre$phiZ2D << 24 >> 24 == -1) {
    $threshold$3 = $threshold$2;
    break;
   } else {
    $indvars$iv = $indvars$iv + 1 | 0;
    $sumB$0 = $sumB$1;
    $threshold$0 = $threshold$2;
    $varMax$0 = $varMax$2;
   }
  }
  HEAP8[$value_p >> 0] = $threshold$3;
  $retval$0 = 0;
 }
 return $retval$0 | 0;
}

function __ZN10__cxxabiv112_GLOBAL__N_118parse_template_argINS0_2DbEEEPKcS4_S4_RT_($first, $last, $db) {
 $first = $first | 0;
 $last = $last | 0;
 $db = $db | 0;
 var $add$ptr = 0, $add$ptr29 = 0, $call = 0, $call17 = 0, $call30 = 0, $retval$4 = 0, $t$0 = 0;
 L1 : do if (($first | 0) == ($last | 0)) $retval$4 = $first; else {
  $add$ptr = $first + 1 | 0;
  switch (HEAP8[$first >> 0] | 0) {
  case 88:
   {
    $call = __ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($add$ptr, $last, $db) | 0;
    if (($call | 0) == ($add$ptr | 0) | ($call | 0) == ($last | 0)) {
     $retval$4 = $first;
     break L1;
    }
    $retval$4 = (HEAP8[$call >> 0] | 0) == 69 ? $call + 1 | 0 : $first;
    break L1;
    break;
   }
  case 74:
   {
    if (($add$ptr | 0) == ($last | 0)) {
     $retval$4 = $first;
     break L1;
    } else $t$0 = $add$ptr;
    while (1) {
     if ((HEAP8[$t$0 >> 0] | 0) == 69) break;
     $call17 = __ZN10__cxxabiv112_GLOBAL__N_118parse_template_argINS0_2DbEEEPKcS4_S4_RT_($t$0, $last, $db) | 0;
     if (($call17 | 0) == ($t$0 | 0)) {
      $retval$4 = $first;
      break L1;
     } else $t$0 = $call17;
    }
    $retval$4 = $t$0 + 1 | 0;
    break L1;
    break;
   }
  case 76:
   {
    if (($add$ptr | 0) != ($last | 0)) if ((HEAP8[$add$ptr >> 0] | 0) == 90) {
     $add$ptr29 = $first + 2 | 0;
     $call30 = __ZN10__cxxabiv112_GLOBAL__N_114parse_encodingINS0_2DbEEEPKcS4_S4_RT_($add$ptr29, $last, $db) | 0;
     if (($call30 | 0) == ($add$ptr29 | 0) | ($call30 | 0) == ($last | 0)) {
      $retval$4 = $first;
      break L1;
     }
     $retval$4 = (HEAP8[$call30 >> 0] | 0) == 69 ? $call30 + 1 | 0 : $first;
     break L1;
    }
    $retval$4 = __ZN10__cxxabiv112_GLOBAL__N_118parse_expr_primaryINS0_2DbEEEPKcS4_S4_RT_($first, $last, $db) | 0;
    break L1;
    break;
   }
  default:
   {
    $retval$4 = __ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($first, $last, $db) | 0;
    break L1;
   }
  }
 } while (0);
 return $retval$4 | 0;
}

function _icpGetJ_U_Xc($J_U_Xc, $matXc2U, $cameraCoord) {
 $J_U_Xc = $J_U_Xc | 0;
 $matXc2U = $matXc2U | 0;
 $cameraCoord = $cameraCoord | 0;
 var $0 = 0.0, $1 = 0.0, $11 = 0.0, $3 = 0.0, $5 = 0.0, $add11 = 0.0, $add28 = 0.0, $add45 = 0.0, $arrayidx13 = 0, $arrayidx17 = 0, $arrayidx22 = 0, $arrayidx3 = 0, $arrayidx30 = 0, $arrayidx34 = 0, $arrayidx39 = 0, $arrayidx6 = 0, $mul46 = 0.0, $retval$0 = 0;
 $0 = +HEAPF64[$matXc2U >> 3];
 $1 = +HEAPF64[$cameraCoord >> 3];
 $arrayidx3 = $matXc2U + 8 | 0;
 $3 = +HEAPF64[$cameraCoord + 8 >> 3];
 $arrayidx6 = $matXc2U + 16 | 0;
 $5 = +HEAPF64[$cameraCoord + 16 >> 3];
 $add11 = +HEAPF64[$matXc2U + 24 >> 3] + ($0 * $1 + +HEAPF64[$arrayidx3 >> 3] * $3 + +HEAPF64[$arrayidx6 >> 3] * $5);
 $arrayidx13 = $matXc2U + 32 | 0;
 $arrayidx17 = $matXc2U + 40 | 0;
 $arrayidx22 = $matXc2U + 48 | 0;
 $add28 = +HEAPF64[$matXc2U + 56 >> 3] + ($1 * +HEAPF64[$arrayidx13 >> 3] + $3 * +HEAPF64[$arrayidx17 >> 3] + $5 * +HEAPF64[$arrayidx22 >> 3]);
 $arrayidx30 = $matXc2U + 64 | 0;
 $11 = +HEAPF64[$arrayidx30 >> 3];
 $arrayidx34 = $matXc2U + 72 | 0;
 $arrayidx39 = $matXc2U + 80 | 0;
 $add45 = +HEAPF64[$matXc2U + 88 >> 3] + ($1 * $11 + $3 * +HEAPF64[$arrayidx34 >> 3] + $5 * +HEAPF64[$arrayidx39 >> 3]);
 if ($add45 == 0.0) $retval$0 = -1; else {
  $mul46 = $add45 * $add45;
  HEAPF64[$J_U_Xc >> 3] = ($0 * $add45 - $add11 * $11) / $mul46;
  HEAPF64[$J_U_Xc + 8 >> 3] = ($add45 * +HEAPF64[$arrayidx3 >> 3] - $add11 * +HEAPF64[$arrayidx34 >> 3]) / $mul46;
  HEAPF64[$J_U_Xc + 16 >> 3] = ($add45 * +HEAPF64[$arrayidx6 >> 3] - $add11 * +HEAPF64[$arrayidx39 >> 3]) / $mul46;
  HEAPF64[$J_U_Xc + 24 >> 3] = ($add45 * +HEAPF64[$arrayidx13 >> 3] - $add28 * +HEAPF64[$arrayidx30 >> 3]) / $mul46;
  HEAPF64[$J_U_Xc + 32 >> 3] = ($add45 * +HEAPF64[$arrayidx17 >> 3] - $add28 * +HEAPF64[$arrayidx34 >> 3]) / $mul46;
  HEAPF64[$J_U_Xc + 40 >> 3] = ($add45 * +HEAPF64[$arrayidx22 >> 3] - $add28 * +HEAPF64[$arrayidx39 >> 3]) / $mul46;
  $retval$0 = 0;
 }
 return $retval$0 | 0;
}

function __ZN10__cxxabiv112_GLOBAL__N_115parse_simple_idINS0_2DbEEEPKcS4_S4_RT_($first, $last, $db) {
 $first = $first | 0;
 $last = $last | 0;
 $db = $db | 0;
 var $0 = 0, $3 = 0, $4 = 0, $5 = 0, $__end_$i = 0, $add$ptr$i23 = 0, $args = 0, $call = 0, $call3 = 0, $incdec$ptr$i$i$i = 0, $retval$3 = 0, $tobool$i$i$i$i$i = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $args = sp;
 if (($first | 0) == ($last | 0)) $retval$3 = $first; else {
  $call = __ZN10__cxxabiv112_GLOBAL__N_117parse_source_nameINS0_2DbEEEPKcS4_S4_RT_($first, $last, $db) | 0;
  if (($call | 0) == ($first | 0)) $retval$3 = $first; else {
   $call3 = __ZN10__cxxabiv112_GLOBAL__N_119parse_template_argsINS0_2DbEEEPKcS4_S4_RT_($call, $last, $db) | 0;
   if (($call3 | 0) == ($call | 0)) $retval$3 = $call; else {
    $__end_$i = $db + 4 | 0;
    $0 = HEAP32[$__end_$i >> 2] | 0;
    if ((($0 - (HEAP32[$db >> 2] | 0) | 0) / 24 | 0) >>> 0 < 2) $retval$3 = $first; else {
     __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($args, $0 + -24 | 0);
     $3 = HEAP32[$__end_$i >> 2] | 0;
     $add$ptr$i23 = $3 + -24 | 0;
     $4 = $3;
     while (1) {
      if (($4 | 0) == ($add$ptr$i23 | 0)) break;
      $incdec$ptr$i$i$i = $4 + -24 | 0;
      HEAP32[$__end_$i >> 2] = $incdec$ptr$i$i$i;
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($incdec$ptr$i$i$i);
      $4 = HEAP32[$__end_$i >> 2] | 0;
     }
     $5 = HEAP8[$args + 11 >> 0] | 0;
     $tobool$i$i$i$i$i = $5 << 24 >> 24 < 0;
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($3 + -48 | 0, $tobool$i$i$i$i$i ? HEAP32[$args >> 2] | 0 : $args, $tobool$i$i$i$i$i ? HEAP32[$args + 4 >> 2] | 0 : $5 & 255) | 0;
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($args);
     $retval$3 = $call3;
    }
   }
  }
 }
 STACKTOP = sp;
 return $retval$3 | 0;
}

function __ZNSt3__2plIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEENS_12basic_stringIT_T0_T1_EERKSB_PKS8_($agg$result, $__lhs, $__rhs) {
 $agg$result = $agg$result | 0;
 $__lhs = $__lhs | 0;
 $__rhs = $__rhs | 0;
 var $0 = 0, $__i$0$i$i = 0, $__p$0$i = 0, $__size_$i$i = 0, $add = 0, $and$i$i$i = 0, $call$i$i = 0, $call1 = 0, $cond$i = 0, $cond$i$i = 0, $ref$tmp$i = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $ref$tmp$i = sp;
 HEAP32[$agg$result >> 2] = 0;
 HEAP32[$agg$result + 4 >> 2] = 0;
 HEAP32[$agg$result + 8 >> 2] = 0;
 $__i$0$i$i = 0;
 while (1) {
  if (($__i$0$i$i | 0) == 3) break;
  HEAP32[$agg$result + ($__i$0$i$i << 2) >> 2] = 0;
  $__i$0$i$i = $__i$0$i$i + 1 | 0;
 }
 $__size_$i$i = $__lhs + 11 | 0;
 $0 = HEAP8[$__size_$i$i >> 0] | 0;
 $cond$i = $0 << 24 >> 24 < 0 ? HEAP32[$__lhs + 4 >> 2] | 0 : $0 & 255;
 $call1 = __ZNSt3__211char_traitsIcE6lengthEPKc($__rhs) | 0;
 $cond$i$i = (HEAP8[$__size_$i$i >> 0] | 0) < 0 ? HEAP32[$__lhs >> 2] | 0 : $__lhs;
 $add = $cond$i + $call1 | 0;
 if ($add >>> 0 > 4294967279) __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($agg$result);
 if ($add >>> 0 < 11) {
  HEAP8[$agg$result + 11 >> 0] = $cond$i;
  $__p$0$i = $agg$result;
 } else {
  $and$i$i$i = $add + 16 & -16;
  $call$i$i = __ZN10__cxxabiv112_GLOBAL__N_112malloc_allocIcE8allocateEj($and$i$i$i) | 0;
  HEAP32[$agg$result >> 2] = $call$i$i;
  HEAP32[$agg$result + 8 >> 2] = $and$i$i$i | -2147483648;
  HEAP32[$agg$result + 4 >> 2] = $cond$i;
  $__p$0$i = $call$i$i;
 }
 __ZNSt3__211char_traitsIcE4copyEPcPKcj($__p$0$i, $cond$i$i, $cond$i) | 0;
 HEAP8[$ref$tmp$i >> 0] = 0;
 __ZNSt3__211char_traitsIcE6assignERcRKc($__p$0$i + $cond$i | 0, $ref$tmp$i);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($agg$result, $__rhs, $call1) | 0;
 STACKTOP = sp;
 return;
}

function __ZN10__cxxabiv112_GLOBAL__N_18demangleINS0_2DbEEEvPKcS4_RT_Ri($first, $last, $db, $status) {
 $first = $first | 0;
 $last = $last | 0;
 $db = $db | 0;
 $status = $status | 0;
 var $add$ptr = 0, $add$ptr33 = 0, $call = 0, $call34 = 0, $t$0 = 0;
 L1 : do if ($first >>> 0 < $last >>> 0) {
  L3 : do if ((HEAP8[$first >> 0] | 0) == 95) {
   if (($last - $first | 0) <= 3) {
    HEAP32[$status >> 2] = -2;
    break L1;
   }
   $add$ptr = $first + 2 | 0;
   switch (HEAP8[$first + 1 >> 0] | 0) {
   case 90:
    {
     $call = __ZN10__cxxabiv112_GLOBAL__N_114parse_encodingINS0_2DbEEEPKcS4_S4_RT_($add$ptr, $last, $db) | 0;
     if (($call | 0) == ($add$ptr | 0) | ($call | 0) == ($last | 0)) $t$0 = $call; else if ((HEAP8[$call >> 0] | 0) == 46) $t$0 = __ZN10__cxxabiv112_GLOBAL__N_116parse_dot_suffixINS0_2DbEEEPKcS4_S4_RT_($call, $last, $db) | 0; else $t$0 = $call;
     if (($t$0 | 0) == ($last | 0)) break L3;
     HEAP32[$status >> 2] = -2;
     break L1;
     break;
    }
   case 95:
    {
     if ((HEAP8[$add$ptr >> 0] | 0) == 95) if ((HEAP8[$first + 3 >> 0] | 0) == 90) {
      $add$ptr33 = $first + 4 | 0;
      $call34 = __ZN10__cxxabiv112_GLOBAL__N_114parse_encodingINS0_2DbEEEPKcS4_S4_RT_($add$ptr33, $last, $db) | 0;
      if (!(($call34 | 0) == ($add$ptr33 | 0) | ($call34 | 0) == ($last | 0))) if ((__ZN10__cxxabiv112_GLOBAL__N_118parse_block_invokeINS0_2DbEEEPKcS4_S4_RT_($call34, $last, $db) | 0) == ($last | 0)) break L3;
      HEAP32[$status >> 2] = -2;
      break L1;
     }
     break;
    }
   default:
    {}
   }
   HEAP32[$status >> 2] = -2;
   break L1;
  } else if ((__ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($first, $last, $db) | 0) != ($last | 0)) {
   HEAP32[$status >> 2] = -2;
   break L1;
  } while (0);
  if (!(HEAP32[$status >> 2] | 0)) if ((HEAP32[$db >> 2] | 0) == (HEAP32[$db + 4 >> 2] | 0)) HEAP32[$status >> 2] = -2;
 } else HEAP32[$status >> 2] = -2; while (0);
 return;
}

function __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKcj($this, $__pos, $__s, $__n) {
 $this = $this | 0;
 $__pos = $__pos | 0;
 $__s = $__s | 0;
 $__n = $__n | 0;
 var $0 = 0, $__s$addr$1 = 0, $__size_$i$i = 0, $add = 0, $add$ptr = 0, $cond$i = 0, $cond$i42 = 0, $cond$i48 = 0, $ref$tmp = 0, $sub8 = 0, $tobool$i$i = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $ref$tmp = sp;
 $__size_$i$i = $this + 11 | 0;
 $0 = HEAP8[$__size_$i$i >> 0] | 0;
 $tobool$i$i = $0 << 24 >> 24 < 0;
 if ($tobool$i$i) $cond$i = HEAP32[$this + 4 >> 2] | 0; else $cond$i = $0 & 255;
 if ($cond$i >>> 0 < $__pos >>> 0) __ZNKSt3__221__basic_string_commonILb1EE20__throw_out_of_rangeEv($this);
 if ($tobool$i$i) $cond$i42 = (HEAP32[$this + 8 >> 2] & 2147483647) + -1 | 0; else $cond$i42 = 10;
 $add = $cond$i + $__n | 0;
 if (($cond$i42 - $cond$i | 0) >>> 0 < $__n >>> 0) __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE21__grow_by_and_replaceEjjjjjjPKc($this, $cond$i42, $add - $cond$i42 | 0, $cond$i, $__pos, 0, $__n, $__s); else if ($__n | 0) {
  if ($tobool$i$i) $cond$i48 = HEAP32[$this >> 2] | 0; else $cond$i48 = $this;
  $sub8 = $cond$i - $__pos | 0;
  $add$ptr = $cond$i48 + $__pos | 0;
  if (!$sub8) $__s$addr$1 = $__s; else {
   __ZNSt3__211char_traitsIcE4moveEPcPKcj($add$ptr + $__n | 0, $add$ptr, $sub8) | 0;
   $__s$addr$1 = $add$ptr >>> 0 <= $__s >>> 0 & ($cond$i48 + $cond$i | 0) >>> 0 > $__s >>> 0 ? $__s + $__n | 0 : $__s;
  }
  __ZNSt3__211char_traitsIcE4moveEPcPKcj($add$ptr, $__s$addr$1, $__n) | 0;
  if ((HEAP8[$__size_$i$i >> 0] | 0) < 0) HEAP32[$this + 4 >> 2] = $add; else HEAP8[$__size_$i$i >> 0] = $add;
  HEAP8[$ref$tmp >> 0] = 0;
  __ZNSt3__211char_traitsIcE6assignERcRKc($cond$i48 + $add | 0, $ref$tmp);
 }
 STACKTOP = sp;
 return $this | 0;
}

function __ZNSt3__2plIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEENS_12basic_stringIT_T0_T1_EEPKS8_RKSB_($agg$result, $__lhs, $__rhs) {
 $agg$result = $agg$result | 0;
 $__lhs = $__lhs | 0;
 $__rhs = $__rhs | 0;
 var $0 = 0, $__i$0$i$i = 0, $__p$0$i = 0, $__size_$i$i = 0, $add = 0, $and$i$i$i = 0, $call = 0, $call$i$i = 0, $cond$i = 0, $ref$tmp$i = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $ref$tmp$i = sp;
 HEAP32[$agg$result >> 2] = 0;
 HEAP32[$agg$result + 4 >> 2] = 0;
 HEAP32[$agg$result + 8 >> 2] = 0;
 $__i$0$i$i = 0;
 while (1) {
  if (($__i$0$i$i | 0) == 3) break;
  HEAP32[$agg$result + ($__i$0$i$i << 2) >> 2] = 0;
  $__i$0$i$i = $__i$0$i$i + 1 | 0;
 }
 $call = __ZNSt3__211char_traitsIcE6lengthEPKc($__lhs) | 0;
 $__size_$i$i = $__rhs + 11 | 0;
 $0 = HEAP8[$__size_$i$i >> 0] | 0;
 $cond$i = $0 << 24 >> 24 < 0 ? HEAP32[$__rhs + 4 >> 2] | 0 : $0 & 255;
 $add = $cond$i + $call | 0;
 if ($add >>> 0 > 4294967279) __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($agg$result);
 if ($add >>> 0 < 11) {
  HEAP8[$agg$result + 11 >> 0] = $call;
  $__p$0$i = $agg$result;
 } else {
  $and$i$i$i = $add + 16 & -16;
  $call$i$i = __ZN10__cxxabiv112_GLOBAL__N_112malloc_allocIcE8allocateEj($and$i$i$i) | 0;
  HEAP32[$agg$result >> 2] = $call$i$i;
  HEAP32[$agg$result + 8 >> 2] = $and$i$i$i | -2147483648;
  HEAP32[$agg$result + 4 >> 2] = $call;
  $__p$0$i = $call$i$i;
 }
 __ZNSt3__211char_traitsIcE4copyEPcPKcj($__p$0$i, $__lhs, $call) | 0;
 HEAP8[$ref$tmp$i >> 0] = 0;
 __ZNSt3__211char_traitsIcE6assignERcRKc($__p$0$i + $call | 0, $ref$tmp$i);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($agg$result, (HEAP8[$__size_$i$i >> 0] | 0) < 0 ? HEAP32[$__rhs >> 2] | 0 : $__rhs, $cond$i) | 0;
 STACKTOP = sp;
 return;
}

function __ZNSt3__26vectorINS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEENS4_IS6_Lj4096EEEE24__emplace_back_slow_pathIJS5_EEEvDpOT_($this, $__args) {
 $this = $this | 0;
 $__args = $__args | 0;
 var $3 = 0, $5 = 0, $6 = 0, $__end_ = 0, $__end_$i = 0, $__v = 0, $add = 0, $call$i = 0, $mul$i = 0, $sub$ptr$sub$i$i$i = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 $__v = sp;
 $__end_$i = $this + 4 | 0;
 $add = ((HEAP32[$__end_$i >> 2] | 0) - (HEAP32[$this >> 2] | 0) >> 4) + 1 | 0;
 $call$i = __ZNKSt3__26vectorINS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEENS4_IS6_Lj4096EEEE8max_sizeEv($this) | 0;
 if ($call$i >>> 0 < $add >>> 0) __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv($this); else {
  $3 = HEAP32[$this >> 2] | 0;
  $sub$ptr$sub$i$i$i = (HEAP32[$this + 8 >> 2] | 0) - $3 | 0;
  $mul$i = $sub$ptr$sub$i$i$i >> 3;
  __ZNSt3__214__split_bufferINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEERNS5_IS7_Lj4096EEEEC2EjjS9_($__v, $sub$ptr$sub$i$i$i >> 4 >>> 0 < $call$i >>> 1 >>> 0 ? ($mul$i >>> 0 < $add >>> 0 ? $add : $mul$i) : $call$i, (HEAP32[$__end_$i >> 2] | 0) - $3 >> 4, $this + 12 | 0);
  $__end_ = $__v + 8 | 0;
  $5 = HEAP32[$__end_ >> 2] | 0;
  HEAP32[$5 >> 2] = 0;
  HEAP32[$5 + 4 >> 2] = 0;
  $6 = HEAP32[$__args >> 2] | 0;
  HEAP32[$5 + 8 >> 2] = 0;
  HEAP32[$5 + 12 >> 2] = $6;
  HEAP32[$__end_ >> 2] = $5 + 16;
  __ZNSt3__26vectorINS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEENS4_IS6_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS6_RS7_EE($this, $__v);
  __ZNSt3__214__split_bufferINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEERNS5_IS7_Lj4096EEEED2Ev($__v);
  STACKTOP = sp;
  return;
 }
}

function __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE24__emplace_back_slow_pathIJEEEvDpOT_($this) {
 $this = $this | 0;
 var $3 = 0, $5 = 0, $__end_ = 0, $__end_$i = 0, $__v = 0, $add = 0, $call$i = 0, $mul$i = 0, $sub$ptr$div$i$i$i = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 $__v = sp;
 $__end_$i = $this + 4 | 0;
 $add = (((HEAP32[$__end_$i >> 2] | 0) - (HEAP32[$this >> 2] | 0) | 0) / 24 | 0) + 1 | 0;
 $call$i = __ZNKSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE8max_sizeEv($this) | 0;
 if ($call$i >>> 0 < $add >>> 0) __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv($this); else {
  $3 = HEAP32[$this >> 2] | 0;
  $sub$ptr$div$i$i$i = ((HEAP32[$this + 8 >> 2] | 0) - $3 | 0) / 24 | 0;
  $mul$i = $sub$ptr$div$i$i$i << 1;
  __ZNSt3__214__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v, $sub$ptr$div$i$i$i >>> 0 < $call$i >>> 1 >>> 0 ? ($mul$i >>> 0 < $add >>> 0 ? $add : $mul$i) : $call$i, ((HEAP32[$__end_$i >> 2] | 0) - $3 | 0) / 24 | 0, $this + 12 | 0);
  $__end_ = $__v + 8 | 0;
  $5 = HEAP32[$__end_ >> 2] | 0;
  HEAP32[$5 >> 2] = 0;
  HEAP32[$5 + 4 >> 2] = 0;
  HEAP32[$5 + 8 >> 2] = 0;
  HEAP32[$5 + 12 >> 2] = 0;
  HEAP32[$5 + 16 >> 2] = 0;
  HEAP32[$5 + 20 >> 2] = 0;
  __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2Ev($5);
  HEAP32[$__end_ >> 2] = $5 + 24;
  __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($this, $__v);
  __ZNSt3__214__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v);
  STACKTOP = sp;
  return;
 }
}

function _teardown($id) {
 $id = $id | 0;
 var $0 = 0, $3 = 0, $__end_$i = 0, $call7 = 0, $i$0 = 0, $id$addr = 0, $multi_markers = 0, $retval$0 = 0, $videoFrame = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $id$addr = sp;
 HEAP32[$id$addr >> 2] = $id;
 if (!(__ZNSt3__212__hash_tableINS_17__hash_value_typeIi12arControllerEENS_22__unordered_map_hasherIiS3_NS_4hashIiEELb1EEENS_21__unordered_map_equalIiS3_NS_8equal_toIiEELb1EEENS_9allocatorIS3_EEE4findIiEENS_15__hash_iteratorIPNS_11__hash_nodeIS3_PvEEEERKT_(17144, $id$addr) | 0)) $retval$0 = -1; else {
  $call7 = __ZNSt3__213unordered_mapIi12arControllerNS_4hashIiEENS_8equal_toIiEENS_9allocatorINS_4pairIKiS1_EEEEEixERS8_(17144, $id$addr) | 0;
  $videoFrame = $call7 + 196 | 0;
  $0 = HEAP32[$videoFrame >> 2] | 0;
  if ($0 | 0) {
   _free($0);
   HEAP32[$videoFrame >> 2] = 0;
   HEAP32[$call7 + 200 >> 2] = 0;
  }
  _deleteHandle($call7);
  _arPattDeleteHandle(HEAP32[$call7 + 216 >> 2] | 0) | 0;
  __ZNSt3__212__hash_tableINS_17__hash_value_typeIi12arControllerEENS_22__unordered_map_hasherIiS3_NS_4hashIiEELb1EEENS_21__unordered_map_equalIiS3_NS_8equal_toIiEELb1EEENS_9allocatorIS3_EEE14__erase_uniqueIiEEjRKT_(17144, $id$addr) | 0;
  $multi_markers = $call7 + 248 | 0;
  $__end_$i = $call7 + 252 | 0;
  $i$0 = 0;
  while (1) {
   $3 = HEAP32[$multi_markers >> 2] | 0;
   if ($i$0 >>> 0 >= (HEAP32[$__end_$i >> 2] | 0) - $3 >> 3 >>> 0) break;
   _arMultiFreeConfig(HEAP32[$3 + ($i$0 << 3) + 4 >> 2] | 0) | 0;
   $i$0 = $i$0 + 1 | 0;
  }
  __ZNSt3__213__vector_baseI12multi_markerNS_9allocatorIS1_EEED2Ev($multi_markers);
  __ZdlPv($multi_markers);
  __ZN12arControllerD2Ev($call7);
  __ZdlPv($call7);
  $retval$0 = 0;
 }
 STACKTOP = sp;
 return $retval$0 | 0;
}

function _strspn($s, $c) {
 $s = $s | 0;
 $c = $c | 0;
 var $0 = 0, $3 = 0, $5 = 0, $8 = 0, $arrayidx12 = 0, $byteset = 0, $c$addr$022 = 0, $incdec$ptr32 = 0, $retval$0 = 0, $s$addr$0 = 0, $s$addr$1$lcssa = 0, $s$addr$119 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 $byteset = sp;
 HEAP32[$byteset >> 2] = 0;
 HEAP32[$byteset + 4 >> 2] = 0;
 HEAP32[$byteset + 8 >> 2] = 0;
 HEAP32[$byteset + 12 >> 2] = 0;
 HEAP32[$byteset + 16 >> 2] = 0;
 HEAP32[$byteset + 20 >> 2] = 0;
 HEAP32[$byteset + 24 >> 2] = 0;
 HEAP32[$byteset + 28 >> 2] = 0;
 $0 = HEAP8[$c >> 0] | 0;
 do if (!($0 << 24 >> 24)) $retval$0 = 0; else {
  if (!(HEAP8[$c + 1 >> 0] | 0)) {
   $s$addr$0 = $s;
   while (1) if ((HEAP8[$s$addr$0 >> 0] | 0) == $0 << 24 >> 24) $s$addr$0 = $s$addr$0 + 1 | 0; else break;
   $retval$0 = $s$addr$0 - $s | 0;
   break;
  } else {
   $5 = $0;
   $c$addr$022 = $c;
  }
  do {
   $arrayidx12 = $byteset + ((($5 & 255) >>> 5 & 255) << 2) | 0;
   HEAP32[$arrayidx12 >> 2] = HEAP32[$arrayidx12 >> 2] | 1 << ($5 & 31);
   $c$addr$022 = $c$addr$022 + 1 | 0;
   $5 = HEAP8[$c$addr$022 >> 0] | 0;
  } while ($5 << 24 >> 24 != 0);
  $3 = HEAP8[$s >> 0] | 0;
  L10 : do if (!($3 << 24 >> 24)) $s$addr$1$lcssa = $s; else {
   $8 = $3;
   $s$addr$119 = $s;
   while (1) {
    if (!(HEAP32[$byteset + ((($8 & 255) >>> 5 & 255) << 2) >> 2] & 1 << ($8 & 31))) {
     $s$addr$1$lcssa = $s$addr$119;
     break L10;
    }
    $incdec$ptr32 = $s$addr$119 + 1 | 0;
    $8 = HEAP8[$incdec$ptr32 >> 0] | 0;
    if (!($8 << 24 >> 24)) {
     $s$addr$1$lcssa = $incdec$ptr32;
     break;
    } else $s$addr$119 = $incdec$ptr32;
   }
  } while (0);
  $retval$0 = $s$addr$1$lcssa - $s | 0;
 } while (0);
 STACKTOP = sp;
 return $retval$0 | 0;
}

function _confidenceCutoff($arHandle) {
 $arHandle = $arHandle | 0;
 var $1 = 0, $cfOK$0 = 0, $i$0 = 0, $i$1 = 0, $i$2 = 0, $id = 0, $id25 = 0, $idMatrix66 = 0, $idPatt52 = 0;
 $1 = HEAP32[$arHandle + 44 >> 2] | 0;
 L1 : do switch (HEAP32[$arHandle + 24 >> 2] | 0) {
 case 1:
 case 0:
  {
   $i$0 = 0;
   while (1) {
    if (($i$0 | 0) >= ($1 | 0)) break L1;
    $id = $arHandle + 48 + ($i$0 << 8) + 4 | 0;
    if ((HEAP32[$id >> 2] | 0) > -1) if (+HEAPF64[$arHandle + 48 + ($i$0 << 8) + 32 >> 3] < .5) {
     HEAP32[$arHandle + 48 + ($i$0 << 8) + 8 >> 2] = -1;
     HEAP32[$id >> 2] = -1;
     HEAP32[$arHandle + 48 + ($i$0 << 8) + 236 >> 2] = 6;
    }
    $i$0 = $i$0 + 1 | 0;
   }
   break;
  }
 case 2:
  {
   $i$1 = 0;
   while (1) {
    if (($i$1 | 0) >= ($1 | 0)) break L1;
    $id25 = $arHandle + 48 + ($i$1 << 8) + 4 | 0;
    if ((HEAP32[$id25 >> 2] | 0) > -1) if (+HEAPF64[$arHandle + 48 + ($i$1 << 8) + 32 >> 3] < .5) {
     HEAP32[$arHandle + 48 + ($i$1 << 8) + 12 >> 2] = -1;
     HEAP32[$id25 >> 2] = -1;
     HEAP32[$arHandle + 48 + ($i$1 << 8) + 236 >> 2] = 6;
    }
    $i$1 = $i$1 + 1 | 0;
   }
   break;
  }
 default:
  {
   $i$2 = 0;
   while (1) {
    if (($i$2 | 0) >= ($1 | 0)) break L1;
    $idPatt52 = $arHandle + 48 + ($i$2 << 8) + 8 | 0;
    if ((HEAP32[$idPatt52 >> 2] | 0) > -1) if (+HEAPF64[$arHandle + 48 + ($i$2 << 8) + 40 >> 3] < .5) {
     HEAP32[$idPatt52 >> 2] = -1;
     $cfOK$0 = 0;
    } else $cfOK$0 = 1; else $cfOK$0 = 1;
    $idMatrix66 = $arHandle + 48 + ($i$2 << 8) + 12 | 0;
    if ((HEAP32[$idMatrix66 >> 2] | 0) > -1) if (+HEAPF64[$arHandle + 48 + ($i$2 << 8) + 48 >> 3] < .5) {
     HEAP32[$idMatrix66 >> 2] = -1;
     if (!$cfOK$0) HEAP32[$arHandle + 48 + ($i$2 << 8) + 236 >> 2] = 6;
    }
    $i$2 = $i$2 + 1 | 0;
   }
  }
 } while (0);
 return;
}

function _fread($destv, $size, $nmemb, $f) {
 $destv = $destv | 0;
 $size = $size | 0;
 $nmemb = $nmemb | 0;
 $f = $f | 0;
 var $$nmemb = 0, $3 = 0, $call33 = 0, $cond = 0, $conv = 0, $dest$0$ph = 0, $dest$046 = 0, $l$0$ph = 0, $l$047 = 0, $mode = 0, $mul = 0, $read = 0, $retval$0 = 0, $rpos = 0, $sub$ptr$sub = 0, $sub$ptr$sub$mul = 0, $sub44 = 0, label = 0;
 $mul = Math_imul($nmemb, $size) | 0;
 $$nmemb = ($size | 0) == 0 ? 0 : $nmemb;
 if ((HEAP32[$f + 76 >> 2] | 0) > -1) $cond = ___lockfile($f) | 0; else $cond = 0;
 $mode = $f + 74 | 0;
 $conv = HEAP8[$mode >> 0] | 0;
 HEAP8[$mode >> 0] = $conv + 255 | $conv;
 $rpos = $f + 4 | 0;
 $3 = HEAP32[$rpos >> 2] | 0;
 $sub$ptr$sub = (HEAP32[$f + 8 >> 2] | 0) - $3 | 0;
 $sub$ptr$sub$mul = $sub$ptr$sub >>> 0 < $mul >>> 0 ? $sub$ptr$sub : $mul;
 if (($sub$ptr$sub | 0) > 0) {
  _memcpy($destv | 0, $3 | 0, $sub$ptr$sub$mul | 0) | 0;
  HEAP32[$rpos >> 2] = $3 + $sub$ptr$sub$mul;
  $dest$0$ph = $destv + $sub$ptr$sub$mul | 0;
  $l$0$ph = $mul - $sub$ptr$sub$mul | 0;
 } else {
  $dest$0$ph = $destv;
  $l$0$ph = $mul;
 }
 L7 : do if (!$l$0$ph) label = 13; else {
  $read = $f + 32 | 0;
  $dest$046 = $dest$0$ph;
  $l$047 = $l$0$ph;
  while (1) {
   if (___toread($f) | 0) break;
   $call33 = FUNCTION_TABLE_iiii[HEAP32[$read >> 2] & 15]($f, $dest$046, $l$047) | 0;
   if (($call33 + 1 | 0) >>> 0 < 2) break;
   $sub44 = $l$047 - $call33 | 0;
   if (!$sub44) {
    label = 13;
    break L7;
   } else {
    $dest$046 = $dest$046 + $call33 | 0;
    $l$047 = $sub44;
   }
  }
  if ($cond | 0) ___unlockfile($f);
  $retval$0 = (($mul - $l$047 | 0) >>> 0) / ($size >>> 0) | 0;
 } while (0);
 if ((label | 0) == 13) if (!$cond) $retval$0 = $$nmemb; else {
  ___unlockfile($f);
  $retval$0 = $$nmemb;
 }
 return $retval$0 | 0;
}

function __ZL25default_terminate_handlerv() {
 var $0 = 0, $1 = 0, $15 = 0, $16 = 0, $18 = 0, $19 = 0, $3 = 0, $6 = 0, $call = 0, $call10 = 0, $call14 = 0, $cond = 0, $thrown_object = 0, $vararg_buffer = 0, $vararg_buffer10 = 0, $vararg_buffer3 = 0, $vararg_buffer7 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48);
 $vararg_buffer10 = sp + 32 | 0;
 $vararg_buffer7 = sp + 24 | 0;
 $vararg_buffer3 = sp + 16 | 0;
 $vararg_buffer = sp;
 $thrown_object = sp + 36 | 0;
 $call = ___cxa_get_globals_fast() | 0;
 if ($call | 0) {
  $0 = HEAP32[$call >> 2] | 0;
  if ($0 | 0) {
   $1 = $0 + 48 | 0;
   $3 = HEAP32[$1 >> 2] | 0;
   $6 = HEAP32[$1 + 4 >> 2] | 0;
   if (!(($3 & -256 | 0) == 1126902528 & ($6 | 0) == 1129074247)) {
    HEAP32[$vararg_buffer7 >> 2] = HEAP32[766];
    _abort_message(14316, $vararg_buffer7);
   }
   if (($3 | 0) == 1126902529 & ($6 | 0) == 1129074247) $cond = HEAP32[$0 + 44 >> 2] | 0; else $cond = $0 + 80 | 0;
   HEAP32[$thrown_object >> 2] = $cond;
   $15 = HEAP32[$0 >> 2] | 0;
   $16 = HEAP32[$15 + 4 >> 2] | 0;
   $call10 = FUNCTION_TABLE_iiii[HEAP32[(HEAP32[48] | 0) + 16 >> 2] & 15](192, $15, $thrown_object) | 0;
   $18 = HEAP32[766] | 0;
   if ($call10) {
    $19 = HEAP32[$thrown_object >> 2] | 0;
    $call14 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$19 >> 2] | 0) + 8 >> 2] & 31]($19) | 0;
    HEAP32[$vararg_buffer >> 2] = $18;
    HEAP32[$vararg_buffer + 4 >> 2] = $16;
    HEAP32[$vararg_buffer + 8 >> 2] = $call14;
    _abort_message(14230, $vararg_buffer);
   } else {
    HEAP32[$vararg_buffer3 >> 2] = $18;
    HEAP32[$vararg_buffer3 + 4 >> 2] = $16;
    _abort_message(14275, $vararg_buffer3);
   }
  }
 }
 _abort_message(14354, $vararg_buffer10);
}

function __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE9push_backEc($this, $__c) {
 $this = $this | 0;
 $__c = $__c | 0;
 var $0 = 0, $4 = 0, $__c$addr = 0, $__cap$0 = 0, $__p$0 = 0, $__size_$i = 0, $__sz$0 = 0, $add = 0, $add22 = 0, $add23 = 0, $add24 = 0, $call12$pn = 0, $ref$tmp = 0, $tobool$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $__c$addr = sp;
 $ref$tmp = sp + 1 | 0;
 HEAP8[$__c$addr >> 0] = $__c;
 $__size_$i = $this + 11 | 0;
 $0 = HEAP8[$__size_$i >> 0] | 0;
 $tobool$i = $0 << 24 >> 24 < 0;
 if ($tobool$i) {
  $__cap$0 = (HEAP32[$this + 8 >> 2] & 2147483647) + -1 | 0;
  $__sz$0 = HEAP32[$this + 4 >> 2] | 0;
 } else {
  $__cap$0 = 10;
  $__sz$0 = $0 & 255;
 }
 if (($__sz$0 | 0) == ($__cap$0 | 0)) {
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE9__grow_byEjjjjjj($this, $__cap$0, 1, $__cap$0, $__cap$0, 0);
  $add22 = $__cap$0 + 1 | 0;
  if ((HEAP8[$__size_$i >> 0] | 0) < 0) {
   $add23 = $add22;
   label = 8;
  } else {
   $add24 = $add22;
   label = 7;
  }
 } else {
  $add = $__sz$0 + 1 | 0;
  if ($tobool$i) {
   $add23 = $add;
   label = 8;
  } else {
   $add24 = $add;
   label = 7;
  }
 }
 if ((label | 0) == 7) {
  HEAP8[$__size_$i >> 0] = $add24;
  $call12$pn = $this;
 } else if ((label | 0) == 8) {
  $4 = HEAP32[$this >> 2] | 0;
  HEAP32[$this + 4 >> 2] = $add23;
  $call12$pn = $4;
 }
 $__p$0 = $call12$pn + $__sz$0 | 0;
 __ZNSt3__211char_traitsIcE6assignERcRKc($__p$0, $__c$addr);
 HEAP8[$ref$tmp >> 0] = 0;
 __ZNSt3__211char_traitsIcE6assignERcRKc($__p$0 + 1 | 0, $ref$tmp);
 STACKTOP = sp;
 return;
}

function _sift($head, $width, $cmp, $pshift, $lp) {
 $head = $head | 0;
 $width = $width | 0;
 $cmp = $cmp | 0;
 $pshift = $pshift | 0;
 $lp = $lp | 0;
 var $1 = 0, $add$ptr = 0, $add$ptr6 = 0, $ar = 0, $arrayidx15 = 0, $head$addr$0$be = 0, $head$addr$023 = 0, $i$0$lcssa = 0, $i$024 = 0, $idx$neg = 0, $inc = 0, $pshift$addr$0$be = 0, $pshift$addr$022 = 0, $sub = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(240);
 $ar = sp;
 HEAP32[$ar >> 2] = $head;
 L1 : do if (($pshift | 0) > 1) {
  $idx$neg = 0 - $width | 0;
  $1 = $head;
  $head$addr$023 = $head;
  $i$024 = 1;
  $pshift$addr$022 = $pshift;
  while (1) {
   $add$ptr = $head$addr$023 + $idx$neg | 0;
   $sub = $pshift$addr$022 + -2 | 0;
   $add$ptr6 = $add$ptr + (0 - (HEAP32[$lp + ($sub << 2) >> 2] | 0)) | 0;
   if ((FUNCTION_TABLE_iii[$cmp & 15]($1, $add$ptr6) | 0) > -1) if ((FUNCTION_TABLE_iii[$cmp & 15]($1, $add$ptr) | 0) > -1) {
    $i$0$lcssa = $i$024;
    break L1;
   }
   $inc = $i$024 + 1 | 0;
   $arrayidx15 = $ar + ($i$024 << 2) | 0;
   if ((FUNCTION_TABLE_iii[$cmp & 15]($add$ptr6, $add$ptr) | 0) > -1) {
    HEAP32[$arrayidx15 >> 2] = $add$ptr6;
    $head$addr$0$be = $add$ptr6;
    $pshift$addr$0$be = $pshift$addr$022 + -1 | 0;
   } else {
    HEAP32[$arrayidx15 >> 2] = $add$ptr;
    $head$addr$0$be = $add$ptr;
    $pshift$addr$0$be = $sub;
   }
   if (($pshift$addr$0$be | 0) <= 1) {
    $i$0$lcssa = $inc;
    break L1;
   }
   $1 = HEAP32[$ar >> 2] | 0;
   $head$addr$023 = $head$addr$0$be;
   $i$024 = $inc;
   $pshift$addr$022 = $pshift$addr$0$be;
  }
 } else $i$0$lcssa = 1; while (0);
 _cycle($width, $ar, $i$0$lcssa);
 STACKTOP = sp;
 return;
}

function _get_vertex($x_coord, $y_coord, $st, $ed, $thresh, $vertex, $vnum) {
 $x_coord = $x_coord | 0;
 $y_coord = $y_coord | 0;
 $st = $st | 0;
 $ed = $ed | 0;
 $thresh = +$thresh;
 $vertex = $vertex | 0;
 $vnum = $vnum | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $6 = 0, $add = 0, $add21 = 0.0, $cmp23 = 0, $conv = 0.0, $conv12 = 0.0, $conv5 = 0.0, $dmax$0 = 0.0, $i$0 = 0, $mul22 = 0.0, $retval$0 = 0, $v1$0 = 0, $v1$1 = 0, label = 0;
 $0 = HEAP32[$y_coord + ($ed << 2) >> 2] | 0;
 $1 = HEAP32[$y_coord + ($st << 2) >> 2] | 0;
 $conv = +($0 - $1 | 0);
 $2 = HEAP32[$x_coord + ($st << 2) >> 2] | 0;
 $3 = HEAP32[$x_coord + ($ed << 2) >> 2] | 0;
 $conv5 = +($2 - $3 | 0);
 $conv12 = +((Math_imul($3, $1) | 0) - (Math_imul($2, $0) | 0) | 0);
 $add = $st + 1 | 0;
 $dmax$0 = 0.0;
 $i$0 = $add;
 $v1$0 = $add;
 while (1) {
  if (($i$0 | 0) >= ($ed | 0)) break;
  $add21 = $conv12 + ($conv * +(HEAP32[$x_coord + ($i$0 << 2) >> 2] | 0) + $conv5 * +(HEAP32[$y_coord + ($i$0 << 2) >> 2] | 0));
  $mul22 = $add21 * $add21;
  $cmp23 = $mul22 > $dmax$0;
  $v1$1 = $cmp23 ? $i$0 : $v1$0;
  $dmax$0 = $cmp23 ? $mul22 : $dmax$0;
  $i$0 = $i$0 + 1 | 0;
  $v1$0 = $v1$1;
 }
 if ($dmax$0 / ($conv * $conv + $conv5 * $conv5) > $thresh) if ((_get_vertex($x_coord, $y_coord, $st, $v1$0, $thresh, $vertex, $vnum) | 0) < 0) $retval$0 = -1; else {
  $6 = HEAP32[$vnum >> 2] | 0;
  if (($6 | 0) > 5) $retval$0 = -1; else {
   HEAP32[$vertex + ($6 << 2) >> 2] = $v1$0;
   HEAP32[$vnum >> 2] = (HEAP32[$vnum >> 2] | 0) + 1;
   if ((_get_vertex($x_coord, $y_coord, $v1$0, $ed, $thresh, $vertex, $vnum) | 0) < 0) $retval$0 = -1; else label = 8;
  }
 } else label = 8;
 if ((label | 0) == 8) $retval$0 = 0;
 return $retval$0 | 0;
}

function ___strchrnul($s, $c) {
 $s = $s | 0;
 $c = $c | 0;
 var $1 = 0, $2 = 0, $4 = 0, $5 = 0, $7 = 0, $8 = 0, $conv1 = 0, $incdec$ptr = 0, $incdec$ptr19 = 0, $mul = 0, $retval$0 = 0, $s$addr$0$lcssa = 0, $s$addr$036 = 0, $s$addr$1 = 0, $w$0$lcssa = 0, $w$032 = 0, $xor = 0;
 $conv1 = $c & 255;
 L1 : do if (!$conv1) $retval$0 = $s + (_strlen($s) | 0) | 0; else {
  if (!($s & 3)) $s$addr$0$lcssa = $s; else {
   $1 = $c & 255;
   $s$addr$036 = $s;
   while (1) {
    $2 = HEAP8[$s$addr$036 >> 0] | 0;
    if ($2 << 24 >> 24 == 0 ? 1 : $2 << 24 >> 24 == $1 << 24 >> 24) {
     $retval$0 = $s$addr$036;
     break L1;
    }
    $incdec$ptr = $s$addr$036 + 1 | 0;
    if (!($incdec$ptr & 3)) {
     $s$addr$0$lcssa = $incdec$ptr;
     break;
    } else $s$addr$036 = $incdec$ptr;
   }
  }
  $mul = Math_imul($conv1, 16843009) | 0;
  $4 = HEAP32[$s$addr$0$lcssa >> 2] | 0;
  L10 : do if (!(($4 & -2139062144 ^ -2139062144) & $4 + -16843009)) {
   $5 = $4;
   $w$032 = $s$addr$0$lcssa;
   while (1) {
    $xor = $5 ^ $mul;
    if (($xor & -2139062144 ^ -2139062144) & $xor + -16843009 | 0) {
     $w$0$lcssa = $w$032;
     break L10;
    }
    $incdec$ptr19 = $w$032 + 4 | 0;
    $5 = HEAP32[$incdec$ptr19 >> 2] | 0;
    if (($5 & -2139062144 ^ -2139062144) & $5 + -16843009 | 0) {
     $w$0$lcssa = $incdec$ptr19;
     break;
    } else $w$032 = $incdec$ptr19;
   }
  } else $w$0$lcssa = $s$addr$0$lcssa; while (0);
  $7 = $c & 255;
  $s$addr$1 = $w$0$lcssa;
  while (1) {
   $8 = HEAP8[$s$addr$1 >> 0] | 0;
   if ($8 << 24 >> 24 == 0 ? 1 : $8 << 24 >> 24 == $7 << 24 >> 24) {
    $retval$0 = $s$addr$1;
    break;
   } else $s$addr$1 = $s$addr$1 + 1 | 0;
  }
 } while (0);
 return $retval$0 | 0;
}

function __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIRKS3_EEvOT_($this, $__x) {
 $this = $this | 0;
 $__x = $__x | 0;
 var $3 = 0, $5 = 0, $__end_ = 0, $__end_$i = 0, $__v = 0, $add = 0, $call$i = 0, $mul$i = 0, $sub$ptr$div$i$i$i = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 $__v = sp;
 $__end_$i = $this + 4 | 0;
 $add = (((HEAP32[$__end_$i >> 2] | 0) - (HEAP32[$this >> 2] | 0) | 0) / 24 | 0) + 1 | 0;
 $call$i = __ZNKSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE8max_sizeEv($this) | 0;
 if ($call$i >>> 0 < $add >>> 0) __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv($this); else {
  $3 = HEAP32[$this >> 2] | 0;
  $sub$ptr$div$i$i$i = ((HEAP32[$this + 8 >> 2] | 0) - $3 | 0) / 24 | 0;
  $mul$i = $sub$ptr$div$i$i$i << 1;
  __ZNSt3__214__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v, $sub$ptr$div$i$i$i >>> 0 < $call$i >>> 1 >>> 0 ? ($mul$i >>> 0 < $add >>> 0 ? $add : $mul$i) : $call$i, ((HEAP32[$__end_$i >> 2] | 0) - $3 | 0) / 24 | 0, $this + 12 | 0);
  $__end_ = $__v + 8 | 0;
  $5 = HEAP32[$__end_ >> 2] | 0;
  __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ERKS1_($5, $__x);
  HEAP32[$__end_ >> 2] = $5 + 24;
  __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($this, $__v);
  __ZNSt3__214__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v);
  STACKTOP = sp;
  return;
 }
}

function __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIS3_EEvOT_($this, $__x) {
 $this = $this | 0;
 $__x = $__x | 0;
 var $3 = 0, $5 = 0, $__end_ = 0, $__end_$i = 0, $__v = 0, $add = 0, $call$i = 0, $mul$i = 0, $sub$ptr$div$i$i$i = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 $__v = sp;
 $__end_$i = $this + 4 | 0;
 $add = (((HEAP32[$__end_$i >> 2] | 0) - (HEAP32[$this >> 2] | 0) | 0) / 24 | 0) + 1 | 0;
 $call$i = __ZNKSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE8max_sizeEv($this) | 0;
 if ($call$i >>> 0 < $add >>> 0) __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv($this); else {
  $3 = HEAP32[$this >> 2] | 0;
  $sub$ptr$div$i$i$i = ((HEAP32[$this + 8 >> 2] | 0) - $3 | 0) / 24 | 0;
  $mul$i = $sub$ptr$div$i$i$i << 1;
  __ZNSt3__214__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($__v, $sub$ptr$div$i$i$i >>> 0 < $call$i >>> 1 >>> 0 ? ($mul$i >>> 0 < $add >>> 0 ? $add : $mul$i) : $call$i, ((HEAP32[$__end_$i >> 2] | 0) - $3 | 0) / 24 | 0, $this + 12 | 0);
  $__end_ = $__v + 8 | 0;
  $5 = HEAP32[$__end_ >> 2] | 0;
  __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($5, $__x);
  HEAP32[$__end_ >> 2] = $5 + 24;
  __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($this, $__v);
  __ZNSt3__214__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($__v);
  STACKTOP = sp;
  return;
 }
}

function _arLog($logLevel, $format, $varargs) {
 $logLevel = $logLevel | 0;
 $format = $format | 0;
 $varargs = $varargs | 0;
 var $$sink = 0, $2 = 0, $6 = 0, $7 = 0, $ap = 0, $arrayidx21 = 0, $buf = 0, $call = 0, $call14 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 $buf = sp + 16 | 0;
 $ap = sp;
 HEAP32[$buf >> 2] = 0;
 if (!(($format | 0) == 0 | (HEAP32[412] | 0) > ($logLevel | 0))) if (HEAP8[$format >> 0] | 0) {
  HEAP32[$ap >> 2] = $varargs;
  $call = _vasprintf($buf, $format, $ap) | 0;
  if (($call | 0) > -1) {
   $2 = HEAP32[4280] | 0;
   do if (!$2) _fputs(HEAP32[$buf >> 2] | 0, HEAP32[503] | 0) | 0; else {
    if (!(HEAP32[4281] | 0)) {
     FUNCTION_TABLE_vi[$2 & 15](HEAP32[$buf >> 2] | 0);
     break;
    }
    $call14 = _pthread_self() | 0;
    $6 = HEAP32[4283] | 0;
    if (($call14 | 0) == (HEAP32[4282] | 0)) {
     if (($6 | 0) > 0) {
      FUNCTION_TABLE_vi[HEAP32[4280] & 15](HEAP32[4285] | 0);
      HEAP32[4283] = 0;
     }
     FUNCTION_TABLE_vi[HEAP32[4280] & 15](HEAP32[$buf >> 2] | 0);
     break;
    }
    $7 = HEAP32[4284] | 0;
    if (($6 | 0) < ($7 | 0)) {
     $arrayidx21 = (HEAP32[4285] | 0) + $6 | 0;
     if (($call | 0) < (-3 - $6 + $7 | 0)) {
      _strcpy($arrayidx21, HEAP32[$buf >> 2] | 0) | 0;
      $$sink = (HEAP32[4283] | 0) + $call | 0;
     } else {
      HEAP8[$arrayidx21 >> 0] = 46;
      HEAP8[$arrayidx21 + 1 >> 0] = 46;
      HEAP8[$arrayidx21 + 2 >> 0] = 46;
      HEAP8[$arrayidx21 + 3 >> 0] = 0;
      $$sink = $7;
     }
     HEAP32[4283] = $$sink;
    }
   } while (0);
   _free(HEAP32[$buf >> 2] | 0);
  }
 }
 STACKTOP = sp;
 return;
}

function _getMultiEachMarkerInfo($id, $multiMarkerId, $markerIndex) {
 $id = $id | 0;
 $multiMarkerId = $multiMarkerId | 0;
 $markerIndex = $markerIndex | 0;
 var $2 = 0, $5 = 0, $8 = 0, $call7 = 0, $id$addr = 0, $retval$2 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $id$addr = sp;
 HEAP32[$id$addr >> 2] = $id;
 do if (!(__ZNSt3__212__hash_tableINS_17__hash_value_typeIi12arControllerEENS_22__unordered_map_hasherIiS3_NS_4hashIiEELb1EEENS_21__unordered_map_equalIiS3_NS_8equal_toIiEELb1EEENS_9allocatorIS3_EEE4findIiEENS_15__hash_iteratorIPNS_11__hash_nodeIS3_PvEEEERKT_(17144, $id$addr) | 0)) $retval$2 = HEAP32[421] | 0; else {
  $call7 = __ZNSt3__213unordered_mapIi12arControllerNS_4hashIiEENS_8equal_toIiEENS_9allocatorINS_4pairIKiS1_EEEEEixERS8_(17144, $id$addr) | 0;
  $2 = HEAP32[$call7 + 248 >> 2] | 0;
  if (($multiMarkerId | 0) < 0 ? 1 : (HEAP32[$call7 + 252 >> 2] | 0) - $2 >> 3 >>> 0 <= $multiMarkerId >>> 0) {
   $retval$2 = HEAP32[422] | 0;
   break;
  }
  $5 = HEAP32[$2 + ($multiMarkerId << 3) + 4 >> 2] | 0;
  if (($markerIndex | 0) < 0 ? 1 : (HEAP32[$5 + 4 >> 2] | 0) <= ($markerIndex | 0)) {
   $retval$2 = HEAP32[423] | 0;
   break;
  } else {
   $8 = HEAP32[$5 >> 2] | 0;
   _matrixCopy($8 + ($markerIndex * 320 | 0) + 16 | 0, 17024);
   _emscripten_asm_const_iiiid(1, HEAP32[$8 + ($markerIndex * 320 | 0) + 304 >> 2] | 0, HEAP32[$8 + ($markerIndex * 320 | 0) >> 2] | 0, HEAP32[$8 + ($markerIndex * 320 | 0) + 4 >> 2] | 0, +(+HEAPF64[$8 + ($markerIndex * 320 | 0) + 8 >> 3])) | 0;
   $retval$2 = 0;
   break;
  }
 } while (0);
 STACKTOP = sp;
 return $retval$2 | 0;
}

function _strcspn($s, $c) {
 $s = $s | 0;
 $c = $c | 0;
 var $0 = 0, $2 = 0, $4 = 0, $7 = 0, $arrayidx7 = 0, $byteset = 0, $c$addr$021 = 0, $incdec$ptr23 = 0, $s$addr$0$sink = 0, $s$addr$018 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 $byteset = sp;
 $0 = HEAP8[$c >> 0] | 0;
 L1 : do if (!($0 << 24 >> 24)) label = 3; else if (!(HEAP8[$c + 1 >> 0] | 0)) label = 3; else {
  HEAP32[$byteset >> 2] = 0;
  HEAP32[$byteset + 4 >> 2] = 0;
  HEAP32[$byteset + 8 >> 2] = 0;
  HEAP32[$byteset + 12 >> 2] = 0;
  HEAP32[$byteset + 16 >> 2] = 0;
  HEAP32[$byteset + 20 >> 2] = 0;
  HEAP32[$byteset + 24 >> 2] = 0;
  HEAP32[$byteset + 28 >> 2] = 0;
  $4 = $0;
  $c$addr$021 = $c;
  do {
   $arrayidx7 = $byteset + ((($4 & 255) >>> 5 & 255) << 2) | 0;
   HEAP32[$arrayidx7 >> 2] = HEAP32[$arrayidx7 >> 2] | 1 << ($4 & 31);
   $c$addr$021 = $c$addr$021 + 1 | 0;
   $4 = HEAP8[$c$addr$021 >> 0] | 0;
  } while ($4 << 24 >> 24 != 0);
  $2 = HEAP8[$s >> 0] | 0;
  if (!($2 << 24 >> 24)) $s$addr$0$sink = $s; else {
   $7 = $2;
   $s$addr$018 = $s;
   while (1) {
    if (HEAP32[$byteset + ((($7 & 255) >>> 5 & 255) << 2) >> 2] & 1 << ($7 & 31) | 0) {
     $s$addr$0$sink = $s$addr$018;
     break L1;
    }
    $incdec$ptr23 = $s$addr$018 + 1 | 0;
    $7 = HEAP8[$incdec$ptr23 >> 0] | 0;
    if (!($7 << 24 >> 24)) {
     $s$addr$0$sink = $incdec$ptr23;
     break;
    } else $s$addr$018 = $incdec$ptr23;
   }
  }
 } while (0);
 if ((label | 0) == 3) $s$addr$0$sink = ___strchrnul($s, $0 << 24 >> 24) | 0;
 STACKTOP = sp;
 return $s$addr$0$sink - $s | 0;
}

function _x_by_xt($input, $output) {
 $input = $input | 0;
 $output = $output | 0;
 var $0 = 0, $1 = 0, $4 = 0, $6 = 0, $9 = 0.0, $add24 = 0.0, $arrayidx = 0, $arrayidx18 = 0, $i$0 = 0, $in1$0 = 0, $in2$0 = 0, $j$0 = 0, $k$0 = 0, $mul14 = 0, $out$0 = 0, $out$1 = 0, $retval$0 = 0;
 $0 = HEAP32[$input + 4 >> 2] | 0;
 $1 = HEAP32[$input + 8 >> 2] | 0;
 L1 : do if ((HEAP32[$output + 4 >> 2] | 0) == ($0 | 0)) if ((HEAP32[$output + 8 >> 2] | 0) == ($0 | 0)) {
  $4 = HEAP32[$output >> 2] | 0;
  $i$0 = 0;
  $out$0 = $4;
  while (1) {
   if (($i$0 | 0) >= ($0 | 0)) {
    $retval$0 = 0;
    break L1;
   }
   $mul14 = Math_imul($i$0, $1) | 0;
   $j$0 = 0;
   $out$1 = $out$0;
   while (1) {
    if (($j$0 | 0) == ($0 | 0)) break;
    L10 : do if (($j$0 | 0) < ($i$0 | 0)) {
     $arrayidx = $4 + ((Math_imul($j$0, $0) | 0) + $i$0 << 3) | 0;
     HEAPF64[$out$1 >> 3] = +HEAPF64[$arrayidx >> 3];
    } else {
     $6 = HEAP32[$input >> 2] | 0;
     $arrayidx18 = $6 + ((Math_imul($j$0, $1) | 0) << 3) | 0;
     HEAPF64[$out$1 >> 3] = 0.0;
     $9 = 0.0;
     $in1$0 = $6 + ($mul14 << 3) | 0;
     $in2$0 = $arrayidx18;
     $k$0 = 0;
     while (1) {
      if (($k$0 | 0) >= ($1 | 0)) break L10;
      $add24 = $9 + +HEAPF64[$in1$0 >> 3] * +HEAPF64[$in2$0 >> 3];
      HEAPF64[$out$1 >> 3] = $add24;
      $9 = $add24;
      $in1$0 = $in1$0 + 8 | 0;
      $in2$0 = $in2$0 + 8 | 0;
      $k$0 = $k$0 + 1 | 0;
     }
    } while (0);
    $j$0 = $j$0 + 1 | 0;
    $out$1 = $out$1 + 8 | 0;
   }
   $i$0 = $i$0 + 1 | 0;
   $out$0 = $out$0 + ($0 << 3) | 0;
  }
 } else $retval$0 = -1; else $retval$0 = -1; while (0);
 return $retval$0 | 0;
}

function __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i($this, $info, $dst_ptr, $current_ptr, $path_below) {
 $this = $this | 0;
 $info = $info | 0;
 $dst_ptr = $dst_ptr | 0;
 $current_ptr = $current_ptr | 0;
 $path_below = $path_below | 0;
 var $1 = 0, $3 = 0, $5 = 0, $dst_ptr_leading_to_static_ptr = 0, $number_of_dst_type = 0, $number_to_static_ptr = 0, $path_dst_ptr_to_static_ptr = 0, $search_done = 0;
 HEAP8[$info + 53 >> 0] = 1;
 do if ((HEAP32[$info + 4 >> 2] | 0) == ($current_ptr | 0)) {
  HEAP8[$info + 52 >> 0] = 1;
  $dst_ptr_leading_to_static_ptr = $info + 16 | 0;
  $1 = HEAP32[$dst_ptr_leading_to_static_ptr >> 2] | 0;
  $search_done = $info + 54 | 0;
  $number_of_dst_type = $info + 48 | 0;
  $path_dst_ptr_to_static_ptr = $info + 24 | 0;
  $number_to_static_ptr = $info + 36 | 0;
  if (!$1) {
   HEAP32[$dst_ptr_leading_to_static_ptr >> 2] = $dst_ptr;
   HEAP32[$path_dst_ptr_to_static_ptr >> 2] = $path_below;
   HEAP32[$number_to_static_ptr >> 2] = 1;
   if (!((HEAP32[$number_of_dst_type >> 2] | 0) == 1 & ($path_below | 0) == 1)) break;
   HEAP8[$search_done >> 0] = 1;
   break;
  }
  if (($1 | 0) != ($dst_ptr | 0)) {
   HEAP32[$number_to_static_ptr >> 2] = (HEAP32[$number_to_static_ptr >> 2] | 0) + 1;
   HEAP8[$search_done >> 0] = 1;
   break;
  }
  $3 = HEAP32[$path_dst_ptr_to_static_ptr >> 2] | 0;
  if (($3 | 0) == 2) {
   HEAP32[$path_dst_ptr_to_static_ptr >> 2] = $path_below;
   $5 = $path_below;
  } else $5 = $3;
  if ((HEAP32[$number_of_dst_type >> 2] | 0) == 1 & ($5 | 0) == 1) HEAP8[$search_done >> 0] = 1;
 } while (0);
 return;
}

function ___shgetc($f) {
 $f = $f | 0;
 var $$pre = 0, $$sink = 0, $0 = 0, $2 = 0, $3 = 0, $4 = 0, $6 = 0, $7 = 0, $8 = 0, $arrayidx = 0, $call = 0, $rend17$phi$trans$insert = 0, $retval$0 = 0, $shcnt28$pre$phiZ2D = 0, $shcnt7 = 0, $shlim = 0, $sub = 0, label = 0;
 $shlim = $f + 104 | 0;
 $0 = HEAP32[$shlim >> 2] | 0;
 if (!$0) label = 3; else if ((HEAP32[$f + 108 >> 2] | 0) < ($0 | 0)) label = 3; else label = 4;
 if ((label | 0) == 3) {
  $call = ___uflow($f) | 0;
  if (($call | 0) < 0) label = 4; else {
   $2 = HEAP32[$shlim >> 2] | 0;
   $rend17$phi$trans$insert = $f + 8 | 0;
   if (!$2) {
    $$pre = HEAP32[$rend17$phi$trans$insert >> 2] | 0;
    $$sink = $$pre;
    $7 = $$pre;
    $8 = HEAP32[$f + 4 >> 2] | 0;
    $shcnt28$pre$phiZ2D = $f + 108 | 0;
   } else {
    $3 = HEAP32[$rend17$phi$trans$insert >> 2] | 0;
    $4 = HEAP32[$f + 4 >> 2] | 0;
    $shcnt7 = $f + 108 | 0;
    $sub = $2 - (HEAP32[$shcnt7 >> 2] | 0) | 0;
    $6 = $3;
    if (($3 - $4 | 0) < ($sub | 0)) {
     $$sink = $6;
     $7 = $6;
     $8 = $4;
     $shcnt28$pre$phiZ2D = $shcnt7;
    } else {
     $$sink = $4 + ($sub + -1) | 0;
     $7 = $6;
     $8 = $4;
     $shcnt28$pre$phiZ2D = $shcnt7;
    }
   }
   HEAP32[$f + 100 >> 2] = $$sink;
   if ($7 | 0) HEAP32[$shcnt28$pre$phiZ2D >> 2] = $7 + 1 - $8 + (HEAP32[$shcnt28$pre$phiZ2D >> 2] | 0);
   $arrayidx = $8 + -1 | 0;
   if ((HEAPU8[$arrayidx >> 0] | 0 | 0) == ($call | 0)) $retval$0 = $call; else {
    HEAP8[$arrayidx >> 0] = $call;
    $retval$0 = $call;
   }
  }
 }
 if ((label | 0) == 4) {
  HEAP32[$f + 100 >> 2] = 0;
  $retval$0 = -1;
 }
 return $retval$0 | 0;
}

function __ZNSt3__212__hash_tableINS_17__hash_value_typeIi12arControllerEENS_22__unordered_map_hasherIiS3_NS_4hashIiEELb1EEENS_21__unordered_map_equalIiS3_NS_8equal_toIiEELb1EEENS_9allocatorIS3_EEE4findIiEENS_15__hash_iteratorIPNS_11__hash_nodeIS3_PvEEEERKT_($this, $__k) {
 $this = $this | 0;
 $__k = $__k | 0;
 var $$pn = 0, $0 = 0, $1 = 0, $3 = 0, $4 = 0, $__nd$0 = 0, $cmp10 = 0, $cond6$i = 0, $cond6$i30 = 0, $retval$sroa$0$0 = 0, $sub$i21 = 0, $tobool$i23 = 0;
 $0 = HEAP32[$__k >> 2] | 0;
 $1 = HEAP32[$this + 4 >> 2] | 0;
 L1 : do if (!$1) $retval$sroa$0$0 = 0; else {
  $sub$i21 = $1 + -1 | 0;
  $tobool$i23 = ($sub$i21 & $1 | 0) == 0;
  if ($tobool$i23) $cond6$i30 = $sub$i21 & $0; else if ($0 >>> 0 < $1 >>> 0) $cond6$i30 = $0; else $cond6$i30 = ($0 >>> 0) % ($1 >>> 0) | 0;
  $3 = HEAP32[(HEAP32[$this >> 2] | 0) + ($cond6$i30 << 2) >> 2] | 0;
  if (!$3) $retval$sroa$0$0 = 0; else {
   $$pn = $3;
   while (1) {
    $__nd$0 = HEAP32[$$pn >> 2] | 0;
    if (!$__nd$0) {
     $retval$sroa$0$0 = 0;
     break L1;
    }
    $4 = HEAP32[$__nd$0 + 4 >> 2] | 0;
    $cmp10 = ($4 | 0) == ($0 | 0);
    if (!$cmp10) {
     if ($tobool$i23) $cond6$i = $4 & $sub$i21; else if ($4 >>> 0 < $1 >>> 0) $cond6$i = $4; else $cond6$i = ($4 >>> 0) % ($1 >>> 0) | 0;
     if (($cond6$i | 0) != ($cond6$i30 | 0)) {
      $retval$sroa$0$0 = 0;
      break L1;
     }
     if (!$cmp10) {
      $$pn = $__nd$0;
      continue;
     }
    }
    if ((HEAP32[$__nd$0 + 8 >> 2] | 0) == ($0 | 0)) {
     $retval$sroa$0$0 = $__nd$0;
     break;
    } else $$pn = $__nd$0;
   }
  }
 } while (0);
 return $retval$sroa$0$0 | 0;
}

function _arSetLabelingThreshMode($handle, $mode) {
 $handle = $handle | 0;
 $mode = $mode | 0;
 var $1 = 0, $arImageProcInfo = 0, $arLabelingThreshMode = 0, $call = 0, $mode1$0 = 0, $retval$0 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $vararg_buffer1 = sp + 8 | 0;
 $vararg_buffer = sp;
 if (!$handle) $retval$0 = -1; else {
  $arLabelingThreshMode = $handle + 7062388 | 0;
  if ((HEAP32[$arLabelingThreshMode >> 2] | 0) == ($mode | 0)) $retval$0 = 0; else {
   $arImageProcInfo = $handle + 7062408 | 0;
   $1 = HEAP32[$arImageProcInfo >> 2] | 0;
   if ($1 | 0) {
    _arImageProcFinal($1);
    HEAP32[$arImageProcInfo >> 2] = 0;
   }
   switch ($mode | 0) {
   case 3:
   case 2:
   case 1:
    {
     $call = _arImageProcInit(HEAP32[$handle + 36 >> 2] | 0, HEAP32[$handle + 40 >> 2] | 0, HEAP32[$handle + 4 >> 2] | 0, 0) | 0;
     HEAP32[$arImageProcInfo >> 2] = $call;
     $mode1$0 = $mode;
     break;
    }
   case 4:
    {
     HEAP32[$handle + 7062404 >> 2] = 1;
     HEAP32[$handle + 7062400 >> 2] = 1;
     $mode1$0 = 4;
     break;
    }
   case 0:
    {
     $mode1$0 = 0;
     break;
    }
   default:
    {
     _arLog(3, 3288, $vararg_buffer);
     $mode1$0 = 0;
    }
   }
   HEAP32[$arLabelingThreshMode >> 2] = $mode1$0;
   if ((HEAP32[$handle >> 2] | 0) == 1) {
    HEAP32[$vararg_buffer1 >> 2] = HEAP32[424 + ($mode1$0 << 2) >> 2];
    _arLog(3, 3362, $vararg_buffer1);
    $retval$0 = 0;
   } else $retval$0 = 0;
  }
 }
 STACKTOP = sp;
 return $retval$0 | 0;
}

function __ZNSt3__212__hash_tableINS_17__hash_value_typeIi7ARParamEENS_22__unordered_map_hasherIiS3_NS_4hashIiEELb1EEENS_21__unordered_map_equalIiS3_NS_8equal_toIiEELb1EEENS_9allocatorIS3_EEE4findIiEENS_15__hash_iteratorIPNS_11__hash_nodeIS3_PvEEEERKT_($this, $__k) {
 $this = $this | 0;
 $__k = $__k | 0;
 var $$pn = 0, $0 = 0, $1 = 0, $3 = 0, $4 = 0, $__nd$0 = 0, $cmp10 = 0, $cond6$i = 0, $cond6$i30 = 0, $retval$sroa$0$0 = 0, $sub$i21 = 0, $tobool$i23 = 0;
 $0 = HEAP32[$__k >> 2] | 0;
 $1 = HEAP32[$this + 4 >> 2] | 0;
 L1 : do if (!$1) $retval$sroa$0$0 = 0; else {
  $sub$i21 = $1 + -1 | 0;
  $tobool$i23 = ($sub$i21 & $1 | 0) == 0;
  if ($tobool$i23) $cond6$i30 = $sub$i21 & $0; else if ($0 >>> 0 < $1 >>> 0) $cond6$i30 = $0; else $cond6$i30 = ($0 >>> 0) % ($1 >>> 0) | 0;
  $3 = HEAP32[(HEAP32[$this >> 2] | 0) + ($cond6$i30 << 2) >> 2] | 0;
  if (!$3) $retval$sroa$0$0 = 0; else {
   $$pn = $3;
   while (1) {
    $__nd$0 = HEAP32[$$pn >> 2] | 0;
    if (!$__nd$0) {
     $retval$sroa$0$0 = 0;
     break L1;
    }
    $4 = HEAP32[$__nd$0 + 4 >> 2] | 0;
    $cmp10 = ($4 | 0) == ($0 | 0);
    if (!$cmp10) {
     if ($tobool$i23) $cond6$i = $4 & $sub$i21; else if ($4 >>> 0 < $1 >>> 0) $cond6$i = $4; else $cond6$i = ($4 >>> 0) % ($1 >>> 0) | 0;
     if (($cond6$i | 0) != ($cond6$i30 | 0)) {
      $retval$sroa$0$0 = 0;
      break L1;
     }
     if (!$cmp10) {
      $$pn = $__nd$0;
      continue;
     }
    }
    if ((HEAP32[$__nd$0 + 8 >> 2] | 0) == ($0 | 0)) {
     $retval$sroa$0$0 = $__nd$0;
     break;
    } else $$pn = $__nd$0;
   }
  }
 } while (0);
 return $retval$sroa$0$0 | 0;
}

function __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEC2ERKS7_jjRKS6_($this, $__str, $__n) {
 $this = $this | 0;
 $__str = $__str | 0;
 $__n = $__n | 0;
 var $$sroa$speculated = 0, $0 = 0, $__p$0$i = 0, $and$i$i$i = 0, $call$i$i = 0, $cond$i = 0, $cond$i$i = 0, $ref$tmp$i = 0, $tobool$i$i = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $ref$tmp$i = sp;
 HEAP32[$this >> 2] = 0;
 HEAP32[$this + 4 >> 2] = 0;
 HEAP32[$this + 8 >> 2] = 0;
 $0 = HEAP8[$__str + 11 >> 0] | 0;
 $tobool$i$i = $0 << 24 >> 24 < 0;
 $cond$i = $tobool$i$i ? HEAP32[$__str + 4 >> 2] | 0 : $0 & 255;
 $cond$i$i = $tobool$i$i ? HEAP32[$__str >> 2] | 0 : $__str;
 $$sroa$speculated = $cond$i >>> 0 < $__n >>> 0 ? $cond$i : $__n;
 if ($$sroa$speculated >>> 0 > 4294967279) __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($this);
 if ($$sroa$speculated >>> 0 < 11) {
  HEAP8[$this + 11 >> 0] = $$sroa$speculated;
  $__p$0$i = $this;
 } else {
  $and$i$i$i = $$sroa$speculated + 16 & -16;
  $call$i$i = __ZN10__cxxabiv112_GLOBAL__N_112malloc_allocIcE8allocateEj($and$i$i$i) | 0;
  HEAP32[$this >> 2] = $call$i$i;
  HEAP32[$this + 8 >> 2] = $and$i$i$i | -2147483648;
  HEAP32[$this + 4 >> 2] = $$sroa$speculated;
  $__p$0$i = $call$i$i;
 }
 __ZNSt3__211char_traitsIcE4copyEPcPKcj($__p$0$i, $cond$i$i, $$sroa$speculated) | 0;
 HEAP8[$ref$tmp$i >> 0] = 0;
 __ZNSt3__211char_traitsIcE6assignERcRKc($__p$0$i + $$sroa$speculated | 0, $ref$tmp$i);
 STACKTOP = sp;
 return;
}

function __ZNSt3__26vectorI12multi_markerNS_9allocatorIS1_EEE21__push_back_slow_pathIRKS1_EEvOT_($this, $__x) {
 $this = $this | 0;
 $__x = $__x | 0;
 var $11 = 0, $12 = 0, $3 = 0, $6 = 0, $__end_ = 0, $__end_$i = 0, $__v = 0, $add = 0, $call$i = 0, $mul$i = 0, $sub$ptr$sub$i$i$i = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 $__v = sp;
 $__end_$i = $this + 4 | 0;
 $add = ((HEAP32[$__end_$i >> 2] | 0) - (HEAP32[$this >> 2] | 0) >> 3) + 1 | 0;
 $call$i = __ZNKSt3__26vectorI12multi_markerNS_9allocatorIS1_EEE8max_sizeEv($this) | 0;
 if ($call$i >>> 0 < $add >>> 0) __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv($this); else {
  $3 = HEAP32[$this >> 2] | 0;
  $sub$ptr$sub$i$i$i = (HEAP32[$this + 8 >> 2] | 0) - $3 | 0;
  $mul$i = $sub$ptr$sub$i$i$i >> 2;
  __ZNSt3__214__split_bufferI12multi_markerRNS_9allocatorIS1_EEEC2EjjS4_($__v, $sub$ptr$sub$i$i$i >> 3 >>> 0 < $call$i >>> 1 >>> 0 ? ($mul$i >>> 0 < $add >>> 0 ? $add : $mul$i) : $call$i, (HEAP32[$__end_$i >> 2] | 0) - $3 >> 3, $this + 8 | 0);
  $__end_ = $__v + 8 | 0;
  $6 = $__x;
  $11 = HEAP32[$6 + 4 >> 2] | 0;
  $12 = HEAP32[$__end_ >> 2] | 0;
  HEAP32[$12 >> 2] = HEAP32[$6 >> 2];
  HEAP32[$12 + 4 >> 2] = $11;
  HEAP32[$__end_ >> 2] = (HEAP32[$__end_ >> 2] | 0) + 8;
  __ZNSt3__26vectorI12multi_markerNS_9allocatorIS1_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS1_RS3_EE($this, $__v);
  __ZNSt3__214__split_bufferI12multi_markerRNS_9allocatorIS1_EEED2Ev($__v);
  STACKTOP = sp;
  return;
 }
}

function _vsnprintf($s, $n, $fmt, $ap) {
 $s = $s | 0;
 $n = $n | 0;
 $fmt = $fmt | 0;
 $ap = $ap | 0;
 var $0 = 0, $add$ptr = 0, $b = 0, $call = 0, $call10 = 0, $f = 0, $n$addr$0 = 0, $retval$0 = 0, $s$addr$0 = 0, $sub3 = 0, $sub3$n$addr$0 = 0, $wend = 0, $wpos = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(128);
 $b = sp + 124 | 0;
 $f = sp;
 dest = $f;
 src = 2512;
 stop = dest + 124 | 0;
 do {
  HEAP32[dest >> 2] = HEAP32[src >> 2];
  dest = dest + 4 | 0;
  src = src + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 if (($n + -1 | 0) >>> 0 > 2147483646) if (!$n) {
  $n$addr$0 = 1;
  $s$addr$0 = $b;
  label = 4;
 } else {
  $call = ___errno_location() | 0;
  HEAP32[$call >> 2] = 75;
  $retval$0 = -1;
 } else {
  $n$addr$0 = $n;
  $s$addr$0 = $s;
  label = 4;
 }
 if ((label | 0) == 4) {
  $sub3 = -2 - $s$addr$0 | 0;
  $sub3$n$addr$0 = $n$addr$0 >>> 0 > $sub3 >>> 0 ? $sub3 : $n$addr$0;
  HEAP32[$f + 48 >> 2] = $sub3$n$addr$0;
  $wpos = $f + 20 | 0;
  HEAP32[$wpos >> 2] = $s$addr$0;
  HEAP32[$f + 44 >> 2] = $s$addr$0;
  $add$ptr = $s$addr$0 + $sub3$n$addr$0 | 0;
  $wend = $f + 16 | 0;
  HEAP32[$wend >> 2] = $add$ptr;
  HEAP32[$f + 28 >> 2] = $add$ptr;
  $call10 = _vfprintf($f, $fmt, $ap) | 0;
  if (!$sub3$n$addr$0) $retval$0 = $call10; else {
   $0 = HEAP32[$wpos >> 2] | 0;
   HEAP8[$0 + ((($0 | 0) == (HEAP32[$wend >> 2] | 0)) << 31 >> 31) >> 0] = 0;
   $retval$0 = $call10;
  }
 }
 STACKTOP = sp;
 return $retval$0 | 0;
}

function _xt_by_x($input, $output) {
 $input = $input | 0;
 $output = $output | 0;
 var $0 = 0, $1 = 0, $4 = 0, $6 = 0, $9 = 0.0, $add21 = 0.0, $arrayidx = 0, $i$0 = 0, $in1$0 = 0, $in2$0 = 0, $j$0 = 0, $k$0 = 0, $out$0 = 0, $out$1 = 0, $retval$0 = 0;
 $0 = HEAP32[$input + 4 >> 2] | 0;
 $1 = HEAP32[$input + 8 >> 2] | 0;
 L1 : do if ((HEAP32[$output + 4 >> 2] | 0) == ($1 | 0)) if ((HEAP32[$output + 8 >> 2] | 0) == ($1 | 0)) {
  $4 = HEAP32[$output >> 2] | 0;
  $i$0 = 0;
  $out$0 = $4;
  while (1) {
   if (($i$0 | 0) < ($1 | 0)) {
    $j$0 = 0;
    $out$1 = $out$0;
   } else {
    $retval$0 = 0;
    break L1;
   }
   while (1) {
    if (($j$0 | 0) == ($1 | 0)) break;
    L9 : do if (($j$0 | 0) < ($i$0 | 0)) {
     $arrayidx = $4 + ((Math_imul($j$0, $1) | 0) + $i$0 << 3) | 0;
     HEAPF64[$out$1 >> 3] = +HEAPF64[$arrayidx >> 3];
    } else {
     $6 = HEAP32[$input >> 2] | 0;
     HEAPF64[$out$1 >> 3] = 0.0;
     $9 = 0.0;
     $in1$0 = $6 + ($i$0 << 3) | 0;
     $in2$0 = $6 + ($j$0 << 3) | 0;
     $k$0 = 0;
     while (1) {
      if (($k$0 | 0) >= ($0 | 0)) break L9;
      $add21 = $9 + +HEAPF64[$in1$0 >> 3] * +HEAPF64[$in2$0 >> 3];
      HEAPF64[$out$1 >> 3] = $add21;
      $9 = $add21;
      $in1$0 = $in1$0 + ($1 << 3) | 0;
      $in2$0 = $in2$0 + ($1 << 3) | 0;
      $k$0 = $k$0 + 1 | 0;
     }
    } while (0);
    $j$0 = $j$0 + 1 | 0;
    $out$1 = $out$1 + 8 | 0;
   }
   $i$0 = $i$0 + 1 | 0;
   $out$0 = $out$0 + ($1 << 3) | 0;
  }
 } else $retval$0 = -1; else $retval$0 = -1; while (0);
 return $retval$0 | 0;
}

function _arGetTransMatRobust($handle, $initConv, $pos2d, $pos3d, $num, $conv) {
 $handle = $handle | 0;
 $initConv = $initConv | 0;
 $pos2d = $pos2d | 0;
 $pos3d = $pos3d | 0;
 $num = $num | 0;
 $conv = $conv | 0;
 var $call = 0, $call3 = 0, $data = 0, $err = 0, $i$0 = 0, $worldCoord = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 $data = sp + 20 | 0;
 $err = sp;
 $call = _malloc($num << 4) | 0;
 HEAP32[$data >> 2] = $call;
 if (!$call) {
  _arLog(3, 4823, sp + 8 | 0);
  _exit(1);
 }
 $call3 = _malloc($num * 24 | 0) | 0;
 $worldCoord = $data + 4 | 0;
 HEAP32[$worldCoord >> 2] = $call3;
 if (!$call3) {
  _arLog(3, 4823, sp + 16 | 0);
  _exit(1);
 } else $i$0 = 0;
 while (1) {
  if (($i$0 | 0) >= ($num | 0)) break;
  HEAPF64[$call + ($i$0 << 4) >> 3] = +HEAPF64[$pos2d + ($i$0 << 4) >> 3];
  HEAPF64[$call + ($i$0 << 4) + 8 >> 3] = +HEAPF64[$pos2d + ($i$0 << 4) + 8 >> 3];
  HEAPF64[$call3 + ($i$0 * 24 | 0) >> 3] = +HEAPF64[$pos3d + ($i$0 * 24 | 0) >> 3];
  HEAPF64[$call3 + ($i$0 * 24 | 0) + 8 >> 3] = +HEAPF64[$pos3d + ($i$0 * 24 | 0) + 8 >> 3];
  HEAPF64[$call3 + ($i$0 * 24 | 0) + 16 >> 3] = +HEAPF64[$pos3d + ($i$0 * 24 | 0) + 16 >> 3];
  $i$0 = $i$0 + 1 | 0;
 }
 HEAP32[$data + 8 >> 2] = $num;
 if ((_icpPointRobust(HEAP32[$handle >> 2] | 0, $data, $initConv, $conv, $err) | 0) < 0) HEAPF64[$err >> 3] = 1.0e8;
 _free(HEAP32[$data >> 2] | 0);
 _free(HEAP32[$worldCoord >> 2] | 0);
 STACKTOP = sp;
 return +(+HEAPF64[$err >> 3]);
}

function _arGetTransMat($handle, $initConv, $pos2d, $pos3d, $num, $conv) {
 $handle = $handle | 0;
 $initConv = $initConv | 0;
 $pos2d = $pos2d | 0;
 $pos3d = $pos3d | 0;
 $num = $num | 0;
 $conv = $conv | 0;
 var $call = 0, $call3 = 0, $data = 0, $err = 0, $i$0 = 0, $worldCoord = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 $data = sp + 20 | 0;
 $err = sp;
 $call = _malloc($num << 4) | 0;
 HEAP32[$data >> 2] = $call;
 if (!$call) {
  _arLog(3, 4823, sp + 8 | 0);
  _exit(1);
 }
 $call3 = _malloc($num * 24 | 0) | 0;
 $worldCoord = $data + 4 | 0;
 HEAP32[$worldCoord >> 2] = $call3;
 if (!$call3) {
  _arLog(3, 4823, sp + 16 | 0);
  _exit(1);
 } else $i$0 = 0;
 while (1) {
  if (($i$0 | 0) >= ($num | 0)) break;
  HEAPF64[$call + ($i$0 << 4) >> 3] = +HEAPF64[$pos2d + ($i$0 << 4) >> 3];
  HEAPF64[$call + ($i$0 << 4) + 8 >> 3] = +HEAPF64[$pos2d + ($i$0 << 4) + 8 >> 3];
  HEAPF64[$call3 + ($i$0 * 24 | 0) >> 3] = +HEAPF64[$pos3d + ($i$0 * 24 | 0) >> 3];
  HEAPF64[$call3 + ($i$0 * 24 | 0) + 8 >> 3] = +HEAPF64[$pos3d + ($i$0 * 24 | 0) + 8 >> 3];
  HEAPF64[$call3 + ($i$0 * 24 | 0) + 16 >> 3] = +HEAPF64[$pos3d + ($i$0 * 24 | 0) + 16 >> 3];
  $i$0 = $i$0 + 1 | 0;
 }
 HEAP32[$data + 8 >> 2] = $num;
 if ((_icpPoint(HEAP32[$handle >> 2] | 0, $data, $initConv, $conv, $err) | 0) < 0) HEAPF64[$err >> 3] = 1.0e8;
 _free(HEAP32[$data >> 2] | 0);
 _free(HEAP32[$worldCoord >> 2] | 0);
 STACKTOP = sp;
 return +(+HEAPF64[$err >> 3]);
}

function __ZNK10__cxxabiv117__class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($this, $info, $current_ptr, $path_below, $use_strcmp) {
 $this = $this | 0;
 $info = $info | 0;
 $current_ptr = $current_ptr | 0;
 $path_below = $path_below | 0;
 $use_strcmp = $use_strcmp | 0;
 var $dst_ptr_not_leading_to_static_ptr = 0, $number_to_dst_ptr = 0, $path_dynamic_ptr_to_dst_ptr = 0;
 do if (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($this, HEAP32[$info + 8 >> 2] | 0, $use_strcmp) | 0) __ZNK10__cxxabiv117__class_type_info29process_static_type_below_dstEPNS_19__dynamic_cast_infoEPKvi(0, $info, $current_ptr, $path_below); else if (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($this, HEAP32[$info >> 2] | 0, $use_strcmp) | 0) {
  $path_dynamic_ptr_to_dst_ptr = $info + 32 | 0;
  if ((HEAP32[$info + 16 >> 2] | 0) != ($current_ptr | 0)) {
   $dst_ptr_not_leading_to_static_ptr = $info + 20 | 0;
   if ((HEAP32[$dst_ptr_not_leading_to_static_ptr >> 2] | 0) != ($current_ptr | 0)) {
    HEAP32[$path_dynamic_ptr_to_dst_ptr >> 2] = $path_below;
    HEAP32[$dst_ptr_not_leading_to_static_ptr >> 2] = $current_ptr;
    $number_to_dst_ptr = $info + 40 | 0;
    HEAP32[$number_to_dst_ptr >> 2] = (HEAP32[$number_to_dst_ptr >> 2] | 0) + 1;
    if ((HEAP32[$info + 36 >> 2] | 0) == 1) if ((HEAP32[$info + 24 >> 2] | 0) == 2) HEAP8[$info + 54 >> 0] = 1;
    HEAP32[$info + 44 >> 2] = 4;
    break;
   }
  }
  if (($path_below | 0) == 1) HEAP32[$path_dynamic_ptr_to_dst_ptr >> 2] = 1;
 } while (0);
 return;
}

function ___fwritex($s, $l, $f) {
 $s = $s | 0;
 $l = $l | 0;
 $f = $f | 0;
 var $0 = 0, $2 = 0, $3 = 0, $4 = 0, $9 = 0, $call16 = 0, $i$0 = 0, $i$1 = 0, $l$addr$1 = 0, $retval$1 = 0, $s$addr$1 = 0, $sub = 0, $wend = 0, $wpos = 0, label = 0;
 $wend = $f + 16 | 0;
 $0 = HEAP32[$wend >> 2] | 0;
 if (!$0) if (!(___towrite($f) | 0)) {
  $3 = HEAP32[$wend >> 2] | 0;
  label = 5;
 } else $retval$1 = 0; else {
  $3 = $0;
  label = 5;
 }
 L5 : do if ((label | 0) == 5) {
  $wpos = $f + 20 | 0;
  $2 = HEAP32[$wpos >> 2] | 0;
  $4 = $2;
  if (($3 - $2 | 0) >>> 0 < $l >>> 0) {
   $retval$1 = FUNCTION_TABLE_iiii[HEAP32[$f + 36 >> 2] & 15]($f, $s, $l) | 0;
   break;
  }
  L10 : do if ((HEAP8[$f + 75 >> 0] | 0) > -1) {
   $i$0 = $l;
   while (1) {
    if (!$i$0) {
     $9 = $4;
     $i$1 = 0;
     $l$addr$1 = $l;
     $s$addr$1 = $s;
     break L10;
    }
    $sub = $i$0 + -1 | 0;
    if ((HEAP8[$s + $sub >> 0] | 0) == 10) break; else $i$0 = $sub;
   }
   $call16 = FUNCTION_TABLE_iiii[HEAP32[$f + 36 >> 2] & 15]($f, $s, $i$0) | 0;
   if ($call16 >>> 0 < $i$0 >>> 0) {
    $retval$1 = $call16;
    break L5;
   }
   $9 = HEAP32[$wpos >> 2] | 0;
   $i$1 = $i$0;
   $l$addr$1 = $l - $i$0 | 0;
   $s$addr$1 = $s + $i$0 | 0;
  } else {
   $9 = $4;
   $i$1 = 0;
   $l$addr$1 = $l;
   $s$addr$1 = $s;
  } while (0);
  _memcpy($9 | 0, $s$addr$1 | 0, $l$addr$1 | 0) | 0;
  HEAP32[$wpos >> 2] = (HEAP32[$wpos >> 2] | 0) + $l$addr$1;
  $retval$1 = $i$1 + $l$addr$1 | 0;
 } while (0);
 return $retval$1 | 0;
}

function __ZN10__cxxabiv112_GLOBAL__N_118parse_block_invokeINS0_2DbEEEPKcS4_S4_RT_($first, $last, $db) {
 $first = $first | 0;
 $last = $last | 0;
 $db = $db | 0;
 var $6 = 0, $i$0 = 0, $incdec$ptr10 = 0, $retval$2 = 0, $t$0 = 0, $t$1 = 0, $t$2 = 0;
 L1 : do if (($last - $first | 0) > 12) {
  $i$0 = 0;
  $t$0 = $first;
  while (1) {
   $incdec$ptr10 = $t$0 + 1 | 0;
   if (($i$0 | 0) >= 13) break;
   if ((HEAP8[$t$0 >> 0] | 0) == (HEAP8[16518 + $i$0 >> 0] | 0)) {
    $i$0 = $i$0 + 1 | 0;
    $t$0 = $incdec$ptr10;
   } else {
    $retval$2 = $first;
    break L1;
   }
  }
  L6 : do if (($t$0 | 0) == ($last | 0)) $t$2 = $last; else {
   if ((HEAP8[$t$0 >> 0] | 0) == 95) {
    if (($incdec$ptr10 | 0) == ($last | 0)) {
     $retval$2 = $first;
     break L1;
    }
    if (((HEAP8[$incdec$ptr10 >> 0] | 0) + -48 | 0) >>> 0 >= 10) {
     $retval$2 = $first;
     break L1;
    }
    $t$1 = $t$0 + 2 | 0;
   } else $t$1 = $t$0;
   while (1) {
    if (($t$1 | 0) == ($last | 0)) {
     $t$2 = $last;
     break L6;
    }
    if (((HEAP8[$t$1 >> 0] | 0) + -48 | 0) >>> 0 >= 10) {
     $t$2 = $t$1;
     break L6;
    }
    $t$1 = $t$1 + 1 | 0;
   }
  } while (0);
  $6 = HEAP32[$db + 4 >> 2] | 0;
  if ((HEAP32[$db >> 2] | 0) == ($6 | 0)) $retval$2 = $first; else {
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKc($6 + -24 | 0, 0, 16532) | 0;
   $retval$2 = $t$2;
  }
 } else $retval$2 = $first; while (0);
 return $retval$2 | 0;
}

function _icpUpdateMat($matXw2Xc, $dS) {
 $matXw2Xc = $matXw2Xc | 0;
 $dS = $dS | 0;
 var $arrayidx11 = 0, $arrayidx15 = 0, $arrayidx20 = 0, $arrayidx30 = 0, $i$0 = 0, $i$1 = 0, $j$0 = 0, $j$1 = 0, $mat = 0, $mat2 = 0, $q = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 256 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(256);
 $q = sp + 192 | 0;
 $mat = sp + 96 | 0;
 $mat2 = sp;
 _icpGetQ_from_S($q, $dS);
 _icpGetMat_from_Q($mat, $q);
 $j$0 = 0;
 while (1) {
  if (($j$0 | 0) == 3) {
   $j$1 = 0;
   break;
  }
  $arrayidx11 = $matXw2Xc + ($j$0 << 5) | 0;
  $arrayidx15 = $matXw2Xc + ($j$0 << 5) + 8 | 0;
  $arrayidx20 = $matXw2Xc + ($j$0 << 5) + 16 | 0;
  $i$0 = 0;
  while (1) {
   if (($i$0 | 0) == 4) break;
   HEAPF64[$mat2 + ($j$0 << 5) + ($i$0 << 3) >> 3] = +HEAPF64[$arrayidx11 >> 3] * +HEAPF64[$mat + ($i$0 << 3) >> 3] + +HEAPF64[$arrayidx15 >> 3] * +HEAPF64[$mat + 32 + ($i$0 << 3) >> 3] + +HEAPF64[$arrayidx20 >> 3] * +HEAPF64[$mat + 64 + ($i$0 << 3) >> 3];
   $i$0 = $i$0 + 1 | 0;
  }
  $arrayidx30 = $mat2 + ($j$0 << 5) + 24 | 0;
  HEAPF64[$arrayidx30 >> 3] = +HEAPF64[$matXw2Xc + ($j$0 << 5) + 24 >> 3] + +HEAPF64[$arrayidx30 >> 3];
  $j$0 = $j$0 + 1 | 0;
 }
 while (1) {
  if (($j$1 | 0) == 3) break; else $i$1 = 0;
  while (1) {
   if (($i$1 | 0) == 4) break;
   HEAPF64[$matXw2Xc + ($j$1 << 5) + ($i$1 << 3) >> 3] = +HEAPF64[$mat2 + ($j$1 << 5) + ($i$1 << 3) >> 3];
   $i$1 = $i$1 + 1 | 0;
  }
  $j$1 = $j$1 + 1 | 0;
 }
 STACKTOP = sp;
 return 0;
}

function _icpGetMat_from_Q($mat, $q) {
 $mat = $mat | 0;
 $q = $q | 0;
 var $0 = 0.0, $1 = 0.0, $12 = 0.0, $23 = 0.0, $arrayidx12 = 0, $arrayidx9 = 0, $call = 0.0, $call2 = 0.0, $sub = 0.0;
 $0 = +HEAPF64[$q + 24 >> 3];
 $call = +Math_cos(+$0);
 $sub = 1.0 - $call;
 $call2 = +Math_sin(+$0);
 $1 = +HEAPF64[$q >> 3];
 HEAPF64[$mat >> 3] = $call + $sub * ($1 * $1);
 $arrayidx9 = $q + 8 | 0;
 $arrayidx12 = $q + 16 | 0;
 HEAPF64[$mat + 8 >> 3] = $sub * (+HEAPF64[$q >> 3] * +HEAPF64[$arrayidx9 >> 3]) - $call2 * +HEAPF64[$arrayidx12 >> 3];
 HEAPF64[$mat + 16 >> 3] = $sub * (+HEAPF64[$q >> 3] * +HEAPF64[$arrayidx12 >> 3]) + $call2 * +HEAPF64[$arrayidx9 >> 3];
 HEAPF64[$mat + 24 >> 3] = +HEAPF64[$q + 32 >> 3];
 HEAPF64[$mat + 32 >> 3] = $sub * (+HEAPF64[$arrayidx9 >> 3] * +HEAPF64[$q >> 3]) + $call2 * +HEAPF64[$arrayidx12 >> 3];
 $12 = +HEAPF64[$arrayidx9 >> 3];
 HEAPF64[$mat + 40 >> 3] = $call + $sub * ($12 * $12);
 HEAPF64[$mat + 48 >> 3] = $sub * (+HEAPF64[$arrayidx9 >> 3] * +HEAPF64[$arrayidx12 >> 3]) - $call2 * +HEAPF64[$q >> 3];
 HEAPF64[$mat + 56 >> 3] = +HEAPF64[$q + 40 >> 3];
 HEAPF64[$mat + 64 >> 3] = $sub * (+HEAPF64[$arrayidx12 >> 3] * +HEAPF64[$q >> 3]) - $call2 * +HEAPF64[$arrayidx9 >> 3];
 HEAPF64[$mat + 72 >> 3] = $sub * (+HEAPF64[$arrayidx12 >> 3] * +HEAPF64[$arrayidx9 >> 3]) + $call2 * +HEAPF64[$q >> 3];
 $23 = +HEAPF64[$arrayidx12 >> 3];
 HEAPF64[$mat + 80 >> 3] = $call + $sub * ($23 * $23);
 HEAPF64[$mat + 88 >> 3] = +HEAPF64[$q + 48 >> 3];
 return;
}

function __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE9__grow_byEjjjjjj($this, $__old_cap, $__delta_cap, $__old_sz, $__n_copy, $__n_add) {
 $this = $this | 0;
 $__old_cap = $__old_cap | 0;
 $__delta_cap = $__delta_cap | 0;
 $__old_sz = $__old_sz | 0;
 $__n_copy = $__n_copy | 0;
 $__n_add = $__n_add | 0;
 var $$sroa$speculated = 0, $add = 0, $call$i = 0, $cond$i = 0, $cond6 = 0, $mul = 0, $sub23 = 0;
 if ((-17 - $__old_cap | 0) >>> 0 < $__delta_cap >>> 0) __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($this);
 if ((HEAP8[$this + 11 >> 0] | 0) < 0) $cond$i = HEAP32[$this >> 2] | 0; else $cond$i = $this;
 if ($__old_cap >>> 0 < 2147483623) {
  $add = $__delta_cap + $__old_cap | 0;
  $mul = $__old_cap << 1;
  $$sroa$speculated = $add >>> 0 < $mul >>> 0 ? $mul : $add;
  $cond6 = $$sroa$speculated >>> 0 < 11 ? 11 : $$sroa$speculated + 16 & -16;
 } else $cond6 = -17;
 $call$i = __ZN10__cxxabiv112_GLOBAL__N_112malloc_allocIcE8allocateEj($cond6) | 0;
 if ($__n_copy | 0) __ZNSt3__211char_traitsIcE4copyEPcPKcj($call$i, $cond$i, $__n_copy) | 0;
 $sub23 = $__old_sz - $__n_copy | 0;
 if ($sub23 | 0) __ZNSt3__211char_traitsIcE4copyEPcPKcj($call$i + $__n_copy + $__n_add | 0, $cond$i + $__n_copy | 0, $sub23) | 0;
 if (($__old_cap | 0) != 10) __ZN10__cxxabiv112_GLOBAL__N_112malloc_allocIcE10deallocateEPcj($cond$i);
 HEAP32[$this >> 2] = $call$i;
 HEAP32[$this + 8 >> 2] = $cond6 | -2147483648;
 return;
}

function __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($this, $__s, $__n) {
 $this = $this | 0;
 $__s = $__s | 0;
 $__n = $__n | 0;
 var $0 = 0, $__size_$i$i = 0, $add = 0, $cond$i24 = 0, $cond$i30 = 0, $cond$i36 = 0, $ref$tmp = 0, $tobool$i$i = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $ref$tmp = sp;
 $__size_$i$i = $this + 11 | 0;
 $0 = HEAP8[$__size_$i$i >> 0] | 0;
 $tobool$i$i = $0 << 24 >> 24 < 0;
 if ($tobool$i$i) {
  $cond$i24 = HEAP32[$this + 4 >> 2] | 0;
  $cond$i36 = (HEAP32[$this + 8 >> 2] & 2147483647) + -1 | 0;
 } else {
  $cond$i24 = $0 & 255;
  $cond$i36 = 10;
 }
 $add = $cond$i24 + $__n | 0;
 if (($cond$i36 - $cond$i24 | 0) >>> 0 < $__n >>> 0) __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE21__grow_by_and_replaceEjjjjjjPKc($this, $cond$i36, $add - $cond$i36 | 0, $cond$i24, $cond$i24, 0, $__n, $__s); else if ($__n | 0) {
  if ($tobool$i$i) $cond$i30 = HEAP32[$this >> 2] | 0; else $cond$i30 = $this;
  __ZNSt3__211char_traitsIcE4copyEPcPKcj($cond$i30 + $cond$i24 | 0, $__s, $__n) | 0;
  if ((HEAP8[$__size_$i$i >> 0] | 0) < 0) HEAP32[$this + 4 >> 2] = $add; else HEAP8[$__size_$i$i >> 0] = $add;
  HEAP8[$ref$tmp >> 0] = 0;
  __ZNSt3__211char_traitsIcE6assignERcRKc($cond$i30 + $add | 0, $ref$tmp);
 }
 STACKTOP = sp;
 return $this | 0;
}

function __ZN10__cxxabiv112_GLOBAL__N_119parse_discriminatorEPKcS2_($first, $last) {
 $first = $first | 0;
 $last = $last | 0;
 var $0 = 0, $1 = 0, $2 = 0, $add$ptr = 0, $add$ptr7 = 0, $first$addr$1 = 0, $t1$0 = 0, $t129$0 = 0, $t1$0$looptemp = 0;
 L1 : do if (($first | 0) == ($last | 0)) $first$addr$1 = $first; else {
  $0 = HEAP8[$first >> 0] | 0;
  $add$ptr = $first + 1 | 0;
  if ($0 << 24 >> 24 != 95) {
   if ((($0 << 24 >> 24) + -48 | 0) >>> 0 < 10) $t129$0 = $add$ptr; else {
    $first$addr$1 = $first;
    break;
   }
   while (1) {
    if (($t129$0 | 0) == ($last | 0)) {
     $first$addr$1 = $last;
     break L1;
    }
    if (((HEAP8[$t129$0 >> 0] | 0) + -48 | 0) >>> 0 >= 10) {
     $first$addr$1 = $t129$0;
     break L1;
    }
    $t129$0 = $t129$0 + 1 | 0;
   }
  }
  if (($add$ptr | 0) == ($last | 0)) $first$addr$1 = $first; else {
   $1 = HEAP8[$add$ptr >> 0] | 0;
   $add$ptr7 = $first + 2 | 0;
   if ((($1 << 24 >> 24) + -48 | 0) >>> 0 < 10) $first$addr$1 = $add$ptr7; else if ($1 << 24 >> 24 == 95) {
    $t1$0 = $add$ptr7;
    do {
     $t1$0$looptemp = $t1$0;
     $t1$0 = $t1$0 + 1 | 0;
     if (($t1$0$looptemp | 0) == ($last | 0)) {
      $first$addr$1 = $first;
      break L1;
     }
     $2 = HEAP8[$t1$0$looptemp >> 0] | 0;
    } while ((($2 << 24 >> 24) + -48 | 0) >>> 0 < 10);
    return ($2 << 24 >> 24 == 95 ? $t1$0 : $first) | 0;
   } else $first$addr$1 = $first;
  }
 } while (0);
 return $first$addr$1 | 0;
}

function _arMatrixMul($dest, $a, $b) {
 $dest = $dest | 0;
 $a = $a | 0;
 $b = $b | 0;
 var $0 = 0, $11 = 0.0, $2 = 0, $4 = 0, $add = 0.0, $c$0 = 0, $i$0 = 0, $mul = 0, $p1$0 = 0, $p2$0 = 0, $p3$0 = 0, $p3$1 = 0, $r$0 = 0, $retval$0 = 0;
 $0 = HEAP32[$a + 8 >> 2] | 0;
 L1 : do if (($0 | 0) == (HEAP32[$b + 4 >> 2] | 0)) {
  $2 = HEAP32[$dest + 4 >> 2] | 0;
  if (($2 | 0) == (HEAP32[$a + 4 >> 2] | 0)) {
   $4 = HEAP32[$dest + 8 >> 2] | 0;
   if (($4 | 0) == (HEAP32[$b + 8 >> 2] | 0)) {
    $p3$0 = HEAP32[$dest >> 2] | 0;
    $r$0 = 0;
    while (1) {
     if (($r$0 | 0) >= ($2 | 0)) {
      $retval$0 = 0;
      break L1;
     }
     $mul = Math_imul($r$0, $0) | 0;
     $c$0 = 0;
     $p3$1 = $p3$0;
     while (1) {
      if (($c$0 | 0) >= ($4 | 0)) break;
      HEAPF64[$p3$1 >> 3] = 0.0;
      $11 = 0.0;
      $i$0 = 0;
      $p1$0 = (HEAP32[$a >> 2] | 0) + ($mul << 3) | 0;
      $p2$0 = (HEAP32[$b >> 2] | 0) + ($c$0 << 3) | 0;
      while (1) {
       if (($i$0 | 0) >= ($0 | 0)) break;
       $add = $11 + +HEAPF64[$p1$0 >> 3] * +HEAPF64[$p2$0 >> 3];
       HEAPF64[$p3$1 >> 3] = $add;
       $11 = $add;
       $i$0 = $i$0 + 1 | 0;
       $p1$0 = $p1$0 + 8 | 0;
       $p2$0 = $p2$0 + ($4 << 3) | 0;
      }
      $c$0 = $c$0 + 1 | 0;
      $p3$1 = $p3$1 + 8 | 0;
     }
     $p3$0 = $p3$1;
     $r$0 = $r$0 + 1 | 0;
    }
   } else $retval$0 = -1;
  } else $retval$0 = -1;
 } else $retval$0 = -1; while (0);
 return $retval$0 | 0;
}

function _arCreateHandle($paramLT) {
 $paramLT = $paramLT | 0;
 var $0 = 0, $1 = 0, $call = 0, $call8 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $call = _malloc(7062432) | 0;
 if (!$call) {
  _arLog(3, 4823, sp);
  _exit(1);
 }
 HEAP32[$call >> 2] = 0;
 HEAP32[$call + 4834148 >> 2] = 0;
 HEAP32[$call + 7062408 >> 2] = 0;
 HEAP32[$call + 4 >> 2] = -1;
 HEAP32[$call + 8 >> 2] = 0;
 HEAP32[$call + 12 >> 2] = 1;
 HEAP32[$call + 16 >> 2] = 100;
 HEAP32[$call + 20 >> 2] = 0;
 HEAP32[$call + 24 >> 2] = 0;
 HEAP32[$call + 28 >> 2] = 2;
 HEAPF64[$call + 7062416 >> 3] = .5;
 HEAP32[$call + 7062424 >> 2] = 3;
 HEAP32[$call + 32 >> 2] = $paramLT;
 $0 = HEAP32[$paramLT >> 2] | 0;
 HEAP32[$call + 36 >> 2] = $0;
 $1 = HEAP32[$paramLT + 4 >> 2] | 0;
 HEAP32[$call + 40 >> 2] = $1;
 HEAP32[$call + 44 >> 2] = 0;
 HEAP32[$call + 15408 >> 2] = 0;
 HEAP32[$call + 4834152 >> 2] = 0;
 HEAP32[$call + 4818296 >> 2] = 0;
 $call8 = _malloc(Math_imul($0 << 1, $1) | 0) | 0;
 HEAP32[$call + 4834144 >> 2] = $call8;
 if (!$call8) {
  _arLog(3, 4823, sp + 8 | 0);
  _exit(1);
 } else {
  HEAP32[$call + 7062384 >> 2] = 0;
  _arSetPixelFormat($call, 2) | 0;
  _arSetDebugMode($call, 0) | 0;
  HEAP32[$call + 7062388 >> 2] = -1;
  _arSetLabelingThreshMode($call, 0) | 0;
  _arSetLabelingThreshModeAutoInterval($call, 7) | 0;
  STACKTOP = sp;
  return $call | 0;
 }
 return 0;
}

function __ZNSt3__212__hash_tableINS_17__hash_value_typeIi12arControllerEENS_22__unordered_map_hasherIiS3_NS_4hashIiEELb1EEENS_21__unordered_map_equalIiS3_NS_8equal_toIiEELb1EEENS_9allocatorIS3_EEE6rehashEj($this, $__n) {
 $this = $this | 0;
 $__n = $__n | 0;
 var $$sroa$speculated = 0, $0 = 0, $__n$addr$0 = 0, $cond = 0, $conv14 = 0;
 if (($__n | 0) == 1) $__n$addr$0 = 2; else if (!($__n + -1 & $__n)) $__n$addr$0 = $__n; else $__n$addr$0 = __ZNSt3__212__next_primeEj($__n) | 0;
 $0 = HEAP32[$this + 4 >> 2] | 0;
 if ($__n$addr$0 >>> 0 > $0 >>> 0) __ZNSt3__212__hash_tableINS_17__hash_value_typeIi12arControllerEENS_22__unordered_map_hasherIiS3_NS_4hashIiEELb1EEENS_21__unordered_map_equalIiS3_NS_8equal_toIiEELb1EEENS_9allocatorIS3_EEE8__rehashEj($this, $__n$addr$0); else if ($__n$addr$0 >>> 0 < $0 >>> 0) {
  $conv14 = ~~+Math_ceil(+(+((HEAP32[$this + 12 >> 2] | 0) >>> 0) / +HEAPF32[$this + 16 >> 2])) >>> 0;
  if ($0 >>> 0 > 2 & ($0 + -1 & $0 | 0) == 0) $cond = 1 << 32 - (Math_clz32($conv14 + -1 | 0) | 0); else $cond = __ZNSt3__212__next_primeEj($conv14) | 0;
  $$sroa$speculated = $__n$addr$0 >>> 0 < $cond >>> 0 ? $cond : $__n$addr$0;
  if ($$sroa$speculated >>> 0 < $0 >>> 0) __ZNSt3__212__hash_tableINS_17__hash_value_typeIi12arControllerEENS_22__unordered_map_hasherIiS3_NS_4hashIiEELb1EEENS_21__unordered_map_equalIiS3_NS_8equal_toIiEELb1EEENS_9allocatorIS3_EEE8__rehashEj($this, $$sroa$speculated);
 }
 return;
}

function ___stdio_read($f, $buf, $len) {
 $f = $f | 0;
 $buf = $buf | 0;
 $len = $len | 0;
 var $0 = 0, $5 = 0, $6 = 0, $buf3 = 0, $buf_size = 0, $call6 = 0, $iov = 0, $iov_len = 0, $retval$0 = 0, $rpos = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 $vararg_buffer = sp;
 $iov = sp + 16 | 0;
 HEAP32[$iov >> 2] = $buf;
 $iov_len = $iov + 4 | 0;
 $buf_size = $f + 48 | 0;
 $0 = HEAP32[$buf_size >> 2] | 0;
 HEAP32[$iov_len >> 2] = $len - (($0 | 0) != 0 & 1);
 $buf3 = $f + 44 | 0;
 HEAP32[$iov + 8 >> 2] = HEAP32[$buf3 >> 2];
 HEAP32[$iov + 12 >> 2] = $0;
 HEAP32[$vararg_buffer >> 2] = HEAP32[$f + 60 >> 2];
 HEAP32[$vararg_buffer + 4 >> 2] = $iov;
 HEAP32[$vararg_buffer + 8 >> 2] = 2;
 $call6 = ___syscall_ret(___syscall145(145, $vararg_buffer | 0) | 0) | 0;
 if (($call6 | 0) < 1) {
  HEAP32[$f >> 2] = HEAP32[$f >> 2] | $call6 & 48 ^ 16;
  $retval$0 = $call6;
 } else {
  $5 = HEAP32[$iov_len >> 2] | 0;
  if ($call6 >>> 0 > $5 >>> 0) {
   $6 = HEAP32[$buf3 >> 2] | 0;
   $rpos = $f + 4 | 0;
   HEAP32[$rpos >> 2] = $6;
   HEAP32[$f + 8 >> 2] = $6 + ($call6 - $5);
   if (!(HEAP32[$buf_size >> 2] | 0)) $retval$0 = $len; else {
    HEAP32[$rpos >> 2] = $6 + 1;
    HEAP8[$buf + ($len + -1) >> 0] = HEAP8[$6 >> 0] | 0;
    $retval$0 = $len;
   }
  } else $retval$0 = $call6;
 }
 STACKTOP = sp;
 return $retval$0 | 0;
}

function __ZNSt3__212__hash_tableINS_17__hash_value_typeIi7ARParamEENS_22__unordered_map_hasherIiS3_NS_4hashIiEELb1EEENS_21__unordered_map_equalIiS3_NS_8equal_toIiEELb1EEENS_9allocatorIS3_EEE6rehashEj($this, $__n) {
 $this = $this | 0;
 $__n = $__n | 0;
 var $$sroa$speculated = 0, $0 = 0, $__n$addr$0 = 0, $cond = 0, $conv14 = 0;
 if (($__n | 0) == 1) $__n$addr$0 = 2; else if (!($__n + -1 & $__n)) $__n$addr$0 = $__n; else $__n$addr$0 = __ZNSt3__212__next_primeEj($__n) | 0;
 $0 = HEAP32[$this + 4 >> 2] | 0;
 if ($__n$addr$0 >>> 0 > $0 >>> 0) __ZNSt3__212__hash_tableINS_17__hash_value_typeIi7ARParamEENS_22__unordered_map_hasherIiS3_NS_4hashIiEELb1EEENS_21__unordered_map_equalIiS3_NS_8equal_toIiEELb1EEENS_9allocatorIS3_EEE8__rehashEj($this, $__n$addr$0); else if ($__n$addr$0 >>> 0 < $0 >>> 0) {
  $conv14 = ~~+Math_ceil(+(+((HEAP32[$this + 12 >> 2] | 0) >>> 0) / +HEAPF32[$this + 16 >> 2])) >>> 0;
  if ($0 >>> 0 > 2 & ($0 + -1 & $0 | 0) == 0) $cond = 1 << 32 - (Math_clz32($conv14 + -1 | 0) | 0); else $cond = __ZNSt3__212__next_primeEj($conv14) | 0;
  $$sroa$speculated = $__n$addr$0 >>> 0 < $cond >>> 0 ? $cond : $__n$addr$0;
  if ($$sroa$speculated >>> 0 < $0 >>> 0) __ZNSt3__212__hash_tableINS_17__hash_value_typeIi7ARParamEENS_22__unordered_map_hasherIiS3_NS_4hashIiEELb1EEENS_21__unordered_map_equalIiS3_NS_8equal_toIiEELb1EEENS_9allocatorIS3_EEE8__rehashEj($this, $$sroa$speculated);
 }
 return;
}

function _setup($width, $height, $cameraID) {
 $width = $width | 0;
 $height = $height | 0;
 $cameraID = $cameraID | 0;
 var $0 = 0, $call = 0, $call7 = 0, $call8 = 0, $id = 0, $mul4 = 0, $vararg_buffer1 = 0, $videoFrame = 0, $videoFrameSize = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $vararg_buffer1 = sp + 8 | 0;
 $id = sp + 12 | 0;
 $0 = HEAP32[4297] | 0;
 HEAP32[4297] = $0 + 1;
 HEAP32[$id >> 2] = $0;
 $call = __ZNSt3__213unordered_mapIi12arControllerNS_4hashIiEENS_8equal_toIiEENS_9allocatorINS_4pairIKiS1_EEEEEixERS8_(17144, $id) | 0;
 HEAP32[$call >> 2] = HEAP32[$id >> 2];
 HEAP32[$call + 204 >> 2] = $width;
 HEAP32[$call + 208 >> 2] = $height;
 $mul4 = Math_imul($width << 2, $height) | 0;
 $videoFrameSize = $call + 200 | 0;
 HEAP32[$videoFrameSize >> 2] = $mul4;
 $call7 = _malloc($mul4) | 0;
 $videoFrame = $call + 196 | 0;
 HEAP32[$videoFrame >> 2] = $call7;
 $call8 = _arPattCreateHandle() | 0;
 HEAP32[$call + 216 >> 2] = $call8;
 if (!$call8) _arLog(3, 9870, sp);
 _setCamera(HEAP32[$id >> 2] | 0, $cameraID) | 0;
 HEAP32[$vararg_buffer1 >> 2] = HEAP32[$videoFrameSize >> 2];
 _arLog(1, 9907, $vararg_buffer1);
 _emscripten_asm_const_iiiiii(0, HEAP32[$call >> 2] | 0, HEAP32[$videoFrame >> 2] | 0, HEAP32[$videoFrameSize >> 2] | 0, $call + 264 | 0, 17024) | 0;
 STACKTOP = sp;
 return HEAP32[$call >> 2] | 0;
}

function __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6assignEPKcj($this, $__s, $__n) {
 $this = $this | 0;
 $__s = $__s | 0;
 $__n = $__n | 0;
 var $0 = 0, $__size_$i$i = 0, $cond$i = 0, $cond$i11 = 0, $cond$i5 = 0, $ref$tmp = 0, $tobool$i$i = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $ref$tmp = sp;
 $__size_$i$i = $this + 11 | 0;
 $0 = HEAP8[$__size_$i$i >> 0] | 0;
 $tobool$i$i = $0 << 24 >> 24 < 0;
 if ($tobool$i$i) $cond$i = (HEAP32[$this + 8 >> 2] & 2147483647) + -1 | 0; else $cond$i = 10;
 do if ($cond$i >>> 0 < $__n >>> 0) {
  if ($tobool$i$i) $cond$i11 = HEAP32[$this + 4 >> 2] | 0; else $cond$i11 = $0 & 255;
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE21__grow_by_and_replaceEjjjjjjPKc($this, $cond$i, $__n - $cond$i | 0, $cond$i11, 0, $cond$i11, $__n, $__s);
 } else {
  if ($tobool$i$i) $cond$i5 = HEAP32[$this >> 2] | 0; else $cond$i5 = $this;
  __ZNSt3__211char_traitsIcE4moveEPcPKcj($cond$i5, $__s, $__n) | 0;
  HEAP8[$ref$tmp >> 0] = 0;
  __ZNSt3__211char_traitsIcE6assignERcRKc($cond$i5 + $__n | 0, $ref$tmp);
  if ((HEAP8[$__size_$i$i >> 0] | 0) < 0) {
   HEAP32[$this + 4 >> 2] = $__n;
   break;
  } else {
   HEAP8[$__size_$i$i >> 0] = $__n;
   break;
  }
 } while (0);
 STACKTOP = sp;
 return;
}

function _icpGetDeltaS($S, $dU, $J_U_S, $n) {
 $S = $S | 0;
 $dU = $dU | 0;
 $J_U_S = $J_U_S | 0;
 $n = $n | 0;
 var $call = 0, $call13 = 0, $call8 = 0, $matJ = 0, $matS = 0, $matU = 0, $retval$0 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48);
 $matS = sp + 24 | 0;
 $matU = sp + 12 | 0;
 $matJ = sp;
 HEAP32[$matS + 4 >> 2] = 6;
 HEAP32[$matS + 8 >> 2] = 1;
 HEAP32[$matS >> 2] = $S;
 HEAP32[$matU + 4 >> 2] = $n;
 HEAP32[$matU + 8 >> 2] = 1;
 HEAP32[$matU >> 2] = $dU;
 HEAP32[$matJ + 4 >> 2] = $n;
 HEAP32[$matJ + 8 >> 2] = 6;
 HEAP32[$matJ >> 2] = $J_U_S;
 $call = _arMatrixAllocTrans($matJ) | 0;
 do if (!$call) $retval$0 = -1; else {
  $call8 = _arMatrixAllocMul($call, $matJ) | 0;
  if (!$call8) {
   _arMatrixFree($call) | 0;
   $retval$0 = -1;
   break;
  }
  $call13 = _arMatrixAllocMul($call, $matU) | 0;
  if (!$call13) {
   _arMatrixFree($call) | 0;
   _arMatrixFree($call8) | 0;
   $retval$0 = -1;
   break;
  }
  if ((_arMatrixSelfInv($call8) | 0) < 0) {
   _arMatrixFree($call) | 0;
   _arMatrixFree($call8) | 0;
   _arMatrixFree($call13) | 0;
   $retval$0 = -1;
   break;
  } else {
   _arMatrixMul($matS, $call8, $call13) | 0;
   _arMatrixFree($call) | 0;
   _arMatrixFree($call8) | 0;
   _arMatrixFree($call13) | 0;
   $retval$0 = 0;
   break;
  }
 } while (0);
 STACKTOP = sp;
 return $retval$0 | 0;
}
function __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEC2ERKS7_($this, $__str) {
 $this = $this | 0;
 $__str = $__str | 0;
 var $1 = 0, $2 = 0, $__p$0$i = 0, $and$i$i$i = 0, $call$i$i = 0, $ref$tmp$i = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $ref$tmp$i = sp;
 HEAP32[$this >> 2] = 0;
 HEAP32[$this + 4 >> 2] = 0;
 HEAP32[$this + 8 >> 2] = 0;
 if ((HEAP8[$__str + 11 >> 0] | 0) < 0) {
  $1 = HEAP32[$__str >> 2] | 0;
  $2 = HEAP32[$__str + 4 >> 2] | 0;
  if ($2 >>> 0 > 4294967279) __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($this);
  if ($2 >>> 0 < 11) {
   HEAP8[$this + 11 >> 0] = $2;
   $__p$0$i = $this;
  } else {
   $and$i$i$i = $2 + 16 & -16;
   $call$i$i = __ZN10__cxxabiv112_GLOBAL__N_112malloc_allocIcE8allocateEj($and$i$i$i) | 0;
   HEAP32[$this >> 2] = $call$i$i;
   HEAP32[$this + 8 >> 2] = $and$i$i$i | -2147483648;
   HEAP32[$this + 4 >> 2] = $2;
   $__p$0$i = $call$i$i;
  }
  __ZNSt3__211char_traitsIcE4copyEPcPKcj($__p$0$i, $1, $2) | 0;
  HEAP8[$ref$tmp$i >> 0] = 0;
  __ZNSt3__211char_traitsIcE6assignERcRKc($__p$0$i + $2 | 0, $ref$tmp$i);
 } else {
  HEAP32[$this >> 2] = HEAP32[$__str >> 2];
  HEAP32[$this + 4 >> 2] = HEAP32[$__str + 4 >> 2];
  HEAP32[$this + 8 >> 2] = HEAP32[$__str + 8 >> 2];
 }
 STACKTOP = sp;
 return;
}

function __ZN10__cxxabiv112_GLOBAL__N_117parse_call_offsetEPKcS2_($first, $last) {
 $first = $first | 0;
 $last = $last | 0;
 var $add$ptr = 0, $call = 0, $call12 = 0, $call21 = 0, $first$addr$3 = 0, $incdec$ptr = 0;
 L1 : do if (($first | 0) == ($last | 0)) $first$addr$3 = $first; else {
  $add$ptr = $first + 1 | 0;
  switch (HEAP8[$first >> 0] | 0) {
  case 104:
   {
    $call = __ZN10__cxxabiv112_GLOBAL__N_112parse_numberEPKcS2_($add$ptr, $last) | 0;
    if (($call | 0) == ($add$ptr | 0) | ($call | 0) == ($last | 0)) {
     $first$addr$3 = $first;
     break L1;
    }
    return ((HEAP8[$call >> 0] | 0) == 95 ? $call + 1 | 0 : $first) | 0;
   }
  case 118:
   break;
  default:
   {
    $first$addr$3 = $first;
    break L1;
   }
  }
  $call12 = __ZN10__cxxabiv112_GLOBAL__N_112parse_numberEPKcS2_($add$ptr, $last) | 0;
  if (($call12 | 0) == ($add$ptr | 0) | ($call12 | 0) == ($last | 0)) $first$addr$3 = $first; else if ((HEAP8[$call12 >> 0] | 0) == 95) {
   $incdec$ptr = $call12 + 1 | 0;
   $call21 = __ZN10__cxxabiv112_GLOBAL__N_112parse_numberEPKcS2_($incdec$ptr, $last) | 0;
   if (($call21 | 0) == ($incdec$ptr | 0) | ($call21 | 0) == ($last | 0)) $first$addr$3 = $first; else $first$addr$3 = (HEAP8[$call21 >> 0] | 0) == 95 ? $call21 + 1 | 0 : $first;
  } else $first$addr$3 = $first;
 } while (0);
 return $first$addr$3 | 0;
}

function _getTransMatMultiSquareRobust($id, $multiMarkerId) {
 $id = $id | 0;
 $multiMarkerId = $multiMarkerId | 0;
 var $2 = 0, $5 = 0, $7 = 0, $call7 = 0, $id$addr = 0, $retval$1 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $id$addr = sp;
 HEAP32[$id$addr >> 2] = $id;
 do if (!(__ZNSt3__212__hash_tableINS_17__hash_value_typeIi12arControllerEENS_22__unordered_map_hasherIiS3_NS_4hashIiEELb1EEENS_21__unordered_map_equalIiS3_NS_8equal_toIiEELb1EEENS_9allocatorIS3_EEE4findIiEENS_15__hash_iteratorIPNS_11__hash_nodeIS3_PvEEEERKT_(17144, $id$addr) | 0)) $retval$1 = HEAP32[421] | 0; else {
  $call7 = __ZNSt3__213unordered_mapIi12arControllerNS_4hashIiEENS_8equal_toIiEENS_9allocatorINS_4pairIKiS1_EEEEEixERS8_(17144, $id$addr) | 0;
  $2 = HEAP32[$call7 + 248 >> 2] | 0;
  if (($multiMarkerId | 0) < 0 ? 1 : (HEAP32[$call7 + 252 >> 2] | 0) - $2 >> 3 >>> 0 <= $multiMarkerId >>> 0) {
   $retval$1 = HEAP32[422] | 0;
   break;
  } else {
   $5 = HEAP32[$2 + ($multiMarkerId << 3) + 4 >> 2] | 0;
   $7 = HEAP32[$call7 + 212 >> 2] | 0;
   +_arGetTransMatMultiSquareRobust(HEAP32[$call7 + 224 >> 2] | 0, $7 + 48 | 0, HEAP32[$7 + 44 >> 2] | 0, $5);
   _matrixCopy($5 + 8 | 0, 17024);
   $retval$1 = 0;
   break;
  }
 } while (0);
 STACKTOP = sp;
 return $retval$1 | 0;
}

function __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($this, $__v) {
 $this = $this | 0;
 $__v = $__v | 0;
 var $0 = 0, $4 = 0, $6 = 0, $8 = 0, $__begin_2 = 0, $__end1$addr$0$i = 0, $__end_ = 0, $__end_6 = 0, $__first_$i$i$i = 0, $__first_$i$i$i6 = 0, $incdec$ptr$i = 0;
 $0 = HEAP32[$this >> 2] | 0;
 $__end_ = $this + 4 | 0;
 $__begin_2 = $__v + 4 | 0;
 $__end1$addr$0$i = HEAP32[$__end_ >> 2] | 0;
 while (1) {
  if (($__end1$addr$0$i | 0) == ($0 | 0)) break;
  $incdec$ptr$i = $__end1$addr$0$i + -24 | 0;
  __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_((HEAP32[$__begin_2 >> 2] | 0) + -24 | 0, $incdec$ptr$i);
  HEAP32[$__begin_2 >> 2] = (HEAP32[$__begin_2 >> 2] | 0) + -24;
  $__end1$addr$0$i = $incdec$ptr$i;
 }
 $4 = HEAP32[$this >> 2] | 0;
 HEAP32[$this >> 2] = HEAP32[$__begin_2 >> 2];
 HEAP32[$__begin_2 >> 2] = $4;
 $__end_6 = $__v + 8 | 0;
 $6 = HEAP32[$__end_ >> 2] | 0;
 HEAP32[$__end_ >> 2] = HEAP32[$__end_6 >> 2];
 HEAP32[$__end_6 >> 2] = $6;
 $__first_$i$i$i6 = $this + 8 | 0;
 $__first_$i$i$i = $__v + 12 | 0;
 $8 = HEAP32[$__first_$i$i$i6 >> 2] | 0;
 HEAP32[$__first_$i$i$i6 >> 2] = HEAP32[$__first_$i$i$i >> 2];
 HEAP32[$__first_$i$i$i >> 2] = $8;
 HEAP32[$__v >> 2] = HEAP32[$__begin_2 >> 2];
 return;
}

function __ZNSt3__26vectorI12multi_markerNS_9allocatorIS1_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS1_RS3_EE($this, $__v) {
 $this = $this | 0;
 $__v = $__v | 0;
 var $$pre$phiZ2D = 0, $0 = 0, $4 = 0, $5 = 0, $6 = 0, $8 = 0, $__begin_2 = 0, $__end_ = 0, $__end_6 = 0, $__first_$i$i$i = 0, $__first_$i$i$i6 = 0, $add$ptr$i = 0, $sub$ptr$sub$i7 = 0;
 $0 = HEAP32[$this >> 2] | 0;
 $__end_ = $this + 4 | 0;
 $__begin_2 = $__v + 4 | 0;
 $sub$ptr$sub$i7 = (HEAP32[$__end_ >> 2] | 0) - $0 | 0;
 $add$ptr$i = (HEAP32[$__begin_2 >> 2] | 0) + (0 - ($sub$ptr$sub$i7 >> 3) << 3) | 0;
 HEAP32[$__begin_2 >> 2] = $add$ptr$i;
 if (($sub$ptr$sub$i7 | 0) > 0) {
  _memcpy($add$ptr$i | 0, $0 | 0, $sub$ptr$sub$i7 | 0) | 0;
  $$pre$phiZ2D = $__begin_2;
  $5 = HEAP32[$__begin_2 >> 2] | 0;
 } else {
  $$pre$phiZ2D = $__begin_2;
  $5 = $add$ptr$i;
 }
 $4 = HEAP32[$this >> 2] | 0;
 HEAP32[$this >> 2] = $5;
 HEAP32[$$pre$phiZ2D >> 2] = $4;
 $__end_6 = $__v + 8 | 0;
 $6 = HEAP32[$__end_ >> 2] | 0;
 HEAP32[$__end_ >> 2] = HEAP32[$__end_6 >> 2];
 HEAP32[$__end_6 >> 2] = $6;
 $__first_$i$i$i6 = $this + 8 | 0;
 $__first_$i$i$i = $__v + 12 | 0;
 $8 = HEAP32[$__first_$i$i$i6 >> 2] | 0;
 HEAP32[$__first_$i$i$i6 >> 2] = HEAP32[$__first_$i$i$i >> 2];
 HEAP32[$__first_$i$i$i >> 2] = $8;
 HEAP32[$__v >> 2] = HEAP32[$$pre$phiZ2D >> 2];
 return;
}

function _getTransMatMultiSquare($id, $multiMarkerId) {
 $id = $id | 0;
 $multiMarkerId = $multiMarkerId | 0;
 var $2 = 0, $5 = 0, $7 = 0, $call7 = 0, $id$addr = 0, $retval$1 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $id$addr = sp;
 HEAP32[$id$addr >> 2] = $id;
 do if (!(__ZNSt3__212__hash_tableINS_17__hash_value_typeIi12arControllerEENS_22__unordered_map_hasherIiS3_NS_4hashIiEELb1EEENS_21__unordered_map_equalIiS3_NS_8equal_toIiEELb1EEENS_9allocatorIS3_EEE4findIiEENS_15__hash_iteratorIPNS_11__hash_nodeIS3_PvEEEERKT_(17144, $id$addr) | 0)) $retval$1 = HEAP32[421] | 0; else {
  $call7 = __ZNSt3__213unordered_mapIi12arControllerNS_4hashIiEENS_8equal_toIiEENS_9allocatorINS_4pairIKiS1_EEEEEixERS8_(17144, $id$addr) | 0;
  $2 = HEAP32[$call7 + 248 >> 2] | 0;
  if (($multiMarkerId | 0) < 0 ? 1 : (HEAP32[$call7 + 252 >> 2] | 0) - $2 >> 3 >>> 0 <= $multiMarkerId >>> 0) {
   $retval$1 = HEAP32[422] | 0;
   break;
  } else {
   $5 = HEAP32[$2 + ($multiMarkerId << 3) + 4 >> 2] | 0;
   $7 = HEAP32[$call7 + 212 >> 2] | 0;
   +_arGetTransMatMultiSquare(HEAP32[$call7 + 224 >> 2] | 0, $7 + 48 | 0, HEAP32[$7 + 44 >> 2] | 0, $5);
   _matrixCopy($5 + 8 | 0, 17024);
   $retval$1 = 0;
   break;
  }
 } while (0);
 STACKTOP = sp;
 return $retval$1 | 0;
}

function _fopen($filename, $mode) {
 $filename = $filename | 0;
 $mode = $mode | 0;
 var $call1 = 0, $call12 = 0, $call2 = 0, $call4 = 0, $retval$0 = 0, $vararg_buffer = 0, $vararg_buffer3 = 0, $vararg_buffer8 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48);
 $vararg_buffer8 = sp + 32 | 0;
 $vararg_buffer3 = sp + 16 | 0;
 $vararg_buffer = sp;
 if (!(_memchr(14226, HEAP8[$mode >> 0] | 0, 4) | 0)) {
  $call1 = ___errno_location() | 0;
  HEAP32[$call1 >> 2] = 22;
  $retval$0 = 0;
 } else {
  $call2 = ___fmodeflags($mode) | 0;
  HEAP32[$vararg_buffer >> 2] = $filename;
  HEAP32[$vararg_buffer + 4 >> 2] = $call2 | 32768;
  HEAP32[$vararg_buffer + 8 >> 2] = 438;
  $call4 = ___syscall_ret(___syscall5(5, $vararg_buffer | 0) | 0) | 0;
  if (($call4 | 0) < 0) $retval$0 = 0; else {
   if ($call2 & 524288 | 0) {
    HEAP32[$vararg_buffer3 >> 2] = $call4;
    HEAP32[$vararg_buffer3 + 4 >> 2] = 2;
    HEAP32[$vararg_buffer3 + 8 >> 2] = 1;
    ___syscall221(221, $vararg_buffer3 | 0) | 0;
   }
   $call12 = ___fdopen($call4, $mode) | 0;
   if (!$call12) {
    HEAP32[$vararg_buffer8 >> 2] = $call4;
    ___syscall6(6, $vararg_buffer8 | 0) | 0;
    $retval$0 = 0;
   } else $retval$0 = $call12;
  }
 }
 STACKTOP = sp;
 return $retval$0 | 0;
}

function _fflush($f) {
 $f = $f | 0;
 var $call1 = 0, $call11 = 0, $cond10 = 0, $cond20 = 0, $f$addr$019 = 0, $f$addr$022 = 0, $phitmp = 0, $r$0$lcssa = 0, $r$021 = 0, $r$1 = 0, $retval$0 = 0;
 do if (!$f) {
  if (!(HEAP32[627] | 0)) $cond10 = 0; else $cond10 = _fflush(HEAP32[627] | 0) | 0;
  $call11 = ___ofl_lock() | 0;
  $f$addr$019 = HEAP32[$call11 >> 2] | 0;
  if (!$f$addr$019) $r$0$lcssa = $cond10; else {
   $f$addr$022 = $f$addr$019;
   $r$021 = $cond10;
   while (1) {
    if ((HEAP32[$f$addr$022 + 76 >> 2] | 0) > -1) $cond20 = ___lockfile($f$addr$022) | 0; else $cond20 = 0;
    if ((HEAP32[$f$addr$022 + 20 >> 2] | 0) >>> 0 > (HEAP32[$f$addr$022 + 28 >> 2] | 0) >>> 0) $r$1 = ___fflush_unlocked($f$addr$022) | 0 | $r$021; else $r$1 = $r$021;
    if ($cond20 | 0) ___unlockfile($f$addr$022);
    $f$addr$022 = HEAP32[$f$addr$022 + 56 >> 2] | 0;
    if (!$f$addr$022) {
     $r$0$lcssa = $r$1;
     break;
    } else $r$021 = $r$1;
   }
  }
  ___ofl_unlock();
  $retval$0 = $r$0$lcssa;
 } else {
  if ((HEAP32[$f + 76 >> 2] | 0) <= -1) {
   $retval$0 = ___fflush_unlocked($f) | 0;
   break;
  }
  $phitmp = (___lockfile($f) | 0) == 0;
  $call1 = ___fflush_unlocked($f) | 0;
  if ($phitmp) $retval$0 = $call1; else {
   ___unlockfile($f);
   $retval$0 = $call1;
  }
 } while (0);
 return $retval$0 | 0;
}

function _icpGetJ_U_S($J_U_S, $matXc2U, $matXw2Xc, $worldCoord) {
 $J_U_S = $J_U_S | 0;
 $matXc2U = $matXc2U | 0;
 $matXw2Xc = $matXw2Xc | 0;
 $worldCoord = $worldCoord | 0;
 var $2 = 0.0, $J_U_Xc = 0, $J_Xc_S = 0, $Xc = 0, $add = 0.0, $arrayidx10 = 0, $i$0 = 0, $j$0 = 0, $k$0 = 0, $retval$0 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(224);
 $J_Xc_S = sp + 72 | 0;
 $J_U_Xc = sp + 24 | 0;
 $Xc = sp;
 _icpGetJ_Xc_S($J_Xc_S, $Xc, $matXw2Xc, $worldCoord);
 L1 : do if ((_icpGetJ_U_Xc($J_U_Xc, $matXc2U, $Xc) | 0) < 0) {
  _arLog(3, 4441, sp + 216 | 0);
  $retval$0 = -1;
 } else {
  $j$0 = 0;
  while (1) {
   if (($j$0 | 0) == 2) {
    $retval$0 = 0;
    break L1;
   } else $i$0 = 0;
   while (1) {
    if (($i$0 | 0) == 6) break;
    $arrayidx10 = $J_U_S + ($j$0 * 48 | 0) + ($i$0 << 3) | 0;
    HEAPF64[$arrayidx10 >> 3] = 0.0;
    $2 = 0.0;
    $k$0 = 0;
    while (1) {
     if (($k$0 | 0) == 3) break;
     $add = $2 + +HEAPF64[$J_U_Xc + ($j$0 * 24 | 0) + ($k$0 << 3) >> 3] * +HEAPF64[$J_Xc_S + ($k$0 * 48 | 0) + ($i$0 << 3) >> 3];
     HEAPF64[$arrayidx10 >> 3] = $add;
     $2 = $add;
     $k$0 = $k$0 + 1 | 0;
    }
    $i$0 = $i$0 + 1 | 0;
   }
   $j$0 = $j$0 + 1 | 0;
  }
 } while (0);
 STACKTOP = sp;
 return $retval$0 | 0;
}

function _EX($input, $mean) {
 $input = $input | 0;
 $mean = $mean | 0;
 var $0 = 0, $1 = 0, $arrayidx29 = 0, $conv = 0.0, $i$0 = 0, $i$1 = 0, $i$2 = 0, $j$0 = 0, $m$0 = 0, $m$1 = 0, $retval$0 = 0, $v$0 = 0;
 $0 = HEAP32[$input + 4 >> 2] | 0;
 $1 = HEAP32[$input + 8 >> 2] | 0;
 L1 : do if (($0 | 0) < 1 | ($1 | 0) < 1) $retval$0 = -1; else if ((HEAP32[$mean + 4 >> 2] | 0) == ($1 | 0)) {
  $i$0 = 0;
  while (1) {
   if (($i$0 | 0) == ($1 | 0)) break;
   HEAPF64[(HEAP32[$mean >> 2] | 0) + ($i$0 << 3) >> 3] = 0.0;
   $i$0 = $i$0 + 1 | 0;
  }
  $i$1 = 0;
  $m$0 = HEAP32[$input >> 2] | 0;
  while (1) {
   if (($i$1 | 0) == ($0 | 0)) break;
   $j$0 = 0;
   $m$1 = $m$0;
   $v$0 = HEAP32[$mean >> 2] | 0;
   while (1) {
    if (($j$0 | 0) == ($1 | 0)) break;
    HEAPF64[$v$0 >> 3] = +HEAPF64[$m$1 >> 3] + +HEAPF64[$v$0 >> 3];
    $j$0 = $j$0 + 1 | 0;
    $m$1 = $m$1 + 8 | 0;
    $v$0 = $v$0 + 8 | 0;
   }
   $i$1 = $i$1 + 1 | 0;
   $m$0 = $m$0 + ($1 << 3) | 0;
  }
  $conv = +($0 | 0);
  $i$2 = 0;
  while (1) {
   if (($i$2 | 0) == ($1 | 0)) {
    $retval$0 = 0;
    break L1;
   }
   $arrayidx29 = (HEAP32[$mean >> 2] | 0) + ($i$2 << 3) | 0;
   HEAPF64[$arrayidx29 >> 3] = +HEAPF64[$arrayidx29 >> 3] / $conv;
   $i$2 = $i$2 + 1 | 0;
  }
 } else $retval$0 = -1; while (0);
 return $retval$0 | 0;
}

function _wcrtomb($s, $wc, $st) {
 $s = $s | 0;
 $wc = $wc | 0;
 $st = $st | 0;
 var $call10 = 0, $call66 = 0, $locale = 0, $retval$0 = 0;
 do if (!$s) $retval$0 = 1; else {
  if ($wc >>> 0 < 128) {
   HEAP8[$s >> 0] = $wc;
   $retval$0 = 1;
   break;
  }
  $locale = (___pthread_self_431() | 0) + 188 | 0;
  if (!(HEAP32[HEAP32[$locale >> 2] >> 2] | 0)) if (($wc & -128 | 0) == 57216) {
   HEAP8[$s >> 0] = $wc;
   $retval$0 = 1;
   break;
  } else {
   $call10 = ___errno_location() | 0;
   HEAP32[$call10 >> 2] = 84;
   $retval$0 = -1;
   break;
  }
  if ($wc >>> 0 < 2048) {
   HEAP8[$s >> 0] = $wc >>> 6 | 192;
   HEAP8[$s + 1 >> 0] = $wc & 63 | 128;
   $retval$0 = 2;
   break;
  }
  if ($wc >>> 0 < 55296 | ($wc & -8192 | 0) == 57344) {
   HEAP8[$s >> 0] = $wc >>> 12 | 224;
   HEAP8[$s + 1 >> 0] = $wc >>> 6 & 63 | 128;
   HEAP8[$s + 2 >> 0] = $wc & 63 | 128;
   $retval$0 = 3;
   break;
  }
  if (($wc + -65536 | 0) >>> 0 < 1048576) {
   HEAP8[$s >> 0] = $wc >>> 18 | 240;
   HEAP8[$s + 1 >> 0] = $wc >>> 12 & 63 | 128;
   HEAP8[$s + 2 >> 0] = $wc >>> 6 & 63 | 128;
   HEAP8[$s + 3 >> 0] = $wc & 63 | 128;
   $retval$0 = 4;
   break;
  } else {
   $call66 = ___errno_location() | 0;
   HEAP32[$call66 >> 2] = 84;
   $retval$0 = -1;
   break;
  }
 } while (0);
 return $retval$0 | 0;
}

function __ZNSt3__212__hash_tableINS_17__hash_value_typeIi12arControllerEENS_22__unordered_map_hasherIiS3_NS_4hashIiEELb1EEENS_21__unordered_map_equalIiS3_NS_8equal_toIiEELb1EEENS_9allocatorIS3_EEE5eraseENS_21__hash_const_iteratorIPNS_11__hash_nodeIS3_PvEEEE($this, $__p) {
 $this = $this | 0;
 $__p = $__p | 0;
 var $0 = 0, $2 = 0, $3 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $agg$tmp$ensured = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 $agg$tmp$byval_copy = sp + 16 | 0;
 $agg$tmp$ensured = sp + 4 | 0;
 $agg$tmp = sp;
 $0 = HEAP32[$__p >> 2] | 0;
 $2 = HEAP32[$0 >> 2] | 0;
 HEAP32[$agg$tmp >> 2] = $0;
 HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
 __ZNSt3__212__hash_tableINS_17__hash_value_typeIi12arControllerEENS_22__unordered_map_hasherIiS3_NS_4hashIiEELb1EEENS_21__unordered_map_equalIiS3_NS_8equal_toIiEELb1EEENS_9allocatorIS3_EEE6removeENS_21__hash_const_iteratorIPNS_11__hash_nodeIS3_PvEEEE($agg$tmp$ensured, $this, $agg$tmp$byval_copy);
 $3 = HEAP32[$agg$tmp$ensured >> 2] | 0;
 HEAP32[$agg$tmp$ensured >> 2] = 0;
 if ($3 | 0) {
  if (HEAP8[$agg$tmp$ensured + 8 >> 0] | 0) __ZNSt3__24pairIKi12arControllerED2Ev($3 + 8 | 0);
  __ZdlPv($3);
 }
 STACKTOP = sp;
 return $2 | 0;
}

function _arPattLoad($pattHandle, $filename) {
 $pattHandle = $pattHandle | 0;
 $filename = $filename | 0;
 var $call = 0, $call13 = 0, $call2 = 0, $call4 = 0, $call8 = 0, $retval$0 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer3 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 $vararg_buffer3 = sp + 16 | 0;
 $vararg_buffer1 = sp + 8 | 0;
 $vararg_buffer = sp;
 $call = _fopen($filename, 4206) | 0;
 do if (!$call) {
  HEAP32[$vararg_buffer >> 2] = $filename;
  _arLog(3, 4126, $vararg_buffer);
  $retval$0 = -1;
 } else {
  _fseek($call, 0, 2) | 0;
  $call2 = _ftell($call) | 0;
  _fseek($call, 0, 0) | 0;
  $call4 = _malloc($call2 + 1 | 0) | 0;
  if (!$call4) {
   _arLog(3, 4823, $vararg_buffer1);
   _fclose($call) | 0;
   $retval$0 = -1;
   break;
  }
  $call8 = _fread($call4, $call2, 1, $call) | 0;
  _fclose($call) | 0;
  if (!$call8) {
   HEAP32[$vararg_buffer3 >> 2] = $filename;
   _arLog(3, 4172, $vararg_buffer3);
   _free($call4);
   $retval$0 = -1;
   break;
  } else {
   HEAP8[$call4 + $call2 >> 0] = 0;
   $call13 = _arPattLoadFromBuffer($pattHandle, $call4) | 0;
   _free($call4);
   $retval$0 = $call13;
   break;
  }
 } while (0);
 STACKTOP = sp;
 return $retval$0 | 0;
}

function _atoi($s) {
 $s = $s | 0;
 var $0 = 0, $1 = 0, $conv = 0, $incdec$ptr = 0, $isdigittmp13 = 0, $isdigittmp9 = 0, $n$0$lcssa = 0, $n$012 = 0, $neg$0 = 0, $neg$1$ph = 0, $s$addr$0 = 0, $s$addr$1$ph = 0, $s$addr$111 = 0, $sub11 = 0, label = 0;
 $s$addr$0 = $s;
 while (1) {
  $0 = HEAP8[$s$addr$0 >> 0] | 0;
  $conv = $0 << 24 >> 24;
  $incdec$ptr = $s$addr$0 + 1 | 0;
  if (!(_isspace($conv) | 0)) break; else $s$addr$0 = $incdec$ptr;
 }
 switch ($conv | 0) {
 case 45:
  {
   $neg$0 = 1;
   label = 5;
   break;
  }
 case 43:
  {
   $neg$0 = 0;
   label = 5;
   break;
  }
 default:
  {
   $1 = $0;
   $neg$1$ph = 0;
   $s$addr$1$ph = $s$addr$0;
  }
 }
 if ((label | 0) == 5) {
  $1 = HEAP8[$incdec$ptr >> 0] | 0;
  $neg$1$ph = $neg$0;
  $s$addr$1$ph = $incdec$ptr;
 }
 $isdigittmp9 = ($1 << 24 >> 24) + -48 | 0;
 if ($isdigittmp9 >>> 0 < 10) {
  $isdigittmp13 = $isdigittmp9;
  $n$012 = 0;
  $s$addr$111 = $s$addr$1$ph;
  while (1) {
   $s$addr$111 = $s$addr$111 + 1 | 0;
   $sub11 = ($n$012 * 10 | 0) - $isdigittmp13 | 0;
   $isdigittmp13 = (HEAP8[$s$addr$111 >> 0] | 0) + -48 | 0;
   if ($isdigittmp13 >>> 0 >= 10) {
    $n$0$lcssa = $sub11;
    break;
   } else $n$012 = $sub11;
  }
 } else $n$0$lcssa = 0;
 return ($neg$1$ph | 0 ? $n$0$lcssa : 0 - $n$0$lcssa | 0) | 0;
}

function _memset(ptr, value, num) {
 ptr = ptr | 0;
 value = value | 0;
 num = num | 0;
 var end = 0, aligned_end = 0, block_aligned_end = 0, value4 = 0;
 end = ptr + num | 0;
 value = value & 255;
 if ((num | 0) >= 67) {
  while (ptr & 3) {
   HEAP8[ptr >> 0] = value;
   ptr = ptr + 1 | 0;
  }
  aligned_end = end & -4 | 0;
  block_aligned_end = aligned_end - 64 | 0;
  value4 = value | value << 8 | value << 16 | value << 24;
  while ((ptr | 0) <= (block_aligned_end | 0)) {
   HEAP32[ptr >> 2] = value4;
   HEAP32[ptr + 4 >> 2] = value4;
   HEAP32[ptr + 8 >> 2] = value4;
   HEAP32[ptr + 12 >> 2] = value4;
   HEAP32[ptr + 16 >> 2] = value4;
   HEAP32[ptr + 20 >> 2] = value4;
   HEAP32[ptr + 24 >> 2] = value4;
   HEAP32[ptr + 28 >> 2] = value4;
   HEAP32[ptr + 32 >> 2] = value4;
   HEAP32[ptr + 36 >> 2] = value4;
   HEAP32[ptr + 40 >> 2] = value4;
   HEAP32[ptr + 44 >> 2] = value4;
   HEAP32[ptr + 48 >> 2] = value4;
   HEAP32[ptr + 52 >> 2] = value4;
   HEAP32[ptr + 56 >> 2] = value4;
   HEAP32[ptr + 60 >> 2] = value4;
   ptr = ptr + 64 | 0;
  }
  while ((ptr | 0) < (aligned_end | 0)) {
   HEAP32[ptr >> 2] = value4;
   ptr = ptr + 4 | 0;
  }
 }
 while ((ptr | 0) < (end | 0)) {
  HEAP8[ptr >> 0] = value;
  ptr = ptr + 1 | 0;
 }
 return end - num | 0;
}

function _addMarker($id, $patt_name) {
 $id = $id | 0;
 $patt_name = $patt_name | 0;
 var $call7 = 0, $cond$i$i$i = 0, $id$addr = 0, $patt_id = 0, $retval$1 = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $vararg_buffer = sp;
 $id$addr = sp + 4 | 0;
 HEAP32[$id$addr >> 2] = $id;
 do if (!(__ZNSt3__212__hash_tableINS_17__hash_value_typeIi12arControllerEENS_22__unordered_map_hasherIiS3_NS_4hashIiEELb1EEENS_21__unordered_map_equalIiS3_NS_8equal_toIiEELb1EEENS_9allocatorIS3_EEE4findIiEENS_15__hash_iteratorIPNS_11__hash_nodeIS3_PvEEEERKT_(17144, $id$addr) | 0)) $retval$1 = -1; else {
  $call7 = __ZNSt3__213unordered_mapIi12arControllerNS_4hashIiEENS_8equal_toIiEENS_9allocatorINS_4pairIKiS1_EEEEEixERS8_(17144, $id$addr) | 0;
  if ((HEAP8[$patt_name + 11 >> 0] | 0) < 0) $cond$i$i$i = HEAP32[$patt_name >> 2] | 0; else $cond$i$i$i = $patt_name;
  $patt_id = $call7 + 260 | 0;
  if (!(__ZL10loadMarkerPKcPiP8ARHandlePP12ARPattHandle($cond$i$i$i, $patt_id, $call7 + 216 | 0) | 0)) {
   _arLog(3, 9774, $vararg_buffer);
   $retval$1 = -1;
   break;
  } else {
   $retval$1 = HEAP32[$patt_id >> 2] | 0;
   break;
  }
 } while (0);
 STACKTOP = sp;
 return $retval$1 | 0;
}

function __ZNSt3__212__hash_tableINS_17__hash_value_typeIi12arControllerEENS_22__unordered_map_hasherIiS3_NS_4hashIiEELb1EEENS_21__unordered_map_equalIiS3_NS_8equal_toIiEELb1EEENS_9allocatorIS3_EEE14__erase_uniqueIiEEjRKT_($this, $__k) {
 $this = $this | 0;
 $__k = $__k | 0;
 var $agg$tmp = 0, $agg$tmp$byval_copy = 0, $call = 0, $retval$0 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $agg$tmp$byval_copy = sp + 4 | 0;
 $agg$tmp = sp;
 $call = __ZNSt3__212__hash_tableINS_17__hash_value_typeIi12arControllerEENS_22__unordered_map_hasherIiS3_NS_4hashIiEELb1EEENS_21__unordered_map_equalIiS3_NS_8equal_toIiEELb1EEENS_9allocatorIS3_EEE4findIiEENS_15__hash_iteratorIPNS_11__hash_nodeIS3_PvEEEERKT_($this, $__k) | 0;
 if (!$call) $retval$0 = 0; else {
  HEAP32[$agg$tmp >> 2] = $call;
  HEAP32[$agg$tmp$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
  __ZNSt3__212__hash_tableINS_17__hash_value_typeIi12arControllerEENS_22__unordered_map_hasherIiS3_NS_4hashIiEELb1EEENS_21__unordered_map_equalIiS3_NS_8equal_toIiEELb1EEENS_9allocatorIS3_EEE5eraseENS_21__hash_const_iteratorIPNS_11__hash_nodeIS3_PvEEEE($this, $agg$tmp$byval_copy) | 0;
  $retval$0 = 1;
 }
 STACKTOP = sp;
 return $retval$0 | 0;
}

function __ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv($this, $thrown_type, $adjustedPtr) {
 $this = $this | 0;
 $thrown_type = $thrown_type | 0;
 $adjustedPtr = $adjustedPtr | 0;
 var $1 = 0, $info = 0, $retval$0 = 0, $retval$2 = 0, dest = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(64);
 $info = sp;
 if (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($this, $thrown_type, 0) | 0) $retval$2 = 1; else if (!$thrown_type) $retval$2 = 0; else {
  $1 = ___dynamic_cast($thrown_type, 216, 200, 0) | 0;
  if (!$1) $retval$2 = 0; else {
   dest = $info + 4 | 0;
   stop = dest + 52 | 0;
   do {
    HEAP32[dest >> 2] = 0;
    dest = dest + 4 | 0;
   } while ((dest | 0) < (stop | 0));
   HEAP32[$info >> 2] = $1;
   HEAP32[$info + 8 >> 2] = $this;
   HEAP32[$info + 12 >> 2] = -1;
   HEAP32[$info + 48 >> 2] = 1;
   FUNCTION_TABLE_viiii[HEAP32[(HEAP32[$1 >> 2] | 0) + 28 >> 2] & 3]($1, $info, HEAP32[$adjustedPtr >> 2] | 0, 1);
   if ((HEAP32[$info + 24 >> 2] | 0) == 1) {
    HEAP32[$adjustedPtr >> 2] = HEAP32[$info + 16 >> 2];
    $retval$0 = 1;
   } else $retval$0 = 0;
   $retval$2 = $retval$0;
  }
 }
 STACKTOP = sp;
 return $retval$2 | 0;
}

function _fmt_u($0, $1, $s) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $s = $s | 0;
 var $7 = 0, $8 = 0, $9 = 0, $incdec$ptr7 = 0, $s$addr$0$lcssa = 0, $s$addr$013 = 0, $s$addr$1$lcssa = 0, $s$addr$19 = 0, $x$addr$0$lcssa$off0 = 0, $y$010 = 0, $7$looptemp = 0;
 if ($1 >>> 0 > 0 | ($1 | 0) == 0 & $0 >>> 0 > 4294967295) {
  $7 = $0;
  $8 = $1;
  $s$addr$013 = $s;
  while (1) {
   $9 = ___uremdi3($7 | 0, $8 | 0, 10, 0) | 0;
   $s$addr$013 = $s$addr$013 + -1 | 0;
   HEAP8[$s$addr$013 >> 0] = $9 & 255 | 48;
   $7$looptemp = $7;
   $7 = ___udivdi3($7 | 0, $8 | 0, 10, 0) | 0;
   if (!($8 >>> 0 > 9 | ($8 | 0) == 9 & $7$looptemp >>> 0 > 4294967295)) break; else $8 = tempRet0;
  }
  $s$addr$0$lcssa = $s$addr$013;
  $x$addr$0$lcssa$off0 = $7;
 } else {
  $s$addr$0$lcssa = $s;
  $x$addr$0$lcssa$off0 = $0;
 }
 if (!$x$addr$0$lcssa$off0) $s$addr$1$lcssa = $s$addr$0$lcssa; else {
  $s$addr$19 = $s$addr$0$lcssa;
  $y$010 = $x$addr$0$lcssa$off0;
  while (1) {
   $incdec$ptr7 = $s$addr$19 + -1 | 0;
   HEAP8[$incdec$ptr7 >> 0] = ($y$010 >>> 0) % 10 | 0 | 48;
   if ($y$010 >>> 0 < 10) {
    $s$addr$1$lcssa = $incdec$ptr7;
    break;
   } else {
    $s$addr$19 = $incdec$ptr7;
    $y$010 = ($y$010 >>> 0) / 10 | 0;
   }
  }
 }
 return $s$addr$1$lcssa | 0;
}

function __ZN10__cxxabiv112_GLOBAL__N_119parse_unscoped_nameINS0_2DbEEEPKcS4_S4_RT_($first, $last, $db) {
 $first = $first | 0;
 $last = $last | 0;
 $db = $db | 0;
 var $4 = 0, $St$0$off0 = 0, $add$ptr = 0, $call = 0, $cmp12 = 0, $retval$1 = 0, $t0$0 = 0;
 if (($last - $first | 0) > 1) {
  if ((HEAP8[$first >> 0] | 0) == 83) if ((HEAP8[$first + 1 >> 0] | 0) == 116) {
   $add$ptr = $first + 2 | 0;
   if (($add$ptr | 0) == ($last | 0)) {
    $St$0$off0 = 0;
    $t0$0 = $last;
   } else {
    $St$0$off0 = 0;
    $t0$0 = (HEAP8[$add$ptr >> 0] | 0) == 76 ? $first + 3 | 0 : $add$ptr;
   }
  } else {
   $St$0$off0 = 1;
   $t0$0 = $first;
  } else {
   $St$0$off0 = 1;
   $t0$0 = $first;
  }
  $call = __ZN10__cxxabiv112_GLOBAL__N_122parse_unqualified_nameINS0_2DbEEEPKcS4_S4_RT_($t0$0, $last, $db) | 0;
  $cmp12 = ($call | 0) == ($t0$0 | 0);
  if ($St$0$off0 | $cmp12) $retval$1 = $cmp12 ? $first : $call; else {
   $4 = HEAP32[$db + 4 >> 2] | 0;
   if ((HEAP32[$db >> 2] | 0) == ($4 | 0)) $retval$1 = $first; else {
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKc($4 + -24 | 0, 0, 15181) | 0;
    $retval$1 = $call;
   }
  }
 } else $retval$1 = $first;
 return $retval$1 | 0;
}

function _getTransMatSquareCont($id, $markerIndex, $markerWidth) {
 $id = $id | 0;
 $markerIndex = $markerIndex | 0;
 $markerWidth = $markerWidth | 0;
 var $1 = 0, $call7 = 0, $id$addr = 0, $retval$1 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $id$addr = sp;
 HEAP32[$id$addr >> 2] = $id;
 do if (!(__ZNSt3__212__hash_tableINS_17__hash_value_typeIi12arControllerEENS_22__unordered_map_hasherIiS3_NS_4hashIiEELb1EEENS_21__unordered_map_equalIiS3_NS_8equal_toIiEELb1EEENS_9allocatorIS3_EEE4findIiEENS_15__hash_iteratorIPNS_11__hash_nodeIS3_PvEEEERKT_(17144, $id$addr) | 0)) $retval$1 = HEAP32[421] | 0; else {
  $call7 = __ZNSt3__213unordered_mapIi12arControllerNS_4hashIiEENS_8equal_toIiEENS_9allocatorINS_4pairIKiS1_EEEEEixERS8_(17144, $id$addr) | 0;
  $1 = HEAP32[$call7 + 212 >> 2] | 0;
  if ((HEAP32[$1 + 44 >> 2] | 0) > ($markerIndex | 0)) {
   +_arGetTransMatSquareCont(HEAP32[$call7 + 224 >> 2] | 0, ($markerIndex | 0) < 0 ? 16768 : $1 + 48 + ($markerIndex << 8) | 0, 17024, +($markerWidth | 0), 17024);
   $retval$1 = 0;
   break;
  } else {
   $retval$1 = HEAP32[423] | 0;
   break;
  }
 } while (0);
 STACKTOP = sp;
 return $retval$1 | 0;
}

function __ZN10__cxxabiv112_GLOBAL__N_12DbC2ILj4096EEERNS0_5arenaIXT_EEE($this, $ar) {
 $this = $this | 0;
 $ar = $ar | 0;
 var $0 = 0, $ref$tmp = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $ref$tmp = sp;
 __ZN10__cxxabiv112_GLOBAL__N_111short_allocINS0_11string_pairELj4096EEC2ERNS0_5arenaILj4096EEE($ref$tmp, $ar);
 HEAP32[$this >> 2] = 0;
 HEAP32[$this + 4 >> 2] = 0;
 $0 = HEAP32[$ref$tmp >> 2] | 0;
 HEAP32[$this + 8 >> 2] = 0;
 HEAP32[$this + 12 >> 2] = $0;
 __ZN10__cxxabiv112_GLOBAL__N_111short_allocINSt3__26vectorINS0_11string_pairENS1_IS4_Lj4096EEEEELj4096EEC2ERNS0_5arenaILj4096EEE($ref$tmp, $ar);
 __ZNSt3__26vectorINS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEENS4_IS6_Lj4096EEEEC2EjRKS6_RKS7_($this + 16 | 0, $ref$tmp);
 __ZN10__cxxabiv112_GLOBAL__N_111short_allocINSt3__26vectorINS3_INS0_11string_pairENS1_IS4_Lj4096EEEEENS1_IS6_Lj4096EEEEELj4096EEC2ERNS0_5arenaILj4096EEE($ref$tmp, $ar);
 __ZNSt3__26vectorINS0_INS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEENS4_IS6_Lj4096EEEEENS4_IS8_Lj4096EEEEC2EjRKS8_RKS9_($this + 32 | 0, $ref$tmp);
 STACKTOP = sp;
 return;
}

function _loadCamera($cparam_name) {
 $cparam_name = $cparam_name | 0;
 var $4 = 0, $__size_$i$i$i$i = 0, $cond$i$i$i = 0, $cond$i$i$i8 = 0, $param = 0, $retval$0 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 208 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(208);
 $vararg_buffer1 = sp + 192 | 0;
 $vararg_buffer = sp + 184 | 0;
 $param = sp;
 $__size_$i$i$i$i = $cparam_name + 11 | 0;
 if ((HEAP8[$__size_$i$i$i$i >> 0] | 0) < 0) $cond$i$i$i = HEAP32[$cparam_name >> 2] | 0; else $cond$i$i$i = $cparam_name;
 if ((_arParamLoad($cond$i$i$i, 1, $param, $vararg_buffer) | 0) < 0) {
  if ((HEAP8[$__size_$i$i$i$i >> 0] | 0) < 0) $cond$i$i$i8 = HEAP32[$cparam_name >> 2] | 0; else $cond$i$i$i8 = $cparam_name;
  HEAP32[$vararg_buffer1 >> 2] = $cond$i$i$i8;
  _arLog(3, 9634, $vararg_buffer1);
  $retval$0 = -1;
 } else {
  $4 = HEAP32[4296] | 0;
  HEAP32[4296] = $4 + 1;
  HEAP32[$vararg_buffer >> 2] = $4;
  _memcpy(__ZNSt3__213unordered_mapIi7ARParamNS_4hashIiEENS_8equal_toIiEENS_9allocatorINS_4pairIKiS1_EEEEEixERS8_(17164, $vararg_buffer) | 0, $param | 0, 184) | 0;
  $retval$0 = HEAP32[$vararg_buffer >> 2] | 0;
 }
 STACKTOP = sp;
 return $retval$0 | 0;
}
function __ZN10emscripten8internal11BindingTypeINSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEE12fromWireTypeEPNS9_Ut_E($agg$result, $v) {
 $agg$result = $agg$result | 0;
 $v = $v | 0;
 var $0 = 0, $__p$0$i$i = 0, $and$i$i$i$i = 0, $call$i$i$i$i$i = 0, $ref$tmp$i$i = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $ref$tmp$i$i = sp;
 $0 = HEAP32[$v >> 2] | 0;
 HEAP32[$agg$result >> 2] = 0;
 HEAP32[$agg$result + 4 >> 2] = 0;
 HEAP32[$agg$result + 8 >> 2] = 0;
 if ($0 >>> 0 > 4294967279) __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($agg$result);
 if ($0 >>> 0 < 11) {
  HEAP8[$agg$result + 11 >> 0] = $0;
  $__p$0$i$i = $agg$result;
 } else {
  $and$i$i$i$i = $0 + 16 & -16;
  $call$i$i$i$i$i = __Znwj($and$i$i$i$i) | 0;
  HEAP32[$agg$result >> 2] = $call$i$i$i$i$i;
  HEAP32[$agg$result + 8 >> 2] = $and$i$i$i$i | -2147483648;
  HEAP32[$agg$result + 4 >> 2] = $0;
  $__p$0$i$i = $call$i$i$i$i$i;
 }
 __ZNSt3__211char_traitsIcE4copyEPcPKcj($__p$0$i$i, $v + 4 | 0, $0) | 0;
 HEAP8[$ref$tmp$i$i >> 0] = 0;
 __ZNSt3__211char_traitsIcE6assignERcRKc($__p$0$i$i + $0 | 0, $ref$tmp$i$i);
 STACKTOP = sp;
 return;
}

function _getTransMatSquare($id, $markerIndex, $markerWidth) {
 $id = $id | 0;
 $markerIndex = $markerIndex | 0;
 $markerWidth = $markerWidth | 0;
 var $1 = 0, $call7 = 0, $id$addr = 0, $retval$1 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $id$addr = sp;
 HEAP32[$id$addr >> 2] = $id;
 do if (!(__ZNSt3__212__hash_tableINS_17__hash_value_typeIi12arControllerEENS_22__unordered_map_hasherIiS3_NS_4hashIiEELb1EEENS_21__unordered_map_equalIiS3_NS_8equal_toIiEELb1EEENS_9allocatorIS3_EEE4findIiEENS_15__hash_iteratorIPNS_11__hash_nodeIS3_PvEEEERKT_(17144, $id$addr) | 0)) $retval$1 = HEAP32[421] | 0; else {
  $call7 = __ZNSt3__213unordered_mapIi12arControllerNS_4hashIiEENS_8equal_toIiEENS_9allocatorINS_4pairIKiS1_EEEEEixERS8_(17144, $id$addr) | 0;
  $1 = HEAP32[$call7 + 212 >> 2] | 0;
  if ((HEAP32[$1 + 44 >> 2] | 0) > ($markerIndex | 0)) {
   +_arGetTransMatSquare(HEAP32[$call7 + 224 >> 2] | 0, ($markerIndex | 0) < 0 ? 16768 : $1 + 48 + ($markerIndex << 8) | 0, +($markerWidth | 0), 17024);
   $retval$1 = 0;
   break;
  } else {
   $retval$1 = HEAP32[423] | 0;
   break;
  }
 } while (0);
 STACKTOP = sp;
 return $retval$1 | 0;
}

function _strlen($s) {
 $s = $s | 0;
 var $$pn = 0, $0 = 0, $3 = 0, $5 = 0, $incdec$ptr = 0, $incdec$ptr1323 = 0, $s$addr$0$lcssa = 0, $s$addr$015 = 0, $s$addr$1$lcssa = 0, $sub$ptr$lhs$cast15$sink = 0, $w$0 = 0, label = 0;
 $0 = $s;
 L1 : do if (!($0 & 3)) {
  $s$addr$0$lcssa = $s;
  label = 4;
 } else {
  $5 = $0;
  $s$addr$015 = $s;
  while (1) {
   if (!(HEAP8[$s$addr$015 >> 0] | 0)) {
    $sub$ptr$lhs$cast15$sink = $5;
    break L1;
   }
   $incdec$ptr = $s$addr$015 + 1 | 0;
   $5 = $incdec$ptr;
   if (!($5 & 3)) {
    $s$addr$0$lcssa = $incdec$ptr;
    label = 4;
    break;
   } else $s$addr$015 = $incdec$ptr;
  }
 } while (0);
 if ((label | 0) == 4) {
  $w$0 = $s$addr$0$lcssa;
  while (1) {
   $3 = HEAP32[$w$0 >> 2] | 0;
   if (!(($3 & -2139062144 ^ -2139062144) & $3 + -16843009)) $w$0 = $w$0 + 4 | 0; else break;
  }
  if (!(($3 & 255) << 24 >> 24)) $s$addr$1$lcssa = $w$0; else {
   $$pn = $w$0;
   while (1) {
    $incdec$ptr1323 = $$pn + 1 | 0;
    if (!(HEAP8[$incdec$ptr1323 >> 0] | 0)) {
     $s$addr$1$lcssa = $incdec$ptr1323;
     break;
    } else $$pn = $incdec$ptr1323;
   }
  }
  $sub$ptr$lhs$cast15$sink = $s$addr$1$lcssa;
 }
 return $sub$ptr$lhs$cast15$sink - $0 | 0;
}

function _arUtilMatInv($s, $d) {
 $s = $s | 0;
 $d = $d | 0;
 var $2 = 0, $arrayidx10 = 0, $call = 0, $i$0 = 0, $i$1 = 0, $j$0 = 0, $j$1 = 0, $mul = 0, $mul25 = 0;
 $call = _arMatrixAlloc(4, 4) | 0;
 $j$0 = 0;
 while (1) {
  if (($j$0 | 0) == 3) break;
  $mul = $j$0 << 2;
  $i$0 = 0;
  while (1) {
   if (($i$0 | 0) == 4) break;
   HEAPF64[(HEAP32[$call >> 2] | 0) + ($i$0 + $mul << 3) >> 3] = +HEAPF64[$s + ($j$0 << 5) + ($i$0 << 3) >> 3];
   $i$0 = $i$0 + 1 | 0;
  }
  $j$0 = $j$0 + 1 | 0;
 }
 $2 = HEAP32[$call >> 2] | 0;
 $arrayidx10 = $2 + 96 | 0;
 HEAP32[$arrayidx10 >> 2] = 0;
 HEAP32[$arrayidx10 + 4 >> 2] = 0;
 HEAP32[$arrayidx10 + 8 >> 2] = 0;
 HEAP32[$arrayidx10 + 12 >> 2] = 0;
 HEAP32[$arrayidx10 + 16 >> 2] = 0;
 HEAP32[$arrayidx10 + 20 >> 2] = 0;
 HEAPF64[$2 + 120 >> 3] = 1.0;
 _arMatrixSelfInv($call) | 0;
 $j$1 = 0;
 while (1) {
  if (($j$1 | 0) == 3) break;
  $mul25 = $j$1 << 2;
  $i$1 = 0;
  while (1) {
   if (($i$1 | 0) == 4) break;
   HEAPF64[$d + ($j$1 << 5) + ($i$1 << 3) >> 3] = +HEAPF64[(HEAP32[$call >> 2] | 0) + ($i$1 + $mul25 << 3) >> 3];
   $i$1 = $i$1 + 1 | 0;
  }
  $j$1 = $j$1 + 1 | 0;
 }
 _arMatrixFree($call) | 0;
 return 0;
}

function __ZNK10__cxxabiv121__vmi_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($this, $info, $adjustedPtr, $path_below) {
 $this = $this | 0;
 $info = $info | 0;
 $adjustedPtr = $adjustedPtr | 0;
 $path_below = $path_below | 0;
 var $1 = 0, $add$ptr = 0, $p$0 = 0, $search_done = 0;
 L1 : do if (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($this, HEAP32[$info + 8 >> 2] | 0, 0) | 0) __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi(0, $info, $adjustedPtr, $path_below); else {
  $1 = HEAP32[$this + 12 >> 2] | 0;
  $add$ptr = $this + 16 + ($1 << 3) | 0;
  __ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($this + 16 | 0, $info, $adjustedPtr, $path_below);
  if (($1 | 0) > 1) {
   $search_done = $info + 54 | 0;
   $p$0 = $this + 24 | 0;
   do {
    __ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($p$0, $info, $adjustedPtr, $path_below);
    if (HEAP8[$search_done >> 0] | 0) break L1;
    $p$0 = $p$0 + 8 | 0;
   } while ($p$0 >>> 0 < $add$ptr >>> 0);
  }
 } while (0);
 return;
}

function _setMarkerInfoDir($id, $markerIndex, $dir) {
 $id = $id | 0;
 $markerIndex = $markerIndex | 0;
 $dir = $dir | 0;
 var $1 = 0, $arhandle = 0, $id$addr = 0, $retval$1 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $id$addr = sp;
 HEAP32[$id$addr >> 2] = $id;
 do if (!(__ZNSt3__212__hash_tableINS_17__hash_value_typeIi12arControllerEENS_22__unordered_map_hasherIiS3_NS_4hashIiEELb1EEENS_21__unordered_map_equalIiS3_NS_8equal_toIiEELb1EEENS_9allocatorIS3_EEE4findIiEENS_15__hash_iteratorIPNS_11__hash_nodeIS3_PvEEEERKT_(17144, $id$addr) | 0)) $retval$1 = HEAP32[421] | 0; else {
  $arhandle = (__ZNSt3__213unordered_mapIi12arControllerNS_4hashIiEENS_8equal_toIiEENS_9allocatorINS_4pairIKiS1_EEEEEixERS8_(17144, $id$addr) | 0) + 212 | 0;
  $1 = HEAP32[$arhandle >> 2] | 0;
  if ((HEAP32[$1 + 44 >> 2] | 0) > ($markerIndex | 0)) {
   HEAP32[(($markerIndex | 0) < 0 ? 16768 : $1 + 48 + ($markerIndex << 8) | 0) + 16 >> 2] = $dir;
   $retval$1 = 0;
   break;
  } else {
   $retval$1 = HEAP32[423] | 0;
   break;
  }
 } while (0);
 STACKTOP = sp;
 return $retval$1 | 0;
}

function _cycle($width, $ar, $n) {
 $width = $width | 0;
 $ar = $ar | 0;
 $n = $n | 0;
 var $2 = 0, $arrayidx = 0, $arrayidx7 = 0, $cond = 0, $i$022 = 0, $sub = 0, $tmp = 0, $width$addr$024 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 256 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(256);
 $tmp = sp;
 L1 : do if (($n | 0) >= 2) {
  $arrayidx = $ar + ($n << 2) | 0;
  HEAP32[$arrayidx >> 2] = $tmp;
  if ($width | 0) {
   $2 = $tmp;
   $width$addr$024 = $width;
   while (1) {
    $cond = $width$addr$024 >>> 0 < 256 ? $width$addr$024 : 256;
    _memcpy($2 | 0, HEAP32[$ar >> 2] | 0, $cond | 0) | 0;
    $i$022 = 0;
    do {
     $arrayidx7 = $ar + ($i$022 << 2) | 0;
     $i$022 = $i$022 + 1 | 0;
     _memcpy(HEAP32[$arrayidx7 >> 2] | 0, HEAP32[$ar + ($i$022 << 2) >> 2] | 0, $cond | 0) | 0;
     HEAP32[$arrayidx7 >> 2] = (HEAP32[$arrayidx7 >> 2] | 0) + $cond;
    } while (($i$022 | 0) != ($n | 0));
    $sub = $width$addr$024 - $cond | 0;
    if (!$sub) break L1;
    $2 = HEAP32[$arrayidx >> 2] | 0;
    $width$addr$024 = $sub;
   }
  }
 } while (0);
 STACKTOP = sp;
 return;
}

function __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE5eraseEjj($this) {
 $this = $this | 0;
 var $$sroa$speculated = 0, $0 = 0, $3 = 0, $__size_$i$i = 0, $cond$i17 = 0, $cond$i6 = 0, $ref$tmp15 = 0, $sub7 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $ref$tmp15 = sp;
 $__size_$i$i = $this + 11 | 0;
 $0 = HEAP8[$__size_$i$i >> 0] | 0;
 if ($0 << 24 >> 24 < 0) {
  $cond$i17 = HEAP32[$this + 4 >> 2] | 0;
  $cond$i6 = HEAP32[$this >> 2] | 0;
 } else {
  $cond$i17 = $0 & 255;
  $cond$i6 = $this;
 }
 $$sroa$speculated = ($cond$i17 | 0) != 0 & 1;
 $sub7 = $cond$i17 - $$sroa$speculated | 0;
 if (!$sub7) $3 = $0; else {
  __ZNSt3__211char_traitsIcE4moveEPcPKcj($cond$i6, $cond$i6 + $$sroa$speculated | 0, $sub7) | 0;
  $3 = HEAP8[$__size_$i$i >> 0] | 0;
 }
 if ($3 << 24 >> 24 < 0) HEAP32[$this + 4 >> 2] = $sub7; else HEAP8[$__size_$i$i >> 0] = $sub7;
 HEAP8[$ref$tmp15 >> 0] = 0;
 __ZNSt3__211char_traitsIcE6assignERcRKc($cond$i6 + $sub7 | 0, $ref$tmp15);
 STACKTOP = sp;
 return;
}

function _arImageProcLumaHistAndCDFAndPercentile($ipi, $dataPtr, $percentile, $value_p) {
 $ipi = $ipi | 0;
 $dataPtr = $dataPtr | 0;
 $percentile = +$percentile;
 $value_p = $value_p | 0;
 var $2 = 0, $3 = 0, $call = 0, $conv6 = 0, $i$0 = 0, $idxprom = 0, $inc16 = 0, $j$0 = 0, $retval$0 = 0;
 if ($percentile < 0.0 | $percentile > 1.0) $retval$0 = -1; else {
  $call = _arImageProcLumaHistAndCDF($ipi, $dataPtr) | 0;
  if (($call | 0) < 0) $retval$0 = $call; else {
   $conv6 = ~~(+(Math_imul(HEAP32[$ipi + 12 >> 2] | 0, HEAP32[$ipi + 8 >> 2] | 0) | 0) * $percentile) >>> 0;
   $i$0 = 0;
   while (1) {
    $idxprom = $i$0 & 255;
    $2 = HEAP32[$ipi + 1040 + ($idxprom << 2) >> 2] | 0;
    if ($2 >>> 0 < $conv6 >>> 0) $i$0 = $i$0 + 1 << 24 >> 24; else {
     $3 = $2;
     $j$0 = $i$0;
     break;
    }
   }
   while (1) {
    $inc16 = $j$0 + 1 << 24 >> 24;
    if (($3 | 0) != ($conv6 | 0)) break;
    $3 = HEAP32[$ipi + 1040 + (($inc16 & 255) << 2) >> 2] | 0;
    $j$0 = $inc16;
   }
   HEAP8[$value_p >> 0] = (($j$0 & 255) + $idxprom | 0) >>> 1;
   $retval$0 = 0;
  }
 }
 return $retval$0 | 0;
}

function _getMultiMarkerNum($id, $multiMarker_id) {
 $id = $id | 0;
 $multiMarker_id = $multiMarker_id | 0;
 var $1 = 0, $call7 = 0, $id$addr = 0, $retval$1 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $id$addr = sp;
 HEAP32[$id$addr >> 2] = $id;
 if (!(__ZNSt3__212__hash_tableINS_17__hash_value_typeIi12arControllerEENS_22__unordered_map_hasherIiS3_NS_4hashIiEELb1EEENS_21__unordered_map_equalIiS3_NS_8equal_toIiEELb1EEENS_9allocatorIS3_EEE4findIiEENS_15__hash_iteratorIPNS_11__hash_nodeIS3_PvEEEERKT_(17144, $id$addr) | 0)) $retval$1 = -1; else {
  $call7 = __ZNSt3__213unordered_mapIi12arControllerNS_4hashIiEENS_8equal_toIiEENS_9allocatorINS_4pairIKiS1_EEEEEixERS8_(17144, $id$addr) | 0;
  if (($multiMarker_id | 0) < 0) $retval$1 = -1; else {
   $1 = HEAP32[$call7 + 248 >> 2] | 0;
   if ((HEAP32[$call7 + 252 >> 2] | 0) - $1 >> 3 >>> 0 > $multiMarker_id >>> 0) $retval$1 = HEAP32[(HEAP32[$1 + ($multiMarker_id << 3) + 4 >> 2] | 0) + 4 >> 2] | 0; else $retval$1 = -1;
  }
 }
 STACKTOP = sp;
 return $retval$1 | 0;
}

function __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi($this, $info, $adjustedPtr, $path_below) {
 $this = $this | 0;
 $info = $info | 0;
 $adjustedPtr = $adjustedPtr | 0;
 $path_below = $path_below | 0;
 var $0 = 0, $dst_ptr_leading_to_static_ptr = 0, $number_to_static_ptr = 0, $path_dst_ptr_to_static_ptr = 0;
 $dst_ptr_leading_to_static_ptr = $info + 16 | 0;
 $0 = HEAP32[$dst_ptr_leading_to_static_ptr >> 2] | 0;
 $number_to_static_ptr = $info + 36 | 0;
 $path_dst_ptr_to_static_ptr = $info + 24 | 0;
 do if (!$0) {
  HEAP32[$dst_ptr_leading_to_static_ptr >> 2] = $adjustedPtr;
  HEAP32[$path_dst_ptr_to_static_ptr >> 2] = $path_below;
  HEAP32[$number_to_static_ptr >> 2] = 1;
 } else {
  if (($0 | 0) != ($adjustedPtr | 0)) {
   HEAP32[$number_to_static_ptr >> 2] = (HEAP32[$number_to_static_ptr >> 2] | 0) + 1;
   HEAP32[$path_dst_ptr_to_static_ptr >> 2] = 2;
   HEAP8[$info + 54 >> 0] = 1;
   break;
  }
  if ((HEAP32[$path_dst_ptr_to_static_ptr >> 2] | 0) == 2) HEAP32[$path_dst_ptr_to_static_ptr >> 2] = $path_below;
 } while (0);
 return;
}

function __ZN10__cxxabiv112_GLOBAL__N_119parse_cv_qualifiersEPKcS2_Rj($first, $last, $cv) {
 $first = $first | 0;
 $last = $last | 0;
 $cv = $cv | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $first$addr$0 = 0, $first$addr$1 = 0, $first$addr$2 = 0, $incdec$ptr = 0, $incdec$ptr7 = 0, $or6 = 0;
 HEAP32[$cv >> 2] = 0;
 if (($first | 0) == ($last | 0)) $first$addr$2 = $first; else {
  $0 = HEAP8[$first >> 0] | 0;
  if ($0 << 24 >> 24 == 114) {
   HEAP32[$cv >> 2] = 4;
   $incdec$ptr = $first + 1 | 0;
   $1 = HEAP8[$incdec$ptr >> 0] | 0;
   $2 = 4;
   $first$addr$0 = $incdec$ptr;
  } else {
   $1 = $0;
   $2 = 0;
   $first$addr$0 = $first;
  }
  if ($1 << 24 >> 24 == 86) {
   $or6 = $2 | 2;
   HEAP32[$cv >> 2] = $or6;
   $incdec$ptr7 = $first$addr$0 + 1 | 0;
   $3 = HEAP8[$incdec$ptr7 >> 0] | 0;
   $4 = $or6;
   $first$addr$1 = $incdec$ptr7;
  } else {
   $3 = $1;
   $4 = $2;
   $first$addr$1 = $first$addr$0;
  }
  if ($3 << 24 >> 24 == 75) {
   HEAP32[$cv >> 2] = $4 | 1;
   $first$addr$2 = $first$addr$1 + 1 | 0;
  } else $first$addr$2 = $first$addr$1;
 }
 return $first$addr$2 | 0;
}

function __ZNSt3__212__hash_tableINS_17__hash_value_typeIi12arControllerEENS_22__unordered_map_hasherIiS3_NS_4hashIiEELb1EEENS_21__unordered_map_equalIiS3_NS_8equal_toIiEELb1EEENS_9allocatorIS3_EEE21__construct_node_hashIRKNS_21piecewise_construct_tEJNS_5tupleIJRKiEEENSJ_IJEEEEEENS_10unique_ptrINS_11__hash_nodeIS3_PvEENS_22__hash_node_destructorINSC_ISR_EEEEEEjOT_DpOT0_($agg$result, $this, $__hash, $__f, $__rest, $__rest1) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $__hash = $__hash | 0;
 $__f = $__f | 0;
 $__rest = $__rest | 0;
 $__rest1 = $__rest1 | 0;
 var $4 = 0, $call$i$i$i = 0, $second$i$i$i$i$i = 0;
 $call$i$i$i = __Znwj(408) | 0;
 HEAP32[$agg$result >> 2] = $call$i$i$i;
 HEAP32[$agg$result + 4 >> 2] = $this + 8;
 HEAP32[$call$i$i$i + 8 >> 2] = HEAP32[HEAP32[$__rest >> 2] >> 2];
 $second$i$i$i$i$i = $call$i$i$i + 16 | 0;
 _memset($second$i$i$i$i$i | 0, 0, 392) | 0;
 __ZN12arControllerC2Ev($second$i$i$i$i$i);
 HEAP8[$agg$result + 8 >> 0] = 1;
 $4 = HEAP32[$agg$result >> 2] | 0;
 HEAP32[$4 + 4 >> 2] = $__hash;
 HEAP32[$4 >> 2] = 0;
 return;
}

function __ZL15loadMultiMarkerPKcP8ARHandlePP12ARPattHandlePP18ARMultiMarkerInfoT($patt_name, $arHandle, $pattHandle_p, $arMultiConfig) {
 $patt_name = $patt_name | 0;
 $arHandle = $arHandle | 0;
 $pattHandle_p = $pattHandle_p | 0;
 $arMultiConfig = $arMultiConfig | 0;
 var $call = 0, $retval$0 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $call = _arMultiReadConfigFile($patt_name, HEAP32[$pattHandle_p >> 2] | 0) | 0;
 HEAP32[$arMultiConfig >> 2] = $call;
 L1 : do if (!$call) {
  _arLog(3, 9747, sp);
  _arPattDeleteHandle(HEAP32[$pattHandle_p >> 2] | 0) | 0;
  $retval$0 = 0;
 } else switch (HEAP32[$call + 108 >> 2] | 0) {
 case 0:
  {
   _arSetPatternDetectionMode($arHandle, 0) | 0;
   $retval$0 = 1;
   break L1;
   break;
  }
 case 1:
  {
   _arSetPatternDetectionMode($arHandle, 2) | 0;
   $retval$0 = 1;
   break L1;
   break;
  }
 default:
  {
   _arSetPatternDetectionMode($arHandle, 3) | 0;
   $retval$0 = 1;
   break L1;
  }
 } while (0);
 STACKTOP = sp;
 return $retval$0 | 0;
}

function _fputc($c, $f) {
 $c = $c | 0;
 $f = $f | 0;
 var $2 = 0, $5 = 0, $cond30 = 0, $conv = 0, $conv1 = 0, $retval$0 = 0, $wpos = 0, $wpos18 = 0, label = 0;
 $conv = $c & 255;
 $conv1 = $c & 255;
 if ((HEAP32[$f + 76 >> 2] | 0) < 0) label = 3; else if (!(___lockfile($f) | 0)) label = 3; else {
  if (($conv1 | 0) == (HEAP8[$f + 75 >> 0] | 0)) label = 10; else {
   $wpos18 = $f + 20 | 0;
   $5 = HEAP32[$wpos18 >> 2] | 0;
   if ($5 >>> 0 < (HEAP32[$f + 16 >> 2] | 0) >>> 0) {
    HEAP32[$wpos18 >> 2] = $5 + 1;
    HEAP8[$5 >> 0] = $conv;
    $cond30 = $conv1;
   } else label = 10;
  }
  if ((label | 0) == 10) $cond30 = ___overflow($f, $c) | 0;
  ___unlockfile($f);
  $retval$0 = $cond30;
 }
 do if ((label | 0) == 3) {
  if (($conv1 | 0) != (HEAP8[$f + 75 >> 0] | 0)) {
   $wpos = $f + 20 | 0;
   $2 = HEAP32[$wpos >> 2] | 0;
   if ($2 >>> 0 < (HEAP32[$f + 16 >> 2] | 0) >>> 0) {
    HEAP32[$wpos >> 2] = $2 + 1;
    HEAP8[$2 >> 0] = $conv;
    $retval$0 = $conv1;
    break;
   }
  }
  $retval$0 = ___overflow($f, $c) | 0;
 } while (0);
 return $retval$0 | 0;
}

function _setDebugMode($id, $enable) {
 $id = $id | 0;
 $enable = $enable | 0;
 var $arhandle = 0, $id$addr = 0, $retval$0 = 0, $tobool = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $vararg_buffer = sp;
 $id$addr = sp + 4 | 0;
 HEAP32[$id$addr >> 2] = $id;
 if (!(__ZNSt3__212__hash_tableINS_17__hash_value_typeIi12arControllerEENS_22__unordered_map_hasherIiS3_NS_4hashIiEELb1EEENS_21__unordered_map_equalIiS3_NS_8equal_toIiEELb1EEENS_9allocatorIS3_EEE4findIiEENS_15__hash_iteratorIPNS_11__hash_nodeIS3_PvEEEERKT_(17144, $id$addr) | 0)) $retval$0 = 0; else {
  $arhandle = (__ZNSt3__213unordered_mapIi12arControllerNS_4hashIiEENS_8equal_toIiEENS_9allocatorINS_4pairIKiS1_EEEEEixERS8_(17144, $id$addr) | 0) + 212 | 0;
  $tobool = ($enable | 0) != 0;
  _arSetDebugMode(HEAP32[$arhandle >> 2] | 0, $tobool & 1) | 0;
  HEAP32[$vararg_buffer >> 2] = $tobool ? 7889 : 7893;
  _arLog(1, 7898, $vararg_buffer);
  $retval$0 = $enable;
 }
 STACKTOP = sp;
 return $retval$0 | 0;
}

function __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj18EEERAT__Kc($this, $s) {
 $this = $this | 0;
 $s = $s | 0;
 var $__i$0$i$i = 0, $call$i$i$i = 0, $ref$tmp$i$i = 0, $second = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $ref$tmp$i$i = sp;
 HEAP32[$this >> 2] = 0;
 HEAP32[$this + 4 >> 2] = 0;
 HEAP32[$this + 8 >> 2] = 0;
 $call$i$i$i = __ZN10__cxxabiv112_GLOBAL__N_112malloc_allocIcE8allocateEj(32) | 0;
 HEAP32[$this >> 2] = $call$i$i$i;
 HEAP32[$this + 8 >> 2] = -2147483616;
 HEAP32[$this + 4 >> 2] = 17;
 __ZNSt3__211char_traitsIcE4copyEPcPKcj($call$i$i$i, $s, 17) | 0;
 HEAP8[$ref$tmp$i$i >> 0] = 0;
 __ZNSt3__211char_traitsIcE6assignERcRKc($call$i$i$i + 17 | 0, $ref$tmp$i$i);
 $second = $this + 12 | 0;
 HEAP32[$second >> 2] = 0;
 HEAP32[$second + 4 >> 2] = 0;
 HEAP32[$second + 8 >> 2] = 0;
 $__i$0$i$i = 0;
 while (1) {
  if (($__i$0$i$i | 0) == 3) break;
  HEAP32[$second + ($__i$0$i$i << 2) >> 2] = 0;
  $__i$0$i$i = $__i$0$i$i + 1 | 0;
 }
 STACKTOP = sp;
 return;
}

function __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj15EEERAT__Kc($this, $s) {
 $this = $this | 0;
 $s = $s | 0;
 var $__i$0$i$i = 0, $call$i$i$i = 0, $ref$tmp$i$i = 0, $second = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $ref$tmp$i$i = sp;
 HEAP32[$this >> 2] = 0;
 HEAP32[$this + 4 >> 2] = 0;
 HEAP32[$this + 8 >> 2] = 0;
 $call$i$i$i = __ZN10__cxxabiv112_GLOBAL__N_112malloc_allocIcE8allocateEj(16) | 0;
 HEAP32[$this >> 2] = $call$i$i$i;
 HEAP32[$this + 8 >> 2] = -2147483632;
 HEAP32[$this + 4 >> 2] = 14;
 __ZNSt3__211char_traitsIcE4copyEPcPKcj($call$i$i$i, $s, 14) | 0;
 HEAP8[$ref$tmp$i$i >> 0] = 0;
 __ZNSt3__211char_traitsIcE6assignERcRKc($call$i$i$i + 14 | 0, $ref$tmp$i$i);
 $second = $this + 12 | 0;
 HEAP32[$second >> 2] = 0;
 HEAP32[$second + 4 >> 2] = 0;
 HEAP32[$second + 8 >> 2] = 0;
 $__i$0$i$i = 0;
 while (1) {
  if (($__i$0$i$i | 0) == 3) break;
  HEAP32[$second + ($__i$0$i$i << 2) >> 2] = 0;
  $__i$0$i$i = $__i$0$i$i + 1 | 0;
 }
 STACKTOP = sp;
 return;
}

function __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj14EEERAT__Kc($this, $s) {
 $this = $this | 0;
 $s = $s | 0;
 var $__i$0$i$i = 0, $call$i$i$i = 0, $ref$tmp$i$i = 0, $second = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $ref$tmp$i$i = sp;
 HEAP32[$this >> 2] = 0;
 HEAP32[$this + 4 >> 2] = 0;
 HEAP32[$this + 8 >> 2] = 0;
 $call$i$i$i = __ZN10__cxxabiv112_GLOBAL__N_112malloc_allocIcE8allocateEj(16) | 0;
 HEAP32[$this >> 2] = $call$i$i$i;
 HEAP32[$this + 8 >> 2] = -2147483632;
 HEAP32[$this + 4 >> 2] = 13;
 __ZNSt3__211char_traitsIcE4copyEPcPKcj($call$i$i$i, $s, 13) | 0;
 HEAP8[$ref$tmp$i$i >> 0] = 0;
 __ZNSt3__211char_traitsIcE6assignERcRKc($call$i$i$i + 13 | 0, $ref$tmp$i$i);
 $second = $this + 12 | 0;
 HEAP32[$second >> 2] = 0;
 HEAP32[$second + 4 >> 2] = 0;
 HEAP32[$second + 8 >> 2] = 0;
 $__i$0$i$i = 0;
 while (1) {
  if (($__i$0$i$i | 0) == 3) break;
  HEAP32[$second + ($__i$0$i$i << 2) >> 2] = 0;
  $__i$0$i$i = $__i$0$i$i + 1 | 0;
 }
 STACKTOP = sp;
 return;
}

function __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj13EEERAT__Kc($this, $s) {
 $this = $this | 0;
 $s = $s | 0;
 var $__i$0$i$i = 0, $call$i$i$i = 0, $ref$tmp$i$i = 0, $second = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $ref$tmp$i$i = sp;
 HEAP32[$this >> 2] = 0;
 HEAP32[$this + 4 >> 2] = 0;
 HEAP32[$this + 8 >> 2] = 0;
 $call$i$i$i = __ZN10__cxxabiv112_GLOBAL__N_112malloc_allocIcE8allocateEj(16) | 0;
 HEAP32[$this >> 2] = $call$i$i$i;
 HEAP32[$this + 8 >> 2] = -2147483632;
 HEAP32[$this + 4 >> 2] = 12;
 __ZNSt3__211char_traitsIcE4copyEPcPKcj($call$i$i$i, $s, 12) | 0;
 HEAP8[$ref$tmp$i$i >> 0] = 0;
 __ZNSt3__211char_traitsIcE6assignERcRKc($call$i$i$i + 12 | 0, $ref$tmp$i$i);
 $second = $this + 12 | 0;
 HEAP32[$second >> 2] = 0;
 HEAP32[$second + 4 >> 2] = 0;
 HEAP32[$second + 8 >> 2] = 0;
 $__i$0$i$i = 0;
 while (1) {
  if (($__i$0$i$i | 0) == 3) break;
  HEAP32[$second + ($__i$0$i$i << 2) >> 2] = 0;
  $__i$0$i$i = $__i$0$i$i + 1 | 0;
 }
 STACKTOP = sp;
 return;
}

function __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj12EEERAT__Kc($this, $s) {
 $this = $this | 0;
 $s = $s | 0;
 var $__i$0$i$i = 0, $call$i$i$i = 0, $ref$tmp$i$i = 0, $second = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $ref$tmp$i$i = sp;
 HEAP32[$this >> 2] = 0;
 HEAP32[$this + 4 >> 2] = 0;
 HEAP32[$this + 8 >> 2] = 0;
 $call$i$i$i = __ZN10__cxxabiv112_GLOBAL__N_112malloc_allocIcE8allocateEj(16) | 0;
 HEAP32[$this >> 2] = $call$i$i$i;
 HEAP32[$this + 8 >> 2] = -2147483632;
 HEAP32[$this + 4 >> 2] = 11;
 __ZNSt3__211char_traitsIcE4copyEPcPKcj($call$i$i$i, $s, 11) | 0;
 HEAP8[$ref$tmp$i$i >> 0] = 0;
 __ZNSt3__211char_traitsIcE6assignERcRKc($call$i$i$i + 11 | 0, $ref$tmp$i$i);
 $second = $this + 12 | 0;
 HEAP32[$second >> 2] = 0;
 HEAP32[$second + 4 >> 2] = 0;
 HEAP32[$second + 8 >> 2] = 0;
 $__i$0$i$i = 0;
 while (1) {
  if (($__i$0$i$i | 0) == 3) break;
  HEAP32[$second + ($__i$0$i$i << 2) >> 2] = 0;
  $__i$0$i$i = $__i$0$i$i + 1 | 0;
 }
 STACKTOP = sp;
 return;
}

function _getPattRatio($id) {
 $id = $id | 0;
 var $0 = 0, $arhandle = 0, $cmp = 0, $id$addr = 0, $pattRatio = 0, $retval$0 = 0.0, $retval$1 = 0.0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $id$addr = sp + 8 | 0;
 $pattRatio = sp;
 HEAP32[$id$addr >> 2] = $id;
 if (!(__ZNSt3__212__hash_tableINS_17__hash_value_typeIi12arControllerEENS_22__unordered_map_hasherIiS3_NS_4hashIiEELb1EEENS_21__unordered_map_equalIiS3_NS_8equal_toIiEELb1EEENS_9allocatorIS3_EEE4findIiEENS_15__hash_iteratorIPNS_11__hash_nodeIS3_PvEEEERKT_(17144, $id$addr) | 0)) $retval$1 = -1.0; else {
  $arhandle = (__ZNSt3__213unordered_mapIi12arControllerNS_4hashIiEENS_8equal_toIiEENS_9allocatorINS_4pairIKiS1_EEEEEixERS8_(17144, $id$addr) | 0) + 212 | 0;
  $0 = HEAP32[$arhandle >> 2] | 0;
  if (!$0) $retval$0 = -1.0; else {
   $cmp = (_arGetPattRatio($0, $pattRatio) | 0) == 0;
   $retval$0 = $cmp ? +HEAPF64[$pattRatio >> 3] : -1.0;
  }
  $retval$1 = $retval$0;
 }
 STACKTOP = sp;
 return +$retval$1;
}

function __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj22EEERAT__Kc($this) {
 $this = $this | 0;
 var $__i$0$i$i = 0, $call$i$i$i = 0, $ref$tmp$i$i = 0, $second = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $ref$tmp$i$i = sp;
 HEAP32[$this >> 2] = 0;
 HEAP32[$this + 4 >> 2] = 0;
 HEAP32[$this + 8 >> 2] = 0;
 $call$i$i$i = __ZN10__cxxabiv112_GLOBAL__N_112malloc_allocIcE8allocateEj(32) | 0;
 HEAP32[$this >> 2] = $call$i$i$i;
 HEAP32[$this + 8 >> 2] = -2147483616;
 HEAP32[$this + 4 >> 2] = 21;
 __ZNSt3__211char_traitsIcE4copyEPcPKcj($call$i$i$i, 16278, 21) | 0;
 HEAP8[$ref$tmp$i$i >> 0] = 0;
 __ZNSt3__211char_traitsIcE6assignERcRKc($call$i$i$i + 21 | 0, $ref$tmp$i$i);
 $second = $this + 12 | 0;
 HEAP32[$second >> 2] = 0;
 HEAP32[$second + 4 >> 2] = 0;
 HEAP32[$second + 8 >> 2] = 0;
 $__i$0$i$i = 0;
 while (1) {
  if (($__i$0$i$i | 0) == 3) break;
  HEAP32[$second + ($__i$0$i$i << 2) >> 2] = 0;
  $__i$0$i$i = $__i$0$i$i + 1 | 0;
 }
 STACKTOP = sp;
 return;
}

function __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj19EEERAT__Kc($this) {
 $this = $this | 0;
 var $__i$0$i$i = 0, $call$i$i$i = 0, $ref$tmp$i$i = 0, $second = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $ref$tmp$i$i = sp;
 HEAP32[$this >> 2] = 0;
 HEAP32[$this + 4 >> 2] = 0;
 HEAP32[$this + 8 >> 2] = 0;
 $call$i$i$i = __ZN10__cxxabiv112_GLOBAL__N_112malloc_allocIcE8allocateEj(32) | 0;
 HEAP32[$this >> 2] = $call$i$i$i;
 HEAP32[$this + 8 >> 2] = -2147483616;
 HEAP32[$this + 4 >> 2] = 18;
 __ZNSt3__211char_traitsIcE4copyEPcPKcj($call$i$i$i, 16499, 18) | 0;
 HEAP8[$ref$tmp$i$i >> 0] = 0;
 __ZNSt3__211char_traitsIcE6assignERcRKc($call$i$i$i + 18 | 0, $ref$tmp$i$i);
 $second = $this + 12 | 0;
 HEAP32[$second >> 2] = 0;
 HEAP32[$second + 4 >> 2] = 0;
 HEAP32[$second + 8 >> 2] = 0;
 $__i$0$i$i = 0;
 while (1) {
  if (($__i$0$i$i | 0) == 3) break;
  HEAP32[$second + ($__i$0$i$i << 2) >> 2] = 0;
  $__i$0$i$i = $__i$0$i$i + 1 | 0;
 }
 STACKTOP = sp;
 return;
}

function __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj16EEERAT__Kc($this) {
 $this = $this | 0;
 var $__i$0$i$i = 0, $call$i$i$i = 0, $ref$tmp$i$i = 0, $second = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $ref$tmp$i$i = sp;
 HEAP32[$this >> 2] = 0;
 HEAP32[$this + 4 >> 2] = 0;
 HEAP32[$this + 8 >> 2] = 0;
 $call$i$i$i = __ZN10__cxxabiv112_GLOBAL__N_112malloc_allocIcE8allocateEj(16) | 0;
 HEAP32[$this >> 2] = $call$i$i$i;
 HEAP32[$this + 8 >> 2] = -2147483632;
 HEAP32[$this + 4 >> 2] = 15;
 __ZNSt3__211char_traitsIcE4copyEPcPKcj($call$i$i$i, 15672, 15) | 0;
 HEAP8[$ref$tmp$i$i >> 0] = 0;
 __ZNSt3__211char_traitsIcE6assignERcRKc($call$i$i$i + 15 | 0, $ref$tmp$i$i);
 $second = $this + 12 | 0;
 HEAP32[$second >> 2] = 0;
 HEAP32[$second + 4 >> 2] = 0;
 HEAP32[$second + 8 >> 2] = 0;
 $__i$0$i$i = 0;
 while (1) {
  if (($__i$0$i$i | 0) == 3) break;
  HEAP32[$second + ($__i$0$i$i << 2) >> 2] = 0;
  $__i$0$i$i = $__i$0$i$i + 1 | 0;
 }
 STACKTOP = sp;
 return;
}

function _setPattRatio($id, $ratio) {
 $id = $id | 0;
 $ratio = +$ratio;
 var $0 = 0, $call7 = 0, $conv = 0.0, $id$addr = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $vararg_buffer = sp;
 $id$addr = sp + 8 | 0;
 HEAP32[$id$addr >> 2] = $id;
 if (__ZNSt3__212__hash_tableINS_17__hash_value_typeIi12arControllerEENS_22__unordered_map_hasherIiS3_NS_4hashIiEELb1EEENS_21__unordered_map_equalIiS3_NS_8equal_toIiEELb1EEENS_9allocatorIS3_EEE4findIiEENS_15__hash_iteratorIPNS_11__hash_nodeIS3_PvEEEERKT_(17144, $id$addr) | 0) {
  $call7 = __ZNSt3__213unordered_mapIi12arControllerNS_4hashIiEENS_8equal_toIiEENS_9allocatorINS_4pairIKiS1_EEEEEixERS8_(17144, $id$addr) | 0;
  if (!($ratio <= 0.0 | $ratio >= 1.0)) {
   $conv = $ratio;
   $0 = HEAP32[$call7 + 212 >> 2] | 0;
   if ($0 | 0) if (!(_arSetPattRatio($0, $conv) | 0)) {
    HEAPF64[$vararg_buffer >> 3] = $conv;
    _arLog(1, 7755, $vararg_buffer);
   }
  }
 }
 STACKTOP = sp;
 return;
}

function __ZN10__cxxabiv112_GLOBAL__N_122parse_unqualified_nameINS0_2DbEEEPKcS4_S4_RT_($first, $last, $db) {
 $first = $first | 0;
 $last = $last | 0;
 $db = $db | 0;
 var $first$addr$1 = 0;
 L1 : do if (($first | 0) == ($last | 0)) $first$addr$1 = $first; else switch (HEAP8[$first >> 0] | 0) {
 case 68:
 case 67:
  {
   $first$addr$1 = __ZN10__cxxabiv112_GLOBAL__N_120parse_ctor_dtor_nameINS0_2DbEEEPKcS4_S4_RT_($first, $last, $db) | 0;
   break L1;
   break;
  }
 case 85:
  {
   $first$addr$1 = __ZN10__cxxabiv112_GLOBAL__N_123parse_unnamed_type_nameINS0_2DbEEEPKcS4_S4_RT_($first, $last, $db) | 0;
   break L1;
   break;
  }
 case 57:
 case 56:
 case 55:
 case 54:
 case 53:
 case 52:
 case 51:
 case 50:
 case 49:
  {
   $first$addr$1 = __ZN10__cxxabiv112_GLOBAL__N_117parse_source_nameINS0_2DbEEEPKcS4_S4_RT_($first, $last, $db) | 0;
   break L1;
   break;
  }
 default:
  return __ZN10__cxxabiv112_GLOBAL__N_119parse_operator_nameINS0_2DbEEEPKcS4_S4_RT_($first, $last, $db) | 0;
 } while (0);
 return $first$addr$1 | 0;
}

function _byteswap($param) {
 $param = $param | 0;
 var $0 = 0, $dist_function_version = 0, $i$0 = 0, $i$1 = 0, $j$0 = 0, $wparam = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 192 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(192);
 $wparam = sp;
 _byteSwapInt($param, $wparam);
 _byteSwapInt($param + 4 | 0, $wparam + 4 | 0);
 $j$0 = 0;
 while (1) {
  if (($j$0 | 0) == 3) break; else $i$0 = 0;
  while (1) {
   if (($i$0 | 0) == 4) break;
   _byteSwapDouble($param + 8 + ($j$0 << 5) + ($i$0 << 3) | 0, $wparam + 8 + ($j$0 << 5) + ($i$0 << 3) | 0);
   $i$0 = $i$0 + 1 | 0;
  }
  $j$0 = $j$0 + 1 | 0;
 }
 $dist_function_version = $param + 176 | 0;
 $i$1 = 0;
 while (1) {
  $0 = HEAP32[$dist_function_version >> 2] | 0;
  if (($i$1 | 0) >= (HEAP32[1652 + ($0 + -1 << 3) >> 2] | 0)) break;
  _byteSwapDouble($param + 104 + ($i$1 << 3) | 0, $wparam + 104 + ($i$1 << 3) | 0);
  $i$1 = $i$1 + 1 | 0;
 }
 HEAP32[$wparam + 176 >> 2] = $0;
 _memcpy($param | 0, $wparam | 0, 184) | 0;
 STACKTOP = sp;
 return;
}

function __ZN10__cxxabiv112_GLOBAL__N_112parse_numberEPKcS2_($first, $last) {
 $first = $first | 0;
 $last = $last | 0;
 var $1 = 0, $add$ptr = 0, $first$addr$0 = 0, $first$addr$2 = 0, $incdec$ptr$first = 0;
 L1 : do if (($first | 0) == ($last | 0)) $first$addr$2 = $first; else {
  $incdec$ptr$first = (HEAP8[$first >> 0] | 0) == 110 ? $first + 1 | 0 : $first;
  if (($incdec$ptr$first | 0) == ($last | 0)) $first$addr$2 = $first; else {
   $1 = HEAP8[$incdec$ptr$first >> 0] | 0;
   $add$ptr = $incdec$ptr$first + 1 | 0;
   if ($1 << 24 >> 24 == 48) $first$addr$2 = $add$ptr; else if (($1 + -49 & 255) < 9) {
    $first$addr$0 = $add$ptr;
    while (1) {
     if (($first$addr$0 | 0) == ($last | 0)) {
      $first$addr$2 = $last;
      break L1;
     }
     if (((HEAP8[$first$addr$0 >> 0] | 0) + -48 | 0) >>> 0 >= 10) {
      $first$addr$2 = $first$addr$0;
      break L1;
     }
     $first$addr$0 = $first$addr$0 + 1 | 0;
    }
   } else $first$addr$2 = $first;
  }
 } while (0);
 return $first$addr$2 | 0;
}

function ___overflow($f, $_c) {
 $f = $f | 0;
 $_c = $_c | 0;
 var $0 = 0, $1 = 0, $2 = 0, $c = 0, $conv = 0, $conv5 = 0, $retval$0 = 0, $wend = 0, $wpos = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $c = sp;
 $conv = $_c & 255;
 HEAP8[$c >> 0] = $conv;
 $wend = $f + 16 | 0;
 $0 = HEAP32[$wend >> 2] | 0;
 if (!$0) if (!(___towrite($f) | 0)) {
  $2 = HEAP32[$wend >> 2] | 0;
  label = 4;
 } else $retval$0 = -1; else {
  $2 = $0;
  label = 4;
 }
 do if ((label | 0) == 4) {
  $wpos = $f + 20 | 0;
  $1 = HEAP32[$wpos >> 2] | 0;
  if ($1 >>> 0 < $2 >>> 0) {
   $conv5 = $_c & 255;
   if (($conv5 | 0) != (HEAP8[$f + 75 >> 0] | 0)) {
    HEAP32[$wpos >> 2] = $1 + 1;
    HEAP8[$1 >> 0] = $conv;
    $retval$0 = $conv5;
    break;
   }
  }
  if ((FUNCTION_TABLE_iiii[HEAP32[$f + 36 >> 2] & 15]($f, $c, 1) | 0) == 1) $retval$0 = HEAPU8[$c >> 0] | 0; else $retval$0 = -1;
 } while (0);
 STACKTOP = sp;
 return $retval$0 | 0;
}

function _scalbn($x, $n) {
 $x = +$x;
 $n = $n | 0;
 var $2 = 0, $3 = 0, $add = 0, $add14 = 0, $cmp1 = 0, $cmp11 = 0, $mul = 0.0, $mul10 = 0.0, $n$addr$0 = 0, $sub = 0, $sub4 = 0, $y$0 = 0.0;
 if (($n | 0) > 1023) {
  $mul = $x * 8988465674311579538646525.0e283;
  $sub = $n + -1023 | 0;
  $cmp1 = ($sub | 0) > 1023;
  $sub4 = $n + -2046 | 0;
  $n$addr$0 = $cmp1 ? (($sub4 | 0) < 1023 ? $sub4 : 1023) : $sub;
  $y$0 = $cmp1 ? $mul * 8988465674311579538646525.0e283 : $mul;
 } else if (($n | 0) < -1022) {
  $mul10 = $x * 2.2250738585072014e-308;
  $add = $n + 1022 | 0;
  $cmp11 = ($add | 0) < -1022;
  $add14 = $n + 2044 | 0;
  $n$addr$0 = $cmp11 ? (($add14 | 0) > -1022 ? $add14 : -1022) : $add;
  $y$0 = $cmp11 ? $mul10 * 2.2250738585072014e-308 : $mul10;
 } else {
  $n$addr$0 = $n;
  $y$0 = $x;
 }
 $2 = _bitshift64Shl($n$addr$0 + 1023 | 0, 0, 52) | 0;
 $3 = tempRet0;
 HEAP32[tempDoublePtr >> 2] = $2;
 HEAP32[tempDoublePtr + 4 >> 2] = $3;
 return +($y$0 * +HEAPF64[tempDoublePtr >> 3]);
}

function __ZN10emscripten8internal7InvokerIiJiNSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEEE6invokeEPFiiS8_EiPNS0_11BindingTypeIS8_EUt_E($fn, $args, $args1) {
 $fn = $fn | 0;
 $args = $args | 0;
 $args1 = $args1 | 0;
 var $agg$tmp = 0, $call = 0, $call3 = 0, $call5 = 0, $ref$tmp = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $ref$tmp = sp + 12 | 0;
 $agg$tmp = sp;
 $call = __ZN10emscripten8internal11BindingTypeIiE12fromWireTypeEi($args) | 0;
 __ZN10emscripten8internal11BindingTypeINSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEE12fromWireTypeEPNS9_Ut_E($agg$tmp, $args1);
 $call3 = FUNCTION_TABLE_iii[$fn & 15]($call, $agg$tmp) | 0;
 HEAP32[$ref$tmp >> 2] = $call3;
 $call5 = __ZN10emscripten8internal11BindingTypeIiE10toWireTypeERKi($ref$tmp) | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($agg$tmp);
 STACKTOP = sp;
 return $call5 | 0;
}

function _setThreshold($id, $threshold) {
 $id = $id | 0;
 $threshold = $threshold | 0;
 var $call7 = 0, $id$addr = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $vararg_buffer = sp;
 $id$addr = sp + 4 | 0;
 HEAP32[$id$addr >> 2] = $id;
 if (__ZNSt3__212__hash_tableINS_17__hash_value_typeIi12arControllerEENS_22__unordered_map_hasherIiS3_NS_4hashIiEELb1EEENS_21__unordered_map_equalIiS3_NS_8equal_toIiEELb1EEENS_9allocatorIS3_EEE4findIiEENS_15__hash_iteratorIPNS_11__hash_nodeIS3_PvEEEERKT_(17144, $id$addr) | 0) {
  $call7 = __ZNSt3__213unordered_mapIi12arControllerNS_4hashIiEENS_8equal_toIiEENS_9allocatorINS_4pairIKiS1_EEEEEixERS8_(17144, $id$addr) | 0;
  if ($threshold >>> 0 <= 255) if (!(_arSetLabelingThresh(HEAP32[$call7 + 212 >> 2] | 0, $threshold) | 0)) {
   HEAP32[$vararg_buffer >> 2] = $threshold;
   _arLog(1, 7821, $vararg_buffer);
  }
 }
 STACKTOP = sp;
 return;
}

function _getThresholdMode($id) {
 $id = $id | 0;
 var $arhandle = 0, $cmp = 0, $id$addr = 0, $retval$1 = 0, $thresholdMode = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $id$addr = sp;
 $thresholdMode = sp + 4 | 0;
 HEAP32[$id$addr >> 2] = $id;
 if (!(__ZNSt3__212__hash_tableINS_17__hash_value_typeIi12arControllerEENS_22__unordered_map_hasherIiS3_NS_4hashIiEELb1EEENS_21__unordered_map_equalIiS3_NS_8equal_toIiEELb1EEENS_9allocatorIS3_EEE4findIiEENS_15__hash_iteratorIPNS_11__hash_nodeIS3_PvEEEERKT_(17144, $id$addr) | 0)) $retval$1 = -1; else {
  $arhandle = (__ZNSt3__213unordered_mapIi12arControllerNS_4hashIiEENS_8equal_toIiEENS_9allocatorINS_4pairIKiS1_EEEEEixERS8_(17144, $id$addr) | 0) + 212 | 0;
  $cmp = (_arGetLabelingThreshMode(HEAP32[$arhandle >> 2] | 0, $thresholdMode) | 0) == 0;
  $retval$1 = $cmp ? HEAP32[$thresholdMode >> 2] | 0 : -1;
 }
 STACKTOP = sp;
 return $retval$1 | 0;
}

function _arImageProcInit($xsize, $ysize, $pixFormat, $alwaysCopy) {
 $xsize = $xsize | 0;
 $ysize = $ysize | 0;
 $pixFormat = $pixFormat | 0;
 $alwaysCopy = $alwaysCopy | 0;
 var $$sink = 0, $call = 0, $call10 = 0, $retval$0 = 0, label = 0;
 $call = _malloc(2080) | 0;
 do if (!$call) $retval$0 = $call; else {
  HEAP32[$call + 2068 >> 2] = $pixFormat;
  if (!$alwaysCopy) switch ($pixFormat | 0) {
  case 5:
  case 12:
  case 13:
  case 14:
   {
    $$sink = 0;
    break;
   }
  default:
   label = 4;
  } else label = 4;
  if ((label | 0) == 4) {
   $call10 = _malloc(Math_imul($ysize, $xsize) | 0) | 0;
   HEAP32[$call >> 2] = $call10;
   if (!$call10) {
    _free($call);
    $retval$0 = 0;
    break;
   } else $$sink = 1;
  }
  HEAP32[$call + 2076 >> 2] = $$sink;
  HEAP32[$call + 2072 >> 2] = $alwaysCopy;
  HEAP32[$call + 4 >> 2] = 0;
  HEAP32[$call + 8 >> 2] = $xsize;
  HEAP32[$call + 12 >> 2] = $ysize;
  $retval$0 = $call;
 } while (0);
 return $retval$0 | 0;
}

function _icpGetQ_from_S($q, $s) {
 $q = $q | 0;
 $s = $s | 0;
 var $$sink = 0.0, $0 = 0.0, $1 = 0.0, $2 = 0.0, $add8 = 0.0, $arrayidx10 = 0, $arrayidx2 = 0, $arrayidx5 = 0, $call = 0.0, $storemerge = 0.0;
 $0 = +HEAPF64[$s >> 3];
 $arrayidx2 = $s + 8 | 0;
 $1 = +HEAPF64[$arrayidx2 >> 3];
 $arrayidx5 = $s + 16 | 0;
 $2 = +HEAPF64[$arrayidx5 >> 3];
 $add8 = $0 * $0 + $1 * $1 + $2 * $2;
 $arrayidx10 = $q + 8 | 0;
 if ($add8 == 0.0) {
  HEAPF64[$q >> 3] = 1.0;
  HEAPF64[$arrayidx10 >> 3] = 0.0;
  $$sink = 0.0;
  $storemerge = 0.0;
 } else {
  $call = +Math_sqrt(+$add8);
  HEAPF64[$q >> 3] = $0 / $call;
  HEAPF64[$arrayidx10 >> 3] = +HEAPF64[$arrayidx2 >> 3] / $call;
  $$sink = $call;
  $storemerge = +HEAPF64[$arrayidx5 >> 3] / $call;
 }
 HEAPF64[$q + 16 >> 3] = $storemerge;
 HEAPF64[$q + 24 >> 3] = $$sink;
 HEAPF64[$q + 32 >> 3] = +HEAPF64[$s + 24 >> 3];
 HEAPF64[$q + 40 >> 3] = +HEAPF64[$s + 32 >> 3];
 HEAPF64[$q + 48 >> 3] = +HEAPF64[$s + 40 >> 3];
 return;
}

function _getImageProcMode($id) {
 $id = $id | 0;
 var $arhandle = 0, $cmp = 0, $id$addr = 0, $imageProcMode = 0, $retval$1 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $id$addr = sp;
 $imageProcMode = sp + 4 | 0;
 HEAP32[$id$addr >> 2] = $id;
 if (!(__ZNSt3__212__hash_tableINS_17__hash_value_typeIi12arControllerEENS_22__unordered_map_hasherIiS3_NS_4hashIiEELb1EEENS_21__unordered_map_equalIiS3_NS_8equal_toIiEELb1EEENS_9allocatorIS3_EEE4findIiEENS_15__hash_iteratorIPNS_11__hash_nodeIS3_PvEEEERKT_(17144, $id$addr) | 0)) $retval$1 = -1; else {
  $arhandle = (__ZNSt3__213unordered_mapIi12arControllerNS_4hashIiEENS_8equal_toIiEENS_9allocatorINS_4pairIKiS1_EEEEEixERS8_(17144, $id$addr) | 0) + 212 | 0;
  $cmp = (_arGetImageProcMode(HEAP32[$arhandle >> 2] | 0, $imageProcMode) | 0) == 0;
  $retval$1 = $cmp ? HEAP32[$imageProcMode >> 2] | 0 : -1;
 }
 STACKTOP = sp;
 return $retval$1 | 0;
}

function _getLabelingMode($id) {
 $id = $id | 0;
 var $arhandle = 0, $cmp = 0, $id$addr = 0, $labelingMode = 0, $retval$1 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $id$addr = sp;
 $labelingMode = sp + 4 | 0;
 HEAP32[$id$addr >> 2] = $id;
 if (!(__ZNSt3__212__hash_tableINS_17__hash_value_typeIi12arControllerEENS_22__unordered_map_hasherIiS3_NS_4hashIiEELb1EEENS_21__unordered_map_equalIiS3_NS_8equal_toIiEELb1EEENS_9allocatorIS3_EEE4findIiEENS_15__hash_iteratorIPNS_11__hash_nodeIS3_PvEEEERKT_(17144, $id$addr) | 0)) $retval$1 = -1; else {
  $arhandle = (__ZNSt3__213unordered_mapIi12arControllerNS_4hashIiEENS_8equal_toIiEENS_9allocatorINS_4pairIKiS1_EEEEEixERS8_(17144, $id$addr) | 0) + 212 | 0;
  $cmp = (_arGetLabelingMode(HEAP32[$arhandle >> 2] | 0, $labelingMode) | 0) == 0;
  $retval$1 = $cmp ? HEAP32[$labelingMode >> 2] | 0 : -1;
 }
 STACKTOP = sp;
 return $retval$1 | 0;
}

function __ZNSt3__212__hash_tableINS_17__hash_value_typeIi7ARParamEENS_22__unordered_map_hasherIiS3_NS_4hashIiEELb1EEENS_21__unordered_map_equalIiS3_NS_8equal_toIiEELb1EEENS_9allocatorIS3_EEE21__construct_node_hashIRKNS_21piecewise_construct_tEJNS_5tupleIJRKiEEENSJ_IJEEEEEENS_10unique_ptrINS_11__hash_nodeIS3_PvEENS_22__hash_node_destructorINSC_ISR_EEEEEEjOT_DpOT0_($agg$result, $this, $__hash, $__f, $__rest, $__rest1) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $__hash = $__hash | 0;
 $__f = $__f | 0;
 $__rest = $__rest | 0;
 $__rest1 = $__rest1 | 0;
 var $4 = 0, $call$i$i$i = 0;
 $call$i$i$i = __Znwj(200) | 0;
 HEAP32[$agg$result >> 2] = $call$i$i$i;
 HEAP32[$agg$result + 4 >> 2] = $this + 8;
 HEAP32[$call$i$i$i + 8 >> 2] = HEAP32[HEAP32[$__rest >> 2] >> 2];
 _memset($call$i$i$i + 16 | 0, 0, 184) | 0;
 HEAP8[$agg$result + 8 >> 0] = 1;
 $4 = HEAP32[$agg$result >> 2] | 0;
 HEAP32[$4 + 4 >> 2] = $__hash;
 HEAP32[$4 >> 2] = 0;
 return;
}

function _setPatternDetectionMode($id, $mode) {
 $id = $id | 0;
 $mode = $mode | 0;
 var $arhandle = 0, $id$addr = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $vararg_buffer = sp;
 $id$addr = sp + 4 | 0;
 HEAP32[$id$addr >> 2] = $id;
 if (__ZNSt3__212__hash_tableINS_17__hash_value_typeIi12arControllerEENS_22__unordered_map_hasherIiS3_NS_4hashIiEELb1EEENS_21__unordered_map_equalIiS3_NS_8equal_toIiEELb1EEENS_9allocatorIS3_EEE4findIiEENS_15__hash_iteratorIPNS_11__hash_nodeIS3_PvEEEERKT_(17144, $id$addr) | 0) {
  $arhandle = (__ZNSt3__213unordered_mapIi12arControllerNS_4hashIiEENS_8equal_toIiEENS_9allocatorINS_4pairIKiS1_EEEEEixERS8_(17144, $id$addr) | 0) + 212 | 0;
  if (!(_arSetPatternDetectionMode(HEAP32[$arhandle >> 2] | 0, $mode) | 0)) {
   HEAP32[$vararg_buffer >> 2] = $mode;
   _arLog(1, 7786, $vararg_buffer);
  }
 }
 STACKTOP = sp;
 return;
}

function _getThreshold($id) {
 $id = $id | 0;
 var $arhandle = 0, $cmp = 0, $id$addr = 0, $retval$1 = 0, $threshold = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $id$addr = sp;
 $threshold = sp + 4 | 0;
 HEAP32[$id$addr >> 2] = $id;
 if (!(__ZNSt3__212__hash_tableINS_17__hash_value_typeIi12arControllerEENS_22__unordered_map_hasherIiS3_NS_4hashIiEELb1EEENS_21__unordered_map_equalIiS3_NS_8equal_toIiEELb1EEENS_9allocatorIS3_EEE4findIiEENS_15__hash_iteratorIPNS_11__hash_nodeIS3_PvEEEERKT_(17144, $id$addr) | 0)) $retval$1 = -1; else {
  $arhandle = (__ZNSt3__213unordered_mapIi12arControllerNS_4hashIiEENS_8equal_toIiEENS_9allocatorINS_4pairIKiS1_EEEEEixERS8_(17144, $id$addr) | 0) + 212 | 0;
  $cmp = (_arGetLabelingThresh(HEAP32[$arhandle >> 2] | 0, $threshold) | 0) == 0;
  $retval$1 = $cmp ? HEAP32[$threshold >> 2] | 0 : -1;
 }
 STACKTOP = sp;
 return $retval$1 | 0;
}

function _getPatternDetectionMode($id) {
 $id = $id | 0;
 var $arhandle = 0, $cmp = 0, $id$addr = 0, $mode = 0, $retval$1 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $id$addr = sp;
 $mode = sp + 4 | 0;
 HEAP32[$id$addr >> 2] = $id;
 if (!(__ZNSt3__212__hash_tableINS_17__hash_value_typeIi12arControllerEENS_22__unordered_map_hasherIiS3_NS_4hashIiEELb1EEENS_21__unordered_map_equalIiS3_NS_8equal_toIiEELb1EEENS_9allocatorIS3_EEE4findIiEENS_15__hash_iteratorIPNS_11__hash_nodeIS3_PvEEEERKT_(17144, $id$addr) | 0)) $retval$1 = -1; else {
  $arhandle = (__ZNSt3__213unordered_mapIi12arControllerNS_4hashIiEENS_8equal_toIiEENS_9allocatorINS_4pairIKiS1_EEEEEixERS8_(17144, $id$addr) | 0) + 212 | 0;
  $cmp = (_arGetPatternDetectionMode(HEAP32[$arhandle >> 2] | 0, $mode) | 0) == 0;
  $retval$1 = $cmp ? HEAP32[$mode >> 2] | 0 : -1;
 }
 STACKTOP = sp;
 return $retval$1 | 0;
}

function _setThresholdMode($id, $mode) {
 $id = $id | 0;
 $mode = $mode | 0;
 var $arhandle = 0, $id$addr = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $vararg_buffer = sp;
 $id$addr = sp + 4 | 0;
 HEAP32[$id$addr >> 2] = $id;
 if (__ZNSt3__212__hash_tableINS_17__hash_value_typeIi12arControllerEENS_22__unordered_map_hasherIiS3_NS_4hashIiEELb1EEENS_21__unordered_map_equalIiS3_NS_8equal_toIiEELb1EEENS_9allocatorIS3_EEE4findIiEENS_15__hash_iteratorIPNS_11__hash_nodeIS3_PvEEEERKT_(17144, $id$addr) | 0) {
  $arhandle = (__ZNSt3__213unordered_mapIi12arControllerNS_4hashIiEENS_8equal_toIiEENS_9allocatorINS_4pairIKiS1_EEEEEixERS8_(17144, $id$addr) | 0) + 212 | 0;
  if (!(_arSetLabelingThreshMode(HEAP32[$arhandle >> 2] | 0, $mode) | 0)) {
   HEAP32[$vararg_buffer >> 2] = $mode;
   _arLog(1, 7847, $vararg_buffer);
  }
 }
 STACKTOP = sp;
 return;
}

function _setImageProcMode($id, $mode) {
 $id = $id | 0;
 $mode = $mode | 0;
 var $arhandle = 0, $id$addr = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $vararg_buffer = sp;
 $id$addr = sp + 4 | 0;
 HEAP32[$id$addr >> 2] = $id;
 if (__ZNSt3__212__hash_tableINS_17__hash_value_typeIi12arControllerEENS_22__unordered_map_hasherIiS3_NS_4hashIiEELb1EEENS_21__unordered_map_equalIiS3_NS_8equal_toIiEELb1EEENS_9allocatorIS3_EEE4findIiEENS_15__hash_iteratorIPNS_11__hash_nodeIS3_PvEEEERKT_(17144, $id$addr) | 0) {
  $arhandle = (__ZNSt3__213unordered_mapIi12arControllerNS_4hashIiEENS_8equal_toIiEENS_9allocatorINS_4pairIKiS1_EEEEEixERS8_(17144, $id$addr) | 0) + 212 | 0;
  if (!(_arSetImageProcMode(HEAP32[$arhandle >> 2] | 0, $mode) | 0)) {
   HEAP32[$vararg_buffer >> 2] = $mode;
   _arLog(1, 7696, $vararg_buffer);
  }
 }
 STACKTOP = sp;
 return;
}

function _setLabelingMode($id, $mode) {
 $id = $id | 0;
 $mode = $mode | 0;
 var $arhandle = 0, $id$addr = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $vararg_buffer = sp;
 $id$addr = sp + 4 | 0;
 HEAP32[$id$addr >> 2] = $id;
 if (__ZNSt3__212__hash_tableINS_17__hash_value_typeIi12arControllerEENS_22__unordered_map_hasherIiS3_NS_4hashIiEELb1EEENS_21__unordered_map_equalIiS3_NS_8equal_toIiEELb1EEENS_9allocatorIS3_EEE4findIiEENS_15__hash_iteratorIPNS_11__hash_nodeIS3_PvEEEERKT_(17144, $id$addr) | 0) {
  $arhandle = (__ZNSt3__213unordered_mapIi12arControllerNS_4hashIiEENS_8equal_toIiEENS_9allocatorINS_4pairIKiS1_EEEEEixERS8_(17144, $id$addr) | 0) + 212 | 0;
  if (!(_arSetLabelingMode(HEAP32[$arhandle >> 2] | 0, $mode) | 0)) {
   HEAP32[$vararg_buffer >> 2] = $mode;
   _arLog(1, 7725, $vararg_buffer);
  }
 }
 STACKTOP = sp;
 return;
}

function ___fseeko_unlocked($f, $off, $whence) {
 $f = $f | 0;
 $off = $off | 0;
 $whence = $whence | 0;
 var $off$addr$0 = 0, $retval$0 = 0, $wbase = 0, $wpos = 0, label = 0;
 if (($whence | 0) == 1) $off$addr$0 = $off - (HEAP32[$f + 8 >> 2] | 0) + (HEAP32[$f + 4 >> 2] | 0) | 0; else $off$addr$0 = $off;
 $wpos = $f + 20 | 0;
 $wbase = $f + 28 | 0;
 if ((HEAP32[$wpos >> 2] | 0) >>> 0 > (HEAP32[$wbase >> 2] | 0) >>> 0) {
  FUNCTION_TABLE_iiii[HEAP32[$f + 36 >> 2] & 15]($f, 0, 0) | 0;
  if (!(HEAP32[$wpos >> 2] | 0)) $retval$0 = -1; else label = 5;
 } else label = 5;
 if ((label | 0) == 5) {
  HEAP32[$f + 16 >> 2] = 0;
  HEAP32[$wbase >> 2] = 0;
  HEAP32[$wpos >> 2] = 0;
  if ((FUNCTION_TABLE_iiii[HEAP32[$f + 40 >> 2] & 15]($f, $off$addr$0, $whence) | 0) < 0) $retval$0 = -1; else {
   HEAP32[$f + 8 >> 2] = 0;
   HEAP32[$f + 4 >> 2] = 0;
   HEAP32[$f >> 2] = HEAP32[$f >> 2] & -17;
   $retval$0 = 0;
  }
 }
 return $retval$0 | 0;
}

function __ZNSt3__214__split_bufferINS_6vectorINS1_IN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEENS5_IS7_Lj4096EEEEERNS5_IS9_Lj4096EEEED2Ev($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, $2 = 0, $__end_$i$i$i = 0, $incdec$ptr$i$i$i = 0;
 $0 = HEAP32[$this + 4 >> 2] | 0;
 $__end_$i$i$i = $this + 8 | 0;
 while (1) {
  $1 = HEAP32[$__end_$i$i$i >> 2] | 0;
  if (($1 | 0) == ($0 | 0)) break;
  $incdec$ptr$i$i$i = $1 + -16 | 0;
  HEAP32[$__end_$i$i$i >> 2] = $incdec$ptr$i$i$i;
  __ZNSt3__213__vector_baseINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEENS5_IS7_Lj4096EEEED2Ev($incdec$ptr$i$i$i);
 }
 $2 = HEAP32[$this >> 2] | 0;
 if ($2 | 0) __ZN10__cxxabiv112_GLOBAL__N_111short_allocINSt3__26vectorINS3_INS0_11string_pairENS1_IS4_Lj4096EEEEENS1_IS6_Lj4096EEEEELj4096EE10deallocateEPS8_j(HEAP32[$this + 16 >> 2] | 0, $2, (HEAP32[$this + 12 >> 2] | 0) - $2 >> 4);
 return;
}

function _arPattDeleteHandle($pattHandle) {
 $pattHandle = $pattHandle | 0;
 var $add = 0, $i$0 = 0, $j$0 = 0, $mul = 0, $patt = 0, $pattBW = 0, $patt_num_max = 0, $pattf = 0, $retval$0 = 0;
 if (!$pattHandle) $retval$0 = -1; else {
  $patt_num_max = $pattHandle + 4 | 0;
  $pattf = $pattHandle + 8 | 0;
  $patt = $pattHandle + 12 | 0;
  $pattBW = $pattHandle + 20 | 0;
  $i$0 = 0;
  while (1) {
   if (($i$0 | 0) >= (HEAP32[$patt_num_max >> 2] | 0)) break;
   if (HEAP32[(HEAP32[$pattf >> 2] | 0) + ($i$0 << 2) >> 2] | 0) _arPattFree($pattHandle, $i$0) | 0;
   $mul = $i$0 << 2;
   $j$0 = 0;
   while (1) {
    if (($j$0 | 0) == 4) break;
    $add = $j$0 + $mul | 0;
    _free(HEAP32[(HEAP32[$patt >> 2] | 0) + ($add << 2) >> 2] | 0);
    _free(HEAP32[(HEAP32[$pattBW >> 2] | 0) + ($add << 2) >> 2] | 0);
    $j$0 = $j$0 + 1 | 0;
   }
   $i$0 = $i$0 + 1 | 0;
  }
  _free($pattHandle);
  $retval$0 = 0;
 }
 return $retval$0 | 0;
}

function _getMatrixCodeType($id) {
 $id = $id | 0;
 var $arhandle = 0, $id$addr = 0, $matrixType = 0, $retval$0 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $id$addr = sp;
 $matrixType = sp + 4 | 0;
 HEAP32[$id$addr >> 2] = $id;
 if (!(__ZNSt3__212__hash_tableINS_17__hash_value_typeIi12arControllerEENS_22__unordered_map_hasherIiS3_NS_4hashIiEELb1EEENS_21__unordered_map_equalIiS3_NS_8equal_toIiEELb1EEENS_9allocatorIS3_EEE4findIiEENS_15__hash_iteratorIPNS_11__hash_nodeIS3_PvEEEERKT_(17144, $id$addr) | 0)) $retval$0 = -1; else {
  $arhandle = (__ZNSt3__213unordered_mapIi12arControllerNS_4hashIiEENS_8equal_toIiEENS_9allocatorINS_4pairIKiS1_EEEEEixERS8_(17144, $id$addr) | 0) + 212 | 0;
  _arGetMatrixCodeType(HEAP32[$arhandle >> 2] | 0, $matrixType) | 0;
  $retval$0 = HEAP32[$matrixType >> 2] | 0;
 }
 STACKTOP = sp;
 return $retval$0 | 0;
}

function __ZNSt3__213__vector_baseINS_6vectorINS1_IN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEENS5_IS7_Lj4096EEEEENS5_IS9_Lj4096EEEED2Ev($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, $2 = 0, $__end_$i$i = 0, $incdec$ptr$i$i = 0;
 $0 = HEAP32[$this >> 2] | 0;
 if ($0 | 0) {
  $__end_$i$i = $this + 4 | 0;
  while (1) {
   $1 = HEAP32[$__end_$i$i >> 2] | 0;
   if (($1 | 0) == ($0 | 0)) break;
   $incdec$ptr$i$i = $1 + -16 | 0;
   HEAP32[$__end_$i$i >> 2] = $incdec$ptr$i$i;
   __ZNSt3__213__vector_baseINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEENS5_IS7_Lj4096EEEED2Ev($incdec$ptr$i$i);
  }
  $2 = HEAP32[$this >> 2] | 0;
  __ZN10__cxxabiv112_GLOBAL__N_111short_allocINSt3__26vectorINS3_INS0_11string_pairENS1_IS4_Lj4096EEEEENS1_IS6_Lj4096EEEEELj4096EE10deallocateEPS8_j($this + 12 | 0, $2, (HEAP32[$this + 8 >> 2] | 0) - $2 >> 4);
 }
 return;
}

function _arMatrixTrans($dest, $source) {
 $dest = $dest | 0;
 $source = $source | 0;
 var $0 = 0, $2 = 0, $c$0 = 0, $p1$0 = 0, $p2$0 = 0, $p2$1 = 0, $r$0 = 0, $retval$0 = 0;
 $0 = HEAP32[$dest + 4 >> 2] | 0;
 L1 : do if (($0 | 0) == (HEAP32[$source + 8 >> 2] | 0)) {
  $2 = HEAP32[$dest + 8 >> 2] | 0;
  if (($2 | 0) == (HEAP32[$source + 4 >> 2] | 0)) {
   $p2$0 = HEAP32[$dest >> 2] | 0;
   $r$0 = 0;
   while (1) {
    if (($r$0 | 0) >= ($0 | 0)) {
     $retval$0 = 0;
     break L1;
    }
    $c$0 = 0;
    $p1$0 = (HEAP32[$source >> 2] | 0) + ($r$0 << 3) | 0;
    $p2$1 = $p2$0;
    while (1) {
     if (($c$0 | 0) >= ($2 | 0)) break;
     HEAPF64[$p2$1 >> 3] = +HEAPF64[$p1$0 >> 3];
     $c$0 = $c$0 + 1 | 0;
     $p1$0 = $p1$0 + ($0 << 3) | 0;
     $p2$1 = $p2$1 + 8 | 0;
    }
    $p2$0 = $p2$1;
    $r$0 = $r$0 + 1 | 0;
   }
  } else $retval$0 = -1;
 } else $retval$0 = -1; while (0);
 return $retval$0 | 0;
}

function __ZN10__cxxabiv112_GLOBAL__N_121parse_destructor_nameINS0_2DbEEEPKcS4_S4_RT_($first, $last, $db) {
 $first = $first | 0;
 $last = $last | 0;
 $db = $db | 0;
 var $1 = 0, $call = 0, $retval$1 = 0, $t$0 = 0;
 if (($first | 0) == ($last | 0)) $retval$1 = $first; else {
  $call = __ZN10__cxxabiv112_GLOBAL__N_121parse_unresolved_typeINS0_2DbEEEPKcS4_S4_RT_($first, $last, $db) | 0;
  if (($call | 0) == ($first | 0)) $t$0 = __ZN10__cxxabiv112_GLOBAL__N_115parse_simple_idINS0_2DbEEEPKcS4_S4_RT_($first, $last, $db) | 0; else $t$0 = $call;
  if (($t$0 | 0) == ($first | 0)) $retval$1 = $first; else {
   $1 = HEAP32[$db + 4 >> 2] | 0;
   if ((HEAP32[$db >> 2] | 0) == ($1 | 0)) $retval$1 = $first; else {
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKc($1 + -24 | 0, 0, 14957) | 0;
    $retval$1 = $t$0;
   }
  }
 }
 return $retval$1 | 0;
}

function _frexp($x, $e) {
 $x = +$x;
 $e = $e | 0;
 var $0 = 0, $1 = 0, $2 = 0, $call = 0.0, $retval$0 = 0.0, $storemerge = 0, $x$addr$0 = 0.0;
 HEAPF64[tempDoublePtr >> 3] = $x;
 $0 = HEAP32[tempDoublePtr >> 2] | 0;
 $1 = HEAP32[tempDoublePtr + 4 >> 2] | 0;
 $2 = _bitshift64Lshr($0 | 0, $1 | 0, 52) | 0;
 switch ($2 & 2047) {
 case 0:
  {
   if ($x != 0.0) {
    $call = +_frexp($x * 18446744073709551616.0, $e);
    $storemerge = (HEAP32[$e >> 2] | 0) + -64 | 0;
    $x$addr$0 = $call;
   } else {
    $storemerge = 0;
    $x$addr$0 = $x;
   }
   HEAP32[$e >> 2] = $storemerge;
   $retval$0 = $x$addr$0;
   break;
  }
 case 2047:
  {
   $retval$0 = $x;
   break;
  }
 default:
  {
   HEAP32[$e >> 2] = ($2 & 2047) + -1022;
   HEAP32[tempDoublePtr >> 2] = $0;
   HEAP32[tempDoublePtr + 4 >> 2] = $1 & -2146435073 | 1071644672;
   $retval$0 = +HEAPF64[tempDoublePtr >> 3];
  }
 }
 return +$retval$0;
}

function _getDebugMode($id) {
 $id = $id | 0;
 var $arhandle = 0, $enable = 0, $id$addr = 0, $retval$0 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $id$addr = sp;
 $enable = sp + 4 | 0;
 HEAP32[$id$addr >> 2] = $id;
 if (!(__ZNSt3__212__hash_tableINS_17__hash_value_typeIi12arControllerEENS_22__unordered_map_hasherIiS3_NS_4hashIiEELb1EEENS_21__unordered_map_equalIiS3_NS_8equal_toIiEELb1EEENS_9allocatorIS3_EEE4findIiEENS_15__hash_iteratorIPNS_11__hash_nodeIS3_PvEEEERKT_(17144, $id$addr) | 0)) $retval$0 = 0; else {
  $arhandle = (__ZNSt3__213unordered_mapIi12arControllerNS_4hashIiEENS_8equal_toIiEENS_9allocatorINS_4pairIKiS1_EEEEEixERS8_(17144, $id$addr) | 0) + 212 | 0;
  _arGetDebugMode(HEAP32[$arhandle >> 2] | 0, $enable) | 0;
  $retval$0 = HEAP32[$enable >> 2] | 0;
 }
 STACKTOP = sp;
 return $retval$0 | 0;
}

function ___strerror_l($e, $loc) {
 $e = $e | 0;
 $loc = $loc | 0;
 var $i$012 = 0, $i$111 = 0, $inc = 0, $s$0$lcssa = 0, $s$010 = 0, $s$1 = 0, label = 0, $s$1$looptemp = 0;
 $i$012 = 0;
 while (1) {
  if ((HEAPU8[12321 + $i$012 >> 0] | 0) == ($e | 0)) {
   label = 2;
   break;
  }
  $inc = $i$012 + 1 | 0;
  if (($inc | 0) == 87) {
   $i$111 = 87;
   $s$010 = 12409;
   label = 5;
   break;
  } else $i$012 = $inc;
 }
 if ((label | 0) == 2) if (!$i$012) $s$0$lcssa = 12409; else {
  $i$111 = $i$012;
  $s$010 = 12409;
  label = 5;
 }
 if ((label | 0) == 5) while (1) {
  label = 0;
  $s$1 = $s$010;
  do {
   $s$1$looptemp = $s$1;
   $s$1 = $s$1 + 1 | 0;
  } while ((HEAP8[$s$1$looptemp >> 0] | 0) != 0);
  $i$111 = $i$111 + -1 | 0;
  if (!$i$111) {
   $s$0$lcssa = $s$1;
   break;
  } else {
   $s$010 = $s$1;
   label = 5;
  }
 }
 return ___lctrans($s$0$lcssa, HEAP32[$loc + 20 >> 2] | 0) | 0;
}

function _icpGetU_from_X_by_MatX2U($u, $matX2U, $coord3d) {
 $u = $u | 0;
 $matX2U = $matX2U | 0;
 $coord3d = $coord3d | 0;
 var $0 = 0.0, $1 = 0.0, $2 = 0.0, $add28 = 0.0, $add45 = 0.0, $retval$0 = 0;
 $0 = +HEAPF64[$coord3d >> 3];
 $1 = +HEAPF64[$coord3d + 8 >> 3];
 $2 = +HEAPF64[$coord3d + 16 >> 3];
 $add45 = +HEAPF64[$matX2U + 88 >> 3] + ($0 * +HEAPF64[$matX2U + 64 >> 3] + $1 * +HEAPF64[$matX2U + 72 >> 3] + $2 * +HEAPF64[$matX2U + 80 >> 3]);
 if ($add45 == 0.0) $retval$0 = -1; else {
  $add28 = +HEAPF64[$matX2U + 56 >> 3] + ($0 * +HEAPF64[$matX2U + 32 >> 3] + $1 * +HEAPF64[$matX2U + 40 >> 3] + $2 * +HEAPF64[$matX2U + 48 >> 3]);
  HEAPF64[$u >> 3] = (+HEAPF64[$matX2U + 24 >> 3] + ($0 * +HEAPF64[$matX2U >> 3] + $1 * +HEAPF64[$matX2U + 8 >> 3] + $2 * +HEAPF64[$matX2U + 16 >> 3])) / $add45;
  HEAPF64[$u + 8 >> 3] = $add28 / $add45;
  $retval$0 = 0;
 }
 return $retval$0 | 0;
}

function __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj11EEERAT__Kc($this, $s) {
 $this = $this | 0;
 $s = $s | 0;
 var $__i$0$i$i = 0, $ref$tmp$i$i = 0, $second = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $ref$tmp$i$i = sp;
 HEAP32[$this >> 2] = 0;
 HEAP32[$this + 4 >> 2] = 0;
 HEAP32[$this + 8 >> 2] = 0;
 HEAP8[$this + 11 >> 0] = 10;
 __ZNSt3__211char_traitsIcE4copyEPcPKcj($this, $s, 10) | 0;
 HEAP8[$ref$tmp$i$i >> 0] = 0;
 __ZNSt3__211char_traitsIcE6assignERcRKc($this + 10 | 0, $ref$tmp$i$i);
 $second = $this + 12 | 0;
 HEAP32[$second >> 2] = 0;
 HEAP32[$second + 4 >> 2] = 0;
 HEAP32[$second + 8 >> 2] = 0;
 $__i$0$i$i = 0;
 while (1) {
  if (($__i$0$i$i | 0) == 3) break;
  HEAP32[$second + ($__i$0$i$i << 2) >> 2] = 0;
  $__i$0$i$i = $__i$0$i$i + 1 | 0;
 }
 STACKTOP = sp;
 return;
}

function __ZNKSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE7compareEjjPKcj($this, $__s, $__n2) {
 $this = $this | 0;
 $__s = $__s | 0;
 $__n2 = $__n2 | 0;
 var $0 = 0, $call6 = 0, $cmp$i$i$i1 = 0, $cond$i = 0, $cond$i$i = 0, $tobool$i$i = 0;
 $0 = HEAP8[$this + 11 >> 0] | 0;
 $tobool$i$i = $0 << 24 >> 24 < 0;
 if ($tobool$i$i) $cond$i = HEAP32[$this + 4 >> 2] | 0; else $cond$i = $0 & 255;
 if (($__n2 | 0) == -1) __ZNKSt3__221__basic_string_commonILb1EE20__throw_out_of_rangeEv($this);
 if ($tobool$i$i) $cond$i$i = HEAP32[$this >> 2] | 0; else $cond$i$i = $this;
 $cmp$i$i$i1 = $cond$i >>> 0 > $__n2 >>> 0;
 $call6 = __ZNSt3__211char_traitsIcE7compareEPKcS3_j($cond$i$i, $__s, $cmp$i$i$i1 ? $__n2 : $cond$i) | 0;
 if (!$call6) return ($cond$i >>> 0 < $__n2 >>> 0 ? -1 : $cmp$i$i$i1 & 1) | 0; else return $call6 | 0;
 return 0;
}

function __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj10EEERAT__Kc($this, $s) {
 $this = $this | 0;
 $s = $s | 0;
 var $__i$0$i$i = 0, $ref$tmp$i$i = 0, $second = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $ref$tmp$i$i = sp;
 HEAP32[$this >> 2] = 0;
 HEAP32[$this + 4 >> 2] = 0;
 HEAP32[$this + 8 >> 2] = 0;
 HEAP8[$this + 11 >> 0] = 9;
 __ZNSt3__211char_traitsIcE4copyEPcPKcj($this, $s, 9) | 0;
 HEAP8[$ref$tmp$i$i >> 0] = 0;
 __ZNSt3__211char_traitsIcE6assignERcRKc($this + 9 | 0, $ref$tmp$i$i);
 $second = $this + 12 | 0;
 HEAP32[$second >> 2] = 0;
 HEAP32[$second + 4 >> 2] = 0;
 HEAP32[$second + 8 >> 2] = 0;
 $__i$0$i$i = 0;
 while (1) {
  if (($__i$0$i$i | 0) == 3) break;
  HEAP32[$second + ($__i$0$i$i << 2) >> 2] = 0;
  $__i$0$i$i = $__i$0$i$i + 1 | 0;
 }
 STACKTOP = sp;
 return;
}

function __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj9EEERAT__Kc($this, $s) {
 $this = $this | 0;
 $s = $s | 0;
 var $__i$0$i$i = 0, $ref$tmp$i$i = 0, $second = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $ref$tmp$i$i = sp;
 HEAP32[$this >> 2] = 0;
 HEAP32[$this + 4 >> 2] = 0;
 HEAP32[$this + 8 >> 2] = 0;
 HEAP8[$this + 11 >> 0] = 8;
 __ZNSt3__211char_traitsIcE4copyEPcPKcj($this, $s, 8) | 0;
 HEAP8[$ref$tmp$i$i >> 0] = 0;
 __ZNSt3__211char_traitsIcE6assignERcRKc($this + 8 | 0, $ref$tmp$i$i);
 $second = $this + 12 | 0;
 HEAP32[$second >> 2] = 0;
 HEAP32[$second + 4 >> 2] = 0;
 HEAP32[$second + 8 >> 2] = 0;
 $__i$0$i$i = 0;
 while (1) {
  if (($__i$0$i$i | 0) == 3) break;
  HEAP32[$second + ($__i$0$i$i << 2) >> 2] = 0;
  $__i$0$i$i = $__i$0$i$i + 1 | 0;
 }
 STACKTOP = sp;
 return;
}

function __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj6EEERAT__Kc($this, $s) {
 $this = $this | 0;
 $s = $s | 0;
 var $__i$0$i$i = 0, $ref$tmp$i$i = 0, $second = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $ref$tmp$i$i = sp;
 HEAP32[$this >> 2] = 0;
 HEAP32[$this + 4 >> 2] = 0;
 HEAP32[$this + 8 >> 2] = 0;
 HEAP8[$this + 11 >> 0] = 5;
 __ZNSt3__211char_traitsIcE4copyEPcPKcj($this, $s, 5) | 0;
 HEAP8[$ref$tmp$i$i >> 0] = 0;
 __ZNSt3__211char_traitsIcE6assignERcRKc($this + 5 | 0, $ref$tmp$i$i);
 $second = $this + 12 | 0;
 HEAP32[$second >> 2] = 0;
 HEAP32[$second + 4 >> 2] = 0;
 HEAP32[$second + 8 >> 2] = 0;
 $__i$0$i$i = 0;
 while (1) {
  if (($__i$0$i$i | 0) == 3) break;
  HEAP32[$second + ($__i$0$i$i << 2) >> 2] = 0;
  $__i$0$i$i = $__i$0$i$i + 1 | 0;
 }
 STACKTOP = sp;
 return;
}

function __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj5EEERAT__Kc($this, $s) {
 $this = $this | 0;
 $s = $s | 0;
 var $__i$0$i$i = 0, $ref$tmp$i$i = 0, $second = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $ref$tmp$i$i = sp;
 HEAP32[$this >> 2] = 0;
 HEAP32[$this + 4 >> 2] = 0;
 HEAP32[$this + 8 >> 2] = 0;
 HEAP8[$this + 11 >> 0] = 4;
 __ZNSt3__211char_traitsIcE4copyEPcPKcj($this, $s, 4) | 0;
 HEAP8[$ref$tmp$i$i >> 0] = 0;
 __ZNSt3__211char_traitsIcE6assignERcRKc($this + 4 | 0, $ref$tmp$i$i);
 $second = $this + 12 | 0;
 HEAP32[$second >> 2] = 0;
 HEAP32[$second + 4 >> 2] = 0;
 HEAP32[$second + 8 >> 2] = 0;
 $__i$0$i$i = 0;
 while (1) {
  if (($__i$0$i$i | 0) == 3) break;
  HEAP32[$second + ($__i$0$i$i << 2) >> 2] = 0;
  $__i$0$i$i = $__i$0$i$i + 1 | 0;
 }
 STACKTOP = sp;
 return;
}

function __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj4EEERAT__Kc($this, $s) {
 $this = $this | 0;
 $s = $s | 0;
 var $__i$0$i$i = 0, $ref$tmp$i$i = 0, $second = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $ref$tmp$i$i = sp;
 HEAP32[$this >> 2] = 0;
 HEAP32[$this + 4 >> 2] = 0;
 HEAP32[$this + 8 >> 2] = 0;
 HEAP8[$this + 11 >> 0] = 3;
 __ZNSt3__211char_traitsIcE4copyEPcPKcj($this, $s, 3) | 0;
 HEAP8[$ref$tmp$i$i >> 0] = 0;
 __ZNSt3__211char_traitsIcE6assignERcRKc($this + 3 | 0, $ref$tmp$i$i);
 $second = $this + 12 | 0;
 HEAP32[$second >> 2] = 0;
 HEAP32[$second + 4 >> 2] = 0;
 HEAP32[$second + 8 >> 2] = 0;
 $__i$0$i$i = 0;
 while (1) {
  if (($__i$0$i$i | 0) == 3) break;
  HEAP32[$second + ($__i$0$i$i << 2) >> 2] = 0;
  $__i$0$i$i = $__i$0$i$i + 1 | 0;
 }
 STACKTOP = sp;
 return;
}

function __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($agg$result, $this) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 var $0 = 0, $__i$0$i$i$i = 0, $second = 0, $tobool$i$i$i$i$i = 0;
 $second = $this + 12 | 0;
 $0 = HEAP8[$second + 11 >> 0] | 0;
 $tobool$i$i$i$i$i = $0 << 24 >> 24 < 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($this, $tobool$i$i$i$i$i ? HEAP32[$second >> 2] | 0 : $second, $tobool$i$i$i$i$i ? HEAP32[$this + 16 >> 2] | 0 : $0 & 255) | 0;
 HEAP32[$agg$result >> 2] = HEAP32[$this >> 2];
 HEAP32[$agg$result + 4 >> 2] = HEAP32[$this + 4 >> 2];
 HEAP32[$agg$result + 8 >> 2] = HEAP32[$this + 8 >> 2];
 $__i$0$i$i$i = 0;
 while (1) {
  if (($__i$0$i$i$i | 0) == 3) break;
  HEAP32[$this + ($__i$0$i$i$i << 2) >> 2] = 0;
  $__i$0$i$i$i = $__i$0$i$i$i + 1 | 0;
 }
 return;
}

function _arSetDebugMode($handle, $mode) {
 $handle = $handle | 0;
 $mode = $mode | 0;
 var $bwImage = 0, $call = 0, $retval$0 = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $vararg_buffer = sp;
 do if (!$handle) $retval$0 = -1; else if ((HEAP32[$handle >> 2] | 0) == ($mode | 0)) $retval$0 = 0; else {
  HEAP32[$handle >> 2] = $mode;
  if (!$mode) {
   $bwImage = $handle + 4834148 | 0;
   _free(HEAP32[$bwImage >> 2] | 0);
   HEAP32[$bwImage >> 2] = 0;
   $retval$0 = 0;
   break;
  }
  $call = _malloc(Math_imul(HEAP32[$handle + 40 >> 2] | 0, HEAP32[$handle + 36 >> 2] | 0) | 0) | 0;
  HEAP32[$handle + 4834148 >> 2] = $call;
  if (!$call) {
   _arLog(3, 4823, $vararg_buffer);
   _exit(1);
  } else $retval$0 = 0;
 } while (0);
 STACKTOP = sp;
 return $retval$0 | 0;
}

function _arUtilMatMul($s1, $s2, $d) {
 $s1 = $s1 | 0;
 $s2 = $s2 | 0;
 $d = $d | 0;
 var $arrayidx13 = 0, $arrayidx23 = 0, $arrayidx4 = 0, $arrayidx8 = 0, $i$0 = 0, $j$0 = 0;
 $j$0 = 0;
 while (1) {
  if (($j$0 | 0) == 3) break;
  $arrayidx4 = $s1 + ($j$0 << 5) | 0;
  $arrayidx8 = $s1 + ($j$0 << 5) + 8 | 0;
  $arrayidx13 = $s1 + ($j$0 << 5) + 16 | 0;
  $i$0 = 0;
  while (1) {
   if (($i$0 | 0) == 4) break;
   HEAPF64[$d + ($j$0 << 5) + ($i$0 << 3) >> 3] = +HEAPF64[$arrayidx4 >> 3] * +HEAPF64[$s2 + ($i$0 << 3) >> 3] + +HEAPF64[$arrayidx8 >> 3] * +HEAPF64[$s2 + 32 + ($i$0 << 3) >> 3] + +HEAPF64[$arrayidx13 >> 3] * +HEAPF64[$s2 + 64 + ($i$0 << 3) >> 3];
   $i$0 = $i$0 + 1 | 0;
  }
  $arrayidx23 = $d + ($j$0 << 5) + 24 | 0;
  HEAPF64[$arrayidx23 >> 3] = +HEAPF64[$s1 + ($j$0 << 5) + 24 >> 3] + +HEAPF64[$arrayidx23 >> 3];
  $j$0 = $j$0 + 1 | 0;
 }
 return 0;
}

function __ZNSt3__214__split_bufferINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEERNS5_IS7_Lj4096EEEED2Ev($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, $2 = 0, $__end_$i$i$i = 0, $incdec$ptr$i$i$i = 0;
 $0 = HEAP32[$this + 4 >> 2] | 0;
 $__end_$i$i$i = $this + 8 | 0;
 while (1) {
  $1 = HEAP32[$__end_$i$i$i >> 2] | 0;
  if (($1 | 0) == ($0 | 0)) break;
  $incdec$ptr$i$i$i = $1 + -16 | 0;
  HEAP32[$__end_$i$i$i >> 2] = $incdec$ptr$i$i$i;
  __ZNSt3__213__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEED2Ev($incdec$ptr$i$i$i);
 }
 $2 = HEAP32[$this >> 2] | 0;
 if ($2 | 0) __ZN10__cxxabiv112_GLOBAL__N_111short_allocINSt3__26vectorINS0_11string_pairENS1_IS4_Lj4096EEEEELj4096EE10deallocateEPS6_j(HEAP32[$this + 16 >> 2] | 0, $2, (HEAP32[$this + 12 >> 2] | 0) - $2 >> 4);
 return;
}

function __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj8EEERAT__Kc($this) {
 $this = $this | 0;
 var $__i$0$i$i = 0, $ref$tmp$i$i = 0, $second = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $ref$tmp$i$i = sp;
 HEAP32[$this >> 2] = 0;
 HEAP32[$this + 4 >> 2] = 0;
 HEAP32[$this + 8 >> 2] = 0;
 HEAP8[$this + 11 >> 0] = 7;
 __ZNSt3__211char_traitsIcE4copyEPcPKcj($this, 16079, 7) | 0;
 HEAP8[$ref$tmp$i$i >> 0] = 0;
 __ZNSt3__211char_traitsIcE6assignERcRKc($this + 7 | 0, $ref$tmp$i$i);
 $second = $this + 12 | 0;
 HEAP32[$second >> 2] = 0;
 HEAP32[$second + 4 >> 2] = 0;
 HEAP32[$second + 8 >> 2] = 0;
 $__i$0$i$i = 0;
 while (1) {
  if (($__i$0$i$i | 0) == 3) break;
  HEAP32[$second + ($__i$0$i$i << 2) >> 2] = 0;
  $__i$0$i$i = $__i$0$i$i + 1 | 0;
 }
 STACKTOP = sp;
 return;
}

function __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj7EEERAT__Kc($this) {
 $this = $this | 0;
 var $__i$0$i$i = 0, $ref$tmp$i$i = 0, $second = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $ref$tmp$i$i = sp;
 HEAP32[$this >> 2] = 0;
 HEAP32[$this + 4 >> 2] = 0;
 HEAP32[$this + 8 >> 2] = 0;
 HEAP8[$this + 11 >> 0] = 6;
 __ZNSt3__211char_traitsIcE4copyEPcPKcj($this, 16492, 6) | 0;
 HEAP8[$ref$tmp$i$i >> 0] = 0;
 __ZNSt3__211char_traitsIcE6assignERcRKc($this + 6 | 0, $ref$tmp$i$i);
 $second = $this + 12 | 0;
 HEAP32[$second >> 2] = 0;
 HEAP32[$second + 4 >> 2] = 0;
 HEAP32[$second + 8 >> 2] = 0;
 $__i$0$i$i = 0;
 while (1) {
  if (($__i$0$i$i | 0) == 3) break;
  HEAP32[$second + ($__i$0$i$i << 2) >> 2] = 0;
  $__i$0$i$i = $__i$0$i$i + 1 | 0;
 }
 STACKTOP = sp;
 return;
}

function __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj3EEERAT__Kc($this) {
 $this = $this | 0;
 var $__i$0$i$i = 0, $ref$tmp$i$i = 0, $second = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $ref$tmp$i$i = sp;
 HEAP32[$this >> 2] = 0;
 HEAP32[$this + 4 >> 2] = 0;
 HEAP32[$this + 8 >> 2] = 0;
 HEAP8[$this + 11 >> 0] = 2;
 __ZNSt3__211char_traitsIcE4copyEPcPKcj($this, 16303, 2) | 0;
 HEAP8[$ref$tmp$i$i >> 0] = 0;
 __ZNSt3__211char_traitsIcE6assignERcRKc($this + 2 | 0, $ref$tmp$i$i);
 $second = $this + 12 | 0;
 HEAP32[$second >> 2] = 0;
 HEAP32[$second + 4 >> 2] = 0;
 HEAP32[$second + 8 >> 2] = 0;
 $__i$0$i$i = 0;
 while (1) {
  if (($__i$0$i$i | 0) == 3) break;
  HEAP32[$second + ($__i$0$i$i << 2) >> 2] = 0;
  $__i$0$i$i = $__i$0$i$i + 1 | 0;
 }
 STACKTOP = sp;
 return;
}

function _fclose($f) {
 $f = $f | 0;
 var $$pre = 0, $2 = 0, $5 = 0, $8 = 0, $call1 = 0, $call18 = 0, $cond = 0, $or = 0, $tobool = 0;
 if ((HEAP32[$f + 76 >> 2] | 0) > -1) $cond = ___lockfile($f) | 0; else $cond = 0;
 ___unlist_locked_file($f);
 $tobool = (HEAP32[$f >> 2] & 1 | 0) != 0;
 if (!$tobool) {
  $call1 = ___ofl_lock() | 0;
  $2 = HEAP32[$f + 52 >> 2] | 0;
  $$pre = $f + 56 | 0;
  if ($2 | 0) HEAP32[$2 + 56 >> 2] = HEAP32[$$pre >> 2];
  $5 = HEAP32[$$pre >> 2] | 0;
  if ($5 | 0) HEAP32[$5 + 52 >> 2] = $2;
  if ((HEAP32[$call1 >> 2] | 0) == ($f | 0)) HEAP32[$call1 >> 2] = $5;
  ___ofl_unlock();
 }
 $call18 = _fflush($f) | 0;
 $or = FUNCTION_TABLE_ii[HEAP32[$f + 12 >> 2] & 31]($f) | 0 | $call18;
 $8 = HEAP32[$f + 92 >> 2] | 0;
 if ($8 | 0) _free($8);
 if ($tobool) {
  if ($cond | 0) ___unlockfile($f);
 } else _free($f);
 return $or | 0;
}

function _detectMarker($id) {
 $id = $id | 0;
 var $call7 = 0, $id$addr = 0, $retval$0 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $id$addr = sp;
 HEAP32[$id$addr >> 2] = $id;
 if (!(__ZNSt3__212__hash_tableINS_17__hash_value_typeIi12arControllerEENS_22__unordered_map_hasherIiS3_NS_4hashIiEELb1EEENS_21__unordered_map_equalIiS3_NS_8equal_toIiEELb1EEENS_9allocatorIS3_EEE4findIiEENS_15__hash_iteratorIPNS_11__hash_nodeIS3_PvEEEERKT_(17144, $id$addr) | 0)) $retval$0 = HEAP32[421] | 0; else {
  $call7 = __ZNSt3__213unordered_mapIi12arControllerNS_4hashIiEENS_8equal_toIiEENS_9allocatorINS_4pairIKiS1_EEEEEixERS8_(17144, $id$addr) | 0;
  $retval$0 = _arDetectMarker(HEAP32[$call7 + 212 >> 2] | 0, HEAP32[$call7 + 196 >> 2] | 0) | 0;
 }
 STACKTOP = sp;
 return $retval$0 | 0;
}

function __ZN10emscripten8internal7InvokerIiJiiiEE6invokeEPFiiiiEiii($fn, $args, $args1, $args3) {
 $fn = $fn | 0;
 $args = $args | 0;
 $args1 = $args1 | 0;
 $args3 = $args3 | 0;
 var $call = 0, $call5 = 0, $call6 = 0, $call7 = 0, $call8 = 0, $ref$tmp = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $ref$tmp = sp;
 $call = __ZN10emscripten8internal11BindingTypeIiE12fromWireTypeEi($args) | 0;
 $call5 = __ZN10emscripten8internal11BindingTypeIiE12fromWireTypeEi($args1) | 0;
 $call6 = __ZN10emscripten8internal11BindingTypeIiE12fromWireTypeEi($args3) | 0;
 $call7 = FUNCTION_TABLE_iiii[$fn & 15]($call, $call5, $call6) | 0;
 HEAP32[$ref$tmp >> 2] = $call7;
 $call8 = __ZN10emscripten8internal11BindingTypeIiE10toWireTypeERKi($ref$tmp) | 0;
 STACKTOP = sp;
 return $call8 | 0;
}

function __ZN10emscripten8internal7InvokerIiJNSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEEE6invokeEPFiS8_EPNS0_11BindingTypeIS8_EUt_E($fn, $args) {
 $fn = $fn | 0;
 $args = $args | 0;
 var $agg$tmp = 0, $call = 0, $call2 = 0, $ref$tmp = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $ref$tmp = sp + 12 | 0;
 $agg$tmp = sp;
 __ZN10emscripten8internal11BindingTypeINSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEE12fromWireTypeEPNS9_Ut_E($agg$tmp, $args);
 $call = FUNCTION_TABLE_ii[$fn & 31]($agg$tmp) | 0;
 HEAP32[$ref$tmp >> 2] = $call;
 $call2 = __ZN10emscripten8internal11BindingTypeIiE10toWireTypeERKi($ref$tmp) | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($agg$tmp);
 STACKTOP = sp;
 return $call2 | 0;
}

function _realloc($oldmem, $bytes) {
 $oldmem = $oldmem | 0;
 $bytes = $bytes | 0;
 var $0 = 0, $call12 = 0, $call3 = 0, $call7 = 0, $mem$1 = 0, $sub = 0;
 if (!$oldmem) {
  $mem$1 = _malloc($bytes) | 0;
  return $mem$1 | 0;
 }
 if ($bytes >>> 0 > 4294967231) {
  $call3 = ___errno_location() | 0;
  HEAP32[$call3 >> 2] = 12;
  $mem$1 = 0;
  return $mem$1 | 0;
 }
 $call7 = _try_realloc_chunk($oldmem + -8 | 0, $bytes >>> 0 < 11 ? 16 : $bytes + 11 & -8) | 0;
 if ($call7 | 0) {
  $mem$1 = $call7 + 8 | 0;
  return $mem$1 | 0;
 }
 $call12 = _malloc($bytes) | 0;
 if (!$call12) {
  $mem$1 = 0;
  return $mem$1 | 0;
 }
 $0 = HEAP32[$oldmem + -4 >> 2] | 0;
 $sub = ($0 & -8) - (($0 & 3 | 0) == 0 ? 8 : 4) | 0;
 _memcpy($call12 | 0, $oldmem | 0, ($sub >>> 0 < $bytes >>> 0 ? $sub : $bytes) | 0) | 0;
 _free($oldmem);
 $mem$1 = $call12;
 return $mem$1 | 0;
}

function _getMarkerNum($id) {
 $id = $id | 0;
 var $arhandle = 0, $id$addr = 0, $retval$0$in = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $id$addr = sp;
 HEAP32[$id$addr >> 2] = $id;
 if (!(__ZNSt3__212__hash_tableINS_17__hash_value_typeIi12arControllerEENS_22__unordered_map_hasherIiS3_NS_4hashIiEELb1EEENS_21__unordered_map_equalIiS3_NS_8equal_toIiEELb1EEENS_9allocatorIS3_EEE4findIiEENS_15__hash_iteratorIPNS_11__hash_nodeIS3_PvEEEERKT_(17144, $id$addr) | 0)) $retval$0$in = 1684; else {
  $arhandle = (__ZNSt3__213unordered_mapIi12arControllerNS_4hashIiEENS_8equal_toIiEENS_9allocatorINS_4pairIKiS1_EEEEEixERS8_(17144, $id$addr) | 0) + 212 | 0;
  $retval$0$in = (HEAP32[$arhandle >> 2] | 0) + 44 | 0;
 }
 STACKTOP = sp;
 return HEAP32[$retval$0$in >> 2] | 0;
}

function _setProjectionNearPlane($id, $projectionNearPlane) {
 $id = $id | 0;
 $projectionNearPlane = +$projectionNearPlane;
 var $id$addr = 0, $nearPlane = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $id$addr = sp;
 HEAP32[$id$addr >> 2] = $id;
 if (__ZNSt3__212__hash_tableINS_17__hash_value_typeIi12arControllerEENS_22__unordered_map_hasherIiS3_NS_4hashIiEELb1EEENS_21__unordered_map_equalIiS3_NS_8equal_toIiEELb1EEENS_9allocatorIS3_EEE4findIiEENS_15__hash_iteratorIPNS_11__hash_nodeIS3_PvEEEERKT_(17144, $id$addr) | 0) {
  $nearPlane = (__ZNSt3__213unordered_mapIi12arControllerNS_4hashIiEENS_8equal_toIiEENS_9allocatorINS_4pairIKiS1_EEEEEixERS8_(17144, $id$addr) | 0) + 232 | 0;
  HEAPF64[$nearPlane >> 3] = $projectionNearPlane;
 }
 STACKTOP = sp;
 return;
}

function __ZNSt3__214__split_bufferI12multi_markerRNS_9allocatorIS1_EEEC2EjjS4_($this, $__cap, $__start, $__a) {
 $this = $this | 0;
 $__cap = $__cap | 0;
 $__start = $__start | 0;
 $__a = $__a | 0;
 var $add$ptr = 0, $cond = 0, $exception$i$i$i = 0;
 HEAP32[$this + 12 >> 2] = 0;
 HEAP32[$this + 16 >> 2] = $__a;
 do if (!$__cap) $cond = 0; else if ($__cap >>> 0 > 536870911) {
  $exception$i$i$i = ___cxa_allocate_exception(8) | 0;
  __ZNSt11logic_errorC2EPKc($exception$i$i$i, 7628);
  HEAP32[$exception$i$i$i >> 2] = 3176;
  ___cxa_throw($exception$i$i$i | 0, 272, 6);
 } else {
  $cond = __Znwj($__cap << 3) | 0;
  break;
 } while (0);
 HEAP32[$this >> 2] = $cond;
 $add$ptr = $cond + ($__start << 3) | 0;
 HEAP32[$this + 8 >> 2] = $add$ptr;
 HEAP32[$this + 4 >> 2] = $add$ptr;
 HEAP32[$this + 12 >> 2] = $cond + ($__cap << 3);
 return;
}

function __ZNSt3__213__vector_baseINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEENS5_IS7_Lj4096EEEED2Ev($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, $2 = 0, $__end_$i$i = 0, $incdec$ptr$i$i = 0;
 $0 = HEAP32[$this >> 2] | 0;
 if ($0 | 0) {
  $__end_$i$i = $this + 4 | 0;
  while (1) {
   $1 = HEAP32[$__end_$i$i >> 2] | 0;
   if (($1 | 0) == ($0 | 0)) break;
   $incdec$ptr$i$i = $1 + -16 | 0;
   HEAP32[$__end_$i$i >> 2] = $incdec$ptr$i$i;
   __ZNSt3__213__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEED2Ev($incdec$ptr$i$i);
  }
  $2 = HEAP32[$this >> 2] | 0;
  __ZN10__cxxabiv112_GLOBAL__N_111short_allocINSt3__26vectorINS0_11string_pairENS1_IS4_Lj4096EEEEELj4096EE10deallocateEPS6_j($this + 12 | 0, $2, (HEAP32[$this + 8 >> 2] | 0) - $2 >> 4);
 }
 return;
}

function _arMatrixDup($dest, $source) {
 $dest = $dest | 0;
 $source = $source | 0;
 var $0 = 0, $2 = 0, $add = 0, $c$0 = 0, $mul = 0, $r$0 = 0, $retval$0 = 0;
 $0 = HEAP32[$dest + 4 >> 2] | 0;
 L1 : do if (($0 | 0) == (HEAP32[$source + 4 >> 2] | 0)) {
  $2 = HEAP32[$dest + 8 >> 2] | 0;
  if (($2 | 0) == (HEAP32[$source + 8 >> 2] | 0)) {
   $r$0 = 0;
   while (1) {
    if (($r$0 | 0) >= ($0 | 0)) {
     $retval$0 = 0;
     break L1;
    }
    $mul = Math_imul($r$0, $2) | 0;
    $c$0 = 0;
    while (1) {
     if (($c$0 | 0) >= ($2 | 0)) break;
     $add = $c$0 + $mul | 0;
     HEAPF64[(HEAP32[$dest >> 2] | 0) + ($add << 3) >> 3] = +HEAPF64[(HEAP32[$source >> 2] | 0) + ($add << 3) >> 3];
     $c$0 = $c$0 + 1 | 0;
    }
    $r$0 = $r$0 + 1 | 0;
   }
  } else $retval$0 = -1;
 } else $retval$0 = -1; while (0);
 return $retval$0 | 0;
}

function _getProcessingImage($id) {
 $id = $id | 0;
 var $arhandle = 0, $id$addr = 0, $retval$0 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $id$addr = sp;
 HEAP32[$id$addr >> 2] = $id;
 if (!(__ZNSt3__212__hash_tableINS_17__hash_value_typeIi12arControllerEENS_22__unordered_map_hasherIiS3_NS_4hashIiEELb1EEENS_21__unordered_map_equalIiS3_NS_8equal_toIiEELb1EEENS_9allocatorIS3_EEE4findIiEENS_15__hash_iteratorIPNS_11__hash_nodeIS3_PvEEEERKT_(17144, $id$addr) | 0)) $retval$0 = 0; else {
  $arhandle = (__ZNSt3__213unordered_mapIi12arControllerNS_4hashIiEENS_8equal_toIiEENS_9allocatorINS_4pairIKiS1_EEEEEixERS8_(17144, $id$addr) | 0) + 212 | 0;
  $retval$0 = HEAP32[(HEAP32[$arhandle >> 2] | 0) + 4834148 >> 2] | 0;
 }
 STACKTOP = sp;
 return $retval$0 | 0;
}

function _getMultiMarkerCount($id) {
 $id = $id | 0;
 var $call7 = 0, $id$addr = 0, $retval$0 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $id$addr = sp;
 HEAP32[$id$addr >> 2] = $id;
 if (!(__ZNSt3__212__hash_tableINS_17__hash_value_typeIi12arControllerEENS_22__unordered_map_hasherIiS3_NS_4hashIiEELb1EEENS_21__unordered_map_equalIiS3_NS_8equal_toIiEELb1EEENS_9allocatorIS3_EEE4findIiEENS_15__hash_iteratorIPNS_11__hash_nodeIS3_PvEEEERKT_(17144, $id$addr) | 0)) $retval$0 = -1; else {
  $call7 = __ZNSt3__213unordered_mapIi12arControllerNS_4hashIiEENS_8equal_toIiEENS_9allocatorINS_4pairIKiS1_EEEEEixERS8_(17144, $id$addr) | 0;
  $retval$0 = (HEAP32[$call7 + 252 >> 2] | 0) - (HEAP32[$call7 + 248 >> 2] | 0) >> 3;
 }
 STACKTOP = sp;
 return $retval$0 | 0;
}

function __ZN10emscripten8functionIiJiNSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEEJEEEvPKcPFT_DpT0_EDpT1_($name, $fn) {
 $name = $name | 0;
 $fn = $fn | 0;
 var $args = 0, $call = 0, $call1 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $args = sp;
 $call = __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJiiNSt3__212basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEEE8getCountEv($args) | 0;
 $call1 = __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJiiNSt3__212basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEEE8getTypesEv($args) | 0;
 __embind_register_function($name | 0, $call | 0, $call1 | 0, __ZN10emscripten8internal19getGenericSignatureIJiiiiEEEPKcv() | 0, 12, $fn | 0);
 STACKTOP = sp;
 return;
}

function _setProjectionFarPlane($id, $projectionFarPlane) {
 $id = $id | 0;
 $projectionFarPlane = +$projectionFarPlane;
 var $farPlane = 0, $id$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $id$addr = sp;
 HEAP32[$id$addr >> 2] = $id;
 if (__ZNSt3__212__hash_tableINS_17__hash_value_typeIi12arControllerEENS_22__unordered_map_hasherIiS3_NS_4hashIiEELb1EEENS_21__unordered_map_equalIiS3_NS_8equal_toIiEELb1EEENS_9allocatorIS3_EEE4findIiEENS_15__hash_iteratorIPNS_11__hash_nodeIS3_PvEEEERKT_(17144, $id$addr) | 0) {
  $farPlane = (__ZNSt3__213unordered_mapIi12arControllerNS_4hashIiEENS_8equal_toIiEENS_9allocatorINS_4pairIKiS1_EEEEEixERS8_(17144, $id$addr) | 0) + 240 | 0;
  HEAPF64[$farPlane >> 3] = $projectionFarPlane;
 }
 STACKTOP = sp;
 return;
}

function __ZN10emscripten8functionIiJNSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEEJEEEvPKcPFT_DpT0_EDpT1_($name, $fn) {
 $name = $name | 0;
 $fn = $fn | 0;
 var $args = 0, $call = 0, $call1 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $args = sp;
 $call = __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJiNSt3__212basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEEE8getCountEv($args) | 0;
 $call1 = __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJiNSt3__212basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEEE8getTypesEv($args) | 0;
 __embind_register_function($name | 0, $call | 0, $call1 | 0, __ZN10emscripten8internal19getGenericSignatureIJiiiEEEPKcv() | 0, 11, $fn | 0);
 STACKTOP = sp;
 return;
}

function __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($this, $0) {
 $this = $this | 0;
 $0 = $0 | 0;
 var $__i$0$i$i = 0, $__i$0$i$i3 = 0, $second = 0, $second3 = 0;
 HEAP32[$this >> 2] = HEAP32[$0 >> 2];
 HEAP32[$this + 4 >> 2] = HEAP32[$0 + 4 >> 2];
 HEAP32[$this + 8 >> 2] = HEAP32[$0 + 8 >> 2];
 $__i$0$i$i = 0;
 while (1) {
  if (($__i$0$i$i | 0) == 3) break;
  HEAP32[$0 + ($__i$0$i$i << 2) >> 2] = 0;
  $__i$0$i$i = $__i$0$i$i + 1 | 0;
 }
 $second = $this + 12 | 0;
 $second3 = $0 + 12 | 0;
 HEAP32[$second >> 2] = HEAP32[$second3 >> 2];
 HEAP32[$second + 4 >> 2] = HEAP32[$second3 + 4 >> 2];
 HEAP32[$second + 8 >> 2] = HEAP32[$second3 + 8 >> 2];
 $__i$0$i$i3 = 0;
 while (1) {
  if (($__i$0$i$i3 | 0) == 3) break;
  HEAP32[$second3 + ($__i$0$i$i3 << 2) >> 2] = 0;
  $__i$0$i$i3 = $__i$0$i$i3 + 1 | 0;
 }
 return;
}

function _getProjectionNearPlane($id) {
 $id = $id | 0;
 var $id$addr = 0, $nearPlane = 0, $retval$0 = 0.0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $id$addr = sp;
 HEAP32[$id$addr >> 2] = $id;
 if (!(__ZNSt3__212__hash_tableINS_17__hash_value_typeIi12arControllerEENS_22__unordered_map_hasherIiS3_NS_4hashIiEELb1EEENS_21__unordered_map_equalIiS3_NS_8equal_toIiEELb1EEENS_9allocatorIS3_EEE4findIiEENS_15__hash_iteratorIPNS_11__hash_nodeIS3_PvEEEERKT_(17144, $id$addr) | 0)) $retval$0 = -1.0; else {
  $nearPlane = (__ZNSt3__213unordered_mapIi12arControllerNS_4hashIiEENS_8equal_toIiEENS_9allocatorINS_4pairIKiS1_EEEEEixERS8_(17144, $id$addr) | 0) + 232 | 0;
  $retval$0 = +HEAPF64[$nearPlane >> 3];
 }
 STACKTOP = sp;
 return +$retval$0;
}

function _strncat($d, $s, $n) {
 $d = $d | 0;
 $s = $s | 0;
 $n = $n | 0;
 var $0 = 0, $add$ptr = 0, $d$addr$0$lcssa = 0, $d$addr$011 = 0, $incdec$ptr2 = 0, $n$addr$010 = 0, $s$addr$09 = 0;
 $add$ptr = $d + (_strlen($d) | 0) | 0;
 L1 : do if (!$n) $d$addr$0$lcssa = $add$ptr; else {
  $d$addr$011 = $add$ptr;
  $n$addr$010 = $n;
  $s$addr$09 = $s;
  while (1) {
   $0 = HEAP8[$s$addr$09 >> 0] | 0;
   if (!($0 << 24 >> 24)) {
    $d$addr$0$lcssa = $d$addr$011;
    break L1;
   }
   $n$addr$010 = $n$addr$010 + -1 | 0;
   $incdec$ptr2 = $d$addr$011 + 1 | 0;
   HEAP8[$d$addr$011 >> 0] = $0;
   if (!$n$addr$010) {
    $d$addr$0$lcssa = $incdec$ptr2;
    break;
   } else {
    $d$addr$011 = $incdec$ptr2;
    $s$addr$09 = $s$addr$09 + 1 | 0;
   }
  }
 } while (0);
 HEAP8[$d$addr$0$lcssa >> 0] = 0;
 return $d | 0;
}

function _arParamObserv2IdealLTf($paramLTf, $ox, $oy, $ix, $iy) {
 $paramLTf = $paramLTf | 0;
 $ox = +$ox;
 $oy = +$oy;
 $ix = $ix | 0;
 $iy = $iy | 0;
 var $2 = 0, $add$ptr = 0, $add1 = 0, $add4 = 0, $retval$0 = 0;
 $add1 = (HEAP32[$paramLTf + 16 >> 2] | 0) + ~~($ox + .5) | 0;
 $add4 = (HEAP32[$paramLTf + 20 >> 2] | 0) + ~~($oy + .5) | 0;
 if (($add1 | 0) < 0) $retval$0 = -1; else {
  $2 = HEAP32[$paramLTf + 8 >> 2] | 0;
  if (($add4 | 0) < 0 | ($add1 | 0) >= ($2 | 0)) $retval$0 = -1; else if (($add4 | 0) < (HEAP32[$paramLTf + 12 >> 2] | 0)) {
   $add$ptr = (HEAP32[$paramLTf + 4 >> 2] | 0) + ((Math_imul($2, $add4) | 0) + $add1 << 1 << 2) | 0;
   HEAP32[$ix >> 2] = HEAP32[$add$ptr >> 2];
   HEAP32[$iy >> 2] = HEAP32[$add$ptr + 4 >> 2];
   $retval$0 = 0;
  } else $retval$0 = -1;
 }
 return $retval$0 | 0;
}

function _getProjectionFarPlane($id) {
 $id = $id | 0;
 var $farPlane = 0, $id$addr = 0, $retval$0 = 0.0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $id$addr = sp;
 HEAP32[$id$addr >> 2] = $id;
 if (!(__ZNSt3__212__hash_tableINS_17__hash_value_typeIi12arControllerEENS_22__unordered_map_hasherIiS3_NS_4hashIiEELb1EEENS_21__unordered_map_equalIiS3_NS_8equal_toIiEELb1EEENS_9allocatorIS3_EEE4findIiEENS_15__hash_iteratorIPNS_11__hash_nodeIS3_PvEEEERKT_(17144, $id$addr) | 0)) $retval$0 = -1.0; else {
  $farPlane = (__ZNSt3__213unordered_mapIi12arControllerNS_4hashIiEENS_8equal_toIiEENS_9allocatorINS_4pairIKiS1_EEEEEixERS8_(17144, $id$addr) | 0) + 240 | 0;
  $retval$0 = +HEAPF64[$farPlane >> 3];
 }
 STACKTOP = sp;
 return +$retval$0;
}

function ___fflush_unlocked($f) {
 $f = $f | 0;
 var $4 = 0, $5 = 0, $rend = 0, $retval$0 = 0, $rpos = 0, $wbase = 0, $wpos = 0, label = 0;
 $wpos = $f + 20 | 0;
 $wbase = $f + 28 | 0;
 if ((HEAP32[$wpos >> 2] | 0) >>> 0 > (HEAP32[$wbase >> 2] | 0) >>> 0) {
  FUNCTION_TABLE_iiii[HEAP32[$f + 36 >> 2] & 15]($f, 0, 0) | 0;
  if (!(HEAP32[$wpos >> 2] | 0)) $retval$0 = -1; else label = 3;
 } else label = 3;
 if ((label | 0) == 3) {
  $rpos = $f + 4 | 0;
  $4 = HEAP32[$rpos >> 2] | 0;
  $rend = $f + 8 | 0;
  $5 = HEAP32[$rend >> 2] | 0;
  if ($4 >>> 0 < $5 >>> 0) FUNCTION_TABLE_iiii[HEAP32[$f + 40 >> 2] & 15]($f, $4 - $5 | 0, 1) | 0;
  HEAP32[$f + 16 >> 2] = 0;
  HEAP32[$wbase >> 2] = 0;
  HEAP32[$wpos >> 2] = 0;
  HEAP32[$rend >> 2] = 0;
  HEAP32[$rpos >> 2] = 0;
  $retval$0 = 0;
 }
 return $retval$0 | 0;
}

function _arParamIdeal2ObservLTf($paramLTf, $ix, $iy, $ox, $oy) {
 $paramLTf = $paramLTf | 0;
 $ix = +$ix;
 $iy = +$iy;
 $ox = $ox | 0;
 $oy = $oy | 0;
 var $2 = 0, $add$ptr = 0, $add1 = 0, $add4 = 0, $retval$0 = 0;
 $add1 = (HEAP32[$paramLTf + 16 >> 2] | 0) + ~~($ix + .5) | 0;
 $add4 = (HEAP32[$paramLTf + 20 >> 2] | 0) + ~~($iy + .5) | 0;
 if (($add1 | 0) < 0) $retval$0 = -1; else {
  $2 = HEAP32[$paramLTf + 8 >> 2] | 0;
  if (($add4 | 0) < 0 | ($add1 | 0) >= ($2 | 0)) $retval$0 = -1; else if (($add4 | 0) < (HEAP32[$paramLTf + 12 >> 2] | 0)) {
   $add$ptr = (HEAP32[$paramLTf >> 2] | 0) + ((Math_imul($2, $add4) | 0) + $add1 << 1 << 2) | 0;
   HEAP32[$ox >> 2] = HEAP32[$add$ptr >> 2];
   HEAP32[$oy >> 2] = HEAP32[$add$ptr + 4 >> 2];
   $retval$0 = 0;
  } else $retval$0 = -1;
 }
 return $retval$0 | 0;
}

function _strtok($s, $sep) {
 $s = $s | 0;
 $sep = $sep | 0;
 var $0 = 0, $add$ptr = 0, $add$ptr6 = 0, $retval$0 = 0, $s$addr$0 = 0, label = 0;
 if (!$s) {
  $0 = HEAP32[4442] | 0;
  if (!$0) $retval$0 = 0; else {
   $s$addr$0 = $0;
   label = 3;
  }
 } else {
  $s$addr$0 = $s;
  label = 3;
 }
 do if ((label | 0) == 3) {
  $add$ptr = $s$addr$0 + (_strspn($s$addr$0, $sep) | 0) | 0;
  if (!(HEAP8[$add$ptr >> 0] | 0)) {
   HEAP32[4442] = 0;
   $retval$0 = 0;
   break;
  }
  $add$ptr6 = $add$ptr + (_strcspn($add$ptr, $sep) | 0) | 0;
  HEAP32[4442] = $add$ptr6;
  if (!(HEAP8[$add$ptr6 >> 0] | 0)) {
   HEAP32[4442] = 0;
   $retval$0 = $add$ptr;
   break;
  } else {
   HEAP32[4442] = $add$ptr6 + 1;
   HEAP8[$add$ptr6 >> 0] = 0;
   $retval$0 = $add$ptr;
   break;
  }
 } while (0);
 return $retval$0 | 0;
}

function _setMatrixCodeType($id, $type) {
 $id = $id | 0;
 $type = $type | 0;
 var $arhandle = 0, $id$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $id$addr = sp;
 HEAP32[$id$addr >> 2] = $id;
 if (__ZNSt3__212__hash_tableINS_17__hash_value_typeIi12arControllerEENS_22__unordered_map_hasherIiS3_NS_4hashIiEELb1EEENS_21__unordered_map_equalIiS3_NS_8equal_toIiEELb1EEENS_9allocatorIS3_EEE4findIiEENS_15__hash_iteratorIPNS_11__hash_nodeIS3_PvEEEERKT_(17144, $id$addr) | 0) {
  $arhandle = (__ZNSt3__213unordered_mapIi12arControllerNS_4hashIiEENS_8equal_toIiEENS_9allocatorINS_4pairIKiS1_EEEEEixERS8_(17144, $id$addr) | 0) + 212 | 0;
  _arSetMatrixCodeType(HEAP32[$arhandle >> 2] | 0, $type) | 0;
 }
 STACKTOP = sp;
 return;
}

function _CENTER($inout, $mean) {
 $inout = $inout | 0;
 $mean = $mean | 0;
 var $0 = 0, $1 = 0, $i$0 = 0, $j$0 = 0, $m$0 = 0, $m$1 = 0, $retval$0 = 0, $v$0 = 0;
 $0 = HEAP32[$inout + 4 >> 2] | 0;
 $1 = HEAP32[$inout + 8 >> 2] | 0;
 L1 : do if ((HEAP32[$mean + 4 >> 2] | 0) == ($1 | 0)) {
  $i$0 = 0;
  $m$0 = HEAP32[$inout >> 2] | 0;
  while (1) {
   if (($i$0 | 0) >= ($0 | 0)) {
    $retval$0 = 0;
    break L1;
   }
   $j$0 = 0;
   $m$1 = $m$0;
   $v$0 = HEAP32[$mean >> 2] | 0;
   while (1) {
    if (($j$0 | 0) >= ($1 | 0)) break;
    HEAPF64[$m$1 >> 3] = +HEAPF64[$m$1 >> 3] - +HEAPF64[$v$0 >> 3];
    $j$0 = $j$0 + 1 | 0;
    $m$1 = $m$1 + 8 | 0;
    $v$0 = $v$0 + 8 | 0;
   }
   $i$0 = $i$0 + 1 | 0;
   $m$0 = $m$1;
  }
 } else $retval$0 = -1; while (0);
 return $retval$0 | 0;
}

function __ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($this, $info, $dst_ptr, $current_ptr, $path_below, $use_strcmp) {
 $this = $this | 0;
 $info = $info | 0;
 $dst_ptr = $dst_ptr | 0;
 $current_ptr = $current_ptr | 0;
 $path_below = $path_below | 0;
 $use_strcmp = $use_strcmp | 0;
 var $1 = 0;
 if (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($this, HEAP32[$info + 8 >> 2] | 0, $use_strcmp) | 0) __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i(0, $info, $dst_ptr, $current_ptr, $path_below); else {
  $1 = HEAP32[$this + 8 >> 2] | 0;
  FUNCTION_TABLE_viiiiii[HEAP32[(HEAP32[$1 >> 2] | 0) + 20 >> 2] & 3]($1, $info, $dst_ptr, $current_ptr, $path_below, $use_strcmp);
 }
 return;
}

function __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ENSt3__212basic_stringIcNS2_11char_traitsIcEENS0_12malloc_allocIcEEEE($this, $f) {
 $this = $this | 0;
 $f = $f | 0;
 var $__i$0$i$i = 0, $__i$0$i$i2 = 0, $second = 0;
 HEAP32[$this >> 2] = HEAP32[$f >> 2];
 HEAP32[$this + 4 >> 2] = HEAP32[$f + 4 >> 2];
 HEAP32[$this + 8 >> 2] = HEAP32[$f + 8 >> 2];
 $__i$0$i$i2 = 0;
 while (1) {
  if (($__i$0$i$i2 | 0) == 3) break;
  HEAP32[$f + ($__i$0$i$i2 << 2) >> 2] = 0;
  $__i$0$i$i2 = $__i$0$i$i2 + 1 | 0;
 }
 $second = $this + 12 | 0;
 HEAP32[$second >> 2] = 0;
 HEAP32[$second + 4 >> 2] = 0;
 HEAP32[$second + 8 >> 2] = 0;
 $__i$0$i$i = 0;
 while (1) {
  if (($__i$0$i$i | 0) == 3) break;
  HEAP32[$second + ($__i$0$i$i << 2) >> 2] = 0;
  $__i$0$i$i = $__i$0$i$i + 1 | 0;
 }
 return;
}

function __ZNSt3__214__split_bufferINS_6vectorINS1_IN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEENS5_IS7_Lj4096EEEEERNS5_IS9_Lj4096EEEEC2EjjSB_($this, $__cap, $__start, $__a) {
 $this = $this | 0;
 $__cap = $__cap | 0;
 $__start = $__start | 0;
 $__a = $__a | 0;
 var $add$ptr = 0, $cond = 0;
 HEAP32[$this + 12 >> 2] = 0;
 HEAP32[$this + 16 >> 2] = $__a;
 if (!$__cap) $cond = 0; else $cond = __ZN10__cxxabiv112_GLOBAL__N_111short_allocINSt3__26vectorINS3_INS0_11string_pairENS1_IS4_Lj4096EEEEENS1_IS6_Lj4096EEEEELj4096EE8allocateEj($__a, $__cap) | 0;
 HEAP32[$this >> 2] = $cond;
 $add$ptr = $cond + ($__start << 4) | 0;
 HEAP32[$this + 8 >> 2] = $add$ptr;
 HEAP32[$this + 4 >> 2] = $add$ptr;
 HEAP32[$this + 12 >> 2] = $cond + ($__cap << 4);
 return;
}

function ___toread($f) {
 $f = $f | 0;
 var $4 = 0, $add$ptr = 0, $conv = 0, $mode = 0, $retval$0 = 0, $wbase = 0, $wpos = 0;
 $mode = $f + 74 | 0;
 $conv = HEAP8[$mode >> 0] | 0;
 HEAP8[$mode >> 0] = $conv + 255 | $conv;
 $wpos = $f + 20 | 0;
 $wbase = $f + 28 | 0;
 if ((HEAP32[$wpos >> 2] | 0) >>> 0 > (HEAP32[$wbase >> 2] | 0) >>> 0) FUNCTION_TABLE_iiii[HEAP32[$f + 36 >> 2] & 15]($f, 0, 0) | 0;
 HEAP32[$f + 16 >> 2] = 0;
 HEAP32[$wbase >> 2] = 0;
 HEAP32[$wpos >> 2] = 0;
 $4 = HEAP32[$f >> 2] | 0;
 if (!($4 & 4)) {
  $add$ptr = (HEAP32[$f + 44 >> 2] | 0) + (HEAP32[$f + 48 >> 2] | 0) | 0;
  HEAP32[$f + 8 >> 2] = $add$ptr;
  HEAP32[$f + 4 >> 2] = $add$ptr;
  $retval$0 = $4 << 27 >> 31;
 } else {
  HEAP32[$f >> 2] = $4 | 32;
  $retval$0 = -1;
 }
 return $retval$0 | 0;
}

function __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($this, $info, $dst_ptr, $current_ptr, $path_below, $use_strcmp) {
 $this = $this | 0;
 $info = $info | 0;
 $dst_ptr = $dst_ptr | 0;
 $current_ptr = $current_ptr | 0;
 $path_below = $path_below | 0;
 $use_strcmp = $use_strcmp | 0;
 var $0 = 0, $3 = 0, $offset_to_base$0 = 0, $shr = 0;
 $0 = HEAP32[$this + 4 >> 2] | 0;
 $shr = $0 >> 8;
 if (!($0 & 1)) $offset_to_base$0 = $shr; else $offset_to_base$0 = HEAP32[(HEAP32[$current_ptr >> 2] | 0) + $shr >> 2] | 0;
 $3 = HEAP32[$this >> 2] | 0;
 FUNCTION_TABLE_viiiiii[HEAP32[(HEAP32[$3 >> 2] | 0) + 20 >> 2] & 3]($3, $info, $dst_ptr, $current_ptr + $offset_to_base$0 | 0, $0 & 2 | 0 ? $path_below : 2, $use_strcmp);
 return;
}

function _pad_684($f, $c, $w, $l, $fl) {
 $f = $f | 0;
 $c = $c | 0;
 $w = $w | 0;
 $l = $l | 0;
 $fl = $fl | 0;
 var $1 = 0, $l$addr$0$lcssa = 0, $l$addr$09 = 0, $pad = 0, $sub = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 256 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(256);
 $pad = sp;
 if (($w | 0) > ($l | 0) & ($fl & 73728 | 0) == 0) {
  $sub = $w - $l | 0;
  _memset($pad | 0, $c | 0, ($sub >>> 0 < 256 ? $sub : 256) | 0) | 0;
  if ($sub >>> 0 > 255) {
   $1 = $w - $l | 0;
   $l$addr$09 = $sub;
   do {
    _out($f, $pad, 256);
    $l$addr$09 = $l$addr$09 + -256 | 0;
   } while ($l$addr$09 >>> 0 > 255);
   $l$addr$0$lcssa = $1 & 255;
  } else $l$addr$0$lcssa = $sub;
  _out($f, $pad, $l$addr$0$lcssa);
 }
 STACKTOP = sp;
 return;
}

function _arImageProcLumaHist($ipi, $dataPtr) {
 $ipi = $ipi | 0;
 $dataPtr = $dataPtr | 0;
 var $0 = 0, $add$ptr = 0, $arrayidx = 0, $p$0 = 0, $retval$0 = 0;
 L1 : do if (($ipi | 0) != 0 & ($dataPtr | 0) != 0) if ((_arImageProcLuma($ipi, $dataPtr) | 0) < 0) $retval$0 = -1; else {
  _memset($ipi + 16 | 0, 0, 1024) | 0;
  $0 = HEAP32[$ipi >> 2] | 0;
  $add$ptr = $0 + (Math_imul(HEAP32[$ipi + 12 >> 2] | 0, HEAP32[$ipi + 8 >> 2] | 0) | 0) | 0;
  $p$0 = $0;
  while (1) {
   if ($p$0 >>> 0 >= $add$ptr >>> 0) {
    $retval$0 = 0;
    break L1;
   }
   $arrayidx = $ipi + 16 + ((HEAPU8[$p$0 >> 0] | 0) << 2) | 0;
   HEAP32[$arrayidx >> 2] = (HEAP32[$arrayidx >> 2] | 0) + 1;
   $p$0 = $p$0 + 1 | 0;
  }
 } else $retval$0 = -1; while (0);
 return $retval$0 | 0;
}

function __ZNSt3__214__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, $2 = 0, $__end_$i$i$i = 0, $incdec$ptr$i$i$i = 0;
 $0 = HEAP32[$this + 4 >> 2] | 0;
 $__end_$i$i$i = $this + 8 | 0;
 while (1) {
  $1 = HEAP32[$__end_$i$i$i >> 2] | 0;
  if (($1 | 0) == ($0 | 0)) break;
  $incdec$ptr$i$i$i = $1 + -24 | 0;
  HEAP32[$__end_$i$i$i >> 2] = $incdec$ptr$i$i$i;
  __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($incdec$ptr$i$i$i);
 }
 $2 = HEAP32[$this >> 2] | 0;
 if ($2 | 0) __ZN10__cxxabiv112_GLOBAL__N_111short_allocINS0_11string_pairELj4096EE10deallocateEPS2_j(HEAP32[$this + 16 >> 2] | 0, $2, ((HEAP32[$this + 12 >> 2] | 0) - $2 | 0) / 24 | 0);
 return;
}

function __ZNSt3__213__lower_boundIRNS_6__lessIjjEEPKjjEET0_S6_S6_RKT1_T_($__first, $__last, $__value_, $__comp) {
 $__first = $__first | 0;
 $__last = $__last | 0;
 $__value_ = $__value_ | 0;
 $__comp = $__comp | 0;
 var $0 = 0, $__first$addr$0 = 0, $__len$0 = 0, $add$ptr$i$i = 0, $cmp$i = 0, $div = 0;
 $0 = HEAP32[$__value_ >> 2] | 0;
 $__first$addr$0 = $__first;
 $__len$0 = $__last - $__first >> 2;
 while (1) {
  if (!$__len$0) break;
  $div = ($__len$0 | 0) / 2 | 0;
  $add$ptr$i$i = $__first$addr$0 + ($div << 2) | 0;
  $cmp$i = (HEAP32[$add$ptr$i$i >> 2] | 0) >>> 0 < $0 >>> 0;
  $__first$addr$0 = $cmp$i ? $add$ptr$i$i + 4 | 0 : $__first$addr$0;
  $__len$0 = $cmp$i ? $__len$0 + -1 - $div | 0 : $div;
 }
 return $__first$addr$0 | 0;
}

function _arVecHousehold($x) {
 $x = $x | 0;
 var $0 = 0, $1 = 0.0, $2 = 0, $add = 0.0, $arrayidx11 = 0, $call1 = 0.0, $div = 0.0, $i$0 = 0, $s$0 = 0.0, $s$1 = 0.0;
 $call1 = +Math_sqrt(+(+_arVecInnerproduct($x, $x)));
 L1 : do if ($call1 != 0.0) {
  $0 = HEAP32[$x >> 2] | 0;
  $1 = +HEAPF64[$0 >> 3];
  $s$0 = $1 < 0.0 ? -$call1 : $call1;
  $add = $1 + $s$0;
  HEAPF64[$0 >> 3] = $add;
  $div = 1.0 / +Math_sqrt(+($s$0 * $add));
  $2 = HEAP32[$x + 4 >> 2] | 0;
  $i$0 = 0;
  while (1) {
   if (($i$0 | 0) >= ($2 | 0)) {
    $s$1 = $s$0;
    break L1;
   }
   $arrayidx11 = $0 + ($i$0 << 3) | 0;
   HEAPF64[$arrayidx11 >> 3] = $div * +HEAPF64[$arrayidx11 >> 3];
   $i$0 = $i$0 + 1 | 0;
  }
 } else $s$1 = $call1; while (0);
 return +-$s$1;
}

function _arUtilGetDirectoryNameFromPath($dir, $path, $n, $addSeparator) {
 $dir = $dir | 0;
 $path = $path | 0;
 $n = $n | 0;
 $addSeparator = $addSeparator | 0;
 var $arrayidx10$sink = 0, $call = 0, $retval$0 = 0, $sub$ptr$sub = 0;
 do if (($dir | 0) != 0 & ($path | 0) != 0 & ($n | 0) != 0) {
  $call = _strrchr($path, 47) | 0;
  if (!$call) $arrayidx10$sink = $dir; else {
   $sub$ptr$sub = $call + (($addSeparator | 0) != 0 & 1) - $path | 0;
   if (($sub$ptr$sub + 1 | 0) >>> 0 > $n >>> 0) {
    $retval$0 = 0;
    break;
   }
   _strncpy($dir, $path, $sub$ptr$sub) | 0;
   $arrayidx10$sink = $dir + $sub$ptr$sub | 0;
  }
  HEAP8[$arrayidx10$sink >> 0] = 0;
  $retval$0 = $dir;
 } else $retval$0 = 0; while (0);
 return $retval$0 | 0;
}

function __ZNSt3__214__split_bufferINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEERNS5_IS7_Lj4096EEEEC2EjjS9_($this, $__cap, $__start, $__a) {
 $this = $this | 0;
 $__cap = $__cap | 0;
 $__start = $__start | 0;
 $__a = $__a | 0;
 var $add$ptr = 0, $cond = 0;
 HEAP32[$this + 12 >> 2] = 0;
 HEAP32[$this + 16 >> 2] = $__a;
 if (!$__cap) $cond = 0; else $cond = __ZN10__cxxabiv112_GLOBAL__N_111short_allocINSt3__26vectorINS0_11string_pairENS1_IS4_Lj4096EEEEELj4096EE8allocateEj($__a, $__cap) | 0;
 HEAP32[$this >> 2] = $cond;
 $add$ptr = $cond + ($__start << 4) | 0;
 HEAP32[$this + 8 >> 2] = $add$ptr;
 HEAP32[$this + 4 >> 2] = $add$ptr;
 HEAP32[$this + 12 >> 2] = $cond + ($__cap << 4);
 return;
}

function __ZNSt3__213__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEED2Ev($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, $2 = 0, $__end_$i$i = 0, $incdec$ptr$i$i = 0;
 $0 = HEAP32[$this >> 2] | 0;
 if ($0 | 0) {
  $__end_$i$i = $this + 4 | 0;
  while (1) {
   $1 = HEAP32[$__end_$i$i >> 2] | 0;
   if (($1 | 0) == ($0 | 0)) break;
   $incdec$ptr$i$i = $1 + -24 | 0;
   HEAP32[$__end_$i$i >> 2] = $incdec$ptr$i$i;
   __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($incdec$ptr$i$i);
  }
  $2 = HEAP32[$this >> 2] | 0;
  __ZN10__cxxabiv112_GLOBAL__N_111short_allocINS0_11string_pairELj4096EE10deallocateEPS2_j($this + 12 | 0, $2, ((HEAP32[$this + 8 >> 2] | 0) - $2 | 0) / 24 | 0);
 }
 return;
}

function __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($this, $info, $current_ptr, $path_below, $use_strcmp) {
 $this = $this | 0;
 $info = $info | 0;
 $current_ptr = $current_ptr | 0;
 $path_below = $path_below | 0;
 $use_strcmp = $use_strcmp | 0;
 var $0 = 0, $3 = 0, $offset_to_base$0 = 0, $shr = 0;
 $0 = HEAP32[$this + 4 >> 2] | 0;
 $shr = $0 >> 8;
 if (!($0 & 1)) $offset_to_base$0 = $shr; else $offset_to_base$0 = HEAP32[(HEAP32[$current_ptr >> 2] | 0) + $shr >> 2] | 0;
 $3 = HEAP32[$this >> 2] | 0;
 FUNCTION_TABLE_viiiii[HEAP32[(HEAP32[$3 >> 2] | 0) + 24 >> 2] & 3]($3, $info, $current_ptr + $offset_to_base$0 | 0, $0 & 2 | 0 ? $path_below : 2, $use_strcmp);
 return;
}

function __ZL10loadMarkerPKcPiP8ARHandlePP12ARPattHandle($patt_name, $patt_id, $pattHandle_p) {
 $patt_name = $patt_name | 0;
 $patt_id = $patt_id | 0;
 $pattHandle_p = $pattHandle_p | 0;
 var $call = 0, $retval$0 = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $vararg_buffer = sp;
 $call = _arPattLoad(HEAP32[$pattHandle_p >> 2] | 0, $patt_name) | 0;
 HEAP32[$patt_id >> 2] = $call;
 if (($call | 0) < 0) {
  HEAP32[$vararg_buffer >> 2] = $patt_name;
  _arLog(3, 9818, $vararg_buffer);
  _arPattDeleteHandle(HEAP32[$pattHandle_p >> 2] | 0) | 0;
  $retval$0 = 0;
 } else $retval$0 = 1;
 STACKTOP = sp;
 return $retval$0 | 0;
}

function __ZN10emscripten8internal7InvokerIiJiiEE6invokeEPFiiiEii($fn, $args, $args1) {
 $fn = $fn | 0;
 $args = $args | 0;
 $args1 = $args1 | 0;
 var $call = 0, $call3 = 0, $call4 = 0, $call5 = 0, $ref$tmp = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $ref$tmp = sp;
 $call = __ZN10emscripten8internal11BindingTypeIiE12fromWireTypeEi($args) | 0;
 $call3 = __ZN10emscripten8internal11BindingTypeIiE12fromWireTypeEi($args1) | 0;
 $call4 = FUNCTION_TABLE_iii[$fn & 15]($call, $call3) | 0;
 HEAP32[$ref$tmp >> 2] = $call4;
 $call5 = __ZN10emscripten8internal11BindingTypeIiE10toWireTypeERKi($ref$tmp) | 0;
 STACKTOP = sp;
 return $call5 | 0;
}

function ___fmodeflags($mode) {
 $mode = $mode | 0;
 var $0 = 0, $flags$0 = 0, $flags$0$or = 0, $flags$2 = 0, $flags$2$or18 = 0, $flags$4 = 0, $tobool = 0, $tobool10 = 0, $tobool6 = 0;
 $tobool = (_strchr($mode, 43) | 0) == 0;
 $0 = HEAP8[$mode >> 0] | 0;
 $flags$0 = $tobool ? $0 << 24 >> 24 != 114 & 1 : 2;
 $tobool6 = (_strchr($mode, 120) | 0) == 0;
 $flags$0$or = $tobool6 ? $flags$0 : $flags$0 | 128;
 $tobool10 = (_strchr($mode, 101) | 0) == 0;
 $flags$2 = $tobool10 ? $flags$0$or : $flags$0$or | 524288;
 $flags$2$or18 = $0 << 24 >> 24 == 114 ? $flags$2 : $flags$2 | 64;
 $flags$4 = $0 << 24 >> 24 == 119 ? $flags$2$or18 | 512 : $flags$2$or18;
 return ($0 << 24 >> 24 == 97 ? $flags$4 | 1024 : $flags$4) | 0;
}

function _icpCreateHandle($matXc2U) {
 $matXc2U = $matXc2U | 0;
 var $call = 0, $i$0 = 0, $j$0 = 0, $retval$0 = 0;
 $call = _malloc(136) | 0;
 if (!$call) $retval$0 = 0; else {
  $j$0 = 0;
  while (1) {
   if (($j$0 | 0) == 3) break; else $i$0 = 0;
   while (1) {
    if (($i$0 | 0) == 4) break;
    HEAPF64[$call + ($j$0 << 5) + ($i$0 << 3) >> 3] = +HEAPF64[$matXc2U + ($j$0 << 5) + ($i$0 << 3) >> 3];
    $i$0 = $i$0 + 1 | 0;
   }
   $j$0 = $j$0 + 1 | 0;
  }
  HEAP32[$call + 96 >> 2] = 10;
  HEAPF64[$call + 104 >> 3] = .10000000149011612;
  HEAPF64[$call + 112 >> 3] = .9900000095367432;
  HEAPF64[$call + 120 >> 3] = 4.0;
  HEAPF64[$call + 128 >> 3] = .5;
  $retval$0 = $call;
 }
 return $retval$0 | 0;
}

function ___stdio_seek($f, $off, $whence) {
 $f = $f | 0;
 $off = $off | 0;
 $whence = $whence | 0;
 var $2 = 0, $ret = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 $vararg_buffer = sp;
 $ret = sp + 20 | 0;
 HEAP32[$vararg_buffer >> 2] = HEAP32[$f + 60 >> 2];
 HEAP32[$vararg_buffer + 4 >> 2] = 0;
 HEAP32[$vararg_buffer + 8 >> 2] = $off;
 HEAP32[$vararg_buffer + 12 >> 2] = $ret;
 HEAP32[$vararg_buffer + 16 >> 2] = $whence;
 if ((___syscall_ret(___syscall140(140, $vararg_buffer | 0) | 0) | 0) < 0) {
  HEAP32[$ret >> 2] = -1;
  $2 = -1;
 } else $2 = HEAP32[$ret >> 2] | 0;
 STACKTOP = sp;
 return $2 | 0;
}

function __ZNSt3__214__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($this, $__cap, $__start, $__a) {
 $this = $this | 0;
 $__cap = $__cap | 0;
 $__start = $__start | 0;
 $__a = $__a | 0;
 var $add$ptr = 0, $cond = 0;
 HEAP32[$this + 12 >> 2] = 0;
 HEAP32[$this + 16 >> 2] = $__a;
 if (!$__cap) $cond = 0; else $cond = __ZN10__cxxabiv112_GLOBAL__N_111short_allocINS0_11string_pairELj4096EE8allocateEj($__a, $__cap) | 0;
 HEAP32[$this >> 2] = $cond;
 $add$ptr = $cond + ($__start * 24 | 0) | 0;
 HEAP32[$this + 8 >> 2] = $add$ptr;
 HEAP32[$this + 4 >> 2] = $add$ptr;
 HEAP32[$this + 12 >> 2] = $cond + ($__cap * 24 | 0);
 return;
}

function __ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($this, $info, $adjustedPtr, $path_below) {
 $this = $this | 0;
 $info = $info | 0;
 $adjustedPtr = $adjustedPtr | 0;
 $path_below = $path_below | 0;
 var $0 = 0, $3 = 0, $offset_to_base$0 = 0, $shr = 0;
 $0 = HEAP32[$this + 4 >> 2] | 0;
 $shr = $0 >> 8;
 if (!($0 & 1)) $offset_to_base$0 = $shr; else $offset_to_base$0 = HEAP32[(HEAP32[$adjustedPtr >> 2] | 0) + $shr >> 2] | 0;
 $3 = HEAP32[$this >> 2] | 0;
 FUNCTION_TABLE_viiii[HEAP32[(HEAP32[$3 >> 2] | 0) + 28 >> 2] & 3]($3, $info, $adjustedPtr + $offset_to_base$0 | 0, $0 & 2 | 0 ? $path_below : 2);
 return;
}

function _strcmp($l, $r) {
 $l = $l | 0;
 $r = $r | 0;
 var $$lcssa = 0, $$lcssa6 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $l$addr$010 = 0, $r$addr$011 = 0;
 $0 = HEAP8[$l >> 0] | 0;
 $1 = HEAP8[$r >> 0] | 0;
 if ($0 << 24 >> 24 == 0 ? 1 : $0 << 24 >> 24 != $1 << 24 >> 24) {
  $$lcssa = $1;
  $$lcssa6 = $0;
 } else {
  $l$addr$010 = $l;
  $r$addr$011 = $r;
  do {
   $l$addr$010 = $l$addr$010 + 1 | 0;
   $r$addr$011 = $r$addr$011 + 1 | 0;
   $2 = HEAP8[$l$addr$010 >> 0] | 0;
   $3 = HEAP8[$r$addr$011 >> 0] | 0;
  } while (!($2 << 24 >> 24 == 0 ? 1 : $2 << 24 >> 24 != $3 << 24 >> 24));
  $$lcssa = $3;
  $$lcssa6 = $2;
 }
 return ($$lcssa6 & 255) - ($$lcssa & 255) | 0;
}

function _fwrite($src, $size, $nmemb, $f) {
 $src = $src | 0;
 $size = $size | 0;
 $nmemb = $nmemb | 0;
 $f = $f | 0;
 var $$nmemb = 0, $call1 = 0, $call113 = 0, $cond9 = 0, $mul = 0, $phitmp = 0;
 $mul = Math_imul($nmemb, $size) | 0;
 $$nmemb = ($size | 0) == 0 ? 0 : $nmemb;
 if ((HEAP32[$f + 76 >> 2] | 0) > -1) {
  $phitmp = (___lockfile($f) | 0) == 0;
  $call1 = ___fwritex($src, $mul, $f) | 0;
  if ($phitmp) $call113 = $call1; else {
   ___unlockfile($f);
   $call113 = $call1;
  }
 } else $call113 = ___fwritex($src, $mul, $f) | 0;
 if (($call113 | 0) == ($mul | 0)) $cond9 = $$nmemb; else $cond9 = ($call113 >>> 0) / ($size >>> 0) | 0;
 return $cond9 | 0;
}

function __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEC2EjRKS3_RKS5_($this, $__x, $__a) {
 $this = $this | 0;
 $__x = $__x | 0;
 $__a = $__a | 0;
 var $0 = 0, $__end_$i = 0;
 HEAP32[$this >> 2] = 0;
 $__end_$i = $this + 4 | 0;
 HEAP32[$__end_$i >> 2] = 0;
 $0 = HEAP32[$__a >> 2] | 0;
 HEAP32[$this + 8 >> 2] = 0;
 HEAP32[$this + 12 >> 2] = $0;
 __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE8allocateEj($this);
 __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ERKS1_(HEAP32[$__end_$i >> 2] | 0, $__x);
 HEAP32[$__end_$i >> 2] = (HEAP32[$__end_$i >> 2] | 0) + 24;
 return;
}

function __ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($this, $info, $adjustedPtr, $path_below) {
 $this = $this | 0;
 $info = $info | 0;
 $adjustedPtr = $adjustedPtr | 0;
 $path_below = $path_below | 0;
 var $1 = 0;
 if (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($this, HEAP32[$info + 8 >> 2] | 0, 0) | 0) __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi(0, $info, $adjustedPtr, $path_below); else {
  $1 = HEAP32[$this + 8 >> 2] | 0;
  FUNCTION_TABLE_viiii[HEAP32[(HEAP32[$1 >> 2] | 0) + 28 >> 2] & 3]($1, $info, $adjustedPtr, $path_below);
 }
 return;
}

function __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2Ev($this) {
 $this = $this | 0;
 var $__i$0$i$i = 0, $__i$0$i$i2 = 0, $second = 0;
 HEAP32[$this >> 2] = 0;
 HEAP32[$this + 4 >> 2] = 0;
 HEAP32[$this + 8 >> 2] = 0;
 $__i$0$i$i = 0;
 while (1) {
  if (($__i$0$i$i | 0) == 3) break;
  HEAP32[$this + ($__i$0$i$i << 2) >> 2] = 0;
  $__i$0$i$i = $__i$0$i$i + 1 | 0;
 }
 $second = $this + 12 | 0;
 HEAP32[$second >> 2] = 0;
 HEAP32[$second + 4 >> 2] = 0;
 HEAP32[$second + 8 >> 2] = 0;
 $__i$0$i$i2 = 0;
 while (1) {
  if (($__i$0$i$i2 | 0) == 3) break;
  HEAP32[$second + ($__i$0$i$i2 << 2) >> 2] = 0;
  $__i$0$i$i2 = $__i$0$i$i2 + 1 | 0;
 }
 return;
}

function __ZN10emscripten8functionIiJiiiEJEEEvPKcPFT_DpT0_EDpT1_($name, $fn) {
 $name = $name | 0;
 $fn = $fn | 0;
 var $args = 0, $call = 0, $call1 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $args = sp;
 $call = __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJiiiiEE8getCountEv($args) | 0;
 $call1 = __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJiiiiEE8getTypesEv($args) | 0;
 __embind_register_function($name | 0, $call | 0, $call1 | 0, __ZN10emscripten8internal19getGenericSignatureIJiiiiiEEEPKcv() | 0, 1, $fn | 0);
 STACKTOP = sp;
 return;
}

function __ZN10emscripten8functionIiJiiEJEEEvPKcPFT_DpT0_EDpT1_($name, $fn) {
 $name = $name | 0;
 $fn = $fn | 0;
 var $args = 0, $call = 0, $call1 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $args = sp;
 $call = __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJiiiEE8getCountEv($args) | 0;
 $call1 = __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJiiiEE8getTypesEv($args) | 0;
 __embind_register_function($name | 0, $call | 0, $call1 | 0, __ZN10emscripten8internal19getGenericSignatureIJiiiiEEEPKcv() | 0, 13, $fn | 0);
 STACKTOP = sp;
 return;
}

function __ZN10emscripten8functionIvJiiEJEEEvPKcPFT_DpT0_EDpT1_($name, $fn) {
 $name = $name | 0;
 $fn = $fn | 0;
 var $args = 0, $call = 0, $call1 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $args = sp;
 $call = __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJviiEE8getCountEv($args) | 0;
 $call1 = __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJviiEE8getTypesEv($args) | 0;
 __embind_register_function($name | 0, $call | 0, $call1 | 0, __ZN10emscripten8internal19getGenericSignatureIJviiiEEEPKcv() | 0, 1, $fn | 0);
 STACKTOP = sp;
 return;
}

function __ZN10emscripten8functionIvJifEJEEEvPKcPFT_DpT0_EDpT1_($name, $fn) {
 $name = $name | 0;
 $fn = $fn | 0;
 var $args = 0, $call = 0, $call1 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $args = sp;
 $call = __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvifEE8getCountEv($args) | 0;
 $call1 = __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvifEE8getTypesEv($args) | 0;
 __embind_register_function($name | 0, $call | 0, $call1 | 0, __ZN10emscripten8internal19getGenericSignatureIJviifEEEPKcv() | 0, 2, $fn | 0);
 STACKTOP = sp;
 return;
}

function __ZN10emscripten8functionIvJidEJEEEvPKcPFT_DpT0_EDpT1_($name, $fn) {
 $name = $name | 0;
 $fn = $fn | 0;
 var $args = 0, $call = 0, $call1 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $args = sp;
 $call = __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvidEE8getCountEv($args) | 0;
 $call1 = __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvidEE8getTypesEv($args) | 0;
 __embind_register_function($name | 0, $call | 0, $call1 | 0, __ZN10emscripten8internal19getGenericSignatureIJviidEEEPKcv() | 0, 1, $fn | 0);
 STACKTOP = sp;
 return;
}

function __ZN10__cxxabiv112_GLOBAL__N_120parse_pack_expansionINS0_2DbEEEPKcS4_S4_RT_($first, $last, $db) {
 $first = $first | 0;
 $last = $last | 0;
 $db = $db | 0;
 var $add$ptr = 0, $call = 0, $first$addr$1 = 0;
 if (($last - $first | 0) > 2) if ((HEAP8[$first >> 0] | 0) == 115) if ((HEAP8[$first + 1 >> 0] | 0) == 112) {
  $add$ptr = $first + 2 | 0;
  $call = __ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($add$ptr, $last, $db) | 0;
  $first$addr$1 = ($call | 0) == ($add$ptr | 0) ? $first : $call;
 } else $first$addr$1 = $first; else $first$addr$1 = $first; else $first$addr$1 = $first;
 return $first$addr$1 | 0;
}

function __ZN10emscripten8functionIiJiEJEEEvPKcPFT_DpT0_EDpT1_($name, $fn) {
 $name = $name | 0;
 $fn = $fn | 0;
 var $args = 0, $call = 0, $call1 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $args = sp;
 $call = __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJiiEE8getCountEv($args) | 0;
 $call1 = __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJiiEE8getTypesEv($args) | 0;
 __embind_register_function($name | 0, $call | 0, $call1 | 0, __ZN10emscripten8internal19getGenericSignatureIJiiiEEEPKcv() | 0, 10, $fn | 0);
 STACKTOP = sp;
 return;
}

function __ZN10emscripten8functionIvJiEJEEEvPKcPFT_DpT0_EDpT1_($name, $fn) {
 $name = $name | 0;
 $fn = $fn | 0;
 var $args = 0, $call = 0, $call1 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $args = sp;
 $call = __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJviEE8getCountEv($args) | 0;
 $call1 = __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJviEE8getTypesEv($args) | 0;
 __embind_register_function($name | 0, $call | 0, $call1 | 0, __ZN10emscripten8internal19getGenericSignatureIJviiEEEPKcv() | 0, 7, $fn | 0);
 STACKTOP = sp;
 return;
}

function __ZN10emscripten8functionIdJiEJEEEvPKcPFT_DpT0_EDpT1_($name, $fn) {
 $name = $name | 0;
 $fn = $fn | 0;
 var $args = 0, $call = 0, $call1 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $args = sp;
 $call = __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJdiEE8getCountEv($args) | 0;
 $call1 = __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJdiEE8getTypesEv($args) | 0;
 __embind_register_function($name | 0, $call | 0, $call1 | 0, __ZN10emscripten8internal19getGenericSignatureIJdiiEEEPKcv() | 0, 1, $fn | 0);
 STACKTOP = sp;
 return;
}

function __ZN10emscripten8functionIiJEJEEEvPKcPFT_DpT0_EDpT1_($name, $fn) {
 $name = $name | 0;
 $fn = $fn | 0;
 var $args = 0, $call = 0, $call1 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $args = sp;
 $call = __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJiEE8getCountEv($args) | 0;
 $call1 = __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJiEE8getTypesEv($args) | 0;
 __embind_register_function($name | 0, $call | 0, $call1 | 0, __ZN10emscripten8internal19getGenericSignatureIJiiEEEPKcv() | 0, 16, $fn | 0);
 STACKTOP = sp;
 return;
}

function _sbrk(increment) {
 increment = increment | 0;
 var oldDynamicTop = 0, newDynamicTop = 0;
 increment = increment + 15 & -16 | 0;
 oldDynamicTop = HEAP32[DYNAMICTOP_PTR >> 2] | 0;
 newDynamicTop = oldDynamicTop + increment | 0;
 if ((increment | 0) > 0 & (newDynamicTop | 0) < (oldDynamicTop | 0) | (newDynamicTop | 0) < 0) {
  abortOnCannotGrowMemory() | 0;
  ___setErrNo(12);
  return -1;
 }
 HEAP32[DYNAMICTOP_PTR >> 2] = newDynamicTop;
 if ((newDynamicTop | 0) > (getTotalMemory() | 0)) if (!(enlargeMemory() | 0)) {
  HEAP32[DYNAMICTOP_PTR >> 2] = oldDynamicTop;
  ___setErrNo(12);
  return -1;
 }
 return oldDynamicTop | 0;
}

function _fmt_x($0, $1, $s, $lower) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $s = $s | 0;
 $lower = $lower | 0;
 var $5 = 0, $7 = 0, $incdec$ptr = 0, $s$addr$0$lcssa = 0, $s$addr$06 = 0;
 if (($0 | 0) == 0 & ($1 | 0) == 0) $s$addr$0$lcssa = $s; else {
  $5 = $0;
  $7 = $1;
  $s$addr$06 = $s;
  while (1) {
   $incdec$ptr = $s$addr$06 + -1 | 0;
   HEAP8[$incdec$ptr >> 0] = HEAPU8[12305 + ($5 & 15) >> 0] | 0 | $lower;
   $5 = _bitshift64Lshr($5 | 0, $7 | 0, 4) | 0;
   $7 = tempRet0;
   if (($5 | 0) == 0 & ($7 | 0) == 0) {
    $s$addr$0$lcssa = $incdec$ptr;
    break;
   } else $s$addr$06 = $incdec$ptr;
  }
 }
 return $s$addr$0$lcssa | 0;
}

function ___stdout_write($f, $buf, $len) {
 $f = $f | 0;
 $buf = $buf | 0;
 $len = $len | 0;
 var $call3 = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 $vararg_buffer = sp;
 HEAP32[$f + 36 >> 2] = 1;
 if (!(HEAP32[$f >> 2] & 64)) {
  HEAP32[$vararg_buffer >> 2] = HEAP32[$f + 60 >> 2];
  HEAP32[$vararg_buffer + 4 >> 2] = 21523;
  HEAP32[$vararg_buffer + 8 >> 2] = sp + 16;
  if (___syscall54(54, $vararg_buffer | 0) | 0) HEAP8[$f + 75 >> 0] = -1;
 }
 $call3 = ___stdio_write($f, $buf, $len) | 0;
 STACKTOP = sp;
 return $call3 | 0;
}

function __ZNSt3__212__hash_tableINS_17__hash_value_typeIi12arControllerEENS_22__unordered_map_hasherIiS3_NS_4hashIiEELb1EEENS_21__unordered_map_equalIiS3_NS_8equal_toIiEELb1EEENS_9allocatorIS3_EEED2Ev($this) {
 $this = $this | 0;
 var $1 = 0;
 __ZNSt3__212__hash_tableINS_17__hash_value_typeIi12arControllerEENS_22__unordered_map_hasherIiS3_NS_4hashIiEELb1EEENS_21__unordered_map_equalIiS3_NS_8equal_toIiEELb1EEENS_9allocatorIS3_EEE17__deallocate_nodeEPNS_16__hash_node_baseIPNS_11__hash_nodeIS3_PvEEEE($this, HEAP32[$this + 8 >> 2] | 0);
 $1 = HEAP32[$this >> 2] | 0;
 HEAP32[$this >> 2] = 0;
 if ($1 | 0) __ZdlPv($1);
 return;
}

function _vasprintf($s, $fmt, $ap) {
 $s = $s | 0;
 $fmt = $fmt | 0;
 $ap = $ap | 0;
 var $add = 0, $ap2 = 0, $call = 0, $call4 = 0, $retval$0 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $ap2 = sp;
 HEAP32[$ap2 >> 2] = HEAP32[$ap >> 2];
 $call = _vsnprintf(0, 0, $fmt, $ap2) | 0;
 if (($call | 0) < 0) $retval$0 = -1; else {
  $add = $call + 1 | 0;
  $call4 = _malloc($add) | 0;
  HEAP32[$s >> 2] = $call4;
  if (!$call4) $retval$0 = -1; else $retval$0 = _vsnprintf($call4, $add, $fmt, $ap) | 0;
 }
 STACKTOP = sp;
 return $retval$0 | 0;
}

function __ZNSt3__212__hash_tableINS_17__hash_value_typeIi7ARParamEENS_22__unordered_map_hasherIiS3_NS_4hashIiEELb1EEENS_21__unordered_map_equalIiS3_NS_8equal_toIiEELb1EEENS_9allocatorIS3_EEED2Ev($this) {
 $this = $this | 0;
 var $1 = 0;
 __ZNSt3__212__hash_tableINS_17__hash_value_typeIi7ARParamEENS_22__unordered_map_hasherIiS3_NS_4hashIiEELb1EEENS_21__unordered_map_equalIiS3_NS_8equal_toIiEELb1EEENS_9allocatorIS3_EEE17__deallocate_nodeEPNS_16__hash_node_baseIPNS_11__hash_nodeIS3_PvEEEE($this, HEAP32[$this + 8 >> 2] | 0);
 $1 = HEAP32[$this >> 2] | 0;
 HEAP32[$this >> 2] = 0;
 if ($1 | 0) __ZdlPv($1);
 return;
}

function _memcmp($vl, $vr, $n) {
 $vl = $vl | 0;
 $vr = $vr | 0;
 $n = $n | 0;
 var $0 = 0, $1 = 0, $cond = 0, $l$012 = 0, $n$addr$011 = 0, $r$013 = 0;
 L1 : do if (!$n) $cond = 0; else {
  $l$012 = $vl;
  $n$addr$011 = $n;
  $r$013 = $vr;
  while (1) {
   $0 = HEAP8[$l$012 >> 0] | 0;
   $1 = HEAP8[$r$013 >> 0] | 0;
   if ($0 << 24 >> 24 != $1 << 24 >> 24) break;
   $n$addr$011 = $n$addr$011 + -1 | 0;
   if (!$n$addr$011) {
    $cond = 0;
    break L1;
   } else {
    $l$012 = $l$012 + 1 | 0;
    $r$013 = $r$013 + 1 | 0;
   }
  }
  $cond = ($0 & 255) - ($1 & 255) | 0;
 } while (0);
 return $cond | 0;
}

function __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE8allocateEj($this) {
 $this = $this | 0;
 var $call$i = 0;
 if (!(__ZNKSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE8max_sizeEv($this) | 0)) __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv($this); else {
  $call$i = __ZN10__cxxabiv112_GLOBAL__N_111short_allocINS0_11string_pairELj4096EE8allocateEj($this + 12 | 0, 1) | 0;
  HEAP32[$this + 4 >> 2] = $call$i;
  HEAP32[$this >> 2] = $call$i;
  HEAP32[$this + 8 >> 2] = $call$i + 24;
  return;
 }
}

function _store_int($dest, $size, $0, $1) {
 $dest = $dest | 0;
 $size = $size | 0;
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $4 = 0;
 L1 : do if ($dest | 0) switch ($size | 0) {
 case -2:
  {
   HEAP8[$dest >> 0] = $0;
   break L1;
   break;
  }
 case -1:
  {
   HEAP16[$dest >> 1] = $0;
   break L1;
   break;
  }
 case 0:
  {
   HEAP32[$dest >> 2] = $0;
   break L1;
   break;
  }
 case 1:
  {
   HEAP32[$dest >> 2] = $0;
   break L1;
   break;
  }
 case 3:
  {
   $4 = $dest;
   HEAP32[$4 >> 2] = $0;
   HEAP32[$4 + 4 >> 2] = $1;
   break L1;
   break;
  }
 default:
  break L1;
 } while (0);
 return;
}

function ___string_read($f, $buf, $len) {
 $f = $f | 0;
 $buf = $buf | 0;
 $len = $len | 0;
 var $0 = 0, $add = 0, $add$ptr3 = 0, $call = 0, $cookie = 0, $k$0 = 0, $k$0$len = 0;
 $cookie = $f + 84 | 0;
 $0 = HEAP32[$cookie >> 2] | 0;
 $add = $len + 256 | 0;
 $call = _memchr($0, 0, $add) | 0;
 $k$0 = ($call | 0) == 0 ? $add : $call - $0 | 0;
 $k$0$len = $k$0 >>> 0 < $len >>> 0 ? $k$0 : $len;
 _memcpy($buf | 0, $0 | 0, $k$0$len | 0) | 0;
 HEAP32[$f + 4 >> 2] = $0 + $k$0$len;
 $add$ptr3 = $0 + $k$0 | 0;
 HEAP32[$f + 8 >> 2] = $add$ptr3;
 HEAP32[$cookie >> 2] = $add$ptr3;
 return $k$0$len | 0;
}

function _getint($s) {
 $s = $s | 0;
 var $0 = 0, $2 = 0, $add = 0, $i$0$lcssa = 0, $i$07 = 0, $isdigittmp5 = 0, $isdigittmp8 = 0;
 $0 = HEAP32[$s >> 2] | 0;
 $isdigittmp5 = (HEAP8[$0 >> 0] | 0) + -48 | 0;
 if ($isdigittmp5 >>> 0 < 10) {
  $2 = $0;
  $i$07 = 0;
  $isdigittmp8 = $isdigittmp5;
  while (1) {
   $add = $isdigittmp8 + ($i$07 * 10 | 0) | 0;
   $2 = $2 + 1 | 0;
   HEAP32[$s >> 2] = $2;
   $isdigittmp8 = (HEAP8[$2 >> 0] | 0) + -48 | 0;
   if ($isdigittmp8 >>> 0 >= 10) {
    $i$0$lcssa = $add;
    break;
   } else $i$07 = $add;
  }
 } else $i$0$lcssa = 0;
 return $i$0$lcssa | 0;
}

function __ZN12arControllerC2Ev($this) {
 $this = $this | 0;
 var $__begin_$i$i = 0, $width = 0;
 HEAP32[$this + 192 >> 2] = 0;
 HEAP32[$this + 196 >> 2] = 0;
 $width = $this + 204 | 0;
 HEAP32[$width >> 2] = 0;
 HEAP32[$width + 4 >> 2] = 0;
 HEAP32[$width + 8 >> 2] = 0;
 HEAP32[$width + 12 >> 2] = 0;
 HEAP32[$width + 16 >> 2] = 0;
 HEAPF64[$this + 232 >> 3] = .0001;
 HEAPF64[$this + 240 >> 3] = 1.0e3;
 $__begin_$i$i = $this + 248 | 0;
 HEAP32[$__begin_$i$i >> 2] = 0;
 HEAP32[$__begin_$i$i + 4 >> 2] = 0;
 HEAP32[$__begin_$i$i + 8 >> 2] = 0;
 HEAP32[$__begin_$i$i + 12 >> 2] = 0;
 return;
}

function __ZNK10__cxxabiv117__class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($this, $info, $dst_ptr, $current_ptr, $path_below, $use_strcmp) {
 $this = $this | 0;
 $info = $info | 0;
 $dst_ptr = $dst_ptr | 0;
 $current_ptr = $current_ptr | 0;
 $path_below = $path_below | 0;
 $use_strcmp = $use_strcmp | 0;
 if (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($this, HEAP32[$info + 8 >> 2] | 0, $use_strcmp) | 0) __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i(0, $info, $dst_ptr, $current_ptr, $path_below);
 return;
}

function _arImageProcLumaHistAndCDF($ipi, $dataPtr) {
 $ipi = $ipi | 0;
 $dataPtr = $dataPtr | 0;
 var $call = 0, $cdfCurrent$0 = 0, $indvars$iv = 0, $retval$0 = 0;
 $call = _arImageProcLumaHist($ipi, $dataPtr) | 0;
 if (($call | 0) < 0) $retval$0 = $call; else {
  $cdfCurrent$0 = 0;
  $indvars$iv = 0;
  do {
   $cdfCurrent$0 = (HEAP32[$ipi + 16 + ($indvars$iv << 2) >> 2] | 0) + $cdfCurrent$0 | 0;
   HEAP32[$ipi + 1040 + ($indvars$iv << 2) >> 2] = $cdfCurrent$0;
   $indvars$iv = $indvars$iv + 1 | 0;
  } while (($indvars$iv | 0) != 256);
  $retval$0 = 0;
 }
 return $retval$0 | 0;
}

function __ZN10emscripten8internal7InvokerIiJiEE6invokeEPFiiEi($fn, $args) {
 $fn = $fn | 0;
 $args = $args | 0;
 var $call = 0, $call1 = 0, $call2 = 0, $ref$tmp = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $ref$tmp = sp;
 $call = __ZN10emscripten8internal11BindingTypeIiE12fromWireTypeEi($args) | 0;
 $call1 = FUNCTION_TABLE_ii[$fn & 31]($call) | 0;
 HEAP32[$ref$tmp >> 2] = $call1;
 $call2 = __ZN10emscripten8internal11BindingTypeIiE10toWireTypeERKi($ref$tmp) | 0;
 STACKTOP = sp;
 return $call2 | 0;
}

function __ZNSt3__212__hash_tableINS_17__hash_value_typeIi12arControllerEENS_22__unordered_map_hasherIiS3_NS_4hashIiEELb1EEENS_21__unordered_map_equalIiS3_NS_8equal_toIiEELb1EEENS_9allocatorIS3_EEE17__deallocate_nodeEPNS_16__hash_node_baseIPNS_11__hash_nodeIS3_PvEEEE($this, $__np) {
 $this = $this | 0;
 $__np = $__np | 0;
 var $0 = 0, $__np$addr$0 = 0;
 $__np$addr$0 = $__np;
 while (1) {
  if (!$__np$addr$0) break;
  $0 = HEAP32[$__np$addr$0 >> 2] | 0;
  __ZNSt3__24pairIKi12arControllerED2Ev($__np$addr$0 + 8 | 0);
  __ZdlPv($__np$addr$0);
  $__np$addr$0 = $0;
 }
 return;
}

function __ZN10emscripten8internal7InvokerIdJiEE6invokeEPFdiEi($fn, $args) {
 $fn = $fn | 0;
 $args = $args | 0;
 var $call = 0, $call1 = 0.0, $call2 = 0.0, $ref$tmp = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $ref$tmp = sp;
 $call = __ZN10emscripten8internal11BindingTypeIiE12fromWireTypeEi($args) | 0;
 $call1 = +FUNCTION_TABLE_di[$fn & 3]($call);
 HEAPF64[$ref$tmp >> 3] = $call1;
 $call2 = +__ZN10emscripten8internal11BindingTypeIdE10toWireTypeERKd($ref$tmp);
 STACKTOP = sp;
 return +$call2;
}

function _fmt_o($0, $1, $s) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $s = $s | 0;
 var $6 = 0, $8 = 0, $incdec$ptr = 0, $s$addr$0$lcssa = 0, $s$addr$06 = 0;
 if (($0 | 0) == 0 & ($1 | 0) == 0) $s$addr$0$lcssa = $s; else {
  $6 = $0;
  $8 = $1;
  $s$addr$06 = $s;
  while (1) {
   $incdec$ptr = $s$addr$06 + -1 | 0;
   HEAP8[$incdec$ptr >> 0] = $6 & 7 | 48;
   $6 = _bitshift64Lshr($6 | 0, $8 | 0, 3) | 0;
   $8 = tempRet0;
   if (($6 | 0) == 0 & ($8 | 0) == 0) {
    $s$addr$0$lcssa = $incdec$ptr;
    break;
   } else $s$addr$06 = $incdec$ptr;
  }
 }
 return $s$addr$0$lcssa | 0;
}

function _deleteHandle($arc) {
 $arc = $arc | 0;
 var $0 = 0, $ar3DHandle = 0, $arhandle = 0, $paramLT = 0;
 $arhandle = $arc + 212 | 0;
 $0 = HEAP32[$arhandle >> 2] | 0;
 if ($0 | 0) {
  _arPattDetach($0) | 0;
  _arDeleteHandle(HEAP32[$arhandle >> 2] | 0) | 0;
  HEAP32[$arhandle >> 2] = 0;
 }
 $ar3DHandle = $arc + 224 | 0;
 if (HEAP32[$ar3DHandle >> 2] | 0) {
  _ar3DDeleteHandle($ar3DHandle) | 0;
  HEAP32[$ar3DHandle >> 2] = 0;
 }
 $paramLT = $arc + 192 | 0;
 if (HEAP32[$paramLT >> 2] | 0) {
  _arParamLTFree($paramLT) | 0;
  HEAP32[$paramLT >> 2] = 0;
 }
 return;
}

function _vsscanf($s, $fmt, $ap) {
 $s = $s | 0;
 $fmt = $fmt | 0;
 $ap = $ap | 0;
 var $call = 0, $f = 0, dest = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(128);
 $f = sp;
 dest = $f;
 stop = dest + 124 | 0;
 do {
  HEAP32[dest >> 2] = 0;
  dest = dest + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP32[$f + 32 >> 2] = 15;
 HEAP32[$f + 44 >> 2] = $s;
 HEAP32[$f + 76 >> 2] = -1;
 HEAP32[$f + 84 >> 2] = $s;
 $call = _vfscanf($f, $fmt, $ap) | 0;
 STACKTOP = sp;
 return $call | 0;
}

function _calloc($n_elements, $elem_size) {
 $n_elements = $n_elements | 0;
 $elem_size = $elem_size | 0;
 var $call = 0, $mul = 0, $req$0 = 0;
 if (!$n_elements) $req$0 = 0; else {
  $mul = Math_imul($elem_size, $n_elements) | 0;
  if (($elem_size | $n_elements) >>> 0 > 65535) $req$0 = (($mul >>> 0) / ($n_elements >>> 0) | 0 | 0) == ($elem_size | 0) ? $mul : -1; else $req$0 = $mul;
 }
 $call = _malloc($req$0) | 0;
 if (!$call) return $call | 0;
 if (!(HEAP32[$call + -4 >> 2] & 3)) return $call | 0;
 _memset($call | 0, 0, $req$0 | 0) | 0;
 return $call | 0;
}

function _get_buff($buf, $fp) {
 $buf = $buf | 0;
 $fp = $fp | 0;
 var $arrayidx = 0, $l$0 = 0, $sub = 0;
 L1 : while (1) {
  if (!(_fgets($buf, 256, $fp) | 0)) break;
  $l$0 = _strlen($buf) | 0;
  L4 : while (1) {
   if (!$l$0) break;
   $sub = $l$0 + -1 | 0;
   $arrayidx = $buf + $sub | 0;
   switch (HEAP8[$arrayidx >> 0] | 0) {
   case 13:
   case 10:
    break;
   default:
    break L4;
   }
   HEAP8[$arrayidx >> 0] = 0;
   $l$0 = $sub;
  }
  switch (HEAP8[$buf >> 0] | 0) {
  case 0:
  case 35:
   break;
  default:
   break L1;
  }
 }
 return;
}

function __ZNK10__cxxabiv117__class_type_info29process_static_type_below_dstEPNS_19__dynamic_cast_infoEPKvi($this, $info, $current_ptr, $path_below) {
 $this = $this | 0;
 $info = $info | 0;
 $current_ptr = $current_ptr | 0;
 $path_below = $path_below | 0;
 var $path_dynamic_ptr_to_static_ptr = 0;
 if ((HEAP32[$info + 4 >> 2] | 0) == ($current_ptr | 0)) {
  $path_dynamic_ptr_to_static_ptr = $info + 28 | 0;
  if ((HEAP32[$path_dynamic_ptr_to_static_ptr >> 2] | 0) != 1) HEAP32[$path_dynamic_ptr_to_static_ptr >> 2] = $path_below;
 }
 return;
}

function __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEaSERKS7_($this, $__str) {
 $this = $this | 0;
 $__str = $__str | 0;
 var $0 = 0, $tobool$i$i$i = 0;
 if (($this | 0) != ($__str | 0)) {
  $0 = HEAP8[$__str + 11 >> 0] | 0;
  $tobool$i$i$i = $0 << 24 >> 24 < 0;
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6assignEPKcj($this, $tobool$i$i$i ? HEAP32[$__str >> 2] | 0 : $__str, $tobool$i$i$i ? HEAP32[$__str + 4 >> 2] | 0 : $0 & 255);
 }
 return;
}

function ___towrite($f) {
 $f = $f | 0;
 var $1 = 0, $2 = 0, $conv = 0, $mode = 0, $retval$0 = 0;
 $mode = $f + 74 | 0;
 $conv = HEAP8[$mode >> 0] | 0;
 HEAP8[$mode >> 0] = $conv + 255 | $conv;
 $1 = HEAP32[$f >> 2] | 0;
 if (!($1 & 8)) {
  HEAP32[$f + 8 >> 2] = 0;
  HEAP32[$f + 4 >> 2] = 0;
  $2 = HEAP32[$f + 44 >> 2] | 0;
  HEAP32[$f + 28 >> 2] = $2;
  HEAP32[$f + 20 >> 2] = $2;
  HEAP32[$f + 16 >> 2] = $2 + (HEAP32[$f + 48 >> 2] | 0);
  $retval$0 = 0;
 } else {
  HEAP32[$f >> 2] = $1 | 32;
  $retval$0 = -1;
 }
 return $retval$0 | 0;
}

function ___muldi3($a$0, $a$1, $b$0, $b$1) {
 $a$0 = $a$0 | 0;
 $a$1 = $a$1 | 0;
 $b$0 = $b$0 | 0;
 $b$1 = $b$1 | 0;
 var $x_sroa_0_0_extract_trunc = 0, $y_sroa_0_0_extract_trunc = 0, $1$0 = 0, $1$1 = 0;
 $x_sroa_0_0_extract_trunc = $a$0;
 $y_sroa_0_0_extract_trunc = $b$0;
 $1$0 = ___muldsi3($x_sroa_0_0_extract_trunc, $y_sroa_0_0_extract_trunc) | 0;
 $1$1 = tempRet0;
 return (tempRet0 = (Math_imul($a$1, $y_sroa_0_0_extract_trunc) | 0) + (Math_imul($b$1, $x_sroa_0_0_extract_trunc) | 0) + $1$1 | $1$1 & 0, $1$0 | 0 | 0) | 0;
}

function __ZN10__cxxabiv112_GLOBAL__N_12DbD2Ev($this) {
 $this = $this | 0;
 __ZNSt3__213__vector_baseINS_6vectorINS1_IN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEENS5_IS7_Lj4096EEEEENS5_IS9_Lj4096EEEED2Ev($this + 32 | 0);
 __ZNSt3__213__vector_baseINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEENS5_IS7_Lj4096EEEED2Ev($this + 16 | 0);
 __ZNSt3__213__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEED2Ev($this);
 return;
}

function __ZNSt3__212__hash_tableINS_17__hash_value_typeIi7ARParamEENS_22__unordered_map_hasherIiS3_NS_4hashIiEELb1EEENS_21__unordered_map_equalIiS3_NS_8equal_toIiEELb1EEENS_9allocatorIS3_EEE17__deallocate_nodeEPNS_16__hash_node_baseIPNS_11__hash_nodeIS3_PvEEEE($this, $__np) {
 $this = $this | 0;
 $__np = $__np | 0;
 var $0 = 0, $__np$addr$0 = 0;
 $__np$addr$0 = $__np;
 while (1) {
  if (!$__np$addr$0) break;
  $0 = HEAP32[$__np$addr$0 >> 2] | 0;
  __ZdlPv($__np$addr$0);
  $__np$addr$0 = $0;
 }
 return;
}

function __ZNSt3__214__split_bufferI12multi_markerRNS_9allocatorIS1_EEED2Ev($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, $2 = 0, $__end_$i$i$i = 0, $incdec$ptr$i$i$i = 0;
 $0 = HEAP32[$this + 4 >> 2] | 0;
 $__end_$i$i$i = $this + 8 | 0;
 $1 = HEAP32[$__end_$i$i$i >> 2] | 0;
 while (1) {
  if (($1 | 0) == ($0 | 0)) break;
  $incdec$ptr$i$i$i = $1 + -8 | 0;
  HEAP32[$__end_$i$i$i >> 2] = $incdec$ptr$i$i$i;
  $1 = $incdec$ptr$i$i$i;
 }
 $2 = HEAP32[$this >> 2] | 0;
 if ($2 | 0) __ZdlPv($2);
 return;
}

function _shl($p, $n) {
 $p = $p | 0;
 $n = $n | 0;
 var $0 = 0, $1 = 0, $2 = 0, $arrayidx1 = 0, $n$addr$0 = 0;
 $arrayidx1 = $p + 4 | 0;
 if ($n >>> 0 > 31) {
  $0 = HEAP32[$p >> 2] | 0;
  HEAP32[$arrayidx1 >> 2] = $0;
  HEAP32[$p >> 2] = 0;
  $1 = $0;
  $2 = 0;
  $n$addr$0 = $n + -32 | 0;
 } else {
  $1 = HEAP32[$arrayidx1 >> 2] | 0;
  $2 = HEAP32[$p >> 2] | 0;
  $n$addr$0 = $n;
 }
 HEAP32[$arrayidx1 >> 2] = $2 >>> (32 - $n$addr$0 | 0) | $1 << $n$addr$0;
 HEAP32[$p >> 2] = $2 << $n$addr$0;
 return;
}

function _shr($p, $n) {
 $p = $p | 0;
 $n = $n | 0;
 var $0 = 0, $1 = 0, $2 = 0, $arrayidx = 0, $n$addr$0 = 0;
 $arrayidx = $p + 4 | 0;
 if ($n >>> 0 > 31) {
  $0 = HEAP32[$arrayidx >> 2] | 0;
  HEAP32[$p >> 2] = $0;
  HEAP32[$arrayidx >> 2] = 0;
  $1 = $0;
  $2 = 0;
  $n$addr$0 = $n + -32 | 0;
 } else {
  $1 = HEAP32[$p >> 2] | 0;
  $2 = HEAP32[$arrayidx >> 2] | 0;
  $n$addr$0 = $n;
 }
 HEAP32[$p >> 2] = $2 << 32 - $n$addr$0 | $1 >>> $n$addr$0;
 HEAP32[$arrayidx >> 2] = $2 >>> $n$addr$0;
 return;
}

function _arg_n($ap, $n) {
 $ap = $ap | 0;
 $n = $n | 0;
 var $5 = 0, $6 = 0, $ap2 = 0, $i$0 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $ap2 = sp;
 HEAP32[$ap2 >> 2] = HEAP32[$ap >> 2];
 $i$0 = $n;
 while (1) {
  $5 = (HEAP32[$ap2 >> 2] | 0) + (4 - 1) & ~(4 - 1);
  $6 = HEAP32[$5 >> 2] | 0;
  HEAP32[$ap2 >> 2] = $5 + 4;
  if ($i$0 >>> 0 > 1) $i$0 = $i$0 + -1 | 0; else break;
 }
 STACKTOP = sp;
 return $6 | 0;
}

function ___ftello_unlocked($f) {
 $f = $f | 0;
 var $4 = 0, $call = 0, $retval$0 = 0;
 if (!(HEAP32[$f >> 2] & 128)) $4 = 1; else $4 = (HEAP32[$f + 20 >> 2] | 0) >>> 0 > (HEAP32[$f + 28 >> 2] | 0) >>> 0 ? 2 : 1;
 $call = FUNCTION_TABLE_iiii[HEAP32[$f + 40 >> 2] & 15]($f, 0, $4) | 0;
 if (($call | 0) < 0) $retval$0 = $call; else $retval$0 = $call - (HEAP32[$f + 8 >> 2] | 0) + (HEAP32[$f + 4 >> 2] | 0) + (HEAP32[$f + 20 >> 2] | 0) - (HEAP32[$f + 28 >> 2] | 0) | 0;
 return $retval$0 | 0;
}

function __ZNK10__cxxabiv117__class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($this, $info, $adjustedPtr, $path_below) {
 $this = $this | 0;
 $info = $info | 0;
 $adjustedPtr = $adjustedPtr | 0;
 $path_below = $path_below | 0;
 if (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($this, HEAP32[$info + 8 >> 2] | 0, 0) | 0) __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi(0, $info, $adjustedPtr, $path_below);
 return;
}

function __ZNSt3__218__libcpp_refstringC2EPKc($this, $msg) {
 $this = $this | 0;
 $msg = $msg | 0;
 var $call = 0, $call3 = 0, $call5 = 0;
 $call = _strlen($msg) | 0;
 $call3 = __Znwj($call + 13 | 0) | 0;
 HEAP32[$call3 >> 2] = $call;
 HEAP32[$call3 + 4 >> 2] = $call;
 HEAP32[$call3 + 8 >> 2] = 0;
 $call5 = __ZNSt3__215__refstring_imp12_GLOBAL__N_113data_from_repEPNS1_9_Rep_baseE($call3) | 0;
 _memcpy($call5 | 0, $msg | 0, $call + 1 | 0) | 0;
 HEAP32[$this >> 2] = $call5;
 return;
}

function _ar3DCreateHandle2($cpara) {
 $cpara = $cpara | 0;
 var $call = 0, $call1 = 0, $retval$0 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $call = _malloc(4) | 0;
 if (!$call) {
  _arLog(3, 4823, sp);
  _exit(1);
 }
 $call1 = _icpCreateHandle($cpara) | 0;
 HEAP32[$call >> 2] = $call1;
 if (!$call1) {
  _free($call);
  $retval$0 = 0;
 } else $retval$0 = $call;
 STACKTOP = sp;
 return $retval$0 | 0;
}

function _arMatrixAlloc($row, $clm) {
 $row = $row | 0;
 $clm = $clm | 0;
 var $call = 0, $call2 = 0, $retval$0 = 0;
 $call = _malloc(12) | 0;
 do if (!$call) $retval$0 = 0; else {
  $call2 = _malloc(Math_imul($row << 3, $clm) | 0) | 0;
  HEAP32[$call >> 2] = $call2;
  if (!$call2) {
   _free($call);
   $retval$0 = 0;
   break;
  } else {
   HEAP32[$call + 4 >> 2] = $row;
   HEAP32[$call + 8 >> 2] = $clm;
   $retval$0 = $call;
   break;
  }
 } while (0);
 return $retval$0 | 0;
}

function __ZN10__cxxabiv112_GLOBAL__N_15arenaILj4096EE10deallocateEPcj($this, $p, $n) {
 $this = $this | 0;
 $p = $p | 0;
 $n = $n | 0;
 var $add$ptr = 0, $ptr_ = 0;
 if (__ZN10__cxxabiv112_GLOBAL__N_15arenaILj4096EE17pointer_in_bufferEPc($this, $p) | 0) {
  $add$ptr = $p + (__ZN10__cxxabiv112_GLOBAL__N_15arenaILj4096EE8align_upEj($n) | 0) | 0;
  $ptr_ = $this + 4096 | 0;
  if (($add$ptr | 0) == (HEAP32[$ptr_ >> 2] | 0)) HEAP32[$ptr_ >> 2] = $p;
 } else _free($p);
 return;
}

function _arVecInnerproduct($x, $y) {
 $x = $x | 0;
 $y = $y | 0;
 var $0 = 0, $add = 0.0, $i$0 = 0, $result$0 = 0.0;
 $0 = HEAP32[$x + 4 >> 2] | 0;
 if (($0 | 0) != (HEAP32[$y + 4 >> 2] | 0)) _exit(0);
 $i$0 = 0;
 $result$0 = 0.0;
 while (1) {
  if (($i$0 | 0) >= ($0 | 0)) break;
  $add = $result$0 + +HEAPF64[(HEAP32[$x >> 2] | 0) + ($i$0 << 3) >> 3] * +HEAPF64[(HEAP32[$y >> 2] | 0) + ($i$0 << 3) >> 3];
  $i$0 = $i$0 + 1 | 0;
  $result$0 = $add;
 }
 return +$result$0;
}

function _arUtilGetPixelSize($arPixelFormat) {
 $arPixelFormat = $arPixelFormat | 0;
 var $retval$0 = 0;
 switch ($arPixelFormat | 0) {
 case 1:
 case 0:
  {
   $retval$0 = 3;
   break;
  }
 case 6:
 case 4:
 case 3:
 case 2:
  {
   $retval$0 = 4;
   break;
  }
 case 14:
 case 13:
 case 12:
 case 5:
  {
   $retval$0 = 1;
   break;
  }
 case 11:
 case 10:
 case 9:
 case 8:
 case 7:
  {
   $retval$0 = 2;
   break;
  }
 default:
  $retval$0 = 0;
 }
 return $retval$0 | 0;
}

function _arDeleteHandle($handle) {
 $handle = $handle | 0;
 var $0 = 0, $arImageProcInfo = 0, $retval$0 = 0;
 if (!$handle) $retval$0 = -1; else {
  $arImageProcInfo = $handle + 7062408 | 0;
  $0 = HEAP32[$arImageProcInfo >> 2] | 0;
  if ($0 | 0) {
   _arImageProcFinal($0);
   HEAP32[$arImageProcInfo >> 2] = 0;
  }
  _free(HEAP32[$handle + 4834144 >> 2] | 0);
  _free(HEAP32[$handle + 4834148 >> 2] | 0);
  _free($handle);
  $retval$0 = 0;
 }
 return $retval$0 | 0;
}

function __ZN10__cxxabiv112_GLOBAL__N_15arenaILj4096EE8allocateEj($this, $n) {
 $this = $this | 0;
 $n = $n | 0;
 var $0 = 0, $call = 0, $ptr_ = 0, $retval$0 = 0;
 $call = __ZN10__cxxabiv112_GLOBAL__N_15arenaILj4096EE8align_upEj($n) | 0;
 $ptr_ = $this + 4096 | 0;
 $0 = HEAP32[$ptr_ >> 2] | 0;
 if (($this + 4096 - $0 | 0) >>> 0 < $call >>> 0) $retval$0 = _malloc($call) | 0; else {
  HEAP32[$ptr_ >> 2] = $0 + $call;
  $retval$0 = $0;
 }
 return $retval$0 | 0;
}

function __ZNSt3__213__vector_baseI12multi_markerNS_9allocatorIS1_EEED2Ev($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, $__end_$i$i = 0, $incdec$ptr$i$i = 0;
 $0 = HEAP32[$this >> 2] | 0;
 if ($0 | 0) {
  $__end_$i$i = $this + 4 | 0;
  $1 = HEAP32[$__end_$i$i >> 2] | 0;
  while (1) {
   if (($1 | 0) == ($0 | 0)) break;
   $incdec$ptr$i$i = $1 + -8 | 0;
   HEAP32[$__end_$i$i >> 2] = $incdec$ptr$i$i;
   $1 = $incdec$ptr$i$i;
  }
  __ZdlPv($0);
 }
 return;
}

function ___unlist_locked_file($f) {
 $f = $f | 0;
 var $$pre = 0, $1 = 0, $3 = 0, $next_locked10$sink = 0;
 if (HEAP32[$f + 68 >> 2] | 0) {
  $1 = HEAP32[$f + 116 >> 2] | 0;
  $$pre = $f + 112 | 0;
  if ($1 | 0) HEAP32[$1 + 112 >> 2] = HEAP32[$$pre >> 2];
  $3 = HEAP32[$$pre >> 2] | 0;
  if (!$3) $next_locked10$sink = (___pthread_self_613() | 0) + 232 | 0; else $next_locked10$sink = $3 + 116 | 0;
  HEAP32[$next_locked10$sink >> 2] = $1;
 }
 return;
}

function __ZN10emscripten8internal7InvokerIiJEE6invokeEPFivE($fn) {
 $fn = $fn | 0;
 var $call = 0, $call1 = 0, $ref$tmp = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $ref$tmp = sp;
 $call = FUNCTION_TABLE_i[$fn & 1]() | 0;
 HEAP32[$ref$tmp >> 2] = $call;
 $call1 = __ZN10emscripten8internal11BindingTypeIiE10toWireTypeERKi($ref$tmp) | 0;
 STACKTOP = sp;
 return $call1 | 0;
}

function _sn_write($f, $s, $l) {
 $f = $f | 0;
 $s = $s | 0;
 $l = $l | 0;
 var $1 = 0, $l$sub$ptr$sub = 0, $sub$ptr$sub = 0, $wpos = 0;
 $wpos = $f + 20 | 0;
 $1 = HEAP32[$wpos >> 2] | 0;
 $sub$ptr$sub = (HEAP32[$f + 16 >> 2] | 0) - $1 | 0;
 $l$sub$ptr$sub = $sub$ptr$sub >>> 0 > $l >>> 0 ? $l : $sub$ptr$sub;
 _memcpy($1 | 0, $s | 0, $l$sub$ptr$sub | 0) | 0;
 HEAP32[$wpos >> 2] = (HEAP32[$wpos >> 2] | 0) + $l$sub$ptr$sub;
 return $l | 0;
}

function ___fseeko($f, $off, $whence) {
 $f = $f | 0;
 $off = $off | 0;
 $whence = $whence | 0;
 var $call1 = 0, $call17 = 0, $phitmp = 0;
 if ((HEAP32[$f + 76 >> 2] | 0) > -1) {
  $phitmp = (___lockfile($f) | 0) == 0;
  $call1 = ___fseeko_unlocked($f, $off, $whence) | 0;
  if ($phitmp) $call17 = $call1; else {
   ___unlockfile($f);
   $call17 = $call1;
  }
 } else $call17 = ___fseeko_unlocked($f, $off, $whence) | 0;
 return $call17 | 0;
}

function _a_ctz_l_737($x) {
 $x = $x | 0;
 var $inc = 0, $nTrailingZeros$07 = 0, $retval$0 = 0, $x$addr$06 = 0;
 if (!$x) $retval$0 = 32; else if (!($x & 1)) {
  $nTrailingZeros$07 = 0;
  $x$addr$06 = $x;
  while (1) {
   $inc = $nTrailingZeros$07 + 1 | 0;
   $x$addr$06 = $x$addr$06 >>> 1;
   if ($x$addr$06 & 1 | 0) {
    $retval$0 = $inc;
    break;
   } else $nTrailingZeros$07 = $inc;
  }
 } else $retval$0 = 0;
 return $retval$0 | 0;
}

function ___muldsi3($a, $b) {
 $a = $a | 0;
 $b = $b | 0;
 var $1 = 0, $2 = 0, $3 = 0, $6 = 0, $8 = 0, $11 = 0, $12 = 0;
 $1 = $a & 65535;
 $2 = $b & 65535;
 $3 = Math_imul($2, $1) | 0;
 $6 = $a >>> 16;
 $8 = ($3 >>> 16) + (Math_imul($2, $6) | 0) | 0;
 $11 = $b >>> 16;
 $12 = Math_imul($11, $1) | 0;
 return (tempRet0 = ($8 >>> 16) + (Math_imul($11, $6) | 0) + ((($8 & 65535) + $12 | 0) >>> 16) | 0, $8 + $12 << 16 | $3 & 65535 | 0) | 0;
}

function _memmove(dest, src, num) {
 dest = dest | 0;
 src = src | 0;
 num = num | 0;
 var ret = 0;
 if ((src | 0) < (dest | 0) & (dest | 0) < (src + num | 0)) {
  ret = dest;
  src = src + num | 0;
  dest = dest + num | 0;
  while ((num | 0) > 0) {
   dest = dest - 1 | 0;
   src = src - 1 | 0;
   num = num - 1 | 0;
   HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  }
  dest = ret;
 } else _memcpy(dest, src, num) | 0;
 return dest | 0;
}

function __ZNSt3__218__libcpp_refstringD2Ev($this) {
 $this = $this | 0;
 var $1 = 0, $call2 = 0, $count = 0;
 if (__ZNKSt3__218__libcpp_refstring15__uses_refcountEv($this) | 0) {
  $call2 = __ZNSt3__215__refstring_imp12_GLOBAL__N_113rep_from_dataEPKc_567(HEAP32[$this >> 2] | 0) | 0;
  $count = $call2 + 8 | 0;
  $1 = HEAP32[$count >> 2] | 0;
  HEAP32[$count >> 2] = $1 + -1;
  if (($1 + -1 | 0) < 0) __ZdlPv($call2);
 }
 return;
}

function ___stdio_close($f) {
 $f = $f | 0;
 var $call = 0, $call2 = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $vararg_buffer = sp;
 $call = _dummy_570(HEAP32[$f + 60 >> 2] | 0) | 0;
 HEAP32[$vararg_buffer >> 2] = $call;
 $call2 = ___syscall_ret(___syscall6(6, $vararg_buffer | 0) | 0) | 0;
 STACKTOP = sp;
 return $call2 | 0;
}

function _arParamLTFree($paramLT_p) {
 $paramLT_p = $paramLT_p | 0;
 var $0 = 0, $retval$0 = 0;
 if (!$paramLT_p) $retval$0 = -1; else {
  $0 = HEAP32[$paramLT_p >> 2] | 0;
  if (!$0) $retval$0 = -1; else {
   _free(HEAP32[$0 + 184 >> 2] | 0);
   _free(HEAP32[(HEAP32[$paramLT_p >> 2] | 0) + 188 >> 2] | 0);
   _free(HEAP32[$paramLT_p >> 2] | 0);
   HEAP32[$paramLT_p >> 2] = 0;
   $retval$0 = 0;
  }
 }
 return $retval$0 | 0;
}

function __ZNK10__cxxabiv112_GLOBAL__N_111string_pair4sizeEv($this) {
 $this = $this | 0;
 var $0 = 0, $2 = 0, $cond$i = 0, $cond$i8 = 0;
 $0 = HEAP8[$this + 11 >> 0] | 0;
 if ($0 << 24 >> 24 < 0) $cond$i = HEAP32[$this + 4 >> 2] | 0; else $cond$i = $0 & 255;
 $2 = HEAP8[$this + 12 + 11 >> 0] | 0;
 if ($2 << 24 >> 24 < 0) $cond$i8 = HEAP32[$this + 16 >> 2] | 0; else $cond$i8 = $2 & 255;
 return $cond$i8 + $cond$i | 0;
}

function ___memrchr($m, $c, $n) {
 $m = $m | 0;
 $c = $c | 0;
 $n = $n | 0;
 var $0 = 0, $arrayidx = 0, $n$addr$0 = 0, $retval$0 = 0;
 $0 = $c & 255;
 $n$addr$0 = $n;
 while (1) {
  if (!$n$addr$0) {
   $retval$0 = 0;
   break;
  }
  $n$addr$0 = $n$addr$0 + -1 | 0;
  $arrayidx = $m + $n$addr$0 | 0;
  if ((HEAP8[$arrayidx >> 0] | 0) == $0 << 24 >> 24) {
   $retval$0 = $arrayidx;
   break;
  }
 }
 return $retval$0 | 0;
}

function _copysign($x, $y) {
 $x = +$x;
 $y = +$y;
 var $0 = 0, $1 = 0, $6 = 0;
 HEAPF64[tempDoublePtr >> 3] = $x;
 $0 = HEAP32[tempDoublePtr >> 2] | 0;
 $1 = HEAP32[tempDoublePtr + 4 >> 2] | 0;
 HEAPF64[tempDoublePtr >> 3] = $y;
 $6 = HEAP32[tempDoublePtr + 4 >> 2] & -2147483648 | $1 & 2147483647;
 HEAP32[tempDoublePtr >> 2] = $0;
 HEAP32[tempDoublePtr + 4 >> 2] = $6;
 return +(+HEAPF64[tempDoublePtr >> 3]);
}

function ___uflow($f) {
 $f = $f | 0;
 var $c = 0, $retval$0 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $c = sp;
 if (!(___toread($f) | 0)) if ((FUNCTION_TABLE_iiii[HEAP32[$f + 32 >> 2] & 15]($f, $c, 1) | 0) == 1) $retval$0 = HEAPU8[$c >> 0] | 0; else $retval$0 = -1; else $retval$0 = -1;
 STACKTOP = sp;
 return $retval$0 | 0;
}

function _arPattFree($pattHandle, $patno) {
 $pattHandle = $pattHandle | 0;
 $patno = $patno | 0;
 var $arrayidx = 0, $retval$0 = 0;
 $arrayidx = (HEAP32[$pattHandle + 8 >> 2] | 0) + ($patno << 2) | 0;
 if (!(HEAP32[$arrayidx >> 2] | 0)) $retval$0 = -1; else {
  HEAP32[$arrayidx >> 2] = 0;
  HEAP32[$pattHandle >> 2] = (HEAP32[$pattHandle >> 2] | 0) + -1;
  $retval$0 = 1;
 }
 return $retval$0 | 0;
}

function _arVecAlloc($clm) {
 $clm = $clm | 0;
 var $call = 0, $call1 = 0, $retval$0 = 0;
 $call = _malloc(8) | 0;
 do if (!$call) $retval$0 = 0; else {
  $call1 = _malloc($clm << 3) | 0;
  HEAP32[$call >> 2] = $call1;
  if (!$call1) {
   _free($call);
   $retval$0 = 0;
   break;
  } else {
   HEAP32[$call + 4 >> 2] = $clm;
   $retval$0 = $call;
   break;
  }
 } while (0);
 return $retval$0 | 0;
}

function __Znwj($size) {
 $size = $size | 0;
 var $$size = 0, $call = 0, $call$lcssa = 0, $call2 = 0;
 $$size = ($size | 0) == 0 ? 1 : $size;
 while (1) {
  $call = _malloc($$size) | 0;
  if ($call | 0) {
   $call$lcssa = $call;
   break;
  }
  $call2 = __ZSt15get_new_handlerv() | 0;
  if (!$call2) {
   $call$lcssa = 0;
   break;
  }
  FUNCTION_TABLE_v[$call2 & 3]();
 }
 return $call$lcssa | 0;
}

function __ZSt9terminatev() {
 var $0 = 0, $1 = 0, $call = 0;
 $call = ___cxa_get_globals_fast() | 0;
 if ($call | 0) {
  $0 = HEAP32[$call >> 2] | 0;
  if ($0 | 0) {
   $1 = $0 + 48 | 0;
   if ((HEAP32[$1 >> 2] & -256 | 0) == 1126902528 ? (HEAP32[$1 + 4 >> 2] | 0) == 1129074247 : 0) __ZSt11__terminatePFvvE(HEAP32[$0 + 12 >> 2] | 0);
  }
 }
 __ZSt11__terminatePFvvE(__ZSt13get_terminatev() | 0);
}

function ___uremdi3($a$0, $a$1, $b$0, $b$1) {
 $a$0 = $a$0 | 0;
 $a$1 = $a$1 | 0;
 $b$0 = $b$0 | 0;
 $b$1 = $b$1 | 0;
 var $rem = 0, __stackBase__ = 0;
 __stackBase__ = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $rem = __stackBase__ | 0;
 ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) | 0;
 STACKTOP = __stackBase__;
 return (tempRet0 = HEAP32[$rem + 4 >> 2] | 0, HEAP32[$rem >> 2] | 0) | 0;
}

function _arPattAttach($arHandle, $arPattHandle) {
 $arHandle = $arHandle | 0;
 $arPattHandle = $arPattHandle | 0;
 var $pattHandle = 0, $retval$0 = 0;
 if (!$arHandle) $retval$0 = -1; else {
  $pattHandle = $arHandle + 7062384 | 0;
  if (!(HEAP32[$pattHandle >> 2] | 0)) {
   HEAP32[$pattHandle >> 2] = $arPattHandle;
   $retval$0 = 0;
  } else $retval$0 = -1;
 }
 return $retval$0 | 0;
}

function __ZN10emscripten8internal7InvokerIvJiiEE6invokeEPFviiEii($fn, $args, $args1) {
 $fn = $fn | 0;
 $args = $args | 0;
 $args1 = $args1 | 0;
 var $call = 0, $call3 = 0;
 $call = __ZN10emscripten8internal11BindingTypeIiE12fromWireTypeEi($args) | 0;
 $call3 = __ZN10emscripten8internal11BindingTypeIiE12fromWireTypeEi($args1) | 0;
 FUNCTION_TABLE_vii[$fn & 7]($call, $call3);
 return;
}

function __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKc($this, $__pos, $__s) {
 $this = $this | 0;
 $__pos = $__pos | 0;
 $__s = $__s | 0;
 return __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKcj($this, $__pos, $__s, __ZNSt3__211char_traitsIcE6lengthEPKc($__s) | 0) | 0;
}

function __ZN10emscripten8internal7InvokerIvJifEE6invokeEPFvifEif($fn, $args, $args1) {
 $fn = $fn | 0;
 $args = $args | 0;
 $args1 = +$args1;
 var $call = 0, $call3 = 0.0;
 $call = __ZN10emscripten8internal11BindingTypeIiE12fromWireTypeEi($args) | 0;
 $call3 = +__ZN10emscripten8internal11BindingTypeIfE12fromWireTypeEf($args1);
 FUNCTION_TABLE_vid[$fn & 3]($call, $call3);
 return;
}

function __ZN10emscripten8internal7InvokerIvJidEE6invokeEPFvidEid($fn, $args, $args1) {
 $fn = $fn | 0;
 $args = $args | 0;
 $args1 = +$args1;
 var $call = 0, $call3 = 0.0;
 $call = __ZN10emscripten8internal11BindingTypeIiE12fromWireTypeEi($args) | 0;
 $call3 = +__ZN10emscripten8internal11BindingTypeIdE12fromWireTypeEd($args1);
 FUNCTION_TABLE_vid[$fn & 3]($call, $call3);
 return;
}

function _snprintf($s, $n, $fmt, $varargs) {
 $s = $s | 0;
 $n = $n | 0;
 $fmt = $fmt | 0;
 $varargs = $varargs | 0;
 var $ap = 0, $call = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $ap = sp;
 HEAP32[$ap >> 2] = $varargs;
 $call = _vsnprintf($s, $n, $fmt, $ap) | 0;
 STACKTOP = sp;
 return $call | 0;
}

function __ZNSt3__26vectorINS0_INS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEENS4_IS6_Lj4096EEEEENS4_IS8_Lj4096EEEEC2EjRKS8_RKS9_($this, $__a) {
 $this = $this | 0;
 $__a = $__a | 0;
 var $0 = 0;
 HEAP32[$this >> 2] = 0;
 HEAP32[$this + 4 >> 2] = 0;
 $0 = HEAP32[$__a >> 2] | 0;
 HEAP32[$this + 8 >> 2] = 0;
 HEAP32[$this + 12 >> 2] = $0;
 return;
}

function _matrixCopy($src, $dst) {
 $src = $src | 0;
 $dst = $dst | 0;
 var $i$0 = 0, $j$0 = 0;
 $i$0 = 0;
 while (1) {
  if (($i$0 | 0) == 3) break; else $j$0 = 0;
  while (1) {
   if (($j$0 | 0) == 4) break;
   HEAPF64[$dst + ($i$0 << 5) + ($j$0 << 3) >> 3] = +HEAPF64[$src + ($i$0 << 5) + ($j$0 << 3) >> 3];
   $j$0 = $j$0 + 1 | 0;
  }
  $i$0 = $i$0 + 1 | 0;
 }
 return;
}

function _abort_message($format, $varargs) {
 $format = $format | 0;
 $varargs = $varargs | 0;
 var $0 = 0, $list = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $list = sp;
 HEAP32[$list >> 2] = $varargs;
 $0 = HEAP32[503] | 0;
 _vfprintf($0, $format, $list) | 0;
 _fputc(10, $0) | 0;
 _abort();
}

function _llvm_cttz_i32(x) {
 x = x | 0;
 var ret = 0;
 ret = HEAP8[cttz_i8 + (x & 255) >> 0] | 0;
 if ((ret | 0) < 8) return ret | 0;
 ret = HEAP8[cttz_i8 + (x >> 8 & 255) >> 0] | 0;
 if ((ret | 0) < 8) return ret + 8 | 0;
 ret = HEAP8[cttz_i8 + (x >> 16 & 255) >> 0] | 0;
 if ((ret | 0) < 8) return ret + 16 | 0;
 return (HEAP8[cttz_i8 + (x >>> 24) >> 0] | 0) + 24 | 0;
}

function _ferror($f) {
 $f = $f | 0;
 var $and$lobit = 0, $and$lobit9 = 0, $phitmp = 0;
 if ((HEAP32[$f + 76 >> 2] | 0) > -1) {
  $phitmp = (___lockfile($f) | 0) == 0;
  $and$lobit = (HEAP32[$f >> 2] | 0) >>> 5 & 1;
  if ($phitmp) $and$lobit9 = $and$lobit; else $and$lobit9 = $and$lobit;
 } else $and$lobit9 = (HEAP32[$f >> 2] | 0) >>> 5 & 1;
 return $and$lobit9 | 0;
}

function ___shlim($f, $lim) {
 $f = $f | 0;
 $lim = $lim | 0;
 var $0 = 0, $1 = 0, $sub$ptr$sub = 0;
 HEAP32[$f + 104 >> 2] = $lim;
 $0 = HEAP32[$f + 8 >> 2] | 0;
 $1 = HEAP32[$f + 4 >> 2] | 0;
 $sub$ptr$sub = $0 - $1 | 0;
 HEAP32[$f + 108 >> 2] = $sub$ptr$sub;
 HEAP32[$f + 100 >> 2] = ($lim | 0) != 0 & ($sub$ptr$sub | 0) > ($lim | 0) ? $1 + $lim | 0 : $0;
 return;
}

function __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ERKS1_($this, $0) {
 $this = $this | 0;
 $0 = $0 | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEC2ERKS7_($this, $0);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEC2ERKS7_($this + 12 | 0, $0 + 12 | 0);
 return;
}

function _arMatrixAllocTrans($source) {
 $source = $source | 0;
 var $call = 0, $retval$0 = 0;
 $call = _arMatrixAlloc(HEAP32[$source + 8 >> 2] | 0, HEAP32[$source + 4 >> 2] | 0) | 0;
 if (!$call) $retval$0 = 0; else if ((_arMatrixTrans($call, $source) | 0) < 0) {
  _arMatrixFree($call) | 0;
  $retval$0 = 0;
 } else $retval$0 = $call;
 return $retval$0 | 0;
}

function _arMatrixAllocDup($source) {
 $source = $source | 0;
 var $call = 0, $retval$0 = 0;
 $call = _arMatrixAlloc(HEAP32[$source + 4 >> 2] | 0, HEAP32[$source + 8 >> 2] | 0) | 0;
 if (!$call) $retval$0 = 0; else if ((_arMatrixDup($call, $source) | 0) < 0) {
  _arMatrixFree($call) | 0;
  $retval$0 = 0;
 } else $retval$0 = $call;
 return $retval$0 | 0;
}

function __ZNSt3__26vectorINS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEENS4_IS6_Lj4096EEEEC2EjRKS6_RKS7_($this, $__a) {
 $this = $this | 0;
 $__a = $__a | 0;
 var $0 = 0;
 HEAP32[$this >> 2] = 0;
 HEAP32[$this + 4 >> 2] = 0;
 $0 = HEAP32[$__a >> 2] | 0;
 HEAP32[$this + 8 >> 2] = 0;
 HEAP32[$this + 12 >> 2] = $0;
 return;
}

function __ZNSt3__213unordered_mapIi12arControllerNS_4hashIiEENS_8equal_toIiEENS_9allocatorINS_4pairIKiS1_EEEEED2Ev($this) {
 $this = $this | 0;
 __ZNSt3__212__hash_tableINS_17__hash_value_typeIi12arControllerEENS_22__unordered_map_hasherIiS3_NS_4hashIiEELb1EEENS_21__unordered_map_equalIiS3_NS_8equal_toIiEELb1EEENS_9allocatorIS3_EEED2Ev($this);
 return;
}

function _sscanf($s, $fmt, $varargs) {
 $s = $s | 0;
 $fmt = $fmt | 0;
 $varargs = $varargs | 0;
 var $ap = 0, $call = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $ap = sp;
 HEAP32[$ap >> 2] = $varargs;
 $call = _vsscanf($s, $fmt, $ap) | 0;
 STACKTOP = sp;
 return $call | 0;
}

function ___cxa_get_globals_fast() {
 var $call1 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 if (!(_pthread_once(17772, 2) | 0)) {
  $call1 = _pthread_getspecific(HEAP32[4444] | 0) | 0;
  STACKTOP = sp;
  return $call1 | 0;
 } else _abort_message(14505, sp);
 return 0;
}

function __ZN10emscripten8constantIiEEvPKcRKT_($name, $v) {
 $name = $name | 0;
 $v = $v | 0;
 var $call = 0;
 $call = __ZN10emscripten8internal6TypeIDIRKiE3getEv() | 0;
 __embind_register_constant($name | 0, $call | 0, __ZN10emscripten8internal14asGenericValueIiEEjT_(__ZN10emscripten8internal11BindingTypeIiE10toWireTypeERKi($v) | 0) | 0);
 return;
}

function _rewind($f) {
 $f = $f | 0;
 var $phitmp = 0;
 if ((HEAP32[$f + 76 >> 2] | 0) > -1) {
  $phitmp = (___lockfile($f) | 0) == 0;
  ___fseeko_unlocked($f, 0, 0) | 0;
  HEAP32[$f >> 2] = HEAP32[$f >> 2] & -33;
  if (!$phitmp) ___unlockfile($f);
 } else {
  ___fseeko_unlocked($f, 0, 0) | 0;
  HEAP32[$f >> 2] = HEAP32[$f >> 2] & -33;
 }
 return;
}

function _arMatrixAllocMul($a, $b) {
 $a = $a | 0;
 $b = $b | 0;
 var $call = 0, $retval$0 = 0;
 $call = _arMatrixAlloc(HEAP32[$a + 4 >> 2] | 0, HEAP32[$b + 8 >> 2] | 0) | 0;
 if (!$call) $retval$0 = 0; else if ((_arMatrixMul($call, $a, $b) | 0) < 0) {
  _arMatrixFree($call) | 0;
  $retval$0 = 0;
 } else $retval$0 = $call;
 return $retval$0 | 0;
}

function __ZN10emscripten8constantIdEEvPKcRKT_($name, $v) {
 $name = $name | 0;
 $v = $v | 0;
 var $call = 0;
 $call = __ZN10emscripten8internal6TypeIDIRKdE3getEv() | 0;
 __embind_register_constant($name | 0, $call | 0, __ZN10emscripten8internal14asGenericValueIdEEjT_(+__ZN10emscripten8internal11BindingTypeIdE10toWireTypeERKd($v)) | 0);
 return;
}

function __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($this, $__s) {
 $this = $this | 0;
 $__s = $__s | 0;
 return __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($this, $__s, __ZNSt3__211char_traitsIcE6lengthEPKc($__s) | 0) | 0;
}

function __ZNSt3__213unordered_mapIi7ARParamNS_4hashIiEENS_8equal_toIiEENS_9allocatorINS_4pairIKiS1_EEEEED2Ev($this) {
 $this = $this | 0;
 __ZNSt3__212__hash_tableINS_17__hash_value_typeIi7ARParamEENS_22__unordered_map_hasherIiS3_NS_4hashIiEELb1EEENS_21__unordered_map_equalIiS3_NS_8equal_toIiEELb1EEENS_9allocatorIS3_EEED2Ev($this);
 return;
}

function __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6assignEPKc($this, $__s) {
 $this = $this | 0;
 $__s = $__s | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6assignEPKcj($this, $__s, __ZNSt3__211char_traitsIcE6lengthEPKc($__s) | 0);
 return;
}

function __ZN10__cxxabiv112_GLOBAL__N_111short_allocINSt3__26vectorINS3_INS0_11string_pairENS1_IS4_Lj4096EEEEENS1_IS6_Lj4096EEEEELj4096EE10deallocateEPS8_j($this, $p, $n) {
 $this = $this | 0;
 $p = $p | 0;
 $n = $n | 0;
 __ZN10__cxxabiv112_GLOBAL__N_15arenaILj4096EE10deallocateEPcj(HEAP32[$this >> 2] | 0, $p, $n << 4);
 return;
}

function __ZN10__cxxabiv112_GLOBAL__N_19destruct_EPv($p) {
 $p = $p | 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 _free($p);
 if (!(_pthread_setspecific(HEAP32[4444] | 0, 0) | 0)) {
  STACKTOP = sp;
  return;
 } else _abort_message(14604, sp);
}

function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJiiNSt3__212basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEEE8getTypesEv($this) {
 $this = $this | 0;
 return __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJiiNSt3__212basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEEEE3getEv() | 0;
}

function _arPattDetach($arHandle) {
 $arHandle = $arHandle | 0;
 var $pattHandle = 0, $retval$0 = 0;
 if (!$arHandle) $retval$0 = -1; else {
  $pattHandle = $arHandle + 7062384 | 0;
  if (!(HEAP32[$pattHandle >> 2] | 0)) $retval$0 = -1; else {
   HEAP32[$pattHandle >> 2] = 0;
   $retval$0 = 0;
  }
 }
 return $retval$0 | 0;
}

function ___ftello($f) {
 $f = $f | 0;
 var $call1 = 0, $call17 = 0, $phitmp = 0;
 if ((HEAP32[$f + 76 >> 2] | 0) > -1) {
  $phitmp = (___lockfile($f) | 0) == 0;
  $call1 = ___ftello_unlocked($f) | 0;
  if ($phitmp) $call17 = $call1; else $call17 = $call1;
 } else $call17 = ___ftello_unlocked($f) | 0;
 return $call17 | 0;
}

function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJiNSt3__212basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEEE8getTypesEv($this) {
 $this = $this | 0;
 return __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJiNSt3__212basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEEEE3getEv() | 0;
}

function __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE7replaceEjjPKc($this) {
 $this = $this | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE7replaceEjjPKcj($this, __ZNSt3__211char_traitsIcE6lengthEPKc(16306) | 0);
 return;
}

function __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($this) {
 $this = $this | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($this + 12 | 0);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($this);
 return;
}

function _arSetPattRatio($handle, $pattRatio) {
 $handle = $handle | 0;
 $pattRatio = +$pattRatio;
 var $retval$0 = 0;
 if (!$handle) $retval$0 = -1; else if ($pattRatio <= 0.0 | $pattRatio >= 1.0) $retval$0 = -1; else {
  HEAPF64[$handle + 7062416 >> 3] = $pattRatio;
  $retval$0 = 0;
 }
 return $retval$0 | 0;
}

function __ZN10__cxxabiv112_GLOBAL__N_111short_allocINSt3__26vectorINS0_11string_pairENS1_IS4_Lj4096EEEEELj4096EE10deallocateEPS6_j($this, $p, $n) {
 $this = $this | 0;
 $p = $p | 0;
 $n = $n | 0;
 __ZN10__cxxabiv112_GLOBAL__N_15arenaILj4096EE10deallocateEPcj(HEAP32[$this >> 2] | 0, $p, $n << 4);
 return;
}

function _arSetLabelingThreshModeAutoInterval($handle, $interval) {
 $handle = $handle | 0;
 $interval = $interval | 0;
 var $retval$0 = 0;
 if (!$handle) $retval$0 = -1; else {
  HEAP32[$handle + 7062392 >> 2] = $interval;
  HEAP32[$handle + 7062396 >> 2] = 0;
  $retval$0 = 0;
 }
 return $retval$0 | 0;
}

function __ZN10__cxxabiv112_GLOBAL__N_111short_allocINSt3__26vectorINS3_INS0_11string_pairENS1_IS4_Lj4096EEEEENS1_IS6_Lj4096EEEEELj4096EE8allocateEj($this, $n) {
 $this = $this | 0;
 $n = $n | 0;
 return __ZN10__cxxabiv112_GLOBAL__N_15arenaILj4096EE8allocateEj(HEAP32[$this >> 2] | 0, $n << 4) | 0;
}

function _arGetLabelingThreshMode($handle, $mode_p) {
 $handle = $handle | 0;
 $mode_p = $mode_p | 0;
 var $retval$0 = 0;
 if (($handle | 0) != 0 & ($mode_p | 0) != 0) {
  HEAP32[$mode_p >> 2] = HEAP32[$handle + 7062388 >> 2];
  $retval$0 = 0;
 } else $retval$0 = -1;
 return $retval$0 | 0;
}

function _arGetTransMatMultiSquareRobust($handle, $marker_info, $marker_num, $config) {
 $handle = $handle | 0;
 $marker_info = $marker_info | 0;
 $marker_num = $marker_num | 0;
 $config = $config | 0;
 return +(+_arGetTransMatMultiSquare2($handle, $marker_info, $marker_num, $config, 1));
}

function __ZN10__cxxabiv112_GLOBAL__N_110construct_Ev() {
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 if (!(_pthread_key_create(17776, 14) | 0)) {
  STACKTOP = sp;
  return;
 } else _abort_message(14554, sp);
}

function _ar3DDeleteHandle($handle) {
 $handle = $handle | 0;
 var $0 = 0, $retval$0 = 0;
 $0 = HEAP32[$handle >> 2] | 0;
 if (!$0) $retval$0 = -1; else {
  _icpDeleteHandle($0) | 0;
  _free(HEAP32[$handle >> 2] | 0);
  HEAP32[$handle >> 2] = 0;
  $retval$0 = 0;
 }
 return $retval$0 | 0;
}

function _arGetMatrixCodeType($handle, $type_p) {
 $handle = $handle | 0;
 $type_p = $type_p | 0;
 var $retval$0 = 0;
 if (($handle | 0) != 0 & ($type_p | 0) != 0) {
  HEAP32[$type_p >> 2] = HEAP32[$handle + 7062424 >> 2];
  $retval$0 = 0;
 } else $retval$0 = -1;
 return $retval$0 | 0;
}

function _pntz($p) {
 $p = $p | 0;
 var $call = 0, $call2 = 0;
 $call = _a_ctz_l_737((HEAP32[$p >> 2] | 0) + -1 | 0) | 0;
 if (!$call) {
  $call2 = _a_ctz_l_737(HEAP32[$p + 4 >> 2] | 0) | 0;
  return (($call2 | 0) == 0 ? 0 : $call2 + 32 | 0) | 0;
 } else return $call | 0;
 return 0;
}

function _arGetTransMatMultiSquare($handle, $marker_info, $marker_num, $config) {
 $handle = $handle | 0;
 $marker_info = $marker_info | 0;
 $marker_num = $marker_num | 0;
 $config = $config | 0;
 return +(+_arGetTransMatMultiSquare2($handle, $marker_info, $marker_num, $config, 0));
}

function _arGetLabelingThresh($handle, $thresh) {
 $handle = $handle | 0;
 $thresh = $thresh | 0;
 var $retval$0 = 0;
 if (($handle | 0) != 0 & ($thresh | 0) != 0) {
  HEAP32[$thresh >> 2] = HEAP32[$handle + 16 >> 2];
  $retval$0 = 0;
 } else $retval$0 = -1;
 return $retval$0 | 0;
}

function __ZN10__cxxabiv112_GLOBAL__N_132parse_unresolved_qualifier_levelINS0_2DbEEEPKcS4_S4_RT_($first, $last, $db) {
 $first = $first | 0;
 $last = $last | 0;
 $db = $db | 0;
 return __ZN10__cxxabiv112_GLOBAL__N_115parse_simple_idINS0_2DbEEEPKcS4_S4_RT_($first, $last, $db) | 0;
}

function __ZN10__cxxabiv112_GLOBAL__N_111short_allocINS0_11string_pairELj4096EE10deallocateEPS2_j($this, $p, $n) {
 $this = $this | 0;
 $p = $p | 0;
 $n = $n | 0;
 __ZN10__cxxabiv112_GLOBAL__N_15arenaILj4096EE10deallocateEPcj(HEAP32[$this >> 2] | 0, $p, $n * 24 | 0);
 return;
}

function __ZN10__cxxabiv112_GLOBAL__N_111short_allocINSt3__26vectorINS0_11string_pairENS1_IS4_Lj4096EEEEELj4096EE8allocateEj($this, $n) {
 $this = $this | 0;
 $n = $n | 0;
 return __ZN10__cxxabiv112_GLOBAL__N_15arenaILj4096EE8allocateEj(HEAP32[$this >> 2] | 0, $n << 4) | 0;
}

function ___strdup($s) {
 $s = $s | 0;
 var $add = 0, $call1 = 0, $retval$0 = 0;
 $add = (_strlen($s) | 0) + 1 | 0;
 $call1 = _malloc($add) | 0;
 if (!$call1) $retval$0 = 0; else {
  _memcpy($call1 | 0, $s | 0, $add | 0) | 0;
  $retval$0 = $call1;
 }
 return $retval$0 | 0;
}

function __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($this) {
 $this = $this | 0;
 if ((HEAP8[$this + 11 >> 0] | 0) < 0) __ZN10__cxxabiv112_GLOBAL__N_112malloc_allocIcE10deallocateEPcj(HEAP32[$this >> 2] | 0);
 return;
}

function _arSetLabelingThresh($handle, $thresh) {
 $handle = $handle | 0;
 $thresh = $thresh | 0;
 var $retval$0 = 0;
 if (($handle | 0) == 0 | $thresh >>> 0 > 255) $retval$0 = -1; else {
  HEAP32[$handle + 16 >> 2] = $thresh;
  $retval$0 = 0;
 }
 return $retval$0 | 0;
}

function _arGetLabelingMode($handle, $mode) {
 $handle = $handle | 0;
 $mode = $mode | 0;
 var $retval$0 = 0;
 if (($handle | 0) != 0 & ($mode | 0) != 0) {
  HEAP32[$mode >> 2] = HEAP32[$handle + 12 >> 2];
  $retval$0 = 0;
 } else $retval$0 = -1;
 return $retval$0 | 0;
}

function __ZNK10__cxxabiv123__fundamental_type_info9can_catchEPKNS_16__shim_type_infoERPv($this, $thrown_type, $0) {
 $this = $this | 0;
 $thrown_type = $thrown_type | 0;
 $0 = $0 | 0;
 return __ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($this, $thrown_type, 0) | 0;
}

function _arGetPattRatio($handle, $pattRatio) {
 $handle = $handle | 0;
 $pattRatio = $pattRatio | 0;
 var $retval$0 = 0;
 if (!$handle) $retval$0 = -1; else {
  HEAPF64[$pattRatio >> 3] = +HEAPF64[$handle + 7062416 >> 3];
  $retval$0 = 0;
 }
 return $retval$0 | 0;
}

function ___ofl_add($f) {
 $f = $f | 0;
 var $1 = 0, $call = 0;
 $call = ___ofl_lock() | 0;
 HEAP32[$f + 56 >> 2] = HEAP32[$call >> 2];
 $1 = HEAP32[$call >> 2] | 0;
 if ($1 | 0) HEAP32[$1 + 52 >> 2] = $f;
 HEAP32[$call >> 2] = $f;
 ___ofl_unlock();
 return $f | 0;
}

function _bitshift64Shl(low, high, bits) {
 low = low | 0;
 high = high | 0;
 bits = bits | 0;
 if ((bits | 0) < 32) {
  tempRet0 = high << bits | (low & (1 << bits) - 1 << 32 - bits) >>> 32 - bits;
  return low << bits;
 }
 tempRet0 = low << bits - 32;
 return 0;
}

function _arSetPatternDetectionMode($handle, $mode) {
 $handle = $handle | 0;
 $mode = $mode | 0;
 var $retval$0 = 0;
 if (($handle | 0) != 0 & $mode >>> 0 < 5) {
  HEAP32[$handle + 24 >> 2] = $mode;
  $retval$0 = 0;
 } else $retval$0 = -1;
 return $retval$0 | 0;
}

function _arGetDebugMode($handle, $mode) {
 $handle = $handle | 0;
 $mode = $mode | 0;
 var $retval$0 = 0;
 if (($handle | 0) != 0 & ($mode | 0) != 0) {
  HEAP32[$mode >> 2] = HEAP32[$handle >> 2];
  $retval$0 = 0;
 } else $retval$0 = -1;
 return $retval$0 | 0;
}

function _bitshift64Lshr(low, high, bits) {
 low = low | 0;
 high = high | 0;
 bits = bits | 0;
 if ((bits | 0) < 32) {
  tempRet0 = high >>> bits;
  return low >>> bits | (high & (1 << bits) - 1) << 32 - bits;
 }
 tempRet0 = 0;
 return high >>> bits - 32 | 0;
}

function _icpSetInlierProbability($handle, $inlierProb) {
 $handle = $handle | 0;
 $inlierProb = +$inlierProb;
 var $retval$0 = 0;
 if (!$handle) $retval$0 = -1; else {
  HEAPF64[$handle + 128 >> 3] = $inlierProb;
  $retval$0 = 0;
 }
 return $retval$0 | 0;
}

function _arSetImageProcMode($handle, $mode) {
 $handle = $handle | 0;
 $mode = $mode | 0;
 var $retval$0 = 0;
 if (($handle | 0) != 0 & $mode >>> 0 < 2) {
  HEAP32[$handle + 20 >> 2] = $mode;
  $retval$0 = 0;
 } else $retval$0 = -1;
 return $retval$0 | 0;
}

function _arSetLabelingMode($handle, $mode) {
 $handle = $handle | 0;
 $mode = $mode | 0;
 var $retval$0 = 0;
 if (($handle | 0) != 0 & $mode >>> 0 < 2) {
  HEAP32[$handle + 12 >> 2] = $mode;
  $retval$0 = 0;
 } else $retval$0 = -1;
 return $retval$0 | 0;
}

function __ZN10emscripten8internal7InvokerIvJiEE6invokeEPFviEi($fn, $args) {
 $fn = $fn | 0;
 $args = $args | 0;
 var $call = 0;
 $call = __ZN10emscripten8internal11BindingTypeIiE12fromWireTypeEi($args) | 0;
 FUNCTION_TABLE_vi[$fn & 15]($call);
 return;
}

function __ZNSt3__211char_traitsIcE7compareEPKcS3_j($__s1, $__s2, $__n) {
 $__s1 = $__s1 | 0;
 $__s2 = $__s2 | 0;
 $__n = $__n | 0;
 var $retval$0 = 0;
 if (!$__n) $retval$0 = 0; else $retval$0 = _memcmp($__s1, $__s2, $__n) | 0;
 return $retval$0 | 0;
}

function ___lctrans_impl($msg, $lm) {
 $msg = $msg | 0;
 $lm = $lm | 0;
 var $trans$0 = 0;
 if (!$lm) $trans$0 = 0; else $trans$0 = ___mo_lookup(HEAP32[$lm >> 2] | 0, HEAP32[$lm + 4 >> 2] | 0, $msg) | 0;
 return ($trans$0 | 0 ? $trans$0 : $msg) | 0;
}

function _arGetPatternDetectionMode($handle, $mode) {
 $handle = $handle | 0;
 $mode = $mode | 0;
 var $retval$0 = 0;
 if (!$handle) $retval$0 = -1; else {
  HEAP32[$mode >> 2] = HEAP32[$handle + 24 >> 2];
  $retval$0 = 0;
 }
 return $retval$0 | 0;
}

function dynCall_viiiiii(index, a1, a2, a3, a4, a5, a6) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 a6 = a6 | 0;
 FUNCTION_TABLE_viiiiii[index & 3](a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0, a6 | 0);
}

function __ZSt11__terminatePFvvE($func) {
 $func = $func | 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 FUNCTION_TABLE_v[$func & 3]();
 _abort_message(14657, sp);
}

function __ZN10__cxxabiv112_GLOBAL__N_111short_allocINS0_11string_pairELj4096EE8allocateEj($this, $n) {
 $this = $this | 0;
 $n = $n | 0;
 return __ZN10__cxxabiv112_GLOBAL__N_15arenaILj4096EE8allocateEj(HEAP32[$this >> 2] | 0, $n * 24 | 0) | 0;
}

function __ZN10emscripten8internal6TypeIDINSt3__212basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEEE3getEv() {
 return __ZN10emscripten8internal11LightTypeIDINSt3__212basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEEE3getEv() | 0;
}

function __ZN10emscripten8internal6TypeIDINSt3__212basic_stringIhNS2_11char_traitsIhEENS2_9allocatorIhEEEEE3getEv() {
 return __ZN10emscripten8internal11LightTypeIDINSt3__212basic_stringIhNS2_11char_traitsIhEENS2_9allocatorIhEEEEE3getEv() | 0;
}

function __ZN10emscripten8internal6TypeIDINSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEE3getEv() {
 return __ZN10emscripten8internal11LightTypeIDINSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEE3getEv() | 0;
}

function __ZN10__cxxabiv112_GLOBAL__N_111short_allocINSt3__26vectorINS3_INS0_11string_pairENS1_IS4_Lj4096EEEEENS1_IS6_Lj4096EEEEELj4096EEC2ERNS0_5arenaILj4096EEE($this, $a) {
 $this = $this | 0;
 $a = $a | 0;
 HEAP32[$this >> 2] = $a;
 return;
}

function _byteSwapDouble($from, $to) {
 $from = $from | 0;
 $to = $to | 0;
 var $i$0 = 0;
 $i$0 = 0;
 while (1) {
  if (($i$0 | 0) == 8) break;
  HEAP8[$to + $i$0 >> 0] = HEAP8[$from + (7 - $i$0) >> 0] | 0;
  $i$0 = $i$0 + 1 | 0;
 }
 return;
}

function _arGetImageProcMode($handle, $mode) {
 $handle = $handle | 0;
 $mode = $mode | 0;
 var $retval$0 = 0;
 if (!$handle) $retval$0 = -1; else {
  HEAP32[$mode >> 2] = HEAP32[$handle + 20 >> 2];
  $retval$0 = 0;
 }
 return $retval$0 | 0;
}

function _byteSwapInt($from, $to) {
 $from = $from | 0;
 $to = $to | 0;
 var $i$0 = 0;
 $i$0 = 0;
 while (1) {
  if (($i$0 | 0) == 4) break;
  HEAP8[$to + $i$0 >> 0] = HEAP8[$from + (3 - $i$0) >> 0] | 0;
  $i$0 = $i$0 + 1 | 0;
 }
 return;
}

function _icpDeleteHandle($handle) {
 $handle = $handle | 0;
 var $0 = 0, $retval$0 = 0;
 $0 = HEAP32[$handle >> 2] | 0;
 if (!$0) $retval$0 = -1; else {
  _free($0);
  HEAP32[$handle >> 2] = 0;
  $retval$0 = 0;
 }
 return $retval$0 | 0;
}

function ___syscall_ret($r) {
 $r = $r | 0;
 var $call = 0, $retval$0 = 0;
 if ($r >>> 0 > 4294963200) {
  $call = ___errno_location() | 0;
  HEAP32[$call >> 2] = 0 - $r;
  $retval$0 = -1;
 } else $retval$0 = $r;
 return $retval$0 | 0;
}

function _arSetMatrixCodeType($handle, $type) {
 $handle = $handle | 0;
 $type = $type | 0;
 var $retval$0 = 0;
 if (!$handle) $retval$0 = -1; else {
  HEAP32[$handle + 7062424 >> 2] = $type;
  $retval$0 = 0;
 }
 return $retval$0 | 0;
}

function __ZN10__cxxabiv112_GLOBAL__N_111short_allocINSt3__26vectorINS0_11string_pairENS1_IS4_Lj4096EEEEELj4096EEC2IS4_EERKNS1_IT_Lj4096EEE($this, $a) {
 $this = $this | 0;
 $a = $a | 0;
 HEAP32[$this >> 2] = HEAP32[$a >> 2];
 return;
}
function stackAlloc(size) {
 size = size | 0;
 var ret = 0;
 ret = STACKTOP;
 STACKTOP = STACKTOP + size | 0;
 STACKTOP = STACKTOP + 15 & -16;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(size | 0);
 return ret | 0;
}

function runPostSets() {}
function _i64Subtract(a, b, c, d) {
 a = a | 0;
 b = b | 0;
 c = c | 0;
 d = d | 0;
 var h = 0;
 h = b - d >>> 0;
 h = b - d - (c >>> 0 > a >>> 0 | 0) >>> 0;
 return (tempRet0 = h, a - c >>> 0 | 0) | 0;
}

function _arImageProcLumaHistAndCDFAndMedian($ipi, $dataPtr, $value_p) {
 $ipi = $ipi | 0;
 $dataPtr = $dataPtr | 0;
 $value_p = $value_p | 0;
 return _arImageProcLumaHistAndCDFAndPercentile($ipi, $dataPtr, .5, $value_p) | 0;
}

function __ZN10__cxxabiv112_GLOBAL__N_111short_allocINSt3__26vectorINS0_11string_pairENS1_IS4_Lj4096EEEEELj4096EEC2ERNS0_5arenaILj4096EEE($this, $a) {
 $this = $this | 0;
 $a = $a | 0;
 HEAP32[$this >> 2] = $a;
 return;
}

function dynCall_viiiii(index, a1, a2, a3, a4, a5) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 FUNCTION_TABLE_viiiii[index & 3](a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0);
}

function __ZNSt3__214__ptr_in_rangeIcEEbPKT_S3_S3_($__p, $__first, $__last) {
 $__p = $__p | 0;
 $__first = $__first | 0;
 $__last = $__last | 0;
 return $__first >>> 0 <= $__p >>> 0 & $__p >>> 0 < $__last >>> 0 | 0;
}

function __ZN10__cxxabiv112_GLOBAL__N_110save_valueIbEC2ERb($this, $restore) {
 $this = $this | 0;
 $restore = $restore | 0;
 HEAP32[$this >> 2] = $restore;
 HEAP8[$this + 4 >> 0] = HEAP8[$restore >> 0] | 0;
 return;
}

function __ZN10__cxxabiv112_GLOBAL__N_110save_valueIjEC2ERj($this, $restore) {
 $this = $this | 0;
 $restore = $restore | 0;
 HEAP32[$this >> 2] = $restore;
 HEAP32[$this + 4 >> 2] = HEAP32[$restore >> 2];
 return;
}

function __ZN12_GLOBAL__N_1L20register_memory_viewItEEvPKc($name) {
 $name = $name | 0;
 __embind_register_memory_view(__ZN10emscripten8internal6TypeIDINS_11memory_viewItEEE3getEv() | 0, 3, $name | 0);
 return;
}

function __ZN12_GLOBAL__N_1L20register_memory_viewIsEEvPKc($name) {
 $name = $name | 0;
 __embind_register_memory_view(__ZN10emscripten8internal6TypeIDINS_11memory_viewIsEEE3getEv() | 0, 2, $name | 0);
 return;
}

function __ZN12_GLOBAL__N_1L20register_memory_viewIjEEvPKc($name) {
 $name = $name | 0;
 __embind_register_memory_view(__ZN10emscripten8internal6TypeIDINS_11memory_viewIjEEE3getEv() | 0, 5, $name | 0);
 return;
}

function __ZN12_GLOBAL__N_1L20register_memory_viewIiEEvPKc($name) {
 $name = $name | 0;
 __embind_register_memory_view(__ZN10emscripten8internal6TypeIDINS_11memory_viewIiEEE3getEv() | 0, 4, $name | 0);
 return;
}

function __ZN12_GLOBAL__N_1L20register_memory_viewIhEEvPKc($name) {
 $name = $name | 0;
 __embind_register_memory_view(__ZN10emscripten8internal6TypeIDINS_11memory_viewIhEEE3getEv() | 0, 1, $name | 0);
 return;
}

function __ZN12_GLOBAL__N_1L20register_memory_viewIaEEvPKc($name) {
 $name = $name | 0;
 __embind_register_memory_view(__ZN10emscripten8internal6TypeIDINS_11memory_viewIaEEE3getEv() | 0, 0, $name | 0);
 return;
}

function __ZNSt3__211char_traitsIcE4moveEPcPKcj($__s1, $__s2, $__n) {
 $__s1 = $__s1 | 0;
 $__s2 = $__s2 | 0;
 $__n = $__n | 0;
 if ($__n | 0) _memmove($__s1 | 0, $__s2 | 0, $__n | 0) | 0;
 return $__s1 | 0;
}

function __ZNKSt3__26vectorINS0_INS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEENS4_IS6_Lj4096EEEEENS4_IS8_Lj4096EEEE8max_sizeEv($this) {
 $this = $this | 0;
 return 268435455;
}

function __ZNSt3__211char_traitsIcE4copyEPcPKcj($__s1, $__s2, $__n) {
 $__s1 = $__s1 | 0;
 $__s2 = $__s2 | 0;
 $__n = $__n | 0;
 if ($__n | 0) _memcpy($__s1 | 0, $__s2 | 0, $__n | 0) | 0;
 return $__s1 | 0;
}

function ___DOUBLE_BITS_685($__f) {
 $__f = +$__f;
 var $0 = 0;
 HEAPF64[tempDoublePtr >> 3] = $__f;
 $0 = HEAP32[tempDoublePtr >> 2] | 0;
 tempRet0 = HEAP32[tempDoublePtr + 4 >> 2] | 0;
 return $0 | 0;
}

function ___DOUBLE_BITS_272($__f) {
 $__f = +$__f;
 var $0 = 0;
 HEAPF64[tempDoublePtr >> 3] = $__f;
 $0 = HEAP32[tempDoublePtr >> 2] | 0;
 tempRet0 = HEAP32[tempDoublePtr + 4 >> 2] | 0;
 return $0 | 0;
}

function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJiiiiEE8getTypesEv($this) {
 $this = $this | 0;
 return __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJiiiiEEEE3getEv() | 0;
}

function dynCall_iiiii(index, a1, a2, a3, a4) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 return FUNCTION_TABLE_iiiii[index & 1](a1 | 0, a2 | 0, a3 | 0, a4 | 0) | 0;
}

function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJviiEE8getTypesEv($this) {
 $this = $this | 0;
 return __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJviiEEEE3getEv() | 0;
}

function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvifEE8getTypesEv($this) {
 $this = $this | 0;
 return __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJvifEEEE3getEv() | 0;
}

function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvidEE8getTypesEv($this) {
 $this = $this | 0;
 return __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJvidEEEE3getEv() | 0;
}

function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJiiiEE8getTypesEv($this) {
 $this = $this | 0;
 return __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJiiiEEEE3getEv() | 0;
}

function __ZN10__cxxabiv112_GLOBAL__N_15arenaILj4096EE17pointer_in_bufferEPc($this, $p) {
 $this = $this | 0;
 $p = $p | 0;
 return $this >>> 0 <= $p >>> 0 & ($this + 4096 | 0) >>> 0 >= $p >>> 0 | 0;
}

function _arImageProcFinal($ipi) {
 $ipi = $ipi | 0;
 if ($ipi | 0) {
  if (HEAP32[$ipi + 2076 >> 2] | 0) _free(HEAP32[$ipi >> 2] | 0);
  _free(HEAP32[$ipi + 4 >> 2] | 0);
  _free($ipi);
 }
 return;
}

function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJviEE8getTypesEv($this) {
 $this = $this | 0;
 return __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJviEEEE3getEv() | 0;
}

function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJiiEE8getTypesEv($this) {
 $this = $this | 0;
 return __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJiiEEEE3getEv() | 0;
}

function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJdiEE8getTypesEv($this) {
 $this = $this | 0;
 return __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJdiEEEE3getEv() | 0;
}

function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJiEE8getTypesEv($this) {
 $this = $this | 0;
 return __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJiEEEE3getEv() | 0;
}

function ___cxx_global_var_init_1() {
 HEAP32[4291] = 0;
 HEAP32[4292] = 0;
 HEAP32[4293] = 0;
 HEAP32[4294] = 0;
 HEAPF32[4295] = 1.0;
 ___cxa_atexit(12, 17164, ___dso_handle | 0) | 0;
 return;
}

function ___cxx_global_var_init() {
 HEAP32[4286] = 0;
 HEAP32[4287] = 0;
 HEAP32[4288] = 0;
 HEAP32[4289] = 0;
 HEAPF32[4290] = 1.0;
 ___cxa_atexit(11, 17144, ___dso_handle | 0) | 0;
 return;
}

function dynCall_viiii(index, a1, a2, a3, a4) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 FUNCTION_TABLE_viiii[index & 3](a1 | 0, a2 | 0, a3 | 0, a4 | 0);
}

function _icpGetXw2XcCleanup_295($J_U_S, $dU, $E, $E2) {
 $J_U_S = $J_U_S | 0;
 $dU = $dU | 0;
 $E = $E | 0;
 $E2 = $E2 | 0;
 _free($J_U_S);
 _free($dU);
 _free($E);
 _free($E2);
 return;
}

function __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($this) {
 $this = $this | 0;
 if ((HEAP8[$this + 11 >> 0] | 0) < 0) __ZdlPv(HEAP32[$this >> 2] | 0);
 return;
}

function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJiiNSt3__212basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEEE8getCountEv($this) {
 $this = $this | 0;
 return 3;
}

function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJiNSt3__212basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEEE8getCountEv($this) {
 $this = $this | 0;
 return 2;
}

function __ZN10__cxxabiv112_GLOBAL__N_111short_allocINS0_11string_pairELj4096EEC2ERNS0_5arenaILj4096EEE($this, $a) {
 $this = $this | 0;
 $a = $a | 0;
 HEAP32[$this >> 2] = $a;
 return;
}

function __ZNSt11logic_errorC2EPKc($this, $msg) {
 $this = $this | 0;
 $msg = $msg | 0;
 HEAP32[$this >> 2] = 3156;
 __ZNSt3__218__libcpp_refstringC2EPKc($this + 4 | 0, $msg);
 return;
}

function __ZNKSt3__26vectorINS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEENS4_IS6_Lj4096EEEE8max_sizeEv($this) {
 $this = $this | 0;
 return 268435455;
}

function _strchr($s, $c) {
 $s = $s | 0;
 $c = $c | 0;
 var $call = 0;
 $call = ___strchrnul($s, $c) | 0;
 return ((HEAP8[$call >> 0] | 0) == ($c & 255) << 24 >> 24 ? $call : 0) | 0;
}

function __ZN12_GLOBAL__N_1L20register_memory_viewImEEvPKc() {
 __embind_register_memory_view(__ZN10emscripten8internal6TypeIDINS_11memory_viewImEEE3getEv() | 0, 5, 11004);
 return;
}

function __ZN12_GLOBAL__N_1L20register_memory_viewIlEEvPKc() {
 __embind_register_memory_view(__ZN10emscripten8internal6TypeIDINS_11memory_viewIlEEE3getEv() | 0, 4, 11074);
 return;
}

function __ZN12_GLOBAL__N_1L20register_memory_viewIfEEvPKc() {
 __embind_register_memory_view(__ZN10emscripten8internal6TypeIDINS_11memory_viewIfEEE3getEv() | 0, 6, 10942);
 return;
}

function __ZN12_GLOBAL__N_1L20register_memory_viewIeEEvPKc() {
 __embind_register_memory_view(__ZN10emscripten8internal6TypeIDINS_11memory_viewIeEEE3getEv() | 0, 7, 10811);
 return;
}

function __ZN12_GLOBAL__N_1L20register_memory_viewIdEEvPKc() {
 __embind_register_memory_view(__ZN10emscripten8internal6TypeIDINS_11memory_viewIdEEE3getEv() | 0, 7, 10879);
 return;
}

function __ZN12_GLOBAL__N_1L20register_memory_viewIcEEvPKc() {
 __embind_register_memory_view(__ZN10emscripten8internal6TypeIDINS_11memory_viewIcEEE3getEv() | 0, 0, 11321);
 return;
}

function _i64Add(a, b, c, d) {
 a = a | 0;
 b = b | 0;
 c = c | 0;
 d = d | 0;
 var l = 0;
 l = a + c >>> 0;
 return (tempRet0 = b + d + (l >>> 0 < a >>> 0 | 0) >>> 0, l | 0) | 0;
}

function __ZN12_GLOBAL__N_1L16register_integerIlEEvPKc() {
 __embind_register_integer(__ZN10emscripten8internal6TypeIDIlE3getEv() | 0, 16351, 4, -2147483648, 2147483647);
 return;
}

function __ZN12_GLOBAL__N_1L16register_integerIiEEvPKc() {
 __embind_register_integer(__ZN10emscripten8internal6TypeIDIiE3getEv() | 0, 16334, 4, -2147483648, 2147483647);
 return;
}

function dynCall_iiii(index, a1, a2, a3) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 return FUNCTION_TABLE_iiii[index & 15](a1 | 0, a2 | 0, a3 | 0) | 0;
}

function ___udivdi3($a$0, $a$1, $b$0, $b$1) {
 $a$0 = $a$0 | 0;
 $a$1 = $a$1 | 0;
 $b$0 = $b$0 | 0;
 $b$1 = $b$1 | 0;
 return ___udivmoddi4($a$0, $a$1, $b$0, $b$1, 0) | 0;
}

function _fputs($s, $f) {
 $s = $s | 0;
 $f = $f | 0;
 var $call = 0;
 $call = _strlen($s) | 0;
 return ((_fwrite($s, 1, $call, $f) | 0) != ($call | 0)) << 31 >> 31 | 0;
}

function _dot($a1, $a2, $a3, $b1, $b2, $b3) {
 $a1 = +$a1;
 $a2 = +$a2;
 $a3 = +$a3;
 $b1 = +$b1;
 $b2 = +$b2;
 $b3 = +$b3;
 return +($a1 * $b1 + $a2 * $b2 + $a3 * $b3);
}

function __ZN12_GLOBAL__N_1L16register_integerIsEEvPKc() {
 __embind_register_integer(__ZN10emscripten8internal6TypeIDIsE3getEv() | 0, 16129, 2, -32768, 32767);
 return;
}

function _wctomb($s, $wc) {
 $s = $s | 0;
 $wc = $wc | 0;
 var $retval$0 = 0;
 if (!$s) $retval$0 = 0; else $retval$0 = _wcrtomb($s, $wc, 0) | 0;
 return $retval$0 | 0;
}

function _compE($a, $b) {
 $a = $a | 0;
 $b = $b | 0;
 var $sub = 0.0;
 $sub = +HEAPF64[$a >> 3] - +HEAPF64[$b >> 3];
 return ($sub < 0.0 ? -1 : $sub > 0.0 & 1) | 0;
}

function __ZN12_GLOBAL__N_1L16register_integerIcEEvPKc() {
 __embind_register_integer(__ZN10emscripten8internal6TypeIDIcE3getEv() | 0, 16098, 1, -128, 127);
 return;
}

function __ZN12_GLOBAL__N_1L16register_integerIaEEvPKc() {
 __embind_register_integer(__ZN10emscripten8internal6TypeIDIaE3getEv() | 0, 16103, 1, -128, 127);
 return;
}

function __ZN12_GLOBAL__N_1L16register_integerItEEvPKc() {
 __embind_register_integer(__ZN10emscripten8internal6TypeIDItE3getEv() | 0, 16135, 2, 0, 65535);
 return;
}

function _strerror($e) {
 $e = $e | 0;
 var $locale = 0;
 $locale = (___pthread_self_104() | 0) + 188 | 0;
 return ___strerror_l($e, HEAP32[$locale >> 2] | 0) | 0;
}

function _arMatrixSelfInv($m) {
 $m = $m | 0;
 var $1 = 0;
 $1 = HEAP32[$m + 4 >> 2] | 0;
 return ((_minv(HEAP32[$m >> 2] | 0, $1, $1) | 0) == 0) << 31 >> 31 | 0;
}

function __ZN12_GLOBAL__N_1L16register_integerIhEEvPKc() {
 __embind_register_integer(__ZN10emscripten8internal6TypeIDIhE3getEv() | 0, 16115, 1, 0, 255);
 return;
}

function dynCall_viii(index, a1, a2, a3) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 FUNCTION_TABLE_viii[index & 1](a1 | 0, a2 | 0, a3 | 0);
}

function __ZN12_GLOBAL__N_1L16register_integerImEEvPKc() {
 __embind_register_integer(__ZN10emscripten8internal6TypeIDImE3getEv() | 0, 16356, 4, 0, -1);
 return;
}

function __ZN12_GLOBAL__N_1L16register_integerIjEEvPKc() {
 __embind_register_integer(__ZN10emscripten8internal6TypeIDIjE3getEv() | 0, 16338, 4, 0, -1);
 return;
}

function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJiiNSt3__212basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEEEE3getEv() {
 return 1772;
}

function __ZNKSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE8max_sizeEv($this) {
 $this = $this | 0;
 return 178956970;
}

function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJiNSt3__212basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEEEE3getEv() {
 return 1752;
}

function __ZNSt3__211char_traitsIcE6assignERcRKc($__c1, $__c2) {
 $__c1 = $__c1 | 0;
 $__c2 = $__c2 | 0;
 HEAP8[$__c1 >> 0] = HEAP8[$__c2 >> 0] | 0;
 return;
}

function __ZN10__cxxabiv123__fundamental_type_infoD0Ev($this) {
 $this = $this | 0;
 __ZN10__cxxabiv116__shim_type_infoD2Ev($this);
 __ZdlPv($this);
 return;
}

function __ZN10__cxxabiv112_GLOBAL__N_110save_valueIbED2Ev($this) {
 $this = $this | 0;
 HEAP8[HEAP32[$this >> 2] >> 0] = HEAP8[$this + 4 >> 0] | 0;
 return;
}

function dynCall_viid(index, a1, a2, a3) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = +a3;
 FUNCTION_TABLE_viid[index & 3](a1 | 0, a2 | 0, +a3);
}

function __ZN10emscripten8internal6TypeIDINS_11memory_viewItEEE3getEv() {
 return __ZN10emscripten8internal11LightTypeIDINS_11memory_viewItEEE3getEv() | 0;
}

function __ZN10emscripten8internal6TypeIDINS_11memory_viewIsEEE3getEv() {
 return __ZN10emscripten8internal11LightTypeIDINS_11memory_viewIsEEE3getEv() | 0;
}

function __ZN10emscripten8internal6TypeIDINS_11memory_viewImEEE3getEv() {
 return __ZN10emscripten8internal11LightTypeIDINS_11memory_viewImEEE3getEv() | 0;
}

function __ZN10emscripten8internal6TypeIDINS_11memory_viewIlEEE3getEv() {
 return __ZN10emscripten8internal11LightTypeIDINS_11memory_viewIlEEE3getEv() | 0;
}

function __ZN10emscripten8internal6TypeIDINS_11memory_viewIjEEE3getEv() {
 return __ZN10emscripten8internal11LightTypeIDINS_11memory_viewIjEEE3getEv() | 0;
}

function __ZN10emscripten8internal6TypeIDINS_11memory_viewIiEEE3getEv() {
 return __ZN10emscripten8internal11LightTypeIDINS_11memory_viewIiEEE3getEv() | 0;
}

function __ZN10emscripten8internal6TypeIDINS_11memory_viewIhEEE3getEv() {
 return __ZN10emscripten8internal11LightTypeIDINS_11memory_viewIhEEE3getEv() | 0;
}

function __ZN10emscripten8internal6TypeIDINS_11memory_viewIfEEE3getEv() {
 return __ZN10emscripten8internal11LightTypeIDINS_11memory_viewIfEEE3getEv() | 0;
}

function __ZN10emscripten8internal6TypeIDINS_11memory_viewIeEEE3getEv() {
 return __ZN10emscripten8internal11LightTypeIDINS_11memory_viewIeEEE3getEv() | 0;
}

function __ZN10emscripten8internal6TypeIDINS_11memory_viewIdEEE3getEv() {
 return __ZN10emscripten8internal11LightTypeIDINS_11memory_viewIdEEE3getEv() | 0;
}

function __ZN10emscripten8internal6TypeIDINS_11memory_viewIcEEE3getEv() {
 return __ZN10emscripten8internal11LightTypeIDINS_11memory_viewIcEEE3getEv() | 0;
}

function __ZN10emscripten8internal6TypeIDINS_11memory_viewIaEEE3getEv() {
 return __ZN10emscripten8internal11LightTypeIDINS_11memory_viewIaEEE3getEv() | 0;
}

function __ZN10__cxxabiv121__vmi_class_type_infoD0Ev($this) {
 $this = $this | 0;
 __ZN10__cxxabiv116__shim_type_infoD2Ev($this);
 __ZdlPv($this);
 return;
}

function __ZN10__cxxabiv112_GLOBAL__N_110save_valueIjED2Ev($this) {
 $this = $this | 0;
 HEAP32[HEAP32[$this >> 2] >> 2] = HEAP32[$this + 4 >> 2];
 return;
}

function __ZN10__cxxabiv120__si_class_type_infoD0Ev($this) {
 $this = $this | 0;
 __ZN10__cxxabiv116__shim_type_infoD2Ev($this);
 __ZdlPv($this);
 return;
}

function __ZN12arControllerD2Ev($this) {
 $this = $this | 0;
 __ZNSt3__213__vector_baseI12multi_markerNS_9allocatorIS1_EEED2Ev($this + 248 | 0);
 return;
}

function establishStackSpace(stackBase, stackMax) {
 stackBase = stackBase | 0;
 stackMax = stackMax | 0;
 STACKTOP = stackBase;
 STACK_MAX = stackMax;
}

function __ZN10__cxxabiv117__class_type_infoD0Ev($this) {
 $this = $this | 0;
 __ZN10__cxxabiv116__shim_type_infoD2Ev($this);
 __ZdlPv($this);
 return;
}

function __ZNSt11logic_errorD2Ev($this) {
 $this = $this | 0;
 HEAP32[$this >> 2] = 3156;
 __ZNSt3__218__libcpp_refstringD2Ev($this + 4 | 0);
 return;
}

function __ZN12_GLOBAL__N_1L14register_floatIfEEvPKc() {
 __embind_register_float(__ZN10emscripten8internal6TypeIDIfE3getEv() | 0, 16380, 4);
 return;
}

function __ZN12_GLOBAL__N_1L14register_floatIdEEvPKc() {
 __embind_register_float(__ZN10emscripten8internal6TypeIDIdE3getEv() | 0, 16492, 8);
 return;
}

function _swapc($x, $c) {
 $x = $x | 0;
 $c = $c | 0;
 var $or5 = 0;
 $or5 = _llvm_bswap_i32($x | 0) | 0;
 return (($c | 0) == 0 ? $x : $or5) | 0;
}

function dynCall_iii(index, a1, a2) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 return FUNCTION_TABLE_iii[index & 15](a1 | 0, a2 | 0) | 0;
}

function b13(p0, p1, p2, p3, p4, p5) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 p5 = p5 | 0;
 nullFunc_viiiiii(13);
}

function __ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($x, $y, $0) {
 $x = $x | 0;
 $y = $y | 0;
 $0 = $0 | 0;
 return ($x | 0) == ($y | 0) | 0;
}

function dynCall_dii(index, a1, a2) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 return +FUNCTION_TABLE_dii[index & 1](a1 | 0, a2 | 0);
}

function __GLOBAL__sub_I_ARToolKitJS_cpp() {
 ___cxx_global_var_init();
 ___cxx_global_var_init_1();
 ___cxx_global_var_init_22();
 return;
}

function setThrew(threw, value) {
 threw = threw | 0;
 value = value | 0;
 if (!__THREW__) {
  __THREW__ = threw;
  threwValue = value;
 }
}

function _out($f, $s, $l) {
 $f = $f | 0;
 $s = $s | 0;
 $l = $l | 0;
 if (!(HEAP32[$f >> 2] & 32)) ___fwritex($s, $l, $f) | 0;
 return;
}

function __ZN10emscripten8internal11LightTypeIDINSt3__212basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEEE3getEv() {
 return 144;
}

function __ZN10emscripten8internal11LightTypeIDINSt3__212basic_stringIhNS2_11char_traitsIhEENS2_9allocatorIhEEEEE3getEv() {
 return 168;
}

function _fseek($f, $off, $whence) {
 $f = $f | 0;
 $off = $off | 0;
 $whence = $whence | 0;
 return ___fseeko($f, $off, $whence) | 0;
}

function __ZN10emscripten8internal11LightTypeIDINSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEE3getEv() {
 return 8;
}

function dynCall_vii(index, a1, a2) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 FUNCTION_TABLE_vii[index & 7](a1 | 0, a2 | 0);
}

function __ZNKSt11logic_error4whatEv($this) {
 $this = $this | 0;
 return __ZNKSt3__218__libcpp_refstring5c_strEv($this + 4 | 0) | 0;
}

function __ZN10__cxxabiv112_GLOBAL__N_15arenaILj4096EEC2Ev($this) {
 $this = $this | 0;
 HEAP32[$this + 4096 >> 2] = $this;
 return;
}

function _mbsinit($st) {
 $st = $st | 0;
 var $1 = 0;
 if (!$st) $1 = 1; else $1 = (HEAP32[$st >> 2] | 0) == 0;
 return $1 & 1 | 0;
}

function __ZNSt3__215__refstring_imp12_GLOBAL__N_113rep_from_dataEPKc_567($data_) {
 $data_ = $data_ | 0;
 return $data_ + -12 | 0;
}

function __ZNSt3__215__refstring_imp12_GLOBAL__N_113data_from_repEPNS1_9_Rep_baseE($rep) {
 $rep = $rep | 0;
 return $rep + 12 | 0;
}

function __ZN10emscripten8internal6TypeIDINS_3valEE3getEv() {
 return __ZN10emscripten8internal11LightTypeIDINS_3valEE3getEv() | 0;
}

function _do_read($f, $buf, $len) {
 $f = $f | 0;
 $buf = $buf | 0;
 $len = $len | 0;
 return ___string_read($f, $buf, $len) | 0;
}

function __ZN10__cxxabiv112_GLOBAL__N_15arenaILj4096EED2Ev($this) {
 $this = $this | 0;
 HEAP32[$this + 4096 >> 2] = 0;
 return;
}

function dynCall_vid(index, a1, a2) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = +a2;
 FUNCTION_TABLE_vid[index & 3](a1 | 0, +a2);
}

function _llvm_bswap_i32(x) {
 x = x | 0;
 return (x & 255) << 24 | (x >> 8 & 255) << 16 | (x >> 16 & 255) << 8 | x >>> 24 | 0;
}

function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJiiiiEE8getCountEv($this) {
 $this = $this | 0;
 return 4;
}

function b1(p0, p1, p2, p3, p4) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 nullFunc_viiiii(1);
}

function _arMultiFreeConfig($config) {
 $config = $config | 0;
 _free(HEAP32[$config >> 2] | 0);
 _free($config);
 return 0;
}

function __ZNSt3__24pairIKi12arControllerED2Ev($this) {
 $this = $this | 0;
 __ZN12arControllerD2Ev($this + 8 | 0);
 return;
}

function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJviiEE8getCountEv($this) {
 $this = $this | 0;
 return 3;
}

function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvifEE8getCountEv($this) {
 $this = $this | 0;
 return 3;
}

function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvidEE8getCountEv($this) {
 $this = $this | 0;
 return 3;
}

function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJiiiEE8getCountEv($this) {
 $this = $this | 0;
 return 3;
}

function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJviEE8getCountEv($this) {
 $this = $this | 0;
 return 2;
}

function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJiiEE8getCountEv($this) {
 $this = $this | 0;
 return 2;
}

function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJdiEE8getCountEv($this) {
 $this = $this | 0;
 return 2;
}

function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJiEE8getCountEv($this) {
 $this = $this | 0;
 return 1;
}

function __ZNSt12length_errorD0Ev($this) {
 $this = $this | 0;
 __ZNSt11logic_errorD2Ev($this);
 __ZdlPv($this);
 return;
}

function __ZNKSt3__26vectorI12multi_markerNS_9allocatorIS1_EEE8max_sizeEv($this) {
 $this = $this | 0;
 return 536870911;
}

function __ZN10emscripten8internal6TypeIDIRKiE3getEv() {
 return __ZN10emscripten8internal11LightTypeIDIRKiE3getEv() | 0;
}

function __ZN10emscripten8internal6TypeIDIRKdE3getEv() {
 return __ZN10emscripten8internal11LightTypeIDIRKdE3getEv() | 0;
}

function __ZNSt11logic_errorD0Ev($this) {
 $this = $this | 0;
 __ZNSt11logic_errorD2Ev($this);
 __ZdlPv($this);
 return;
}

function _icpGetXw2XcCleanup($J_U_S, $dU) {
 $J_U_S = $J_U_S | 0;
 $dU = $dU | 0;
 _free($J_U_S);
 _free($dU);
 return;
}

function b12(p0, p1, p2, p3) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 nullFunc_iiiii(12);
 return 0;
}

function _strncpy($d, $s, $n) {
 $d = $d | 0;
 $s = $s | 0;
 $n = $n | 0;
 ___stpncpy($d, $s, $n) | 0;
 return $d | 0;
}

function dynCall_ii(index, a1) {
 index = index | 0;
 a1 = a1 | 0;
 return FUNCTION_TABLE_ii[index & 31](a1 | 0) | 0;
}

function _strcpy($dest, $src) {
 $dest = $dest | 0;
 $src = $src | 0;
 ___stpcpy($dest, $src) | 0;
 return $dest | 0;
}

function _isxdigit($c) {
 $c = $c | 0;
 return (($c + -48 | 0) >>> 0 < 10 | (($c | 32) + -97 | 0) >>> 0 < 6) & 1 | 0;
}

function ___cxx_global_var_init_127() {
 __ZN53EmscriptenBindingInitializer_native_and_builtin_typesC2Ev(0);
 return;
}

function __ZN10emscripten8internal6TypeIDIvE3getEv() {
 return __ZN10emscripten8internal11LightTypeIDIvE3getEv() | 0;
}

function __ZN10emscripten8internal6TypeIDItE3getEv() {
 return __ZN10emscripten8internal11LightTypeIDItE3getEv() | 0;
}

function __ZN10emscripten8internal6TypeIDIsE3getEv() {
 return __ZN10emscripten8internal11LightTypeIDIsE3getEv() | 0;
}

function __ZN10emscripten8internal6TypeIDImE3getEv() {
 return __ZN10emscripten8internal11LightTypeIDImE3getEv() | 0;
}

function __ZN10emscripten8internal6TypeIDIlE3getEv() {
 return __ZN10emscripten8internal11LightTypeIDIlE3getEv() | 0;
}

function __ZN10emscripten8internal6TypeIDIjE3getEv() {
 return __ZN10emscripten8internal11LightTypeIDIjE3getEv() | 0;
}

function __ZN10emscripten8internal6TypeIDIiE3getEv() {
 return __ZN10emscripten8internal11LightTypeIDIiE3getEv() | 0;
}

function __ZN10emscripten8internal6TypeIDIhE3getEv() {
 return __ZN10emscripten8internal11LightTypeIDIhE3getEv() | 0;
}

function __ZN10emscripten8internal6TypeIDIfE3getEv() {
 return __ZN10emscripten8internal11LightTypeIDIfE3getEv() | 0;
}

function __ZN10emscripten8internal6TypeIDIdE3getEv() {
 return __ZN10emscripten8internal11LightTypeIDIdE3getEv() | 0;
}

function __ZN10emscripten8internal6TypeIDIcE3getEv() {
 return __ZN10emscripten8internal11LightTypeIDIcE3getEv() | 0;
}

function __ZN10emscripten8internal6TypeIDIbE3getEv() {
 return __ZN10emscripten8internal11LightTypeIDIbE3getEv() | 0;
}

function __ZN10emscripten8internal6TypeIDIaE3getEv() {
 return __ZN10emscripten8internal11LightTypeIDIaE3getEv() | 0;
}

function _norm($a, $b, $c) {
 $a = +$a;
 $b = +$b;
 $c = +$c;
 return +(+Math_sqrt(+($a * $a + $b * $b + $c * $c)));
}

function __ZN10emscripten8internal11BindingTypeIdE10toWireTypeERKd($v) {
 $v = $v | 0;
 return +(+HEAPF64[$v >> 3]);
}

function __ZN10emscripten8internal11BindingTypeIiE10toWireTypeERKi($v) {
 $v = $v | 0;
 return HEAP32[$v >> 2] | 0;
}

function _strrchr($s, $c) {
 $s = $s | 0;
 $c = $c | 0;
 return ___memrchr($s, $c, (_strlen($s) | 0) + 1 | 0) | 0;
}

function _arMatrixFree($m) {
 $m = $m | 0;
 if ($m | 0) {
  _free(HEAP32[$m >> 2] | 0);
  _free($m);
 }
 return 0;
}

function _ar3DCreateHandle($arParam) {
 $arParam = $arParam | 0;
 return _ar3DCreateHandle2($arParam + 8 | 0) | 0;
}

function dynCall_di(index, a1) {
 index = index | 0;
 a1 = a1 | 0;
 return +FUNCTION_TABLE_di[index & 3](a1 | 0);
}

function __ZSt15get_new_handlerv() {
 var $0 = 0;
 $0 = HEAP32[4445] | 0;
 HEAP32[4445] = $0 + 0;
 return $0 | 0;
}

function __ZNKSt3__221__basic_string_commonILb1EE20__throw_out_of_rangeEv($this) {
 $this = $this | 0;
 _abort();
}

function __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($this) {
 $this = $this | 0;
 _abort();
}

function __ZN10__cxxabiv112_GLOBAL__N_112malloc_allocIcE10deallocateEPcj($p) {
 $p = $p | 0;
 _free($p);
 return;
}

function __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv($this) {
 $this = $this | 0;
 _abort();
}

function __ZN10__cxxabiv112_GLOBAL__N_15arenaILj4096EE8align_upEj($n) {
 $n = $n | 0;
 return $n + 15 & -16 | 0;
}

function __ZN10__cxxabiv112_GLOBAL__N_112malloc_allocIcE8allocateEj($n) {
 $n = $n | 0;
 return _malloc($n) | 0;
}

function ___cxx_global_var_init_22() {
 __ZN46EmscriptenBindingInitializer_constant_bindingsC2Ev(0);
 return;
}

function __ZSt13get_terminatev() {
 var $0 = 0;
 $0 = HEAP32[765] | 0;
 HEAP32[765] = $0 + 0;
 return $0 | 0;
}

function __ZNKSt3__218__libcpp_refstring5c_strEv($this) {
 $this = $this | 0;
 return HEAP32[$this >> 2] | 0;
}

function b15(p0, p1, p2, p3) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 nullFunc_viiii(15);
}

function dynCall_vi(index, a1) {
 index = index | 0;
 a1 = a1 | 0;
 FUNCTION_TABLE_vi[index & 15](a1 | 0);
}

function ___lctrans($msg, $lm) {
 $msg = $msg | 0;
 $lm = $lm | 0;
 return ___lctrans_impl($msg, $lm) | 0;
}

function ___clang_call_terminate($0) {
 $0 = $0 | 0;
 ___cxa_begin_catch($0 | 0) | 0;
 __ZSt9terminatev();
}

function __ZN10emscripten8internal11BindingTypeIiE12fromWireTypeEi($v) {
 $v = $v | 0;
 return $v | 0;
}

function __ZNSt3__211char_traitsIcE6lengthEPKc($__s) {
 $__s = $__s | 0;
 return _strlen($__s) | 0;
}

function __ZNKSt3__218__libcpp_refstring15__uses_refcountEv($this) {
 $this = $this | 0;
 return 1;
}

function __ZN10emscripten8internal14asGenericValueIdEEjT_($t) {
 $t = +$t;
 return ~~$t >>> 0 | 0;
}

function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJiiiiEEEE3getEv() {
 return 1792;
}

function b0(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 nullFunc_iiii(0);
 return 0;
}

function _isspace($c) {
 $c = $c | 0;
 return (($c | 0) == 32 | ($c + -9 | 0) >>> 0 < 5) & 1 | 0;
}

function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJviiEEEE3getEv() {
 return 1708;
}

function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJvifEEEE3getEv() {
 return 1696;
}

function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJvidEEEE3getEv() {
 return 1728;
}

function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJiiiEEEE3getEv() {
 return 1760;
}

function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJviEEEE3getEv() {
 return 1744;
}

function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJiiEEEE3getEv() {
 return 1784;
}

function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJdiEEEE3getEv() {
 return 1720;
}

function __ZN10emscripten8internal11BindingTypeIfE12fromWireTypeEf($v) {
 $v = +$v;
 return +$v;
}

function __ZN10emscripten8internal11BindingTypeIdE12fromWireTypeEd($v) {
 $v = +$v;
 return +$v;
}

function ___getTypeName($ti) {
 $ti = $ti | 0;
 return ___strdup(HEAP32[$ti + 4 >> 2] | 0) | 0;
}

function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJiEEEE3getEv() {
 return 1740;
}

function __ZN10emscripten8internal14asGenericValueIiEEjT_($t) {
 $t = $t | 0;
 return $t | 0;
}

function __ZN10emscripten8internal11LightTypeIDINS_11memory_viewIsEEE3getEv() {
 return 104;
}

function __ZN10emscripten8internal11LightTypeIDINS_11memory_viewIhEEE3getEv() {
 return 112;
}

function __ZN10emscripten8internal11LightTypeIDINS_11memory_viewIcEEE3getEv() {
 return 128;
}

function __ZN10emscripten8internal11LightTypeIDINS_11memory_viewIaEEE3getEv() {
 return 120;
}

function _arVecFree($v) {
 $v = $v | 0;
 _free(HEAP32[$v >> 2] | 0);
 _free($v);
 return 0;
}

function __ZN10emscripten8internal11LightTypeIDINS_11memory_viewItEEE3getEv() {
 return 96;
}

function __ZN10emscripten8internal11LightTypeIDINS_11memory_viewImEEE3getEv() {
 return 64;
}

function __ZN10emscripten8internal11LightTypeIDINS_11memory_viewIlEEE3getEv() {
 return 72;
}

function __ZN10emscripten8internal11LightTypeIDINS_11memory_viewIjEEE3getEv() {
 return 80;
}

function __ZN10emscripten8internal11LightTypeIDINS_11memory_viewIiEEE3getEv() {
 return 88;
}

function __ZN10emscripten8internal11LightTypeIDINS_11memory_viewIfEEE3getEv() {
 return 56;
}

function __ZN10emscripten8internal11LightTypeIDINS_11memory_viewIeEEE3getEv() {
 return 40;
}

function __ZN10emscripten8internal11LightTypeIDINS_11memory_viewIdEEE3getEv() {
 return 48;
}

function dynCall_i(index) {
 index = index | 0;
 return FUNCTION_TABLE_i[index & 1]() | 0;
}

function __ZNK10__cxxabiv116__shim_type_info5noop2Ev($this) {
 $this = $this | 0;
 return;
}

function __ZNK10__cxxabiv116__shim_type_info5noop1Ev($this) {
 $this = $this | 0;
 return;
}

function __ZN10emscripten8internal19getGenericSignatureIJiiiiiEEEPKcv() {
 return 9864;
}

function b9(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 nullFunc_viii(9);
}

function __ZN10emscripten8internal19getGenericSignatureIJviiiEEEPKcv() {
 return 7842;
}

function __ZN10emscripten8internal19getGenericSignatureIJviifEEEPKcv() {
 return 7750;
}

function __ZN10emscripten8internal19getGenericSignatureIJviidEEEPKcv() {
 return 7877;
}

function __ZN10emscripten8internal19getGenericSignatureIJiiiiEEEPKcv() {
 return 9693;
}

function b11(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = +p2;
 nullFunc_viid(11);
}

function _setLogLevel($level) {
 $level = $level | 0;
 HEAP32[412] = $level;
 return;
}

function __ZN10emscripten8internal19getGenericSignatureIJviiEEEPKcv() {
 return 7885;
}

function __ZN10emscripten8internal19getGenericSignatureIJiiiEEEPKcv() {
 return 9529;
}

function __ZN10emscripten8internal19getGenericSignatureIJdiiEEEPKcv() {
 return 7873;
}

function __ZN10__cxxabiv116__shim_type_infoD2Ev($this) {
 $this = $this | 0;
 return;
}

function __ZN10emscripten8internal19getGenericSignatureIJiiEEEPKcv() {
 return 7882;
}

function _copysignl($x, $y) {
 $x = +$x;
 $y = +$y;
 return +(+_copysign($x, $y));
}

function _scalbnl($x, $n) {
 $x = +$x;
 $n = $n | 0;
 return +(+_scalbn($x, $n));
}

function b2(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_dii(2);
 return 0.0;
}

function b14(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_iii(14);
 return 0;
}

function __ZN10emscripten8internal11LightTypeIDINS_3valEE3getEv() {
 return 136;
}

function dynCall_v(index) {
 index = index | 0;
 FUNCTION_TABLE_v[index & 3]();
}

function _frexpl($x, $e) {
 $x = +$x;
 $e = $e | 0;
 return +(+_frexp($x, $e));
}

function __GLOBAL__sub_I_bind_cpp() {
 ___cxx_global_var_init_127();
 return;
}

function _isupper($c) {
 $c = $c | 0;
 return ($c + -65 | 0) >>> 0 < 26 | 0;
}

function ___errno_location() {
 return (___pthread_self_103() | 0) + 64 | 0;
}

function __ZN10emscripten8internal11LightTypeIDIRKiE3getEv() {
 return 360;
}

function __ZN10emscripten8internal11LightTypeIDIRKdE3getEv() {
 return 400;
}

function _fmodl($x, $y) {
 $x = +$x;
 $y = +$y;
 return +(+_fmod($x, $y));
}

function _arPattCreateHandle() {
 return _arPattCreateHandle2(16, 50) | 0;
}

function __ZN10emscripten8internal11LightTypeIDIvE3getEv() {
 return 304;
}

function __ZN10emscripten8internal11LightTypeIDItE3getEv() {
 return 352;
}

function __ZN10emscripten8internal11LightTypeIDIsE3getEv() {
 return 344;
}

function __ZN10emscripten8internal11LightTypeIDImE3getEv() {
 return 384;
}

function __ZN10emscripten8internal11LightTypeIDIlE3getEv() {
 return 376;
}

function __ZN10emscripten8internal11LightTypeIDIjE3getEv() {
 return 368;
}

function __ZN10emscripten8internal11LightTypeIDIiE3getEv() {
 return 360;
}

function __ZN10emscripten8internal11LightTypeIDIhE3getEv() {
 return 328;
}

function __ZN10emscripten8internal11LightTypeIDIfE3getEv() {
 return 392;
}

function __ZN10emscripten8internal11LightTypeIDIdE3getEv() {
 return 400;
}

function __ZN10emscripten8internal11LightTypeIDIcE3getEv() {
 return 320;
}

function __ZN10emscripten8internal11LightTypeIDIbE3getEv() {
 return 312;
}

function __ZN10emscripten8internal11LightTypeIDIaE3getEv() {
 return 336;
}

function setTempRet0(value) {
 value = value | 0;
 tempRet0 = value;
}

function b7(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_vii(7);
}

function __ZNSt9type_infoD2Ev($this) {
 $this = $this | 0;
 return;
}

function __ZNSt9exceptionD2Ev($this) {
 $this = $this | 0;
 return;
}

function __ZdlPv($ptr) {
 $ptr = $ptr | 0;
 _free($ptr);
 return;
}

function b3(p0, p1) {
 p0 = p0 | 0;
 p1 = +p1;
 nullFunc_vid(3);
}

function _ftell($f) {
 $f = $f | 0;
 return ___ftello($f) | 0;
}

function stackRestore(top) {
 top = top | 0;
 STACKTOP = top;
}

function b4(p0) {
 p0 = p0 | 0;
 nullFunc_di(4);
 return 0.0;
}

function ___pthread_self_613() {
 return _pthread_self() | 0;
}

function ___pthread_self_431() {
 return _pthread_self() | 0;
}

function ___pthread_self_422() {
 return _pthread_self() | 0;
}

function ___pthread_self_104() {
 return _pthread_self() | 0;
}

function ___pthread_self_103() {
 return _pthread_self() | 0;
}

function b8(p0) {
 p0 = p0 | 0;
 nullFunc_ii(8);
 return 0;
}

function _dummy_570($fd) {
 $fd = $fd | 0;
 return $fd | 0;
}

function ___ofl_lock() {
 ___lock(17756);
 return 17764;
}

function _emscripten_get_global_libc() {
 return 17688;
}

function ___ofl_unlock() {
 ___unlock(17756);
 return;
}

function ___unlockfile($f) {
 $f = $f | 0;
 return;
}

function ___lockfile($f) {
 $f = $f | 0;
 return 0;
}

function _getLogLevel() {
 return HEAP32[412] | 0;
}

function b6(p0) {
 p0 = p0 | 0;
 nullFunc_vi(6);
}

function getTempRet0() {
 return tempRet0 | 0;
}

function stackSave() {
 return STACKTOP | 0;
}

function b5() {
 nullFunc_i(5);
 return 0;
}

function _pthread_self() {
 return 2140;
}

function b10() {
 nullFunc_v(10);
}

// EMSCRIPTEN_END_FUNCS
var FUNCTION_TABLE_iiii = [b0,___stdio_write,___stdio_seek,___stdout_write,_sn_write,__ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv,__ZNK10__cxxabiv123__fundamental_type_info9can_catchEPKNS_16__shim_type_infoERPv,_setup,_setMarkerInfoDir,_getTransMatSquare,_getTransMatSquareCont,_getMultiEachMarkerInfo,__ZN10emscripten8internal7InvokerIiJiNSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEEE6invokeEPFiiS8_EiPNS0_11BindingTypeIS8_EUt_E,__ZN10emscripten8internal7InvokerIiJiiEE6invokeEPFiiiEii,___stdio_read,_do_read];
var FUNCTION_TABLE_viiiii = [b1,__ZNK10__cxxabiv117__class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib,__ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib,__ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib];
var FUNCTION_TABLE_dii = [b2,__ZN10emscripten8internal7InvokerIdJiEE6invokeEPFdiEi];
var FUNCTION_TABLE_vid = [b3,_setProjectionNearPlane,_setProjectionFarPlane,_setPattRatio];
var FUNCTION_TABLE_di = [b4,_getProjectionNearPlane,_getProjectionFarPlane,_getPattRatio];
var FUNCTION_TABLE_i = [b5,_getLogLevel];
var FUNCTION_TABLE_vi = [b6,__ZN10__cxxabiv116__shim_type_infoD2Ev,__ZN10__cxxabiv117__class_type_infoD0Ev,__ZNK10__cxxabiv116__shim_type_info5noop1Ev,__ZNK10__cxxabiv116__shim_type_info5noop2Ev,__ZN10__cxxabiv120__si_class_type_infoD0Ev,__ZNSt11logic_errorD2Ev,__ZNSt11logic_errorD0Ev,__ZNSt12length_errorD0Ev,__ZN10__cxxabiv123__fundamental_type_infoD0Ev,__ZN10__cxxabiv121__vmi_class_type_infoD0Ev,__ZNSt3__213unordered_mapIi12arControllerNS_4hashIiEENS_8equal_toIiEENS_9allocatorINS_4pairIKiS1_EEEEED2Ev,__ZNSt3__213unordered_mapIi7ARParamNS_4hashIiEENS_8equal_toIiEENS_9allocatorINS_4pairIKiS1_EEEEED2Ev,_setLogLevel,__ZN10__cxxabiv112_GLOBAL__N_19destruct_EPv,b6];
var FUNCTION_TABLE_vii = [b7,_setThresholdMode,_setThreshold,_setPatternDetectionMode,_setMatrixCodeType,_setLabelingMode,_setImageProcMode,__ZN10emscripten8internal7InvokerIvJiEE6invokeEPFviEi];
var FUNCTION_TABLE_ii = [b8,___stdio_close,__ZNKSt11logic_error4whatEv,_teardown,_getMultiMarkerCount,_loadCamera,_detectMarker,_getMarkerNum,_getDebugMode,_getProcessingImage,_getThresholdMode,_getThreshold,_getPatternDetectionMode,_getMatrixCodeType,_getLabelingMode,_getImageProcMode,__ZN10emscripten8internal7InvokerIiJEE6invokeEPFivE,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8];
var FUNCTION_TABLE_viii = [b9,__ZN10emscripten8internal7InvokerIvJiiEE6invokeEPFviiEii];
var FUNCTION_TABLE_v = [b10,__ZL25default_terminate_handlerv,__ZN10__cxxabiv112_GLOBAL__N_110construct_Ev,b10];
var FUNCTION_TABLE_viid = [b11,__ZN10emscripten8internal7InvokerIvJidEE6invokeEPFvidEid,__ZN10emscripten8internal7InvokerIvJifEE6invokeEPFvifEif,b11];
var FUNCTION_TABLE_iiiii = [b12,__ZN10emscripten8internal7InvokerIiJiiiEE6invokeEPFiiiiEiii];
var FUNCTION_TABLE_viiiiii = [b13,__ZNK10__cxxabiv117__class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib,__ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib,__ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib];
var FUNCTION_TABLE_iii = [b14,_compE,_addMarker,_addMultiMarker,_getMultiMarkerNum,_setMarkerInfoVertex,_getTransMatMultiSquare,_getTransMatMultiSquareRobust,_getMarkerInfo,_setDebugMode,__ZN10emscripten8internal7InvokerIiJiEE6invokeEPFiiEi,__ZN10emscripten8internal7InvokerIiJNSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEEE6invokeEPFiS8_EPNS0_11BindingTypeIS8_EUt_E,b14,b14,b14,b14];
var FUNCTION_TABLE_viiii = [b15,__ZNK10__cxxabiv117__class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi,__ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi,__ZNK10__cxxabiv121__vmi_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi];

  return { __GLOBAL__sub_I_ARToolKitJS_cpp: __GLOBAL__sub_I_ARToolKitJS_cpp, stackSave: stackSave, _i64Subtract: _i64Subtract, ___udivdi3: ___udivdi3, setThrew: setThrew, dynCall_di: dynCall_di, dynCall_viii: dynCall_viii, _bitshift64Lshr: _bitshift64Lshr, dynCall_viid: dynCall_viid, _bitshift64Shl: _bitshift64Shl, _sbrk: _sbrk, _fflush: _fflush, ___errno_location: ___errno_location, _memset: _memset, ___cxa_demangle: ___cxa_demangle, _memcpy: _memcpy, stackAlloc: stackAlloc, ___muldi3: ___muldi3, dynCall_vii: dynCall_vii, ___uremdi3: ___uremdi3, dynCall_vid: dynCall_vid, dynCall_vi: dynCall_vi, getTempRet0: getTempRet0, __GLOBAL__sub_I_bind_cpp: __GLOBAL__sub_I_bind_cpp, setTempRet0: setTempRet0, _i64Add: _i64Add, dynCall_iiii: dynCall_iiii, dynCall_ii: dynCall_ii, _emscripten_get_global_libc: _emscripten_get_global_libc, dynCall_iiiii: dynCall_iiiii, ___getTypeName: ___getTypeName, dynCall_i: dynCall_i, dynCall_viiii: dynCall_viiii, _llvm_bswap_i32: _llvm_bswap_i32, dynCall_viiiii: dynCall_viiiii, _free: _free, runPostSets: runPostSets, dynCall_viiiiii: dynCall_viiiiii, establishStackSpace: establishStackSpace, _memmove: _memmove, stackRestore: stackRestore, _malloc: _malloc, dynCall_iii: dynCall_iii, _emscripten_replace_memory: _emscripten_replace_memory, dynCall_dii: dynCall_dii, dynCall_v: dynCall_v };
})
// EMSCRIPTEN_END_ASM
(Module.asmGlobalArg, Module.asmLibraryArg, buffer);

var real___GLOBAL__sub_I_ARToolKitJS_cpp = asm["__GLOBAL__sub_I_ARToolKitJS_cpp"]; asm["__GLOBAL__sub_I_ARToolKitJS_cpp"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___GLOBAL__sub_I_ARToolKitJS_cpp.apply(null, arguments);
};

var real_stackSave = asm["stackSave"]; asm["stackSave"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_stackSave.apply(null, arguments);
};

var real_getTempRet0 = asm["getTempRet0"]; asm["getTempRet0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_getTempRet0.apply(null, arguments);
};

var real____udivdi3 = asm["___udivdi3"]; asm["___udivdi3"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____udivdi3.apply(null, arguments);
};

var real_setThrew = asm["setThrew"]; asm["setThrew"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_setThrew.apply(null, arguments);
};

var real__bitshift64Lshr = asm["_bitshift64Lshr"]; asm["_bitshift64Lshr"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__bitshift64Lshr.apply(null, arguments);
};

var real__bitshift64Shl = asm["_bitshift64Shl"]; asm["_bitshift64Shl"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__bitshift64Shl.apply(null, arguments);
};

var real__sbrk = asm["_sbrk"]; asm["_sbrk"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__sbrk.apply(null, arguments);
};

var real__fflush = asm["_fflush"]; asm["_fflush"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__fflush.apply(null, arguments);
};

var real____cxa_demangle = asm["___cxa_demangle"]; asm["___cxa_demangle"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____cxa_demangle.apply(null, arguments);
};

var real__llvm_bswap_i32 = asm["_llvm_bswap_i32"]; asm["_llvm_bswap_i32"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__llvm_bswap_i32.apply(null, arguments);
};

var real____muldi3 = asm["___muldi3"]; asm["___muldi3"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____muldi3.apply(null, arguments);
};

var real____uremdi3 = asm["___uremdi3"]; asm["___uremdi3"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____uremdi3.apply(null, arguments);
};

var real_stackAlloc = asm["stackAlloc"]; asm["stackAlloc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_stackAlloc.apply(null, arguments);
};

var real__i64Subtract = asm["_i64Subtract"]; asm["_i64Subtract"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__i64Subtract.apply(null, arguments);
};

var real___GLOBAL__sub_I_bind_cpp = asm["__GLOBAL__sub_I_bind_cpp"]; asm["__GLOBAL__sub_I_bind_cpp"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___GLOBAL__sub_I_bind_cpp.apply(null, arguments);
};

var real_setTempRet0 = asm["setTempRet0"]; asm["setTempRet0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_setTempRet0.apply(null, arguments);
};

var real__i64Add = asm["_i64Add"]; asm["_i64Add"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__i64Add.apply(null, arguments);
};

var real__emscripten_get_global_libc = asm["_emscripten_get_global_libc"]; asm["_emscripten_get_global_libc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__emscripten_get_global_libc.apply(null, arguments);
};

var real____getTypeName = asm["___getTypeName"]; asm["___getTypeName"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____getTypeName.apply(null, arguments);
};

var real____errno_location = asm["___errno_location"]; asm["___errno_location"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____errno_location.apply(null, arguments);
};

var real__free = asm["_free"]; asm["_free"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__free.apply(null, arguments);
};

var real_establishStackSpace = asm["establishStackSpace"]; asm["establishStackSpace"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_establishStackSpace.apply(null, arguments);
};

var real__memmove = asm["_memmove"]; asm["_memmove"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__memmove.apply(null, arguments);
};

var real_stackRestore = asm["stackRestore"]; asm["stackRestore"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_stackRestore.apply(null, arguments);
};

var real__malloc = asm["_malloc"]; asm["_malloc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__malloc.apply(null, arguments);
};
var __GLOBAL__sub_I_ARToolKitJS_cpp = Module["__GLOBAL__sub_I_ARToolKitJS_cpp"] = asm["__GLOBAL__sub_I_ARToolKitJS_cpp"];
var stackSave = Module["stackSave"] = asm["stackSave"];
var getTempRet0 = Module["getTempRet0"] = asm["getTempRet0"];
var ___udivdi3 = Module["___udivdi3"] = asm["___udivdi3"];
var setThrew = Module["setThrew"] = asm["setThrew"];
var _bitshift64Lshr = Module["_bitshift64Lshr"] = asm["_bitshift64Lshr"];
var _bitshift64Shl = Module["_bitshift64Shl"] = asm["_bitshift64Shl"];
var _sbrk = Module["_sbrk"] = asm["_sbrk"];
var _fflush = Module["_fflush"] = asm["_fflush"];
var _memset = Module["_memset"] = asm["_memset"];
var ___cxa_demangle = Module["___cxa_demangle"] = asm["___cxa_demangle"];
var _memcpy = Module["_memcpy"] = asm["_memcpy"];
var _llvm_bswap_i32 = Module["_llvm_bswap_i32"] = asm["_llvm_bswap_i32"];
var ___muldi3 = Module["___muldi3"] = asm["___muldi3"];
var ___uremdi3 = Module["___uremdi3"] = asm["___uremdi3"];
var stackAlloc = Module["stackAlloc"] = asm["stackAlloc"];
var _i64Subtract = Module["_i64Subtract"] = asm["_i64Subtract"];
var __GLOBAL__sub_I_bind_cpp = Module["__GLOBAL__sub_I_bind_cpp"] = asm["__GLOBAL__sub_I_bind_cpp"];
var setTempRet0 = Module["setTempRet0"] = asm["setTempRet0"];
var _i64Add = Module["_i64Add"] = asm["_i64Add"];
var _emscripten_get_global_libc = Module["_emscripten_get_global_libc"] = asm["_emscripten_get_global_libc"];
var ___getTypeName = Module["___getTypeName"] = asm["___getTypeName"];
var ___errno_location = Module["___errno_location"] = asm["___errno_location"];
var _free = Module["_free"] = asm["_free"];
var runPostSets = Module["runPostSets"] = asm["runPostSets"];
var establishStackSpace = Module["establishStackSpace"] = asm["establishStackSpace"];
var _memmove = Module["_memmove"] = asm["_memmove"];
var stackRestore = Module["stackRestore"] = asm["stackRestore"];
var _malloc = Module["_malloc"] = asm["_malloc"];
var _emscripten_replace_memory = Module["_emscripten_replace_memory"] = asm["_emscripten_replace_memory"];
var dynCall_iiii = Module["dynCall_iiii"] = asm["dynCall_iiii"];
var dynCall_viiiii = Module["dynCall_viiiii"] = asm["dynCall_viiiii"];
var dynCall_dii = Module["dynCall_dii"] = asm["dynCall_dii"];
var dynCall_vid = Module["dynCall_vid"] = asm["dynCall_vid"];
var dynCall_di = Module["dynCall_di"] = asm["dynCall_di"];
var dynCall_i = Module["dynCall_i"] = asm["dynCall_i"];
var dynCall_vi = Module["dynCall_vi"] = asm["dynCall_vi"];
var dynCall_vii = Module["dynCall_vii"] = asm["dynCall_vii"];
var dynCall_ii = Module["dynCall_ii"] = asm["dynCall_ii"];
var dynCall_viii = Module["dynCall_viii"] = asm["dynCall_viii"];
var dynCall_v = Module["dynCall_v"] = asm["dynCall_v"];
var dynCall_viid = Module["dynCall_viid"] = asm["dynCall_viid"];
var dynCall_iiiii = Module["dynCall_iiiii"] = asm["dynCall_iiiii"];
var dynCall_viiiiii = Module["dynCall_viiiiii"] = asm["dynCall_viiiiii"];
var dynCall_iii = Module["dynCall_iii"] = asm["dynCall_iii"];
var dynCall_viiii = Module["dynCall_viiii"] = asm["dynCall_viiii"];
;
Runtime.stackAlloc = Module['stackAlloc'];
Runtime.stackSave = Module['stackSave'];
Runtime.stackRestore = Module['stackRestore'];
Runtime.establishStackSpace = Module['establishStackSpace'];
Runtime.setTempRet0 = Module['setTempRet0'];
Runtime.getTempRet0 = Module['getTempRet0'];


// === Auto-generated postamble setup entry stuff ===

Module['asm'] = asm;






/**
 * @constructor
 * @extends {Error}
 */
function ExitStatus(status) {
  this.name = "ExitStatus";
  this.message = "Program terminated with exit(" + status + ")";
  this.status = status;
};
ExitStatus.prototype = new Error();
ExitStatus.prototype.constructor = ExitStatus;

var initialStackTop;
var preloadStartTime = null;
var calledMain = false;

dependenciesFulfilled = function runCaller() {
  // If run has never been called, and we should call run (INVOKE_RUN is true, and Module.noInitialRun is not false)
  if (!Module['calledRun']) run();
  if (!Module['calledRun']) dependenciesFulfilled = runCaller; // try this again later, after new deps are fulfilled
}

Module['callMain'] = Module.callMain = function callMain(args) {
  assert(runDependencies == 0, 'cannot call main when async dependencies remain! (listen on __ATMAIN__)');
  assert(__ATPRERUN__.length == 0, 'cannot call main when preRun functions remain to be called');

  args = args || [];

  ensureInitRuntime();

  var argc = args.length+1;
  function pad() {
    for (var i = 0; i < 4-1; i++) {
      argv.push(0);
    }
  }
  var argv = [allocate(intArrayFromString(Module['thisProgram']), 'i8', ALLOC_NORMAL) ];
  pad();
  for (var i = 0; i < argc-1; i = i + 1) {
    argv.push(allocate(intArrayFromString(args[i]), 'i8', ALLOC_NORMAL));
    pad();
  }
  argv.push(0);
  argv = allocate(argv, 'i32', ALLOC_NORMAL);


  try {

    var ret = Module['_main'](argc, argv, 0);


    // if we're not running an evented main loop, it's time to exit
    exit(ret, /* implicit = */ true);
  }
  catch(e) {
    if (e instanceof ExitStatus) {
      // exit() throws this once it's done to make sure execution
      // has been stopped completely
      return;
    } else if (e == 'SimulateInfiniteLoop') {
      // running an evented main loop, don't immediately exit
      Module['noExitRuntime'] = true;
      return;
    } else {
      var toLog = e;
      if (e && typeof e === 'object' && e.stack) {
        toLog = [e, e.stack];
      }
      Module.printErr('exception thrown: ' + toLog);
      Module['quit'](1, e);
    }
  } finally {
    calledMain = true;
  }
}




/** @type {function(Array=)} */
function run(args) {
  args = args || Module['arguments'];

  if (preloadStartTime === null) preloadStartTime = Date.now();

  if (runDependencies > 0) {
    return;
  }

  writeStackCookie();

  preRun();

  if (runDependencies > 0) return; // a preRun added a dependency, run will be called later
  if (Module['calledRun']) return; // run may have just been called through dependencies being fulfilled just in this very frame

  function doRun() {
    if (Module['calledRun']) return; // run may have just been called while the async setStatus time below was happening
    Module['calledRun'] = true;

    if (ABORT) return;

    ensureInitRuntime();

    preMain();

    if (ENVIRONMENT_IS_WEB && preloadStartTime !== null) {
      Module.printErr('pre-main prep time: ' + (Date.now() - preloadStartTime) + ' ms');
    }

    if (Module['onRuntimeInitialized']) Module['onRuntimeInitialized']();

    if (Module['_main'] && shouldRunNow) Module['callMain'](args);

    postRun();
  }

  if (Module['setStatus']) {
    Module['setStatus']('Running...');
    setTimeout(function() {
      setTimeout(function() {
        Module['setStatus']('');
      }, 1);
      doRun();
    }, 1);
  } else {
    doRun();
  }
  checkStackCookie();
}
Module['run'] = Module.run = run;

function exit(status, implicit) {
  if (implicit && Module['noExitRuntime']) {
    Module.printErr('exit(' + status + ') implicitly called by end of main(), but noExitRuntime, so not exiting the runtime (you can use emscripten_force_exit, if you want to force a true shutdown)');
    return;
  }

  if (Module['noExitRuntime']) {
    Module.printErr('exit(' + status + ') called, but noExitRuntime, so halting execution but not exiting the runtime or preventing further async execution (you can use emscripten_force_exit, if you want to force a true shutdown)');
  } else {

    ABORT = true;
    EXITSTATUS = status;
    STACKTOP = initialStackTop;

    exitRuntime();

    if (Module['onExit']) Module['onExit'](status);
  }

  if (ENVIRONMENT_IS_NODE) {
    process['exit'](status);
  }
  Module['quit'](status, new ExitStatus(status));
}
Module['exit'] = Module.exit = exit;

var abortDecorators = [];

function abort(what) {
  if (Module['onAbort']) {
    Module['onAbort'](what);
  }

  if (what !== undefined) {
    Module.print(what);
    Module.printErr(what);
    what = JSON.stringify(what)
  } else {
    what = '';
  }

  ABORT = true;
  EXITSTATUS = 1;

  var extra = '';

  var output = 'abort(' + what + ') at ' + stackTrace() + extra;
  if (abortDecorators) {
    abortDecorators.forEach(function(decorator) {
      output = decorator(output, what);
    });
  }
  throw output;
}
Module['abort'] = Module.abort = abort;

// {{PRE_RUN_ADDITIONS}}

if (Module['preInit']) {
  if (typeof Module['preInit'] == 'function') Module['preInit'] = [Module['preInit']];
  while (Module['preInit'].length > 0) {
    Module['preInit'].pop()();
  }
}

// shouldRunNow refers to calling main(), not run().
var shouldRunNow = true;
if (Module['noInitialRun']) {
  shouldRunNow = false;
}


run();

// {{POST_RUN_ADDITIONS}}





// {{MODULE_ADDITIONS}}






